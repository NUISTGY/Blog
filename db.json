{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/melody/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/melody/source/js/hexo-theme-melody.js","path":"js/hexo-theme-melody.js","modified":0,"renderable":1},{"_id":"themes/melody/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/melody/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/melody/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/melody/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/melody/source/js/copy.js","path":"js/copy.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/fireworks.js","path":"js/fireworks.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/head.js","path":"js/head.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/transition.js","path":"js/transition.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/anime.min.js","path":"js/third-party/anime.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","path":"js/third-party/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.min.js","path":"js/third-party/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","path":"js/third-party/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.min.js","path":"js/third-party/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/markdown.min.js","path":"js/third-party/reveal/markdown.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/marked.min.js","path":"js/third-party/reveal/marked.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/math.min.js","path":"js/third-party/reveal/math.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/notes.min.js","path":"js/third-party/reveal/notes.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/reveal.min.js","path":"js/third-party/reveal/reveal.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/zoom.min.js","path":"js/third-party/reveal/zoom.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","path":"js/third-party/reveal/head.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/highlight.min.js","path":"js/third-party/reveal/highlight.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/melody/.eslintignore","hash":"719a633358c168ec04b544a5a306fc454471f72f","modified":1562668202000},{"_id":"themes/melody/.eslintrc","hash":"2c75ddb670b21591023b2c4f52ecfb02578b5eae","modified":1562668202000},{"_id":"themes/melody/.gitignore","hash":"371c0a57184696c2069b146fc8ccaa285ca7626c","modified":1562668202000},{"_id":"themes/melody/.travis.demo.yml","hash":"977db46c56f95e0b475326ee7499890aa16bd971","modified":1562668202000},{"_id":"themes/melody/FAQ.md","hash":"2e4871193be2bbade191c1064216072cbe61ab72","modified":1562668202000},{"_id":"themes/melody/LICENSE","hash":"e7e7b7677bb19563a9013e936486bdefeb761d07","modified":1562668202000},{"_id":"themes/melody/README.md","hash":"69b44680fc2cf884b29d44e279efacf5a3f5f386","modified":1562668202000},{"_id":"themes/melody/_config.yml","hash":"f1c4a26387ded88c99789928a560ba10ba4c995c","modified":1662371477581},{"_id":"themes/melody/package.json","hash":"0dc3179de85b18cbb351c03a3949b262030250f3","modified":1562668202000},{"_id":"themes/melody/stylus_format.json","hash":"53008fbf66531953489ab0f2ce166576b7ba1ab7","modified":1562668202000},{"_id":"themes/melody/scripts/hexo-plugins.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1562668202000},{"_id":"source/_data/melody.yml","hash":"673d9a5f024109d0ca7c3b03c7cb4bcb1dd05dc7","modified":1662348666951},{"_id":"source/_posts/Java学习之路(1).md","hash":"76a867c4ff8c3f5140019b26693442076555562d","modified":1582869186000},{"_id":"source/_posts/Java学习之路(10).md","hash":"383e3e086cb48c41539aa4f762d7ddd2c69e0394","modified":1582869138000},{"_id":"source/_posts/Java学习之路(11).md","hash":"3bd46fccaf955f4505ee4dacaab06774b40862f4","modified":1582869132000},{"_id":"source/_posts/Java学习之路(12).md","hash":"1b5ee4e3b476ee13c8fa898816b7c4fd6c8263cd","modified":1582869124000},{"_id":"source/_posts/Java学习之路(13).md","hash":"b587e0fc927d81ca33da73dfac4ed07c936d0e0f","modified":1582869120000},{"_id":"source/_posts/Java学习之路(14).md","hash":"ec361b0f32fcb5e39c18c99ec2d6b8e81bdba828","modified":1582869110000},{"_id":"source/_posts/Java学习之路(15).md","hash":"a1cbc88a02f7da23e76ae97590cc29e25b17ece5","modified":1582869102000},{"_id":"source/_posts/Java学习之路(16).md","hash":"da25936445baed682b7d425fd97b2c453bad2ab8","modified":1582869092000},{"_id":"source/_posts/Java学习之路(17).md","hash":"74bbc48ddd3582276e661c8498f885b3e76ea69f","modified":1582869234000},{"_id":"source/_posts/Java学习之路(18).md","hash":"08a2371f8188cccd0746a8322dca84eebde0afc2","modified":1582869620000},{"_id":"source/_posts/Java学习之路(19).md","hash":"441a9a710f48faf76f6f88ca8aea8bb2b3d08778","modified":1582869614000},{"_id":"source/_posts/Java学习之路(2).md","hash":"c0484d3b107f3a14ab77ff00728fee909229b52b","modified":1582867100000},{"_id":"source/_posts/Java学习之路(20).md","hash":"4046515ed8e7a8efcc8d2e0474c016ae29d9211e","modified":1582869656000},{"_id":"source/_posts/Java学习之路(21).md","hash":"684b9f1766cbfb29a8c775e47a5e44cdf526ae92","modified":1583033576000},{"_id":"source/_posts/Java学习之路(22).md","hash":"31165e84431b9e7f0f0e5cd8df3664dc12ae095a","modified":1583033626000},{"_id":"source/_posts/Java学习之路(23).md","hash":"84c937db96c1f37ab4efd14fae50753d850d6a03","modified":1583033674000},{"_id":"source/_posts/Java学习之路(24).md","hash":"802e986be2be451a0c84f725cc05ce1d549456e2","modified":1583033714000},{"_id":"source/_posts/Java学习之路(25).md","hash":"475b7e85dc1594e1f29481c78405853a16418179","modified":1583033812000},{"_id":"source/_posts/Java学习之路(26).md","hash":"7c5a718556b7e716daa9c0556f82d8ca65ea824a","modified":1583033852000},{"_id":"source/_posts/Java学习之路(27).md","hash":"195dcdfc53125df831e9e3d3edbb3535f5a3ab06","modified":1583033918000},{"_id":"source/_posts/Java学习之路(28).md","hash":"38feb8e4ac7a863af93aaf43e88714e10f77327a","modified":1583033992000},{"_id":"source/_posts/Java学习之路(29).md","hash":"a9d5f5509be68981afb762298f8b71a8dc1e2139","modified":1583034046000},{"_id":"source/_posts/Java学习之路(3).md","hash":"c096a9b65d36cd3afacb38b78a3d36f8007f6328","modified":1582869176000},{"_id":"source/_posts/Java学习之路(30).md","hash":"dfe6de71a527de780aab8e92229db8320feeac09","modified":1583034106000},{"_id":"source/_posts/Java学习之路(31).md","hash":"e7ca6bd166d785a686b579f414331c0de4e942ff","modified":1583034146000},{"_id":"source/_posts/Java学习之路(32).md","hash":"084df7b3cd6f650e9ba80a6361cfbe3fabb92716","modified":1583034194000},{"_id":"source/_posts/Java学习之路(33).md","hash":"745e60aa2fc008ab074211e25dce5863463cad29","modified":1583034266000},{"_id":"source/_posts/Java学习之路(34).md","hash":"9729c9070f45540748bd718019a44517c072e57d","modified":1583034302000},{"_id":"source/_posts/Java学习之路(35).md","hash":"9729c9070f45540748bd718019a44517c072e57d","modified":1583034662000},{"_id":"source/_posts/Java学习之路(36).md","hash":"8e5668adfbfb9bae1f9e7f60f111ec6fb2933af8","modified":1583034642000},{"_id":"source/_posts/Java学习之路(38).md","hash":"841e61c2120fe182f5e10363096dbd33951ffcd0","modified":1584351034000},{"_id":"source/_posts/Java学习之路(39).md","hash":"3ba2fb6a655d5851bc035a5c9240f9583e97b14d","modified":1663939065908},{"_id":"source/_posts/Java学习之路(4).md","hash":"06f76cc655bd315f6d139e6d26fdc9acc7e71f6f","modified":1582869172000},{"_id":"source/_posts/Java学习之路(5).md","hash":"fc00b2e3f53dd49d49dc2560ffae8caf72bbd1d8","modified":1582869164000},{"_id":"source/_posts/Java学习之路(6).md","hash":"828826a71e282ddd3b9628d1deb86c9559b1d13a","modified":1582869160000},{"_id":"source/_posts/Java学习之路(7).md","hash":"fdd7f24c5f768c4028943c96112c03aee24b4860","modified":1582869154000},{"_id":"source/_posts/Java学习之路(8).md","hash":"8655990183693cce8813ed353bcf5824326e6dad","modified":1582869148000},{"_id":"source/_posts/Java学习之路(9).md","hash":"539f3b5d19775bc51512cdbb73bfb4a1122a7e98","modified":1582869142000},{"_id":"source/_posts/Maven中dependence和dependenceManagement.md","hash":"d0ecf996abf3bf9380d0889d7e5b0c9e87e78c95","modified":1662527015146},{"_id":"source/_posts/Java学习之路(37).md","hash":"99bc7f5cf5c3db1c4de6dd1244f00a57ef2d0539","modified":1662355255445},{"_id":"source/_posts/Person Re-identification数据集描述——Market-1501.md","hash":"224753960ab124c1344aa1d81e7752c4d02c6785","modified":1571988628000},{"_id":"source/_posts/SpringMVC - 获取Get请求参数详解.md","hash":"4f8a46fdc17fa26d5846839c79b2d4746137a671","modified":1663154574646},{"_id":"source/_posts/hello-world.md","hash":"f4deb743a099bf87357c3187988bdd2fbf397cb9","modified":1662349614744},{"_id":"source/_posts/mnist数据集下载与处理.md","hash":"07fa85539653bd3c0790f3fa6b87ea644cb40361","modified":1662349773491},{"_id":"source/_posts/PSHRNet.md","hash":"8193e6b6f213e6eddf65e34c6756eee892e6e1cd","modified":1662431376116},{"_id":"source/_posts/Matlab数模(1).md","hash":"d2be0ce1b77f47c597e9956a79adc2ce7225a61c","modified":1662355328753},{"_id":"source/_posts/Matlab数模(2).md","hash":"92c393df5ac61ed746b2202e3d343730eaf9f83d","modified":1662355443123},{"_id":"source/_posts/numpy数组和python列表的区别.md","hash":"14a790d7f5c05cb4aa7ec7911dc9d0e4fa07fcaf","modified":1662349768937},{"_id":"source/_posts/servlet进化之旅.md","hash":"18f7cdebd5ca82cbaaec9b3a24b59997033d9c1e","modified":1662538898114},{"_id":"source/_posts/mnist数据集介绍.md","hash":"ec89fed0f324234147e06642db24eabe0fa247e5","modified":1662357197546},{"_id":"source/_posts/mybatis——解决属性名和数据库字段名不一致问题（注解方式).md","hash":"fef6e8fcb510fb8f8280d04794fcef857214260c","modified":1662527648493},{"_id":"source/_posts/numpy中的axis参数.md","hash":"0c654572189064a2543497ce0dd4849835161d74","modified":1662349264047},{"_id":"source/_posts/关于ReLU的问题及思考.md","hash":"a0687e51fba88c5737ddafc4a152b5b48906be78","modified":1662358449713},{"_id":"source/_posts/行人重识别代码实战（一）.md","hash":"c01c5e4d09bef2f8b9ca1e03371cfa27abf7054b","modified":1662357432281},{"_id":"source/_posts/行人重识别代码实战（三）.md","hash":"9b554d52c3f3a5c6d6685373dfdfe71c76a10f68","modified":1662357282418},{"_id":"source/_posts/行人重识别代码实战（二）.md","hash":"caf1694135c567cafd9fa1869aff520c637808c7","modified":1662357351722},{"_id":"source/_posts/行人重识别初识.md","hash":"4a98f1a323b0b3b22332e8ecde8ba30b209e7dbb","modified":1662358057485},{"_id":"source/_posts/感知机初识.md","hash":"866160d2cad240150e15363d2c44607da15aa33b","modified":1662358762645},{"_id":"source/_posts/论文笔记（一）.md","hash":"8f449eff5338360459dd06483d07fab4fba5ed8b","modified":1662357807516},{"_id":"source/_posts/激活函数（一）.md","hash":"2b61e6b8b16599718c9f7ab3c885522d2b887adb","modified":1662358624103},{"_id":"source/_posts/简单的3层神经网络实现.md","hash":"fb3879260832a2ef5576469eee18b5c46274133d","modified":1662358701459},{"_id":"source/_posts/鱼书踩坑（一）.md","hash":"962ba4fc8e986350ec85f03f7f252cb792b4e4cc","modified":1662349616520},{"_id":"source/categories/index.md","hash":"bec105a277774c06d5e3b1f45e5c493046ee92b3","modified":1562835136000},{"_id":"source/tags/index.md","hash":"391320ad2507d9650249c9c903e057072cb870d8","modified":1562835146000},{"_id":"themes/melody/.git/FETCH_HEAD","hash":"0c82cb4bc5eab554d2552172b0619f94f811444e","modified":1562668390000},{"_id":"themes/melody/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1562668202000},{"_id":"themes/melody/.git/ORIG_HEAD","hash":"6182e96489d5e3cc5a84b84a159da7a011b81d87","modified":1562668390000},{"_id":"themes/melody/.git/config","hash":"d15ada34b8f38ff379372b129e946457ccfb5653","modified":1562668202000},{"_id":"themes/melody/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1562668196000},{"_id":"themes/melody/.git/index","hash":"9dd3e3b59a7fc22a50c224b280e16c2f1b99510c","modified":1662339652468},{"_id":"themes/melody/.git/packed-refs","hash":"226b6395afa77982d6f591b75d4dff70ff5da59c","modified":1562668202000},{"_id":"themes/melody/.github/ISSUE_TEMPLATE.md","hash":"d1420092142acd3f38c31099934d84bf5c4a4b7c","modified":1562668202000},{"_id":"themes/melody/.vscode/launch.json","hash":"52d28f3455d1e9ff1d7c56316773a77710e89751","modified":1562668202000},{"_id":"themes/melody/.vscode/settings.json","hash":"46d72f2c9c27996464091654d1687babcd603d24","modified":1562668202000},{"_id":"themes/melody/languages/default.yml","hash":"4a60ece6d7a3d23ac2966115835fdcfa7bd3e9e7","modified":1562668202000},{"_id":"themes/melody/languages/en.yml","hash":"4a60ece6d7a3d23ac2966115835fdcfa7bd3e9e7","modified":1562668202000},{"_id":"themes/melody/languages/zh-Hans.yml","hash":"efa9712848d8316b38270f9674d7392a640d6af1","modified":1562668202000},{"_id":"themes/melody/layout/archive.pug","hash":"f3198ed4d59ca9d0423060a428106a857247a8f8","modified":1562668202000},{"_id":"themes/melody/layout/category.pug","hash":"27fe85787ee1e4bba75a6eadbf86f7ffc58cb66a","modified":1562668202000},{"_id":"themes/melody/layout/gallery.pug","hash":"1470a86b329eb5c60d6fa6a7bafa25ddf1255f97","modified":1562668202000},{"_id":"themes/melody/layout/index.pug","hash":"d15a36b5c8f1bec367888edb358e70b47eb15ea9","modified":1562668202000},{"_id":"themes/melody/layout/page.pug","hash":"bbcd45cc14b69e260cf7bf851d1926dedc5cd3be","modified":1562668202000},{"_id":"themes/melody/layout/post.pug","hash":"e0d840ee90bf773e1dcc14e884c809822baefb09","modified":1562668202000},{"_id":"themes/melody/layout/slides.pug","hash":"1e84a92d5b854dd233e0b511d59c1cd7c8d647a1","modified":1562668202000},{"_id":"themes/melody/layout/tag.pug","hash":"6b5c5c08e9a6773a4fce8583fdf614a784beb045","modified":1562668202000},{"_id":"themes/melody/scripts/gallery-tag.js","hash":"b18e4a809de37da54ea914452ce4a24785fa7621","modified":1562668202000},{"_id":"themes/melody/scripts/replace-config.js","hash":"9d5378898a068e77b5e601c950b631144bd743cf","modified":1562668202000},{"_id":"themes/melody/source/favicon.ico","hash":"6cdeaa296bfb310e0cfa886e5220364778b8891f","modified":1316143966000},{"_id":"source/_posts/MySql.md","hash":"a03612019802d38dd0290ade5b5caea5f14c95e7","modified":1662527023751},{"_id":"themes/melody/source/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1562668202000},{"_id":"source/about/index.md","hash":"74a8fc43017b01bcae8aa86de1b528855f8ca4f7","modified":1662370196625},{"_id":"source/_posts/论文笔记(一).md","hash":"54a8876a04548a2cda28fc7ff1cfb8cc869bae9e","modified":1662353957747},{"_id":"source/_posts/试玩YOLOv3多目标检测.md","hash":"4b58e148a16874ea359ec368df1a5c2a27f7c957","modified":1662357065001},{"_id":"themes/melody/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1562668196000},{"_id":"themes/melody/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1562668196000},{"_id":"themes/melody/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1562668196000},{"_id":"themes/melody/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1562668196000},{"_id":"themes/melody/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1562668196000},{"_id":"themes/melody/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1562668196000},{"_id":"themes/melody/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1562668196000},{"_id":"themes/melody/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1562668196000},{"_id":"themes/melody/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1562668196000},{"_id":"themes/melody/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1562668196000},{"_id":"themes/melody/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1562668196000},{"_id":"themes/melody/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1562668196000},{"_id":"themes/melody/.git/logs/HEAD","hash":"6c5b7ce31b5736fd6367216a0778341bc498db8f","modified":1562668202000},{"_id":"themes/melody/layout/includes/additional-js.pug","hash":"7137f872dde2e44616098f92e1af6bc291e70bbe","modified":1562668202000},{"_id":"themes/melody/layout/includes/config.pug","hash":"42e523fef2e9f285d989d494f0a6fce485921719","modified":1562668202000},{"_id":"themes/melody/layout/includes/footer.pug","hash":"c5968d30a668c3d1b8e658d784b661799d3ba48a","modified":1562668202000},{"_id":"themes/melody/layout/includes/head.pug","hash":"4cf465d5ac4f335a6bc57cec29fddf9ac0943741","modified":1562668202000},{"_id":"themes/melody/layout/includes/header.pug","hash":"664705214dc167e7a323fea6e7874790d870fb3c","modified":1562668202000},{"_id":"themes/melody/layout/includes/layout.pug","hash":"3b4dc121038cbc6509621d9db4e7eafffb850fdc","modified":1562668202000},{"_id":"themes/melody/layout/includes/nav.pug","hash":"90ad9fdeb551f524eac6f25090346a884d13d2dd","modified":1562668202000},{"_id":"themes/melody/layout/includes/pagination.pug","hash":"a28c30fca4780a2afd5375f98833637b6b6e941a","modified":1562668202000},{"_id":"themes/melody/layout/includes/recent-posts.pug","hash":"f37dc3576cc45ad3da097b58f420b5b523d8a9a5","modified":1562668202000},{"_id":"themes/melody/layout/includes/sidebar.pug","hash":"4a531e4f09417e2172ebda39c7d7c856b3979ced","modified":1562668202000},{"_id":"themes/melody/source/css/index.styl","hash":"c2823ad6013df237993eea5cf190c313270da4db","modified":1562668202000},{"_id":"themes/melody/source/css/var.styl","hash":"7a1f4099b71741e3a156003234ef9a9a48b66abe","modified":1562668202000},{"_id":"themes/melody/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1562668202000},{"_id":"themes/melody/source/img/avatar.png","hash":"48e410926305699eac0f559bb13ce776ae3d2f5a","modified":1562677932000},{"_id":"themes/melody/source/js/copy.js","hash":"8d21285129bf9638d18bacaca21945e24ec5b872","modified":1562668202000},{"_id":"themes/melody/source/js/fancybox.js","hash":"59f9356b60732438a40a8ab7af17a70171a60b00","modified":1562668202000},{"_id":"themes/melody/source/js/fireworks.js","hash":"f4f902392525133028f501bef2afa6b1045b5b9c","modified":1562668202000},{"_id":"themes/melody/source/js/head.js","hash":"1f0693d5d985b4bc5de16c79c5c9d4601260d617","modified":1562668202000},{"_id":"themes/melody/source/js/scroll.js","hash":"b45eb54e5c6ba67cea5bee365885735ca4e4f4f9","modified":1562668202000},{"_id":"themes/melody/source/js/sidebar.js","hash":"6906dcca3a6b9bd46489ca378bc1e74e454168ac","modified":1562668202000},{"_id":"themes/melody/source/js/transition.js","hash":"254820390dd5dfe9ee9097f3ef58e8c17b4bb280","modified":1562668202000},{"_id":"themes/melody/source/js/utils.js","hash":"5ff6609b1d674f7879f30e491bdd3c69139704da","modified":1562668202000},{"_id":"themes/melody/layout/includes/gallery/script.pug","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1562668202000},{"_id":"themes/melody/.git/objects/pack/pack-8c0f2a8562d25e23c8f819bc3b42e3afadbdc473.idx","hash":"56a850700cba0f04343147d91e980e8b0e2ee071","modified":1562668202000},{"_id":"themes/melody/.git/refs/heads/master","hash":"6182e96489d5e3cc5a84b84a159da7a011b81d87","modified":1562668202000},{"_id":"themes/melody/layout/includes/comments/disqus.pug","hash":"0d753ace1190deebd9173279ab5369e4a30c53a8","modified":1562668202000},{"_id":"themes/melody/layout/includes/comments/gitalk.pug","hash":"590bc5af43bc55182157dbac65e7cd8bf39f410d","modified":1562668202000},{"_id":"themes/melody/layout/includes/comments/gitment.pug","hash":"97f524092775c9b7e618c691df40b4bce9e121ac","modified":1562668202000},{"_id":"themes/melody/layout/includes/comments/index.pug","hash":"b8c1344a2760a46774f1894967c879d72802556d","modified":1562668202000},{"_id":"themes/melody/layout/includes/comments/laibili.pug","hash":"1ffb80147fd443144ca6cf0230515f229eba6745","modified":1562668202000},{"_id":"themes/melody/layout/includes/comments/valine.pug","hash":"81e10998d5a2d28857f1c32e2d8b1ba1d84ce0f8","modified":1562668202000},{"_id":"themes/melody/layout/includes/count/busuanzi.pug","hash":"760be9ea92e5eb6959f37b76b9c13fb627893b0a","modified":1562668202000},{"_id":"themes/melody/layout/includes/gallery/layout.pug","hash":"8ff96c4f9afb416c5fc586c9585ae51cb6129529","modified":1562668202000},{"_id":"themes/melody/layout/includes/mixins/article-sort.pug","hash":"05c080cbd236b7d94765350cc699b92736ca4609","modified":1562668202000},{"_id":"themes/melody/layout/includes/mixins/slide.pug","hash":"cde884e97dd980bf05910934ce1d52ef3bd5df9c","modified":1562668202000},{"_id":"themes/melody/layout/includes/search/algolia.pug","hash":"3d2b2de0e199ab1fb151f41f2bbaac909f3d3d12","modified":1562668202000},{"_id":"themes/melody/layout/includes/search/index.pug","hash":"66b4f4e8119e987cd3f9907298689a1408a05859","modified":1562668202000},{"_id":"themes/melody/layout/includes/search/local-search.pug","hash":"205aff585f7763b61b8597c6121e6d8c5f9329a4","modified":1562668202000},{"_id":"themes/melody/layout/includes/share/add-this.pug","hash":"055d41a0cc135b8fb02da8faa1df5faacb8fc13d","modified":1562668202000},{"_id":"themes/melody/layout/includes/share/index.pug","hash":"49cf38dc1f25f5646bf28568b08b4e35d5822648","modified":1562668202000},{"_id":"themes/melody/layout/includes/share/share-js.pug","hash":"7d8660614f5b80e9078c184456f4742a520c5d56","modified":1562668202000},{"_id":"themes/melody/layout/includes/slide/layout.pug","hash":"ed853a81c74e8f21e5acca0cc4738bc4f204b751","modified":1562668202000},{"_id":"themes/melody/layout/includes/slide/script.pug","hash":"245823713e729136779af3f0cbb33bf1de5a5103","modified":1562668202000},{"_id":"themes/melody/layout/includes/third-party/katex.pug","hash":"d5ed449e505740620c8f8a110f124bec8cb46be0","modified":1562668202000},{"_id":"themes/melody/layout/includes/third-party/mathjax.pug","hash":"0afc0e488ef64f5cb27b9fc90b13f0f9e9f958a5","modified":1562668202000},{"_id":"themes/melody/source/css/_global/index.styl","hash":"a6ad6d2675e975883855a1fa3a634c7ba06d4685","modified":1562668202000},{"_id":"themes/melody/source/css/_highlight/diff.styl","hash":"bb83b379954dc2e7f5a9915e5ed50da7223e3efa","modified":1562668202000},{"_id":"themes/melody/source/css/_highlight/highlight.styl","hash":"26b397cd1528680095407c67f9c8ae069ed4eafa","modified":1562668202000},{"_id":"themes/melody/source/css/_highlight/theme.styl","hash":"89af8e4eb6adacee6693b3df46d87a0b1b2b0d2d","modified":1562668202000},{"_id":"themes/melody/source/css/_layout/comments.styl","hash":"3b32040e894978ec9be6569f44fd5557734f2340","modified":1562668202000},{"_id":"themes/melody/source/css/_layout/footer.styl","hash":"367a6d225d2a70aa45bcc48b38989c1efdbebfcc","modified":1562668202000},{"_id":"themes/melody/source/css/_layout/head.styl","hash":"9c14f6d686a00507212e15a0aabd8b9af5634e1d","modified":1562668202000},{"_id":"themes/melody/source/css/_layout/page.styl","hash":"c6da797bf07b5dbf2a94f48237e3e0dc7e976f37","modified":1562668202000},{"_id":"themes/melody/source/css/_layout/pagination.styl","hash":"ad5dc99b438588f92115592ed2d65a47c980720d","modified":1562668202000},{"_id":"themes/melody/source/css/_layout/post.styl","hash":"5d6d635ca50c762a2ab2cdf8c82b2790b34bf275","modified":1562668202000},{"_id":"themes/melody/source/css/_layout/sidebar.styl","hash":"29b02d3c319d84ab98dddec449f4bc83fbfdad36","modified":1562668202000},{"_id":"themes/melody/source/css/_search/algolia.styl","hash":"0168c78d28fbc8996ad9e1764457a6526404515b","modified":1562668202000},{"_id":"themes/melody/source/css/_search/index.styl","hash":"b16e4c15ad5844096f427eb3bdb49c5bb0bbcaf7","modified":1562668202000},{"_id":"themes/melody/source/css/_search/local-search.styl","hash":"adb2663fcfee1c84461231472f228aa82c6478bd","modified":1562668202000},{"_id":"themes/melody/source/css/_third-party/jquery.fancybox.min.css","hash":"f9c94ec04062a1bfe1ef894c49e6ec33fa121778","modified":1562668202000},{"_id":"themes/melody/source/css/_third-party/normalize.min.css","hash":"e12eef6d6811c132f4f2fcf6c936be384191bcaf","modified":1562668202000},{"_id":"themes/melody/source/js/search/algolia.js","hash":"8a6673cb1616b50a5ac8b2dc20fb3475bc32039f","modified":1562668202000},{"_id":"themes/melody/source/js/search/local-search.js","hash":"a642a93fb52ebc87f05e5d3cee38618013fda539","modified":1562668202000},{"_id":"themes/melody/source/js/third-party/anime.min.js","hash":"7c9416c1b444773b2d82e797131d6047364645a3","modified":1562668202000},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","hash":"0acabccbb20d722141fa15b37d535807092b2c88","modified":1562668202000},{"_id":"themes/melody/source/js/third-party/velocity.min.js","hash":"15a9dc404e02f2cd9b46cc71293b65671976567b","modified":1562668202000},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1562668202000},{"_id":"themes/melody/source/js/third-party/jquery.min.js","hash":"67bdacbd077ee59f411109fd119ee9f58db15a5f","modified":1562668202000},{"_id":"themes/melody/.git/logs/refs/heads/master","hash":"6c5b7ce31b5736fd6367216a0778341bc498db8f","modified":1562668202000},{"_id":"themes/melody/.git/refs/remotes/origin/HEAD","hash":"2c142208129b78a4616cbb6798f96f4fb3580296","modified":1562668202000},{"_id":"themes/melody/source/js/third-party/reveal/markdown.min.js","hash":"859d70cd7c459819b90fe27afb940d16ecff6614","modified":1562668202000},{"_id":"themes/melody/source/js/third-party/reveal/marked.min.js","hash":"abd5391551b7b4e0cc0511c4b5c5ccfe66100f1b","modified":1562668202000},{"_id":"themes/melody/source/js/third-party/reveal/math.min.js","hash":"779c98dbd83a528f27ea4b9f2d420c957c0939ba","modified":1562668202000},{"_id":"themes/melody/source/js/third-party/reveal/notes.min.js","hash":"4bb2925b111467791fdef3c4e4b41993d59ce90f","modified":1562668202000},{"_id":"themes/melody/source/js/third-party/reveal/reveal.min.js","hash":"d8377a86451712488dea87caf5acbf8e97aa991f","modified":1562668202000},{"_id":"themes/melody/source/js/third-party/reveal/zoom.min.js","hash":"aca47bf417d451c4d364c6eb287a230e4b462b17","modified":1562668202000},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","hash":"e34a3faf6e51034de612d15700e059fe82dba310","modified":1562668202000},{"_id":"themes/melody/.git/logs/refs/remotes/origin/HEAD","hash":"daabd8eb1b4aa92873a258f1ae1c21f2f135795c","modified":1562668202000},{"_id":"themes/melody/source/js/third-party/reveal/highlight.min.js","hash":"10dd530e712a67f25cf27845213c0f28d2fe9e4d","modified":1562668202000},{"_id":"themes/melody/.git/objects/pack/pack-8c0f2a8562d25e23c8f819bc3b42e3afadbdc473.pack","hash":"6951baa7273a8c4a52bc77f76794362f03b8e377","modified":1562668202000},{"_id":"public/search.xml","hash":"01a0f92f4fe0aa37a8aa85f02856c859275fe897","modified":1666145645723},{"_id":"public/categories/index.html","hash":"5ef99fa584a521ae158ab4ea880e795640600011","modified":1666145646295},{"_id":"public/tags/index.html","hash":"b152559a1d851ad05df16079cbd19329924c390b","modified":1666145646296},{"_id":"public/about/index.html","hash":"93e5b4963c7d08647adf1b279f5e42c08eab2678","modified":1666145646298},{"_id":"public/2022/09/06/mybatis——解决属性名和数据库字段名不一致问题（注解方式)/index.html","hash":"c1b1ed112f125972cf3e6978273d25437ca8f73d","modified":1666145646324},{"_id":"public/2021/10/07/PSHRNet/index.html","hash":"1b250e72f7b83342a3eb3b01e584b872f032b33d","modified":1666145646324},{"_id":"public/2020/07/15/论文笔记(一)/index.html","hash":"bd73e97ef43a66eeb6c6254c1d9dcea7115a620a","modified":1666145646324},{"_id":"public/2020/03/21/numpy数组和python列表的区别/index.html","hash":"0fe3c9f5d18f14ea2ea8f4cb14a0d0911f1fa899","modified":1666145646324},{"_id":"public/2020/03/21/numpy中的axis参数/index.html","hash":"4e68cb922fef2b06a3c04b6e77b83e9179549398","modified":1666145646324},{"_id":"public/2020/02/21/Matlab数模(1)/index.html","hash":"abaab6978bbf088e8046c66d57d452da841242cd","modified":1666145646324},{"_id":"public/2020/02/21/Matlab数模(2)/index.html","hash":"bf0b8af8c406bb495e17a8b52c0ba4dcc5bb9843","modified":1666145646324},{"_id":"public/2020/02/19/Java学习之路(38)/index.html","hash":"a97d520bccc80054316724a4c1df6628161fce04","modified":1666145646324},{"_id":"public/2020/02/19/Java学习之路(39)/index.html","hash":"705ca196d38a5e76175d7614d4d2894590defdde","modified":1666145646324},{"_id":"public/2020/01/31/Java学习之路(36)/index.html","hash":"8393eb1ad17d6281bd4f88737c961665805d7e92","modified":1666145646325},{"_id":"public/2020/01/30/Java学习之路(33)/index.html","hash":"f61aca1fe9549656017f6291d600272d9180e680","modified":1666145646325},{"_id":"public/2020/01/30/Java学习之路(34)/index.html","hash":"00541a09e7a1c3dadfb56a8c62e60e2af4abb271","modified":1666145646325},{"_id":"public/2020/01/30/Java学习之路(35)/index.html","hash":"2e3d0ed948b9c3210fd757afb0320d6b0f1578f1","modified":1666145646325},{"_id":"public/2020/01/29/Java学习之路(32)/index.html","hash":"8d03ee2b79066be087fbffb3efdc7bf65575ca53","modified":1666145646325},{"_id":"public/2020/01/28/Java学习之路(26)/index.html","hash":"6b8c36928509a7dd9b2fa18021efdadef795ad7a","modified":1666145646325},{"_id":"public/2020/01/28/Java学习之路(27)/index.html","hash":"6a69ba3ad90f04152c9bf71fce0c57de7a4f9480","modified":1666145646325},{"_id":"public/2020/01/28/Java学习之路(28)/index.html","hash":"7e3f0eb346fe58e952b80cb7142050625f2440b1","modified":1666145646325},{"_id":"public/2020/01/28/Java学习之路(29)/index.html","hash":"6b738872eb221d3d7615510c87ca9f9cca658e23","modified":1666145646325},{"_id":"public/2020/01/28/Java学习之路(30)/index.html","hash":"34de5efa0da9f82db1372b7199c244ce7ea1d268","modified":1666145646326},{"_id":"public/2020/01/28/Java学习之路(31)/index.html","hash":"94ac0c753c2c6b3cdc06f613bb7a6f8a8b67cb0a","modified":1666145646326},{"_id":"public/2020/01/27/Java学习之路(22)/index.html","hash":"19cfa8a5395ba3d7f8695012a391092aeebe7e09","modified":1666145646326},{"_id":"public/2020/01/27/Java学习之路(23)/index.html","hash":"2570e1ce5c6c51a7f61db49347eab4418fb4f58f","modified":1666145646326},{"_id":"public/2020/01/27/Java学习之路(24)/index.html","hash":"87a5b54a13c07b56ff715bf4c127c715191c7e54","modified":1666145646326},{"_id":"public/2020/01/27/Java学习之路(25)/index.html","hash":"631cd945f376668b6f4e46b49ee9b5a98b33a6a8","modified":1666145646326},{"_id":"public/2020/01/26/Java学习之路(18)/index.html","hash":"21a2b854298d68ed34f066dd5c234ad2d03d0b87","modified":1666145646326},{"_id":"public/2020/01/26/Java学习之路(19)/index.html","hash":"50631beb12d0dc2a2f0aa57395acbcb2129f8fc6","modified":1666145646326},{"_id":"public/2020/01/26/Java学习之路(20)/index.html","hash":"b2df1fe02d4ef631d7c8b1d35ff1417e0fca70ff","modified":1666145646326},{"_id":"public/2020/01/25/Java学习之路(14)/index.html","hash":"b477550fc78a2f483c9d917c3dde412d9d017d73","modified":1666145646326},{"_id":"public/2020/01/25/Java学习之路(15)/index.html","hash":"395c0c2b42daee6c731f6e3bc347b03e60d1655f","modified":1666145646326},{"_id":"public/2020/01/25/Java学习之路(16)/index.html","hash":"f7664b64a96ab61f80209f873aa9644e8469d6bb","modified":1666145646326},{"_id":"public/2020/01/25/Java学习之路(17)/index.html","hash":"b4f166a066e7e03a59b53e776d7efe9e874745f5","modified":1666145646326},{"_id":"public/2020/01/23/Java学习之路(10)/index.html","hash":"f8954a40c635888776c0d629a6a3d10a9b2e9bc4","modified":1666145646326},{"_id":"public/2020/01/23/Java学习之路(11)/index.html","hash":"a346d9b313ead6b4a12a962b7fd74a2a5122dd58","modified":1666145646326},{"_id":"public/2020/01/23/Java学习之路(12)/index.html","hash":"7e213976a80b92f58b239eb753aaac178247cccb","modified":1666145646326},{"_id":"public/2020/01/23/Java学习之路(13)/index.html","hash":"63ddb93571e37c42a075c47fe9b6241082412c6f","modified":1666145646326},{"_id":"public/2020/01/23/Java学习之路(9)/index.html","hash":"7f8dc96b89a85e549499ae7d7b1d733b9a67f208","modified":1666145646327},{"_id":"public/2020/01/22/Java学习之路(6)/index.html","hash":"2d56802c8d065f8abf6215c7457397cfe1b1bd16","modified":1666145646327},{"_id":"public/2020/01/22/Java学习之路(7)/index.html","hash":"073f3090580bf5a6e384e787f1e1651e2fd2932a","modified":1666145646327},{"_id":"public/2020/01/22/Java学习之路(8)/index.html","hash":"b2d812147cd256b70a356de32c04bd0a45f39d38","modified":1666145646327},{"_id":"public/2020/01/20/Java学习之路(1)/index.html","hash":"c6783818240e7ab629e5e9082e4d9dde2012a539","modified":1666145646327},{"_id":"public/2020/01/20/Java学习之路(2)/index.html","hash":"ea1148312161736bcd6652ff239256f76543a238","modified":1666145646327},{"_id":"public/2020/01/20/Java学习之路(3)/index.html","hash":"bf40db9bfb9f8c416494fdca9838074d97d7c818","modified":1666145646327},{"_id":"public/2020/01/20/Java学习之路(4)/index.html","hash":"336e25f1058c140e7eadd02aa3c9c47aa571d0e5","modified":1666145646327},{"_id":"public/2020/01/20/Java学习之路(5)/index.html","hash":"c16f46d8902be00f0279aca8537ccc4a0cac3950","modified":1666145646327},{"_id":"public/2019/10/24/试玩YOLOv3多目标检测/index.html","hash":"a5e13473a211c4990d61d9ac9d652041da40df4c","modified":1666145646327},{"_id":"public/2019/08/28/mnist数据集介绍/index.html","hash":"36054afeccef009cab72dd97b7f893a2dc13c7b4","modified":1666145646327},{"_id":"public/2019/08/24/行人重识别代码实战（三）/index.html","hash":"e46e0b64449433a81eb3939a66553fb1e7f9d7aa","modified":1666145646327},{"_id":"public/2019/08/24/行人重识别代码实战（二）/index.html","hash":"b80731ec6cf9e2796c00d64d735040cbda40724f","modified":1666145646330},{"_id":"public/2019/07/31/Person Re-identification数据集描述——Market-1501/index.html","hash":"7fee48dd507d7bf223ee8623536fddf8856c76b5","modified":1666145646330},{"_id":"public/2019/07/16/关于ReLU的问题及思考/index.html","hash":"79215114947bb8df27ee317c917d71def71cddfa","modified":1666145646330},{"_id":"public/2018/08/19/简单的3层神经网络实现/index.html","hash":"063c293280d8467cf15e9a6799181b98916ce58d","modified":1666145646330},{"_id":"public/2018/08/10/感知机初识/index.html","hash":"5655a02bd515662bc7ac5c659ea6c7cd31ed63a1","modified":1666145646330},{"_id":"public/2015/01/20/hello-world/index.html","hash":"f734c750187e1b5d651f5a08ebcafb24ac27071a","modified":1666145646330},{"_id":"public/archives/index.html","hash":"b9777b40f2b5f5bc48976b377c3dfbcae8a664a2","modified":1666145646330},{"_id":"public/archives/page/2/index.html","hash":"cfad885ba4b03bfbce5d23f4860776cc109880c6","modified":1666145646336},{"_id":"public/archives/page/3/index.html","hash":"1ca7fa88ffb7bf52e13cea7fed7573660fc641fc","modified":1666145646336},{"_id":"public/archives/page/4/index.html","hash":"867274300a59d4be2fadcc18c904f066c4507e1c","modified":1666145646336},{"_id":"public/archives/page/5/index.html","hash":"c9b213811c45020057aead73bac1fc35d53fec1a","modified":1666145646336},{"_id":"public/archives/page/6/index.html","hash":"0220e88cf58f2c6e8ec5670eb5c822a4cadf3a2b","modified":1666145646336},{"_id":"public/archives/page/7/index.html","hash":"2399bf760bb91b0077cc78c000d1eedb0377bad3","modified":1666145646336},{"_id":"public/archives/page/8/index.html","hash":"3efdfe9516e5365e2cba910007d95964ac4d5247","modified":1666145646336},{"_id":"public/archives/page/9/index.html","hash":"43dfb5e3ce2004f3c88bb72f10a7b97e7a8f41db","modified":1666145646336},{"_id":"public/archives/page/10/index.html","hash":"55646197a3391ed3fdcb04a4674ca65abdc6eea6","modified":1666145646336},{"_id":"public/archives/page/11/index.html","hash":"f20cfb268794ac14ef5e208d45ff0004a6bccd1c","modified":1666145646337},{"_id":"public/archives/page/12/index.html","hash":"08bf5b8a9a5a7eacc3716e73effc5348e1d106e4","modified":1666145646337},{"_id":"public/archives/page/13/index.html","hash":"655fb48fce07d9c9b279f1a02cb757f73870a4bc","modified":1666145646337},{"_id":"public/archives/2015/index.html","hash":"753b52b570348622f0c50f172e21474690a3cd46","modified":1666145646337},{"_id":"public/archives/2015/01/index.html","hash":"1341eb7f89dde349d5b00a545c352655fef85905","modified":1666145646337},{"_id":"public/archives/2018/index.html","hash":"6e5a8988cd8c51ec160b5efe481d2860990c047b","modified":1666145646337},{"_id":"public/archives/2018/08/index.html","hash":"9042935e0672c4db7e2c39da68b5fcd73ec74658","modified":1666145646337},{"_id":"public/archives/2018/09/index.html","hash":"6db04ca0387ba2d0d9555589482b3a146328cbce","modified":1666145646337},{"_id":"public/archives/2019/index.html","hash":"e850772ef955a0a85ae5bcdbc548ec0fda3ec592","modified":1666145646337},{"_id":"public/archives/2019/page/2/index.html","hash":"4fad848d3eb358f374f1a7c992fa661afa3b0b1b","modified":1666145646337},{"_id":"public/archives/2019/07/index.html","hash":"a48f7e337ad774c4f77189b71a3c9f0b8df2e24a","modified":1666145646337},{"_id":"public/archives/2019/08/index.html","hash":"a6359a2d80fecb6b97f43654347bb91fb5983519","modified":1666145646337},{"_id":"public/archives/2019/10/index.html","hash":"87b238a84352593d98f5bf96ee2dd5af165bc8d1","modified":1666145646338},{"_id":"public/archives/2020/index.html","hash":"020263425688a1646c3405bd66cc480dc7a3d82f","modified":1666145646338},{"_id":"public/archives/2020/page/2/index.html","hash":"7262251940284c08503639128640a69c8651d519","modified":1666145646338},{"_id":"public/archives/2020/page/3/index.html","hash":"38ea5a0ece014a6612da17c75c0a5d141c39f17f","modified":1666145646338},{"_id":"public/archives/2020/page/4/index.html","hash":"740aa9fdb0201c93b15479c25a4afb9ca0bd2fd0","modified":1666145646338},{"_id":"public/archives/2020/page/5/index.html","hash":"e3eeaac63f0353ffaf9b3d351a9819053e056ff0","modified":1666145646338},{"_id":"public/archives/2020/page/6/index.html","hash":"9be7f5aa90f99736b532f1fd1cc0b2c10816a4b4","modified":1666145646338},{"_id":"public/archives/2020/page/7/index.html","hash":"9ef1f39f51fb22cd40775a9f1227fe472b4ef940","modified":1666145646338},{"_id":"public/archives/2020/page/8/index.html","hash":"b68fc6a0da162f92892ed9cc48adebb20d57ad5c","modified":1666145646338},{"_id":"public/archives/2020/page/9/index.html","hash":"f39db3eb6f1563770ab9794fa97d4488807e64d2","modified":1666145646338},{"_id":"public/2022/09/13/SpringMVC - 获取Get请求参数详解/index.html","hash":"21ce1187a9dfc05f098df8432f6f3208287c948c","modified":1666145646338},{"_id":"public/2022/09/08/servlet进化之旅/index.html","hash":"77968efeaa828be256e29fdb63f19cb285defb10","modified":1666145646339},{"_id":"public/2022/09/07/MySql/index.html","hash":"cf9743137a8a572d54265f3632fb27356cb27079","modified":1666145646339},{"_id":"public/2022/09/06/Maven中dependence和dependenceManagement/index.html","hash":"fa9db99d3a24c371ee0eeedfd5c0473d8f63d71a","modified":1666145646339},{"_id":"public/2020/07/14/论文笔记（一）/index.html","hash":"a924bee0cdabb0abfd1006e3d419838d32c6c7ae","modified":1666145646339},{"_id":"public/2020/03/16/Java学习之路(37)/index.html","hash":"6bd33f5a20ce65095386ff20ebb638a800fd9760","modified":1666145646339},{"_id":"public/2020/01/27/Java学习之路(21)/index.html","hash":"bba0f4779b802e093fd5d3ff3497ca213faf18ff","modified":1666145646339},{"_id":"public/2019/08/28/mnist数据集下载与处理/index.html","hash":"dc3c1c148fa43a0624b940c41e57c3342d8a7f8e","modified":1666145646339},{"_id":"public/2019/08/22/行人重识别代码实战（一）/index.html","hash":"12cece4aa874d3dde3a5ddd633799e8ce1c9f5b4","modified":1666145646339},{"_id":"public/2019/07/31/行人重识别初识/index.html","hash":"cbfa79716a07e32426cf42ba71ed56e7d1f5841e","modified":1666145646339},{"_id":"public/2018/09/20/鱼书踩坑（一）/index.html","hash":"1ac326426f42e3a5139451b83dfc1500467952fe","modified":1666145646339},{"_id":"public/2018/08/19/激活函数（一）/index.html","hash":"0dfa0d62b947ef6c1f0acb6c76e7c5fe2baf57ea","modified":1666145646339},{"_id":"public/archives/2020/01/index.html","hash":"61f4bca5334a838c5a922a357b961980c4452ee7","modified":1666145646338},{"_id":"public/archives/2020/01/page/2/index.html","hash":"fe72bbc3ed0e38c1ff2e3da777f30f491b5684e9","modified":1666145646338},{"_id":"public/archives/2020/01/page/3/index.html","hash":"49ede4385e4fe55ff7e8196c8349304b932caebe","modified":1666145646338},{"_id":"public/archives/2020/01/page/4/index.html","hash":"6cc0d4a62f3e131881ef3a063091963f7c9d29d6","modified":1666145646338},{"_id":"public/archives/2020/01/page/5/index.html","hash":"89b9fa92c7d07f810e5eeefcf5a20693c2be1728","modified":1666145646441},{"_id":"public/archives/2020/01/page/6/index.html","hash":"2f59afa2f6fddd91b27d84c771e981f9e21c1a43","modified":1666145646441},{"_id":"public/archives/2020/01/page/7/index.html","hash":"aea767aa7942681b69db57880f8b4f4a6eb578c3","modified":1666145646441},{"_id":"public/archives/2020/01/page/8/index.html","hash":"ad3f48ccf5138b6c60ea62d7646b5a4bdc5e5365","modified":1666145646441},{"_id":"public/archives/2020/02/index.html","hash":"d209bc4c17d1120f9752774e0e2c6daa7dce00ec","modified":1666145646441},{"_id":"public/archives/2020/03/index.html","hash":"2daac63edcc8966836b1aa22e5d42ea3372aa0e4","modified":1666145646441},{"_id":"public/archives/2020/07/index.html","hash":"2a8e26311c36354efe8ccc2c7d0c51e131b672b2","modified":1666145646441},{"_id":"public/archives/2021/index.html","hash":"ea9ae2b1077dd7553f3321e03adafdfa443f4910","modified":1666145646441},{"_id":"public/archives/2021/10/index.html","hash":"014c4f38e92ad12d4187bf209b8ef5227ece0af8","modified":1666145646441},{"_id":"public/archives/2022/index.html","hash":"7b0093d4c50dfc50f66b7f53fa41e42e614c6faa","modified":1666145646441},{"_id":"public/archives/2022/09/index.html","hash":"062cc68c607ff6c0e76886fd3b7a1bd24a8edc65","modified":1666145646442},{"_id":"public/categories/Java/index.html","hash":"46eff824e1844a4c7f20f05a7d4bba88b0b265a7","modified":1666145646442},{"_id":"public/categories/Java/page/2/index.html","hash":"acbae990b83b267ee3991da83540e255ab7839e7","modified":1666145646442},{"_id":"public/categories/Java/page/3/index.html","hash":"0d170b25d873a3cb8e2c6d6dfcc2fa3ae88f4104","modified":1666145646442},{"_id":"public/categories/Java/page/4/index.html","hash":"30bdf3a8624648ab3f82d2a708d95b25da46cf5d","modified":1666145646442},{"_id":"public/categories/Java/page/5/index.html","hash":"9e279aedde4d12d1732eba0da61c845beaf89728","modified":1666145646442},{"_id":"public/categories/Java/page/6/index.html","hash":"c997a62fcaeaa41fa9198f58d69a50bc0505989e","modified":1666145646442},{"_id":"public/categories/Java/page/7/index.html","hash":"e1eb8ad66c731790648e6e625b4582a320444156","modified":1666145646442},{"_id":"public/categories/Java/page/8/index.html","hash":"d3ac2fc84370b76e7448a4bec2eece486c60cfed","modified":1666145646442},{"_id":"public/categories/Maven/index.html","hash":"1f78d988d47fb296bca7551d5c89aa1be9b03f72","modified":1666145646442},{"_id":"public/categories/数据集/index.html","hash":"d394aeda7ecc57cfe1b8d6abc0219498e18e72bc","modified":1666145646442},{"_id":"public/categories/后端/index.html","hash":"666a46904d7a98175bf9fcefbff899f191026078","modified":1666145646442},{"_id":"public/categories/行人重识别/index.html","hash":"ac4b5bcf9ce534c0746fcf38121f9e2c51a10b95","modified":1666145646442},{"_id":"public/categories/科学计算/index.html","hash":"67b53cac1d86e660b8710665665bdd2faba033b1","modified":1666145646442},{"_id":"public/categories/python/index.html","hash":"18ebb2e6bb9f8dacc11cc25388d1fc41d08e6e09","modified":1666145646442},{"_id":"public/categories/MyBatys/index.html","hash":"0be997da686742a0f9cf7bdd87d40808d74f32e9","modified":1666145646442},{"_id":"public/categories/机器学习/index.html","hash":"f91bb7ab60910c8927dc923b8973ffad1bd4a695","modified":1666145646442},{"_id":"public/categories/深度学习/index.html","hash":"e2cb7aac5e70e32bd8f93bcf54c26cc8832a4434","modified":1666145646442},{"_id":"public/categories/论文笔记/index.html","hash":"2e5f9188bc430f898637e605f84943990fc0d418","modified":1666145646442},{"_id":"public/categories/MySQL/index.html","hash":"8055b6e82cb95002198801868aaf83fa1442f46f","modified":1666145646443},{"_id":"public/tags/编程/index.html","hash":"59aa645f673213d91a6e9b9d21b8ae84cacda625","modified":1666145646443},{"_id":"public/tags/编程/page/2/index.html","hash":"f2e0d97276daf3d27fa162816370952da7f17d39","modified":1666145646443},{"_id":"public/tags/编程/page/3/index.html","hash":"4570aee55010b7a0698c40a0722f44abf472ea69","modified":1666145646443},{"_id":"public/tags/编程/page/4/index.html","hash":"b2906e62ae581ccc659d8af2f397e821027e7884","modified":1666145646443},{"_id":"public/tags/编程/page/5/index.html","hash":"f7772b71de86e0b6d1a1f36c21a1297e126484d6","modified":1666145646443},{"_id":"public/tags/编程/page/6/index.html","hash":"d29754afd70d5f465f06175d3cf605d09ccf2d61","modified":1666145646443},{"_id":"public/tags/编程/page/7/index.html","hash":"189ed972690a9954312c39aded0cccbfd9292651","modified":1666145646443},{"_id":"public/tags/编程/page/8/index.html","hash":"7deaa1fe49de06cb410e24768b7f97a181f7522f","modified":1666145646443},{"_id":"public/tags/编程/page/9/index.html","hash":"ca0dbd321a7a9237d1c39ae2aea0ccbd5b6a3e4d","modified":1666145646443},{"_id":"public/tags/学习/index.html","hash":"8319f0ff350686f97d330eefc29139a6d6c3898b","modified":1666145646443},{"_id":"public/tags/学习/page/2/index.html","hash":"50e7fa84885994b3386e77dc8a5a71afff76eb38","modified":1666145646443},{"_id":"public/tags/学习/page/3/index.html","hash":"9d4a93dc2ad67af5e4113d4d25ccffde21e0c3e6","modified":1666145646443},{"_id":"public/tags/学习/page/4/index.html","hash":"797312c0f8ccb8863fc3be419a9a23a31604b975","modified":1666145646443},{"_id":"public/tags/学习/page/5/index.html","hash":"ee76792e12b5d6aea535b49313079ad339c0a020","modified":1666145646443},{"_id":"public/tags/学习/page/6/index.html","hash":"c4aa103c041bf313c2f8f7433a0ffe10f47584b0","modified":1666145646444},{"_id":"public/tags/学习/page/7/index.html","hash":"eb33841a72a8abe61564558f7cde6f82061abf5f","modified":1666145646444},{"_id":"public/tags/学习/page/8/index.html","hash":"482dde403bbc57a20be442c7b9f2b03558277f4f","modified":1666145646444},{"_id":"public/tags/学习/page/9/index.html","hash":"219b657f4138b98333a15c71a17d7207af682149","modified":1666145646444},{"_id":"public/tags/Java/index.html","hash":"871c9f47a773d95bdc1da20aee5f061b5a7fe7a7","modified":1666145646444},{"_id":"public/tags/Java/page/2/index.html","hash":"44e05037d038aa8319d8992058d51a9cac975604","modified":1666145646444},{"_id":"public/tags/Java/page/3/index.html","hash":"ef611d2d5e1617aef746950650e130c75b430569","modified":1666145646444},{"_id":"public/tags/Java/page/4/index.html","hash":"4394cb4f595d10c32c900ab750aa26c3b4816341","modified":1666145646444},{"_id":"public/tags/Java/page/5/index.html","hash":"7a486a6b2c82746f82bd5666fad076f9cfb3b714","modified":1666145646444},{"_id":"public/tags/Java/page/6/index.html","hash":"76f80cfa54750362dfc007cb6f94507ea2d7abfc","modified":1666145646444},{"_id":"public/tags/Java/page/7/index.html","hash":"6d7a26d774d7e0b8ee84db922b3136495dc6f9e2","modified":1666145646444},{"_id":"public/tags/Java/page/8/index.html","hash":"5585f36cd489d680d608f4b0d7ea5ab4aa581447","modified":1666145646444},{"_id":"public/tags/Java/page/9/index.html","hash":"ae0e96f3bd4d67cb636fc8e753a20a1d6a665ab7","modified":1666145646444},{"_id":"public/tags/坑/index.html","hash":"10e9a14cbebf282ac09fb95fb48c0f31651108eb","modified":1666145646444},{"_id":"public/tags/Maven/index.html","hash":"a4c88589e461650c1ecfe06ef4af8c22f34e9a71","modified":1666145646444},{"_id":"public/tags/行人重识别/index.html","hash":"a9fbf2775af11beaeec45e7d1bac7d5cd873ec6a","modified":1666145646444},{"_id":"public/tags/行人重识别/page/2/index.html","hash":"fd1b2f8fd69781aed4c6770f30a41c47d445c0ec","modified":1666145646444},{"_id":"public/tags/数据集/index.html","hash":"b393084574aab697c32e1fc83c5604e3b6889bad","modified":1666145646444},{"_id":"public/tags/JavaWeb/index.html","hash":"90f011edfd143aefa1d533e6a35a53d5e27d5a61","modified":1666145646445},{"_id":"public/tags/后端/index.html","hash":"22b55520ff5cc984d9b46c0ff08a8996e68ee896","modified":1666145646445},{"_id":"public/tags/SpringMVC/index.html","hash":"5e3f9b2cf5d114a198dd19ceea55ec2db2398af3","modified":1666145646445},{"_id":"public/tags/RESTful/index.html","hash":"3df3dbb419805177406cb438ed79e850ed3e5b76","modified":1666145646445},{"_id":"public/tags/python/index.html","hash":"473daf86950c3f25c5748d7b55ac1348ae1a6341","modified":1666145646445},{"_id":"public/tags/手写识别/index.html","hash":"a7f29453d68d73bd3d34e1dfd35b077bf2bd1a77","modified":1666145646445},{"_id":"public/tags/MNIST/index.html","hash":"4b02109af2da753889d514afb8986e7be67e0d4c","modified":1666145646445},{"_id":"public/tags/图像识别/index.html","hash":"25933e4db89490939cc3f9a7d0cd1fc81d8c7cb0","modified":1666145646445},{"_id":"public/tags/论文/index.html","hash":"cba4786cce2f9106b17568eed58a01cbf6635fec","modified":1666145646445},{"_id":"public/tags/Matlab/index.html","hash":"182d962c475ec68fb506896a46ee63c1dca3f96a","modified":1666145646445},{"_id":"public/tags/数学建模/index.html","hash":"7bef84a36ded0724eed58f62757eb89e5bf50b01","modified":1666145646445},{"_id":"public/tags/numpy/index.html","hash":"c5cd7bc197bf70982a605a6c332dfada0388f507","modified":1666145646445},{"_id":"public/tags/Servlet/index.html","hash":"9038f13fe6d64cffdd148f33008df1331e7edada","modified":1666145646445},{"_id":"public/tags/Tomcat/index.html","hash":"495d08ddecf03e02423d182e64f4df03ea712645","modified":1666145646446},{"_id":"public/tags/MyBatis/index.html","hash":"d59e405c4491fe5c79ce7e5f3e2e146d861f1f97","modified":1666145646446},{"_id":"public/tags/神经网络/index.html","hash":"778d757131b19f40483c38da5619be5e46557d6b","modified":1666145646446},{"_id":"public/tags/激活函数/index.html","hash":"4b9e79db97bf295276baba216ce1de9974082910","modified":1666145646446},{"_id":"public/tags/代数系统/index.html","hash":"0703a9a58c0121d5472f3e67cd0bf785a7db14f9","modified":1666145646446},{"_id":"public/tags/深度学习/index.html","hash":"9177b28aa6d5b1a0bf55faf910e715601bc86855","modified":1666145646446},{"_id":"public/tags/深度学习/page/2/index.html","hash":"05169e2854da3eb2aab48f7c22f5daca39e7b5fe","modified":1666145646446},{"_id":"public/tags/图像处理/index.html","hash":"46c29b9b19f17a300acde522847b9bd23fc1dd49","modified":1666145646446},{"_id":"public/tags/图像处理/page/2/index.html","hash":"d6acaaf29b003073dced914c958be9f95e99eedd","modified":1666145646446},{"_id":"public/tags/感知机/index.html","hash":"730a9bb017d04e7bfcf94193754dabb1cd70931a","modified":1666145646446},{"_id":"public/tags/数据库/index.html","hash":"23757d3b31b1388380eb9fa0f4e1a20714e28f9d","modified":1666145646446},{"_id":"public/tags/MySQL/index.html","hash":"b194dac534ddc087c52a00c9f230ea56c758187d","modified":1666145646446},{"_id":"public/tags/目标检测/index.html","hash":"4b855b1d03a309830794a510d142c2943bb439ee","modified":1666145646446},{"_id":"public/index.html","hash":"718eacfb9e2dbcc351377d822696ca93795752ab","modified":1666145646447},{"_id":"public/page/2/index.html","hash":"982b7412417c5039e491ee2b045af62331a26fdb","modified":1666145646447},{"_id":"public/page/3/index.html","hash":"27d26ace010fea256a4e8c9c7ba5009a38b60c00","modified":1666145646447},{"_id":"public/page/4/index.html","hash":"b6b6d1d97d54c4a36e4c0e401c31094ff354922a","modified":1666145646447},{"_id":"public/page/5/index.html","hash":"de6ad1203be91d11c5e57003447414211040a43c","modified":1666145646447},{"_id":"public/page/6/index.html","hash":"dab32a9f57bc36ce1057dd69e2729cfe2a6f6b52","modified":1666145646447},{"_id":"public/page/7/index.html","hash":"d30be22f37baafa1701ac60bdc5204d488633965","modified":1666145646447},{"_id":"public/page/8/index.html","hash":"937d39559abbd795f74927cf2bfb65f2b7d5917c","modified":1666145646447},{"_id":"public/page/9/index.html","hash":"5fa17c9d7da0096220790f7767ae4ad1081eaa7c","modified":1666145646447},{"_id":"public/page/10/index.html","hash":"888901e5f297ff63c8cb2e1b866b04eb2eb4df73","modified":1666145646447},{"_id":"public/page/11/index.html","hash":"22600a1421830861b88d7674aa499377c0e4b277","modified":1666145646447},{"_id":"public/page/12/index.html","hash":"f973f4cd2589bb29893b28d64431f55ac64bbda1","modified":1666145646447},{"_id":"public/page/13/index.html","hash":"55662959b071ce6639a56983315a2c51024de397","modified":1666145646447},{"_id":"public/favicon.ico","hash":"6cdeaa296bfb310e0cfa886e5220364778b8891f","modified":1663154613583},{"_id":"public/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1663154613583},{"_id":"public/img/avatar.png","hash":"48e410926305699eac0f559bb13ce776ae3d2f5a","modified":1663154613583},{"_id":"public/assets/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1663154613583},{"_id":"public/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1663154614589},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1663154614589},{"_id":"public/js/copy.js","hash":"8d5080cd13ef6b50f5c0c22c140bba44cc5ee7fc","modified":1663154614589},{"_id":"public/js/fancybox.js","hash":"cb63b81c05fcf1cee9f41befd84c41eeb55e5fce","modified":1663154614589},{"_id":"public/js/fireworks.js","hash":"17d5770d46d9b531b675b129835561146290af83","modified":1663154614589},{"_id":"public/js/head.js","hash":"212a32f824cadea0167bf4204c9714df5b7e5f5d","modified":1663154614589},{"_id":"public/js/scroll.js","hash":"50aee3035949bbc178eafd86adf19fd51916640d","modified":1663154614589},{"_id":"public/js/sidebar.js","hash":"a42109c5a69dedc87e1aaf8cb2383fd43069677e","modified":1663154614589},{"_id":"public/js/transition.js","hash":"998c3bb6523a248d4dd4d747510c03a914a6378d","modified":1663154614589},{"_id":"public/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1663154614589},{"_id":"public/js/search/algolia.js","hash":"8d2cc7ac4a015563344a3981c3040d308489935c","modified":1663154614589},{"_id":"public/js/search/local-search.js","hash":"b7e77c27097d9d3ced13618912069d1ddf1cd64a","modified":1663154614589},{"_id":"public/js/third-party/anime.min.js","hash":"3c46c9597c721644a515c1c54ab13f46406657f7","modified":1663154614589},{"_id":"public/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1663154614589},{"_id":"public/js/third-party/reveal/markdown.min.js","hash":"859d70cd7c459819b90fe27afb940d16ecff6614","modified":1663154614589},{"_id":"public/js/third-party/reveal/math.min.js","hash":"779c98dbd83a528f27ea4b9f2d420c957c0939ba","modified":1663154614589},{"_id":"public/js/third-party/reveal/notes.min.js","hash":"4bb2925b111467791fdef3c4e4b41993d59ce90f","modified":1663154614589},{"_id":"public/js/third-party/reveal/zoom.min.js","hash":"aca47bf417d451c4d364c6eb287a230e4b462b17","modified":1663154614589},{"_id":"public/js/third-party/reveal/head.min.js","hash":"95c9de30444117adbbb3218070fda00af187a76a","modified":1663154614589},{"_id":"public/css/index.css","hash":"ff961356fa910e1a9f7a4233644af68b82cdf6f7","modified":1663154614589},{"_id":"public/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1663154614589},{"_id":"public/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1663154614589},{"_id":"public/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1663154614590},{"_id":"public/js/third-party/reveal/marked.min.js","hash":"37f3186f93ec854f56bf745a5988a89225e8da6c","modified":1663154614590},{"_id":"public/js/third-party/reveal/reveal.min.js","hash":"d8377a86451712488dea87caf5acbf8e97aa991f","modified":1663154614590},{"_id":"public/js/third-party/reveal/highlight.min.js","hash":"10dd530e712a67f25cf27845213c0f28d2fe9e4d","modified":1663154614590},{"_id":"source/_posts/git_status总结.md","hash":"9a0396b8d1e4be8e1c2d0018f8415a6d9586788e","modified":1663338177805},{"_id":"public/2022/09/16/git_status总结/index.html","hash":"fa7074f23c527e32d8c448d4296f411b39a017a8","modified":1666145646324},{"_id":"public/archives/page/14/index.html","hash":"027c39a5f9eae6ceaf9382311d928d3400ca0239","modified":1666145646337},{"_id":"public/archives/2022/page/2/index.html","hash":"c00b1ea2b52972d448afbedac72886335bc864cd","modified":1666145646442},{"_id":"public/archives/2022/09/page/2/index.html","hash":"a50efe714ee4938fbd18522409d6b9ccd50d6318","modified":1666145646442},{"_id":"public/categories/git/index.html","hash":"1b9dc53c0e50de12fe6f8a005df872676ae480e7","modified":1666145646443},{"_id":"public/page/14/index.html","hash":"37c28a6132fce065d10fb54633f59ca094b28c3f","modified":1666145646447},{"_id":"public/tags/git/index.html","hash":"add52273f340f63a1679f625dd499f4c9f565835","modified":1666145646446},{"_id":"source/_posts/Docker中的Redis部署.md","hash":"d426539d14daa8a4a0a77595aad008afcbd5e0dc","modified":1663502846350},{"_id":"public/2022/09/18/Docker中的Redis部署/index.html","hash":"94f9e385719f577a06ef2b8a4914686b1ed9ce4c","modified":1666145646324},{"_id":"public/categories/Docker/index.html","hash":"f445fa2ae426824682b6600a3de8014374e9bb01","modified":1666145646443},{"_id":"public/categories/Docker/Redis/index.html","hash":"4bc69fbed1ce7fb75c094bba6e848259c16030f6","modified":1666145646443},{"_id":"public/categories/Docker/Redis/后端/index.html","hash":"3d6f4edf1a477252b85e77cf85ac2ea363e525ac","modified":1666145646443},{"_id":"public/tags/Redis/index.html","hash":"571be155faf47b1c6d3658c09bd1c59dee354fbc","modified":1666145646446},{"_id":"public/tags/Docker/index.html","hash":"d6b9a6463b6eed874c67bb031caf66b95c2aa4cc","modified":1666145646446},{"_id":"source/_posts/代理模式.md","hash":"2649fbc192bc4840e0e173b2e01e695942d8288a","modified":1663595107913},{"_id":"public/categories/设计模式/index.html","hash":"aa7084905ab63e3fe482b9ae58a7451141a33f56","modified":1666145646443},{"_id":"public/tags/设计模式/index.html","hash":"f68376b903d61f2fe577b1fcf91a2fc75179d37a","modified":1666145646446},{"_id":"public/tags/代理模式/index.html","hash":"cc8a5021b8df50c16d9a1baed802b8b379035983","modified":1666145646446},{"_id":"public/2022/09/19/代理模式/index.html","hash":"42f4e715f16059939aaafde2b0e26ee520c0182a","modified":1666145646338},{"_id":"source/_posts/Mysql主从复制基于Docker的实现.md","hash":"65978f02a07e35d20c54e6a0d83dfb0321fac867","modified":1663762104254},{"_id":"public/2022/09/21/Mysql主从复制基于Docker的实现/index.html","hash":"9e0fd3a1e1d03d1e7d1527d088a7e05b2b35f831","modified":1666145646338},{"_id":"public/categories/数据库/index.html","hash":"d119de575734c68093bee848f721036e37e581de","modified":1666145646443},{"_id":"public/tags/Mysql/index.html","hash":"58dcd06acef19c23edd5690c7d4bd2af92f735b1","modified":1666145646446},{"_id":"source/_posts/JS —— 常量.md","hash":"d9ff0f3061dddb25751dc7303027472eb4adaa70","modified":1666056403649},{"_id":"public/2022/10/18/JS —— 常量/index.html","hash":"6a82c2794e7b8e5bd4b75667a3892127d67d7855","modified":1666145646324},{"_id":"public/categories/JS/index.html","hash":"23f18565a3d85bb97eda1f38582467ac50f061fe","modified":1666145646443},{"_id":"public/archives/2022/10/index.html","hash":"565395e1882c4a46ef7b5f99192cd4357e850773","modified":1666145646442},{"_id":"public/tags/JS/index.html","hash":"ae78dc4ee015942d38d35dc8cdafea044c8f8b1c","modified":1666145646446},{"_id":"public/tags/前端/index.html","hash":"ee8029bc12ebe31c9c990c220f82655fb11f48ae","modified":1666145646446},{"_id":"source/_posts/JS----逻辑或.md","hash":"12a7a97f6a9846a9b197185b2e9848b728e2d580","modified":1666145631442},{"_id":"public/2022/10/19/JS----逻辑或/index.html","hash":"a7e978d1e30def1612620cb8f62ef2e3e6936bd8","modified":1666145646440},{"_id":"public/archives/page/15/index.html","hash":"29bd180dbebc62102eaa01ea5cf0c9c9e1ae8776","modified":1666145646441},{"_id":"public/archives/2022/page/3/index.html","hash":"e764ed1d7f58dcc6a8c12f0e6c0bdad972703ff3","modified":1666145646450},{"_id":"public/page/15/index.html","hash":"df5b5bb4b6a8a552953d2adae0cf60c338864750","modified":1666145646450}],"Category":[{"name":"Java","_id":"cl81jb7jx00027svw7bvxw53o"},{"name":"Maven","_id":"cl81jb7mv003g7svwz5l4bsiy"},{"name":"数据集","_id":"cl81jb9z6006b7svw7cwbw04i"},{"name":"后端","_id":"cl81jb9zd006g7svwd9354hxa"},{"name":"行人重识别","_id":"cl81jb9zi006l7svwz63zwv3h"},{"name":"科学计算","_id":"cl81jba01006t7svwc3n4guce"},{"name":"python","_id":"cl81jba0a00747svw22bg8yi9"},{"name":"MyBatys","_id":"cl81jba0j007b7svwuryou69d"},{"name":"机器学习","_id":"cl81jba14007o7svwa1cfhcy6"},{"name":"深度学习","_id":"cl81jba17007u7svw3zm8ehzz"},{"name":"论文笔记","_id":"cl81jba1e008g7svwdqvs052y"},{"name":"MySQL","_id":"cl81jba2j00as7svw558osppn"},{"name":"git","_id":"cl84kbhzu0001awvwvuemucbm"},{"name":"Docker","_id":"cl87ankus0001yrvwv36j07gx"},{"name":"Redis","parent":"cl87ankus0001yrvwv36j07gx","_id":"cl87ankvr0004yrvwth5hxk8c"},{"name":"后端","parent":"cl87ankvr0004yrvwth5hxk8c","_id":"cl87ankvv0007yrvwswzol0ub"},{"name":"设计模式","_id":"cl88tjl5l0001mjvwo4cebbaf"},{"name":"数据库","_id":"cl8bl0pb00001x3vwtshe50lb"},{"name":"JS","_id":"cl9diz6up0001k2vwi8n2vcaa"}],"Data":[{"_id":"melody","data":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true}}],"Page":[{"title":"分类","date":"2018-01-04T16:00:00.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-01-05 00:00:00\ntype: \"categories\"\n---","updated":"2019-07-11T08:52:16.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl81jb9z300687svwblgwsg0z","content":"<script src=\"/assets/js/APlayer.min.js\"> </script>","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":""},{"title":"标签","date":"2018-01-04T16:00:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-01-05 00:00:00\ntype: \"tags\"\n---","updated":"2019-07-11T08:52:26.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl81jb9z5006a7svwnzlggws3","content":"<script src=\"/assets/js/APlayer.min.js\"> </script>","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":""},{"title":"About Me","date":"2018-11-16T10:33:35.000Z","comments":0,"_content":"\n<center>\n\n**<font size=6>Hi 👋 Yu's here.</font>**\n\n</center>\n\n- 💻 Computer Science & Technology\n- 👨‍💻 Normal postgraduate boi\n- 📝 Use Spring backend, Vue.JS or React for frontend\n- 🌟 Make something to improve the world\n- 💕 Opensource\n\n---\n\n<center>\n<figure>\n\n![34a20deb56a7dfb657d99f7415d644da.png](https://img.gejiba.com/images/34a20deb56a7dfb657d99f7415d644da.png)\n\n![38472bc08bcd32a858f614873c8aeb72.png](https://img.gejiba.com/images/38472bc08bcd32a858f614873c8aeb72.png)\n\n![skills](https://skillicons.dev/icons?i=bash,css,docker,dotnet,electron,express,git,github,html,js,linux,md,mongodb,nextjs,nodejs,postgres,pr,prisma,py,raspberrypi,react,redis,regex,sass,stackoverflow,ts,visualstudio,vscode,vue,workers)\n\n</figure>\n</center>","source":"about/index.md","raw":"---\ntitle: About Me\ndate: 2018-11-16 18:33:35\ncomments: false\n---\n\n<center>\n\n**<font size=6>Hi 👋 Yu's here.</font>**\n\n</center>\n\n- 💻 Computer Science & Technology\n- 👨‍💻 Normal postgraduate boi\n- 📝 Use Spring backend, Vue.JS or React for frontend\n- 🌟 Make something to improve the world\n- 💕 Opensource\n\n---\n\n<center>\n<figure>\n\n![34a20deb56a7dfb657d99f7415d644da.png](https://img.gejiba.com/images/34a20deb56a7dfb657d99f7415d644da.png)\n\n![38472bc08bcd32a858f614873c8aeb72.png](https://img.gejiba.com/images/38472bc08bcd32a858f614873c8aeb72.png)\n\n![skills](https://skillicons.dev/icons?i=bash,css,docker,dotnet,electron,express,git,github,html,js,linux,md,mongodb,nextjs,nodejs,postgres,pr,prisma,py,raspberrypi,react,redis,regex,sass,stackoverflow,ts,visualstudio,vscode,vue,workers)\n\n</figure>\n</center>","updated":"2022-09-05T09:29:56.625Z","path":"about/index.html","layout":"page","_id":"cl81jba2h00aq7svwj0a6nyqa","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><center>\n\n<p><strong><font size=\"6\">Hi 👋 Yu’s here.</font></strong></p>\n</center>\n\n<ul>\n<li>💻 Computer Science &amp; Technology</li>\n<li>👨‍💻 Normal postgraduate boi</li>\n<li>📝 Use Spring backend, Vue.JS or React for frontend</li>\n<li>🌟 Make something to improve the world</li>\n<li>💕 Opensource</li>\n</ul>\n<hr>\n<center>\n<figure>\n\n<p><img src=\"https://img.gejiba.com/images/34a20deb56a7dfb657d99f7415d644da.png\" alt=\"34a20deb56a7dfb657d99f7415d644da.png\"></p>\n<p><img src=\"https://img.gejiba.com/images/38472bc08bcd32a858f614873c8aeb72.png\" alt=\"38472bc08bcd32a858f614873c8aeb72.png\"></p>\n<p><img src=\"https://skillicons.dev/icons?i=bash,css,docker,dotnet,electron,express,git,github,html,js,linux,md,mongodb,nextjs,nodejs,postgres,pr,prisma,py,raspberrypi,react,redis,regex,sass,stackoverflow,ts,visualstudio,vscode,vue,workers\" alt=\"skills\"></p>\n</figure>\n</center>","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<center>\n\n<p><strong><font size=\"6\">Hi 👋 Yu’s here.</font></strong></p>\n</center>\n\n<ul>\n<li>💻 Computer Science &amp; Technology</li>\n<li>👨‍💻 Normal postgraduate boi</li>\n<li>📝 Use Spring backend, Vue.JS or React for frontend</li>\n<li>🌟 Make something to improve the world</li>\n<li>💕 Opensource</li>\n</ul>\n<hr>\n<center>\n<figure>\n\n<p><img src=\"https://img.gejiba.com/images/34a20deb56a7dfb657d99f7415d644da.png\" alt=\"34a20deb56a7dfb657d99f7415d644da.png\"></p>\n<p><img src=\"https://img.gejiba.com/images/38472bc08bcd32a858f614873c8aeb72.png\" alt=\"38472bc08bcd32a858f614873c8aeb72.png\"></p>\n<p><img src=\"https://skillicons.dev/icons?i=bash,css,docker,dotnet,electron,express,git,github,html,js,linux,md,mongodb,nextjs,nodejs,postgres,pr,prisma,py,raspberrypi,react,redis,regex,sass,stackoverflow,ts,visualstudio,vscode,vue,workers\" alt=\"skills\"></p>\n</figure>\n</center>"}],"Post":[{"title":"Java学习之路--注释","date":"2020-01-19T16:00:00.000Z","_content":"```java\n/**\n * Java注释\n * @author 葛宇\n */\npackage 数据类型和运算符; //这是单行注释\n\npublic class TestComment {\n\tpublic static void main(String[] args /*多行注释也可用作行内注释*/) {\n\t\tSystem.out.println(\"Hello World !\"); \n\t}\n\t/*\n\t * 多行注释\n\t * 多行注释\n\t * 多行注释\n\t */\n}\n```\n","source":"_posts/Java学习之路(1).md","raw":"---\ntitle:  Java学习之路--注释\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-20\n\n---\n```java\n/**\n * Java注释\n * @author 葛宇\n */\npackage 数据类型和运算符; //这是单行注释\n\npublic class TestComment {\n\tpublic static void main(String[] args /*多行注释也可用作行内注释*/) {\n\t\tSystem.out.println(\"Hello World !\"); \n\t}\n\t/*\n\t * 多行注释\n\t * 多行注释\n\t * 多行注释\n\t */\n}\n```\n","slug":"Java学习之路(1)","published":1,"updated":"2020-02-28T05:53:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7jm00007svwv0elkd6t","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Java注释</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符; <span class=\"comment\">//这是单行注释</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestComment</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args <span class=\"comment\">/*多行注释也可用作行内注释*/</span>)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Hello World !\"</span>); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * 多行注释</span></span><br><span class=\"line\"><span class=\"comment\">\t * 多行注释</span></span><br><span class=\"line\"><span class=\"comment\">\t * 多行注释</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Java注释</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符; <span class=\"comment\">//这是单行注释</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestComment</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args <span class=\"comment\">/*多行注释也可用作行内注释*/</span>)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Hello World !\"</span>); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * 多行注释</span></span><br><span class=\"line\"><span class=\"comment\">\t * 多行注释</span></span><br><span class=\"line\"><span class=\"comment\">\t * 多行注释</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--字符串连接符","date":"2020-01-22T16:00:00.000Z","_content":"```java\n/**\n * 测试字符串连接符\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestOperator_4 {\n\tpublic static void main(String[] args) {\n\t\tint a = 1;\n\t\tint b = 2;\n\t\tString c = \"3\";\n\t\tSystem.out.println(a+b);\t\t//输出整数3\n\t\tSystem.out.println(a+c);\t\t//输出整数1和字符串3的组合\n\t\tSystem.out.println(c+a);\t\t//输出字符串3和整数1的组合\n\t\tSystem.out.println(a+b+c);\t\t//输出整数3和字符串3的组合\n\t\tSystem.out.println(c+b+a);\t\t//输出字符串32和整数1的组合\n\t\n\t\tchar d = '4';\t\t\t\t\t//字符型变量d对应的4的Unicode编码为U+0034(十六进制)\n\t\tSystem.out.println(d);\t\t\t//输出字符4\n\t\tSystem.out.println(a+d);\t\t//输出字符4转化为整数后的数值与1的和\n\t\tSystem.out.println(c+d);\t\t//将字符4纳入字符串c,输出字符串34\n\t\t\n\t}\n}\n\n```\n","source":"_posts/Java学习之路(10).md","raw":"---\ntitle:  Java学习之路--字符串连接符\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-23\n\n---\n```java\n/**\n * 测试字符串连接符\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestOperator_4 {\n\tpublic static void main(String[] args) {\n\t\tint a = 1;\n\t\tint b = 2;\n\t\tString c = \"3\";\n\t\tSystem.out.println(a+b);\t\t//输出整数3\n\t\tSystem.out.println(a+c);\t\t//输出整数1和字符串3的组合\n\t\tSystem.out.println(c+a);\t\t//输出字符串3和整数1的组合\n\t\tSystem.out.println(a+b+c);\t\t//输出整数3和字符串3的组合\n\t\tSystem.out.println(c+b+a);\t\t//输出字符串32和整数1的组合\n\t\n\t\tchar d = '4';\t\t\t\t\t//字符型变量d对应的4的Unicode编码为U+0034(十六进制)\n\t\tSystem.out.println(d);\t\t\t//输出字符4\n\t\tSystem.out.println(a+d);\t\t//输出字符4转化为整数后的数值与1的和\n\t\tSystem.out.println(c+d);\t\t//将字符4纳入字符串c,输出字符串34\n\t\t\n\t}\n}\n\n```\n","slug":"Java学习之路(10)","published":1,"updated":"2020-02-28T05:52:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7jv00017svwj5qdb9tg","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试字符串连接符</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestOperator_4</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tString c = <span class=\"string\">\"3\"</span>;</span><br><span class=\"line\">\t\tSystem.out.println(a+b);\t\t<span class=\"comment\">//输出整数3</span></span><br><span class=\"line\">\t\tSystem.out.println(a+c);\t\t<span class=\"comment\">//输出整数1和字符串3的组合</span></span><br><span class=\"line\">\t\tSystem.out.println(c+a);\t\t<span class=\"comment\">//输出字符串3和整数1的组合</span></span><br><span class=\"line\">\t\tSystem.out.println(a+b+c);\t\t<span class=\"comment\">//输出整数3和字符串3的组合</span></span><br><span class=\"line\">\t\tSystem.out.println(c+b+a);\t\t<span class=\"comment\">//输出字符串32和整数1的组合</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> d = <span class=\"string\">'4'</span>;\t\t\t\t\t<span class=\"comment\">//字符型变量d对应的4的Unicode编码为U+0034(十六进制)</span></span><br><span class=\"line\">\t\tSystem.out.println(d);\t\t\t<span class=\"comment\">//输出字符4</span></span><br><span class=\"line\">\t\tSystem.out.println(a+d);\t\t<span class=\"comment\">//输出字符4转化为整数后的数值与1的和</span></span><br><span class=\"line\">\t\tSystem.out.println(c+d);\t\t<span class=\"comment\">//将字符4纳入字符串c,输出字符串34</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试字符串连接符</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestOperator_4</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tString c = <span class=\"string\">\"3\"</span>;</span><br><span class=\"line\">\t\tSystem.out.println(a+b);\t\t<span class=\"comment\">//输出整数3</span></span><br><span class=\"line\">\t\tSystem.out.println(a+c);\t\t<span class=\"comment\">//输出整数1和字符串3的组合</span></span><br><span class=\"line\">\t\tSystem.out.println(c+a);\t\t<span class=\"comment\">//输出字符串3和整数1的组合</span></span><br><span class=\"line\">\t\tSystem.out.println(a+b+c);\t\t<span class=\"comment\">//输出整数3和字符串3的组合</span></span><br><span class=\"line\">\t\tSystem.out.println(c+b+a);\t\t<span class=\"comment\">//输出字符串32和整数1的组合</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> d = <span class=\"string\">'4'</span>;\t\t\t\t\t<span class=\"comment\">//字符型变量d对应的4的Unicode编码为U+0034(十六进制)</span></span><br><span class=\"line\">\t\tSystem.out.println(d);\t\t\t<span class=\"comment\">//输出字符4</span></span><br><span class=\"line\">\t\tSystem.out.println(a+d);\t\t<span class=\"comment\">//输出字符4转化为整数后的数值与1的和</span></span><br><span class=\"line\">\t\tSystem.out.println(c+d);\t\t<span class=\"comment\">//将字符4纳入字符串c,输出字符串34</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--从键盘读入数据","date":"2020-01-22T16:00:00.000Z","_content":"```java\n/**\n * 测试从键盘读入数据\n * @author 葛宇\n */\npackage 数据类型和运算符;\nimport java.util.Scanner;\n\npublic class TestScanner {\n\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\t//创建IO流对象\n\t\tSystem.out.println(\"请输入姓名：\");\n\t\tString name = scanner.nextLine();\n\t\tSystem.out.println(\"请输入性别：\");\n\t\tString sex = scanner.nextLine();\n\t\tSystem.out.println(\"请输入ID：\");\n\t\tint age = scanner.nextInt();\n\t\t\n\t\tSystem.out.println(name);\n\t\tSystem.out.println(sex);\n\t\tSystem.out.println(age);\n\t}\n}\n\n\n```\n","source":"_posts/Java学习之路(11).md","raw":"---\ntitle:  Java学习之路--从键盘读入数据\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-23\n\n---\n```java\n/**\n * 测试从键盘读入数据\n * @author 葛宇\n */\npackage 数据类型和运算符;\nimport java.util.Scanner;\n\npublic class TestScanner {\n\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\t//创建IO流对象\n\t\tSystem.out.println(\"请输入姓名：\");\n\t\tString name = scanner.nextLine();\n\t\tSystem.out.println(\"请输入性别：\");\n\t\tString sex = scanner.nextLine();\n\t\tSystem.out.println(\"请输入ID：\");\n\t\tint age = scanner.nextInt();\n\t\t\n\t\tSystem.out.println(name);\n\t\tSystem.out.println(sex);\n\t\tSystem.out.println(age);\n\t}\n}\n\n\n```\n","slug":"Java学习之路(11)","published":1,"updated":"2020-02-28T05:52:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7jz00047svwf6njxj74","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试从键盘读入数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestScanner</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tScanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);\t<span class=\"comment\">//创建IO流对象</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"请输入姓名：\"</span>);</span><br><span class=\"line\">\t\tString name = scanner.nextLine();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"请输入性别：\"</span>);</span><br><span class=\"line\">\t\tString sex = scanner.nextLine();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"请输入ID：\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> age = scanner.nextInt();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(name);</span><br><span class=\"line\">\t\tSystem.out.println(sex);</span><br><span class=\"line\">\t\tSystem.out.println(age);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试从键盘读入数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestScanner</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tScanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);\t<span class=\"comment\">//创建IO流对象</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"请输入姓名：\"</span>);</span><br><span class=\"line\">\t\tString name = scanner.nextLine();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"请输入性别：\"</span>);</span><br><span class=\"line\">\t\tString sex = scanner.nextLine();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"请输入ID：\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> age = scanner.nextInt();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(name);</span><br><span class=\"line\">\t\tSystem.out.println(sex);</span><br><span class=\"line\">\t\tSystem.out.println(age);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--方法","date":"2020-01-22T16:00:00.000Z","_content":"```java\n/**\n * 测试Java方法\n * @author 葛宇\n */\npackage 控制语句;\n\npublic class TestMethod {\n\tpublic static void main(String[] args) {\n\t\t//通过对象调用普通方法\n\t\tTestMethod obj = new TestMethod();\n\t\tobj.Method_1();\n\t\tobj.Method_2(1, 2);\n\t\tint total = obj.Method_3(1, 2);\n\t\tSystem.out.println(total);\t\t\n\t}\n\t\n\tvoid Method_1() {\n\t\tSystem.out.println(\"This is Method_1\");\n\t}\n\t\n\tvoid Method_2(int a,int b) {\n\t\tint sum = a+b;\n\t\tSystem.out.println(sum);\n\t}\n\t\n\tint Method_3(int a,int b) {\n\t\tint sum = a+b;\n\t\treturn sum;\n\t\t//return两个作用：结束方法的运行；返回值\n\t}\n}\n\n/*\n * 要点：\n * 实参的数目，数据类型，次序必须和对应方法的形参列表匹配\n * Java中的普通参数传递均为值传递 \n */\n\n\n\n```\n","source":"_posts/Java学习之路(12).md","raw":"---\ntitle:  Java学习之路--方法\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-23\n\n---\n```java\n/**\n * 测试Java方法\n * @author 葛宇\n */\npackage 控制语句;\n\npublic class TestMethod {\n\tpublic static void main(String[] args) {\n\t\t//通过对象调用普通方法\n\t\tTestMethod obj = new TestMethod();\n\t\tobj.Method_1();\n\t\tobj.Method_2(1, 2);\n\t\tint total = obj.Method_3(1, 2);\n\t\tSystem.out.println(total);\t\t\n\t}\n\t\n\tvoid Method_1() {\n\t\tSystem.out.println(\"This is Method_1\");\n\t}\n\t\n\tvoid Method_2(int a,int b) {\n\t\tint sum = a+b;\n\t\tSystem.out.println(sum);\n\t}\n\t\n\tint Method_3(int a,int b) {\n\t\tint sum = a+b;\n\t\treturn sum;\n\t\t//return两个作用：结束方法的运行；返回值\n\t}\n}\n\n/*\n * 要点：\n * 实参的数目，数据类型，次序必须和对应方法的形参列表匹配\n * Java中的普通参数传递均为值传递 \n */\n\n\n\n```\n","slug":"Java学习之路(12)","published":1,"updated":"2020-02-28T05:52:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7k100057svw01ti5knk","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试Java方法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestMethod</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//通过对象调用普通方法</span></span><br><span class=\"line\">\t\tTestMethod obj = <span class=\"keyword\">new</span> TestMethod();</span><br><span class=\"line\">\t\tobj.Method_1();</span><br><span class=\"line\">\t\tobj.Method_2(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> total = obj.Method_3(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tSystem.out.println(total);\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Method_1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"This is Method_1\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Method_2</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = a+b;</span><br><span class=\"line\">\t\tSystem.out.println(sum);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Method_3</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = a+b;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">\t\t<span class=\"comment\">//return两个作用：结束方法的运行；返回值</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 要点：</span></span><br><span class=\"line\"><span class=\"comment\"> * 实参的数目，数据类型，次序必须和对应方法的形参列表匹配</span></span><br><span class=\"line\"><span class=\"comment\"> * Java中的普通参数传递均为值传递 </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试Java方法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestMethod</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//通过对象调用普通方法</span></span><br><span class=\"line\">\t\tTestMethod obj = <span class=\"keyword\">new</span> TestMethod();</span><br><span class=\"line\">\t\tobj.Method_1();</span><br><span class=\"line\">\t\tobj.Method_2(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> total = obj.Method_3(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tSystem.out.println(total);\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Method_1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"This is Method_1\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Method_2</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = a+b;</span><br><span class=\"line\">\t\tSystem.out.println(sum);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Method_3</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = a+b;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">\t\t<span class=\"comment\">//return两个作用：结束方法的运行；返回值</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 要点：</span></span><br><span class=\"line\"><span class=\"comment\"> * 实参的数目，数据类型，次序必须和对应方法的形参列表匹配</span></span><br><span class=\"line\"><span class=\"comment\"> * Java中的普通参数传递均为值传递 </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--方法的重载","date":"2020-01-22T16:00:00.000Z","_content":"```java\n/**\n * 测试方法的重载\n * @author 葛宇\n */\npackage 控制语句;\n\npublic class TestOverload {\n\tpublic static void main(String[] args) {\n\t\t\n\t}\n\t\n\t/*求和的方法，static修饰，调用时无需创建对象*/\n\tpublic static int add(int n1,int n2) {\n\t\tint sum = n1+n2;\n\t\treturn sum;\n\t}\n\t//方法名相同，参数个数不同，构成重载\n\tpublic static int add(int n1,int n2,int n3) {\n\t\tint sum = n1+n2+n3;\n\t\treturn sum;\n\t}\n\t//方法名相同，参数类型不同，构成重载\n\tpublic static double add(double n1,int n2) {\n\t\tdouble sum = n1+n2;\n\t\treturn sum;\n\t}\n\t//方法名相同，参数顺序不同，构成重载\n\tpublic static double add(int n1,double n2) {\n\t\tdouble sum = n1+n2;\n\t\treturn sum;\n\t}\n\t\n\t/**方法名相同，返回值类型不同，无法构成重载，报错！！！\n\t \tpublic static double add(int n1,int n2) {\n\t\tdouble sum = n1+n2;\n\t\treturn sum;\n\t}\n\t */\n\t\n\t/**方法名相同，形参名不同，无法构成重载，报错！！！\n \t\tpublic static double add(int n2,int n1) {\n\t\tdouble sum = n1+n2;\n\t\treturn sum;\n\t}\n\t */\n}\n\n\n```\n","source":"_posts/Java学习之路(13).md","raw":"---\ntitle:  Java学习之路--方法的重载\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-23\n\n---\n```java\n/**\n * 测试方法的重载\n * @author 葛宇\n */\npackage 控制语句;\n\npublic class TestOverload {\n\tpublic static void main(String[] args) {\n\t\t\n\t}\n\t\n\t/*求和的方法，static修饰，调用时无需创建对象*/\n\tpublic static int add(int n1,int n2) {\n\t\tint sum = n1+n2;\n\t\treturn sum;\n\t}\n\t//方法名相同，参数个数不同，构成重载\n\tpublic static int add(int n1,int n2,int n3) {\n\t\tint sum = n1+n2+n3;\n\t\treturn sum;\n\t}\n\t//方法名相同，参数类型不同，构成重载\n\tpublic static double add(double n1,int n2) {\n\t\tdouble sum = n1+n2;\n\t\treturn sum;\n\t}\n\t//方法名相同，参数顺序不同，构成重载\n\tpublic static double add(int n1,double n2) {\n\t\tdouble sum = n1+n2;\n\t\treturn sum;\n\t}\n\t\n\t/**方法名相同，返回值类型不同，无法构成重载，报错！！！\n\t \tpublic static double add(int n1,int n2) {\n\t\tdouble sum = n1+n2;\n\t\treturn sum;\n\t}\n\t */\n\t\n\t/**方法名相同，形参名不同，无法构成重载，报错！！！\n \t\tpublic static double add(int n2,int n1) {\n\t\tdouble sum = n1+n2;\n\t\treturn sum;\n\t}\n\t */\n}\n\n\n```\n","slug":"Java学习之路(13)","published":1,"updated":"2020-02-28T05:52:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7k200067svw19k3huqv","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试方法的重载</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestOverload</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/*求和的方法，static修饰，调用时无需创建对象*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> n1,<span class=\"keyword\">int</span> n2)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = n1+n2;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//方法名相同，参数个数不同，构成重载</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> n1,<span class=\"keyword\">int</span> n2,<span class=\"keyword\">int</span> n3)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = n1+n2+n3;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//方法名相同，参数类型不同，构成重载</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">double</span> n1,<span class=\"keyword\">int</span> n2)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> sum = n1+n2;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//方法名相同，参数顺序不同，构成重载</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> n1,<span class=\"keyword\">double</span> n2)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> sum = n1+n2;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**方法名相同，返回值类型不同，无法构成重载，报错！！！</span></span><br><span class=\"line\"><span class=\"comment\">\t \tpublic static double add(int n1,int n2) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tdouble sum = n1+n2;</span></span><br><span class=\"line\"><span class=\"comment\">\t\treturn sum;</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**方法名相同，形参名不同，无法构成重载，报错！！！</span></span><br><span class=\"line\"><span class=\"comment\"> \t\tpublic static double add(int n2,int n1) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tdouble sum = n1+n2;</span></span><br><span class=\"line\"><span class=\"comment\">\t\treturn sum;</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试方法的重载</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestOverload</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/*求和的方法，static修饰，调用时无需创建对象*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> n1,<span class=\"keyword\">int</span> n2)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = n1+n2;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//方法名相同，参数个数不同，构成重载</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> n1,<span class=\"keyword\">int</span> n2,<span class=\"keyword\">int</span> n3)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = n1+n2+n3;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//方法名相同，参数类型不同，构成重载</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">double</span> n1,<span class=\"keyword\">int</span> n2)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> sum = n1+n2;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//方法名相同，参数顺序不同，构成重载</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> n1,<span class=\"keyword\">double</span> n2)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> sum = n1+n2;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**方法名相同，返回值类型不同，无法构成重载，报错！！！</span></span><br><span class=\"line\"><span class=\"comment\">\t \tpublic static double add(int n1,int n2) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tdouble sum = n1+n2;</span></span><br><span class=\"line\"><span class=\"comment\">\t\treturn sum;</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**方法名相同，形参名不同，无法构成重载，报错！！！</span></span><br><span class=\"line\"><span class=\"comment\"> \t\tpublic static double add(int n2,int n1) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tdouble sum = n1+n2;</span></span><br><span class=\"line\"><span class=\"comment\">\t\treturn sum;</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--If选择语句","date":"2020-01-24T16:00:00.000Z","_content":"```java\n/**\n * If选择语句\n * @author 葛宇\n */\npackage 控制语句;\n\npublic class TestIf {\n\tpublic static void main(String[] args) {\n\t\tdouble x = 6*Math.random();\n\t\tint age = (int)(80*Math.random());\t\t\n\t\tSystem.out.println(x);\n\t\tSystem.out.println(age);\n\t\t\n\t\t////////////if///////////\n\t\t\n\t\tif(x <= 2) {\n\t\t\tSystem.out.println(\"Small\");\n\t\t}\n\t\tif(x >= 2) {\n\t\t\tSystem.out.println(\"Large\");\n\t\t}\n\t\t\n\t\t//////////if-else/////////\n\t\t\n\t\tif(x <= 2) {\n\t\t\tSystem.out.println(\"Small\");\n\t\t}else {\n\t\t\tSystem.out.println(\"Large\");\n\t\t}\n\t\t\n\t\t///////Multi-if-else///////\n\t\t\n\t\tif(age <= 15) {\n\t\t\tSystem.out.println(\"儿童\");\n\t\t}else if(age <= 25) {\n\t\t\tSystem.out.println(\"青年\");\n\t\t}else if(age <= 45) {\n\t\t\tSystem.out.println(\"中年\");\n\t\t}else if(age <= 80) {\n\t\t\tSystem.out.println(\"老年\");\n\t\t}\n\t}\n}\n\n\n```\n","source":"_posts/Java学习之路(14).md","raw":"---\ntitle:  Java学习之路--If选择语句\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-25\n\n---\n```java\n/**\n * If选择语句\n * @author 葛宇\n */\npackage 控制语句;\n\npublic class TestIf {\n\tpublic static void main(String[] args) {\n\t\tdouble x = 6*Math.random();\n\t\tint age = (int)(80*Math.random());\t\t\n\t\tSystem.out.println(x);\n\t\tSystem.out.println(age);\n\t\t\n\t\t////////////if///////////\n\t\t\n\t\tif(x <= 2) {\n\t\t\tSystem.out.println(\"Small\");\n\t\t}\n\t\tif(x >= 2) {\n\t\t\tSystem.out.println(\"Large\");\n\t\t}\n\t\t\n\t\t//////////if-else/////////\n\t\t\n\t\tif(x <= 2) {\n\t\t\tSystem.out.println(\"Small\");\n\t\t}else {\n\t\t\tSystem.out.println(\"Large\");\n\t\t}\n\t\t\n\t\t///////Multi-if-else///////\n\t\t\n\t\tif(age <= 15) {\n\t\t\tSystem.out.println(\"儿童\");\n\t\t}else if(age <= 25) {\n\t\t\tSystem.out.println(\"青年\");\n\t\t}else if(age <= 45) {\n\t\t\tSystem.out.println(\"中年\");\n\t\t}else if(age <= 80) {\n\t\t\tSystem.out.println(\"老年\");\n\t\t}\n\t}\n}\n\n\n```\n","slug":"Java学习之路(14)","published":1,"updated":"2020-02-28T05:51:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7ko00097svw21884kdf","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * If选择语句</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestIf</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> x = <span class=\"number\">6</span>*Math.random();</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> age = (<span class=\"keyword\">int</span>)(<span class=\"number\">80</span>*Math.random());\t\t</span><br><span class=\"line\">\t\tSystem.out.println(x);</span><br><span class=\"line\">\t\tSystem.out.println(age);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">////////////if///////////</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Small\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Large\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//////////if-else/////////</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Small\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Large\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">///////Multi-if-else///////</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(age &lt;= <span class=\"number\">15</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"儿童\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(age &lt;= <span class=\"number\">25</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"青年\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(age &lt;= <span class=\"number\">45</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"中年\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(age &lt;= <span class=\"number\">80</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"老年\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * If选择语句</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestIf</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> x = <span class=\"number\">6</span>*Math.random();</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> age = (<span class=\"keyword\">int</span>)(<span class=\"number\">80</span>*Math.random());\t\t</span><br><span class=\"line\">\t\tSystem.out.println(x);</span><br><span class=\"line\">\t\tSystem.out.println(age);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">////////////if///////////</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Small\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Large\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//////////if-else/////////</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Small\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Large\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">///////Multi-if-else///////</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(age &lt;= <span class=\"number\">15</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"儿童\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(age &lt;= <span class=\"number\">25</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"青年\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(age &lt;= <span class=\"number\">45</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"中年\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(age &lt;= <span class=\"number\">80</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"老年\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--switch多选择","date":"2020-01-24T16:00:00.000Z","_content":"```java\n/**\n * 测试switch多选择\n * @author 葛宇\n */\npackage 控制语句;\n\npublic class TestSwitch {\n\tpublic static void main(String[] args) {\n\t\tint a = (int)(6*Math.random())+1;\n\t\tSystem.out.println(\"骰点：\"+a);\n\t\t\n\t\tswitch(a) {\n\t\tcase 1:\n\t\t\tSystem.out.println(\"1点\");\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tSystem.out.println(\"2点\");\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tSystem.out.println(\"3点\");\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tSystem.out.println(\"4点\");\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tSystem.out.println(\"5点\");\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tSystem.out.println(\"6点\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t\n\t\t//若省略break则会往下一条case穿透执行\t\n\t\t}\n\t}\n}\n\n\n```\n","source":"_posts/Java学习之路(15).md","raw":"---\ntitle:  Java学习之路--switch多选择\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-25\n\n---\n```java\n/**\n * 测试switch多选择\n * @author 葛宇\n */\npackage 控制语句;\n\npublic class TestSwitch {\n\tpublic static void main(String[] args) {\n\t\tint a = (int)(6*Math.random())+1;\n\t\tSystem.out.println(\"骰点：\"+a);\n\t\t\n\t\tswitch(a) {\n\t\tcase 1:\n\t\t\tSystem.out.println(\"1点\");\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tSystem.out.println(\"2点\");\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tSystem.out.println(\"3点\");\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tSystem.out.println(\"4点\");\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tSystem.out.println(\"5点\");\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tSystem.out.println(\"6点\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t\n\t\t//若省略break则会往下一条case穿透执行\t\n\t\t}\n\t}\n}\n\n\n```\n","slug":"Java学习之路(15)","published":1,"updated":"2020-02-28T05:51:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7kq000a7svw2hwsu70k","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试switch多选择</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSwitch</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a = (<span class=\"keyword\">int</span>)(<span class=\"number\">6</span>*Math.random())+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"骰点：\"</span>+a);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span>(a) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"1点\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"2点\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"3点\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"4点\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"5点\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"6点\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//若省略break则会往下一条case穿透执行\t</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试switch多选择</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSwitch</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a = (<span class=\"keyword\">int</span>)(<span class=\"number\">6</span>*Math.random())+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"骰点：\"</span>+a);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span>(a) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"1点\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"2点\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"3点\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"4点\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"5点\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"6点\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//若省略break则会往下一条case穿透执行\t</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--while循环","date":"2020-01-24T16:00:00.000Z","_content":"```java\n/**\n * 测试while\n * @author 葛宇\n */\npackage 控制语句;\n\npublic class TestWhile {\n\tpublic static void main(String[] args) {\n\t\t/////////////////while/////////////////\n\t\t\n\t\tint i = 1;\n\t\tint sum = 0;\n\t\t//while的循环条件必须是布尔型，0或1无效\n\t\twhile(i <= 100) {\n\t\t\tsum += i;\n\t\t\ti++;\n\t\t}\n\t\tSystem.out.println(sum);\n\n\t\t////////////////do-while////////////////\n\t\t\n\t\ti = 0;\n\t\tsum = 0;\n\t\tdo {\n\t\t\tsum += i;\n\t\t\ti++;\n\t\t}while(i <= 100);\n\t\tSystem.out.println(sum);\n\t}\n}\n\n\n```\n","source":"_posts/Java学习之路(16).md","raw":"---\ntitle:  Java学习之路--while循环\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-25\n\n---\n```java\n/**\n * 测试while\n * @author 葛宇\n */\npackage 控制语句;\n\npublic class TestWhile {\n\tpublic static void main(String[] args) {\n\t\t/////////////////while/////////////////\n\t\t\n\t\tint i = 1;\n\t\tint sum = 0;\n\t\t//while的循环条件必须是布尔型，0或1无效\n\t\twhile(i <= 100) {\n\t\t\tsum += i;\n\t\t\ti++;\n\t\t}\n\t\tSystem.out.println(sum);\n\n\t\t////////////////do-while////////////////\n\t\t\n\t\ti = 0;\n\t\tsum = 0;\n\t\tdo {\n\t\t\tsum += i;\n\t\t\ti++;\n\t\t}while(i <= 100);\n\t\tSystem.out.println(sum);\n\t}\n}\n\n\n```\n","slug":"Java学习之路(16)","published":1,"updated":"2020-02-28T05:51:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7ks000e7svwe03yk5lf","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试while</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestWhile</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/////////////////while/////////////////</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//while的循环条件必须是布尔型，0或1无效</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(i &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">\t\t\tsum += i;</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(sum);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">////////////////do-while////////////////</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\ti = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tsum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">\t\t\tsum += i;</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">while</span>(i &lt;= <span class=\"number\">100</span>);</span><br><span class=\"line\">\t\tSystem.out.println(sum);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试while</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestWhile</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/////////////////while/////////////////</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//while的循环条件必须是布尔型，0或1无效</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(i &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">\t\t\tsum += i;</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(sum);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">////////////////do-while////////////////</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\ti = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tsum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">\t\t\tsum += i;</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">while</span>(i &lt;= <span class=\"number\">100</span>);</span><br><span class=\"line\">\t\tSystem.out.println(sum);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--for循环","date":"2020-01-24T16:00:00.000Z","_content":"```java\n/**\n *测试for循环\n *@author 葛宇\n */\npackage 控制语句;\n\npublic class TestFor {\n\tpublic static void main(String[] args) {\n\t\tint sum = 0;\n\t\tfor(int i=1;i<=100;i++) {\n\t\t\tsum+=i;\n\t\t}\n\t\tSystem.out.println(sum);\n\t\t\n\t\t/*\n\t\t * 1. 执行初始化语句：i=1\n\t\t * 2. 执行判断：i<=100\n\t\t * 3. 执行循环体：sum+=i\n\t\t * 4. 执行步进：i++\n\t\t * 5. 返回第2步\n\t\t */\n\t}\n}\n\n\n```\n","source":"_posts/Java学习之路(17).md","raw":"---\ntitle:  Java学习之路--for循环\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-25\n\n---\n```java\n/**\n *测试for循环\n *@author 葛宇\n */\npackage 控制语句;\n\npublic class TestFor {\n\tpublic static void main(String[] args) {\n\t\tint sum = 0;\n\t\tfor(int i=1;i<=100;i++) {\n\t\t\tsum+=i;\n\t\t}\n\t\tSystem.out.println(sum);\n\t\t\n\t\t/*\n\t\t * 1. 执行初始化语句：i=1\n\t\t * 2. 执行判断：i<=100\n\t\t * 3. 执行循环体：sum+=i\n\t\t * 4. 执行步进：i++\n\t\t * 5. 返回第2步\n\t\t */\n\t}\n}\n\n\n```\n","slug":"Java学习之路(17)","published":1,"updated":"2020-02-28T05:53:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7ku000g7svwpiqpw0h2","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *测试for循环</span></span><br><span class=\"line\"><span class=\"comment\"> *<span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestFor</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">100</span>;i++) &#123;</span><br><span class=\"line\">\t\t\tsum+=i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(sum);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 1. 执行初始化语句：i=1</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 2. 执行判断：i&lt;=100</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 3. 执行循环体：sum+=i</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 4. 执行步进：i++</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 5. 返回第2步</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *测试for循环</span></span><br><span class=\"line\"><span class=\"comment\"> *<span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestFor</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">100</span>;i++) &#123;</span><br><span class=\"line\">\t\t\tsum+=i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(sum);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 1. 执行初始化语句：i=1</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 2. 执行判断：i&lt;=100</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 3. 执行循环体：sum+=i</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 4. 执行步进：i++</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 5. 返回第2步</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--循环语句中的break","date":"2020-01-25T16:00:00.000Z","_content":"```java\n/**\n * 测试循环语句中的break\n * @author 葛宇\n */\npackage 控制语句;\n\npublic class TestBreak {\n\tpublic static void main(String[] args) {\n\t\tint total = 0;\n\t\twhile(true) {\n\t\t\tint i = (int)Math.round(100*Math.random());\n\t\t\tSystem.out.println(i);\n\t\t\tif(i==50) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttotal++;\n\t\t}\n\t\tSystem.out.println(\"循环次数为：\"+total);\n\t}\n}\n//输出循环次数为30\n\n```\n","source":"_posts/Java学习之路(18).md","raw":"---\ntitle:  Java学习之路--循环语句中的break\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-26\n\n---\n```java\n/**\n * 测试循环语句中的break\n * @author 葛宇\n */\npackage 控制语句;\n\npublic class TestBreak {\n\tpublic static void main(String[] args) {\n\t\tint total = 0;\n\t\twhile(true) {\n\t\t\tint i = (int)Math.round(100*Math.random());\n\t\t\tSystem.out.println(i);\n\t\t\tif(i==50) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttotal++;\n\t\t}\n\t\tSystem.out.println(\"循环次数为：\"+total);\n\t}\n}\n//输出循环次数为30\n\n```\n","slug":"Java学习之路(18)","published":1,"updated":"2020-02-28T06:00:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7l2000k7svw7gvkps2i","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试循环语句中的break</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBreak</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> i = (<span class=\"keyword\">int</span>)Math.round(<span class=\"number\">100</span>*Math.random());</span><br><span class=\"line\">\t\t\tSystem.out.println(i);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i==<span class=\"number\">50</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ttotal++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"循环次数为：\"</span>+total);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出循环次数为30</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试循环语句中的break</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBreak</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> i = (<span class=\"keyword\">int</span>)Math.round(<span class=\"number\">100</span>*Math.random());</span><br><span class=\"line\">\t\t\tSystem.out.println(i);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i==<span class=\"number\">50</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ttotal++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"循环次数为：\"</span>+total);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出循环次数为30</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--循环语句中的continue","date":"2020-01-25T16:00:00.000Z","_content":"```java\n/**\n * 测试循环中的continue\n * @author 葛宇\n */\npackage 控制语句;\n\npublic class TestContinue {\n\tpublic static void main(String[] args) {\n\t\tint count = 0;\n\t\tfor(int i=1;i<=100;i++) {\n\t\t\tif(i%3==0) {\n\t\t\t\t//能被3整除则跳过这次循环\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t//否则输出不能被3整除的数\n\t\t\tSystem.out.print(i+\"  \");\n\t\t\tcount++;\n\t\t\tif(count%5==0) {\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n","source":"_posts/Java学习之路(19).md","raw":"---\ntitle:  Java学习之路--循环语句中的continue\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-26\n\n---\n```java\n/**\n * 测试循环中的continue\n * @author 葛宇\n */\npackage 控制语句;\n\npublic class TestContinue {\n\tpublic static void main(String[] args) {\n\t\tint count = 0;\n\t\tfor(int i=1;i<=100;i++) {\n\t\t\tif(i%3==0) {\n\t\t\t\t//能被3整除则跳过这次循环\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t//否则输出不能被3整除的数\n\t\t\tSystem.out.print(i+\"  \");\n\t\t\tcount++;\n\t\t\tif(count%5==0) {\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n","slug":"Java学习之路(19)","published":1,"updated":"2020-02-28T06:00:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7l4000n7svwnmuw4i9s","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试循环中的continue</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestContinue</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">100</span>;i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i%<span class=\"number\">3</span>==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//能被3整除则跳过这次循环</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//否则输出不能被3整除的数</span></span><br><span class=\"line\">\t\t\tSystem.out.print(i+<span class=\"string\">\"  \"</span>);</span><br><span class=\"line\">\t\t\tcount++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(count%<span class=\"number\">5</span>==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试循环中的continue</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestContinue</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">100</span>;i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i%<span class=\"number\">3</span>==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//能被3整除则跳过这次循环</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//否则输出不能被3整除的数</span></span><br><span class=\"line\">\t\t\tSystem.out.print(i+<span class=\"string\">\"  \"</span>);</span><br><span class=\"line\">\t\t\tcount++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(count%<span class=\"number\">5</span>==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--java标识符","date":"2020-01-19T16:00:00.000Z","_content":"```java\n/**\n * Java标识符用法\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestIdentifer {\n\tpublic static void main(String[] args) {\n\t\tint a123 = 1;\n                             //int 123a = 2; 数字不能打头\n\t\tint $abc = 3;\n\t\tint _abc = 4; \n\t\tint  年龄 = 18; //Java支持中文变量但不建议使用\n\t             //int public =5;   关键字不能作为变量去使用\n\t}\n}\n\n```\n","source":"_posts/Java学习之路(2).md","raw":"---\ntitle:  Java学习之路--java标识符\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-20\n\n---\n```java\n/**\n * Java标识符用法\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestIdentifer {\n\tpublic static void main(String[] args) {\n\t\tint a123 = 1;\n                             //int 123a = 2; 数字不能打头\n\t\tint $abc = 3;\n\t\tint _abc = 4; \n\t\tint  年龄 = 18; //Java支持中文变量但不建议使用\n\t             //int public =5;   关键字不能作为变量去使用\n\t}\n}\n\n```\n","slug":"Java学习之路(2)","published":1,"updated":"2020-02-28T05:18:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7l6000r7svw6csrdj6g","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Java标识符用法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestIdentifer</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a123 = <span class=\"number\">1</span>;</span><br><span class=\"line\">                             <span class=\"comment\">//int 123a = 2; 数字不能打头</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> $abc = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> _abc = <span class=\"number\">4</span>; </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>  年龄 = <span class=\"number\">18</span>; <span class=\"comment\">//Java支持中文变量但不建议使用</span></span><br><span class=\"line\">\t             <span class=\"comment\">//int public =5;   关键字不能作为变量去使用</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Java标识符用法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestIdentifer</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a123 = <span class=\"number\">1</span>;</span><br><span class=\"line\">                             <span class=\"comment\">//int 123a = 2; 数字不能打头</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> $abc = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> _abc = <span class=\"number\">4</span>; </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>  年龄 = <span class=\"number\">18</span>; <span class=\"comment\">//Java支持中文变量但不建议使用</span></span><br><span class=\"line\">\t             <span class=\"comment\">//int public =5;   关键字不能作为变量去使用</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--循环语句中标签的continue","date":"2020-01-25T16:00:00.000Z","_content":"```java\n/**\n * 测试带标签的continue\n * @author 葛宇\n */\npackage 控制语句;\n\n//Java中保留了goto关键字但并不允许使用goto语句\npublic class TestLableContinue {\n\tpublic static void main(String[] args) {\n\t\t\n\t\t//打印101到150之间所有质数\n\t\touter:for(int i=101;i<=150;i++) {\n\t\t\tfor(int j=2;j<i/2;j++) {\n\t\t\t\tif(i%j==0) {\n\t\t\t\t\tcontinue outer;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(i+\" \");\n\t\t}\n\t\t\n\t}\n}\n\n```\n","source":"_posts/Java学习之路(20).md","raw":"---\ntitle:  Java学习之路--循环语句中标签的continue\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-26\n\n---\n```java\n/**\n * 测试带标签的continue\n * @author 葛宇\n */\npackage 控制语句;\n\n//Java中保留了goto关键字但并不允许使用goto语句\npublic class TestLableContinue {\n\tpublic static void main(String[] args) {\n\t\t\n\t\t//打印101到150之间所有质数\n\t\touter:for(int i=101;i<=150;i++) {\n\t\t\tfor(int j=2;j<i/2;j++) {\n\t\t\t\tif(i%j==0) {\n\t\t\t\t\tcontinue outer;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(i+\" \");\n\t\t}\n\t\t\n\t}\n}\n\n```\n","slug":"Java学习之路(20)","published":1,"updated":"2020-02-28T06:00:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7l7000u7svwrkyyj8j4","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试带标签的continue</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Java中保留了goto关键字但并不允许使用goto语句</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestLableContinue</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//打印101到150之间所有质数</span></span><br><span class=\"line\">\t\touter:<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">101</span>;i&lt;=<span class=\"number\">150</span>;i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">2</span>;j&lt;i/<span class=\"number\">2</span>;j++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(i%j==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">continue</span> outer;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(i+<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试带标签的continue</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Java中保留了goto关键字但并不允许使用goto语句</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestLableContinue</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//打印101到150之间所有质数</span></span><br><span class=\"line\">\t\touter:<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">101</span>;i&lt;=<span class=\"number\">150</span>;i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">2</span>;j&lt;i/<span class=\"number\">2</span>;j++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(i%j==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">continue</span> outer;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(i+<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--类和对象","date":"2020-01-26T16:00:00.000Z","_content":"```java\n/**\n   *   测试类和对象\n * @author 葛宇\n */\npackage 面向对象;\n\n//一个文件可以有多个类，但是public修饰的类只能有一个\npublic class TestFirstClass {\n\t//开始就以学生为对象做示例\n\t\n\t//属性\n\tint id;\n\tint age;\n\tString name;\n\tSubjects subject;\n\t\n\t//方法\n\tvoid study() {\n\t\tSystem.out.println(\"学习\"+subject.name);\n\t}\n\t\n\tvoid show() {\n\t\tSystem.out.println(\"ID:\"+this.id);\n\t\tSystem.out.println(\"AGE:\"+this.age);\n\t\tSystem.out.println(\"NAME:\"+this.name);\n\t}\n\t\n\tTestFirstClass(){\n\t\t//构造方法，用于创建类对象，方法名与类名保持一致，无返回值，无参构造方法可由系统自动生成\t\n\t}\n\t\n\t\n\t//main（）方法程序执行的入口，必不可少\n\tpublic static void main(String[] args) {\n\t\tTestFirstClass stu = new TestFirstClass();\t\t//调用构造方法在堆区创建对象，返回对象在堆区的地址\n\t\tSubjects sub = new Subjects();\t\t\t\t\t//调用构造方法在堆区创建对象，返回对象在堆区的地址\n\t\t\n\t\t//对象属性的赋值\n\t\tsub.name = \"JAVA课设\";\n\t\t//对象属性的赋值\n\t\tstu.id = 12345;\n\t\tstu.age = 20;\n\t\tstu.name = \"葛宇\";\n\t\tstu.subject = sub;\t\n\t\t\n\t\tstu.study();\t\t//调用类方法\n\t\tstu.show();\t\t\t//调用类方法\n\t\t\n\t\tSystem.out.println(sub);\t\t\t//打印对象地址\n\t\tSystem.out.println(stu.subject);\t//打印对象地址\n\t  //观察发现输出两个对象地址相同，原因是sub放于堆中，44行的赋值实际上是把sub的堆地址赋值给了stu.subject\n\t  //分析可知：sub和stu.subject都位于栈区，都指向堆区的同一个对象地址\n\t}\n}\n\n//学科科目类\nclass Subjects{\n\tString name;\n}\n\n/* JAVA内存分析\n * JAVA中主要把内存分为三部分：栈、堆、方法区（其中堆区包含方法区）\n * \n * \t栈：JVM会为每个线程创建一个栈且栈属于线程私有，无法与其他线程共享；\n * \t        栈的存储特性是“先进后出”；\n * \t        栈是自动分配，内存空间连续，速度快；\n * \t        程序中的每个方法执行时都会在栈中创建一个栈帧，用于存放该方法运行时数据、局部变量、实参、返回值等信息；\n * \n * \t堆：堆区存放创建好的对象和数组（数组也是对象）；\n * \t   JVM只有一个堆区，且被所有线程共享；\n * \t         堆区是一个不连续的内存空间，分配灵活，速度慢；\n * \n * \t方法区（静态区）：方法区也是堆区的一部分，只有一个，被所有线程共享；\n * \t\t\t\t方法区中存放程序中不变或唯一的内容：类代码、静态变量、常量、字符串等；\n */\n\n```\n","source":"_posts/Java学习之路(21).md","raw":"---\ntitle:  Java学习之路--类和对象\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-27\n\n---\n```java\n/**\n   *   测试类和对象\n * @author 葛宇\n */\npackage 面向对象;\n\n//一个文件可以有多个类，但是public修饰的类只能有一个\npublic class TestFirstClass {\n\t//开始就以学生为对象做示例\n\t\n\t//属性\n\tint id;\n\tint age;\n\tString name;\n\tSubjects subject;\n\t\n\t//方法\n\tvoid study() {\n\t\tSystem.out.println(\"学习\"+subject.name);\n\t}\n\t\n\tvoid show() {\n\t\tSystem.out.println(\"ID:\"+this.id);\n\t\tSystem.out.println(\"AGE:\"+this.age);\n\t\tSystem.out.println(\"NAME:\"+this.name);\n\t}\n\t\n\tTestFirstClass(){\n\t\t//构造方法，用于创建类对象，方法名与类名保持一致，无返回值，无参构造方法可由系统自动生成\t\n\t}\n\t\n\t\n\t//main（）方法程序执行的入口，必不可少\n\tpublic static void main(String[] args) {\n\t\tTestFirstClass stu = new TestFirstClass();\t\t//调用构造方法在堆区创建对象，返回对象在堆区的地址\n\t\tSubjects sub = new Subjects();\t\t\t\t\t//调用构造方法在堆区创建对象，返回对象在堆区的地址\n\t\t\n\t\t//对象属性的赋值\n\t\tsub.name = \"JAVA课设\";\n\t\t//对象属性的赋值\n\t\tstu.id = 12345;\n\t\tstu.age = 20;\n\t\tstu.name = \"葛宇\";\n\t\tstu.subject = sub;\t\n\t\t\n\t\tstu.study();\t\t//调用类方法\n\t\tstu.show();\t\t\t//调用类方法\n\t\t\n\t\tSystem.out.println(sub);\t\t\t//打印对象地址\n\t\tSystem.out.println(stu.subject);\t//打印对象地址\n\t  //观察发现输出两个对象地址相同，原因是sub放于堆中，44行的赋值实际上是把sub的堆地址赋值给了stu.subject\n\t  //分析可知：sub和stu.subject都位于栈区，都指向堆区的同一个对象地址\n\t}\n}\n\n//学科科目类\nclass Subjects{\n\tString name;\n}\n\n/* JAVA内存分析\n * JAVA中主要把内存分为三部分：栈、堆、方法区（其中堆区包含方法区）\n * \n * \t栈：JVM会为每个线程创建一个栈且栈属于线程私有，无法与其他线程共享；\n * \t        栈的存储特性是“先进后出”；\n * \t        栈是自动分配，内存空间连续，速度快；\n * \t        程序中的每个方法执行时都会在栈中创建一个栈帧，用于存放该方法运行时数据、局部变量、实参、返回值等信息；\n * \n * \t堆：堆区存放创建好的对象和数组（数组也是对象）；\n * \t   JVM只有一个堆区，且被所有线程共享；\n * \t         堆区是一个不连续的内存空间，分配灵活，速度慢；\n * \n * \t方法区（静态区）：方法区也是堆区的一部分，只有一个，被所有线程共享；\n * \t\t\t\t方法区中存放程序中不变或唯一的内容：类代码、静态变量、常量、字符串等；\n */\n\n```\n","slug":"Java学习之路(21)","published":1,"updated":"2020-03-01T03:32:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7l9000y7svw8zfmjmi2","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   *   测试类和对象</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//一个文件可以有多个类，但是public修饰的类只能有一个</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestFirstClass</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//开始就以学生为对象做示例</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//属性</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;</span><br><span class=\"line\">\tString name;</span><br><span class=\"line\">\tSubjects subject;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"学习\"</span>+subject.name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"ID:\"</span>+<span class=\"keyword\">this</span>.id);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"AGE:\"</span>+<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"NAME:\"</span>+<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tTestFirstClass()&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//构造方法，用于创建类对象，方法名与类名保持一致，无返回值，无参构造方法可由系统自动生成\t</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//main（）方法程序执行的入口，必不可少</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tTestFirstClass stu = <span class=\"keyword\">new</span> TestFirstClass();\t\t<span class=\"comment\">//调用构造方法在堆区创建对象，返回对象在堆区的地址</span></span><br><span class=\"line\">\t\tSubjects sub = <span class=\"keyword\">new</span> Subjects();\t\t\t\t\t<span class=\"comment\">//调用构造方法在堆区创建对象，返回对象在堆区的地址</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//对象属性的赋值</span></span><br><span class=\"line\">\t\tsub.name = <span class=\"string\">\"JAVA课设\"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//对象属性的赋值</span></span><br><span class=\"line\">\t\tstu.id = <span class=\"number\">12345</span>;</span><br><span class=\"line\">\t\tstu.age = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t\tstu.name = <span class=\"string\">\"葛宇\"</span>;</span><br><span class=\"line\">\t\tstu.subject = sub;\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tstu.study();\t\t<span class=\"comment\">//调用类方法</span></span><br><span class=\"line\">\t\tstu.show();\t\t\t<span class=\"comment\">//调用类方法</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(sub);\t\t\t<span class=\"comment\">//打印对象地址</span></span><br><span class=\"line\">\t\tSystem.out.println(stu.subject);\t<span class=\"comment\">//打印对象地址</span></span><br><span class=\"line\">\t  <span class=\"comment\">//观察发现输出两个对象地址相同，原因是sub放于堆中，44行的赋值实际上是把sub的堆地址赋值给了stu.subject</span></span><br><span class=\"line\">\t  <span class=\"comment\">//分析可知：sub和stu.subject都位于栈区，都指向堆区的同一个对象地址</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//学科科目类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subjects</span></span>&#123;</span><br><span class=\"line\">\tString name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* JAVA内存分析</span></span><br><span class=\"line\"><span class=\"comment\"> * JAVA中主要把内存分为三部分：栈、堆、方法区（其中堆区包含方法区）</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * \t栈：JVM会为每个线程创建一个栈且栈属于线程私有，无法与其他线程共享；</span></span><br><span class=\"line\"><span class=\"comment\"> * \t        栈的存储特性是“先进后出”；</span></span><br><span class=\"line\"><span class=\"comment\"> * \t        栈是自动分配，内存空间连续，速度快；</span></span><br><span class=\"line\"><span class=\"comment\"> * \t        程序中的每个方法执行时都会在栈中创建一个栈帧，用于存放该方法运行时数据、局部变量、实参、返回值等信息；</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * \t堆：堆区存放创建好的对象和数组（数组也是对象）；</span></span><br><span class=\"line\"><span class=\"comment\"> * \t   JVM只有一个堆区，且被所有线程共享；</span></span><br><span class=\"line\"><span class=\"comment\"> * \t         堆区是一个不连续的内存空间，分配灵活，速度慢；</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * \t方法区（静态区）：方法区也是堆区的一部分，只有一个，被所有线程共享；</span></span><br><span class=\"line\"><span class=\"comment\"> * \t\t\t\t方法区中存放程序中不变或唯一的内容：类代码、静态变量、常量、字符串等；</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   *   测试类和对象</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//一个文件可以有多个类，但是public修饰的类只能有一个</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestFirstClass</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//开始就以学生为对象做示例</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//属性</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;</span><br><span class=\"line\">\tString name;</span><br><span class=\"line\">\tSubjects subject;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"学习\"</span>+subject.name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"ID:\"</span>+<span class=\"keyword\">this</span>.id);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"AGE:\"</span>+<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"NAME:\"</span>+<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tTestFirstClass()&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//构造方法，用于创建类对象，方法名与类名保持一致，无返回值，无参构造方法可由系统自动生成\t</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//main（）方法程序执行的入口，必不可少</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tTestFirstClass stu = <span class=\"keyword\">new</span> TestFirstClass();\t\t<span class=\"comment\">//调用构造方法在堆区创建对象，返回对象在堆区的地址</span></span><br><span class=\"line\">\t\tSubjects sub = <span class=\"keyword\">new</span> Subjects();\t\t\t\t\t<span class=\"comment\">//调用构造方法在堆区创建对象，返回对象在堆区的地址</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//对象属性的赋值</span></span><br><span class=\"line\">\t\tsub.name = <span class=\"string\">\"JAVA课设\"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//对象属性的赋值</span></span><br><span class=\"line\">\t\tstu.id = <span class=\"number\">12345</span>;</span><br><span class=\"line\">\t\tstu.age = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t\tstu.name = <span class=\"string\">\"葛宇\"</span>;</span><br><span class=\"line\">\t\tstu.subject = sub;\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tstu.study();\t\t<span class=\"comment\">//调用类方法</span></span><br><span class=\"line\">\t\tstu.show();\t\t\t<span class=\"comment\">//调用类方法</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(sub);\t\t\t<span class=\"comment\">//打印对象地址</span></span><br><span class=\"line\">\t\tSystem.out.println(stu.subject);\t<span class=\"comment\">//打印对象地址</span></span><br><span class=\"line\">\t  <span class=\"comment\">//观察发现输出两个对象地址相同，原因是sub放于堆中，44行的赋值实际上是把sub的堆地址赋值给了stu.subject</span></span><br><span class=\"line\">\t  <span class=\"comment\">//分析可知：sub和stu.subject都位于栈区，都指向堆区的同一个对象地址</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//学科科目类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subjects</span></span>&#123;</span><br><span class=\"line\">\tString name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* JAVA内存分析</span></span><br><span class=\"line\"><span class=\"comment\"> * JAVA中主要把内存分为三部分：栈、堆、方法区（其中堆区包含方法区）</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * \t栈：JVM会为每个线程创建一个栈且栈属于线程私有，无法与其他线程共享；</span></span><br><span class=\"line\"><span class=\"comment\"> * \t        栈的存储特性是“先进后出”；</span></span><br><span class=\"line\"><span class=\"comment\"> * \t        栈是自动分配，内存空间连续，速度快；</span></span><br><span class=\"line\"><span class=\"comment\"> * \t        程序中的每个方法执行时都会在栈中创建一个栈帧，用于存放该方法运行时数据、局部变量、实参、返回值等信息；</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * \t堆：堆区存放创建好的对象和数组（数组也是对象）；</span></span><br><span class=\"line\"><span class=\"comment\"> * \t   JVM只有一个堆区，且被所有线程共享；</span></span><br><span class=\"line\"><span class=\"comment\"> * \t         堆区是一个不连续的内存空间，分配灵活，速度慢；</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * \t方法区（静态区）：方法区也是堆区的一部分，只有一个，被所有线程共享；</span></span><br><span class=\"line\"><span class=\"comment\"> * \t\t\t\t方法区中存放程序中不变或唯一的内容：类代码、静态变量、常量、字符串等；</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--构造器","date":"2020-01-26T16:00:00.000Z","_content":"```java\n/**\n    * 测试构造器\n * @author 葛宇\n */\npackage 面向对象;\n\nclass Point{\n\tdouble x,y;\n\t//构造方法名称和类名必须保持一致\n\t//构造器会返回对象的地址但是无需指定返回值，可以单独使用return表示结束方法体\n\tpublic Point(double x,double y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\treturn; \n\t}\n\t\n\tpublic Point() {\n\t\t//无参构造器，如果有了自己定义的构造器，系统便不再生成，想要无参构造器的话还得自己写上\n\t}\n\t\n\tpublic double getDitance(Point p) {\n\t\tSystem.out.println(\"传入对象的地址：\"+p);\n\t\treturn Math.sqrt((this.x-p.x)*(this.x-p.x)+(this.y-p.y)*(this.y-p.y));\n\t}\n}\n\npublic class TestConstructor {\n\tpublic static void main(String[] args) {\n\t\tPoint a = new Point(3.0,4.0);\n\t\tPoint b = new Point(0.0,0.0);\n\t\tSystem.out.println(\"创建的对象的地址：\"+b);\n\t\tSystem.out.println(a.getDitance(b));\n\t}\n}\n\n\n```\n","source":"_posts/Java学习之路(22).md","raw":"---\ntitle:  Java学习之路--构造器\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-27\n\n---\n```java\n/**\n    * 测试构造器\n * @author 葛宇\n */\npackage 面向对象;\n\nclass Point{\n\tdouble x,y;\n\t//构造方法名称和类名必须保持一致\n\t//构造器会返回对象的地址但是无需指定返回值，可以单独使用return表示结束方法体\n\tpublic Point(double x,double y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\treturn; \n\t}\n\t\n\tpublic Point() {\n\t\t//无参构造器，如果有了自己定义的构造器，系统便不再生成，想要无参构造器的话还得自己写上\n\t}\n\t\n\tpublic double getDitance(Point p) {\n\t\tSystem.out.println(\"传入对象的地址：\"+p);\n\t\treturn Math.sqrt((this.x-p.x)*(this.x-p.x)+(this.y-p.y)*(this.y-p.y));\n\t}\n}\n\npublic class TestConstructor {\n\tpublic static void main(String[] args) {\n\t\tPoint a = new Point(3.0,4.0);\n\t\tPoint b = new Point(0.0,0.0);\n\t\tSystem.out.println(\"创建的对象的地址：\"+b);\n\t\tSystem.out.println(a.getDitance(b));\n\t}\n}\n\n\n```\n","slug":"Java学习之路(22)","published":1,"updated":"2020-03-01T03:33:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7la00117svwcyewbx63","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 测试构造器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> x,y;</span><br><span class=\"line\">\t<span class=\"comment\">//构造方法名称和类名必须保持一致</span></span><br><span class=\"line\">\t<span class=\"comment\">//构造器会返回对象的地址但是无需指定返回值，可以单独使用return表示结束方法体</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Point</span><span class=\"params\">(<span class=\"keyword\">double</span> x,<span class=\"keyword\">double</span> y)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Point</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//无参构造器，如果有了自己定义的构造器，系统便不再生成，想要无参构造器的话还得自己写上</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getDitance</span><span class=\"params\">(Point p)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"传入对象的地址：\"</span>+p);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Math.sqrt((<span class=\"keyword\">this</span>.x-p.x)*(<span class=\"keyword\">this</span>.x-p.x)+(<span class=\"keyword\">this</span>.y-p.y)*(<span class=\"keyword\">this</span>.y-p.y));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestConstructor</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tPoint a = <span class=\"keyword\">new</span> Point(<span class=\"number\">3.0</span>,<span class=\"number\">4.0</span>);</span><br><span class=\"line\">\t\tPoint b = <span class=\"keyword\">new</span> Point(<span class=\"number\">0.0</span>,<span class=\"number\">0.0</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"创建的对象的地址：\"</span>+b);</span><br><span class=\"line\">\t\tSystem.out.println(a.getDitance(b));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 测试构造器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> x,y;</span><br><span class=\"line\">\t<span class=\"comment\">//构造方法名称和类名必须保持一致</span></span><br><span class=\"line\">\t<span class=\"comment\">//构造器会返回对象的地址但是无需指定返回值，可以单独使用return表示结束方法体</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Point</span><span class=\"params\">(<span class=\"keyword\">double</span> x,<span class=\"keyword\">double</span> y)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Point</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//无参构造器，如果有了自己定义的构造器，系统便不再生成，想要无参构造器的话还得自己写上</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getDitance</span><span class=\"params\">(Point p)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"传入对象的地址：\"</span>+p);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Math.sqrt((<span class=\"keyword\">this</span>.x-p.x)*(<span class=\"keyword\">this</span>.x-p.x)+(<span class=\"keyword\">this</span>.y-p.y)*(<span class=\"keyword\">this</span>.y-p.y));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestConstructor</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tPoint a = <span class=\"keyword\">new</span> Point(<span class=\"number\">3.0</span>,<span class=\"number\">4.0</span>);</span><br><span class=\"line\">\t\tPoint b = <span class=\"keyword\">new</span> Point(<span class=\"number\">0.0</span>,<span class=\"number\">0.0</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"创建的对象的地址：\"</span>+b);</span><br><span class=\"line\">\t\tSystem.out.println(a.getDitance(b));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--this的使用","date":"2020-01-26T16:00:00.000Z","_content":"```java\n/**\n * 测试this的使用\n * @author 葛宇\n */\npackage 面向对象;\n\npublic class TestThis {\n\tint a,b,c;\n\t\n\t//constructor 1\n\tTestThis(int a,int b){\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\t//发生变量二义性时，使用this可以指代创建出来的对象\n\t}\t\n\t//constructor 2\n\tTestThis(int a,int b,int c){\n\t  //TestThis(a,b);会报错，想在类方法中重用构造器得用this，如下\n\t\tthis(a,b);//这里等价于调用了constructor 1，且必须位于构造器的第一句\n\t\tthis.c = c;\n\t}\n\t\n\tvoid func1() {\n\t\tSystem.out.println(\"this is func1 !\");\n\t}\n\t\n\tvoid func2() {\n\t\tthis.func1();\n\t\tSystem.out.println(\"this is func2 !\");\n\t\t//this可以用来指代该类的某个对象自己\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tTestThis obj = new TestThis(1,2,3);\n\t\tobj.func2();\n\t}\n}\n\n//注意，this的使用基本上都是离不开对象的，所以要知道this是不能用于静态的方法的。\n\n\n\n```\n","source":"_posts/Java学习之路(23).md","raw":"---\ntitle:  Java学习之路--this的使用\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-27\n\n---\n```java\n/**\n * 测试this的使用\n * @author 葛宇\n */\npackage 面向对象;\n\npublic class TestThis {\n\tint a,b,c;\n\t\n\t//constructor 1\n\tTestThis(int a,int b){\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\t//发生变量二义性时，使用this可以指代创建出来的对象\n\t}\t\n\t//constructor 2\n\tTestThis(int a,int b,int c){\n\t  //TestThis(a,b);会报错，想在类方法中重用构造器得用this，如下\n\t\tthis(a,b);//这里等价于调用了constructor 1，且必须位于构造器的第一句\n\t\tthis.c = c;\n\t}\n\t\n\tvoid func1() {\n\t\tSystem.out.println(\"this is func1 !\");\n\t}\n\t\n\tvoid func2() {\n\t\tthis.func1();\n\t\tSystem.out.println(\"this is func2 !\");\n\t\t//this可以用来指代该类的某个对象自己\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tTestThis obj = new TestThis(1,2,3);\n\t\tobj.func2();\n\t}\n}\n\n//注意，this的使用基本上都是离不开对象的，所以要知道this是不能用于静态的方法的。\n\n\n\n```\n","slug":"Java学习之路(23)","published":1,"updated":"2020-03-01T03:34:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7ld00157svwrhuxk805","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试this的使用</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThis</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a,b,c;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//constructor 1</span></span><br><span class=\"line\">\tTestThis(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.a = a;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.b = b;</span><br><span class=\"line\">\t\t<span class=\"comment\">//发生变量二义性时，使用this可以指代创建出来的对象</span></span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"comment\">//constructor 2</span></span><br><span class=\"line\">\tTestThis(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c)&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//TestThis(a,b);会报错，想在类方法中重用构造器得用this，如下</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>(a,b);<span class=\"comment\">//这里等价于调用了constructor 1，且必须位于构造器的第一句</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.c = c;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"this is func1 !\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.func1();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"this is func2 !\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//this可以用来指代该类的某个对象自己</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tTestThis obj = <span class=\"keyword\">new</span> TestThis(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">\t\tobj.func2();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//注意，this的使用基本上都是离不开对象的，所以要知道this是不能用于静态的方法的。</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试this的使用</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThis</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a,b,c;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//constructor 1</span></span><br><span class=\"line\">\tTestThis(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.a = a;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.b = b;</span><br><span class=\"line\">\t\t<span class=\"comment\">//发生变量二义性时，使用this可以指代创建出来的对象</span></span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"comment\">//constructor 2</span></span><br><span class=\"line\">\tTestThis(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c)&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//TestThis(a,b);会报错，想在类方法中重用构造器得用this，如下</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>(a,b);<span class=\"comment\">//这里等价于调用了constructor 1，且必须位于构造器的第一句</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.c = c;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"this is func1 !\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.func1();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"this is func2 !\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//this可以用来指代该类的某个对象自己</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tTestThis obj = <span class=\"keyword\">new</span> TestThis(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">\t\tobj.func2();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//注意，this的使用基本上都是离不开对象的，所以要知道this是不能用于静态的方法的。</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--参数传递机制","date":"2020-01-26T16:00:00.000Z","_content":"```java\n/**\n * 测试JAVA中的参数传递机制\n * @author 葛宇\n */\npackage 面向对象;\n\npublic class TestValueTransport {\n\t\n\tint a;\n\tint b;\n\t\n\tTestValueTransport (int a,int b){\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t}\n\t\n\tvoid testValueTrap(TestValueTransport x) {\n\t\tSystem.out.println(x);\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tTestValueTransport obj = new TestValueTransport(1,2);\n\t\tTestValueTransport obj_ = obj;\n\t\t\n\t\tSystem.out.println(obj);\n\t\tSystem.out.println(obj_);\n\t\tobj_.testValueTrap(obj_);\n\t\t\n\t\t//输出三个对象变量引用的地址是相同的\n\t\t//要能区分对象变量和对象的区别：对象变量存储在栈中，对象存储在堆中\n\t\t//示例中的obj、obj_、x三者虽是不同的对象变量，但是始终指向同一个对象的地址\n\t\t//总结：Java中参数传值传递的是参数值的副本，但要明确对于对象变量来说，传递的副本就是对象的地址，所以指向还是同一个对象\n\t}\t\n}\n\n\n\n```\n","source":"_posts/Java学习之路(24).md","raw":"---\ntitle:  Java学习之路--参数传递机制\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-27\n\n---\n```java\n/**\n * 测试JAVA中的参数传递机制\n * @author 葛宇\n */\npackage 面向对象;\n\npublic class TestValueTransport {\n\t\n\tint a;\n\tint b;\n\t\n\tTestValueTransport (int a,int b){\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t}\n\t\n\tvoid testValueTrap(TestValueTransport x) {\n\t\tSystem.out.println(x);\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tTestValueTransport obj = new TestValueTransport(1,2);\n\t\tTestValueTransport obj_ = obj;\n\t\t\n\t\tSystem.out.println(obj);\n\t\tSystem.out.println(obj_);\n\t\tobj_.testValueTrap(obj_);\n\t\t\n\t\t//输出三个对象变量引用的地址是相同的\n\t\t//要能区分对象变量和对象的区别：对象变量存储在栈中，对象存储在堆中\n\t\t//示例中的obj、obj_、x三者虽是不同的对象变量，但是始终指向同一个对象的地址\n\t\t//总结：Java中参数传值传递的是参数值的副本，但要明确对于对象变量来说，传递的副本就是对象的地址，所以指向还是同一个对象\n\t}\t\n}\n\n\n\n```\n","slug":"Java学习之路(24)","published":1,"updated":"2020-03-01T03:35:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7lf00187svwzktidy8g","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试JAVA中的参数传递机制</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestValueTransport</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tTestValueTransport (<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.a = a;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.b = b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testValueTrap</span><span class=\"params\">(TestValueTransport x)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tTestValueTransport obj = <span class=\"keyword\">new</span> TestValueTransport(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tTestValueTransport obj_ = obj;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(obj);</span><br><span class=\"line\">\t\tSystem.out.println(obj_);</span><br><span class=\"line\">\t\tobj_.testValueTrap(obj_);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出三个对象变量引用的地址是相同的</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//要能区分对象变量和对象的区别：对象变量存储在栈中，对象存储在堆中</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//示例中的obj、obj_、x三者虽是不同的对象变量，但是始终指向同一个对象的地址</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//总结：Java中参数传值传递的是参数值的副本，但要明确对于对象变量来说，传递的副本就是对象的地址，所以指向还是同一个对象</span></span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试JAVA中的参数传递机制</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestValueTransport</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tTestValueTransport (<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.a = a;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.b = b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testValueTrap</span><span class=\"params\">(TestValueTransport x)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tTestValueTransport obj = <span class=\"keyword\">new</span> TestValueTransport(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tTestValueTransport obj_ = obj;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(obj);</span><br><span class=\"line\">\t\tSystem.out.println(obj_);</span><br><span class=\"line\">\t\tobj_.testValueTrap(obj_);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出三个对象变量引用的地址是相同的</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//要能区分对象变量和对象的区别：对象变量存储在栈中，对象存储在堆中</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//示例中的obj、obj_、x三者虽是不同的对象变量，但是始终指向同一个对象的地址</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//总结：Java中参数传值传递的是参数值的副本，但要明确对于对象变量来说，传递的副本就是对象的地址，所以指向还是同一个对象</span></span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--静态导入","date":"2020-01-26T16:00:00.000Z","_content":"```java\n/**\n   * 测试静态导入\n * @author 葛宇\n */\npackage 面向对象;\nimport static java.lang.Math.PI;\n\npublic class TestStaticImport {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.print(PI);\n\t}\n}\n\n//静态导入关键字：import static xxx;\n//要求导入的东西必须是静态属性如静态成员方法或静态常量等\n\n```\n","source":"_posts/Java学习之路(25).md","raw":"---\ntitle:  Java学习之路--静态导入\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-27\n\n---\n```java\n/**\n   * 测试静态导入\n * @author 葛宇\n */\npackage 面向对象;\nimport static java.lang.Math.PI;\n\npublic class TestStaticImport {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.print(PI);\n\t}\n}\n\n//静态导入关键字：import static xxx;\n//要求导入的东西必须是静态属性如静态成员方法或静态常量等\n\n```\n","slug":"Java学习之路(25)","published":1,"updated":"2020-03-01T03:36:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7lg001c7svw3u3825i5","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 测试静态导入</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.Math.PI;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestStaticImport</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.print(PI);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//静态导入关键字：import static xxx;</span></span><br><span class=\"line\"><span class=\"comment\">//要求导入的东西必须是静态属性如静态成员方法或静态常量等</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 测试静态导入</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.Math.PI;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestStaticImport</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.print(PI);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//静态导入关键字：import static xxx;</span></span><br><span class=\"line\"><span class=\"comment\">//要求导入的东西必须是静态属性如静态成员方法或静态常量等</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--static关键字","date":"2020-01-27T16:00:00.000Z","_content":"```java\n/**\n * 测试static关键字\n * @author 葛宇\n */\npackage 面向对象;\n\npublic class TestStatic {\n\t\n\tint a;\n\tint b;\n\t\n\tstatic int x;\t//属于类而不属于对象\n\tstatic int y;\t//属于类而不属于对象\n\t\n\tvoid func1() {\n\t\t//普通成员方法可以调用类的普通成员变量和static变量和static方法\n\t\tSystem.out.println(a);\n\t\tSystem.out.println(b);\n\t\tSystem.out.println(x);\n\t\tSystem.out.println(y);\n\t\tSystem.out.println(\"普通成员方法func1\");\n\t\tfunc2();\n\t}\n\t\n\tstatic void func2() {\n\t\t//属于类而不属于对象\n\t\t//不可在static方法调用this.a或this.b或this.func1()\n\t\t//static方法的生命周期与类相同，早于对象的诞生，而普通成员变量是属于对象的，所以static方法无法调用普通成员变量\n\t\tSystem.out.println(\"static成员方法func2\");\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tTestStatic obj = new TestStatic();\n\t\tx = 1;\t\t\t\t\t\t\t\t\t//可以不通过对象直接调用static成员变量\n\t\tSystem.out.println(x);\t\t\t\t\t//可以不通过对象直接调用static成员变量\n\t\tSystem.out.println(TestStatic.x);\t\t//可以通过对象调用static成员变量\n\t\t\n\t\tfunc2();\t\t\t\t\t\t\t\t//可以不通过对象直接调用static成员方法\n\t\tTestStatic.func2();\t\t\t\t\t\t//可以通过对象调用static成员变量\n\t\t\n\t\tTestStatic obj1 = new TestStatic();\n\t\tTestStatic.x ++;\n\t\tSystem.out.println(TestStatic.x);\n\t\t//静态变量的改变相当于是对类模板的改变，会对其他对象产生影响，\n\t}\n}\n\n\n```\n","source":"_posts/Java学习之路(26).md","raw":"---\ntitle:  Java学习之路--static关键字\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-28\n\n---\n```java\n/**\n * 测试static关键字\n * @author 葛宇\n */\npackage 面向对象;\n\npublic class TestStatic {\n\t\n\tint a;\n\tint b;\n\t\n\tstatic int x;\t//属于类而不属于对象\n\tstatic int y;\t//属于类而不属于对象\n\t\n\tvoid func1() {\n\t\t//普通成员方法可以调用类的普通成员变量和static变量和static方法\n\t\tSystem.out.println(a);\n\t\tSystem.out.println(b);\n\t\tSystem.out.println(x);\n\t\tSystem.out.println(y);\n\t\tSystem.out.println(\"普通成员方法func1\");\n\t\tfunc2();\n\t}\n\t\n\tstatic void func2() {\n\t\t//属于类而不属于对象\n\t\t//不可在static方法调用this.a或this.b或this.func1()\n\t\t//static方法的生命周期与类相同，早于对象的诞生，而普通成员变量是属于对象的，所以static方法无法调用普通成员变量\n\t\tSystem.out.println(\"static成员方法func2\");\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tTestStatic obj = new TestStatic();\n\t\tx = 1;\t\t\t\t\t\t\t\t\t//可以不通过对象直接调用static成员变量\n\t\tSystem.out.println(x);\t\t\t\t\t//可以不通过对象直接调用static成员变量\n\t\tSystem.out.println(TestStatic.x);\t\t//可以通过对象调用static成员变量\n\t\t\n\t\tfunc2();\t\t\t\t\t\t\t\t//可以不通过对象直接调用static成员方法\n\t\tTestStatic.func2();\t\t\t\t\t\t//可以通过对象调用static成员变量\n\t\t\n\t\tTestStatic obj1 = new TestStatic();\n\t\tTestStatic.x ++;\n\t\tSystem.out.println(TestStatic.x);\n\t\t//静态变量的改变相当于是对类模板的改变，会对其他对象产生影响，\n\t}\n}\n\n\n```\n","slug":"Java学习之路(26)","published":1,"updated":"2020-03-01T03:37:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7li001f7svwxqf7syhv","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试static关键字</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestStatic</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> x;\t<span class=\"comment\">//属于类而不属于对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> y;\t<span class=\"comment\">//属于类而不属于对象</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//普通成员方法可以调用类的普通成员变量和static变量和static方法</span></span><br><span class=\"line\">\t\tSystem.out.println(a);</span><br><span class=\"line\">\t\tSystem.out.println(b);</span><br><span class=\"line\">\t\tSystem.out.println(x);</span><br><span class=\"line\">\t\tSystem.out.println(y);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"普通成员方法func1\"</span>);</span><br><span class=\"line\">\t\tfunc2();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//属于类而不属于对象</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//不可在static方法调用this.a或this.b或this.func1()</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//static方法的生命周期与类相同，早于对象的诞生，而普通成员变量是属于对象的，所以static方法无法调用普通成员变量</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"static成员方法func2\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tTestStatic obj = <span class=\"keyword\">new</span> TestStatic();</span><br><span class=\"line\">\t\tx = <span class=\"number\">1</span>;\t\t\t\t\t\t\t\t\t<span class=\"comment\">//可以不通过对象直接调用static成员变量</span></span><br><span class=\"line\">\t\tSystem.out.println(x);\t\t\t\t\t<span class=\"comment\">//可以不通过对象直接调用static成员变量</span></span><br><span class=\"line\">\t\tSystem.out.println(TestStatic.x);\t\t<span class=\"comment\">//可以通过对象调用static成员变量</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfunc2();\t\t\t\t\t\t\t\t<span class=\"comment\">//可以不通过对象直接调用static成员方法</span></span><br><span class=\"line\">\t\tTestStatic.func2();\t\t\t\t\t\t<span class=\"comment\">//可以通过对象调用static成员变量</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tTestStatic obj1 = <span class=\"keyword\">new</span> TestStatic();</span><br><span class=\"line\">\t\tTestStatic.x ++;</span><br><span class=\"line\">\t\tSystem.out.println(TestStatic.x);</span><br><span class=\"line\">\t\t<span class=\"comment\">//静态变量的改变相当于是对类模板的改变，会对其他对象产生影响，</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试static关键字</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestStatic</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> x;\t<span class=\"comment\">//属于类而不属于对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> y;\t<span class=\"comment\">//属于类而不属于对象</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//普通成员方法可以调用类的普通成员变量和static变量和static方法</span></span><br><span class=\"line\">\t\tSystem.out.println(a);</span><br><span class=\"line\">\t\tSystem.out.println(b);</span><br><span class=\"line\">\t\tSystem.out.println(x);</span><br><span class=\"line\">\t\tSystem.out.println(y);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"普通成员方法func1\"</span>);</span><br><span class=\"line\">\t\tfunc2();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//属于类而不属于对象</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//不可在static方法调用this.a或this.b或this.func1()</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//static方法的生命周期与类相同，早于对象的诞生，而普通成员变量是属于对象的，所以static方法无法调用普通成员变量</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"static成员方法func2\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tTestStatic obj = <span class=\"keyword\">new</span> TestStatic();</span><br><span class=\"line\">\t\tx = <span class=\"number\">1</span>;\t\t\t\t\t\t\t\t\t<span class=\"comment\">//可以不通过对象直接调用static成员变量</span></span><br><span class=\"line\">\t\tSystem.out.println(x);\t\t\t\t\t<span class=\"comment\">//可以不通过对象直接调用static成员变量</span></span><br><span class=\"line\">\t\tSystem.out.println(TestStatic.x);\t\t<span class=\"comment\">//可以通过对象调用static成员变量</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfunc2();\t\t\t\t\t\t\t\t<span class=\"comment\">//可以不通过对象直接调用static成员方法</span></span><br><span class=\"line\">\t\tTestStatic.func2();\t\t\t\t\t\t<span class=\"comment\">//可以通过对象调用static成员变量</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tTestStatic obj1 = <span class=\"keyword\">new</span> TestStatic();</span><br><span class=\"line\">\t\tTestStatic.x ++;</span><br><span class=\"line\">\t\tSystem.out.println(TestStatic.x);</span><br><span class=\"line\">\t\t<span class=\"comment\">//静态变量的改变相当于是对类模板的改变，会对其他对象产生影响，</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--抽象类","date":"2020-01-27T16:00:00.000Z","_content":"```java\n/**\n * 测试抽象类\n * @author 葛宇\n */\npackage com.github.nuistgy.testabstract;\n\nabstract public class Animal {\n  //有抽象方法必须是抽象类\n\tabstract public void shout();\t\n  //抽象方法没有实现过程\n\t\n\tstatic public void breath() {\n\t\t//抽象类可以包含普通方法或静态方法\n\t\tSystem.out.println(\"呼吸！\");\n\t}\n\t\n\tstatic int a;\n\tint b;\n\t\n\tpublic static void main(String[] args) {\n\t  //Animal a = new Animal();\t抽象类无法实例化\n\t\tAnimal.breath();\t\t  //抽象类的普通静态方法可以直接使用\n\t\tAnimal.a = 1;\t\t\t  //抽象类的普通静态成员变量可以直接使用\n\t}\n}\n\nclass Dog extends Animal{\n\n\t@Override\n\tpublic void shout() {\n\t\tSystem.out.println(\"汪汪！\");\n\t\t//子类必须对父类抽象方法进行实现\n\t}\t\n}\n\n/*总结：\n * 有抽象方法的类必须定义为抽象类\n * 抽象类可以包含属性、方法、构造器，但是不能被实例化\n * 普通属性和方法只能被子类调用，静态方法或属性可以直接使用\n * 抽象方法必须被子类实现\n * 抽象类的意义在于为子类提供统一的、规范的模板\n */\n\n\n\n```\n","source":"_posts/Java学习之路(27).md","raw":"---\ntitle:  Java学习之路--抽象类\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-28\n\n---\n```java\n/**\n * 测试抽象类\n * @author 葛宇\n */\npackage com.github.nuistgy.testabstract;\n\nabstract public class Animal {\n  //有抽象方法必须是抽象类\n\tabstract public void shout();\t\n  //抽象方法没有实现过程\n\t\n\tstatic public void breath() {\n\t\t//抽象类可以包含普通方法或静态方法\n\t\tSystem.out.println(\"呼吸！\");\n\t}\n\t\n\tstatic int a;\n\tint b;\n\t\n\tpublic static void main(String[] args) {\n\t  //Animal a = new Animal();\t抽象类无法实例化\n\t\tAnimal.breath();\t\t  //抽象类的普通静态方法可以直接使用\n\t\tAnimal.a = 1;\t\t\t  //抽象类的普通静态成员变量可以直接使用\n\t}\n}\n\nclass Dog extends Animal{\n\n\t@Override\n\tpublic void shout() {\n\t\tSystem.out.println(\"汪汪！\");\n\t\t//子类必须对父类抽象方法进行实现\n\t}\t\n}\n\n/*总结：\n * 有抽象方法的类必须定义为抽象类\n * 抽象类可以包含属性、方法、构造器，但是不能被实例化\n * 普通属性和方法只能被子类调用，静态方法或属性可以直接使用\n * 抽象方法必须被子类实现\n * 抽象类的意义在于为子类提供统一的、规范的模板\n */\n\n\n\n```\n","slug":"Java学习之路(27)","published":1,"updated":"2020-03-01T03:38:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7lk001j7svwbexdjxmb","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试抽象类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.github.nuistgy.testabstract;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//有抽象方法必须是抽象类</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shout</span><span class=\"params\">()</span></span>;\t</span><br><span class=\"line\">  <span class=\"comment\">//抽象方法没有实现过程</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">breath</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//抽象类可以包含普通方法或静态方法</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"呼吸！\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//Animal a = new Animal();\t抽象类无法实例化</span></span><br><span class=\"line\">\t\tAnimal.breath();\t\t  <span class=\"comment\">//抽象类的普通静态方法可以直接使用</span></span><br><span class=\"line\">\t\tAnimal.a = <span class=\"number\">1</span>;\t\t\t  <span class=\"comment\">//抽象类的普通静态成员变量可以直接使用</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"汪汪！\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//子类必须对父类抽象方法进行实现</span></span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*总结：</span></span><br><span class=\"line\"><span class=\"comment\"> * 有抽象方法的类必须定义为抽象类</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象类可以包含属性、方法、构造器，但是不能被实例化</span></span><br><span class=\"line\"><span class=\"comment\"> * 普通属性和方法只能被子类调用，静态方法或属性可以直接使用</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象方法必须被子类实现</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象类的意义在于为子类提供统一的、规范的模板</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试抽象类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.github.nuistgy.testabstract;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//有抽象方法必须是抽象类</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shout</span><span class=\"params\">()</span></span>;\t</span><br><span class=\"line\">  <span class=\"comment\">//抽象方法没有实现过程</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">breath</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//抽象类可以包含普通方法或静态方法</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"呼吸！\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//Animal a = new Animal();\t抽象类无法实例化</span></span><br><span class=\"line\">\t\tAnimal.breath();\t\t  <span class=\"comment\">//抽象类的普通静态方法可以直接使用</span></span><br><span class=\"line\">\t\tAnimal.a = <span class=\"number\">1</span>;\t\t\t  <span class=\"comment\">//抽象类的普通静态成员变量可以直接使用</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"汪汪！\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//子类必须对父类抽象方法进行实现</span></span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*总结：</span></span><br><span class=\"line\"><span class=\"comment\"> * 有抽象方法的类必须定义为抽象类</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象类可以包含属性、方法、构造器，但是不能被实例化</span></span><br><span class=\"line\"><span class=\"comment\"> * 普通属性和方法只能被子类调用，静态方法或属性可以直接使用</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象方法必须被子类实现</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象类的意义在于为子类提供统一的、规范的模板</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--继承","date":"2020-01-27T16:00:00.000Z","_content":"```java\n/**\n * 测试继承\n * @author 葛宇\n */\npackage 面向对象核心;\n\npublic class TestExtends {\n\tpublic static void main(String[] args) {\n\t\tStudent stu = new Student();\n\t\tStudent stu_ = new Student(\"Max\",170,\"C++\");\n\t  //stu拥有Person类所以属性和方法\n\t\tstu.name = \"Jack\";\n\t\tstu.height = 180;\n\t\tstu.major = \"JAVA\";\n\t\tstu.breath();\n\t\t\n\t\tSystem.out.println(stu instanceof Student);\n\t\tSystem.out.println(stu instanceof Person);\n\t\tSystem.out.println(stu instanceof Object);\n\t}\n}\n\nclass Person{\n\t\n\tint height;\n\tString name;\n\t\n\tpublic void breath() {\n\t\tSystem.out.println(\"呼吸\");\n\t}\n}\n\nclass Student extends Person{\n\t\n\t//int height;\n\t//String name;\n\tString major;\n\t\n\tpublic Student() {\n\t\t\n\t}\n\t\n\tpublic Student(String name,int height,String major) {\n\t\tthis.name = name;\n\t\tthis.height = height;\n\t\tthis.major = major;\n\t}\n\t\n\tpublic void study() {\n\t\tSystem.out.println(\"学习\");\n\t}\n\t\n/*\tpublic void breath() {\n*\t\tSystem.out.println(\"呼吸\");\n*\t}\n*/\t\n}\n\n/*\n*父类也叫超类或基类\n*没有多继承，只有单继承\n*接口技术有多继承\n*java中只有共有继承\n*子类可以得到父类的全部属性和方法（构造方法除外），但不见得都可以使用\n*如果没有使用extends继承则默认是继承了java.lang.Object\n*/\n\n```\n","source":"_posts/Java学习之路(28).md","raw":"---\ntitle:  Java学习之路--继承\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-28\n\n---\n```java\n/**\n * 测试继承\n * @author 葛宇\n */\npackage 面向对象核心;\n\npublic class TestExtends {\n\tpublic static void main(String[] args) {\n\t\tStudent stu = new Student();\n\t\tStudent stu_ = new Student(\"Max\",170,\"C++\");\n\t  //stu拥有Person类所以属性和方法\n\t\tstu.name = \"Jack\";\n\t\tstu.height = 180;\n\t\tstu.major = \"JAVA\";\n\t\tstu.breath();\n\t\t\n\t\tSystem.out.println(stu instanceof Student);\n\t\tSystem.out.println(stu instanceof Person);\n\t\tSystem.out.println(stu instanceof Object);\n\t}\n}\n\nclass Person{\n\t\n\tint height;\n\tString name;\n\t\n\tpublic void breath() {\n\t\tSystem.out.println(\"呼吸\");\n\t}\n}\n\nclass Student extends Person{\n\t\n\t//int height;\n\t//String name;\n\tString major;\n\t\n\tpublic Student() {\n\t\t\n\t}\n\t\n\tpublic Student(String name,int height,String major) {\n\t\tthis.name = name;\n\t\tthis.height = height;\n\t\tthis.major = major;\n\t}\n\t\n\tpublic void study() {\n\t\tSystem.out.println(\"学习\");\n\t}\n\t\n/*\tpublic void breath() {\n*\t\tSystem.out.println(\"呼吸\");\n*\t}\n*/\t\n}\n\n/*\n*父类也叫超类或基类\n*没有多继承，只有单继承\n*接口技术有多继承\n*java中只有共有继承\n*子类可以得到父类的全部属性和方法（构造方法除外），但不见得都可以使用\n*如果没有使用extends继承则默认是继承了java.lang.Object\n*/\n\n```\n","slug":"Java学习之路(28)","published":1,"updated":"2020-03-01T03:39:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7ll001m7svwh30ors74","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试继承</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestExtends</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tStudent stu = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">\t\tStudent stu_ = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"Max\"</span>,<span class=\"number\">170</span>,<span class=\"string\">\"C++\"</span>);</span><br><span class=\"line\">\t  <span class=\"comment\">//stu拥有Person类所以属性和方法</span></span><br><span class=\"line\">\t\tstu.name = <span class=\"string\">\"Jack\"</span>;</span><br><span class=\"line\">\t\tstu.height = <span class=\"number\">180</span>;</span><br><span class=\"line\">\t\tstu.major = <span class=\"string\">\"JAVA\"</span>;</span><br><span class=\"line\">\t\tstu.breath();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(stu <span class=\"keyword\">instanceof</span> Student);</span><br><span class=\"line\">\t\tSystem.out.println(stu <span class=\"keyword\">instanceof</span> Person);</span><br><span class=\"line\">\t\tSystem.out.println(stu <span class=\"keyword\">instanceof</span> Object);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> height;</span><br><span class=\"line\">\tString name;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">breath</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"呼吸\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//int height;</span></span><br><span class=\"line\">\t<span class=\"comment\">//String name;</span></span><br><span class=\"line\">\tString major;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> height,String major)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.height = height;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.major = major;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"学习\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">/*\tpublic void breath() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">*\t\tSystem.out.println(\"呼吸\");</span></span><br><span class=\"line\"><span class=\"comment\">*\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span>\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">*父类也叫超类或基类</span></span><br><span class=\"line\"><span class=\"comment\">*没有多继承，只有单继承</span></span><br><span class=\"line\"><span class=\"comment\">*接口技术有多继承</span></span><br><span class=\"line\"><span class=\"comment\">*java中只有共有继承</span></span><br><span class=\"line\"><span class=\"comment\">*子类可以得到父类的全部属性和方法（构造方法除外），但不见得都可以使用</span></span><br><span class=\"line\"><span class=\"comment\">*如果没有使用extends继承则默认是继承了java.lang.Object</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试继承</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestExtends</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tStudent stu = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">\t\tStudent stu_ = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"Max\"</span>,<span class=\"number\">170</span>,<span class=\"string\">\"C++\"</span>);</span><br><span class=\"line\">\t  <span class=\"comment\">//stu拥有Person类所以属性和方法</span></span><br><span class=\"line\">\t\tstu.name = <span class=\"string\">\"Jack\"</span>;</span><br><span class=\"line\">\t\tstu.height = <span class=\"number\">180</span>;</span><br><span class=\"line\">\t\tstu.major = <span class=\"string\">\"JAVA\"</span>;</span><br><span class=\"line\">\t\tstu.breath();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(stu <span class=\"keyword\">instanceof</span> Student);</span><br><span class=\"line\">\t\tSystem.out.println(stu <span class=\"keyword\">instanceof</span> Person);</span><br><span class=\"line\">\t\tSystem.out.println(stu <span class=\"keyword\">instanceof</span> Object);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> height;</span><br><span class=\"line\">\tString name;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">breath</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"呼吸\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//int height;</span></span><br><span class=\"line\">\t<span class=\"comment\">//String name;</span></span><br><span class=\"line\">\tString major;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> height,String major)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.height = height;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.major = major;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"学习\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">/*\tpublic void breath() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">*\t\tSystem.out.println(\"呼吸\");</span></span><br><span class=\"line\"><span class=\"comment\">*\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span>\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">*父类也叫超类或基类</span></span><br><span class=\"line\"><span class=\"comment\">*没有多继承，只有单继承</span></span><br><span class=\"line\"><span class=\"comment\">*接口技术有多继承</span></span><br><span class=\"line\"><span class=\"comment\">*java中只有共有继承</span></span><br><span class=\"line\"><span class=\"comment\">*子类可以得到父类的全部属性和方法（构造方法除外），但不见得都可以使用</span></span><br><span class=\"line\"><span class=\"comment\">*如果没有使用extends继承则默认是继承了java.lang.Object</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--重写","date":"2020-01-27T16:00:00.000Z","_content":"```java\n/**\n * 测试重写\n * @author 葛宇\n */\npackage 面向对象核心;\n\npublic class TestOverride {\n\tpublic static void main(String[] args) {\n\t\tAirplane obj = new Airplane();\n\t\tobj.run();\n\t}\n}\n\nclass Transportation{\n\n\tpublic void run() {\n\t\tSystem.out.println(\"Running\");\n\t}\n\t\n\tpublic Person whoIsPsg() {\n\t\treturn new Person();\n\t}\n}\n\nclass Airplane extends Transportation{\n\t\n\tpublic void run() {\n\t\tSystem.out.println(\"Flying\");\n\t\t//重写了父类的run()\n\t}\t\n\t\n \tpublic Student whoIsPsg() {\n\t\treturn new Student();\n\t\t//重写了父类的whoIsPsg()\n\t}\n\n/*\t\n* \tpublic Student whoIsPsg() {\n*\t\treturn new Student();\n*\t\t//重写了父类的whoIsPsg()\n*\t}\n*/\n/*\t\n * \tpublic Object whoIsPsg() {\n *\t\treturn new Object();\n *\t\t//重写了父类的whoIsPsg()但报错\n *\t}\n */\n \t\n}\n\n/* 构成重写的条件：\n * 子类继承父类\n * 重写的方法名，形参列表要相同\n * 返回值类型和声明异常的类型，子类应<=父类\n * 方法访问权限：子类>=父类\n */\n\n```\n","source":"_posts/Java学习之路(29).md","raw":"---\ntitle:  Java学习之路--重写\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-28\n\n---\n```java\n/**\n * 测试重写\n * @author 葛宇\n */\npackage 面向对象核心;\n\npublic class TestOverride {\n\tpublic static void main(String[] args) {\n\t\tAirplane obj = new Airplane();\n\t\tobj.run();\n\t}\n}\n\nclass Transportation{\n\n\tpublic void run() {\n\t\tSystem.out.println(\"Running\");\n\t}\n\t\n\tpublic Person whoIsPsg() {\n\t\treturn new Person();\n\t}\n}\n\nclass Airplane extends Transportation{\n\t\n\tpublic void run() {\n\t\tSystem.out.println(\"Flying\");\n\t\t//重写了父类的run()\n\t}\t\n\t\n \tpublic Student whoIsPsg() {\n\t\treturn new Student();\n\t\t//重写了父类的whoIsPsg()\n\t}\n\n/*\t\n* \tpublic Student whoIsPsg() {\n*\t\treturn new Student();\n*\t\t//重写了父类的whoIsPsg()\n*\t}\n*/\n/*\t\n * \tpublic Object whoIsPsg() {\n *\t\treturn new Object();\n *\t\t//重写了父类的whoIsPsg()但报错\n *\t}\n */\n \t\n}\n\n/* 构成重写的条件：\n * 子类继承父类\n * 重写的方法名，形参列表要相同\n * 返回值类型和声明异常的类型，子类应<=父类\n * 方法访问权限：子类>=父类\n */\n\n```\n","slug":"Java学习之路(29)","published":1,"updated":"2020-03-01T03:40:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7lo001q7svwdt5vvlef","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试重写</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestOverride</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tAirplane obj = <span class=\"keyword\">new</span> Airplane();</span><br><span class=\"line\">\t\tobj.run();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Transportation</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Running\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">whoIsPsg</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Airplane</span> <span class=\"keyword\">extends</span> <span class=\"title\">Transportation</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Flying\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//重写了父类的run()</span></span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t</span><br><span class=\"line\"> \t<span class=\"function\"><span class=\"keyword\">public</span> Student <span class=\"title\">whoIsPsg</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">\t\t<span class=\"comment\">//重写了父类的whoIsPsg()</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*\t</span></span><br><span class=\"line\"><span class=\"comment\">* \tpublic Student whoIsPsg() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">*\t\treturn new Student();</span></span><br><span class=\"line\"><span class=\"comment\">*\t\t//重写了父类的whoIsPsg()</span></span><br><span class=\"line\"><span class=\"comment\">*\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">/*\t</span></span><br><span class=\"line\"><span class=\"comment\"> * \tpublic Object whoIsPsg() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\treturn new Object();</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t//重写了父类的whoIsPsg()但报错</span></span><br><span class=\"line\"><span class=\"comment\"> *\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> \t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 构成重写的条件：</span></span><br><span class=\"line\"><span class=\"comment\"> * 子类继承父类</span></span><br><span class=\"line\"><span class=\"comment\"> * 重写的方法名，形参列表要相同</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回值类型和声明异常的类型，子类应&lt;=父类</span></span><br><span class=\"line\"><span class=\"comment\"> * 方法访问权限：子类&gt;=父类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试重写</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestOverride</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tAirplane obj = <span class=\"keyword\">new</span> Airplane();</span><br><span class=\"line\">\t\tobj.run();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Transportation</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Running\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">whoIsPsg</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Airplane</span> <span class=\"keyword\">extends</span> <span class=\"title\">Transportation</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Flying\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//重写了父类的run()</span></span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t</span><br><span class=\"line\"> \t<span class=\"function\"><span class=\"keyword\">public</span> Student <span class=\"title\">whoIsPsg</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">\t\t<span class=\"comment\">//重写了父类的whoIsPsg()</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*\t</span></span><br><span class=\"line\"><span class=\"comment\">* \tpublic Student whoIsPsg() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">*\t\treturn new Student();</span></span><br><span class=\"line\"><span class=\"comment\">*\t\t//重写了父类的whoIsPsg()</span></span><br><span class=\"line\"><span class=\"comment\">*\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">/*\t</span></span><br><span class=\"line\"><span class=\"comment\"> * \tpublic Object whoIsPsg() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\treturn new Object();</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t//重写了父类的whoIsPsg()但报错</span></span><br><span class=\"line\"><span class=\"comment\"> *\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> \t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 构成重写的条件：</span></span><br><span class=\"line\"><span class=\"comment\"> * 子类继承父类</span></span><br><span class=\"line\"><span class=\"comment\"> * 重写的方法名，形参列表要相同</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回值类型和声明异常的类型，子类应&lt;=父类</span></span><br><span class=\"line\"><span class=\"comment\"> * 方法访问权限：子类&gt;=父类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--常量","date":"2020-01-19T16:00:00.000Z","_content":"```java\n/**\n * Java常量\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestConstant {\n\tpublic static void main(String[] args) {\n\t  //age和name都是变量，数字18、20和字符串“GeYu”“GEYU”是字面常量\n\t\tint age = 18;\n\t\tage = 20;\n\t\tString name = \"GeYu\";\n\t\tname = \"GEYU\";\n\t\t\n\t\tfinal double PI = 3.14;\n\t             //PI++; 报错，final将PI定义为了符号常量\n\t\t\n\t\t/*\n\t\t * 命名规范\n\t\t * 常量：全部大写，可配合下划线：MAX_VALUE\n\t\t * 类名：首字母大写，驼峰原则：HelloWorld、FatherClass\n\t\t * 类成员变量、类方法：首字母小写，驼峰原则：monthSalary、getSalary()\n\t\t */\n\t}\n}\n\n```\n","source":"_posts/Java学习之路(3).md","raw":"---\ntitle:  Java学习之路--常量\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-20\n\n---\n```java\n/**\n * Java常量\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestConstant {\n\tpublic static void main(String[] args) {\n\t  //age和name都是变量，数字18、20和字符串“GeYu”“GEYU”是字面常量\n\t\tint age = 18;\n\t\tage = 20;\n\t\tString name = \"GeYu\";\n\t\tname = \"GEYU\";\n\t\t\n\t\tfinal double PI = 3.14;\n\t             //PI++; 报错，final将PI定义为了符号常量\n\t\t\n\t\t/*\n\t\t * 命名规范\n\t\t * 常量：全部大写，可配合下划线：MAX_VALUE\n\t\t * 类名：首字母大写，驼峰原则：HelloWorld、FatherClass\n\t\t * 类成员变量、类方法：首字母小写，驼峰原则：monthSalary、getSalary()\n\t\t */\n\t}\n}\n\n```\n","slug":"Java学习之路(3)","published":1,"updated":"2020-02-28T05:52:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7lq001t7svws4zv0edb","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Java常量</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestConstant</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//age和name都是变量，数字18、20和字符串“GeYu”“GEYU”是字面常量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> age = <span class=\"number\">18</span>;</span><br><span class=\"line\">\t\tage = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t\tString name = <span class=\"string\">\"GeYu\"</span>;</span><br><span class=\"line\">\t\tname = <span class=\"string\">\"GEYU\"</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">double</span> PI = <span class=\"number\">3.14</span>;</span><br><span class=\"line\">\t             <span class=\"comment\">//PI++; 报错，final将PI定义为了符号常量</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 命名规范</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 常量：全部大写，可配合下划线：MAX_VALUE</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 类名：首字母大写，驼峰原则：HelloWorld、FatherClass</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 类成员变量、类方法：首字母小写，驼峰原则：monthSalary、getSalary()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Java常量</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestConstant</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//age和name都是变量，数字18、20和字符串“GeYu”“GEYU”是字面常量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> age = <span class=\"number\">18</span>;</span><br><span class=\"line\">\t\tage = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t\tString name = <span class=\"string\">\"GeYu\"</span>;</span><br><span class=\"line\">\t\tname = <span class=\"string\">\"GEYU\"</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">double</span> PI = <span class=\"number\">3.14</span>;</span><br><span class=\"line\">\t             <span class=\"comment\">//PI++; 报错，final将PI定义为了符号常量</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 命名规范</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 常量：全部大写，可配合下划线：MAX_VALUE</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 类名：首字母大写，驼峰原则：HelloWorld、FatherClass</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 类成员变量、类方法：首字母小写，驼峰原则：monthSalary、getSalary()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--Object类并重写toString","date":"2020-01-27T16:00:00.000Z","_content":"```java\n/**\n * 测试Object类并重写toString\n * @author 葛宇\n */\npackage 面向对象核心;\n\npublic class TestObject {\n\tpublic static void main(String[] args) {\n\t\tTestObject obj = new TestObject();\n\t\tSystem.out.println(obj.toString());\n\t\t\n\t\tPeople ple = new People(\"Kevin\",18);\n\t\tSystem.out.println(ple);\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn \"测试Overtide Object类的toString方法\";\n\t}\t\n}\n\nclass People{\n\tint age;\n\tString name;\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn name+\" 年龄：\"+age;\n\t}\t\n\t\n\tpublic People(String name,int age) {\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t}\n}\n```\n","source":"_posts/Java学习之路(30).md","raw":"---\ntitle:  Java学习之路--Object类并重写toString\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-28\n\n---\n```java\n/**\n * 测试Object类并重写toString\n * @author 葛宇\n */\npackage 面向对象核心;\n\npublic class TestObject {\n\tpublic static void main(String[] args) {\n\t\tTestObject obj = new TestObject();\n\t\tSystem.out.println(obj.toString());\n\t\t\n\t\tPeople ple = new People(\"Kevin\",18);\n\t\tSystem.out.println(ple);\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn \"测试Overtide Object类的toString方法\";\n\t}\t\n}\n\nclass People{\n\tint age;\n\tString name;\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn name+\" 年龄：\"+age;\n\t}\t\n\t\n\tpublic People(String name,int age) {\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t}\n}\n```\n","slug":"Java学习之路(30)","published":1,"updated":"2020-03-01T03:41:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7lt001x7svwyuldboz5","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试Object类并重写toString</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestObject</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tTestObject obj = <span class=\"keyword\">new</span> TestObject();</span><br><span class=\"line\">\t\tSystem.out.println(obj.toString());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tPeople ple = <span class=\"keyword\">new</span> People(<span class=\"string\">\"Kevin\"</span>,<span class=\"number\">18</span>);</span><br><span class=\"line\">\t\tSystem.out.println(ple);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"测试Overtide Object类的toString方法\"</span>;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;</span><br><span class=\"line\">\tString name;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name+<span class=\"string\">\" 年龄：\"</span>+age;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">People</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试Object类并重写toString</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestObject</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tTestObject obj = <span class=\"keyword\">new</span> TestObject();</span><br><span class=\"line\">\t\tSystem.out.println(obj.toString());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tPeople ple = <span class=\"keyword\">new</span> People(<span class=\"string\">\"Kevin\"</span>,<span class=\"number\">18</span>);</span><br><span class=\"line\">\t\tSystem.out.println(ple);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"测试Overtide Object类的toString方法\"</span>;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;</span><br><span class=\"line\">\tString name;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name+<span class=\"string\">\" 年龄：\"</span>+age;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">People</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--final关键字","date":"2020-01-27T16:00:00.000Z","_content":"```java\n/**\n * 测试final关键字\n * @author 葛宇\n */\npackage 面向对象核心;\n\npublic class TestFinal {\n\tpublic static void main(String[] args) {\n\t\tA a = new A();\n\t\tB b = new B();\n\t\t\n\t  //a.a = 2;\t//报错，final修饰变量则不可变\n\t\tb.b = 2;\t//无final修饰，可自行赋值\n\t}\n}\n\nfinal class A{\n\t\n\tfinal int a = 1;\n}\n\nclass B /*extends A*  报错，final修饰的类无法被继承*/{\n\t\n\tint b;\n\t\n\tfinal public void func(int x) {\n\t\t//...\n\t}\n\t\n\tpublic void func(double x) {\n\t\t//final修饰的方法可以在本类中重载\n\t}\n}\n\nclass C extends B{\n\t\n   /*\tpublic void func(int x) {\n\t*\t\t//...\n\t*\t}\n\t*final修饰的方法无法被子类重写\n\t*/\n}\n\n```\n","source":"_posts/Java学习之路(31).md","raw":"---\ntitle:  Java学习之路--final关键字\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-28\n\n---\n```java\n/**\n * 测试final关键字\n * @author 葛宇\n */\npackage 面向对象核心;\n\npublic class TestFinal {\n\tpublic static void main(String[] args) {\n\t\tA a = new A();\n\t\tB b = new B();\n\t\t\n\t  //a.a = 2;\t//报错，final修饰变量则不可变\n\t\tb.b = 2;\t//无final修饰，可自行赋值\n\t}\n}\n\nfinal class A{\n\t\n\tfinal int a = 1;\n}\n\nclass B /*extends A*  报错，final修饰的类无法被继承*/{\n\t\n\tint b;\n\t\n\tfinal public void func(int x) {\n\t\t//...\n\t}\n\t\n\tpublic void func(double x) {\n\t\t//final修饰的方法可以在本类中重载\n\t}\n}\n\nclass C extends B{\n\t\n   /*\tpublic void func(int x) {\n\t*\t\t//...\n\t*\t}\n\t*final修饰的方法无法被子类重写\n\t*/\n}\n\n```\n","slug":"Java学习之路(31)","published":1,"updated":"2020-03-01T03:42:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7lv00207svwk5kd7ubb","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试final关键字</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestFinal</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tA a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">\t\tB b = <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t  <span class=\"comment\">//a.a = 2;\t//报错，final修饰变量则不可变</span></span><br><span class=\"line\">\t\tb.b = <span class=\"number\">2</span>;\t<span class=\"comment\">//无final修饰，可自行赋值</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> /*<span class=\"keyword\">extends</span> <span class=\"title\">A</span>*  报错，<span class=\"title\">final</span>修饰的类无法被继承*/</span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">double</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//final修饰的方法可以在本类中重载</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">B</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">   <span class=\"comment\">/*\tpublic void func(int x) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t*\t\t//...</span></span><br><span class=\"line\"><span class=\"comment\">\t*\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t*final修饰的方法无法被子类重写</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试final关键字</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestFinal</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tA a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">\t\tB b = <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t  <span class=\"comment\">//a.a = 2;\t//报错，final修饰变量则不可变</span></span><br><span class=\"line\">\t\tb.b = <span class=\"number\">2</span>;\t<span class=\"comment\">//无final修饰，可自行赋值</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> /*<span class=\"keyword\">extends</span> <span class=\"title\">A</span>*  报错，<span class=\"title\">final</span>修饰的类无法被继承*/</span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">double</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//final修饰的方法可以在本类中重载</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">B</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">   <span class=\"comment\">/*\tpublic void func(int x) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t*\t\t//...</span></span><br><span class=\"line\"><span class=\"comment\">\t*\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t*final修饰的方法无法被子类重写</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--多态与对象转型","date":"2020-01-28T16:00:00.000Z","_content":"```java\n/**\n * 测试多态与对象转型\n * @author 葛宇\n * 多态三要素：继承、重写、父类引用指向子类对象\n * 对象转型关键点：子类转向父类是自动转型、父类转向子类是强制转型、直系可转型、兄弟系互转可通过编译但是运行报错、编译阶段按表面类型、运行阶段按本质类型\n */\npackage 面向对象核心;\n\npublic class TestPolyf {\n\tpublic static void main(String[] args) {\n\t\tAnimal a = new Animal();\n\t\tAnimal d_ = new Dog();\t\t//d_本质还是Dog类对象变量（自动转型）,但编译环节暂定为Animal类\n\t\tAnimal c_ = new Cat();\t\t//c_本质还是Cat类对象变量（自动转型）,但编译环节暂定为Animal类\t\n\t\tDog d = new Dog();\n\t\tCat c = new Cat();\n\t\t\n\t\td_.x = 1;\t\t//不报错,编译环节暂定d_是Animal类，拥有Animal类的成员变量\n\t  //d_.y = 1;\t\t//报错,编译环节暂定d_是Animal类，无法拥有Dog类的成员变量\n\t\t\n\t\tDog _d = (Dog)d_;\t\t//使用强制类型转换，将Animal类的d_转为Dog类\n\t\t_d.y = 1;\t\t\t\t//转型后可以使用Dog类的成员变量\n\t\t\n\t\tDog _d_ = (Dog)c_;\t\t//编译通过，JVM运行时报错\n\t\t_d_.y = 1;\t\t\t\t//编译通过，JVM运行时报错\n\t\n\t  //当传入子类对象的引用d,c,d_,c_发生多态：\n\t\tanimalCry(a);\n\t\tanimalCry(d_);\t\t//在运行环节JVM会自动识别出d_本质是Dog类，从而完成多态\n\t\tanimalCry(c_);\t\t//在运行环节JVM会自动识别出c_本质是Cat类，从而完成多态\n\t\tanimalCry(d);\n\t\tanimalCry(c);\n\t}\n\t\n\tstatic void animalCry(Animal a/*这里一定要是父类引用*/) {\n\t  //多态机制实现了代码的重用与精简\t\n\t\ta.shout();\n\t}\n}\n\nclass Animal{\n\tint x;\n\tpublic void shout() {\n\t\tSystem.out.println(\"Animal shout!\");\n\t}\n}\n\nclass Dog extends Animal{\t//继承\n\tint y;\n\tpublic void shout() {\n\t\tSystem.out.println(\"Dog shout!\");\t//重写\n\t}\n}\n\nclass Cat extends Animal{\t//继承\n\tint z;\n\tpublic void shout() {\n\t\tSystem.out.println(\"Cat shout!\");\t//重写\n\t}\n}\n\n```\n","source":"_posts/Java学习之路(32).md","raw":"---\ntitle:  Java学习之路--多态与对象转型\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-29\n\n---\n```java\n/**\n * 测试多态与对象转型\n * @author 葛宇\n * 多态三要素：继承、重写、父类引用指向子类对象\n * 对象转型关键点：子类转向父类是自动转型、父类转向子类是强制转型、直系可转型、兄弟系互转可通过编译但是运行报错、编译阶段按表面类型、运行阶段按本质类型\n */\npackage 面向对象核心;\n\npublic class TestPolyf {\n\tpublic static void main(String[] args) {\n\t\tAnimal a = new Animal();\n\t\tAnimal d_ = new Dog();\t\t//d_本质还是Dog类对象变量（自动转型）,但编译环节暂定为Animal类\n\t\tAnimal c_ = new Cat();\t\t//c_本质还是Cat类对象变量（自动转型）,但编译环节暂定为Animal类\t\n\t\tDog d = new Dog();\n\t\tCat c = new Cat();\n\t\t\n\t\td_.x = 1;\t\t//不报错,编译环节暂定d_是Animal类，拥有Animal类的成员变量\n\t  //d_.y = 1;\t\t//报错,编译环节暂定d_是Animal类，无法拥有Dog类的成员变量\n\t\t\n\t\tDog _d = (Dog)d_;\t\t//使用强制类型转换，将Animal类的d_转为Dog类\n\t\t_d.y = 1;\t\t\t\t//转型后可以使用Dog类的成员变量\n\t\t\n\t\tDog _d_ = (Dog)c_;\t\t//编译通过，JVM运行时报错\n\t\t_d_.y = 1;\t\t\t\t//编译通过，JVM运行时报错\n\t\n\t  //当传入子类对象的引用d,c,d_,c_发生多态：\n\t\tanimalCry(a);\n\t\tanimalCry(d_);\t\t//在运行环节JVM会自动识别出d_本质是Dog类，从而完成多态\n\t\tanimalCry(c_);\t\t//在运行环节JVM会自动识别出c_本质是Cat类，从而完成多态\n\t\tanimalCry(d);\n\t\tanimalCry(c);\n\t}\n\t\n\tstatic void animalCry(Animal a/*这里一定要是父类引用*/) {\n\t  //多态机制实现了代码的重用与精简\t\n\t\ta.shout();\n\t}\n}\n\nclass Animal{\n\tint x;\n\tpublic void shout() {\n\t\tSystem.out.println(\"Animal shout!\");\n\t}\n}\n\nclass Dog extends Animal{\t//继承\n\tint y;\n\tpublic void shout() {\n\t\tSystem.out.println(\"Dog shout!\");\t//重写\n\t}\n}\n\nclass Cat extends Animal{\t//继承\n\tint z;\n\tpublic void shout() {\n\t\tSystem.out.println(\"Cat shout!\");\t//重写\n\t}\n}\n\n```\n","slug":"Java学习之路(32)","published":1,"updated":"2020-03-01T03:43:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7lx00247svw9gq3wqcg","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试多态与对象转型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> * 多态三要素：继承、重写、父类引用指向子类对象</span></span><br><span class=\"line\"><span class=\"comment\"> * 对象转型关键点：子类转向父类是自动转型、父类转向子类是强制转型、直系可转型、兄弟系互转可通过编译但是运行报错、编译阶段按表面类型、运行阶段按本质类型</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPolyf</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tAnimal a = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">\t\tAnimal d_ = <span class=\"keyword\">new</span> Dog();\t\t<span class=\"comment\">//d_本质还是Dog类对象变量（自动转型）,但编译环节暂定为Animal类</span></span><br><span class=\"line\">\t\tAnimal c_ = <span class=\"keyword\">new</span> Cat();\t\t<span class=\"comment\">//c_本质还是Cat类对象变量（自动转型）,但编译环节暂定为Animal类\t</span></span><br><span class=\"line\">\t\tDog d = <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\">\t\tCat c = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\td_.x = <span class=\"number\">1</span>;\t\t<span class=\"comment\">//不报错,编译环节暂定d_是Animal类，拥有Animal类的成员变量</span></span><br><span class=\"line\">\t  <span class=\"comment\">//d_.y = 1;\t\t//报错,编译环节暂定d_是Animal类，无法拥有Dog类的成员变量</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tDog _d = (Dog)d_;\t\t<span class=\"comment\">//使用强制类型转换，将Animal类的d_转为Dog类</span></span><br><span class=\"line\">\t\t_d.y = <span class=\"number\">1</span>;\t\t\t\t<span class=\"comment\">//转型后可以使用Dog类的成员变量</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tDog _d_ = (Dog)c_;\t\t<span class=\"comment\">//编译通过，JVM运行时报错</span></span><br><span class=\"line\">\t\t_d_.y = <span class=\"number\">1</span>;\t\t\t\t<span class=\"comment\">//编译通过，JVM运行时报错</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t  <span class=\"comment\">//当传入子类对象的引用d,c,d_,c_发生多态：</span></span><br><span class=\"line\">\t\tanimalCry(a);</span><br><span class=\"line\">\t\tanimalCry(d_);\t\t<span class=\"comment\">//在运行环节JVM会自动识别出d_本质是Dog类，从而完成多态</span></span><br><span class=\"line\">\t\tanimalCry(c_);\t\t<span class=\"comment\">//在运行环节JVM会自动识别出c_本质是Cat类，从而完成多态</span></span><br><span class=\"line\">\t\tanimalCry(d);</span><br><span class=\"line\">\t\tanimalCry(c);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">animalCry</span><span class=\"params\">(Animal a<span class=\"comment\">/*这里一定要是父类引用*/</span>)</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//多态机制实现了代码的重用与精简\t</span></span><br><span class=\"line\">\t\ta.shout();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Animal shout!\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span>&#123;\t<span class=\"comment\">//继承</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> y;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Dog shout!\"</span>);\t<span class=\"comment\">//重写</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span>&#123;\t<span class=\"comment\">//继承</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> z;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Cat shout!\"</span>);\t<span class=\"comment\">//重写</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试多态与对象转型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> * 多态三要素：继承、重写、父类引用指向子类对象</span></span><br><span class=\"line\"><span class=\"comment\"> * 对象转型关键点：子类转向父类是自动转型、父类转向子类是强制转型、直系可转型、兄弟系互转可通过编译但是运行报错、编译阶段按表面类型、运行阶段按本质类型</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPolyf</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tAnimal a = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">\t\tAnimal d_ = <span class=\"keyword\">new</span> Dog();\t\t<span class=\"comment\">//d_本质还是Dog类对象变量（自动转型）,但编译环节暂定为Animal类</span></span><br><span class=\"line\">\t\tAnimal c_ = <span class=\"keyword\">new</span> Cat();\t\t<span class=\"comment\">//c_本质还是Cat类对象变量（自动转型）,但编译环节暂定为Animal类\t</span></span><br><span class=\"line\">\t\tDog d = <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\">\t\tCat c = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\td_.x = <span class=\"number\">1</span>;\t\t<span class=\"comment\">//不报错,编译环节暂定d_是Animal类，拥有Animal类的成员变量</span></span><br><span class=\"line\">\t  <span class=\"comment\">//d_.y = 1;\t\t//报错,编译环节暂定d_是Animal类，无法拥有Dog类的成员变量</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tDog _d = (Dog)d_;\t\t<span class=\"comment\">//使用强制类型转换，将Animal类的d_转为Dog类</span></span><br><span class=\"line\">\t\t_d.y = <span class=\"number\">1</span>;\t\t\t\t<span class=\"comment\">//转型后可以使用Dog类的成员变量</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tDog _d_ = (Dog)c_;\t\t<span class=\"comment\">//编译通过，JVM运行时报错</span></span><br><span class=\"line\">\t\t_d_.y = <span class=\"number\">1</span>;\t\t\t\t<span class=\"comment\">//编译通过，JVM运行时报错</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t  <span class=\"comment\">//当传入子类对象的引用d,c,d_,c_发生多态：</span></span><br><span class=\"line\">\t\tanimalCry(a);</span><br><span class=\"line\">\t\tanimalCry(d_);\t\t<span class=\"comment\">//在运行环节JVM会自动识别出d_本质是Dog类，从而完成多态</span></span><br><span class=\"line\">\t\tanimalCry(c_);\t\t<span class=\"comment\">//在运行环节JVM会自动识别出c_本质是Cat类，从而完成多态</span></span><br><span class=\"line\">\t\tanimalCry(d);</span><br><span class=\"line\">\t\tanimalCry(c);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">animalCry</span><span class=\"params\">(Animal a<span class=\"comment\">/*这里一定要是父类引用*/</span>)</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//多态机制实现了代码的重用与精简\t</span></span><br><span class=\"line\">\t\ta.shout();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Animal shout!\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span>&#123;\t<span class=\"comment\">//继承</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> y;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Dog shout!\"</span>);\t<span class=\"comment\">//重写</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span>&#123;\t<span class=\"comment\">//继承</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> z;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Cat shout!\"</span>);\t<span class=\"comment\">//重写</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--super用法(1)","date":"2020-01-29T16:00:00.000Z","_content":"```java\n/**\n * 测试super用法\n * @author 葛宇\n * super是对直接父类的引用，可以通过super来访问被子类覆盖的父类的方法或属性\n */\npackage 面向对象核心;\n\npublic class TestSuper {\n\tpublic static void main(String[] args) {\n\t\tnew ChildClass().func();\n\t}\n}\n\nclass FatherClass{\n\tpublic int value;\n\t\n\tpublic void func() {\n\t\tvalue = 100;\n\t\tSystem.out.println(\"FatherClass.value=\"+value);\n\t}\n}\n\nclass ChildClass extends FatherClass{\n\tpublic int value;\t\t//覆盖了父类的value属性\n\t\n\tpublic void func() {\t//重写了父类func（）方法\n\t\tsuper.func();\t\t//调用父类value\n\t\tvalue = 200;\t\t//指子类的value\n\t\tSystem.out.println(\"ChildClass.value=\"+value);\n\t\tSystem.out.println(super.value);\n\t}\n}\n\n```\n","source":"_posts/Java学习之路(33).md","raw":"---\ntitle:  Java学习之路--super用法(1)\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-30\n\n---\n```java\n/**\n * 测试super用法\n * @author 葛宇\n * super是对直接父类的引用，可以通过super来访问被子类覆盖的父类的方法或属性\n */\npackage 面向对象核心;\n\npublic class TestSuper {\n\tpublic static void main(String[] args) {\n\t\tnew ChildClass().func();\n\t}\n}\n\nclass FatherClass{\n\tpublic int value;\n\t\n\tpublic void func() {\n\t\tvalue = 100;\n\t\tSystem.out.println(\"FatherClass.value=\"+value);\n\t}\n}\n\nclass ChildClass extends FatherClass{\n\tpublic int value;\t\t//覆盖了父类的value属性\n\t\n\tpublic void func() {\t//重写了父类func（）方法\n\t\tsuper.func();\t\t//调用父类value\n\t\tvalue = 200;\t\t//指子类的value\n\t\tSystem.out.println(\"ChildClass.value=\"+value);\n\t\tSystem.out.println(super.value);\n\t}\n}\n\n```\n","slug":"Java学习之路(33)","published":1,"updated":"2020-03-01T03:44:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7ly00277svwfjeycv0t","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试super用法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> * super是对直接父类的引用，可以通过super来访问被子类覆盖的父类的方法或属性</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSuper</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> ChildClass().func();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FatherClass</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tvalue = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"FatherClass.value=\"</span>+value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">FatherClass</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> value;\t\t<span class=\"comment\">//覆盖了父类的value属性</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;\t<span class=\"comment\">//重写了父类func（）方法</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>.func();\t\t<span class=\"comment\">//调用父类value</span></span><br><span class=\"line\">\t\tvalue = <span class=\"number\">200</span>;\t\t<span class=\"comment\">//指子类的value</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"ChildClass.value=\"</span>+value);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">super</span>.value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试super用法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> * super是对直接父类的引用，可以通过super来访问被子类覆盖的父类的方法或属性</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSuper</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> ChildClass().func();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FatherClass</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tvalue = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"FatherClass.value=\"</span>+value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">FatherClass</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> value;\t\t<span class=\"comment\">//覆盖了父类的value属性</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;\t<span class=\"comment\">//重写了父类func（）方法</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>.func();\t\t<span class=\"comment\">//调用父类value</span></span><br><span class=\"line\">\t\tvalue = <span class=\"number\">200</span>;\t\t<span class=\"comment\">//指子类的value</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"ChildClass.value=\"</span>+value);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">super</span>.value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--super用法(2)","date":"2020-01-29T16:00:00.000Z","_content":"```java\n/**\n * 测试super用法\n * @author 葛宇\n */\npackage 面向对象核心;\n\npublic class TestSuper1 {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"创建一个Child对象：\");\n\t\tnew ChildClass_();\n\t}\n}\n\nclass FatherClass_{\n\tpublic FatherClass_() {\n\t  //super();\n\t\tSystem.out.println(\"创建FatherClass_\");\n\t}\n}\n\nclass ChildClass_ extends FatherClass_{\n\tpublic ChildClass_() {\n\t  //super();\n\t  //所有构造方法第一句都是super();不加编译器会自动添加\n\t\tSystem.out.println(\"创建ChildClass_\");\n\t}\n}\n\n//本例继承树为：Object（顶端）-->FatherClass_-->ChildClass_（底端）\n//类的继承都是先一步一步向上追溯到继承树顶端，再从顶端向底端一个一个调用类构造器，完成初始化\n\n```\n","source":"_posts/Java学习之路(34).md","raw":"---\ntitle:  Java学习之路--super用法(2)\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-30\n\n---\n```java\n/**\n * 测试super用法\n * @author 葛宇\n */\npackage 面向对象核心;\n\npublic class TestSuper1 {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"创建一个Child对象：\");\n\t\tnew ChildClass_();\n\t}\n}\n\nclass FatherClass_{\n\tpublic FatherClass_() {\n\t  //super();\n\t\tSystem.out.println(\"创建FatherClass_\");\n\t}\n}\n\nclass ChildClass_ extends FatherClass_{\n\tpublic ChildClass_() {\n\t  //super();\n\t  //所有构造方法第一句都是super();不加编译器会自动添加\n\t\tSystem.out.println(\"创建ChildClass_\");\n\t}\n}\n\n//本例继承树为：Object（顶端）-->FatherClass_-->ChildClass_（底端）\n//类的继承都是先一步一步向上追溯到继承树顶端，再从顶端向底端一个一个调用类构造器，完成初始化\n\n```\n","slug":"Java学习之路(34)","published":1,"updated":"2020-03-01T03:45:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7m2002b7svwk6fjotk7","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试super用法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSuper1</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"创建一个Child对象：\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> ChildClass_();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FatherClass_</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FatherClass_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//super();</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"创建FatherClass_\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildClass_</span> <span class=\"keyword\">extends</span> <span class=\"title\">FatherClass_</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChildClass_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//super();</span></span><br><span class=\"line\">\t  <span class=\"comment\">//所有构造方法第一句都是super();不加编译器会自动添加</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"创建ChildClass_\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//本例继承树为：Object（顶端）--&gt;FatherClass_--&gt;ChildClass_（底端）</span></span><br><span class=\"line\"><span class=\"comment\">//类的继承都是先一步一步向上追溯到继承树顶端，再从顶端向底端一个一个调用类构造器，完成初始化</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试super用法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSuper1</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"创建一个Child对象：\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> ChildClass_();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FatherClass_</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FatherClass_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//super();</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"创建FatherClass_\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildClass_</span> <span class=\"keyword\">extends</span> <span class=\"title\">FatherClass_</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChildClass_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//super();</span></span><br><span class=\"line\">\t  <span class=\"comment\">//所有构造方法第一句都是super();不加编译器会自动添加</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"创建ChildClass_\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//本例继承树为：Object（顶端）--&gt;FatherClass_--&gt;ChildClass_（底端）</span></span><br><span class=\"line\"><span class=\"comment\">//类的继承都是先一步一步向上追溯到继承树顶端，再从顶端向底端一个一个调用类构造器，完成初始化</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--super用法(2)","date":"2020-01-29T16:00:00.000Z","_content":"```java\n/**\n * 测试super用法\n * @author 葛宇\n */\npackage 面向对象核心;\n\npublic class TestSuper1 {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"创建一个Child对象：\");\n\t\tnew ChildClass_();\n\t}\n}\n\nclass FatherClass_{\n\tpublic FatherClass_() {\n\t  //super();\n\t\tSystem.out.println(\"创建FatherClass_\");\n\t}\n}\n\nclass ChildClass_ extends FatherClass_{\n\tpublic ChildClass_() {\n\t  //super();\n\t  //所有构造方法第一句都是super();不加编译器会自动添加\n\t\tSystem.out.println(\"创建ChildClass_\");\n\t}\n}\n\n//本例继承树为：Object（顶端）-->FatherClass_-->ChildClass_（底端）\n//类的继承都是先一步一步向上追溯到继承树顶端，再从顶端向底端一个一个调用类构造器，完成初始化\n\n```\n","source":"_posts/Java学习之路(35).md","raw":"---\ntitle:  Java学习之路--super用法(2)\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-30\n\n---\n```java\n/**\n * 测试super用法\n * @author 葛宇\n */\npackage 面向对象核心;\n\npublic class TestSuper1 {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"创建一个Child对象：\");\n\t\tnew ChildClass_();\n\t}\n}\n\nclass FatherClass_{\n\tpublic FatherClass_() {\n\t  //super();\n\t\tSystem.out.println(\"创建FatherClass_\");\n\t}\n}\n\nclass ChildClass_ extends FatherClass_{\n\tpublic ChildClass_() {\n\t  //super();\n\t  //所有构造方法第一句都是super();不加编译器会自动添加\n\t\tSystem.out.println(\"创建ChildClass_\");\n\t}\n}\n\n//本例继承树为：Object（顶端）-->FatherClass_-->ChildClass_（底端）\n//类的继承都是先一步一步向上追溯到继承树顶端，再从顶端向底端一个一个调用类构造器，完成初始化\n\n```\n","slug":"Java学习之路(35)","published":1,"updated":"2020-03-01T03:51:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7m8002e7svwwqgk288e","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试super用法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSuper1</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"创建一个Child对象：\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> ChildClass_();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FatherClass_</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FatherClass_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//super();</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"创建FatherClass_\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildClass_</span> <span class=\"keyword\">extends</span> <span class=\"title\">FatherClass_</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChildClass_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//super();</span></span><br><span class=\"line\">\t  <span class=\"comment\">//所有构造方法第一句都是super();不加编译器会自动添加</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"创建ChildClass_\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//本例继承树为：Object（顶端）--&gt;FatherClass_--&gt;ChildClass_（底端）</span></span><br><span class=\"line\"><span class=\"comment\">//类的继承都是先一步一步向上追溯到继承树顶端，再从顶端向底端一个一个调用类构造器，完成初始化</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试super用法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSuper1</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"创建一个Child对象：\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> ChildClass_();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FatherClass_</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FatherClass_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//super();</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"创建FatherClass_\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildClass_</span> <span class=\"keyword\">extends</span> <span class=\"title\">FatherClass_</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChildClass_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//super();</span></span><br><span class=\"line\">\t  <span class=\"comment\">//所有构造方法第一句都是super();不加编译器会自动添加</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"创建ChildClass_\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//本例继承树为：Object（顶端）--&gt;FatherClass_--&gt;ChildClass_（底端）</span></span><br><span class=\"line\"><span class=\"comment\">//类的继承都是先一步一步向上追溯到继承树顶端，再从顶端向底端一个一个调用类构造器，完成初始化</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--数组用法(2)","date":"2020-01-30T16:00:00.000Z","_content":"```java\n/**\n * 测试数组\n * @author 葛宇\n * 测试三种初始化方法和foreach遍历\n */\npackage com.github.nuistgy.testarray;\n\npublic class Test02 {\n\tpublic static void main(String[] args) {\n\t  //静态初始化\n\t\tint a[] = {1,2,3};\n\t\tStudent stu[] = {new Student(1001,\"Mark\"),\n\t\t\t\t\t\t new Student(1002,\"Jhon\"),\n\t\t\t\t\t\t new Student(1003,\"Jack\")\n\t\t\t\t\t\t };\n\t  //默认初始化\t\n\t\tint b[] = new int[3];\t\t\t\t//默认是0\n\t\tboolean bool[] = new boolean[3];\t//默认是false\n\t\tString s[] = new String[3];\t\t\t//默认是null\n\t\tStudent stu_[] = new Student[3]; \t//默认是null\n\t\t\n\t  //动态初始化\n\t\tint c[] = new int[3];\n\t\tc[0] = 1;\n\t\tc[1] = 2;\n\t\tc[2] = 3;\n\t\t\n\t  //foreach遍历.注意：foreach不用于写操作，只用于读操作\n\t\tfor(int m :c) {\n\t\t\tSystem.out.println(m);\n\t\t}\n\t}\n}\n\nclass Student{\n\tprivate int id;\n\tprivate String  name;\n\t\n\tStudent(int id,String name){\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t}\n}\n```\n","source":"_posts/Java学习之路(36).md","raw":"---\ntitle:  Java学习之路--数组用法(2)\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-31\n\n---\n```java\n/**\n * 测试数组\n * @author 葛宇\n * 测试三种初始化方法和foreach遍历\n */\npackage com.github.nuistgy.testarray;\n\npublic class Test02 {\n\tpublic static void main(String[] args) {\n\t  //静态初始化\n\t\tint a[] = {1,2,3};\n\t\tStudent stu[] = {new Student(1001,\"Mark\"),\n\t\t\t\t\t\t new Student(1002,\"Jhon\"),\n\t\t\t\t\t\t new Student(1003,\"Jack\")\n\t\t\t\t\t\t };\n\t  //默认初始化\t\n\t\tint b[] = new int[3];\t\t\t\t//默认是0\n\t\tboolean bool[] = new boolean[3];\t//默认是false\n\t\tString s[] = new String[3];\t\t\t//默认是null\n\t\tStudent stu_[] = new Student[3]; \t//默认是null\n\t\t\n\t  //动态初始化\n\t\tint c[] = new int[3];\n\t\tc[0] = 1;\n\t\tc[1] = 2;\n\t\tc[2] = 3;\n\t\t\n\t  //foreach遍历.注意：foreach不用于写操作，只用于读操作\n\t\tfor(int m :c) {\n\t\t\tSystem.out.println(m);\n\t\t}\n\t}\n}\n\nclass Student{\n\tprivate int id;\n\tprivate String  name;\n\t\n\tStudent(int id,String name){\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t}\n}\n```\n","slug":"Java学习之路(36)","published":1,"updated":"2020-03-01T03:50:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7mf002i7svwj9ha5uao","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试三种初始化方法和foreach遍历</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.github.nuistgy.testarray;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test02</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//静态初始化</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">\t\tStudent stu[] = &#123;<span class=\"keyword\">new</span> Student(<span class=\"number\">1001</span>,<span class=\"string\">\"Mark\"</span>),</span><br><span class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">new</span> Student(<span class=\"number\">1002</span>,<span class=\"string\">\"Jhon\"</span>),</span><br><span class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">new</span> Student(<span class=\"number\">1003</span>,<span class=\"string\">\"Jack\"</span>)</span><br><span class=\"line\">\t\t\t\t\t\t &#125;;</span><br><span class=\"line\">\t  <span class=\"comment\">//默认初始化\t</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> b[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">3</span>];\t\t\t\t<span class=\"comment\">//默认是0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> bool[] = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[<span class=\"number\">3</span>];\t<span class=\"comment\">//默认是false</span></span><br><span class=\"line\">\t\tString s[] = <span class=\"keyword\">new</span> String[<span class=\"number\">3</span>];\t\t\t<span class=\"comment\">//默认是null</span></span><br><span class=\"line\">\t\tStudent stu_[] = <span class=\"keyword\">new</span> Student[<span class=\"number\">3</span>]; \t<span class=\"comment\">//默认是null</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t  <span class=\"comment\">//动态初始化</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> c[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">\t\tc[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tc[<span class=\"number\">1</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tc[<span class=\"number\">2</span>] = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t  <span class=\"comment\">//foreach遍历.注意：foreach不用于写操作，只用于读操作</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> m :c) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(m);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String  name;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tStudent(<span class=\"keyword\">int</span> id,String name)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试三种初始化方法和foreach遍历</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.github.nuistgy.testarray;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test02</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//静态初始化</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">\t\tStudent stu[] = &#123;<span class=\"keyword\">new</span> Student(<span class=\"number\">1001</span>,<span class=\"string\">\"Mark\"</span>),</span><br><span class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">new</span> Student(<span class=\"number\">1002</span>,<span class=\"string\">\"Jhon\"</span>),</span><br><span class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">new</span> Student(<span class=\"number\">1003</span>,<span class=\"string\">\"Jack\"</span>)</span><br><span class=\"line\">\t\t\t\t\t\t &#125;;</span><br><span class=\"line\">\t  <span class=\"comment\">//默认初始化\t</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> b[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">3</span>];\t\t\t\t<span class=\"comment\">//默认是0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> bool[] = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[<span class=\"number\">3</span>];\t<span class=\"comment\">//默认是false</span></span><br><span class=\"line\">\t\tString s[] = <span class=\"keyword\">new</span> String[<span class=\"number\">3</span>];\t\t\t<span class=\"comment\">//默认是null</span></span><br><span class=\"line\">\t\tStudent stu_[] = <span class=\"keyword\">new</span> Student[<span class=\"number\">3</span>]; \t<span class=\"comment\">//默认是null</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t  <span class=\"comment\">//动态初始化</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> c[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">\t\tc[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tc[<span class=\"number\">1</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tc[<span class=\"number\">2</span>] = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t  <span class=\"comment\">//foreach遍历.注意：foreach不用于写操作，只用于读操作</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> m :c) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(m);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String  name;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tStudent(<span class=\"keyword\">int</span> id,String name)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java自增自减运算符天坑笔试题","date":"2020-02-18T16:00:00.000Z","_content":"**问：下面程序运行的结果是什么？**\n---\n```java\nint count = 0;\nfor(int i = 0; i < 100; i++)\n    count = count++;\nSystem.out.println(\"count = \" + count);\n```\n**答：count = 0**\n---\n首先 count++ 是一个有返回值的表达式，返回值是 count 自加前面的值，java 对自加处理的流程是先把 count 的值（不是引用），拷贝到一个临时变量区，然后对 count 变量加 1，接着返回临时变量区的值。\n\n所以上面代码中第一次循环执行的步骤是 JVM 把 count 的值（0）拷贝到临时变量区，然后 count 值加 1，这时 count 的值是 1，接着返回临时变量区的值（值还是 0），最后赋值给 count，此时 count 值被重置成 0。所以上面代码语句，count = count++可以按照如下代码来理解：\n```java\nint autoAdd(int count) {\n    int temp = count;\n    count = coutn + 1;\n    return temp;\n}\n```\n第一次循环后 count 的值还是 0，其他 99 次的循环也是一样，最终导致 count 的值始终没变，任然保持最初的状态，如果想要打印 100，则把语句count = count++改为count++即可。**不过这个问题在不同的语言环境中是不一样的，在 c++ 中count = count++与count++是等效的，但在 Java 中是不等效的。**\n\n\n","source":"_posts/Java学习之路(38).md","raw":"---\ntitle:  Java自增自减运算符天坑笔试题\ntags: [编程,学习,Java,坑]\ncategories: [Java]\ndate: 2020-2-19\n\n---\n**问：下面程序运行的结果是什么？**\n---\n```java\nint count = 0;\nfor(int i = 0; i < 100; i++)\n    count = count++;\nSystem.out.println(\"count = \" + count);\n```\n**答：count = 0**\n---\n首先 count++ 是一个有返回值的表达式，返回值是 count 自加前面的值，java 对自加处理的流程是先把 count 的值（不是引用），拷贝到一个临时变量区，然后对 count 变量加 1，接着返回临时变量区的值。\n\n所以上面代码中第一次循环执行的步骤是 JVM 把 count 的值（0）拷贝到临时变量区，然后 count 值加 1，这时 count 的值是 1，接着返回临时变量区的值（值还是 0），最后赋值给 count，此时 count 值被重置成 0。所以上面代码语句，count = count++可以按照如下代码来理解：\n```java\nint autoAdd(int count) {\n    int temp = count;\n    count = coutn + 1;\n    return temp;\n}\n```\n第一次循环后 count 的值还是 0，其他 99 次的循环也是一样，最终导致 count 的值始终没变，任然保持最初的状态，如果想要打印 100，则把语句count = count++改为count++即可。**不过这个问题在不同的语言环境中是不一样的，在 c++ 中count = count++与count++是等效的，但在 Java 中是不等效的。**\n\n\n","slug":"Java学习之路(38)","published":1,"updated":"2020-03-16T09:30:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7mg002l7svw6erkgnrm","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"问：下面程序运行的结果是什么？\"><a href=\"#问：下面程序运行的结果是什么？\" class=\"headerlink\" title=\"问：下面程序运行的结果是什么？\"></a><strong>问：下面程序运行的结果是什么？</strong></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">    count = count++;</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"count = \"</span> + count);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"答：count-0\"><a href=\"#答：count-0\" class=\"headerlink\" title=\"答：count = 0\"></a><strong>答：count = 0</strong></h2><p>首先 count++ 是一个有返回值的表达式，返回值是 count 自加前面的值，java 对自加处理的流程是先把 count 的值（不是引用），拷贝到一个临时变量区，然后对 count 变量加 1，接着返回临时变量区的值。</p>\n<p>所以上面代码中第一次循环执行的步骤是 JVM 把 count 的值（0）拷贝到临时变量区，然后 count 值加 1，这时 count 的值是 1，接着返回临时变量区的值（值还是 0），最后赋值给 count，此时 count 值被重置成 0。所以上面代码语句，count = count++可以按照如下代码来理解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">autoAdd</span><span class=\"params\">(<span class=\"keyword\">int</span> count)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp = count;</span><br><span class=\"line\">    count = coutn + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第一次循环后 count 的值还是 0，其他 99 次的循环也是一样，最终导致 count 的值始终没变，任然保持最初的状态，如果想要打印 100，则把语句count = count++改为count++即可。<strong>不过这个问题在不同的语言环境中是不一样的，在 c++ 中count = count++与count++是等效的，但在 Java 中是不等效的。</strong></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h2 id=\"问：下面程序运行的结果是什么？\"><a href=\"#问：下面程序运行的结果是什么？\" class=\"headerlink\" title=\"问：下面程序运行的结果是什么？\"></a><strong>问：下面程序运行的结果是什么？</strong></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">    count = count++;</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"count = \"</span> + count);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"答：count-0\"><a href=\"#答：count-0\" class=\"headerlink\" title=\"答：count = 0\"></a><strong>答：count = 0</strong></h2><p>首先 count++ 是一个有返回值的表达式，返回值是 count 自加前面的值，java 对自加处理的流程是先把 count 的值（不是引用），拷贝到一个临时变量区，然后对 count 变量加 1，接着返回临时变量区的值。</p>\n<p>所以上面代码中第一次循环执行的步骤是 JVM 把 count 的值（0）拷贝到临时变量区，然后 count 值加 1，这时 count 的值是 1，接着返回临时变量区的值（值还是 0），最后赋值给 count，此时 count 值被重置成 0。所以上面代码语句，count = count++可以按照如下代码来理解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">autoAdd</span><span class=\"params\">(<span class=\"keyword\">int</span> count)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp = count;</span><br><span class=\"line\">    count = coutn + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第一次循环后 count 的值还是 0，其他 99 次的循环也是一样，最终导致 count 的值始终没变，任然保持最初的状态，如果想要打印 100，则把语句count = count++改为count++即可。<strong>不过这个问题在不同的语言环境中是不一样的，在 c++ 中count = count++与count++是等效的，但在 Java 中是不等效的。</strong></p>\n"},{"title":"Java学习之路--String类初识","date":"2020-02-18T16:00:00.000Z","_content":"```java\npackage com.github.nuistgy.teststring;\n/**\n * 测试字符串类\n * @author 葛宇\n *\n */\npublic class TestString {\n\tpublic static void main(String[] args) {\n\t\tString str = \"abc\";\n\t\tString str1 = new String(\"def\");\n\t\tString str2 = \"abc\"+\"def\";\n\t\tString str3 = \"1\"+1;\n\t\tSystem.out.println(str3);\n\t\t\n\t\t///////////////////////////////////\n\t\t\n\t\tString str4 = \"xyz\";\n\t\tString str5 = \"xyz\";\n\t\tString str6 = new String(\"xyz\");\n\t\tSystem.out.println(str4==str5);\t\t\t\t//输出true\n\t\tSystem.out.println(str5==str6);\t\t\t\t//输出false\n\t\tSystem.out.println(str5.equals(str6));\t\t//输出true\n\t}\n}\n\n```\n> 关于String类既没什么好讲的又有太多东西可讲，因为相关知识点很多、很细小，建议适合配合document使用。博客里仅推送一些必要的以及学习中应值得注意的知识点，后续也会进行补充。\n\n关于上述代码，注意三点：“+”号的作用是充当字符串连接符；str4和str5均指向字符串常量池的同一个字符串“xyz”，但是new String得到的字符串对象是一个全新的，故“==”判别为false；equals用来对字符串内容作比较，==是对地址做比较。\n\n\n","source":"_posts/Java学习之路(39).md","raw":"---\ntitle:  Java学习之路--String类初识\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-2-19\n\n---\n```java\npackage com.github.nuistgy.teststring;\n/**\n * 测试字符串类\n * @author 葛宇\n *\n */\npublic class TestString {\n\tpublic static void main(String[] args) {\n\t\tString str = \"abc\";\n\t\tString str1 = new String(\"def\");\n\t\tString str2 = \"abc\"+\"def\";\n\t\tString str3 = \"1\"+1;\n\t\tSystem.out.println(str3);\n\t\t\n\t\t///////////////////////////////////\n\t\t\n\t\tString str4 = \"xyz\";\n\t\tString str5 = \"xyz\";\n\t\tString str6 = new String(\"xyz\");\n\t\tSystem.out.println(str4==str5);\t\t\t\t//输出true\n\t\tSystem.out.println(str5==str6);\t\t\t\t//输出false\n\t\tSystem.out.println(str5.equals(str6));\t\t//输出true\n\t}\n}\n\n```\n> 关于String类既没什么好讲的又有太多东西可讲，因为相关知识点很多、很细小，建议适合配合document使用。博客里仅推送一些必要的以及学习中应值得注意的知识点，后续也会进行补充。\n\n关于上述代码，注意三点：“+”号的作用是充当字符串连接符；str4和str5均指向字符串常量池的同一个字符串“xyz”，但是new String得到的字符串对象是一个全新的，故“==”判别为false；equals用来对字符串内容作比较，==是对地址做比较。\n\n\n","slug":"Java学习之路(39)","published":1,"updated":"2022-09-23T13:17:45.908Z","_id":"cl81jb7mj002p7svwjtgk0b92","comments":1,"layout":"post","photos":[],"link":"","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.github.nuistgy.teststring;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试字符串类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestString</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tString str = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">\t\tString str1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"def\"</span>);</span><br><span class=\"line\">\t\tString str2 = <span class=\"string\">\"abc\"</span>+<span class=\"string\">\"def\"</span>;</span><br><span class=\"line\">\t\tString str3 = <span class=\"string\">\"1\"</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tSystem.out.println(str3);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">///////////////////////////////////</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString str4 = <span class=\"string\">\"xyz\"</span>;</span><br><span class=\"line\">\t\tString str5 = <span class=\"string\">\"xyz\"</span>;</span><br><span class=\"line\">\t\tString str6 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"xyz\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(str4==str5);\t\t\t\t<span class=\"comment\">//输出true</span></span><br><span class=\"line\">\t\tSystem.out.println(str5==str6);\t\t\t\t<span class=\"comment\">//输出false</span></span><br><span class=\"line\">\t\tSystem.out.println(str5.equals(str6));\t\t<span class=\"comment\">//输出true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>关于String类既没什么好讲的又有太多东西可讲，因为相关知识点很多、很细小，建议适合配合document使用。博客里仅推送一些必要的以及学习中应值得注意的知识点，后续也会进行补充。</p>\n</blockquote>\n<p>关于上述代码，注意三点：“+”号的作用是充当字符串连接符；str4和str5均指向字符串常量池的同一个字符串“xyz”，但是new String得到的字符串对象是一个全新的，故“==”判别为false；equals用来对字符串内容作比较，==是对地址做比较。</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"category_generator":{"per_page":5},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.github.nuistgy.teststring;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试字符串类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestString</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tString str = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">\t\tString str1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"def\"</span>);</span><br><span class=\"line\">\t\tString str2 = <span class=\"string\">\"abc\"</span>+<span class=\"string\">\"def\"</span>;</span><br><span class=\"line\">\t\tString str3 = <span class=\"string\">\"1\"</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tSystem.out.println(str3);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">///////////////////////////////////</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString str4 = <span class=\"string\">\"xyz\"</span>;</span><br><span class=\"line\">\t\tString str5 = <span class=\"string\">\"xyz\"</span>;</span><br><span class=\"line\">\t\tString str6 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"xyz\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(str4==str5);\t\t\t\t<span class=\"comment\">//输出true</span></span><br><span class=\"line\">\t\tSystem.out.println(str5==str6);\t\t\t\t<span class=\"comment\">//输出false</span></span><br><span class=\"line\">\t\tSystem.out.println(str5.equals(str6));\t\t<span class=\"comment\">//输出true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>关于String类既没什么好讲的又有太多东西可讲，因为相关知识点很多、很细小，建议适合配合document使用。博客里仅推送一些必要的以及学习中应值得注意的知识点，后续也会进行补充。</p>\n</blockquote>\n<p>关于上述代码，注意三点：“+”号的作用是充当字符串连接符；str4和str5均指向字符串常量池的同一个字符串“xyz”，但是new String得到的字符串对象是一个全新的，故“==”判别为false；equals用来对字符串内容作比较，==是对地址做比较。</p>\n"},{"title":"Java学习之路--变量","date":"2020-01-19T16:00:00.000Z","_content":"```java\n/**\n * Java的变量\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestVariable {\n\tpublic static void main(String[] args) {\n\t\tint a;\n\t\tlong b;\n\t\tdouble c;\n\t\ta=1;\n\t\tb=2;\n\t\tc=3;\n\t\n\t\tint i,j,k;\n\t\ti=1;\n\t\tj=2;\n\t\tk=3;\n\t\ti=j=k=4;\n\t    //i=5,j=6,k=7; 这种赋值Java只允许在变量定义时候进行\n\t\t\n\t\tint n=8,m=9;\n\t}\n}\n\n```\n","source":"_posts/Java学习之路(4).md","raw":"---\ntitle:  Java学习之路--变量\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-20\n\n---\n```java\n/**\n * Java的变量\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestVariable {\n\tpublic static void main(String[] args) {\n\t\tint a;\n\t\tlong b;\n\t\tdouble c;\n\t\ta=1;\n\t\tb=2;\n\t\tc=3;\n\t\n\t\tint i,j,k;\n\t\ti=1;\n\t\tj=2;\n\t\tk=3;\n\t\ti=j=k=4;\n\t    //i=5,j=6,k=7; 这种赋值Java只允许在变量定义时候进行\n\t\t\n\t\tint n=8,m=9;\n\t}\n}\n\n```\n","slug":"Java学习之路(4)","published":1,"updated":"2020-02-28T05:52:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7mk002s7svwckwvelwf","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Java的变量</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestVariable</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> b;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> c;</span><br><span class=\"line\">\t\ta=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tb=<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tc=<span class=\"number\">3</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i,j,k;</span><br><span class=\"line\">\t\ti=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tj=<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tk=<span class=\"number\">3</span>;</span><br><span class=\"line\">\t\ti=j=k=<span class=\"number\">4</span>;</span><br><span class=\"line\">\t    <span class=\"comment\">//i=5,j=6,k=7; 这种赋值Java只允许在变量定义时候进行</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> n=<span class=\"number\">8</span>,m=<span class=\"number\">9</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Java的变量</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestVariable</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> b;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> c;</span><br><span class=\"line\">\t\ta=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tb=<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tc=<span class=\"number\">3</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i,j,k;</span><br><span class=\"line\">\t\ti=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tj=<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tk=<span class=\"number\">3</span>;</span><br><span class=\"line\">\t\ti=j=k=<span class=\"number\">4</span>;</span><br><span class=\"line\">\t    <span class=\"comment\">//i=5,j=6,k=7; 这种赋值Java只允许在变量定义时候进行</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> n=<span class=\"number\">8</span>,m=<span class=\"number\">9</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--字符类型和布尔类型","date":"2020-01-19T16:00:00.000Z","_content":"```java\n/**\n * Java字符类型和布尔类型\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestPrimitiveDateType {\n\tpublic static void main(String[] args) {\n\t\tchar a = 'A';\n\t\tchar b =  '中';\n\t\tchar c = '1';\n\t\t/*\n\t\t * 对于字符类型数据，Java使用UNICODE编码表示\n\t\t * 每个字符占2字节 \n\t\t * 字符用' '  字符串用\" \"\n\t   */\n\t\t\n\t  //转义字符\n\t\tSystem.out.println('a'+'b');  //输出195\n\t\tSystem.out.println(\"\"+'a'+'b');  //输出ab\n\t\tSystem.out.println(\"\"+'a'+'\\''+'b');  //输出a'b\n\t\t\n\t  //测试布尔类型\n\t  //布尔类型数据占一位而不是一字节，且不可以用'0'或'1'\n\t\tboolean man = true;\n\t\tboolean woman = false;\n\t\tif(man) {\n\t\t\t//...\n\t\t}\n\t}\n}\n\n\n```\n","source":"_posts/Java学习之路(5).md","raw":"---\ntitle:  Java学习之路--字符类型和布尔类型\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-20\n\n---\n```java\n/**\n * Java字符类型和布尔类型\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestPrimitiveDateType {\n\tpublic static void main(String[] args) {\n\t\tchar a = 'A';\n\t\tchar b =  '中';\n\t\tchar c = '1';\n\t\t/*\n\t\t * 对于字符类型数据，Java使用UNICODE编码表示\n\t\t * 每个字符占2字节 \n\t\t * 字符用' '  字符串用\" \"\n\t   */\n\t\t\n\t  //转义字符\n\t\tSystem.out.println('a'+'b');  //输出195\n\t\tSystem.out.println(\"\"+'a'+'b');  //输出ab\n\t\tSystem.out.println(\"\"+'a'+'\\''+'b');  //输出a'b\n\t\t\n\t  //测试布尔类型\n\t  //布尔类型数据占一位而不是一字节，且不可以用'0'或'1'\n\t\tboolean man = true;\n\t\tboolean woman = false;\n\t\tif(man) {\n\t\t\t//...\n\t\t}\n\t}\n}\n\n\n```\n","slug":"Java学习之路(5)","published":1,"updated":"2020-02-28T05:52:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7mm002w7svwy2bv8ygp","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Java字符类型和布尔类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPrimitiveDateType</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> a = <span class=\"string\">'A'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> b =  <span class=\"string\">'中'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> c = <span class=\"string\">'1'</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 对于字符类型数据，Java使用UNICODE编码表示</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 每个字符占2字节 </span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 字符用' '  字符串用\" \"</span></span><br><span class=\"line\"><span class=\"comment\">\t   */</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t  <span class=\"comment\">//转义字符</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">'a'</span>+<span class=\"string\">'b'</span>);  <span class=\"comment\">//输出195</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"\"</span>+<span class=\"string\">'a'</span>+<span class=\"string\">'b'</span>);  <span class=\"comment\">//输出ab</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"\"</span>+<span class=\"string\">'a'</span>+<span class=\"string\">'\\''</span>+<span class=\"string\">'b'</span>);  <span class=\"comment\">//输出a'b</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t  <span class=\"comment\">//测试布尔类型</span></span><br><span class=\"line\">\t  <span class=\"comment\">//布尔类型数据占一位而不是一字节，且不可以用'0'或'1'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> man = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> woman = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(man) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//...</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Java字符类型和布尔类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPrimitiveDateType</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> a = <span class=\"string\">'A'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> b =  <span class=\"string\">'中'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> c = <span class=\"string\">'1'</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 对于字符类型数据，Java使用UNICODE编码表示</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 每个字符占2字节 </span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 字符用' '  字符串用\" \"</span></span><br><span class=\"line\"><span class=\"comment\">\t   */</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t  <span class=\"comment\">//转义字符</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">'a'</span>+<span class=\"string\">'b'</span>);  <span class=\"comment\">//输出195</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"\"</span>+<span class=\"string\">'a'</span>+<span class=\"string\">'b'</span>);  <span class=\"comment\">//输出ab</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"\"</span>+<span class=\"string\">'a'</span>+<span class=\"string\">'\\''</span>+<span class=\"string\">'b'</span>);  <span class=\"comment\">//输出a'b</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t  <span class=\"comment\">//测试布尔类型</span></span><br><span class=\"line\">\t  <span class=\"comment\">//布尔类型数据占一位而不是一字节，且不可以用'0'或'1'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> man = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> woman = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(man) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//...</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--类型转换","date":"2020-01-21T16:00:00.000Z","_content":"```java\n/**\n * 类型转换的误区\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestTypeConvertError {\n\tpublic static void main(String[] args) {\n\t\t\n\t\tint a = 1000000000;\t\t\t//10亿\n\t\tint b = 20;\n\t\t\n\t\tint ans1 = a*b;\n\t\tSystem.out.println(ans1);\t//表达式范围越界\n\t\t\n\t\tlong ans2 = a*b;\n\t\tSystem.out.println(ans2);\t//表达式范围越界\n\t\t\n\t\tlong ans3 = a*((long)b);\n\t\tSystem.out.print(ans3); \t//正确输出\n\t}\n}\n\n```\n","source":"_posts/Java学习之路(6).md","raw":"---\ntitle:  Java学习之路--类型转换\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-22\n\n---\n```java\n/**\n * 类型转换的误区\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestTypeConvertError {\n\tpublic static void main(String[] args) {\n\t\t\n\t\tint a = 1000000000;\t\t\t//10亿\n\t\tint b = 20;\n\t\t\n\t\tint ans1 = a*b;\n\t\tSystem.out.println(ans1);\t//表达式范围越界\n\t\t\n\t\tlong ans2 = a*b;\n\t\tSystem.out.println(ans2);\t//表达式范围越界\n\t\t\n\t\tlong ans3 = a*((long)b);\n\t\tSystem.out.print(ans3); \t//正确输出\n\t}\n}\n\n```\n","slug":"Java学习之路(6)","published":1,"updated":"2020-02-28T05:52:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7mn002z7svw23e4hdk8","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 类型转换的误区</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestTypeConvertError</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a = <span class=\"number\">1000000000</span>;\t\t\t<span class=\"comment\">//10亿</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> ans1 = a*b;</span><br><span class=\"line\">\t\tSystem.out.println(ans1);\t<span class=\"comment\">//表达式范围越界</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> ans2 = a*b;</span><br><span class=\"line\">\t\tSystem.out.println(ans2);\t<span class=\"comment\">//表达式范围越界</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> ans3 = a*((<span class=\"keyword\">long</span>)b);</span><br><span class=\"line\">\t\tSystem.out.print(ans3); \t<span class=\"comment\">//正确输出</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 类型转换的误区</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestTypeConvertError</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a = <span class=\"number\">1000000000</span>;\t\t\t<span class=\"comment\">//10亿</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> ans1 = a*b;</span><br><span class=\"line\">\t\tSystem.out.println(ans1);\t<span class=\"comment\">//表达式范围越界</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> ans2 = a*b;</span><br><span class=\"line\">\t\tSystem.out.println(ans2);\t<span class=\"comment\">//表达式范围越界</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> ans3 = a*((<span class=\"keyword\">long</span>)b);</span><br><span class=\"line\">\t\tSystem.out.print(ans3); \t<span class=\"comment\">//正确输出</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--算数运算符","date":"2020-01-21T16:00:00.000Z","_content":"```java\n/**\n * 测试算数运算符\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TsetOperator_1 {\n\tpublic static void main(String[] args) {\n\t\t/*\n\t\t * 整数运算：\n\t\t * 如果整数操作数里有long，则结果也为long\n\t\t * 没有long时，结果为int。即使操作数全为short、byte，结果也是int\n\t\t */\n\t\tbyte a = 1;\n\t\tint  b = 2;\n\t\tint  ans1 = a+b;\n\t  //byte ans2 = a+b;  报错\n\t\t\n\t\tlong c = 3;\n\t\tlong ans3 = b+c;\n\t  //int  ans4 = b+c;  报错\n\t\t\n\t\t/*\n\t\t * 浮点运算：\n\t\t * 如果操作数涉及浮点数,\n\t\t * 如果两个浮点数有一个为double，则结果为double\n\t\t * 只有两个浮点数数都为float，结果才为float\n\t\t */\n\t\tfloat d = 1;\n\t\tfloat e = 2;\n\t\tdouble f = 3;\n\t\tfloat ans5 = d+e;\n        double ans6 = d+e;\n        double ans7 = e+f;\n      //float ans8 = e+f;  报错\n        \n        /*\n\t\t * 整数与浮点运算：\n\t\t * 只要操作数涉及浮点数，则向浮点数兼容\n\t\t */\n        \n        /*\n                           * 取模运算\n                           *结果（余数）的符号与左操作数相同 \n         */\n        System.out.println(9%5);\n        System.out.println(-9%5);\n        System.out.println(9%-5);\n\t\t\n\t}\n}\n\n```\n","source":"_posts/Java学习之路(7).md","raw":"---\ntitle:  Java学习之路--算数运算符\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-22\n\n---\n```java\n/**\n * 测试算数运算符\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TsetOperator_1 {\n\tpublic static void main(String[] args) {\n\t\t/*\n\t\t * 整数运算：\n\t\t * 如果整数操作数里有long，则结果也为long\n\t\t * 没有long时，结果为int。即使操作数全为short、byte，结果也是int\n\t\t */\n\t\tbyte a = 1;\n\t\tint  b = 2;\n\t\tint  ans1 = a+b;\n\t  //byte ans2 = a+b;  报错\n\t\t\n\t\tlong c = 3;\n\t\tlong ans3 = b+c;\n\t  //int  ans4 = b+c;  报错\n\t\t\n\t\t/*\n\t\t * 浮点运算：\n\t\t * 如果操作数涉及浮点数,\n\t\t * 如果两个浮点数有一个为double，则结果为double\n\t\t * 只有两个浮点数数都为float，结果才为float\n\t\t */\n\t\tfloat d = 1;\n\t\tfloat e = 2;\n\t\tdouble f = 3;\n\t\tfloat ans5 = d+e;\n        double ans6 = d+e;\n        double ans7 = e+f;\n      //float ans8 = e+f;  报错\n        \n        /*\n\t\t * 整数与浮点运算：\n\t\t * 只要操作数涉及浮点数，则向浮点数兼容\n\t\t */\n        \n        /*\n                           * 取模运算\n                           *结果（余数）的符号与左操作数相同 \n         */\n        System.out.println(9%5);\n        System.out.println(-9%5);\n        System.out.println(9%-5);\n\t\t\n\t}\n}\n\n```\n","slug":"Java学习之路(7)","published":1,"updated":"2020-02-28T05:52:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7mo00327svw0b5zgpf4","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试算数运算符</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TsetOperator_1</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 整数运算：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 如果整数操作数里有long，则结果也为long</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 没有long时，结果为int。即使操作数全为short、byte，结果也是int</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>  b = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>  ans1 = a+b;</span><br><span class=\"line\">\t  <span class=\"comment\">//byte ans2 = a+b;  报错</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> ans3 = b+c;</span><br><span class=\"line\">\t  <span class=\"comment\">//int  ans4 = b+c;  报错</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 浮点运算：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 如果操作数涉及浮点数,</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 如果两个浮点数有一个为double，则结果为double</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 只有两个浮点数数都为float，结果才为float</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">float</span> d = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">float</span> e = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> f = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">float</span> ans5 = d+e;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> ans6 = d+e;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> ans7 = e+f;</span><br><span class=\"line\">      <span class=\"comment\">//float ans8 = e+f;  报错</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 整数与浮点运算：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 只要操作数涉及浮点数，则向浮点数兼容</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                           * 取模运算</span></span><br><span class=\"line\"><span class=\"comment\">                           *结果（余数）的符号与左操作数相同 </span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        System.out.println(<span class=\"number\">9</span>%<span class=\"number\">5</span>);</span><br><span class=\"line\">        System.out.println(-<span class=\"number\">9</span>%<span class=\"number\">5</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"number\">9</span>%-<span class=\"number\">5</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试算数运算符</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TsetOperator_1</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 整数运算：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 如果整数操作数里有long，则结果也为long</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 没有long时，结果为int。即使操作数全为short、byte，结果也是int</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>  b = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>  ans1 = a+b;</span><br><span class=\"line\">\t  <span class=\"comment\">//byte ans2 = a+b;  报错</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> ans3 = b+c;</span><br><span class=\"line\">\t  <span class=\"comment\">//int  ans4 = b+c;  报错</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 浮点运算：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 如果操作数涉及浮点数,</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 如果两个浮点数有一个为double，则结果为double</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 只有两个浮点数数都为float，结果才为float</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">float</span> d = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">float</span> e = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> f = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">float</span> ans5 = d+e;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> ans6 = d+e;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> ans7 = e+f;</span><br><span class=\"line\">      <span class=\"comment\">//float ans8 = e+f;  报错</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 整数与浮点运算：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 只要操作数涉及浮点数，则向浮点数兼容</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                           * 取模运算</span></span><br><span class=\"line\"><span class=\"comment\">                           *结果（余数）的符号与左操作数相同 </span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        System.out.println(<span class=\"number\">9</span>%<span class=\"number\">5</span>);</span><br><span class=\"line\">        System.out.println(-<span class=\"number\">9</span>%<span class=\"number\">5</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"number\">9</span>%-<span class=\"number\">5</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--比较运算符","date":"2020-01-21T16:00:00.000Z","_content":"```java\n/**\n * 测试比较运算符\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestOperator_2 {\n\tpublic static void main(String[] args) {\n\t  //比较运算符仅根据变量的数值大小来进行比较\n\t  //可参与比较运算的有：byte/short/int/long,float/double,char\n\t  //比较运算返回值为布尔值：true，false\n\t\tint   a = 1;\n\t\tfloat b = 1;\n\t\t\n\t\tif(a == b) {\n\t\t\tSystem.out.println(\"==\");\n\t\t}\n\t\tif(a != b) {\n\t\t\tSystem.out.println(\"!=\");\n\t\t}\n\t\tif(a < b) {\n\t\t\tSystem.out.println(\"<\");\n\t\t}\n\t\tif(a > b) {\n\t\t\tSystem.out.println(\">\");\n\t\t}\n\t}\n}\n\n\n```\n","source":"_posts/Java学习之路(8).md","raw":"---\ntitle:  Java学习之路--比较运算符\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-22\n\n---\n```java\n/**\n * 测试比较运算符\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestOperator_2 {\n\tpublic static void main(String[] args) {\n\t  //比较运算符仅根据变量的数值大小来进行比较\n\t  //可参与比较运算的有：byte/short/int/long,float/double,char\n\t  //比较运算返回值为布尔值：true，false\n\t\tint   a = 1;\n\t\tfloat b = 1;\n\t\t\n\t\tif(a == b) {\n\t\t\tSystem.out.println(\"==\");\n\t\t}\n\t\tif(a != b) {\n\t\t\tSystem.out.println(\"!=\");\n\t\t}\n\t\tif(a < b) {\n\t\t\tSystem.out.println(\"<\");\n\t\t}\n\t\tif(a > b) {\n\t\t\tSystem.out.println(\">\");\n\t\t}\n\t}\n}\n\n\n```\n","slug":"Java学习之路(8)","published":1,"updated":"2020-02-28T05:52:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7mq00357svwwsyy8wlx","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试比较运算符</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestOperator_2</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//比较运算符仅根据变量的数值大小来进行比较</span></span><br><span class=\"line\">\t  <span class=\"comment\">//可参与比较运算的有：byte/short/int/long,float/double,char</span></span><br><span class=\"line\">\t  <span class=\"comment\">//比较运算返回值为布尔值：true，false</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>   a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">float</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a == b) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"==\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a != b) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"!=\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a &lt; b) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"&lt;\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a &gt; b) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"&gt;\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试比较运算符</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestOperator_2</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//比较运算符仅根据变量的数值大小来进行比较</span></span><br><span class=\"line\">\t  <span class=\"comment\">//可参与比较运算的有：byte/short/int/long,float/double,char</span></span><br><span class=\"line\">\t  <span class=\"comment\">//比较运算返回值为布尔值：true，false</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>   a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">float</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a == b) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"==\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a != b) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"!=\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a &lt; b) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"&lt;\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a &gt; b) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"&gt;\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--逻辑运算符和位运算符","date":"2020-01-22T16:00:00.000Z","_content":"```java\n/**\n * 测试逻辑运算符和位运算符\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestOperator_3 {\n\tpublic static void main(String[] args) {\n\t\t/*\n\t\t * 与：&\t\t\t\t同真则真，有假则假\n\t\t * 或：|\t\t\t\t同假则假，有真则真\n\t\t * 非：！\t\t\t\t真假颠倒\n\t\t * 异或：^\t\t\t\t同假异真\n\t\t * 短路与：&&\t\t\t有假则假\n\t\t * 短路或：||\t\t\t\t有真则真\n\t\t * \n\t\t * 短路方式从左向右计算，若左边表达式计算结果足够判断则右边不进行表达式计算\n\t\t */\n\t\t\n\t\t//////////////////////////////////////////////////\n\t\t\n\t\t/*\n\t\t * 取反：~\n\t\t * 按位与：&\n\t\t * 按位或：|\n\t\t * 按位异或：^\n\t\t * 左移：<<\t\t\t\t左移一位相当于乘2\n\t\t * 右移：>>\t\t\t\t右移一位相当于除2取商\n\t\t */\n\t\t\n\t\tSystem.out.println(3<<2);          //相当于11左移两位变成1100，输出12\n\t\tSystem.out.println(3>>1);\t\t   //相当于11右移一位变成1，输出1\n\t}\n}\n\n```\n","source":"_posts/Java学习之路(9).md","raw":"---\ntitle:  Java学习之路--逻辑运算符和位运算符\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-23\n\n---\n```java\n/**\n * 测试逻辑运算符和位运算符\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestOperator_3 {\n\tpublic static void main(String[] args) {\n\t\t/*\n\t\t * 与：&\t\t\t\t同真则真，有假则假\n\t\t * 或：|\t\t\t\t同假则假，有真则真\n\t\t * 非：！\t\t\t\t真假颠倒\n\t\t * 异或：^\t\t\t\t同假异真\n\t\t * 短路与：&&\t\t\t有假则假\n\t\t * 短路或：||\t\t\t\t有真则真\n\t\t * \n\t\t * 短路方式从左向右计算，若左边表达式计算结果足够判断则右边不进行表达式计算\n\t\t */\n\t\t\n\t\t//////////////////////////////////////////////////\n\t\t\n\t\t/*\n\t\t * 取反：~\n\t\t * 按位与：&\n\t\t * 按位或：|\n\t\t * 按位异或：^\n\t\t * 左移：<<\t\t\t\t左移一位相当于乘2\n\t\t * 右移：>>\t\t\t\t右移一位相当于除2取商\n\t\t */\n\t\t\n\t\tSystem.out.println(3<<2);          //相当于11左移两位变成1100，输出12\n\t\tSystem.out.println(3>>1);\t\t   //相当于11右移一位变成1，输出1\n\t}\n}\n\n```\n","slug":"Java学习之路(9)","published":1,"updated":"2020-02-28T05:52:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7mr00387svwkv1n2nkv","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试逻辑运算符和位运算符</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestOperator_3</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 与：&amp;\t\t\t\t同真则真，有假则假</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 或：|\t\t\t\t同假则假，有真则真</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 非：！\t\t\t\t真假颠倒</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 异或：^\t\t\t\t同假异真</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 短路与：&amp;&amp;\t\t\t有假则假</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 短路或：||\t\t\t\t有真则真</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 短路方式从左向右计算，若左边表达式计算结果足够判断则右边不进行表达式计算</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//////////////////////////////////////////////////</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 取反：~</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 按位与：&amp;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 按位或：|</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 按位异或：^</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 左移：&lt;&lt;\t\t\t\t左移一位相当于乘2</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 右移：&gt;&gt;\t\t\t\t右移一位相当于除2取商</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"number\">3</span>&lt;&lt;<span class=\"number\">2</span>);          <span class=\"comment\">//相当于11左移两位变成1100，输出12</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"number\">3</span>&gt;&gt;<span class=\"number\">1</span>);\t\t   <span class=\"comment\">//相当于11右移一位变成1，输出1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试逻辑运算符和位运算符</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestOperator_3</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 与：&amp;\t\t\t\t同真则真，有假则假</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 或：|\t\t\t\t同假则假，有真则真</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 非：！\t\t\t\t真假颠倒</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 异或：^\t\t\t\t同假异真</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 短路与：&amp;&amp;\t\t\t有假则假</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 短路或：||\t\t\t\t有真则真</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 短路方式从左向右计算，若左边表达式计算结果足够判断则右边不进行表达式计算</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//////////////////////////////////////////////////</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 取反：~</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 按位与：&amp;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 按位或：|</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 按位异或：^</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 左移：&lt;&lt;\t\t\t\t左移一位相当于乘2</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 右移：&gt;&gt;\t\t\t\t右移一位相当于除2取商</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"number\">3</span>&lt;&lt;<span class=\"number\">2</span>);          <span class=\"comment\">//相当于11左移两位变成1100，输出12</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"number\">3</span>&gt;&gt;<span class=\"number\">1</span>);\t\t   <span class=\"comment\">//相当于11右移一位变成1，输出1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Maven中的dependencies和dependencyManagement标签","date":"2022-09-05T16:00:00.000Z","_content":"\n本文主要记录学习SSM过程中对于Maven的pom.xml文件内**dependencies**和**dependencyManagement**两个标签的区别和理解。\n\n闲言少叙，直奔主题👇\n\n## 情景一：\n\n```xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.example</groupId>\n    <artifactId>web-demo</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>war</packaging>\n\n    <dependencies>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.25</version>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>mysql</groupId>\n                <artifactId>mysql-connector-java</artifactId>\n                <version>5.1.32</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n</project>\n\n```\n上述pom文件中同时在**dependencies**和**dependencyManagement**中引入了mysql依赖，但是版本不同。\n<center>这里我们查看项目的外部库👇\n\n![](https://img.gejiba.com/images/07d8c055577d9f4a3378869033e9df15.png)\n\n可见同时作用时版本以**dependencies**中指定的为准\n</center>\n\n## 情景二：\n\n```xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.example</groupId>\n    <artifactId>web-demo</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>war</packaging>\n\n    <dependencies>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <!-- <version>8.0.25</version> -->\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>mysql</groupId>\n                <artifactId>mysql-connector-java</artifactId>\n                <version>5.1.32</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n</project>\n\n```\n此处我们将**dependencies**中的**version**标签进行注释，即不指定版本信息再进行观察。\n<center>这里我们查看项目的外部库👇\n\n![](https://img.gejiba.com/images/44c0e5bc68a6c84b0ef1f0d2a5f13fe2.png)\n\n可见不在**dependencies**中指定版本时，外部库版本以**dependencyManagement**中定义的版本为准\n</center>\n\n## 情景三：\n\n```xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.example</groupId>\n    <artifactId>web-demo</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>war</packaging>\n\n    <!-- <dependencies>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.25</version>\n        </dependency>\n    </dependencies> -->\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>mysql</groupId>\n                <artifactId>mysql-connector-java</artifactId>\n                <version>5.1.32</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n</project>\n\n```\n此处我们将**dependencies**标签的全部内容进行注释。\n<center>这里我们查看项目的外部库👇\n\n![](https://img.gejiba.com/images/1c6fd77878b719965c31b7dd0b6fc9bd.png)\n\n可见在**dependencyManagement**中仅仅进行了对外部库的声明而非引用\n</center>\n\n## 总结：\n\n- **dependencyManagement**其实只是一个管理jar的作用的声明标签,是管理jar的版本的,其他他的什么作用都没有,只是定义找到该jar的三维坐标,并不是真正的去执行下载的jar的功能\n- 在**dependencies**中的依赖中如果没有声明jar的版本,就到**dependenciesManagement**中去找,找到就使用,没有就报错\n- 在**dependencies**中声明jar的版本,则使用该版本,不管在**dependenciesManagement**中有没有声明jar的version,都以该jar的版本为主","source":"_posts/Maven中dependence和dependenceManagement.md","raw":"---\ntitle:  Maven中的dependencies和dependencyManagement标签\ntags: [编程,学习,Java,Maven]\ncategories: [Maven]\ndate: 2022-9-6\n\n---\n\n本文主要记录学习SSM过程中对于Maven的pom.xml文件内**dependencies**和**dependencyManagement**两个标签的区别和理解。\n\n闲言少叙，直奔主题👇\n\n## 情景一：\n\n```xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.example</groupId>\n    <artifactId>web-demo</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>war</packaging>\n\n    <dependencies>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.25</version>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>mysql</groupId>\n                <artifactId>mysql-connector-java</artifactId>\n                <version>5.1.32</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n</project>\n\n```\n上述pom文件中同时在**dependencies**和**dependencyManagement**中引入了mysql依赖，但是版本不同。\n<center>这里我们查看项目的外部库👇\n\n![](https://img.gejiba.com/images/07d8c055577d9f4a3378869033e9df15.png)\n\n可见同时作用时版本以**dependencies**中指定的为准\n</center>\n\n## 情景二：\n\n```xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.example</groupId>\n    <artifactId>web-demo</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>war</packaging>\n\n    <dependencies>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <!-- <version>8.0.25</version> -->\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>mysql</groupId>\n                <artifactId>mysql-connector-java</artifactId>\n                <version>5.1.32</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n</project>\n\n```\n此处我们将**dependencies**中的**version**标签进行注释，即不指定版本信息再进行观察。\n<center>这里我们查看项目的外部库👇\n\n![](https://img.gejiba.com/images/44c0e5bc68a6c84b0ef1f0d2a5f13fe2.png)\n\n可见不在**dependencies**中指定版本时，外部库版本以**dependencyManagement**中定义的版本为准\n</center>\n\n## 情景三：\n\n```xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.example</groupId>\n    <artifactId>web-demo</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>war</packaging>\n\n    <!-- <dependencies>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.25</version>\n        </dependency>\n    </dependencies> -->\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>mysql</groupId>\n                <artifactId>mysql-connector-java</artifactId>\n                <version>5.1.32</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n</project>\n\n```\n此处我们将**dependencies**标签的全部内容进行注释。\n<center>这里我们查看项目的外部库👇\n\n![](https://img.gejiba.com/images/1c6fd77878b719965c31b7dd0b6fc9bd.png)\n\n可见在**dependencyManagement**中仅仅进行了对外部库的声明而非引用\n</center>\n\n## 总结：\n\n- **dependencyManagement**其实只是一个管理jar的作用的声明标签,是管理jar的版本的,其他他的什么作用都没有,只是定义找到该jar的三维坐标,并不是真正的去执行下载的jar的功能\n- 在**dependencies**中的依赖中如果没有声明jar的版本,就到**dependenciesManagement**中去找,找到就使用,没有就报错\n- 在**dependencies**中声明jar的版本,则使用该版本,不管在**dependenciesManagement**中有没有声明jar的version,都以该jar的版本为主","slug":"Maven中dependence和dependenceManagement","published":1,"updated":"2022-09-07T05:03:35.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7ms003b7svwmb4qhd2o","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p>本文主要记录学习SSM过程中对于Maven的pom.xml文件内<strong>dependencies</strong>和<strong>dependencyManagement</strong>两个标签的区别和理解。</p>\n<p>闲言少叙，直奔主题👇</p>\n<h2 id=\"情景一：\"><a href=\"#情景一：\" class=\"headerlink\" title=\"情景一：\"></a>情景一：</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.example<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>web-demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.25<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.32<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上述pom文件中同时在<strong>dependencies</strong>和<strong>dependencyManagement</strong>中引入了mysql依赖，但是版本不同。</p>\n<center>这里我们查看项目的外部库👇\n\n<p><img src=\"https://img.gejiba.com/images/07d8c055577d9f4a3378869033e9df15.png\" alt></p>\n<p>可见同时作用时版本以<strong>dependencies</strong>中指定的为准</p>\n</center>\n\n<h2 id=\"情景二：\"><a href=\"#情景二：\" class=\"headerlink\" title=\"情景二：\"></a>情景二：</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.example<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>web-demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- &lt;version&gt;8.0.25&lt;/version&gt; --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.32<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>此处我们将<strong>dependencies</strong>中的<strong>version</strong>标签进行注释，即不指定版本信息再进行观察。</p>\n<center>这里我们查看项目的外部库👇\n\n<p><img src=\"https://img.gejiba.com/images/44c0e5bc68a6c84b0ef1f0d2a5f13fe2.png\" alt></p>\n<p>可见不在<strong>dependencies</strong>中指定版本时，外部库版本以<strong>dependencyManagement</strong>中定义的版本为准</p>\n</center>\n\n<h2 id=\"情景三：\"><a href=\"#情景三：\" class=\"headerlink\" title=\"情景三：\"></a>情景三：</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.example<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>web-demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;dependencies&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;dependency&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;version&gt;8.0.25&lt;/version&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/dependency&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/dependencies&gt; --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.32<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>此处我们将<strong>dependencies</strong>标签的全部内容进行注释。</p>\n<center>这里我们查看项目的外部库👇\n\n<p><img src=\"https://img.gejiba.com/images/1c6fd77878b719965c31b7dd0b6fc9bd.png\" alt></p>\n<p>可见在<strong>dependencyManagement</strong>中仅仅进行了对外部库的声明而非引用</p>\n</center>\n\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><ul>\n<li><strong>dependencyManagement</strong>其实只是一个管理jar的作用的声明标签,是管理jar的版本的,其他他的什么作用都没有,只是定义找到该jar的三维坐标,并不是真正的去执行下载的jar的功能</li>\n<li>在<strong>dependencies</strong>中的依赖中如果没有声明jar的版本,就到<strong>dependenciesManagement</strong>中去找,找到就使用,没有就报错</li>\n<li>在<strong>dependencies</strong>中声明jar的版本,则使用该版本,不管在<strong>dependenciesManagement</strong>中有没有声明jar的version,都以该jar的版本为主</li>\n</ul>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<p>本文主要记录学习SSM过程中对于Maven的pom.xml文件内<strong>dependencies</strong>和<strong>dependencyManagement</strong>两个标签的区别和理解。</p>\n<p>闲言少叙，直奔主题👇</p>\n<h2 id=\"情景一：\"><a href=\"#情景一：\" class=\"headerlink\" title=\"情景一：\"></a>情景一：</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.example<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>web-demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.25<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.32<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上述pom文件中同时在<strong>dependencies</strong>和<strong>dependencyManagement</strong>中引入了mysql依赖，但是版本不同。</p>\n<center>这里我们查看项目的外部库👇\n\n<p><img src=\"https://img.gejiba.com/images/07d8c055577d9f4a3378869033e9df15.png\" alt></p>\n<p>可见同时作用时版本以<strong>dependencies</strong>中指定的为准</p>\n</center>\n\n<h2 id=\"情景二：\"><a href=\"#情景二：\" class=\"headerlink\" title=\"情景二：\"></a>情景二：</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.example<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>web-demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- &lt;version&gt;8.0.25&lt;/version&gt; --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.32<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>此处我们将<strong>dependencies</strong>中的<strong>version</strong>标签进行注释，即不指定版本信息再进行观察。</p>\n<center>这里我们查看项目的外部库👇\n\n<p><img src=\"https://img.gejiba.com/images/44c0e5bc68a6c84b0ef1f0d2a5f13fe2.png\" alt></p>\n<p>可见不在<strong>dependencies</strong>中指定版本时，外部库版本以<strong>dependencyManagement</strong>中定义的版本为准</p>\n</center>\n\n<h2 id=\"情景三：\"><a href=\"#情景三：\" class=\"headerlink\" title=\"情景三：\"></a>情景三：</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.example<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>web-demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;dependencies&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;dependency&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;version&gt;8.0.25&lt;/version&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/dependency&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/dependencies&gt; --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.32<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>此处我们将<strong>dependencies</strong>标签的全部内容进行注释。</p>\n<center>这里我们查看项目的外部库👇\n\n<p><img src=\"https://img.gejiba.com/images/1c6fd77878b719965c31b7dd0b6fc9bd.png\" alt></p>\n<p>可见在<strong>dependencyManagement</strong>中仅仅进行了对外部库的声明而非引用</p>\n</center>\n\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><ul>\n<li><strong>dependencyManagement</strong>其实只是一个管理jar的作用的声明标签,是管理jar的版本的,其他他的什么作用都没有,只是定义找到该jar的三维坐标,并不是真正的去执行下载的jar的功能</li>\n<li>在<strong>dependencies</strong>中的依赖中如果没有声明jar的版本,就到<strong>dependenciesManagement</strong>中去找,找到就使用,没有就报错</li>\n<li>在<strong>dependencies</strong>中声明jar的版本,则使用该版本,不管在<strong>dependenciesManagement</strong>中有没有声明jar的version,都以该jar的版本为主</li>\n</ul>\n"},{"title":"Java学习之路--java.lang.comparable接口实战","date":"2020-03-15T16:00:00.000Z","_content":"# 代码展示\n```java\n/**\n * @author 葛宇\n * 实现java.lang.comparable接口并测试Array.sort()\n */\nclass Employee implements java.lang.Comparable<Employee>{\n\n\tprivate int id;\n\tprivate int salary;\n\tprivate String name;\n\t\n\tpublic Employee(int id,int salary,String name){\n\t\tthis.id = id;\n\t\tthis.salary = salary;\n\t\tthis.name = name;\n\t}\n\tpublic int getId() {\n\t\treturn id;\n\t}\n\tpublic int getSalary() {\n\t\treturn salary;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\t@Override\n\tpublic int compareTo(Employee o) {\n\t\tif(name.compareTo(o.name)!=0) {\n\t\t\treturn name.compareTo(o.name);\n\t\t}else {\n\t\tif (salary<o.salary) \n\t\t\treturn - 1 ;  \n\t\tif (salary>o.salary)  \n\t\t\treturn 1 ;  \n\t\treturn 0 ;  \t\t\t      \n\t\t}\n\t}\n}\n\nclass TestClass{\n\tpublic static void main(String[] args) {\n\t\t Employee[] staff =  new Employee[ 4 ];  \n\t        staff[ 0 ] =  new Employee(001,5000,\"harry\");  \n\t        staff[ 1 ] =  new Employee(002,3000,\"carl \");  \n\t        staff[ 2 ] =  new Employee(003,4000,\"tony \");  \n\t        staff[ 3 ] =  new Employee(004,6000,\"carl \");  \n\t\t\n\t    java.util.Arrays.sort(staff);\n\t\tfor(Employee e: staff)  \n        System.out.println( \"id=\" +e.getId()+ \"  name=\" +e.getName()+  \"  salary=\" +e.getSalary());  \n\t}  \n}\n```\n**输出结果：**\n![java](https://s3.bmp.ovh/imgs/2022/09/05/8939f59ba6ee01f6.png \"运行结果\")\n\n**上述代码是某次Java作业，题目描述如下：**\n> 编写员工Employee类，包含id、姓名、工资salary等属性。令Employee类实现java.lang.comparable接口，并实现compareTo（）方法，制定比较规则。在测试类中创建几个Employee对象，利用java.util.Array类中的方法对其进行排序并打印输出结果。PS:关于比较的规则，建议分别按照name和salary进行升序排列。\n\n**题目出自接口技术一章，实则难点不在接口技术，Java新手在阅读上述代码往往会感到困惑，搞不懂为何对compareTo的自定义实现会影响sort方法的效果？**\n\n# Array.Sort()\n>即使是小白，在阅读完代码后，也应该会产生这样的猜测：line48的java.util.Arrays.sort(staff);的sort方法内会不会用到了compareTo方法了呢？\n\n很好的猜想，让我们进入sort（）内部看看：\n![java](https://s3.bmp.ovh/imgs/2022/09/05/e82a45de2e7c9fd7.png \"内部实现\")\n进入sort（）内部实现后根据关键信息我们又能很轻易的追溯到mergeSort方法，那就继续进入mergeSort（）的内部实现：\n![java](https://s3.bmp.ovh/imgs/2022/09/05/6e1c7b20b16b9dd9.png \"内部实现\")\n**如果你看到这里：那么，恭喜你花生🥜，你发现的盲点！**\n很显然，mergeSort内部的排序依赖了参与排序的对象的两两比较（dest[]是对象数组）for循环最里层做的事情是将对象转换为Compareble类型并调用其compareTo()方法，所以需要被比较的对象实现Comparable接口。感兴趣的话可以搜一下模板方法设计模式，这算其中一个典型的应用，个人认为并不属于纯接口技术的编程题。\n# Comparable接口compareTo方法的总结\n关于升序还是降序的问题，总结如下：\n* 正序\n\n```java\n    @Override\n    public int compareTo(Test o) {\n        return this.i - o.i;\n```\n* 逆序\n\n```java\n    @Override\n    public int compareTo(Test o) {\n        return  o.i-this.i ;\n\n```\n","source":"_posts/Java学习之路(37).md","raw":"---\ntitle:  Java学习之路--java.lang.comparable接口实战\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-3-16\n\n---\n# 代码展示\n```java\n/**\n * @author 葛宇\n * 实现java.lang.comparable接口并测试Array.sort()\n */\nclass Employee implements java.lang.Comparable<Employee>{\n\n\tprivate int id;\n\tprivate int salary;\n\tprivate String name;\n\t\n\tpublic Employee(int id,int salary,String name){\n\t\tthis.id = id;\n\t\tthis.salary = salary;\n\t\tthis.name = name;\n\t}\n\tpublic int getId() {\n\t\treturn id;\n\t}\n\tpublic int getSalary() {\n\t\treturn salary;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\t@Override\n\tpublic int compareTo(Employee o) {\n\t\tif(name.compareTo(o.name)!=0) {\n\t\t\treturn name.compareTo(o.name);\n\t\t}else {\n\t\tif (salary<o.salary) \n\t\t\treturn - 1 ;  \n\t\tif (salary>o.salary)  \n\t\t\treturn 1 ;  \n\t\treturn 0 ;  \t\t\t      \n\t\t}\n\t}\n}\n\nclass TestClass{\n\tpublic static void main(String[] args) {\n\t\t Employee[] staff =  new Employee[ 4 ];  \n\t        staff[ 0 ] =  new Employee(001,5000,\"harry\");  \n\t        staff[ 1 ] =  new Employee(002,3000,\"carl \");  \n\t        staff[ 2 ] =  new Employee(003,4000,\"tony \");  \n\t        staff[ 3 ] =  new Employee(004,6000,\"carl \");  \n\t\t\n\t    java.util.Arrays.sort(staff);\n\t\tfor(Employee e: staff)  \n        System.out.println( \"id=\" +e.getId()+ \"  name=\" +e.getName()+  \"  salary=\" +e.getSalary());  \n\t}  \n}\n```\n**输出结果：**\n![java](https://s3.bmp.ovh/imgs/2022/09/05/8939f59ba6ee01f6.png \"运行结果\")\n\n**上述代码是某次Java作业，题目描述如下：**\n> 编写员工Employee类，包含id、姓名、工资salary等属性。令Employee类实现java.lang.comparable接口，并实现compareTo（）方法，制定比较规则。在测试类中创建几个Employee对象，利用java.util.Array类中的方法对其进行排序并打印输出结果。PS:关于比较的规则，建议分别按照name和salary进行升序排列。\n\n**题目出自接口技术一章，实则难点不在接口技术，Java新手在阅读上述代码往往会感到困惑，搞不懂为何对compareTo的自定义实现会影响sort方法的效果？**\n\n# Array.Sort()\n>即使是小白，在阅读完代码后，也应该会产生这样的猜测：line48的java.util.Arrays.sort(staff);的sort方法内会不会用到了compareTo方法了呢？\n\n很好的猜想，让我们进入sort（）内部看看：\n![java](https://s3.bmp.ovh/imgs/2022/09/05/e82a45de2e7c9fd7.png \"内部实现\")\n进入sort（）内部实现后根据关键信息我们又能很轻易的追溯到mergeSort方法，那就继续进入mergeSort（）的内部实现：\n![java](https://s3.bmp.ovh/imgs/2022/09/05/6e1c7b20b16b9dd9.png \"内部实现\")\n**如果你看到这里：那么，恭喜你花生🥜，你发现的盲点！**\n很显然，mergeSort内部的排序依赖了参与排序的对象的两两比较（dest[]是对象数组）for循环最里层做的事情是将对象转换为Compareble类型并调用其compareTo()方法，所以需要被比较的对象实现Comparable接口。感兴趣的话可以搜一下模板方法设计模式，这算其中一个典型的应用，个人认为并不属于纯接口技术的编程题。\n# Comparable接口compareTo方法的总结\n关于升序还是降序的问题，总结如下：\n* 正序\n\n```java\n    @Override\n    public int compareTo(Test o) {\n        return this.i - o.i;\n```\n* 逆序\n\n```java\n    @Override\n    public int compareTo(Test o) {\n        return  o.i-this.i ;\n\n```\n","slug":"Java学习之路(37)","published":1,"updated":"2022-09-05T05:20:55.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb7mu003e7svwjki7vkjh","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"代码展示\"><a href=\"#代码展示\" class=\"headerlink\" title=\"代码展示\"></a>代码展示</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现java.lang.comparable接口并测试Array.sort()</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">lang</span>.<span class=\"title\">Comparable</span>&lt;<span class=\"title\">Employee</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> salary;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Employee</span><span class=\"params\">(<span class=\"keyword\">int</span> id,<span class=\"keyword\">int</span> salary,String name)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.salary = salary;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSalary</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> salary;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Employee o)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(name.compareTo(o.name)!=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> name.compareTo(o.name);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (salary&lt;o.salary) </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> - <span class=\"number\">1</span> ;  </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (salary&gt;o.salary)  </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span> ;  </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span> ;  \t\t\t      </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClass</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t Employee[] staff =  <span class=\"keyword\">new</span> Employee[ <span class=\"number\">4</span> ];  </span><br><span class=\"line\">\t        staff[ <span class=\"number\">0</span> ] =  <span class=\"keyword\">new</span> Employee(<span class=\"number\">001</span>,<span class=\"number\">5000</span>,<span class=\"string\">\"harry\"</span>);  </span><br><span class=\"line\">\t        staff[ <span class=\"number\">1</span> ] =  <span class=\"keyword\">new</span> Employee(<span class=\"number\">002</span>,<span class=\"number\">3000</span>,<span class=\"string\">\"carl \"</span>);  </span><br><span class=\"line\">\t        staff[ <span class=\"number\">2</span> ] =  <span class=\"keyword\">new</span> Employee(<span class=\"number\">003</span>,<span class=\"number\">4000</span>,<span class=\"string\">\"tony \"</span>);  </span><br><span class=\"line\">\t        staff[ <span class=\"number\">3</span> ] =  <span class=\"keyword\">new</span> Employee(<span class=\"number\">004</span>,<span class=\"number\">6000</span>,<span class=\"string\">\"carl \"</span>);  </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t    java.util.Arrays.sort(staff);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Employee e: staff)  </span><br><span class=\"line\">        System.out.println( <span class=\"string\">\"id=\"</span> +e.getId()+ <span class=\"string\">\"  name=\"</span> +e.getName()+  <span class=\"string\">\"  salary=\"</span> +e.getSalary());  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出结果：</strong><br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/8939f59ba6ee01f6.png\" alt=\"java\" title=\"运行结果\"></p>\n<p><strong>上述代码是某次Java作业，题目描述如下：</strong></p>\n<blockquote>\n<p>编写员工Employee类，包含id、姓名、工资salary等属性。令Employee类实现java.lang.comparable接口，并实现compareTo（）方法，制定比较规则。在测试类中创建几个Employee对象，利用java.util.Array类中的方法对其进行排序并打印输出结果。PS:关于比较的规则，建议分别按照name和salary进行升序排列。</p>\n</blockquote>\n<p><strong>题目出自接口技术一章，实则难点不在接口技术，Java新手在阅读上述代码往往会感到困惑，搞不懂为何对compareTo的自定义实现会影响sort方法的效果？</strong></p>\n<h1 id=\"Array-Sort\"><a href=\"#Array-Sort\" class=\"headerlink\" title=\"Array.Sort()\"></a>Array.Sort()</h1><blockquote>\n<p>即使是小白，在阅读完代码后，也应该会产生这样的猜测：line48的java.util.Arrays.sort(staff);的sort方法内会不会用到了compareTo方法了呢？</p>\n</blockquote>\n<p>很好的猜想，让我们进入sort（）内部看看：<br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/e82a45de2e7c9fd7.png\" alt=\"java\" title=\"内部实现\"><br>进入sort（）内部实现后根据关键信息我们又能很轻易的追溯到mergeSort方法，那就继续进入mergeSort（）的内部实现：<br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/6e1c7b20b16b9dd9.png\" alt=\"java\" title=\"内部实现\"><br><strong>如果你看到这里：那么，恭喜你花生🥜，你发现的盲点！</strong><br>很显然，mergeSort内部的排序依赖了参与排序的对象的两两比较（dest[]是对象数组）for循环最里层做的事情是将对象转换为Compareble类型并调用其compareTo()方法，所以需要被比较的对象实现Comparable接口。感兴趣的话可以搜一下模板方法设计模式，这算其中一个典型的应用，个人认为并不属于纯接口技术的编程题。</p>\n<h1 id=\"Comparable接口compareTo方法的总结\"><a href=\"#Comparable接口compareTo方法的总结\" class=\"headerlink\" title=\"Comparable接口compareTo方法的总结\"></a>Comparable接口compareTo方法的总结</h1><p>关于升序还是降序的问题，总结如下：</p>\n<ul>\n<li>正序</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Test o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.i - o.i;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>逆序</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Test o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  o.i-<span class=\"keyword\">this</span>.i ;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"代码展示\"><a href=\"#代码展示\" class=\"headerlink\" title=\"代码展示\"></a>代码展示</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现java.lang.comparable接口并测试Array.sort()</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">lang</span>.<span class=\"title\">Comparable</span>&lt;<span class=\"title\">Employee</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> salary;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Employee</span><span class=\"params\">(<span class=\"keyword\">int</span> id,<span class=\"keyword\">int</span> salary,String name)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.salary = salary;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSalary</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> salary;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Employee o)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(name.compareTo(o.name)!=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> name.compareTo(o.name);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (salary&lt;o.salary) </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> - <span class=\"number\">1</span> ;  </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (salary&gt;o.salary)  </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span> ;  </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span> ;  \t\t\t      </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClass</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t Employee[] staff =  <span class=\"keyword\">new</span> Employee[ <span class=\"number\">4</span> ];  </span><br><span class=\"line\">\t        staff[ <span class=\"number\">0</span> ] =  <span class=\"keyword\">new</span> Employee(<span class=\"number\">001</span>,<span class=\"number\">5000</span>,<span class=\"string\">\"harry\"</span>);  </span><br><span class=\"line\">\t        staff[ <span class=\"number\">1</span> ] =  <span class=\"keyword\">new</span> Employee(<span class=\"number\">002</span>,<span class=\"number\">3000</span>,<span class=\"string\">\"carl \"</span>);  </span><br><span class=\"line\">\t        staff[ <span class=\"number\">2</span> ] =  <span class=\"keyword\">new</span> Employee(<span class=\"number\">003</span>,<span class=\"number\">4000</span>,<span class=\"string\">\"tony \"</span>);  </span><br><span class=\"line\">\t        staff[ <span class=\"number\">3</span> ] =  <span class=\"keyword\">new</span> Employee(<span class=\"number\">004</span>,<span class=\"number\">6000</span>,<span class=\"string\">\"carl \"</span>);  </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t    java.util.Arrays.sort(staff);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Employee e: staff)  </span><br><span class=\"line\">        System.out.println( <span class=\"string\">\"id=\"</span> +e.getId()+ <span class=\"string\">\"  name=\"</span> +e.getName()+  <span class=\"string\">\"  salary=\"</span> +e.getSalary());  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出结果：</strong><br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/8939f59ba6ee01f6.png\" alt=\"java\" title=\"运行结果\"></p>\n<p><strong>上述代码是某次Java作业，题目描述如下：</strong></p>\n<blockquote>\n<p>编写员工Employee类，包含id、姓名、工资salary等属性。令Employee类实现java.lang.comparable接口，并实现compareTo（）方法，制定比较规则。在测试类中创建几个Employee对象，利用java.util.Array类中的方法对其进行排序并打印输出结果。PS:关于比较的规则，建议分别按照name和salary进行升序排列。</p>\n</blockquote>\n<p><strong>题目出自接口技术一章，实则难点不在接口技术，Java新手在阅读上述代码往往会感到困惑，搞不懂为何对compareTo的自定义实现会影响sort方法的效果？</strong></p>\n<h1 id=\"Array-Sort\"><a href=\"#Array-Sort\" class=\"headerlink\" title=\"Array.Sort()\"></a>Array.Sort()</h1><blockquote>\n<p>即使是小白，在阅读完代码后，也应该会产生这样的猜测：line48的java.util.Arrays.sort(staff);的sort方法内会不会用到了compareTo方法了呢？</p>\n</blockquote>\n<p>很好的猜想，让我们进入sort（）内部看看：<br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/e82a45de2e7c9fd7.png\" alt=\"java\" title=\"内部实现\"><br>进入sort（）内部实现后根据关键信息我们又能很轻易的追溯到mergeSort方法，那就继续进入mergeSort（）的内部实现：<br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/6e1c7b20b16b9dd9.png\" alt=\"java\" title=\"内部实现\"><br><strong>如果你看到这里：那么，恭喜你花生🥜，你发现的盲点！</strong><br>很显然，mergeSort内部的排序依赖了参与排序的对象的两两比较（dest[]是对象数组）for循环最里层做的事情是将对象转换为Compareble类型并调用其compareTo()方法，所以需要被比较的对象实现Comparable接口。感兴趣的话可以搜一下模板方法设计模式，这算其中一个典型的应用，个人认为并不属于纯接口技术的编程题。</p>\n<h1 id=\"Comparable接口compareTo方法的总结\"><a href=\"#Comparable接口compareTo方法的总结\" class=\"headerlink\" title=\"Comparable接口compareTo方法的总结\"></a>Comparable接口compareTo方法的总结</h1><p>关于升序还是降序的问题，总结如下：</p>\n<ul>\n<li>正序</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Test o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.i - o.i;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>逆序</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Test o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  o.i-<span class=\"keyword\">this</span>.i ;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Person Re-identification数据集描述——Market-1501","date":"2019-07-30T16:00:00.000Z","_content":"\n![](http://changingfond.oss-cn-hangzhou.aliyuncs.com/18-7-12/87140649.jpg)\n# 数据集简介\n**Market-1501** 数据集在清华大学校园中采集，夏天拍摄，在 2015 年构建并公开。它包括由6个摄像头（其中5个高清摄像头和1个低清摄像头）拍摄到的 1501 个行人、32668 个检测到的行人矩形框。每个行人至少由2个摄像头捕获到，并且在一个摄像头中可能具有多张图像。训练集有 751 人，包含 12,936 张图像，平均每个人有 17.2 张训练数据；测试集有 750 人，包含 19,732 张图像，平均每个人有 26.3 张测试数据。3368 张查询图像的行人检测矩形框是人工绘制的，而 gallery 中的行人检测矩形框则是使用DPM检测器检测得到的。该数据集提供的固定数量的训练集和测试集均可以在single-shot或multi-shot测试设置下使用。\n## 目录结构\nMarket-1501\n　　├── bounding_box_test\n　　　　　　　├── 0000_c1s1_000151_01.jpg\n　　　　　　　├── 0000_c1s1_000376_03.jpg\n　　　　　　　├── 0000_c1s1_001051_02.jpg\n　　├── bounding_box_train\n　　　　　　　├── 0002_c1s1_000451_03.jpg\n　　　　　　　├── 0002_c1s1_000551_01.jpg\n　　　　　　　├── 0002_c1s1_000801_01.jpg\n　　├── gt_bbox\n　　　　　　　├── 0001_c1s1_001051_00.jpg\n　　　　　　　├── 0001_c1s1_009376_00.jpg\n　　　　　　　├── 0001_c2s1_001976_00.jpg\n　　├── gt_query\n　　　　　　　├── 0001_c1s1_001051_00_good.mat\n　　　　　　　├── 0001_c1s1_001051_00_junk.mat\n　　├── query\n　　　　　　　├── 0001_c1s1_001051_00.jpg\n　　　　　　　├── 0001_c2s1_000301_00.jpg\n　　　　　　　├── 0001_c3s1_000551_00.jpg\n　　└── readme.txt\n##   目录介绍\n - **“bounding_box_test”**——用于测试集的 750 人，包含 19,732 张图像，前缀为 0000 表示在提取这 750 人的过程中DPM检测错的图（可能与query是同一个人），-1 表示检测出来其他人的图（不在这 750 人中）\n\n- **“bounding_box_train”**——用于训练集的 751 人，包含 12,936 张图像\n-  **“query”**——为 750 人在每个摄像头中随机选择一张图像作为query，因此一个人的query最多有 6 个，共有 3,368 张图像\n\n- **“gt_query”**——matlab格式，用于判断一个query的哪些图片是好的匹配（同一个人不同摄像头的图像）和不好的匹配（同一个人同一个摄像头的图像或非同一个人的图像）\n-  **“gt_bbox”**——手工标注的bounding box，用于判断DPM检测的bounding box是不是一个好的box\n\n## 命名规则\n**以 0001_c1s1_000151_01.jpg 为例**\n-  0001 表示每个人的标签编号，从0001到1501；\n-  c1 表示第一个摄像头(camera1)，共有6个摄像头；\n-  s1 表示第一个录像片段(sequece1)，每个摄像机都有数个录像段；\n-  000151 表示 c1s1 的第000151帧图片，视频帧率25fps；\n-  01 表示 c1s1_001051 这一帧上的第1个检测框，由于采用DPM检测器，对于每一帧上的行人可能会框出好几个bbox。00 表示手工标注框\n\n# 参考文献\n- Zheng, Liang, et al. “Scalable Person Re-identification: A Benchmark.” IEEE International Conference on Computer Vision IEEE Computer Society, 2015:1116-1124.","source":"_posts/Person Re-identification数据集描述——Market-1501.md","raw":"---\ntitle:  Person Re-identification数据集描述——Market-1501\ntags: [行人重识别,数据集]\ncategories: [数据集]\ndate: 2019-7-31\n\n---\n\n![](http://changingfond.oss-cn-hangzhou.aliyuncs.com/18-7-12/87140649.jpg)\n# 数据集简介\n**Market-1501** 数据集在清华大学校园中采集，夏天拍摄，在 2015 年构建并公开。它包括由6个摄像头（其中5个高清摄像头和1个低清摄像头）拍摄到的 1501 个行人、32668 个检测到的行人矩形框。每个行人至少由2个摄像头捕获到，并且在一个摄像头中可能具有多张图像。训练集有 751 人，包含 12,936 张图像，平均每个人有 17.2 张训练数据；测试集有 750 人，包含 19,732 张图像，平均每个人有 26.3 张测试数据。3368 张查询图像的行人检测矩形框是人工绘制的，而 gallery 中的行人检测矩形框则是使用DPM检测器检测得到的。该数据集提供的固定数量的训练集和测试集均可以在single-shot或multi-shot测试设置下使用。\n## 目录结构\nMarket-1501\n　　├── bounding_box_test\n　　　　　　　├── 0000_c1s1_000151_01.jpg\n　　　　　　　├── 0000_c1s1_000376_03.jpg\n　　　　　　　├── 0000_c1s1_001051_02.jpg\n　　├── bounding_box_train\n　　　　　　　├── 0002_c1s1_000451_03.jpg\n　　　　　　　├── 0002_c1s1_000551_01.jpg\n　　　　　　　├── 0002_c1s1_000801_01.jpg\n　　├── gt_bbox\n　　　　　　　├── 0001_c1s1_001051_00.jpg\n　　　　　　　├── 0001_c1s1_009376_00.jpg\n　　　　　　　├── 0001_c2s1_001976_00.jpg\n　　├── gt_query\n　　　　　　　├── 0001_c1s1_001051_00_good.mat\n　　　　　　　├── 0001_c1s1_001051_00_junk.mat\n　　├── query\n　　　　　　　├── 0001_c1s1_001051_00.jpg\n　　　　　　　├── 0001_c2s1_000301_00.jpg\n　　　　　　　├── 0001_c3s1_000551_00.jpg\n　　└── readme.txt\n##   目录介绍\n - **“bounding_box_test”**——用于测试集的 750 人，包含 19,732 张图像，前缀为 0000 表示在提取这 750 人的过程中DPM检测错的图（可能与query是同一个人），-1 表示检测出来其他人的图（不在这 750 人中）\n\n- **“bounding_box_train”**——用于训练集的 751 人，包含 12,936 张图像\n-  **“query”**——为 750 人在每个摄像头中随机选择一张图像作为query，因此一个人的query最多有 6 个，共有 3,368 张图像\n\n- **“gt_query”**——matlab格式，用于判断一个query的哪些图片是好的匹配（同一个人不同摄像头的图像）和不好的匹配（同一个人同一个摄像头的图像或非同一个人的图像）\n-  **“gt_bbox”**——手工标注的bounding box，用于判断DPM检测的bounding box是不是一个好的box\n\n## 命名规则\n**以 0001_c1s1_000151_01.jpg 为例**\n-  0001 表示每个人的标签编号，从0001到1501；\n-  c1 表示第一个摄像头(camera1)，共有6个摄像头；\n-  s1 表示第一个录像片段(sequece1)，每个摄像机都有数个录像段；\n-  000151 表示 c1s1 的第000151帧图片，视频帧率25fps；\n-  01 表示 c1s1_001051 这一帧上的第1个检测框，由于采用DPM检测器，对于每一帧上的行人可能会框出好几个bbox。00 表示手工标注框\n\n# 参考文献\n- Zheng, Liang, et al. “Scalable Person Re-identification: A Benchmark.” IEEE International Conference on Computer Vision IEEE Computer Society, 2015:1116-1124.","slug":"Person Re-identification数据集描述——Market-1501","published":1,"updated":"2019-10-25T07:30:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb9z100677svwqxhd6jy4","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p><img src=\"http://changingfond.oss-cn-hangzhou.aliyuncs.com/18-7-12/87140649.jpg\" alt></p>\n<h1 id=\"数据集简介\"><a href=\"#数据集简介\" class=\"headerlink\" title=\"数据集简介\"></a>数据集简介</h1><p><strong>Market-1501</strong> 数据集在清华大学校园中采集，夏天拍摄，在 2015 年构建并公开。它包括由6个摄像头（其中5个高清摄像头和1个低清摄像头）拍摄到的 1501 个行人、32668 个检测到的行人矩形框。每个行人至少由2个摄像头捕获到，并且在一个摄像头中可能具有多张图像。训练集有 751 人，包含 12,936 张图像，平均每个人有 17.2 张训练数据；测试集有 750 人，包含 19,732 张图像，平均每个人有 26.3 张测试数据。3368 张查询图像的行人检测矩形框是人工绘制的，而 gallery 中的行人检测矩形框则是使用DPM检测器检测得到的。该数据集提供的固定数量的训练集和测试集均可以在single-shot或multi-shot测试设置下使用。</p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>Market-1501<br>　　├── bounding_box_test<br>　　　　　　　├── 0000_c1s1_000151_01.jpg<br>　　　　　　　├── 0000_c1s1_000376_03.jpg<br>　　　　　　　├── 0000_c1s1_001051_02.jpg<br>　　├── bounding_box_train<br>　　　　　　　├── 0002_c1s1_000451_03.jpg<br>　　　　　　　├── 0002_c1s1_000551_01.jpg<br>　　　　　　　├── 0002_c1s1_000801_01.jpg<br>　　├── gt_bbox<br>　　　　　　　├── 0001_c1s1_001051_00.jpg<br>　　　　　　　├── 0001_c1s1_009376_00.jpg<br>　　　　　　　├── 0001_c2s1_001976_00.jpg<br>　　├── gt_query<br>　　　　　　　├── 0001_c1s1_001051_00_good.mat<br>　　　　　　　├── 0001_c1s1_001051_00_junk.mat<br>　　├── query<br>　　　　　　　├── 0001_c1s1_001051_00.jpg<br>　　　　　　　├── 0001_c2s1_000301_00.jpg<br>　　　　　　　├── 0001_c3s1_000551_00.jpg<br>　　└── readme.txt</p>\n<h2 id=\"目录介绍\"><a href=\"#目录介绍\" class=\"headerlink\" title=\"目录介绍\"></a>目录介绍</h2><ul>\n<li><strong>“bounding_box_test”</strong>——用于测试集的 750 人，包含 19,732 张图像，前缀为 0000 表示在提取这 750 人的过程中DPM检测错的图（可能与query是同一个人），-1 表示检测出来其他人的图（不在这 750 人中）</li>\n</ul>\n<ul>\n<li><p><strong>“bounding_box_train”</strong>——用于训练集的 751 人，包含 12,936 张图像</p>\n</li>\n<li><p><strong>“query”</strong>——为 750 人在每个摄像头中随机选择一张图像作为query，因此一个人的query最多有 6 个，共有 3,368 张图像</p>\n</li>\n<li><p><strong>“gt_query”</strong>——matlab格式，用于判断一个query的哪些图片是好的匹配（同一个人不同摄像头的图像）和不好的匹配（同一个人同一个摄像头的图像或非同一个人的图像）</p>\n</li>\n<li><p><strong>“gt_bbox”</strong>——手工标注的bounding box，用于判断DPM检测的bounding box是不是一个好的box</p>\n</li>\n</ul>\n<h2 id=\"命名规则\"><a href=\"#命名规则\" class=\"headerlink\" title=\"命名规则\"></a>命名规则</h2><p><strong>以 0001_c1s1_000151_01.jpg 为例</strong></p>\n<ul>\n<li>0001 表示每个人的标签编号，从0001到1501；</li>\n<li>c1 表示第一个摄像头(camera1)，共有6个摄像头；</li>\n<li>s1 表示第一个录像片段(sequece1)，每个摄像机都有数个录像段；</li>\n<li>000151 表示 c1s1 的第000151帧图片，视频帧率25fps；</li>\n<li>01 表示 c1s1_001051 这一帧上的第1个检测框，由于采用DPM检测器，对于每一帧上的行人可能会框出好几个bbox。00 表示手工标注框</li>\n</ul>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><ul>\n<li>Zheng, Liang, et al. “Scalable Person Re-identification: A Benchmark.” IEEE International Conference on Computer Vision IEEE Computer Society, 2015:1116-1124.</li>\n</ul>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<p><img src=\"http://changingfond.oss-cn-hangzhou.aliyuncs.com/18-7-12/87140649.jpg\" alt></p>\n<h1 id=\"数据集简介\"><a href=\"#数据集简介\" class=\"headerlink\" title=\"数据集简介\"></a>数据集简介</h1><p><strong>Market-1501</strong> 数据集在清华大学校园中采集，夏天拍摄，在 2015 年构建并公开。它包括由6个摄像头（其中5个高清摄像头和1个低清摄像头）拍摄到的 1501 个行人、32668 个检测到的行人矩形框。每个行人至少由2个摄像头捕获到，并且在一个摄像头中可能具有多张图像。训练集有 751 人，包含 12,936 张图像，平均每个人有 17.2 张训练数据；测试集有 750 人，包含 19,732 张图像，平均每个人有 26.3 张测试数据。3368 张查询图像的行人检测矩形框是人工绘制的，而 gallery 中的行人检测矩形框则是使用DPM检测器检测得到的。该数据集提供的固定数量的训练集和测试集均可以在single-shot或multi-shot测试设置下使用。</p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>Market-1501<br>　　├── bounding_box_test<br>　　　　　　　├── 0000_c1s1_000151_01.jpg<br>　　　　　　　├── 0000_c1s1_000376_03.jpg<br>　　　　　　　├── 0000_c1s1_001051_02.jpg<br>　　├── bounding_box_train<br>　　　　　　　├── 0002_c1s1_000451_03.jpg<br>　　　　　　　├── 0002_c1s1_000551_01.jpg<br>　　　　　　　├── 0002_c1s1_000801_01.jpg<br>　　├── gt_bbox<br>　　　　　　　├── 0001_c1s1_001051_00.jpg<br>　　　　　　　├── 0001_c1s1_009376_00.jpg<br>　　　　　　　├── 0001_c2s1_001976_00.jpg<br>　　├── gt_query<br>　　　　　　　├── 0001_c1s1_001051_00_good.mat<br>　　　　　　　├── 0001_c1s1_001051_00_junk.mat<br>　　├── query<br>　　　　　　　├── 0001_c1s1_001051_00.jpg<br>　　　　　　　├── 0001_c2s1_000301_00.jpg<br>　　　　　　　├── 0001_c3s1_000551_00.jpg<br>　　└── readme.txt</p>\n<h2 id=\"目录介绍\"><a href=\"#目录介绍\" class=\"headerlink\" title=\"目录介绍\"></a>目录介绍</h2><ul>\n<li><strong>“bounding_box_test”</strong>——用于测试集的 750 人，包含 19,732 张图像，前缀为 0000 表示在提取这 750 人的过程中DPM检测错的图（可能与query是同一个人），-1 表示检测出来其他人的图（不在这 750 人中）</li>\n</ul>\n<ul>\n<li><p><strong>“bounding_box_train”</strong>——用于训练集的 751 人，包含 12,936 张图像</p>\n</li>\n<li><p><strong>“query”</strong>——为 750 人在每个摄像头中随机选择一张图像作为query，因此一个人的query最多有 6 个，共有 3,368 张图像</p>\n</li>\n<li><p><strong>“gt_query”</strong>——matlab格式，用于判断一个query的哪些图片是好的匹配（同一个人不同摄像头的图像）和不好的匹配（同一个人同一个摄像头的图像或非同一个人的图像）</p>\n</li>\n<li><p><strong>“gt_bbox”</strong>——手工标注的bounding box，用于判断DPM检测的bounding box是不是一个好的box</p>\n</li>\n</ul>\n<h2 id=\"命名规则\"><a href=\"#命名规则\" class=\"headerlink\" title=\"命名规则\"></a>命名规则</h2><p><strong>以 0001_c1s1_000151_01.jpg 为例</strong></p>\n<ul>\n<li>0001 表示每个人的标签编号，从0001到1501；</li>\n<li>c1 表示第一个摄像头(camera1)，共有6个摄像头；</li>\n<li>s1 表示第一个录像片段(sequece1)，每个摄像机都有数个录像段；</li>\n<li>000151 表示 c1s1 的第000151帧图片，视频帧率25fps；</li>\n<li>01 表示 c1s1_001051 这一帧上的第1个检测框，由于采用DPM检测器，对于每一帧上的行人可能会框出好几个bbox。00 表示手工标注框</li>\n</ul>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><ul>\n<li>Zheng, Liang, et al. “Scalable Person Re-identification: A Benchmark.” IEEE International Conference on Computer Vision IEEE Computer Society, 2015:1116-1124.</li>\n</ul>\n"},{"title":"SpringMVC - 获取Get请求参数详解","date":"2022-09-12T16:00:00.000Z","_content":"\n## 引言\n\n**<center>📨本篇主要对比两种获取Get请求参数方法的区别📨</center>**\n\n### 代码\n\n先看如下两段基于@GetMapping注解的方法👇\n\n```java\n    @GetMapping(\"/page\")\n    public R<Page> page(int page, int pageSize, String name){\n        log.info(\"page={}, pageSize={}, name={}\", page, pageSize, name);\n\n        //创建页面对象\n        Page pageInfo = new Page(page,pageSize);\n        //配置分页条件\n        LambdaQueryWrapper<Employee> queryWrapper = new LambdaQueryWrapper();\n        queryWrapper.like(StringUtils.isNotEmpty(name), Employee::getName, name);\n        queryWrapper.orderByDesc(Employee::getUpdateTime);\n\n        employeeService.page(pageInfo, queryWrapper);\n\n        return R.success(pageInfo);\n    }\n```\n```java\n    @GetMapping(\"/{id}\")\n    public R<Employee> getByID(@PathVariable Long id){\n        Employee employee = employeeService.getById(id);\n        if (employee != null) {\n            return R.success(employee);\n        }\n        return R.error(\"查询失败！\");\n    }\n```\n\n### 说明\n上面两段代码中：\n- 共同点是都是针对Get请求的后端代码逻辑处理\n- 主要的不同之处是对于Get请求参数的获取方式\n- 第一段代码的完整请求路径是：**http://localhost:8080/employee/page?page=1&pageSize=2**\n- 第二段代码的完整请求路径是：**http://localhost:8080/employee/141242344443454456**\n\n## 关于第一种方式\n\n第一种属于传统方式的Get请求参数获取方法，即参数跟在问号后面。\n我们假有这样一段请求需要处理：**http://localhost:8080/helloworld?name=张三**\n则Controller中的处理代码如下👇\n```java\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.bind.annotation.GetMapping;\n \n@RestController\npublic class HelloController {\n    @GetMapping(\"/helloworld\")\n    public String helloworld1(@RequestParam(\"name\") String name) {\n        return \"获取到的name是：\" + name;\n    }\n}\n```\n### @RequestParam使用\n\n这种方式涉及了@RequestParam注解的使用，关于该注解总结如下👇\n- 不加@RequestParam，前端的参数名需要和后端控制器的变量名保持一致才能生效\n\n- 不加@RequestParam，参数为非必传，加@RequestParam写法参数为必传。但@RequestParam可以通过@RequestParam(required = false)设置为非必传。\n\n- @RequestParam可以通过@RequestParam(“userId”)或者@RequestParam(value = “userId”)指定传入的参数名。\n\n- @RequestParam可以通过@RequestParam(defaultValue = “0”)指定参数默认值\n\n- 如果接口除了前端调用还有后端RPC调用，则不能省略@RequestParam，否则RPC会找不到参数报错\n\n- 访问时：\n  - 不加@RequestParam注解：url可带参数也可不带参数\n  - 加@RequestParam注解：url必须带有参数\n\n## 关于第二种方式\n第二种是典型的 RESTful 风格，ID参数值直接放在路径里面。\n我们假有这样一段请求需要处理：**http://localhost:8080/helloworld/张三**\n则Controller中的处理代码如下👇\n```java\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class HelloWorldController {\n\n    @GetMapping(\"/helloworld/{name}\")\n    public String helloworld(@PathVariable(\"name\") String name) {\n        return \"获取到的name是：\" + name;\n    }\n}\n```\n### @PathVariable使用\n通过 @PathVariable 可以将 URL 中占位符参数绑定到控制器处理方法的形参中。\n\n- 若方法参数名称和需要绑定的url中变量名称一致时,可以简写：\n  ```java   \n    @GetMapping(\"/{id}\")\n    public R<Employee> getByID(@PathVariable Long id){\n        Employee employee = employeeService.getById(id);\n        if (employee != null) {\n            return R.success(employee);\n        }\n        return R.error(\"查询失败！\");\n    }\n  ```\n- 若方法参数名称和需要绑定的url中变量名称不一致时，写成：\n  ```java\n    @GetMapping(\"/{id}\")\n    public R<Employee> getByID(@PathVariable(\"id\") Long empId){\n        Employee employee = employeeService.getById(id);\n        if (employee != null) {\n            return R.success(employee);\n        }\n        return R.error(\"查询失败！\");\n    }\n  ```\n\n ---\n ## 2022/9/14 更新\n\n ### 第一种方式的补充：使用对象来接收参数\n\n 此处定义一个简单的POJO如下👇\n ```java\n public class User {\n    private String name;\n    private Integer age;\n \n    public String getName() {\n        return name;\n    }\n \n    public void setName(String name) {\n        this.name = name;\n    }\n \n    public Integer getAge() {\n        return age;\n    }\n \n    public void setAge(Integer age) {\n        this.age = age;\n    }\n}\n ```\n定义一个RestController如下👇\n```java\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.bind.annotation.GetMapping;\n \n@RestController\npublic class HelloController {\n    @GetMapping(\"/helloworld\")\n    public String helloworld(User user) {\n        return \"name：\" + user.getName();\n    }\n}\n```\n现在给出一个GET请求：**http://localhost:8080/helloworld?name=张三**\n则浏览器可以看到：**name: 张三**","source":"_posts/SpringMVC - 获取Get请求参数详解.md","raw":"---\ntitle:  SpringMVC - 获取Get请求参数详解\ntags: [JavaWeb,后端,SpringMVC,RESTful]\ncategories: [后端]\ndate: 2022-9-13\n\n---\n\n## 引言\n\n**<center>📨本篇主要对比两种获取Get请求参数方法的区别📨</center>**\n\n### 代码\n\n先看如下两段基于@GetMapping注解的方法👇\n\n```java\n    @GetMapping(\"/page\")\n    public R<Page> page(int page, int pageSize, String name){\n        log.info(\"page={}, pageSize={}, name={}\", page, pageSize, name);\n\n        //创建页面对象\n        Page pageInfo = new Page(page,pageSize);\n        //配置分页条件\n        LambdaQueryWrapper<Employee> queryWrapper = new LambdaQueryWrapper();\n        queryWrapper.like(StringUtils.isNotEmpty(name), Employee::getName, name);\n        queryWrapper.orderByDesc(Employee::getUpdateTime);\n\n        employeeService.page(pageInfo, queryWrapper);\n\n        return R.success(pageInfo);\n    }\n```\n```java\n    @GetMapping(\"/{id}\")\n    public R<Employee> getByID(@PathVariable Long id){\n        Employee employee = employeeService.getById(id);\n        if (employee != null) {\n            return R.success(employee);\n        }\n        return R.error(\"查询失败！\");\n    }\n```\n\n### 说明\n上面两段代码中：\n- 共同点是都是针对Get请求的后端代码逻辑处理\n- 主要的不同之处是对于Get请求参数的获取方式\n- 第一段代码的完整请求路径是：**http://localhost:8080/employee/page?page=1&pageSize=2**\n- 第二段代码的完整请求路径是：**http://localhost:8080/employee/141242344443454456**\n\n## 关于第一种方式\n\n第一种属于传统方式的Get请求参数获取方法，即参数跟在问号后面。\n我们假有这样一段请求需要处理：**http://localhost:8080/helloworld?name=张三**\n则Controller中的处理代码如下👇\n```java\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.bind.annotation.GetMapping;\n \n@RestController\npublic class HelloController {\n    @GetMapping(\"/helloworld\")\n    public String helloworld1(@RequestParam(\"name\") String name) {\n        return \"获取到的name是：\" + name;\n    }\n}\n```\n### @RequestParam使用\n\n这种方式涉及了@RequestParam注解的使用，关于该注解总结如下👇\n- 不加@RequestParam，前端的参数名需要和后端控制器的变量名保持一致才能生效\n\n- 不加@RequestParam，参数为非必传，加@RequestParam写法参数为必传。但@RequestParam可以通过@RequestParam(required = false)设置为非必传。\n\n- @RequestParam可以通过@RequestParam(“userId”)或者@RequestParam(value = “userId”)指定传入的参数名。\n\n- @RequestParam可以通过@RequestParam(defaultValue = “0”)指定参数默认值\n\n- 如果接口除了前端调用还有后端RPC调用，则不能省略@RequestParam，否则RPC会找不到参数报错\n\n- 访问时：\n  - 不加@RequestParam注解：url可带参数也可不带参数\n  - 加@RequestParam注解：url必须带有参数\n\n## 关于第二种方式\n第二种是典型的 RESTful 风格，ID参数值直接放在路径里面。\n我们假有这样一段请求需要处理：**http://localhost:8080/helloworld/张三**\n则Controller中的处理代码如下👇\n```java\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class HelloWorldController {\n\n    @GetMapping(\"/helloworld/{name}\")\n    public String helloworld(@PathVariable(\"name\") String name) {\n        return \"获取到的name是：\" + name;\n    }\n}\n```\n### @PathVariable使用\n通过 @PathVariable 可以将 URL 中占位符参数绑定到控制器处理方法的形参中。\n\n- 若方法参数名称和需要绑定的url中变量名称一致时,可以简写：\n  ```java   \n    @GetMapping(\"/{id}\")\n    public R<Employee> getByID(@PathVariable Long id){\n        Employee employee = employeeService.getById(id);\n        if (employee != null) {\n            return R.success(employee);\n        }\n        return R.error(\"查询失败！\");\n    }\n  ```\n- 若方法参数名称和需要绑定的url中变量名称不一致时，写成：\n  ```java\n    @GetMapping(\"/{id}\")\n    public R<Employee> getByID(@PathVariable(\"id\") Long empId){\n        Employee employee = employeeService.getById(id);\n        if (employee != null) {\n            return R.success(employee);\n        }\n        return R.error(\"查询失败！\");\n    }\n  ```\n\n ---\n ## 2022/9/14 更新\n\n ### 第一种方式的补充：使用对象来接收参数\n\n 此处定义一个简单的POJO如下👇\n ```java\n public class User {\n    private String name;\n    private Integer age;\n \n    public String getName() {\n        return name;\n    }\n \n    public void setName(String name) {\n        this.name = name;\n    }\n \n    public Integer getAge() {\n        return age;\n    }\n \n    public void setAge(Integer age) {\n        this.age = age;\n    }\n}\n ```\n定义一个RestController如下👇\n```java\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.bind.annotation.GetMapping;\n \n@RestController\npublic class HelloController {\n    @GetMapping(\"/helloworld\")\n    public String helloworld(User user) {\n        return \"name：\" + user.getName();\n    }\n}\n```\n现在给出一个GET请求：**http://localhost:8080/helloworld?name=张三**\n则浏览器可以看到：**name: 张三**","slug":"SpringMVC - 获取Get请求参数详解","published":1,"updated":"2022-09-14T11:22:54.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb9z400697svw5rwslhy9","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p><strong><center>📨本篇主要对比两种获取Get请求参数方法的区别📨</center></strong></p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>先看如下两段基于@GetMapping注解的方法👇</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/page\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> R&lt;Page&gt; <span class=\"title\">page</span><span class=\"params\">(<span class=\"keyword\">int</span> page, <span class=\"keyword\">int</span> pageSize, String name)</span></span>&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">\"page=&#123;&#125;, pageSize=&#123;&#125;, name=&#123;&#125;\"</span>, page, pageSize, name);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建页面对象</span></span><br><span class=\"line\">    Page pageInfo = <span class=\"keyword\">new</span> Page(page,pageSize);</span><br><span class=\"line\">    <span class=\"comment\">//配置分页条件</span></span><br><span class=\"line\">    LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class=\"keyword\">new</span> LambdaQueryWrapper();</span><br><span class=\"line\">    queryWrapper.like(StringUtils.isNotEmpty(name), Employee::getName, name);</span><br><span class=\"line\">    queryWrapper.orderByDesc(Employee::getUpdateTime);</span><br><span class=\"line\"></span><br><span class=\"line\">    employeeService.page(pageInfo, queryWrapper);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> R.success(pageInfo);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/&#123;id&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> R&lt;Employee&gt; <span class=\"title\">getByID</span><span class=\"params\">(@PathVariable Long id)</span></span>&#123;</span><br><span class=\"line\">    Employee employee = employeeService.getById(id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (employee != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.success(employee);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> R.error(<span class=\"string\">\"查询失败！\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>上面两段代码中：</p>\n<ul>\n<li>共同点是都是针对Get请求的后端代码逻辑处理</li>\n<li>主要的不同之处是对于Get请求参数的获取方式</li>\n<li>第一段代码的完整请求路径是：<strong><a href=\"http://localhost:8080/employee/page?page=1&amp;pageSize=2\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/employee/page?page=1&amp;pageSize=2</a></strong></li>\n<li>第二段代码的完整请求路径是：<strong><a href=\"http://localhost:8080/employee/141242344443454456\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/employee/141242344443454456</a></strong></li>\n</ul>\n<h2 id=\"关于第一种方式\"><a href=\"#关于第一种方式\" class=\"headerlink\" title=\"关于第一种方式\"></a>关于第一种方式</h2><p>第一种属于传统方式的Get请求参数获取方法，即参数跟在问号后面。<br>我们假有这样一段请求需要处理：<strong><a href=\"http://localhost:8080/helloworld?name=张三\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/helloworld?name=张三</a></strong><br>则Controller中的处理代码如下👇</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/helloworld\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">helloworld1</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"name\"</span>)</span> String name) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"获取到的name是：\"</span> + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RequestParam使用\"><a href=\"#RequestParam使用\" class=\"headerlink\" title=\"@RequestParam使用\"></a>@RequestParam使用</h3><p>这种方式涉及了@RequestParam注解的使用，关于该注解总结如下👇</p>\n<ul>\n<li><p>不加@RequestParam，前端的参数名需要和后端控制器的变量名保持一致才能生效</p>\n</li>\n<li><p>不加@RequestParam，参数为非必传，加@RequestParam写法参数为必传。但@RequestParam可以通过@RequestParam(required = false)设置为非必传。</p>\n</li>\n<li><p>@RequestParam可以通过@RequestParam(“userId”)或者@RequestParam(value = “userId”)指定传入的参数名。</p>\n</li>\n<li><p>@RequestParam可以通过@RequestParam(defaultValue = “0”)指定参数默认值</p>\n</li>\n<li><p>如果接口除了前端调用还有后端RPC调用，则不能省略@RequestParam，否则RPC会找不到参数报错</p>\n</li>\n<li><p>访问时：</p>\n<ul>\n<li>不加@RequestParam注解：url可带参数也可不带参数</li>\n<li>加@RequestParam注解：url必须带有参数</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"关于第二种方式\"><a href=\"#关于第二种方式\" class=\"headerlink\" title=\"关于第二种方式\"></a>关于第二种方式</h2><p>第二种是典型的 RESTful 风格，ID参数值直接放在路径里面。<br>我们假有这样一段请求需要处理：<strong><a href=\"http://localhost:8080/helloworld/张三\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/helloworld/张三</a></strong><br>则Controller中的处理代码如下👇</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/helloworld/&#123;name&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">helloworld</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"name\"</span>)</span> String name) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"获取到的name是：\"</span> + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PathVariable使用\"><a href=\"#PathVariable使用\" class=\"headerlink\" title=\"@PathVariable使用\"></a>@PathVariable使用</h3><p>通过 @PathVariable 可以将 URL 中占位符参数绑定到控制器处理方法的形参中。</p>\n<ul>\n<li><p>若方法参数名称和需要绑定的url中变量名称一致时,可以简写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/&#123;id&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> R&lt;Employee&gt; <span class=\"title\">getByID</span><span class=\"params\">(@PathVariable Long id)</span></span>&#123;</span><br><span class=\"line\">    Employee employee = employeeService.getById(id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (employee != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.success(employee);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> R.error(<span class=\"string\">\"查询失败！\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>若方法参数名称和需要绑定的url中变量名称不一致时，写成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/&#123;id&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> R&lt;Employee&gt; <span class=\"title\">getByID</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span> Long empId)</span>&#123;</span><br><span class=\"line\">    Employee employee = employeeService.getById(id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (employee != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.success(employee);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> R.error(<span class=\"string\">\"查询失败！\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"2022-9-14-更新\"><a href=\"#2022-9-14-更新\" class=\"headerlink\" title=\"2022/9/14 更新\"></a>2022/9/14 更新</h2><h3 id=\"第一种方式的补充：使用对象来接收参数\"><a href=\"#第一种方式的补充：使用对象来接收参数\" class=\"headerlink\" title=\"第一种方式的补充：使用对象来接收参数\"></a>第一种方式的补充：使用对象来接收参数</h3><p>此处定义一个简单的POJO如下👇</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>定义一个RestController如下👇</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/helloworld\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">helloworld</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"name：\"</span> + user.getName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在给出一个GET请求：<strong><a href=\"http://localhost:8080/helloworld?name=张三\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/helloworld?name=张三</a></strong><br>则浏览器可以看到：<strong>name: 张三</strong></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p><strong><center>📨本篇主要对比两种获取Get请求参数方法的区别📨</center></strong></p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>先看如下两段基于@GetMapping注解的方法👇</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/page\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> R&lt;Page&gt; <span class=\"title\">page</span><span class=\"params\">(<span class=\"keyword\">int</span> page, <span class=\"keyword\">int</span> pageSize, String name)</span></span>&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">\"page=&#123;&#125;, pageSize=&#123;&#125;, name=&#123;&#125;\"</span>, page, pageSize, name);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建页面对象</span></span><br><span class=\"line\">    Page pageInfo = <span class=\"keyword\">new</span> Page(page,pageSize);</span><br><span class=\"line\">    <span class=\"comment\">//配置分页条件</span></span><br><span class=\"line\">    LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class=\"keyword\">new</span> LambdaQueryWrapper();</span><br><span class=\"line\">    queryWrapper.like(StringUtils.isNotEmpty(name), Employee::getName, name);</span><br><span class=\"line\">    queryWrapper.orderByDesc(Employee::getUpdateTime);</span><br><span class=\"line\"></span><br><span class=\"line\">    employeeService.page(pageInfo, queryWrapper);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> R.success(pageInfo);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/&#123;id&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> R&lt;Employee&gt; <span class=\"title\">getByID</span><span class=\"params\">(@PathVariable Long id)</span></span>&#123;</span><br><span class=\"line\">    Employee employee = employeeService.getById(id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (employee != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.success(employee);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> R.error(<span class=\"string\">\"查询失败！\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>上面两段代码中：</p>\n<ul>\n<li>共同点是都是针对Get请求的后端代码逻辑处理</li>\n<li>主要的不同之处是对于Get请求参数的获取方式</li>\n<li>第一段代码的完整请求路径是：<strong><a href=\"http://localhost:8080/employee/page?page=1&amp;pageSize=2\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/employee/page?page=1&amp;pageSize=2</a></strong></li>\n<li>第二段代码的完整请求路径是：<strong><a href=\"http://localhost:8080/employee/141242344443454456\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/employee/141242344443454456</a></strong></li>\n</ul>\n<h2 id=\"关于第一种方式\"><a href=\"#关于第一种方式\" class=\"headerlink\" title=\"关于第一种方式\"></a>关于第一种方式</h2><p>第一种属于传统方式的Get请求参数获取方法，即参数跟在问号后面。<br>我们假有这样一段请求需要处理：<strong><a href=\"http://localhost:8080/helloworld?name=张三\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/helloworld?name=张三</a></strong><br>则Controller中的处理代码如下👇</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/helloworld\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">helloworld1</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"name\"</span>)</span> String name) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"获取到的name是：\"</span> + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RequestParam使用\"><a href=\"#RequestParam使用\" class=\"headerlink\" title=\"@RequestParam使用\"></a>@RequestParam使用</h3><p>这种方式涉及了@RequestParam注解的使用，关于该注解总结如下👇</p>\n<ul>\n<li><p>不加@RequestParam，前端的参数名需要和后端控制器的变量名保持一致才能生效</p>\n</li>\n<li><p>不加@RequestParam，参数为非必传，加@RequestParam写法参数为必传。但@RequestParam可以通过@RequestParam(required = false)设置为非必传。</p>\n</li>\n<li><p>@RequestParam可以通过@RequestParam(“userId”)或者@RequestParam(value = “userId”)指定传入的参数名。</p>\n</li>\n<li><p>@RequestParam可以通过@RequestParam(defaultValue = “0”)指定参数默认值</p>\n</li>\n<li><p>如果接口除了前端调用还有后端RPC调用，则不能省略@RequestParam，否则RPC会找不到参数报错</p>\n</li>\n<li><p>访问时：</p>\n<ul>\n<li>不加@RequestParam注解：url可带参数也可不带参数</li>\n<li>加@RequestParam注解：url必须带有参数</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"关于第二种方式\"><a href=\"#关于第二种方式\" class=\"headerlink\" title=\"关于第二种方式\"></a>关于第二种方式</h2><p>第二种是典型的 RESTful 风格，ID参数值直接放在路径里面。<br>我们假有这样一段请求需要处理：<strong><a href=\"http://localhost:8080/helloworld/张三\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/helloworld/张三</a></strong><br>则Controller中的处理代码如下👇</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/helloworld/&#123;name&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">helloworld</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"name\"</span>)</span> String name) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"获取到的name是：\"</span> + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PathVariable使用\"><a href=\"#PathVariable使用\" class=\"headerlink\" title=\"@PathVariable使用\"></a>@PathVariable使用</h3><p>通过 @PathVariable 可以将 URL 中占位符参数绑定到控制器处理方法的形参中。</p>\n<ul>\n<li><p>若方法参数名称和需要绑定的url中变量名称一致时,可以简写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/&#123;id&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> R&lt;Employee&gt; <span class=\"title\">getByID</span><span class=\"params\">(@PathVariable Long id)</span></span>&#123;</span><br><span class=\"line\">    Employee employee = employeeService.getById(id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (employee != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.success(employee);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> R.error(<span class=\"string\">\"查询失败！\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>若方法参数名称和需要绑定的url中变量名称不一致时，写成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/&#123;id&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> R&lt;Employee&gt; <span class=\"title\">getByID</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span> Long empId)</span>&#123;</span><br><span class=\"line\">    Employee employee = employeeService.getById(id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (employee != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.success(employee);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> R.error(<span class=\"string\">\"查询失败！\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"2022-9-14-更新\"><a href=\"#2022-9-14-更新\" class=\"headerlink\" title=\"2022/9/14 更新\"></a>2022/9/14 更新</h2><h3 id=\"第一种方式的补充：使用对象来接收参数\"><a href=\"#第一种方式的补充：使用对象来接收参数\" class=\"headerlink\" title=\"第一种方式的补充：使用对象来接收参数\"></a>第一种方式的补充：使用对象来接收参数</h3><p>此处定义一个简单的POJO如下👇</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>定义一个RestController如下👇</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/helloworld\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">helloworld</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"name：\"</span> + user.getName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在给出一个GET请求：<strong><a href=\"http://localhost:8080/helloworld?name=张三\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/helloworld?name=张三</a></strong><br>则浏览器可以看到：<strong>name: 张三</strong></p>\n"},{"title":"Hello World","comments":1,"date":"2015-01-19T16:00:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ncomments: true\ndate: 2015-1-20\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2022-09-05T03:46:54.744Z","layout":"post","photos":[],"link":"","_id":"cl81jb9z8006d7svw497naqsf","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"MNIST数据集的下载与数据处理","date":"2019-08-27T16:00:00.000Z","_content":"\n## 源码（python）\n\n```python\n# coding: utf-8\ntry:\n    import urllib.request\nexcept ImportError:\n    raise ImportError('You should use Python 3.x')\nimport os.path\nimport gzip\nimport pickle\nimport os\nimport numpy as np\n\n\nurl_base = 'http://yann.lecun.com/exdb/mnist/'\nkey_file = {\n    'train_img':'train-images-idx3-ubyte.gz',\n    'train_label':'train-labels-idx1-ubyte.gz',\n    'test_img':'t10k-images-idx3-ubyte.gz',\n    'test_label':'t10k-labels-idx1-ubyte.gz'\n}\n\ndataset_dir = os.path.dirname(os.path.abspath(__file__))\nsave_file = dataset_dir + \"/mnist.pkl\"\n\ntrain_num = 60000\ntest_num = 10000\nimg_dim = (1, 28, 28)\nimg_size = 784\n\n\ndef _download(file_name):\n    file_path = dataset_dir + \"/\" + file_name\n    \n    if os.path.exists(file_path):\n        return\n\n    print(\"Downloading \" + file_name + \" ... \")\n    urllib.request.urlretrieve(url_base + file_name, file_path)\n    print(\"Done\")\n    \ndef download_mnist():\n    for v in key_file.values():\n       _download(v)\n        \ndef _load_label(file_name):\n    file_path = dataset_dir + \"/\" + file_name\n    \n    print(\"Converting \" + file_name + \" to NumPy Array ...\")\n    with gzip.open(file_path, 'rb') as f:\n            labels = np.frombuffer(f.read(), np.uint8, offset=8)\n    print(\"Done\")\n    \n    return labels\n\ndef _load_img(file_name):\n    file_path = dataset_dir + \"/\" + file_name\n    \n    print(\"Converting \" + file_name + \" to NumPy Array ...\")    \n    with gzip.open(file_path, 'rb') as f:\n            data = np.frombuffer(f.read(), np.uint8, offset=16)\n    data = data.reshape(-1, img_size)\n    print(\"Done\")\n    \n    return data\n    \ndef _convert_numpy():\n    dataset = {}\n    dataset['train_img'] =  _load_img(key_file['train_img'])\n    dataset['train_label'] = _load_label(key_file['train_label'])    \n    dataset['test_img'] = _load_img(key_file['test_img'])\n    dataset['test_label'] = _load_label(key_file['test_label'])\n    \n    return dataset\n\ndef init_mnist():\n    download_mnist()\n    dataset = _convert_numpy()\n    print(\"Creating pickle file ...\")\n    with open(save_file, 'wb') as f:\n        pickle.dump(dataset, f, -1)\n    print(\"Done!\")\n\ndef _change_one_hot_label(X):\n    T = np.zeros((X.size, 10))\n    for idx, row in enumerate(T):\n        row[X[idx]] = 1\n        \n    return T\n    \n\ndef load_mnist(normalize=True, flatten=True, one_hot_label=False):\n    \"\"\"读入MNIST数据集\n    \n    Parameters\n    ----------\n    normalize : 将图像的像素值正规化为0.0~1.0\n    one_hot_label : \n        one_hot_label为True的情况下，标签作为one-hot数组返回\n        one-hot数组是指[0,0,1,0,0,0,0,0,0,0]这样的数组\n    flatten : 是否将图像展开为一维数组\n    \n    Returns\n    -------\n    (训练图像, 训练标签), (测试图像, 测试标签)\n    \"\"\"\n    if not os.path.exists(save_file):\n        init_mnist()\n        \n    with open(save_file, 'rb') as f:\n        dataset = pickle.load(f)\n    \n    if normalize:\n        for key in ('train_img', 'test_img'):\n            dataset[key] = dataset[key].astype(np.float32)\n            dataset[key] /= 255.0\n            \n    if one_hot_label:\n        dataset['train_label'] = _change_one_hot_label(dataset['train_label'])\n        dataset['test_label'] = _change_one_hot_label(dataset['test_label'])\n    \n    if not flatten:\n         for key in ('train_img', 'test_img'):\n            dataset[key] = dataset[key].reshape(-1, 1, 28, 28)\n\n    return (dataset['train_img'], dataset['train_label']), (dataset['test_img'], dataset['test_label']) \n\n\nif __name__ == '__main__':\n    init_mnist()\n```\n## load_mnist函数讲解\n```python\ndef load_mnist(normalize=True, flatten=True, one_hot_label=False):\n    \"\"\"读入MNIST数据集\n    \n    Parameters\n    ----------\n    normalize : 将图像的像素值正规化为0.0~1.0\n    one_hot_label : \n        one_hot_label为True的情况下，标签作为one-hot数组返回\n        one-hot数组是指[0,0,1,0,0,0,0,0,0,0]这样的数组\n    flatten : 是否将图像展开为一维数组\n    \n    Returns\n    -------\n    (训练图像, 训练标签), (测试图像, 测试标签)\n    \"\"\"\n    if not os.path.exists(save_file):\n        init_mnist()\n        \n    with open(save_file, 'rb') as f:\n        dataset = pickle.load(f)\n    \n    if normalize:\n        for key in ('train_img', 'test_img'):\n            dataset[key] = dataset[key].astype(np.float32)\n            dataset[key] /= 255.0\n            \n    if one_hot_label:\n        dataset['train_label'] = _change_one_hot_label(dataset['train_label'])\n        dataset['test_label'] = _change_one_hot_label(dataset['test_label'])\n    \n    if not flatten:\n         for key in ('train_img', 'test_img'):\n            dataset[key] = dataset[key].reshape(-1, 1, 28, 28)\n\n    return (dataset['train_img'], dataset['train_label']), (dataset['test_img'], dataset['test_label']) \n```\nload_mnist函数以**“(训练图像,训练标签),(测试图像,测试标签)”**的形式返回读入的MNIST数据。\n\n此外,还可以像**load_mnist(normalize=True,flatten=True,one_hot_label=False)**这样,设置3个参数。\n- 第1个参数normalize设置是否将输入图像正规化为0.0-1.0的值。如果将该参数设置为 False,则输入图像的像素会保持原来的0-255。\n- 第2个参数 flatten设置是否展开输入图像(变成一维数组)。如果将该参数设置为 False,则输入图像为1×28×28的三维数组;若设置为True,则输入图像会保存为由784个元素构成的一维数组。\n- 第3个参数one_hot_label设置是否将标签保存为one-hot表示(one-hot representation)。one-hot表示是仅正确解标签为1,其余皆为0的数组,就像[0,0,1,0,0,0,0,0,0,0]这样。当one_hot_label为Fase时,只是像7、2这样简单保存正确解标签;当 one_hot_label为True时,标签则保存为one-hot表示。\n\n>PS:想获取完整的手写数字识别源码请访问我的GitHub：\n>https://github.com/NUISTGY/Codes-of-fish-book.git\n","source":"_posts/mnist数据集下载与处理.md","raw":"---\ntitle: MNIST数据集的下载与数据处理\ntags: [python,手写识别,MNIST,图像识别]\n\ncategories: [数据集]\n\ndate: 2019-8-28\n---\n\n## 源码（python）\n\n```python\n# coding: utf-8\ntry:\n    import urllib.request\nexcept ImportError:\n    raise ImportError('You should use Python 3.x')\nimport os.path\nimport gzip\nimport pickle\nimport os\nimport numpy as np\n\n\nurl_base = 'http://yann.lecun.com/exdb/mnist/'\nkey_file = {\n    'train_img':'train-images-idx3-ubyte.gz',\n    'train_label':'train-labels-idx1-ubyte.gz',\n    'test_img':'t10k-images-idx3-ubyte.gz',\n    'test_label':'t10k-labels-idx1-ubyte.gz'\n}\n\ndataset_dir = os.path.dirname(os.path.abspath(__file__))\nsave_file = dataset_dir + \"/mnist.pkl\"\n\ntrain_num = 60000\ntest_num = 10000\nimg_dim = (1, 28, 28)\nimg_size = 784\n\n\ndef _download(file_name):\n    file_path = dataset_dir + \"/\" + file_name\n    \n    if os.path.exists(file_path):\n        return\n\n    print(\"Downloading \" + file_name + \" ... \")\n    urllib.request.urlretrieve(url_base + file_name, file_path)\n    print(\"Done\")\n    \ndef download_mnist():\n    for v in key_file.values():\n       _download(v)\n        \ndef _load_label(file_name):\n    file_path = dataset_dir + \"/\" + file_name\n    \n    print(\"Converting \" + file_name + \" to NumPy Array ...\")\n    with gzip.open(file_path, 'rb') as f:\n            labels = np.frombuffer(f.read(), np.uint8, offset=8)\n    print(\"Done\")\n    \n    return labels\n\ndef _load_img(file_name):\n    file_path = dataset_dir + \"/\" + file_name\n    \n    print(\"Converting \" + file_name + \" to NumPy Array ...\")    \n    with gzip.open(file_path, 'rb') as f:\n            data = np.frombuffer(f.read(), np.uint8, offset=16)\n    data = data.reshape(-1, img_size)\n    print(\"Done\")\n    \n    return data\n    \ndef _convert_numpy():\n    dataset = {}\n    dataset['train_img'] =  _load_img(key_file['train_img'])\n    dataset['train_label'] = _load_label(key_file['train_label'])    \n    dataset['test_img'] = _load_img(key_file['test_img'])\n    dataset['test_label'] = _load_label(key_file['test_label'])\n    \n    return dataset\n\ndef init_mnist():\n    download_mnist()\n    dataset = _convert_numpy()\n    print(\"Creating pickle file ...\")\n    with open(save_file, 'wb') as f:\n        pickle.dump(dataset, f, -1)\n    print(\"Done!\")\n\ndef _change_one_hot_label(X):\n    T = np.zeros((X.size, 10))\n    for idx, row in enumerate(T):\n        row[X[idx]] = 1\n        \n    return T\n    \n\ndef load_mnist(normalize=True, flatten=True, one_hot_label=False):\n    \"\"\"读入MNIST数据集\n    \n    Parameters\n    ----------\n    normalize : 将图像的像素值正规化为0.0~1.0\n    one_hot_label : \n        one_hot_label为True的情况下，标签作为one-hot数组返回\n        one-hot数组是指[0,0,1,0,0,0,0,0,0,0]这样的数组\n    flatten : 是否将图像展开为一维数组\n    \n    Returns\n    -------\n    (训练图像, 训练标签), (测试图像, 测试标签)\n    \"\"\"\n    if not os.path.exists(save_file):\n        init_mnist()\n        \n    with open(save_file, 'rb') as f:\n        dataset = pickle.load(f)\n    \n    if normalize:\n        for key in ('train_img', 'test_img'):\n            dataset[key] = dataset[key].astype(np.float32)\n            dataset[key] /= 255.0\n            \n    if one_hot_label:\n        dataset['train_label'] = _change_one_hot_label(dataset['train_label'])\n        dataset['test_label'] = _change_one_hot_label(dataset['test_label'])\n    \n    if not flatten:\n         for key in ('train_img', 'test_img'):\n            dataset[key] = dataset[key].reshape(-1, 1, 28, 28)\n\n    return (dataset['train_img'], dataset['train_label']), (dataset['test_img'], dataset['test_label']) \n\n\nif __name__ == '__main__':\n    init_mnist()\n```\n## load_mnist函数讲解\n```python\ndef load_mnist(normalize=True, flatten=True, one_hot_label=False):\n    \"\"\"读入MNIST数据集\n    \n    Parameters\n    ----------\n    normalize : 将图像的像素值正规化为0.0~1.0\n    one_hot_label : \n        one_hot_label为True的情况下，标签作为one-hot数组返回\n        one-hot数组是指[0,0,1,0,0,0,0,0,0,0]这样的数组\n    flatten : 是否将图像展开为一维数组\n    \n    Returns\n    -------\n    (训练图像, 训练标签), (测试图像, 测试标签)\n    \"\"\"\n    if not os.path.exists(save_file):\n        init_mnist()\n        \n    with open(save_file, 'rb') as f:\n        dataset = pickle.load(f)\n    \n    if normalize:\n        for key in ('train_img', 'test_img'):\n            dataset[key] = dataset[key].astype(np.float32)\n            dataset[key] /= 255.0\n            \n    if one_hot_label:\n        dataset['train_label'] = _change_one_hot_label(dataset['train_label'])\n        dataset['test_label'] = _change_one_hot_label(dataset['test_label'])\n    \n    if not flatten:\n         for key in ('train_img', 'test_img'):\n            dataset[key] = dataset[key].reshape(-1, 1, 28, 28)\n\n    return (dataset['train_img'], dataset['train_label']), (dataset['test_img'], dataset['test_label']) \n```\nload_mnist函数以**“(训练图像,训练标签),(测试图像,测试标签)”**的形式返回读入的MNIST数据。\n\n此外,还可以像**load_mnist(normalize=True,flatten=True,one_hot_label=False)**这样,设置3个参数。\n- 第1个参数normalize设置是否将输入图像正规化为0.0-1.0的值。如果将该参数设置为 False,则输入图像的像素会保持原来的0-255。\n- 第2个参数 flatten设置是否展开输入图像(变成一维数组)。如果将该参数设置为 False,则输入图像为1×28×28的三维数组;若设置为True,则输入图像会保存为由784个元素构成的一维数组。\n- 第3个参数one_hot_label设置是否将标签保存为one-hot表示(one-hot representation)。one-hot表示是仅正确解标签为1,其余皆为0的数组,就像[0,0,1,0,0,0,0,0,0,0]这样。当one_hot_label为Fase时,只是像7、2这样简单保存正确解标签;当 one_hot_label为True时,标签则保存为one-hot表示。\n\n>PS:想获取完整的手写数字识别源码请访问我的GitHub：\n>https://github.com/NUISTGY/Codes-of-fish-book.git\n","slug":"mnist数据集下载与处理","published":1,"updated":"2022-09-05T03:49:33.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb9za006e7svw2fbtqe41","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"源码（python）\"><a href=\"#源码（python）\" class=\"headerlink\" title=\"源码（python）\"></a>源码（python）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">raise</span> ImportError(<span class=\"string\">'You should use Python 3.x'</span>)</span><br><span class=\"line\"><span class=\"keyword\">import</span> os.path</span><br><span class=\"line\"><span class=\"keyword\">import</span> gzip</span><br><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">url_base = <span class=\"string\">'http://yann.lecun.com/exdb/mnist/'</span></span><br><span class=\"line\">key_file = &#123;</span><br><span class=\"line\">    <span class=\"string\">'train_img'</span>:<span class=\"string\">'train-images-idx3-ubyte.gz'</span>,</span><br><span class=\"line\">    <span class=\"string\">'train_label'</span>:<span class=\"string\">'train-labels-idx1-ubyte.gz'</span>,</span><br><span class=\"line\">    <span class=\"string\">'test_img'</span>:<span class=\"string\">'t10k-images-idx3-ubyte.gz'</span>,</span><br><span class=\"line\">    <span class=\"string\">'test_label'</span>:<span class=\"string\">'t10k-labels-idx1-ubyte.gz'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dataset_dir = os.path.dirname(os.path.abspath(__file__))</span><br><span class=\"line\">save_file = dataset_dir + <span class=\"string\">\"/mnist.pkl\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">train_num = <span class=\"number\">60000</span></span><br><span class=\"line\">test_num = <span class=\"number\">10000</span></span><br><span class=\"line\">img_dim = (<span class=\"number\">1</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>)</span><br><span class=\"line\">img_size = <span class=\"number\">784</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_download</span><span class=\"params\">(file_name)</span>:</span></span><br><span class=\"line\">    file_path = dataset_dir + <span class=\"string\">\"/\"</span> + file_name</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> os.path.exists(file_path):</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"Downloading \"</span> + file_name + <span class=\"string\">\" ... \"</span>)</span><br><span class=\"line\">    urllib.request.urlretrieve(url_base + file_name, file_path)</span><br><span class=\"line\">    print(<span class=\"string\">\"Done\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">download_mnist</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> key_file.values():</span><br><span class=\"line\">       _download(v)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_load_label</span><span class=\"params\">(file_name)</span>:</span></span><br><span class=\"line\">    file_path = dataset_dir + <span class=\"string\">\"/\"</span> + file_name</span><br><span class=\"line\">    </span><br><span class=\"line\">    print(<span class=\"string\">\"Converting \"</span> + file_name + <span class=\"string\">\" to NumPy Array ...\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> gzip.open(file_path, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            labels = np.frombuffer(f.read(), np.uint8, offset=<span class=\"number\">8</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"Done\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> labels</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_load_img</span><span class=\"params\">(file_name)</span>:</span></span><br><span class=\"line\">    file_path = dataset_dir + <span class=\"string\">\"/\"</span> + file_name</span><br><span class=\"line\">    </span><br><span class=\"line\">    print(<span class=\"string\">\"Converting \"</span> + file_name + <span class=\"string\">\" to NumPy Array ...\"</span>)    </span><br><span class=\"line\">    <span class=\"keyword\">with</span> gzip.open(file_path, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            data = np.frombuffer(f.read(), np.uint8, offset=<span class=\"number\">16</span>)</span><br><span class=\"line\">    data = data.reshape(<span class=\"number\">-1</span>, img_size)</span><br><span class=\"line\">    print(<span class=\"string\">\"Done\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_convert_numpy</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    dataset = &#123;&#125;</span><br><span class=\"line\">    dataset[<span class=\"string\">'train_img'</span>] =  _load_img(key_file[<span class=\"string\">'train_img'</span>])</span><br><span class=\"line\">    dataset[<span class=\"string\">'train_label'</span>] = _load_label(key_file[<span class=\"string\">'train_label'</span>])    </span><br><span class=\"line\">    dataset[<span class=\"string\">'test_img'</span>] = _load_img(key_file[<span class=\"string\">'test_img'</span>])</span><br><span class=\"line\">    dataset[<span class=\"string\">'test_label'</span>] = _load_label(key_file[<span class=\"string\">'test_label'</span>])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> dataset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_mnist</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    download_mnist()</span><br><span class=\"line\">    dataset = _convert_numpy()</span><br><span class=\"line\">    print(<span class=\"string\">\"Creating pickle file ...\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(save_file, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        pickle.dump(dataset, f, <span class=\"number\">-1</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"Done!\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_change_one_hot_label</span><span class=\"params\">(X)</span>:</span></span><br><span class=\"line\">    T = np.zeros((X.size, <span class=\"number\">10</span>))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> idx, row <span class=\"keyword\">in</span> enumerate(T):</span><br><span class=\"line\">        row[X[idx]] = <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> T</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load_mnist</span><span class=\"params\">(normalize=True, flatten=True, one_hot_label=False)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"读入MNIST数据集</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    Parameters</span></span><br><span class=\"line\"><span class=\"string\">    ----------</span></span><br><span class=\"line\"><span class=\"string\">    normalize : 将图像的像素值正规化为0.0~1.0</span></span><br><span class=\"line\"><span class=\"string\">    one_hot_label : </span></span><br><span class=\"line\"><span class=\"string\">        one_hot_label为True的情况下，标签作为one-hot数组返回</span></span><br><span class=\"line\"><span class=\"string\">        one-hot数组是指[0,0,1,0,0,0,0,0,0,0]这样的数组</span></span><br><span class=\"line\"><span class=\"string\">    flatten : 是否将图像展开为一维数组</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    Returns</span></span><br><span class=\"line\"><span class=\"string\">    -------</span></span><br><span class=\"line\"><span class=\"string\">    (训练图像, 训练标签), (测试图像, 测试标签)</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(save_file):</span><br><span class=\"line\">        init_mnist()</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(save_file, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        dataset = pickle.load(f)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> normalize:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> (<span class=\"string\">'train_img'</span>, <span class=\"string\">'test_img'</span>):</span><br><span class=\"line\">            dataset[key] = dataset[key].astype(np.float32)</span><br><span class=\"line\">            dataset[key] /= <span class=\"number\">255.0</span></span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"keyword\">if</span> one_hot_label:</span><br><span class=\"line\">        dataset[<span class=\"string\">'train_label'</span>] = _change_one_hot_label(dataset[<span class=\"string\">'train_label'</span>])</span><br><span class=\"line\">        dataset[<span class=\"string\">'test_label'</span>] = _change_one_hot_label(dataset[<span class=\"string\">'test_label'</span>])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> flatten:</span><br><span class=\"line\">         <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> (<span class=\"string\">'train_img'</span>, <span class=\"string\">'test_img'</span>):</span><br><span class=\"line\">            dataset[key] = dataset[key].reshape(<span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (dataset[<span class=\"string\">'train_img'</span>], dataset[<span class=\"string\">'train_label'</span>]), (dataset[<span class=\"string\">'test_img'</span>], dataset[<span class=\"string\">'test_label'</span>]) </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    init_mnist()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"load-mnist函数讲解\"><a href=\"#load-mnist函数讲解\" class=\"headerlink\" title=\"load_mnist函数讲解\"></a>load_mnist函数讲解</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load_mnist</span><span class=\"params\">(normalize=True, flatten=True, one_hot_label=False)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"读入MNIST数据集</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    Parameters</span></span><br><span class=\"line\"><span class=\"string\">    ----------</span></span><br><span class=\"line\"><span class=\"string\">    normalize : 将图像的像素值正规化为0.0~1.0</span></span><br><span class=\"line\"><span class=\"string\">    one_hot_label : </span></span><br><span class=\"line\"><span class=\"string\">        one_hot_label为True的情况下，标签作为one-hot数组返回</span></span><br><span class=\"line\"><span class=\"string\">        one-hot数组是指[0,0,1,0,0,0,0,0,0,0]这样的数组</span></span><br><span class=\"line\"><span class=\"string\">    flatten : 是否将图像展开为一维数组</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    Returns</span></span><br><span class=\"line\"><span class=\"string\">    -------</span></span><br><span class=\"line\"><span class=\"string\">    (训练图像, 训练标签), (测试图像, 测试标签)</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(save_file):</span><br><span class=\"line\">        init_mnist()</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(save_file, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        dataset = pickle.load(f)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> normalize:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> (<span class=\"string\">'train_img'</span>, <span class=\"string\">'test_img'</span>):</span><br><span class=\"line\">            dataset[key] = dataset[key].astype(np.float32)</span><br><span class=\"line\">            dataset[key] /= <span class=\"number\">255.0</span></span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"keyword\">if</span> one_hot_label:</span><br><span class=\"line\">        dataset[<span class=\"string\">'train_label'</span>] = _change_one_hot_label(dataset[<span class=\"string\">'train_label'</span>])</span><br><span class=\"line\">        dataset[<span class=\"string\">'test_label'</span>] = _change_one_hot_label(dataset[<span class=\"string\">'test_label'</span>])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> flatten:</span><br><span class=\"line\">         <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> (<span class=\"string\">'train_img'</span>, <span class=\"string\">'test_img'</span>):</span><br><span class=\"line\">            dataset[key] = dataset[key].reshape(<span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (dataset[<span class=\"string\">'train_img'</span>], dataset[<span class=\"string\">'train_label'</span>]), (dataset[<span class=\"string\">'test_img'</span>], dataset[<span class=\"string\">'test_label'</span>])</span><br></pre></td></tr></table></figure>\n\n<p>load_mnist函数以<strong>“(训练图像,训练标签),(测试图像,测试标签)”</strong>的形式返回读入的MNIST数据。</p>\n<p>此外,还可以像<strong>load_mnist(normalize=True,flatten=True,one_hot_label=False)</strong>这样,设置3个参数。</p>\n<ul>\n<li>第1个参数normalize设置是否将输入图像正规化为0.0-1.0的值。如果将该参数设置为 False,则输入图像的像素会保持原来的0-255。</li>\n<li>第2个参数 flatten设置是否展开输入图像(变成一维数组)。如果将该参数设置为 False,则输入图像为1×28×28的三维数组;若设置为True,则输入图像会保存为由784个元素构成的一维数组。</li>\n<li>第3个参数one_hot_label设置是否将标签保存为one-hot表示(one-hot representation)。one-hot表示是仅正确解标签为1,其余皆为0的数组,就像[0,0,1,0,0,0,0,0,0,0]这样。当one_hot_label为Fase时,只是像7、2这样简单保存正确解标签;当 one_hot_label为True时,标签则保存为one-hot表示。</li>\n</ul>\n<blockquote>\n<p>PS:想获取完整的手写数字识别源码请访问我的GitHub：<br><a href=\"https://github.com/NUISTGY/Codes-of-fish-book.git\">https://github.com/NUISTGY/Codes-of-fish-book.git</a></p>\n</blockquote>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h2 id=\"源码（python）\"><a href=\"#源码（python）\" class=\"headerlink\" title=\"源码（python）\"></a>源码（python）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">raise</span> ImportError(<span class=\"string\">'You should use Python 3.x'</span>)</span><br><span class=\"line\"><span class=\"keyword\">import</span> os.path</span><br><span class=\"line\"><span class=\"keyword\">import</span> gzip</span><br><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">url_base = <span class=\"string\">'http://yann.lecun.com/exdb/mnist/'</span></span><br><span class=\"line\">key_file = &#123;</span><br><span class=\"line\">    <span class=\"string\">'train_img'</span>:<span class=\"string\">'train-images-idx3-ubyte.gz'</span>,</span><br><span class=\"line\">    <span class=\"string\">'train_label'</span>:<span class=\"string\">'train-labels-idx1-ubyte.gz'</span>,</span><br><span class=\"line\">    <span class=\"string\">'test_img'</span>:<span class=\"string\">'t10k-images-idx3-ubyte.gz'</span>,</span><br><span class=\"line\">    <span class=\"string\">'test_label'</span>:<span class=\"string\">'t10k-labels-idx1-ubyte.gz'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dataset_dir = os.path.dirname(os.path.abspath(__file__))</span><br><span class=\"line\">save_file = dataset_dir + <span class=\"string\">\"/mnist.pkl\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">train_num = <span class=\"number\">60000</span></span><br><span class=\"line\">test_num = <span class=\"number\">10000</span></span><br><span class=\"line\">img_dim = (<span class=\"number\">1</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>)</span><br><span class=\"line\">img_size = <span class=\"number\">784</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_download</span><span class=\"params\">(file_name)</span>:</span></span><br><span class=\"line\">    file_path = dataset_dir + <span class=\"string\">\"/\"</span> + file_name</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> os.path.exists(file_path):</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"Downloading \"</span> + file_name + <span class=\"string\">\" ... \"</span>)</span><br><span class=\"line\">    urllib.request.urlretrieve(url_base + file_name, file_path)</span><br><span class=\"line\">    print(<span class=\"string\">\"Done\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">download_mnist</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> key_file.values():</span><br><span class=\"line\">       _download(v)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_load_label</span><span class=\"params\">(file_name)</span>:</span></span><br><span class=\"line\">    file_path = dataset_dir + <span class=\"string\">\"/\"</span> + file_name</span><br><span class=\"line\">    </span><br><span class=\"line\">    print(<span class=\"string\">\"Converting \"</span> + file_name + <span class=\"string\">\" to NumPy Array ...\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> gzip.open(file_path, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            labels = np.frombuffer(f.read(), np.uint8, offset=<span class=\"number\">8</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"Done\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> labels</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_load_img</span><span class=\"params\">(file_name)</span>:</span></span><br><span class=\"line\">    file_path = dataset_dir + <span class=\"string\">\"/\"</span> + file_name</span><br><span class=\"line\">    </span><br><span class=\"line\">    print(<span class=\"string\">\"Converting \"</span> + file_name + <span class=\"string\">\" to NumPy Array ...\"</span>)    </span><br><span class=\"line\">    <span class=\"keyword\">with</span> gzip.open(file_path, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            data = np.frombuffer(f.read(), np.uint8, offset=<span class=\"number\">16</span>)</span><br><span class=\"line\">    data = data.reshape(<span class=\"number\">-1</span>, img_size)</span><br><span class=\"line\">    print(<span class=\"string\">\"Done\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_convert_numpy</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    dataset = &#123;&#125;</span><br><span class=\"line\">    dataset[<span class=\"string\">'train_img'</span>] =  _load_img(key_file[<span class=\"string\">'train_img'</span>])</span><br><span class=\"line\">    dataset[<span class=\"string\">'train_label'</span>] = _load_label(key_file[<span class=\"string\">'train_label'</span>])    </span><br><span class=\"line\">    dataset[<span class=\"string\">'test_img'</span>] = _load_img(key_file[<span class=\"string\">'test_img'</span>])</span><br><span class=\"line\">    dataset[<span class=\"string\">'test_label'</span>] = _load_label(key_file[<span class=\"string\">'test_label'</span>])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> dataset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_mnist</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    download_mnist()</span><br><span class=\"line\">    dataset = _convert_numpy()</span><br><span class=\"line\">    print(<span class=\"string\">\"Creating pickle file ...\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(save_file, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        pickle.dump(dataset, f, <span class=\"number\">-1</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"Done!\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_change_one_hot_label</span><span class=\"params\">(X)</span>:</span></span><br><span class=\"line\">    T = np.zeros((X.size, <span class=\"number\">10</span>))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> idx, row <span class=\"keyword\">in</span> enumerate(T):</span><br><span class=\"line\">        row[X[idx]] = <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> T</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load_mnist</span><span class=\"params\">(normalize=True, flatten=True, one_hot_label=False)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"读入MNIST数据集</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    Parameters</span></span><br><span class=\"line\"><span class=\"string\">    ----------</span></span><br><span class=\"line\"><span class=\"string\">    normalize : 将图像的像素值正规化为0.0~1.0</span></span><br><span class=\"line\"><span class=\"string\">    one_hot_label : </span></span><br><span class=\"line\"><span class=\"string\">        one_hot_label为True的情况下，标签作为one-hot数组返回</span></span><br><span class=\"line\"><span class=\"string\">        one-hot数组是指[0,0,1,0,0,0,0,0,0,0]这样的数组</span></span><br><span class=\"line\"><span class=\"string\">    flatten : 是否将图像展开为一维数组</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    Returns</span></span><br><span class=\"line\"><span class=\"string\">    -------</span></span><br><span class=\"line\"><span class=\"string\">    (训练图像, 训练标签), (测试图像, 测试标签)</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(save_file):</span><br><span class=\"line\">        init_mnist()</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(save_file, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        dataset = pickle.load(f)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> normalize:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> (<span class=\"string\">'train_img'</span>, <span class=\"string\">'test_img'</span>):</span><br><span class=\"line\">            dataset[key] = dataset[key].astype(np.float32)</span><br><span class=\"line\">            dataset[key] /= <span class=\"number\">255.0</span></span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"keyword\">if</span> one_hot_label:</span><br><span class=\"line\">        dataset[<span class=\"string\">'train_label'</span>] = _change_one_hot_label(dataset[<span class=\"string\">'train_label'</span>])</span><br><span class=\"line\">        dataset[<span class=\"string\">'test_label'</span>] = _change_one_hot_label(dataset[<span class=\"string\">'test_label'</span>])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> flatten:</span><br><span class=\"line\">         <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> (<span class=\"string\">'train_img'</span>, <span class=\"string\">'test_img'</span>):</span><br><span class=\"line\">            dataset[key] = dataset[key].reshape(<span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (dataset[<span class=\"string\">'train_img'</span>], dataset[<span class=\"string\">'train_label'</span>]), (dataset[<span class=\"string\">'test_img'</span>], dataset[<span class=\"string\">'test_label'</span>]) </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    init_mnist()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"load-mnist函数讲解\"><a href=\"#load-mnist函数讲解\" class=\"headerlink\" title=\"load_mnist函数讲解\"></a>load_mnist函数讲解</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load_mnist</span><span class=\"params\">(normalize=True, flatten=True, one_hot_label=False)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"读入MNIST数据集</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    Parameters</span></span><br><span class=\"line\"><span class=\"string\">    ----------</span></span><br><span class=\"line\"><span class=\"string\">    normalize : 将图像的像素值正规化为0.0~1.0</span></span><br><span class=\"line\"><span class=\"string\">    one_hot_label : </span></span><br><span class=\"line\"><span class=\"string\">        one_hot_label为True的情况下，标签作为one-hot数组返回</span></span><br><span class=\"line\"><span class=\"string\">        one-hot数组是指[0,0,1,0,0,0,0,0,0,0]这样的数组</span></span><br><span class=\"line\"><span class=\"string\">    flatten : 是否将图像展开为一维数组</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    Returns</span></span><br><span class=\"line\"><span class=\"string\">    -------</span></span><br><span class=\"line\"><span class=\"string\">    (训练图像, 训练标签), (测试图像, 测试标签)</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(save_file):</span><br><span class=\"line\">        init_mnist()</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(save_file, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        dataset = pickle.load(f)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> normalize:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> (<span class=\"string\">'train_img'</span>, <span class=\"string\">'test_img'</span>):</span><br><span class=\"line\">            dataset[key] = dataset[key].astype(np.float32)</span><br><span class=\"line\">            dataset[key] /= <span class=\"number\">255.0</span></span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"keyword\">if</span> one_hot_label:</span><br><span class=\"line\">        dataset[<span class=\"string\">'train_label'</span>] = _change_one_hot_label(dataset[<span class=\"string\">'train_label'</span>])</span><br><span class=\"line\">        dataset[<span class=\"string\">'test_label'</span>] = _change_one_hot_label(dataset[<span class=\"string\">'test_label'</span>])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> flatten:</span><br><span class=\"line\">         <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> (<span class=\"string\">'train_img'</span>, <span class=\"string\">'test_img'</span>):</span><br><span class=\"line\">            dataset[key] = dataset[key].reshape(<span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (dataset[<span class=\"string\">'train_img'</span>], dataset[<span class=\"string\">'train_label'</span>]), (dataset[<span class=\"string\">'test_img'</span>], dataset[<span class=\"string\">'test_label'</span>])</span><br></pre></td></tr></table></figure>\n\n<p>load_mnist函数以<strong>“(训练图像,训练标签),(测试图像,测试标签)”</strong>的形式返回读入的MNIST数据。</p>\n<p>此外,还可以像<strong>load_mnist(normalize=True,flatten=True,one_hot_label=False)</strong>这样,设置3个参数。</p>\n<ul>\n<li>第1个参数normalize设置是否将输入图像正规化为0.0-1.0的值。如果将该参数设置为 False,则输入图像的像素会保持原来的0-255。</li>\n<li>第2个参数 flatten设置是否展开输入图像(变成一维数组)。如果将该参数设置为 False,则输入图像为1×28×28的三维数组;若设置为True,则输入图像会保存为由784个元素构成的一维数组。</li>\n<li>第3个参数one_hot_label设置是否将标签保存为one-hot表示(one-hot representation)。one-hot表示是仅正确解标签为1,其余皆为0的数组,就像[0,0,1,0,0,0,0,0,0,0]这样。当one_hot_label为Fase时,只是像7、2这样简单保存正确解标签;当 one_hot_label为True时,标签则保存为one-hot表示。</li>\n</ul>\n<blockquote>\n<p>PS:想获取完整的手写数字识别源码请访问我的GitHub：<br><a href=\"https://github.com/NUISTGY/Codes-of-fish-book.git\">https://github.com/NUISTGY/Codes-of-fish-book.git</a></p>\n</blockquote>\n"},{"title":"✨Deep-High-Resolution Representation Learning for Cross-Resolution Person Re-identification","date":"2021-10-06T16:00:00.000Z","_content":"\n<div align=\"center\">\n  \n[**<front size=5>Journal of IEEE TIP (SCI-Q1 Top)</front>**](https://ieeexplore.ieee.org/document/9591273/authors#citations)\n\n<center>\nG. Zhang, 👉Y. Ge👈, Z. Dong, H. Wang, Y. Zheng and S. Chen\n</center>\n\n![](https://img.gejiba.com/images/de85252fec31e625fecf220fa7b686b8.png)\n\n</div>\n\n## <a id=\"contents-\">Contents 🗒</a>\n- [<a id=\"contents-\">Contents 🗒</a>](#contents-)\n- [<a id=\"introduction-\">Introduction 🗒</a>](#introduction-)\n- [<a id=\"usage-\">Usage 🔧</a>](#usage-)\n- [<a id=\"result-\">Results 🏆</a>](#results-)\n- [<a id=\"acknowledgements-\">Acknowledgements 👍</a>](#acknowledgements-)\n\n## <a id=\"introduction-\">Introduction 🗒</a>\n\nWe propose a Deep High-Resolution Pseudo-Siamese Framework (PS-HRNet) to solve the cross-resolution person re-ID problem. Specifically, in order to restore the resolution of low-resolution images and make reasonable use of different channel information of feature maps, we introduce and innovate VDSR module with channel attention (CA) mechanism, named as VDSR-CA. Then we reform the HRNet by designing a novel representation head to extract discriminating features, named as HRNet-ReID. In addition, a pseudo-siamese framework is constructed to reduce the difference of feature distributions between low-resolution images and high-resolution images. The experimental results on five cross-resolution person datasets verify the effectiveness of our proposed approach. Compared with the state-of-the-art methods, our proposed PS-HRNet improves 3.4%, 6.2%, 2.5%,1.1% and 4.2% at Rank-1 on MLR-Market-1501, MLR-CUHK03, MLR-VIPeR, MLR-DukeMTMC-reID, and CAVIAR datasets, respectively.\n\n## <a id=\"usage-\">Usage 🔧</a>\n\nWe use apex (A PyTorch Extension) a Pytorch extension with NVIDIA-maintained utilities to streamline mixed precision and distributed training. Some of the code here will be included in upstream Pytorch eventually. The intention of Apex is to make up-to-date utilities available to users as quickly as possible.Installation instructions can be found here: https://github.com/NVIDIA/apex#quick-start.\n\nWe display the process of the algorithm as an ipynb file, you can use jupyter notebook to view and run it.\n\nYou may need HRNet-W32-C ImageNet pretrained models or learn more about HRNet: https://github.com/HRNet/HRNet-Image-Classification.git.\n\nWanna know more detail of the first phase？ Check this：https://github.com/NUISTGY/Person-re-identification-based-on-HRNet\n## <a id=\"result-\">Results 🏆</a>\n\n<div align=\"center\">\n\n![](https://img.gejiba.com/images/6670ce1bd1696c28e0fedd4fbefd676f.png)\n\n</div>\n\n## <a id=\"acknowledgements-\">Acknowledgements 👍</a>\n\n- This code is built on [HRNet-Image-Classification](https://github.com/HRNet/HRNet-Image-Classification) and [Person_reID_baseline_pytorch](https://github.com/layumi/Person_reID_baseline_pytorch). We thank the authors for sharing their codes. To the great spirit of open source!\n- Thank [Z.Dong](https://github.com/dzc2000) and [H.Wang](https://github.com/Rockdow), they are the most important contributors to the related work of the experiment. If you have any questions in the process of testing, you can send them by email or pose issues.\n- Thanks for the right to use the GPU workstation provided by Nanyang Technological University.\n","source":"_posts/PSHRNet.md","raw":"---\ntitle: ✨Deep-High-Resolution Representation Learning for Cross-Resolution Person Re-identification\ntags: [行人重识别,论文]\ncategories: [行人重识别]\ndate: 2021-10-7\n\n---\n\n<div align=\"center\">\n  \n[**<front size=5>Journal of IEEE TIP (SCI-Q1 Top)</front>**](https://ieeexplore.ieee.org/document/9591273/authors#citations)\n\n<center>\nG. Zhang, 👉Y. Ge👈, Z. Dong, H. Wang, Y. Zheng and S. Chen\n</center>\n\n![](https://img.gejiba.com/images/de85252fec31e625fecf220fa7b686b8.png)\n\n</div>\n\n## <a id=\"contents-\">Contents 🗒</a>\n- [<a id=\"contents-\">Contents 🗒</a>](#contents-)\n- [<a id=\"introduction-\">Introduction 🗒</a>](#introduction-)\n- [<a id=\"usage-\">Usage 🔧</a>](#usage-)\n- [<a id=\"result-\">Results 🏆</a>](#results-)\n- [<a id=\"acknowledgements-\">Acknowledgements 👍</a>](#acknowledgements-)\n\n## <a id=\"introduction-\">Introduction 🗒</a>\n\nWe propose a Deep High-Resolution Pseudo-Siamese Framework (PS-HRNet) to solve the cross-resolution person re-ID problem. Specifically, in order to restore the resolution of low-resolution images and make reasonable use of different channel information of feature maps, we introduce and innovate VDSR module with channel attention (CA) mechanism, named as VDSR-CA. Then we reform the HRNet by designing a novel representation head to extract discriminating features, named as HRNet-ReID. In addition, a pseudo-siamese framework is constructed to reduce the difference of feature distributions between low-resolution images and high-resolution images. The experimental results on five cross-resolution person datasets verify the effectiveness of our proposed approach. Compared with the state-of-the-art methods, our proposed PS-HRNet improves 3.4%, 6.2%, 2.5%,1.1% and 4.2% at Rank-1 on MLR-Market-1501, MLR-CUHK03, MLR-VIPeR, MLR-DukeMTMC-reID, and CAVIAR datasets, respectively.\n\n## <a id=\"usage-\">Usage 🔧</a>\n\nWe use apex (A PyTorch Extension) a Pytorch extension with NVIDIA-maintained utilities to streamline mixed precision and distributed training. Some of the code here will be included in upstream Pytorch eventually. The intention of Apex is to make up-to-date utilities available to users as quickly as possible.Installation instructions can be found here: https://github.com/NVIDIA/apex#quick-start.\n\nWe display the process of the algorithm as an ipynb file, you can use jupyter notebook to view and run it.\n\nYou may need HRNet-W32-C ImageNet pretrained models or learn more about HRNet: https://github.com/HRNet/HRNet-Image-Classification.git.\n\nWanna know more detail of the first phase？ Check this：https://github.com/NUISTGY/Person-re-identification-based-on-HRNet\n## <a id=\"result-\">Results 🏆</a>\n\n<div align=\"center\">\n\n![](https://img.gejiba.com/images/6670ce1bd1696c28e0fedd4fbefd676f.png)\n\n</div>\n\n## <a id=\"acknowledgements-\">Acknowledgements 👍</a>\n\n- This code is built on [HRNet-Image-Classification](https://github.com/HRNet/HRNet-Image-Classification) and [Person_reID_baseline_pytorch](https://github.com/layumi/Person_reID_baseline_pytorch). We thank the authors for sharing their codes. To the great spirit of open source!\n- Thank [Z.Dong](https://github.com/dzc2000) and [H.Wang](https://github.com/Rockdow), they are the most important contributors to the related work of the experiment. If you have any questions in the process of testing, you can send them by email or pose issues.\n- Thanks for the right to use the GPU workstation provided by Nanyang Technological University.\n","slug":"PSHRNet","published":1,"updated":"2022-09-06T02:29:36.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb9zb006f7svw76y2333y","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><div align=\"center\">\n\n<p><a href=\"https://ieeexplore.ieee.org/document/9591273/authors#citations\" target=\"_blank\" rel=\"noopener\"><strong><front size=\"5\">Journal of IEEE TIP (SCI-Q1 Top)</front></strong></a></p>\n<center>\nG. Zhang, 👉Y. Ge👈, Z. Dong, H. Wang, Y. Zheng and S. Chen\n</center>\n\n<p><img src=\"https://img.gejiba.com/images/de85252fec31e625fecf220fa7b686b8.png\" alt></p>\n</div>\n\n<h2 id=\"Contents-🗒\"><a href=\"#Contents-🗒\" class=\"headerlink\" title=\"Contents 🗒\"></a><a id=\"contents-\">Contents 🗒</a></h2><ul>\n<li><a href=\"#contents-\"><a id=\"contents-\">Contents 🗒</a></a></li>\n<li><a href=\"#introduction-\"><a id=\"introduction-\">Introduction 🗒</a></a></li>\n<li><a href=\"#usage-\"><a id=\"usage-\">Usage 🔧</a></a></li>\n<li><a href=\"#results-\"><a id=\"result-\">Results 🏆</a></a></li>\n<li><a href=\"#acknowledgements-\"><a id=\"acknowledgements-\">Acknowledgements 👍</a></a></li>\n</ul>\n<h2 id=\"Introduction-🗒\"><a href=\"#Introduction-🗒\" class=\"headerlink\" title=\"Introduction 🗒\"></a><a id=\"introduction-\">Introduction 🗒</a></h2><p>We propose a Deep High-Resolution Pseudo-Siamese Framework (PS-HRNet) to solve the cross-resolution person re-ID problem. Specifically, in order to restore the resolution of low-resolution images and make reasonable use of different channel information of feature maps, we introduce and innovate VDSR module with channel attention (CA) mechanism, named as VDSR-CA. Then we reform the HRNet by designing a novel representation head to extract discriminating features, named as HRNet-ReID. In addition, a pseudo-siamese framework is constructed to reduce the difference of feature distributions between low-resolution images and high-resolution images. The experimental results on five cross-resolution person datasets verify the effectiveness of our proposed approach. Compared with the state-of-the-art methods, our proposed PS-HRNet improves 3.4%, 6.2%, 2.5%,1.1% and 4.2% at Rank-1 on MLR-Market-1501, MLR-CUHK03, MLR-VIPeR, MLR-DukeMTMC-reID, and CAVIAR datasets, respectively.</p>\n<h2 id=\"Usage-🔧\"><a href=\"#Usage-🔧\" class=\"headerlink\" title=\"Usage 🔧\"></a><a id=\"usage-\">Usage 🔧</a></h2><p>We use apex (A PyTorch Extension) a Pytorch extension with NVIDIA-maintained utilities to streamline mixed precision and distributed training. Some of the code here will be included in upstream Pytorch eventually. The intention of Apex is to make up-to-date utilities available to users as quickly as possible.Installation instructions can be found here: <a href=\"https://github.com/NVIDIA/apex#quick-start\">https://github.com/NVIDIA/apex#quick-start</a>.</p>\n<p>We display the process of the algorithm as an ipynb file, you can use jupyter notebook to view and run it.</p>\n<p>You may need HRNet-W32-C ImageNet pretrained models or learn more about HRNet: <a href=\"https://github.com/HRNet/HRNet-Image-Classification.git\">https://github.com/HRNet/HRNet-Image-Classification.git</a>.</p>\n<p>Wanna know more detail of the first phase？ Check this：<a href=\"https://github.com/NUISTGY/Person-re-identification-based-on-HRNet\">https://github.com/NUISTGY/Person-re-identification-based-on-HRNet</a></p>\n<h2 id=\"Results-🏆\"><a href=\"#Results-🏆\" class=\"headerlink\" title=\"Results 🏆\"></a><a id=\"result-\">Results 🏆</a></h2><div align=\"center\">\n\n<p><img src=\"https://img.gejiba.com/images/6670ce1bd1696c28e0fedd4fbefd676f.png\" alt></p>\n</div>\n\n<h2 id=\"Acknowledgements-👍\"><a href=\"#Acknowledgements-👍\" class=\"headerlink\" title=\"Acknowledgements 👍\"></a><a id=\"acknowledgements-\">Acknowledgements 👍</a></h2><ul>\n<li>This code is built on <a href=\"https://github.com/HRNet/HRNet-Image-Classification\">HRNet-Image-Classification</a> and <a href=\"https://github.com/layumi/Person_reID_baseline_pytorch\">Person_reID_baseline_pytorch</a>. We thank the authors for sharing their codes. To the great spirit of open source!</li>\n<li>Thank <a href=\"https://github.com/dzc2000\">Z.Dong</a> and <a href=\"https://github.com/Rockdow\">H.Wang</a>, they are the most important contributors to the related work of the experiment. If you have any questions in the process of testing, you can send them by email or pose issues.</li>\n<li>Thanks for the right to use the GPU workstation provided by Nanyang Technological University.</li>\n</ul>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<div align=\"center\">\n\n<p><a href=\"https://ieeexplore.ieee.org/document/9591273/authors#citations\" target=\"_blank\" rel=\"noopener\"><strong><front size=\"5\">Journal of IEEE TIP (SCI-Q1 Top)</front></strong></a></p>\n<center>\nG. Zhang, 👉Y. Ge👈, Z. Dong, H. Wang, Y. Zheng and S. Chen\n</center>\n\n<p><img src=\"https://img.gejiba.com/images/de85252fec31e625fecf220fa7b686b8.png\" alt></p>\n</div>\n\n<h2 id=\"Contents-🗒\"><a href=\"#Contents-🗒\" class=\"headerlink\" title=\"Contents 🗒\"></a><a id=\"contents-\">Contents 🗒</a></h2><ul>\n<li><a href=\"#contents-\"><a id=\"contents-\">Contents 🗒</a></a></li>\n<li><a href=\"#introduction-\"><a id=\"introduction-\">Introduction 🗒</a></a></li>\n<li><a href=\"#usage-\"><a id=\"usage-\">Usage 🔧</a></a></li>\n<li><a href=\"#results-\"><a id=\"result-\">Results 🏆</a></a></li>\n<li><a href=\"#acknowledgements-\"><a id=\"acknowledgements-\">Acknowledgements 👍</a></a></li>\n</ul>\n<h2 id=\"Introduction-🗒\"><a href=\"#Introduction-🗒\" class=\"headerlink\" title=\"Introduction 🗒\"></a><a id=\"introduction-\">Introduction 🗒</a></h2><p>We propose a Deep High-Resolution Pseudo-Siamese Framework (PS-HRNet) to solve the cross-resolution person re-ID problem. Specifically, in order to restore the resolution of low-resolution images and make reasonable use of different channel information of feature maps, we introduce and innovate VDSR module with channel attention (CA) mechanism, named as VDSR-CA. Then we reform the HRNet by designing a novel representation head to extract discriminating features, named as HRNet-ReID. In addition, a pseudo-siamese framework is constructed to reduce the difference of feature distributions between low-resolution images and high-resolution images. The experimental results on five cross-resolution person datasets verify the effectiveness of our proposed approach. Compared with the state-of-the-art methods, our proposed PS-HRNet improves 3.4%, 6.2%, 2.5%,1.1% and 4.2% at Rank-1 on MLR-Market-1501, MLR-CUHK03, MLR-VIPeR, MLR-DukeMTMC-reID, and CAVIAR datasets, respectively.</p>\n<h2 id=\"Usage-🔧\"><a href=\"#Usage-🔧\" class=\"headerlink\" title=\"Usage 🔧\"></a><a id=\"usage-\">Usage 🔧</a></h2><p>We use apex (A PyTorch Extension) a Pytorch extension with NVIDIA-maintained utilities to streamline mixed precision and distributed training. Some of the code here will be included in upstream Pytorch eventually. The intention of Apex is to make up-to-date utilities available to users as quickly as possible.Installation instructions can be found here: <a href=\"https://github.com/NVIDIA/apex#quick-start\">https://github.com/NVIDIA/apex#quick-start</a>.</p>\n<p>We display the process of the algorithm as an ipynb file, you can use jupyter notebook to view and run it.</p>\n<p>You may need HRNet-W32-C ImageNet pretrained models or learn more about HRNet: <a href=\"https://github.com/HRNet/HRNet-Image-Classification.git\">https://github.com/HRNet/HRNet-Image-Classification.git</a>.</p>\n<p>Wanna know more detail of the first phase？ Check this：<a href=\"https://github.com/NUISTGY/Person-re-identification-based-on-HRNet\">https://github.com/NUISTGY/Person-re-identification-based-on-HRNet</a></p>\n<h2 id=\"Results-🏆\"><a href=\"#Results-🏆\" class=\"headerlink\" title=\"Results 🏆\"></a><a id=\"result-\">Results 🏆</a></h2><div align=\"center\">\n\n<p><img src=\"https://img.gejiba.com/images/6670ce1bd1696c28e0fedd4fbefd676f.png\" alt></p>\n</div>\n\n<h2 id=\"Acknowledgements-👍\"><a href=\"#Acknowledgements-👍\" class=\"headerlink\" title=\"Acknowledgements 👍\"></a><a id=\"acknowledgements-\">Acknowledgements 👍</a></h2><ul>\n<li>This code is built on <a href=\"https://github.com/HRNet/HRNet-Image-Classification\">HRNet-Image-Classification</a> and <a href=\"https://github.com/layumi/Person_reID_baseline_pytorch\">Person_reID_baseline_pytorch</a>. We thank the authors for sharing their codes. To the great spirit of open source!</li>\n<li>Thank <a href=\"https://github.com/dzc2000\">Z.Dong</a> and <a href=\"https://github.com/Rockdow\">H.Wang</a>, they are the most important contributors to the related work of the experiment. If you have any questions in the process of testing, you can send them by email or pose issues.</li>\n<li>Thanks for the right to use the GPU workstation provided by Nanyang Technological University.</li>\n</ul>\n"},{"title":"Matlab之ineterp1插值","date":"2020-02-20T16:00:00.000Z","_content":"\n```Matlab\n%一维插值\n\nx = 0 : pi/4 : 2 * pi;     %x的样本值\ny = sin(x);                %y的样本值\nxx = 0 : 0.5 : 2 * pi;     %目标的x值\n%分段线性插值（默认）\ny1 = interp1(x,y,xx);\nsubplot(2,2,1);plot(x,y,'o',xx,y1,'r');\ntitle('分段线性插值')\n\n%临近插值\ny2 = interp1(x,y,xx,'nearnest');\nsubplot(2,2,2);plot(x,y,'o',xx,y2,'r');\ntitle('邻近插值')\n\n%球面线性插值\ny3 = interp1(x,y,xx,'spline');\nsubplot(2,2,3);plot(x,y,'o',xx,y3,'r');\ntitle('球面线性插值')\n\n%三次多项式插值\ny4 = interp1(x,y,xx,'PCHIP');\nsubplot(2,2,4);plot(x,y,'o',xx,y4,'r');\ntitle('三次多项式插值')\n```\n**输出结果**\n\n![ans](https://s3.bmp.ovh/imgs/2022/09/05/7f0cd8ca7c6c30fd.png \"ans\")\n","source":"_posts/Matlab数模(1).md","raw":"---\ntitle: Matlab之ineterp1插值\ntags: [Matlab,数学建模]\n\ncategories: [科学计算]\n\ndate: 2020-2-21\n---\n\n```Matlab\n%一维插值\n\nx = 0 : pi/4 : 2 * pi;     %x的样本值\ny = sin(x);                %y的样本值\nxx = 0 : 0.5 : 2 * pi;     %目标的x值\n%分段线性插值（默认）\ny1 = interp1(x,y,xx);\nsubplot(2,2,1);plot(x,y,'o',xx,y1,'r');\ntitle('分段线性插值')\n\n%临近插值\ny2 = interp1(x,y,xx,'nearnest');\nsubplot(2,2,2);plot(x,y,'o',xx,y2,'r');\ntitle('邻近插值')\n\n%球面线性插值\ny3 = interp1(x,y,xx,'spline');\nsubplot(2,2,3);plot(x,y,'o',xx,y3,'r');\ntitle('球面线性插值')\n\n%三次多项式插值\ny4 = interp1(x,y,xx,'PCHIP');\nsubplot(2,2,4);plot(x,y,'o',xx,y4,'r');\ntitle('三次多项式插值')\n```\n**输出结果**\n\n![ans](https://s3.bmp.ovh/imgs/2022/09/05/7f0cd8ca7c6c30fd.png \"ans\")\n","slug":"Matlab数模(1)","published":1,"updated":"2022-09-05T05:22:08.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb9zf006i7svwnpze4pl7","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">%一维插值</span></span><br><span class=\"line\"></span><br><span class=\"line\">x = <span class=\"number\">0</span> : <span class=\"built_in\">pi</span>/<span class=\"number\">4</span> : <span class=\"number\">2</span> * <span class=\"built_in\">pi</span>;     <span class=\"comment\">%x的样本值</span></span><br><span class=\"line\">y = <span class=\"built_in\">sin</span>(x);                <span class=\"comment\">%y的样本值</span></span><br><span class=\"line\">xx = <span class=\"number\">0</span> : <span class=\"number\">0.5</span> : <span class=\"number\">2</span> * <span class=\"built_in\">pi</span>;     <span class=\"comment\">%目标的x值</span></span><br><span class=\"line\"><span class=\"comment\">%分段线性插值（默认）</span></span><br><span class=\"line\">y1 = interp1(x,y,xx);</span><br><span class=\"line\">subplot(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>);<span class=\"built_in\">plot</span>(x,y,<span class=\"string\">'o'</span>,xx,y1,<span class=\"string\">'r'</span>);</span><br><span class=\"line\">title(<span class=\"string\">'分段线性插值'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">%临近插值</span></span><br><span class=\"line\">y2 = interp1(x,y,xx,<span class=\"string\">'nearnest'</span>);</span><br><span class=\"line\">subplot(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>);<span class=\"built_in\">plot</span>(x,y,<span class=\"string\">'o'</span>,xx,y2,<span class=\"string\">'r'</span>);</span><br><span class=\"line\">title(<span class=\"string\">'邻近插值'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">%球面线性插值</span></span><br><span class=\"line\">y3 = interp1(x,y,xx,<span class=\"string\">'spline'</span>);</span><br><span class=\"line\">subplot(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);<span class=\"built_in\">plot</span>(x,y,<span class=\"string\">'o'</span>,xx,y3,<span class=\"string\">'r'</span>);</span><br><span class=\"line\">title(<span class=\"string\">'球面线性插值'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">%三次多项式插值</span></span><br><span class=\"line\">y4 = interp1(x,y,xx,<span class=\"string\">'PCHIP'</span>);</span><br><span class=\"line\">subplot(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>);<span class=\"built_in\">plot</span>(x,y,<span class=\"string\">'o'</span>,xx,y4,<span class=\"string\">'r'</span>);</span><br><span class=\"line\">title(<span class=\"string\">'三次多项式插值'</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出结果</strong></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/7f0cd8ca7c6c30fd.png\" alt=\"ans\" title=\"ans\"></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">%一维插值</span></span><br><span class=\"line\"></span><br><span class=\"line\">x = <span class=\"number\">0</span> : <span class=\"built_in\">pi</span>/<span class=\"number\">4</span> : <span class=\"number\">2</span> * <span class=\"built_in\">pi</span>;     <span class=\"comment\">%x的样本值</span></span><br><span class=\"line\">y = <span class=\"built_in\">sin</span>(x);                <span class=\"comment\">%y的样本值</span></span><br><span class=\"line\">xx = <span class=\"number\">0</span> : <span class=\"number\">0.5</span> : <span class=\"number\">2</span> * <span class=\"built_in\">pi</span>;     <span class=\"comment\">%目标的x值</span></span><br><span class=\"line\"><span class=\"comment\">%分段线性插值（默认）</span></span><br><span class=\"line\">y1 = interp1(x,y,xx);</span><br><span class=\"line\">subplot(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>);<span class=\"built_in\">plot</span>(x,y,<span class=\"string\">'o'</span>,xx,y1,<span class=\"string\">'r'</span>);</span><br><span class=\"line\">title(<span class=\"string\">'分段线性插值'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">%临近插值</span></span><br><span class=\"line\">y2 = interp1(x,y,xx,<span class=\"string\">'nearnest'</span>);</span><br><span class=\"line\">subplot(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>);<span class=\"built_in\">plot</span>(x,y,<span class=\"string\">'o'</span>,xx,y2,<span class=\"string\">'r'</span>);</span><br><span class=\"line\">title(<span class=\"string\">'邻近插值'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">%球面线性插值</span></span><br><span class=\"line\">y3 = interp1(x,y,xx,<span class=\"string\">'spline'</span>);</span><br><span class=\"line\">subplot(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);<span class=\"built_in\">plot</span>(x,y,<span class=\"string\">'o'</span>,xx,y3,<span class=\"string\">'r'</span>);</span><br><span class=\"line\">title(<span class=\"string\">'球面线性插值'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">%三次多项式插值</span></span><br><span class=\"line\">y4 = interp1(x,y,xx,<span class=\"string\">'PCHIP'</span>);</span><br><span class=\"line\">subplot(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>);<span class=\"built_in\">plot</span>(x,y,<span class=\"string\">'o'</span>,xx,y4,<span class=\"string\">'r'</span>);</span><br><span class=\"line\">title(<span class=\"string\">'三次多项式插值'</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出结果</strong></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/7f0cd8ca7c6c30fd.png\" alt=\"ans\" title=\"ans\"></p>\n"},{"title":"Matlab之二维插值：估测海底某曲面地形","date":"2020-02-20T16:00:00.000Z","_content":"\n```Matlab\n% 2维插值示例：估测海底某曲面地形\nx = [129,140,103.5,88,185.5,195,105,157.5,107.5,77,81,162,162,117.5];\ny = [7.5,141.5,23,147,22.5,137.5,85.5,-6.5,-81,3,56.5,-66.5,84,-33.5];\nz = -[4,8,6,8,6,8,8,9,9,8,8,0,4,9];\nxmm = minmax(x);\nymm = minmax(y);\nxi = xmm(1):2.5:xmm(2);\nyi = ymm(1):2.5:ymm(2);\nz_interp = griddata(x,y,z,xi,yi','V4');     %griddata插值同interp2，但是对数据要求不严格\nsurf(xi,yi,z_interp);\n```\n**输出结果**\n\n![ans](https://s3.bmp.ovh/imgs/2022/09/05/a671546bee229037.png \"ans\")\n\n![ans](https://s3.bmp.ovh/imgs/2022/09/05/b516d0a759d6dc00.png \"ans\")\n> PS:深度大于0的部分应手动舍弃，边值区域的二维插值会遇到问题。\n","source":"_posts/Matlab数模(2).md","raw":"---\ntitle: Matlab之二维插值：估测海底某曲面地形\ntags: [Matlab,数学建模]\ncategories: [科学计算]\ndate: 2020-2-21\n\n---\n\n```Matlab\n% 2维插值示例：估测海底某曲面地形\nx = [129,140,103.5,88,185.5,195,105,157.5,107.5,77,81,162,162,117.5];\ny = [7.5,141.5,23,147,22.5,137.5,85.5,-6.5,-81,3,56.5,-66.5,84,-33.5];\nz = -[4,8,6,8,6,8,8,9,9,8,8,0,4,9];\nxmm = minmax(x);\nymm = minmax(y);\nxi = xmm(1):2.5:xmm(2);\nyi = ymm(1):2.5:ymm(2);\nz_interp = griddata(x,y,z,xi,yi','V4');     %griddata插值同interp2，但是对数据要求不严格\nsurf(xi,yi,z_interp);\n```\n**输出结果**\n\n![ans](https://s3.bmp.ovh/imgs/2022/09/05/a671546bee229037.png \"ans\")\n\n![ans](https://s3.bmp.ovh/imgs/2022/09/05/b516d0a759d6dc00.png \"ans\")\n> PS:深度大于0的部分应手动舍弃，边值区域的二维插值会遇到问题。\n","slug":"Matlab数模(2)","published":1,"updated":"2022-09-05T05:24:03.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb9zg006j7svw62t085yi","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">% 2维插值示例：估测海底某曲面地形</span></span><br><span class=\"line\">x = [<span class=\"number\">129</span>,<span class=\"number\">140</span>,<span class=\"number\">103.5</span>,<span class=\"number\">88</span>,<span class=\"number\">185.5</span>,<span class=\"number\">195</span>,<span class=\"number\">105</span>,<span class=\"number\">157.5</span>,<span class=\"number\">107.5</span>,<span class=\"number\">77</span>,<span class=\"number\">81</span>,<span class=\"number\">162</span>,<span class=\"number\">162</span>,<span class=\"number\">117.5</span>];</span><br><span class=\"line\">y = [<span class=\"number\">7.5</span>,<span class=\"number\">141.5</span>,<span class=\"number\">23</span>,<span class=\"number\">147</span>,<span class=\"number\">22.5</span>,<span class=\"number\">137.5</span>,<span class=\"number\">85.5</span>,<span class=\"number\">-6.5</span>,<span class=\"number\">-81</span>,<span class=\"number\">3</span>,<span class=\"number\">56.5</span>,<span class=\"number\">-66.5</span>,<span class=\"number\">84</span>,<span class=\"number\">-33.5</span>];</span><br><span class=\"line\">z = -[<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">8</span>,<span class=\"number\">0</span>,<span class=\"number\">4</span>,<span class=\"number\">9</span>];</span><br><span class=\"line\">xmm = minmax(x);</span><br><span class=\"line\">ymm = minmax(y);</span><br><span class=\"line\">xi = xmm(<span class=\"number\">1</span>):<span class=\"number\">2.5</span>:xmm(<span class=\"number\">2</span>);</span><br><span class=\"line\">yi = ymm(<span class=\"number\">1</span>):<span class=\"number\">2.5</span>:ymm(<span class=\"number\">2</span>);</span><br><span class=\"line\">z_interp = griddata(x,y,z,xi,yi',<span class=\"string\">'V4'</span>);     <span class=\"comment\">%griddata插值同interp2，但是对数据要求不严格</span></span><br><span class=\"line\">surf(xi,yi,z_interp);</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出结果</strong></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/a671546bee229037.png\" alt=\"ans\" title=\"ans\"></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/b516d0a759d6dc00.png\" alt=\"ans\" title=\"ans\"></p>\n<blockquote>\n<p>PS:深度大于0的部分应手动舍弃，边值区域的二维插值会遇到问题。</p>\n</blockquote>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">% 2维插值示例：估测海底某曲面地形</span></span><br><span class=\"line\">x = [<span class=\"number\">129</span>,<span class=\"number\">140</span>,<span class=\"number\">103.5</span>,<span class=\"number\">88</span>,<span class=\"number\">185.5</span>,<span class=\"number\">195</span>,<span class=\"number\">105</span>,<span class=\"number\">157.5</span>,<span class=\"number\">107.5</span>,<span class=\"number\">77</span>,<span class=\"number\">81</span>,<span class=\"number\">162</span>,<span class=\"number\">162</span>,<span class=\"number\">117.5</span>];</span><br><span class=\"line\">y = [<span class=\"number\">7.5</span>,<span class=\"number\">141.5</span>,<span class=\"number\">23</span>,<span class=\"number\">147</span>,<span class=\"number\">22.5</span>,<span class=\"number\">137.5</span>,<span class=\"number\">85.5</span>,<span class=\"number\">-6.5</span>,<span class=\"number\">-81</span>,<span class=\"number\">3</span>,<span class=\"number\">56.5</span>,<span class=\"number\">-66.5</span>,<span class=\"number\">84</span>,<span class=\"number\">-33.5</span>];</span><br><span class=\"line\">z = -[<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">8</span>,<span class=\"number\">0</span>,<span class=\"number\">4</span>,<span class=\"number\">9</span>];</span><br><span class=\"line\">xmm = minmax(x);</span><br><span class=\"line\">ymm = minmax(y);</span><br><span class=\"line\">xi = xmm(<span class=\"number\">1</span>):<span class=\"number\">2.5</span>:xmm(<span class=\"number\">2</span>);</span><br><span class=\"line\">yi = ymm(<span class=\"number\">1</span>):<span class=\"number\">2.5</span>:ymm(<span class=\"number\">2</span>);</span><br><span class=\"line\">z_interp = griddata(x,y,z,xi,yi',<span class=\"string\">'V4'</span>);     <span class=\"comment\">%griddata插值同interp2，但是对数据要求不严格</span></span><br><span class=\"line\">surf(xi,yi,z_interp);</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出结果</strong></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/a671546bee229037.png\" alt=\"ans\" title=\"ans\"></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/b516d0a759d6dc00.png\" alt=\"ans\" title=\"ans\"></p>\n<blockquote>\n<p>PS:深度大于0的部分应手动舍弃，边值区域的二维插值会遇到问题。</p>\n</blockquote>\n"},{"title":"numpy数组和python列表的区别","date":"2020-03-20T16:00:00.000Z","_content":"\n1. numpy数组创建时是固定大小，python数组（list）是动态的。更改ndarray的大小将创建一个新数组并删除原来的数组。\n\n2. 元素类型区别。\n3. NumPy数组中的元素都需要具有相同的数据类型，因此在内存中的大小相同。\n\n4. python的List可以存放不同类型的元素。\n5. 例外情况：Python的原生数组里包含了NumPy的对象的时候，这种情况下就允许不同大小元素的数组。\n\n6. 数学操作执行效率高于原生python\n7. 越来越多的基于Python的科学和数学软件包使用NumPy数组","source":"_posts/numpy数组和python列表的区别.md","raw":"---\ntitle: numpy数组和python列表的区别\ntags: [python,numpy]\n\ncategories: [python]\ndate: 2020-3-21\n---\n\n1. numpy数组创建时是固定大小，python数组（list）是动态的。更改ndarray的大小将创建一个新数组并删除原来的数组。\n\n2. 元素类型区别。\n3. NumPy数组中的元素都需要具有相同的数据类型，因此在内存中的大小相同。\n\n4. python的List可以存放不同类型的元素。\n5. 例外情况：Python的原生数组里包含了NumPy的对象的时候，这种情况下就允许不同大小元素的数组。\n\n6. 数学操作执行效率高于原生python\n7. 越来越多的基于Python的科学和数学软件包使用NumPy数组","slug":"numpy数组和python列表的区别","published":1,"updated":"2022-09-05T03:49:28.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb9zm006n7svwbazhwa2h","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><ol>\n<li><p>numpy数组创建时是固定大小，python数组（list）是动态的。更改ndarray的大小将创建一个新数组并删除原来的数组。</p>\n</li>\n<li><p>元素类型区别。</p>\n</li>\n<li><p>NumPy数组中的元素都需要具有相同的数据类型，因此在内存中的大小相同。</p>\n</li>\n<li><p>python的List可以存放不同类型的元素。</p>\n</li>\n<li><p>例外情况：Python的原生数组里包含了NumPy的对象的时候，这种情况下就允许不同大小元素的数组。</p>\n</li>\n<li><p>数学操作执行效率高于原生python</p>\n</li>\n<li><p>越来越多的基于Python的科学和数学软件包使用NumPy数组</p>\n</li>\n</ol>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<ol>\n<li><p>numpy数组创建时是固定大小，python数组（list）是动态的。更改ndarray的大小将创建一个新数组并删除原来的数组。</p>\n</li>\n<li><p>元素类型区别。</p>\n</li>\n<li><p>NumPy数组中的元素都需要具有相同的数据类型，因此在内存中的大小相同。</p>\n</li>\n<li><p>python的List可以存放不同类型的元素。</p>\n</li>\n<li><p>例外情况：Python的原生数组里包含了NumPy的对象的时候，这种情况下就允许不同大小元素的数组。</p>\n</li>\n<li><p>数学操作执行效率高于原生python</p>\n</li>\n<li><p>越来越多的基于Python的科学和数学软件包使用NumPy数组</p>\n</li>\n</ol>\n"},{"title":"Servlet进化之旅 —— 从ServerSocket编程到SpringMVC框架开发","date":"2022-09-07T16:00:00.000Z","_content":"\n# 前言\n**<center>本篇主要记录Java后端开发学习过程中关于Servlet相关技术路线的梳理和总结</center>**\n\n按技术迭代顺序依次从下述几个Web技术开展梳理：\n- ServerSocket编程\n- Web服务器\n- Servlet规范\n- SpringMCV框架\n\n# ServerSocket编程\n\n**<center>本部分通过手撸一个基于Java的简易HTTP服务器来体会最原初的JavaWeb后端开发过程</center>**\n\n## 客户端\n\n这里客户端就不使用Java代码编写了，可以考虑使用最基本的浏览器或者后端测试工具如PostMan。\n\n## 服务端\n\n- 第一步我们先创建ServerSocket，监听8080端口\n- 第二步接收到请求后把流在控制台进行输出\n\n```java\npublic class HttpServer {\n\n    public static void main(String[] args) throws IOException {\n        ServerSocket serverSocket = null;\n        Socket socket = null;\n        InputStream is = null;\n        InputStreamReader isr = null;\n        BufferedReader br = null;\n        OutputStream os = null;\n        PrintWriter pw = null;\n        try {\n            serverSocket = new ServerSocket(8080);\n            //调用accept()方法开始监听，等待客户端的连接\n            while ((socket = serverSocket.accept()) != null ){\n                List<String> lines = IOUtils.readLines(socket.getInputStream(), \"utf-8\");\n                for (String line : lines) {\n                    System.out.println(line);\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            //关闭资源\n            pw.close();\n            os.close();\n            br.close();\n            isr.close();\n            is.close();\n            socket.close();\n            serverSocket.close();\n        }\n    }\n}\n```\n打印到控制台是以下这段文本:\n![](https://img.gejiba.com/images/e49002a3b302ec04645132ea159a3f8a.png)\n\n**解释一下：** 上述代码监听了8080端口并将客户端的访问请求打印为字符串，即控制台中的文本信息，只要我们的服务器解析这段字符串然后拼接成request，就能封装HTTP请求。但是这时观察浏览器界面发现没有任何响应。因为我们编写的HTTP服务器什么都没返回就关闭了连接。如果要浏览器正确的显示我们想要看到的helloword。同样也要拼接成浏览器能理解的http协议响应格式才能正确被解析。\n\n下面继续改动代码，让http返回200成功，并返回helloword：\n```java\npublic class HttpServer {\n\n    public static void main(String[] args) throws IOException {\n        ServerSocket serverSocket = null;\n        Socket socket = null;\n        InputStream is = null;\n        InputStreamReader isr = null;\n        BufferedReader br = null;\n        OutputStream os = null;\n        PrintWriter pw = null;\n        try {\n            serverSocket = new ServerSocket(8080);\n            //调用accept()方法开始监听，等待客户端的连接\n            while ((socket = serverSocket.accept()) != null ){\n                //获取输出流，响应客户端的请求\n                os = socket.getOutputStream();\n                pw = new PrintWriter(os);\n                pw.write(\"HTTP/1.1 200 OK\\n\" +\n                        \"Date: Fri, 7 Sept 2022 06:07:21 GMT\\n\" +\n                        \"Content-Type: text/html; charset=UTF-8\\n\" +\n                        \"\\n\" +\n                        \"<html>\\n\" +\n                        \"      <head></head>\\n\" +\n                        \"      <body>\\n\" +\n                        \"            helloWord!\\n\" +\n                        \"      </body>\\n\" +\n                        \"</html>\");\n                pw.flush();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            //关闭资源\n            pw.close();\n            os.close();\n            br.close();\n            isr.close();\n            is.close();\n            socket.close();\n            serverSocket.close();\n        }\n    }\n}\n```\n浏览器访问：localhost:8080 可见：\n![](https://img.gejiba.com/images/e252a903e9cf4d35eaa77788489e4a4c.png)\n\n## 总结\n\n上述示例实现了一个最简单的基于HTTP协议的Java服务器后端，里面并不包含对request请求字符串的处理，仅仅是打印了它，response也仅仅是按HTTP协议的规定封装了一句“helloworld！”。如此简易原始的HTTP服务器的整个访问和回复过程是如此繁琐，可见新技术出现的必要性。\n\n# Web服务器\n\n**<center>\nWeb服务器是一个应该程序(软件)，对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作，让Web开发更加便捷。主要功能是\"提供网上信息浏览服务\"</center>**\n\n![](https://img.gejiba.com/images/d2eca8a0000dc6e254f5bcf9300b8418.png)\n\n下面以Apache Tomcat服务器为例展示一个最简单的HTTP Web服务。\n\n## 创建展示页面\n\n在Tomcat根目录的**Webapps**下创建一个test文件夹，内部创建hello.html文件用于返回请求页面👇👇\n\n![](https://img.gejiba.com/images/ba7d619e9f80190fa9b379c01b9ac67d.png)\n\n## 启动服务器并请求资源\n\n- 启动Tomcat根目录下的**bin/startup.bat**\n- 使用Post访问**localhost:8080/test/hello.html**\n\n![](https://img.gejiba.com/images/2c4d42954c3df74e89901c3eac879458.png)\n\n## 总结\n\n1. Web服务器作用?\n➢封装HTTP协议操作，简化开发\n➢可以将Web项目部署到服务器中，对外提供网上浏览服务\n2. 什么是Tomcat?\nTomcat是一个轻量级的Web服务器， 支持Servlet/JSP少量JavaEE规范，也称为Web容器，Servlet容器，Servlet依赖于它或其他Web服务器才能正常运行。\n\n# Servlet规范\n\n## Servlet规范简介\n\nServlet（Server Applet，服务端小程序，是服务端的一小部分），全称Java Servlet，未有中文译文。是用Java编写的服务器端程序。其主要功能在于交互式地浏览和修改数据，生成动态Web内容。狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。\n\n### 补充：Servlet和Web服务器的关系\n首先要明白我们从来不会在Servlet中写什么监听8080端口的代码，Servlet不会直接和客户端打交道！这些全被Web服务器封装了。\n\n那请求是怎么来到Servlet的呢？答案是Servlet容器，比如我们最常用的Tomcat。Servlet都是部署在一个容器中的，不然你的Servlet根本不起作用。\n\nTomcat才是与客户端直接打交道的家伙，它监听了端口，请求过来后，根据URL等信息，确定要将请求交给哪个Servlet去处理，然后调用那个Servlet的service方法，service方法返回一个response对象，Tomcat再把这个respond返回给客户端。\n\n## 接口代码\n```Java\npackage Javax.Servlet;\n\nimport Java.io.IOException;\n\npublic interface Servlet {\n    void init(ServletConfig var1) throws ServletException;\n\n    ServletConfig getServletConfig();\n\n    void service(ServletRequest var1, ServletResponse var2) throws ServletException, IOException;\n\n    String getServletInfo();\n\n    void destroy();\n}\n```\n\nServlet接口定义的是一套处理网络请求的规范，所有实现Servlet的类，都需要实现它的那五个方法，其中最主要的是两个声明周期方法init()和destory()，还有一个处理请求的service()。也就是说，所有实现Servlet接口的类，或者说，所有想要处理网络请求的类，都需要回答这三个问题：\n\n- 你初始化时要做什么？\n- 你销毁时要做什么？\n- 你接收到请求时要做什么？\n\n## 生命周期\n\n1、客户端请求该 Servlet；\n\n2、Tomcat加载 Servlet 类到内存；\n\n3、Tomcat实例化并调用init()方法初始化该 Servlet；\n\n4、Tomcat调用service()（根据请求方法不同调用doGet() 或者 doPost()，此外还有doHead()、doPut()、doTrace()、doDelete()、doOptions()）；\n\n5、destroy()；\n\n6、加载和实例化 Servlet。这项操作一般是动态执行的。然而，Server 通常会提供一个管理的选项，用于在 Server 启动时强制装载和初始化特定的 Servlet；\n\n7、Server 创建一个 Servlet的实例；\n\n8、第一个客户端的请求到达 Server；\n\n9、Server 调用 Servlet 的 init() 方法（可配置为 Server 创建 Servlet 实例时调用）；\n\n10、一个客户端的请求到达 Server；\n\n11、Server 创建一个请求对象，处理客户端请求；\n\n12、Server 创建一个响应对象，响应客户端请求；\n\n13、Server 激活 Servlet 的 service() 方法，传递请求和响应对象作为参数；\n\n14、service() 方法获得关于请求对象的信息，处理请求，访问其他资源，获得需要的信息；\n\n15、service() 方法使用响应对象的方法，将响应传回Server，最终到达客户端。service()方法可能激活其它方法以处理请求，如 doGet() 或 doPost() 或程序员自己开发的新的方法；\n\n## 继承体系\n[![](https://img.gejiba.com/images/c4ed97e0e4b645e0968dc28a9fd82b22.png)](https://img.gejiba.com/image/EAAFoV)\n\n### HttpServlet源码\n```java\npackage javax.servlet.http;\n\nimport java.io.IOException;\nimport java.io.Serializable;\nimport java.lang.reflect.Method;\nimport java.text.MessageFormat;\nimport java.util.Enumeration;\nimport java.util.ResourceBundle;\nimport javax.servlet.GenericServlet;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\n\npublic abstract class HttpServlet extends GenericServlet implements Serializable {\n    private static final String METHOD_DELETE = \"DELETE\";\n    private static final String METHOD_HEAD = \"HEAD\";\n    private static final String METHOD_GET = \"GET\";\n    private static final String METHOD_OPTIONS = \"OPTIONS\";\n    private static final String METHOD_POST = \"POST\";\n    private static final String METHOD_PUT = \"PUT\";\n    private static final String METHOD_TRACE = \"TRACE\";\n    private static final String HEADER_IFMODSINCE = \"If-Modified-Since\";\n    private static final String HEADER_LASTMOD = \"Last-Modified\";\n    private static final String LSTRING_FILE = \"javax.servlet.http.LocalStrings\";\n    private static ResourceBundle lStrings = ResourceBundle.getBundle(\"javax.servlet.http.LocalStrings\");\n\n    public HttpServlet() {\n    }\n\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String protocol = req.getProtocol();\n        String msg = lStrings.getString(\"http.method_get_not_supported\");\n        if (protocol.endsWith(\"1.1\")) {\n            resp.sendError(405, msg);\n        } else {\n            resp.sendError(400, msg);\n        }\n\n    }\n\n    protected long getLastModified(HttpServletRequest req) {\n        return -1L;\n    }\n\n    protected void doHead(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        NoBodyResponse response = new NoBodyResponse(resp);\n        this.doGet(req, response);\n        response.setContentLength();\n    }\n\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String protocol = req.getProtocol();\n        String msg = lStrings.getString(\"http.method_post_not_supported\");\n        if (protocol.endsWith(\"1.1\")) {\n            resp.sendError(405, msg);\n        } else {\n            resp.sendError(400, msg);\n        }\n\n    }\n\n    protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String protocol = req.getProtocol();\n        String msg = lStrings.getString(\"http.method_put_not_supported\");\n        if (protocol.endsWith(\"1.1\")) {\n            resp.sendError(405, msg);\n        } else {\n            resp.sendError(400, msg);\n        }\n\n    }\n\n    protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String protocol = req.getProtocol();\n        String msg = lStrings.getString(\"http.method_delete_not_supported\");\n        if (protocol.endsWith(\"1.1\")) {\n            resp.sendError(405, msg);\n        } else {\n            resp.sendError(400, msg);\n        }\n\n    }\n\n    private Method[] getAllDeclaredMethods(Class c) {\n        if (c.equals(HttpServlet.class)) {\n            return null;\n        } else {\n            Method[] parentMethods = this.getAllDeclaredMethods(c.getSuperclass());\n            Method[] thisMethods = c.getDeclaredMethods();\n            if (parentMethods != null && parentMethods.length > 0) {\n                Method[] allMethods = new Method[parentMethods.length + thisMethods.length];\n                System.arraycopy(parentMethods, 0, allMethods, 0, parentMethods.length);\n                System.arraycopy(thisMethods, 0, allMethods, parentMethods.length, thisMethods.length);\n                thisMethods = allMethods;\n            }\n\n            return thisMethods;\n        }\n    }\n\n    protected void doOptions(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        Method[] methods = this.getAllDeclaredMethods(this.getClass());\n        boolean ALLOW_GET = false;\n        boolean ALLOW_HEAD = false;\n        boolean ALLOW_POST = false;\n        boolean ALLOW_PUT = false;\n        boolean ALLOW_DELETE = false;\n        boolean ALLOW_TRACE = true;\n        boolean ALLOW_OPTIONS = true;\n\n        for(int i = 0; i < methods.length; ++i) {\n            Method m = methods[i];\n            if (m.getName().equals(\"doGet\")) {\n                ALLOW_GET = true;\n                ALLOW_HEAD = true;\n            }\n\n            if (m.getName().equals(\"doPost\")) {\n                ALLOW_POST = true;\n            }\n\n            if (m.getName().equals(\"doPut\")) {\n                ALLOW_PUT = true;\n            }\n\n            if (m.getName().equals(\"doDelete\")) {\n                ALLOW_DELETE = true;\n            }\n        }\n\n        String allow = null;\n        if (ALLOW_GET && allow == null) {\n            allow = \"GET\";\n        }\n\n        if (ALLOW_HEAD) {\n            if (allow == null) {\n                allow = \"HEAD\";\n            } else {\n                allow = allow + \", HEAD\";\n            }\n        }\n\n        if (ALLOW_POST) {\n            if (allow == null) {\n                allow = \"POST\";\n            } else {\n                allow = allow + \", POST\";\n            }\n        }\n\n        if (ALLOW_PUT) {\n            if (allow == null) {\n                allow = \"PUT\";\n            } else {\n                allow = allow + \", PUT\";\n            }\n        }\n\n        if (ALLOW_DELETE) {\n            if (allow == null) {\n                allow = \"DELETE\";\n            } else {\n                allow = allow + \", DELETE\";\n            }\n        }\n\n        if (ALLOW_TRACE) {\n            if (allow == null) {\n                allow = \"TRACE\";\n            } else {\n                allow = allow + \", TRACE\";\n            }\n        }\n\n        if (ALLOW_OPTIONS) {\n            if (allow == null) {\n                allow = \"OPTIONS\";\n            } else {\n                allow = allow + \", OPTIONS\";\n            }\n        }\n\n        resp.setHeader(\"Allow\", allow);\n    }\n\n    protected void doTrace(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String CRLF = \"\\r\\n\";\n        String responseString = \"TRACE \" + req.getRequestURI() + \" \" + req.getProtocol();\n\n        String headerName;\n        for(Enumeration reqHeaderEnum = req.getHeaderNames(); reqHeaderEnum.hasMoreElements(); responseString = responseString + CRLF + headerName + \": \" + req.getHeader(headerName)) {\n            headerName = (String)reqHeaderEnum.nextElement();\n        }\n\n        responseString = responseString + CRLF;\n        int responseLength = responseString.length();\n        resp.setContentType(\"message/http\");\n        resp.setContentLength(responseLength);\n        ServletOutputStream out = resp.getOutputStream();\n        out.print(responseString);\n        out.close();\n    }\n\n    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String method = req.getMethod();\n        long lastModified;\n        if (method.equals(\"GET\")) {\n            lastModified = this.getLastModified(req);\n            if (lastModified == -1L) {\n                this.doGet(req, resp);\n            } else {\n                long ifModifiedSince = req.getDateHeader(\"If-Modified-Since\");\n                if (ifModifiedSince < lastModified / 1000L * 1000L) {\n                    this.maybeSetLastModified(resp, lastModified);\n                    this.doGet(req, resp);\n                } else {\n                    resp.setStatus(304);\n                }\n            }\n        } else if (method.equals(\"HEAD\")) {\n            lastModified = this.getLastModified(req);\n            this.maybeSetLastModified(resp, lastModified);\n            this.doHead(req, resp);\n        } else if (method.equals(\"POST\")) {\n            this.doPost(req, resp);\n        } else if (method.equals(\"PUT\")) {\n            this.doPut(req, resp);\n        } else if (method.equals(\"DELETE\")) {\n            this.doDelete(req, resp);\n        } else if (method.equals(\"OPTIONS\")) {\n            this.doOptions(req, resp);\n        } else if (method.equals(\"TRACE\")) {\n            this.doTrace(req, resp);\n        } else {\n            String errMsg = lStrings.getString(\"http.method_not_implemented\");\n            Object[] errArgs = new Object[]{method};\n            errMsg = MessageFormat.format(errMsg, errArgs);\n            resp.sendError(501, errMsg);\n        }\n\n    }\n\n    private void maybeSetLastModified(HttpServletResponse resp, long lastModified) {\n        if (!resp.containsHeader(\"Last-Modified\")) {\n            if (lastModified >= 0L) {\n                resp.setDateHeader(\"Last-Modified\", lastModified);\n            }\n\n        }\n    }\n\n    public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException {\n        HttpServletRequest request;\n        HttpServletResponse response;\n        try {\n            request = (HttpServletRequest)req;\n            response = (HttpServletResponse)res;\n        } catch (ClassCastException var6) {\n            throw new ServletException(\"non-HTTP request or response\");\n        }\n\n        this.service(request, response);\n    }\n}\n```\n\n## Servlet示例\n\n**<center>👇此处展示一段处理登录业务的Servlet代码👇</center>**\n\n```java\npackage com.geyu.web;\n\nimport com.geyu.web.mapper.UserMapper;\nimport com.geyu.web.pojo.User;\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\n\nimport javax.servlet.*;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.Map;\n\n@WebServlet(\"/loginServlet\")\npublic class ServletDemo extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String username = req.getParameter(\"username\");\n        String password = req.getParameter(\"password\");\n\n        String resource = \"mybatis-config.xml\";\n        InputStream inputStream = Resources.getResourceAsStream(resource);\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n\n        SqlSession sqlSession = sqlSessionFactory.openSession();\n\n        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);\n\n        User user = userMapper.select(username, password);\n\n        sqlSession.close();\n\n        resp.setContentType(\"text/html;charset=utf-8\");\n        PrintWriter writer = resp.getWriter();\n        if (user != null){\n            //登陆成功\n            writer.write(\"登陆成功\");\n        }else {\n            //登陆失败\n            writer.write(\"登录失败\");\n        }\n\n    }\n}\n```\n\n## 总结\n讲了这么多废话，总结来说Servlet就是一群人来制定Java应用中使用Web时的各种规范，统一接口，其他内部实现由厂商自己实现，tomcat jetty jboss等等应运而生。\n\n关于他如何工作的：一个http请求到来，容器将请求封装成Servlet中的request对象，在request中你可以得到所有的http信息，然后你可以取出来操作，最后你再把数据封装成Servlet的response对象，应用容器将respose对象解析之后封装成一个http response。\n\nWeb服务器习惯处理静态页面，所以需要一个程序来帮忙处理动态请求(如当前时间)。Web服务器程序会将动态请求转发给帮助程序，帮助程序处理后，返回处理后的静态结果给Web服务器程序。这样就避免了Web服务器程序处理动态页面。\n\n# SpringMVC框架\n\n## 简介\nSpring MVC是一个基于Java的实现了MVC设计模式的请求驱动类型的轻量级Web框架，通过把Model，View，Controller分离，将web层进行职责解耦，把复杂的web应用分成逻辑清晰的几部分，简化开发，减少出错，方便组内开发人员之间的配合。\n\n### SpringMVC和Servlet的区别与联系\n\n- Servlet：性能最好，处理HTTP请求的标准和规范。\n\n- SpringMVC：开发效率高（好多共性的东西都封装好了，是对Servlet的封装，核心的DispatcherServlet最终继承自HttpServlet）\n\n这两者的关系，就如同MyBatis和JDBC，一个性能好，一个开发效率高，是对另一个的封装。\n\n### Controller层示例\n\n```java\n@Controller\n@RequestMapping(\"/user\")\npublic class UserController {\n\n    @Autowired\n    IUserService service;\n\n    @RequestMapping(value = \"/login.do\", method = {RequestMethod.GET})\n    public String login(User user) {\n        User result = service.login(user);\n        if (result != null) {\n            return \"redirect:/pages/success.html\";\n        } else {\n            return \"redirect:/pages/error.html\";\n        }\n    }\n}\n```\n<center>\n👀开发过程肉眼可见的简介♥\n</center>\n","source":"_posts/servlet进化之旅.md","raw":"---\ntitle:  Servlet进化之旅 —— 从ServerSocket编程到SpringMVC框架开发\ntags: [JavaWeb,后端,Servlet,SpringMVC,Tomcat]\ncategories: [后端]\ndate: 2022-9-8\n\n---\n\n# 前言\n**<center>本篇主要记录Java后端开发学习过程中关于Servlet相关技术路线的梳理和总结</center>**\n\n按技术迭代顺序依次从下述几个Web技术开展梳理：\n- ServerSocket编程\n- Web服务器\n- Servlet规范\n- SpringMCV框架\n\n# ServerSocket编程\n\n**<center>本部分通过手撸一个基于Java的简易HTTP服务器来体会最原初的JavaWeb后端开发过程</center>**\n\n## 客户端\n\n这里客户端就不使用Java代码编写了，可以考虑使用最基本的浏览器或者后端测试工具如PostMan。\n\n## 服务端\n\n- 第一步我们先创建ServerSocket，监听8080端口\n- 第二步接收到请求后把流在控制台进行输出\n\n```java\npublic class HttpServer {\n\n    public static void main(String[] args) throws IOException {\n        ServerSocket serverSocket = null;\n        Socket socket = null;\n        InputStream is = null;\n        InputStreamReader isr = null;\n        BufferedReader br = null;\n        OutputStream os = null;\n        PrintWriter pw = null;\n        try {\n            serverSocket = new ServerSocket(8080);\n            //调用accept()方法开始监听，等待客户端的连接\n            while ((socket = serverSocket.accept()) != null ){\n                List<String> lines = IOUtils.readLines(socket.getInputStream(), \"utf-8\");\n                for (String line : lines) {\n                    System.out.println(line);\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            //关闭资源\n            pw.close();\n            os.close();\n            br.close();\n            isr.close();\n            is.close();\n            socket.close();\n            serverSocket.close();\n        }\n    }\n}\n```\n打印到控制台是以下这段文本:\n![](https://img.gejiba.com/images/e49002a3b302ec04645132ea159a3f8a.png)\n\n**解释一下：** 上述代码监听了8080端口并将客户端的访问请求打印为字符串，即控制台中的文本信息，只要我们的服务器解析这段字符串然后拼接成request，就能封装HTTP请求。但是这时观察浏览器界面发现没有任何响应。因为我们编写的HTTP服务器什么都没返回就关闭了连接。如果要浏览器正确的显示我们想要看到的helloword。同样也要拼接成浏览器能理解的http协议响应格式才能正确被解析。\n\n下面继续改动代码，让http返回200成功，并返回helloword：\n```java\npublic class HttpServer {\n\n    public static void main(String[] args) throws IOException {\n        ServerSocket serverSocket = null;\n        Socket socket = null;\n        InputStream is = null;\n        InputStreamReader isr = null;\n        BufferedReader br = null;\n        OutputStream os = null;\n        PrintWriter pw = null;\n        try {\n            serverSocket = new ServerSocket(8080);\n            //调用accept()方法开始监听，等待客户端的连接\n            while ((socket = serverSocket.accept()) != null ){\n                //获取输出流，响应客户端的请求\n                os = socket.getOutputStream();\n                pw = new PrintWriter(os);\n                pw.write(\"HTTP/1.1 200 OK\\n\" +\n                        \"Date: Fri, 7 Sept 2022 06:07:21 GMT\\n\" +\n                        \"Content-Type: text/html; charset=UTF-8\\n\" +\n                        \"\\n\" +\n                        \"<html>\\n\" +\n                        \"      <head></head>\\n\" +\n                        \"      <body>\\n\" +\n                        \"            helloWord!\\n\" +\n                        \"      </body>\\n\" +\n                        \"</html>\");\n                pw.flush();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            //关闭资源\n            pw.close();\n            os.close();\n            br.close();\n            isr.close();\n            is.close();\n            socket.close();\n            serverSocket.close();\n        }\n    }\n}\n```\n浏览器访问：localhost:8080 可见：\n![](https://img.gejiba.com/images/e252a903e9cf4d35eaa77788489e4a4c.png)\n\n## 总结\n\n上述示例实现了一个最简单的基于HTTP协议的Java服务器后端，里面并不包含对request请求字符串的处理，仅仅是打印了它，response也仅仅是按HTTP协议的规定封装了一句“helloworld！”。如此简易原始的HTTP服务器的整个访问和回复过程是如此繁琐，可见新技术出现的必要性。\n\n# Web服务器\n\n**<center>\nWeb服务器是一个应该程序(软件)，对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作，让Web开发更加便捷。主要功能是\"提供网上信息浏览服务\"</center>**\n\n![](https://img.gejiba.com/images/d2eca8a0000dc6e254f5bcf9300b8418.png)\n\n下面以Apache Tomcat服务器为例展示一个最简单的HTTP Web服务。\n\n## 创建展示页面\n\n在Tomcat根目录的**Webapps**下创建一个test文件夹，内部创建hello.html文件用于返回请求页面👇👇\n\n![](https://img.gejiba.com/images/ba7d619e9f80190fa9b379c01b9ac67d.png)\n\n## 启动服务器并请求资源\n\n- 启动Tomcat根目录下的**bin/startup.bat**\n- 使用Post访问**localhost:8080/test/hello.html**\n\n![](https://img.gejiba.com/images/2c4d42954c3df74e89901c3eac879458.png)\n\n## 总结\n\n1. Web服务器作用?\n➢封装HTTP协议操作，简化开发\n➢可以将Web项目部署到服务器中，对外提供网上浏览服务\n2. 什么是Tomcat?\nTomcat是一个轻量级的Web服务器， 支持Servlet/JSP少量JavaEE规范，也称为Web容器，Servlet容器，Servlet依赖于它或其他Web服务器才能正常运行。\n\n# Servlet规范\n\n## Servlet规范简介\n\nServlet（Server Applet，服务端小程序，是服务端的一小部分），全称Java Servlet，未有中文译文。是用Java编写的服务器端程序。其主要功能在于交互式地浏览和修改数据，生成动态Web内容。狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。\n\n### 补充：Servlet和Web服务器的关系\n首先要明白我们从来不会在Servlet中写什么监听8080端口的代码，Servlet不会直接和客户端打交道！这些全被Web服务器封装了。\n\n那请求是怎么来到Servlet的呢？答案是Servlet容器，比如我们最常用的Tomcat。Servlet都是部署在一个容器中的，不然你的Servlet根本不起作用。\n\nTomcat才是与客户端直接打交道的家伙，它监听了端口，请求过来后，根据URL等信息，确定要将请求交给哪个Servlet去处理，然后调用那个Servlet的service方法，service方法返回一个response对象，Tomcat再把这个respond返回给客户端。\n\n## 接口代码\n```Java\npackage Javax.Servlet;\n\nimport Java.io.IOException;\n\npublic interface Servlet {\n    void init(ServletConfig var1) throws ServletException;\n\n    ServletConfig getServletConfig();\n\n    void service(ServletRequest var1, ServletResponse var2) throws ServletException, IOException;\n\n    String getServletInfo();\n\n    void destroy();\n}\n```\n\nServlet接口定义的是一套处理网络请求的规范，所有实现Servlet的类，都需要实现它的那五个方法，其中最主要的是两个声明周期方法init()和destory()，还有一个处理请求的service()。也就是说，所有实现Servlet接口的类，或者说，所有想要处理网络请求的类，都需要回答这三个问题：\n\n- 你初始化时要做什么？\n- 你销毁时要做什么？\n- 你接收到请求时要做什么？\n\n## 生命周期\n\n1、客户端请求该 Servlet；\n\n2、Tomcat加载 Servlet 类到内存；\n\n3、Tomcat实例化并调用init()方法初始化该 Servlet；\n\n4、Tomcat调用service()（根据请求方法不同调用doGet() 或者 doPost()，此外还有doHead()、doPut()、doTrace()、doDelete()、doOptions()）；\n\n5、destroy()；\n\n6、加载和实例化 Servlet。这项操作一般是动态执行的。然而，Server 通常会提供一个管理的选项，用于在 Server 启动时强制装载和初始化特定的 Servlet；\n\n7、Server 创建一个 Servlet的实例；\n\n8、第一个客户端的请求到达 Server；\n\n9、Server 调用 Servlet 的 init() 方法（可配置为 Server 创建 Servlet 实例时调用）；\n\n10、一个客户端的请求到达 Server；\n\n11、Server 创建一个请求对象，处理客户端请求；\n\n12、Server 创建一个响应对象，响应客户端请求；\n\n13、Server 激活 Servlet 的 service() 方法，传递请求和响应对象作为参数；\n\n14、service() 方法获得关于请求对象的信息，处理请求，访问其他资源，获得需要的信息；\n\n15、service() 方法使用响应对象的方法，将响应传回Server，最终到达客户端。service()方法可能激活其它方法以处理请求，如 doGet() 或 doPost() 或程序员自己开发的新的方法；\n\n## 继承体系\n[![](https://img.gejiba.com/images/c4ed97e0e4b645e0968dc28a9fd82b22.png)](https://img.gejiba.com/image/EAAFoV)\n\n### HttpServlet源码\n```java\npackage javax.servlet.http;\n\nimport java.io.IOException;\nimport java.io.Serializable;\nimport java.lang.reflect.Method;\nimport java.text.MessageFormat;\nimport java.util.Enumeration;\nimport java.util.ResourceBundle;\nimport javax.servlet.GenericServlet;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\n\npublic abstract class HttpServlet extends GenericServlet implements Serializable {\n    private static final String METHOD_DELETE = \"DELETE\";\n    private static final String METHOD_HEAD = \"HEAD\";\n    private static final String METHOD_GET = \"GET\";\n    private static final String METHOD_OPTIONS = \"OPTIONS\";\n    private static final String METHOD_POST = \"POST\";\n    private static final String METHOD_PUT = \"PUT\";\n    private static final String METHOD_TRACE = \"TRACE\";\n    private static final String HEADER_IFMODSINCE = \"If-Modified-Since\";\n    private static final String HEADER_LASTMOD = \"Last-Modified\";\n    private static final String LSTRING_FILE = \"javax.servlet.http.LocalStrings\";\n    private static ResourceBundle lStrings = ResourceBundle.getBundle(\"javax.servlet.http.LocalStrings\");\n\n    public HttpServlet() {\n    }\n\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String protocol = req.getProtocol();\n        String msg = lStrings.getString(\"http.method_get_not_supported\");\n        if (protocol.endsWith(\"1.1\")) {\n            resp.sendError(405, msg);\n        } else {\n            resp.sendError(400, msg);\n        }\n\n    }\n\n    protected long getLastModified(HttpServletRequest req) {\n        return -1L;\n    }\n\n    protected void doHead(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        NoBodyResponse response = new NoBodyResponse(resp);\n        this.doGet(req, response);\n        response.setContentLength();\n    }\n\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String protocol = req.getProtocol();\n        String msg = lStrings.getString(\"http.method_post_not_supported\");\n        if (protocol.endsWith(\"1.1\")) {\n            resp.sendError(405, msg);\n        } else {\n            resp.sendError(400, msg);\n        }\n\n    }\n\n    protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String protocol = req.getProtocol();\n        String msg = lStrings.getString(\"http.method_put_not_supported\");\n        if (protocol.endsWith(\"1.1\")) {\n            resp.sendError(405, msg);\n        } else {\n            resp.sendError(400, msg);\n        }\n\n    }\n\n    protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String protocol = req.getProtocol();\n        String msg = lStrings.getString(\"http.method_delete_not_supported\");\n        if (protocol.endsWith(\"1.1\")) {\n            resp.sendError(405, msg);\n        } else {\n            resp.sendError(400, msg);\n        }\n\n    }\n\n    private Method[] getAllDeclaredMethods(Class c) {\n        if (c.equals(HttpServlet.class)) {\n            return null;\n        } else {\n            Method[] parentMethods = this.getAllDeclaredMethods(c.getSuperclass());\n            Method[] thisMethods = c.getDeclaredMethods();\n            if (parentMethods != null && parentMethods.length > 0) {\n                Method[] allMethods = new Method[parentMethods.length + thisMethods.length];\n                System.arraycopy(parentMethods, 0, allMethods, 0, parentMethods.length);\n                System.arraycopy(thisMethods, 0, allMethods, parentMethods.length, thisMethods.length);\n                thisMethods = allMethods;\n            }\n\n            return thisMethods;\n        }\n    }\n\n    protected void doOptions(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        Method[] methods = this.getAllDeclaredMethods(this.getClass());\n        boolean ALLOW_GET = false;\n        boolean ALLOW_HEAD = false;\n        boolean ALLOW_POST = false;\n        boolean ALLOW_PUT = false;\n        boolean ALLOW_DELETE = false;\n        boolean ALLOW_TRACE = true;\n        boolean ALLOW_OPTIONS = true;\n\n        for(int i = 0; i < methods.length; ++i) {\n            Method m = methods[i];\n            if (m.getName().equals(\"doGet\")) {\n                ALLOW_GET = true;\n                ALLOW_HEAD = true;\n            }\n\n            if (m.getName().equals(\"doPost\")) {\n                ALLOW_POST = true;\n            }\n\n            if (m.getName().equals(\"doPut\")) {\n                ALLOW_PUT = true;\n            }\n\n            if (m.getName().equals(\"doDelete\")) {\n                ALLOW_DELETE = true;\n            }\n        }\n\n        String allow = null;\n        if (ALLOW_GET && allow == null) {\n            allow = \"GET\";\n        }\n\n        if (ALLOW_HEAD) {\n            if (allow == null) {\n                allow = \"HEAD\";\n            } else {\n                allow = allow + \", HEAD\";\n            }\n        }\n\n        if (ALLOW_POST) {\n            if (allow == null) {\n                allow = \"POST\";\n            } else {\n                allow = allow + \", POST\";\n            }\n        }\n\n        if (ALLOW_PUT) {\n            if (allow == null) {\n                allow = \"PUT\";\n            } else {\n                allow = allow + \", PUT\";\n            }\n        }\n\n        if (ALLOW_DELETE) {\n            if (allow == null) {\n                allow = \"DELETE\";\n            } else {\n                allow = allow + \", DELETE\";\n            }\n        }\n\n        if (ALLOW_TRACE) {\n            if (allow == null) {\n                allow = \"TRACE\";\n            } else {\n                allow = allow + \", TRACE\";\n            }\n        }\n\n        if (ALLOW_OPTIONS) {\n            if (allow == null) {\n                allow = \"OPTIONS\";\n            } else {\n                allow = allow + \", OPTIONS\";\n            }\n        }\n\n        resp.setHeader(\"Allow\", allow);\n    }\n\n    protected void doTrace(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String CRLF = \"\\r\\n\";\n        String responseString = \"TRACE \" + req.getRequestURI() + \" \" + req.getProtocol();\n\n        String headerName;\n        for(Enumeration reqHeaderEnum = req.getHeaderNames(); reqHeaderEnum.hasMoreElements(); responseString = responseString + CRLF + headerName + \": \" + req.getHeader(headerName)) {\n            headerName = (String)reqHeaderEnum.nextElement();\n        }\n\n        responseString = responseString + CRLF;\n        int responseLength = responseString.length();\n        resp.setContentType(\"message/http\");\n        resp.setContentLength(responseLength);\n        ServletOutputStream out = resp.getOutputStream();\n        out.print(responseString);\n        out.close();\n    }\n\n    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String method = req.getMethod();\n        long lastModified;\n        if (method.equals(\"GET\")) {\n            lastModified = this.getLastModified(req);\n            if (lastModified == -1L) {\n                this.doGet(req, resp);\n            } else {\n                long ifModifiedSince = req.getDateHeader(\"If-Modified-Since\");\n                if (ifModifiedSince < lastModified / 1000L * 1000L) {\n                    this.maybeSetLastModified(resp, lastModified);\n                    this.doGet(req, resp);\n                } else {\n                    resp.setStatus(304);\n                }\n            }\n        } else if (method.equals(\"HEAD\")) {\n            lastModified = this.getLastModified(req);\n            this.maybeSetLastModified(resp, lastModified);\n            this.doHead(req, resp);\n        } else if (method.equals(\"POST\")) {\n            this.doPost(req, resp);\n        } else if (method.equals(\"PUT\")) {\n            this.doPut(req, resp);\n        } else if (method.equals(\"DELETE\")) {\n            this.doDelete(req, resp);\n        } else if (method.equals(\"OPTIONS\")) {\n            this.doOptions(req, resp);\n        } else if (method.equals(\"TRACE\")) {\n            this.doTrace(req, resp);\n        } else {\n            String errMsg = lStrings.getString(\"http.method_not_implemented\");\n            Object[] errArgs = new Object[]{method};\n            errMsg = MessageFormat.format(errMsg, errArgs);\n            resp.sendError(501, errMsg);\n        }\n\n    }\n\n    private void maybeSetLastModified(HttpServletResponse resp, long lastModified) {\n        if (!resp.containsHeader(\"Last-Modified\")) {\n            if (lastModified >= 0L) {\n                resp.setDateHeader(\"Last-Modified\", lastModified);\n            }\n\n        }\n    }\n\n    public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException {\n        HttpServletRequest request;\n        HttpServletResponse response;\n        try {\n            request = (HttpServletRequest)req;\n            response = (HttpServletResponse)res;\n        } catch (ClassCastException var6) {\n            throw new ServletException(\"non-HTTP request or response\");\n        }\n\n        this.service(request, response);\n    }\n}\n```\n\n## Servlet示例\n\n**<center>👇此处展示一段处理登录业务的Servlet代码👇</center>**\n\n```java\npackage com.geyu.web;\n\nimport com.geyu.web.mapper.UserMapper;\nimport com.geyu.web.pojo.User;\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\n\nimport javax.servlet.*;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.Map;\n\n@WebServlet(\"/loginServlet\")\npublic class ServletDemo extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String username = req.getParameter(\"username\");\n        String password = req.getParameter(\"password\");\n\n        String resource = \"mybatis-config.xml\";\n        InputStream inputStream = Resources.getResourceAsStream(resource);\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n\n        SqlSession sqlSession = sqlSessionFactory.openSession();\n\n        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);\n\n        User user = userMapper.select(username, password);\n\n        sqlSession.close();\n\n        resp.setContentType(\"text/html;charset=utf-8\");\n        PrintWriter writer = resp.getWriter();\n        if (user != null){\n            //登陆成功\n            writer.write(\"登陆成功\");\n        }else {\n            //登陆失败\n            writer.write(\"登录失败\");\n        }\n\n    }\n}\n```\n\n## 总结\n讲了这么多废话，总结来说Servlet就是一群人来制定Java应用中使用Web时的各种规范，统一接口，其他内部实现由厂商自己实现，tomcat jetty jboss等等应运而生。\n\n关于他如何工作的：一个http请求到来，容器将请求封装成Servlet中的request对象，在request中你可以得到所有的http信息，然后你可以取出来操作，最后你再把数据封装成Servlet的response对象，应用容器将respose对象解析之后封装成一个http response。\n\nWeb服务器习惯处理静态页面，所以需要一个程序来帮忙处理动态请求(如当前时间)。Web服务器程序会将动态请求转发给帮助程序，帮助程序处理后，返回处理后的静态结果给Web服务器程序。这样就避免了Web服务器程序处理动态页面。\n\n# SpringMVC框架\n\n## 简介\nSpring MVC是一个基于Java的实现了MVC设计模式的请求驱动类型的轻量级Web框架，通过把Model，View，Controller分离，将web层进行职责解耦，把复杂的web应用分成逻辑清晰的几部分，简化开发，减少出错，方便组内开发人员之间的配合。\n\n### SpringMVC和Servlet的区别与联系\n\n- Servlet：性能最好，处理HTTP请求的标准和规范。\n\n- SpringMVC：开发效率高（好多共性的东西都封装好了，是对Servlet的封装，核心的DispatcherServlet最终继承自HttpServlet）\n\n这两者的关系，就如同MyBatis和JDBC，一个性能好，一个开发效率高，是对另一个的封装。\n\n### Controller层示例\n\n```java\n@Controller\n@RequestMapping(\"/user\")\npublic class UserController {\n\n    @Autowired\n    IUserService service;\n\n    @RequestMapping(value = \"/login.do\", method = {RequestMethod.GET})\n    public String login(User user) {\n        User result = service.login(user);\n        if (result != null) {\n            return \"redirect:/pages/success.html\";\n        } else {\n            return \"redirect:/pages/error.html\";\n        }\n    }\n}\n```\n<center>\n👀开发过程肉眼可见的简介♥\n</center>\n","slug":"servlet进化之旅","published":1,"updated":"2022-09-07T08:21:38.114Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jb9zp006q7svwx2cf8qoo","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><strong><center>本篇主要记录Java后端开发学习过程中关于Servlet相关技术路线的梳理和总结</center></strong></p>\n<p>按技术迭代顺序依次从下述几个Web技术开展梳理：</p>\n<ul>\n<li>ServerSocket编程</li>\n<li>Web服务器</li>\n<li>Servlet规范</li>\n<li>SpringMCV框架</li>\n</ul>\n<h1 id=\"ServerSocket编程\"><a href=\"#ServerSocket编程\" class=\"headerlink\" title=\"ServerSocket编程\"></a>ServerSocket编程</h1><p><strong><center>本部分通过手撸一个基于Java的简易HTTP服务器来体会最原初的JavaWeb后端开发过程</center></strong></p>\n<h2 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><p>这里客户端就不使用Java代码编写了，可以考虑使用最基本的浏览器或者后端测试工具如PostMan。</p>\n<h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><ul>\n<li>第一步我们先创建ServerSocket，监听8080端口</li>\n<li>第二步接收到请求后把流在控制台进行输出</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpServer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        ServerSocket serverSocket = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Socket socket = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        InputStream is = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        InputStreamReader isr = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        BufferedReader br = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        OutputStream os = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        PrintWriter pw = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            serverSocket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">8080</span>);</span><br><span class=\"line\">            <span class=\"comment\">//调用accept()方法开始监听，等待客户端的连接</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((socket = serverSocket.accept()) != <span class=\"keyword\">null</span> )&#123;</span><br><span class=\"line\">                List&lt;String&gt; lines = IOUtils.readLines(socket.getInputStream(), <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (String line : lines) &#123;</span><br><span class=\"line\">                    System.out.println(line);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//关闭资源</span></span><br><span class=\"line\">            pw.close();</span><br><span class=\"line\">            os.close();</span><br><span class=\"line\">            br.close();</span><br><span class=\"line\">            isr.close();</span><br><span class=\"line\">            is.close();</span><br><span class=\"line\">            socket.close();</span><br><span class=\"line\">            serverSocket.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打印到控制台是以下这段文本:<br><img src=\"https://img.gejiba.com/images/e49002a3b302ec04645132ea159a3f8a.png\" alt></p>\n<p><strong>解释一下：</strong> 上述代码监听了8080端口并将客户端的访问请求打印为字符串，即控制台中的文本信息，只要我们的服务器解析这段字符串然后拼接成request，就能封装HTTP请求。但是这时观察浏览器界面发现没有任何响应。因为我们编写的HTTP服务器什么都没返回就关闭了连接。如果要浏览器正确的显示我们想要看到的helloword。同样也要拼接成浏览器能理解的http协议响应格式才能正确被解析。</p>\n<p>下面继续改动代码，让http返回200成功，并返回helloword：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpServer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        ServerSocket serverSocket = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Socket socket = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        InputStream is = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        InputStreamReader isr = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        BufferedReader br = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        OutputStream os = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        PrintWriter pw = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            serverSocket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">8080</span>);</span><br><span class=\"line\">            <span class=\"comment\">//调用accept()方法开始监听，等待客户端的连接</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((socket = serverSocket.accept()) != <span class=\"keyword\">null</span> )&#123;</span><br><span class=\"line\">                <span class=\"comment\">//获取输出流，响应客户端的请求</span></span><br><span class=\"line\">                os = socket.getOutputStream();</span><br><span class=\"line\">                pw = <span class=\"keyword\">new</span> PrintWriter(os);</span><br><span class=\"line\">                pw.write(<span class=\"string\">\"HTTP/1.1 200 OK\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"Date: Fri, 7 Sept 2022 06:07:21 GMT\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"Content-Type: text/html; charset=UTF-8\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"&lt;html&gt;\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"      &lt;head&gt;&lt;/head&gt;\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"      &lt;body&gt;\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"            helloWord!\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"      &lt;/body&gt;\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"&lt;/html&gt;\"</span>);</span><br><span class=\"line\">                pw.flush();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//关闭资源</span></span><br><span class=\"line\">            pw.close();</span><br><span class=\"line\">            os.close();</span><br><span class=\"line\">            br.close();</span><br><span class=\"line\">            isr.close();</span><br><span class=\"line\">            is.close();</span><br><span class=\"line\">            socket.close();</span><br><span class=\"line\">            serverSocket.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>浏览器访问：localhost:8080 可见：<br><img src=\"https://img.gejiba.com/images/e252a903e9cf4d35eaa77788489e4a4c.png\" alt></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上述示例实现了一个最简单的基于HTTP协议的Java服务器后端，里面并不包含对request请求字符串的处理，仅仅是打印了它，response也仅仅是按HTTP协议的规定封装了一句“helloworld！”。如此简易原始的HTTP服务器的整个访问和回复过程是如此繁琐，可见新技术出现的必要性。</p>\n<h1 id=\"Web服务器\"><a href=\"#Web服务器\" class=\"headerlink\" title=\"Web服务器\"></a>Web服务器</h1><p><strong><center><br>Web服务器是一个应该程序(软件)，对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作，让Web开发更加便捷。主要功能是”提供网上信息浏览服务”</center></strong></p>\n<p><img src=\"https://img.gejiba.com/images/d2eca8a0000dc6e254f5bcf9300b8418.png\" alt></p>\n<p>下面以Apache Tomcat服务器为例展示一个最简单的HTTP Web服务。</p>\n<h2 id=\"创建展示页面\"><a href=\"#创建展示页面\" class=\"headerlink\" title=\"创建展示页面\"></a>创建展示页面</h2><p>在Tomcat根目录的<strong>Webapps</strong>下创建一个test文件夹，内部创建hello.html文件用于返回请求页面👇👇</p>\n<p><img src=\"https://img.gejiba.com/images/ba7d619e9f80190fa9b379c01b9ac67d.png\" alt></p>\n<h2 id=\"启动服务器并请求资源\"><a href=\"#启动服务器并请求资源\" class=\"headerlink\" title=\"启动服务器并请求资源\"></a>启动服务器并请求资源</h2><ul>\n<li>启动Tomcat根目录下的<strong>bin/startup.bat</strong></li>\n<li>使用Post访问<strong>localhost:8080/test/hello.html</strong></li>\n</ul>\n<p><img src=\"https://img.gejiba.com/images/2c4d42954c3df74e89901c3eac879458.png\" alt></p>\n<h2 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>Web服务器作用?<br>➢封装HTTP协议操作，简化开发<br>➢可以将Web项目部署到服务器中，对外提供网上浏览服务</li>\n<li>什么是Tomcat?<br>Tomcat是一个轻量级的Web服务器， 支持Servlet/JSP少量JavaEE规范，也称为Web容器，Servlet容器，Servlet依赖于它或其他Web服务器才能正常运行。</li>\n</ol>\n<h1 id=\"Servlet规范\"><a href=\"#Servlet规范\" class=\"headerlink\" title=\"Servlet规范\"></a>Servlet规范</h1><h2 id=\"Servlet规范简介\"><a href=\"#Servlet规范简介\" class=\"headerlink\" title=\"Servlet规范简介\"></a>Servlet规范简介</h2><p>Servlet（Server Applet，服务端小程序，是服务端的一小部分），全称Java Servlet，未有中文译文。是用Java编写的服务器端程序。其主要功能在于交互式地浏览和修改数据，生成动态Web内容。狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。</p>\n<h3 id=\"补充：Servlet和Web服务器的关系\"><a href=\"#补充：Servlet和Web服务器的关系\" class=\"headerlink\" title=\"补充：Servlet和Web服务器的关系\"></a>补充：Servlet和Web服务器的关系</h3><p>首先要明白我们从来不会在Servlet中写什么监听8080端口的代码，Servlet不会直接和客户端打交道！这些全被Web服务器封装了。</p>\n<p>那请求是怎么来到Servlet的呢？答案是Servlet容器，比如我们最常用的Tomcat。Servlet都是部署在一个容器中的，不然你的Servlet根本不起作用。</p>\n<p>Tomcat才是与客户端直接打交道的家伙，它监听了端口，请求过来后，根据URL等信息，确定要将请求交给哪个Servlet去处理，然后调用那个Servlet的service方法，service方法返回一个response对象，Tomcat再把这个respond返回给客户端。</p>\n<h2 id=\"接口代码\"><a href=\"#接口代码\" class=\"headerlink\" title=\"接口代码\"></a>接口代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Javax.Servlet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Servlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ServletConfig var1)</span> <span class=\"keyword\">throws</span> ServletException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">ServletConfig <span class=\"title\">getServletConfig</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(ServletRequest var1, ServletResponse var2)</span> <span class=\"keyword\">throws</span> ServletException, IOException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getServletInfo</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Servlet接口定义的是一套处理网络请求的规范，所有实现Servlet的类，都需要实现它的那五个方法，其中最主要的是两个声明周期方法init()和destory()，还有一个处理请求的service()。也就是说，所有实现Servlet接口的类，或者说，所有想要处理网络请求的类，都需要回答这三个问题：</p>\n<ul>\n<li>你初始化时要做什么？</li>\n<li>你销毁时要做什么？</li>\n<li>你接收到请求时要做什么？</li>\n</ul>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><p>1、客户端请求该 Servlet；</p>\n<p>2、Tomcat加载 Servlet 类到内存；</p>\n<p>3、Tomcat实例化并调用init()方法初始化该 Servlet；</p>\n<p>4、Tomcat调用service()（根据请求方法不同调用doGet() 或者 doPost()，此外还有doHead()、doPut()、doTrace()、doDelete()、doOptions()）；</p>\n<p>5、destroy()；</p>\n<p>6、加载和实例化 Servlet。这项操作一般是动态执行的。然而，Server 通常会提供一个管理的选项，用于在 Server 启动时强制装载和初始化特定的 Servlet；</p>\n<p>7、Server 创建一个 Servlet的实例；</p>\n<p>8、第一个客户端的请求到达 Server；</p>\n<p>9、Server 调用 Servlet 的 init() 方法（可配置为 Server 创建 Servlet 实例时调用）；</p>\n<p>10、一个客户端的请求到达 Server；</p>\n<p>11、Server 创建一个请求对象，处理客户端请求；</p>\n<p>12、Server 创建一个响应对象，响应客户端请求；</p>\n<p>13、Server 激活 Servlet 的 service() 方法，传递请求和响应对象作为参数；</p>\n<p>14、service() 方法获得关于请求对象的信息，处理请求，访问其他资源，获得需要的信息；</p>\n<p>15、service() 方法使用响应对象的方法，将响应传回Server，最终到达客户端。service()方法可能激活其它方法以处理请求，如 doGet() 或 doPost() 或程序员自己开发的新的方法；</p>\n<h2 id=\"继承体系\"><a href=\"#继承体系\" class=\"headerlink\" title=\"继承体系\"></a>继承体系</h2><p><a href=\"https://img.gejiba.com/image/EAAFoV\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.gejiba.com/images/c4ed97e0e4b645e0968dc28a9fd82b22.png\" alt></a></p>\n<h3 id=\"HttpServlet源码\"><a href=\"#HttpServlet源码\" class=\"headerlink\" title=\"HttpServlet源码\"></a>HttpServlet源码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> javax.servlet.http;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.MessageFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Enumeration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ResourceBundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.GenericServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">GenericServlet</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String METHOD_DELETE = <span class=\"string\">\"DELETE\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String METHOD_HEAD = <span class=\"string\">\"HEAD\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String METHOD_GET = <span class=\"string\">\"GET\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String METHOD_OPTIONS = <span class=\"string\">\"OPTIONS\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String METHOD_POST = <span class=\"string\">\"POST\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String METHOD_PUT = <span class=\"string\">\"PUT\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String METHOD_TRACE = <span class=\"string\">\"TRACE\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String HEADER_IFMODSINCE = <span class=\"string\">\"If-Modified-Since\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String HEADER_LASTMOD = <span class=\"string\">\"Last-Modified\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String LSTRING_FILE = <span class=\"string\">\"javax.servlet.http.LocalStrings\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ResourceBundle lStrings = ResourceBundle.getBundle(<span class=\"string\">\"javax.servlet.http.LocalStrings\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HttpServlet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String protocol = req.getProtocol();</span><br><span class=\"line\">        String msg = lStrings.getString(<span class=\"string\">\"http.method_get_not_supported\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (protocol.endsWith(<span class=\"string\">\"1.1\"</span>)) &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">405</span>, msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">400</span>, msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">long</span> <span class=\"title\">getLastModified</span><span class=\"params\">(HttpServletRequest req)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1L</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doHead</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        NoBodyResponse response = <span class=\"keyword\">new</span> NoBodyResponse(resp);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.doGet(req, response);</span><br><span class=\"line\">        response.setContentLength();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String protocol = req.getProtocol();</span><br><span class=\"line\">        String msg = lStrings.getString(<span class=\"string\">\"http.method_post_not_supported\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (protocol.endsWith(<span class=\"string\">\"1.1\"</span>)) &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">405</span>, msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">400</span>, msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPut</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String protocol = req.getProtocol();</span><br><span class=\"line\">        String msg = lStrings.getString(<span class=\"string\">\"http.method_put_not_supported\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (protocol.endsWith(<span class=\"string\">\"1.1\"</span>)) &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">405</span>, msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">400</span>, msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doDelete</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String protocol = req.getProtocol();</span><br><span class=\"line\">        String msg = lStrings.getString(<span class=\"string\">\"http.method_delete_not_supported\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (protocol.endsWith(<span class=\"string\">\"1.1\"</span>)) &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">405</span>, msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">400</span>, msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Method[] getAllDeclaredMethods(Class c) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c.equals(HttpServlet.class)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Method[] parentMethods = <span class=\"keyword\">this</span>.getAllDeclaredMethods(c.getSuperclass());</span><br><span class=\"line\">            Method[] thisMethods = c.getDeclaredMethods();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (parentMethods != <span class=\"keyword\">null</span> &amp;&amp; parentMethods.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                Method[] allMethods = <span class=\"keyword\">new</span> Method[parentMethods.length + thisMethods.length];</span><br><span class=\"line\">                System.arraycopy(parentMethods, <span class=\"number\">0</span>, allMethods, <span class=\"number\">0</span>, parentMethods.length);</span><br><span class=\"line\">                System.arraycopy(thisMethods, <span class=\"number\">0</span>, allMethods, parentMethods.length, thisMethods.length);</span><br><span class=\"line\">                thisMethods = allMethods;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> thisMethods;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doOptions</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        Method[] methods = <span class=\"keyword\">this</span>.getAllDeclaredMethods(<span class=\"keyword\">this</span>.getClass());</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ALLOW_GET = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ALLOW_HEAD = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ALLOW_POST = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ALLOW_PUT = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ALLOW_DELETE = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ALLOW_TRACE = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ALLOW_OPTIONS = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; methods.length; ++i) &#123;</span><br><span class=\"line\">            Method m = methods[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m.getName().equals(<span class=\"string\">\"doGet\"</span>)) &#123;</span><br><span class=\"line\">                ALLOW_GET = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                ALLOW_HEAD = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m.getName().equals(<span class=\"string\">\"doPost\"</span>)) &#123;</span><br><span class=\"line\">                ALLOW_POST = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m.getName().equals(<span class=\"string\">\"doPut\"</span>)) &#123;</span><br><span class=\"line\">                ALLOW_PUT = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m.getName().equals(<span class=\"string\">\"doDelete\"</span>)) &#123;</span><br><span class=\"line\">                ALLOW_DELETE = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        String allow = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOW_GET &amp;&amp; allow == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            allow = <span class=\"string\">\"GET\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOW_HEAD) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (allow == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                allow = <span class=\"string\">\"HEAD\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                allow = allow + <span class=\"string\">\", HEAD\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOW_POST) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (allow == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                allow = <span class=\"string\">\"POST\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                allow = allow + <span class=\"string\">\", POST\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOW_PUT) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (allow == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                allow = <span class=\"string\">\"PUT\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                allow = allow + <span class=\"string\">\", PUT\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOW_DELETE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (allow == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                allow = <span class=\"string\">\"DELETE\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                allow = allow + <span class=\"string\">\", DELETE\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOW_TRACE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (allow == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                allow = <span class=\"string\">\"TRACE\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                allow = allow + <span class=\"string\">\", TRACE\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOW_OPTIONS) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (allow == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                allow = <span class=\"string\">\"OPTIONS\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                allow = allow + <span class=\"string\">\", OPTIONS\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        resp.setHeader(<span class=\"string\">\"Allow\"</span>, allow);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doTrace</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String CRLF = <span class=\"string\">\"\\r\\n\"</span>;</span><br><span class=\"line\">        String responseString = <span class=\"string\">\"TRACE \"</span> + req.getRequestURI() + <span class=\"string\">\" \"</span> + req.getProtocol();</span><br><span class=\"line\"></span><br><span class=\"line\">        String headerName;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Enumeration reqHeaderEnum = req.getHeaderNames(); reqHeaderEnum.hasMoreElements(); responseString = responseString + CRLF + headerName + <span class=\"string\">\": \"</span> + req.getHeader(headerName)) &#123;</span><br><span class=\"line\">            headerName = (String)reqHeaderEnum.nextElement();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        responseString = responseString + CRLF;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> responseLength = responseString.length();</span><br><span class=\"line\">        resp.setContentType(<span class=\"string\">\"message/http\"</span>);</span><br><span class=\"line\">        resp.setContentLength(responseLength);</span><br><span class=\"line\">        ServletOutputStream out = resp.getOutputStream();</span><br><span class=\"line\">        out.print(responseString);</span><br><span class=\"line\">        out.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String method = req.getMethod();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> lastModified;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"GET\"</span>)) &#123;</span><br><span class=\"line\">            lastModified = <span class=\"keyword\">this</span>.getLastModified(req);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lastModified == -<span class=\"number\">1L</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.doGet(req, resp);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> ifModifiedSince = req.getDateHeader(<span class=\"string\">\"If-Modified-Since\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ifModifiedSince &lt; lastModified / <span class=\"number\">1000L</span> * <span class=\"number\">1000L</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.maybeSetLastModified(resp, lastModified);</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.doGet(req, resp);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    resp.setStatus(<span class=\"number\">304</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"HEAD\"</span>)) &#123;</span><br><span class=\"line\">            lastModified = <span class=\"keyword\">this</span>.getLastModified(req);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.maybeSetLastModified(resp, lastModified);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.doHead(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"POST\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.doPost(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"PUT\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.doPut(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"DELETE\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.doDelete(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"OPTIONS\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.doOptions(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"TRACE\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.doTrace(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            String errMsg = lStrings.getString(<span class=\"string\">\"http.method_not_implemented\"</span>);</span><br><span class=\"line\">            Object[] errArgs = <span class=\"keyword\">new</span> Object[]&#123;method&#125;;</span><br><span class=\"line\">            errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">501</span>, errMsg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">maybeSetLastModified</span><span class=\"params\">(HttpServletResponse resp, <span class=\"keyword\">long</span> lastModified)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!resp.containsHeader(<span class=\"string\">\"Last-Modified\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lastModified &gt;= <span class=\"number\">0L</span>) &#123;</span><br><span class=\"line\">                resp.setDateHeader(<span class=\"string\">\"Last-Modified\"</span>, lastModified);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(ServletRequest req, ServletResponse res)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        HttpServletRequest request;</span><br><span class=\"line\">        HttpServletResponse response;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            request = (HttpServletRequest)req;</span><br><span class=\"line\">            response = (HttpServletResponse)res;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassCastException var6) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ServletException(<span class=\"string\">\"non-HTTP request or response\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.service(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Servlet示例\"><a href=\"#Servlet示例\" class=\"headerlink\" title=\"Servlet示例\"></a>Servlet示例</h2><p><strong><center>👇此处展示一段处理登录业务的Servlet代码👇</center></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.geyu.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.geyu.web.mapper.UserMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.geyu.web.pojo.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.io.Resources;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/loginServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServletDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String username = req.getParameter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">        String password = req.getParameter(<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        String resource = <span class=\"string\">\"mybatis-config.xml\"</span>;</span><br><span class=\"line\">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class=\"line\">        SqlSessionFactory sqlSessionFactory = <span class=\"keyword\">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class=\"line\"></span><br><span class=\"line\">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class=\"line\"></span><br><span class=\"line\">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        User user = userMapper.select(username, password);</span><br><span class=\"line\"></span><br><span class=\"line\">        sqlSession.close();</span><br><span class=\"line\"></span><br><span class=\"line\">        resp.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);</span><br><span class=\"line\">        PrintWriter writer = resp.getWriter();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (user != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//登陆成功</span></span><br><span class=\"line\">            writer.write(<span class=\"string\">\"登陆成功\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//登陆失败</span></span><br><span class=\"line\">            writer.write(<span class=\"string\">\"登录失败\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>讲了这么多废话，总结来说Servlet就是一群人来制定Java应用中使用Web时的各种规范，统一接口，其他内部实现由厂商自己实现，tomcat jetty jboss等等应运而生。</p>\n<p>关于他如何工作的：一个http请求到来，容器将请求封装成Servlet中的request对象，在request中你可以得到所有的http信息，然后你可以取出来操作，最后你再把数据封装成Servlet的response对象，应用容器将respose对象解析之后封装成一个http response。</p>\n<p>Web服务器习惯处理静态页面，所以需要一个程序来帮忙处理动态请求(如当前时间)。Web服务器程序会将动态请求转发给帮助程序，帮助程序处理后，返回处理后的静态结果给Web服务器程序。这样就避免了Web服务器程序处理动态页面。</p>\n<h1 id=\"SpringMVC框架\"><a href=\"#SpringMVC框架\" class=\"headerlink\" title=\"SpringMVC框架\"></a>SpringMVC框架</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Spring MVC是一个基于Java的实现了MVC设计模式的请求驱动类型的轻量级Web框架，通过把Model，View，Controller分离，将web层进行职责解耦，把复杂的web应用分成逻辑清晰的几部分，简化开发，减少出错，方便组内开发人员之间的配合。</p>\n<h3 id=\"SpringMVC和Servlet的区别与联系\"><a href=\"#SpringMVC和Servlet的区别与联系\" class=\"headerlink\" title=\"SpringMVC和Servlet的区别与联系\"></a>SpringMVC和Servlet的区别与联系</h3><ul>\n<li><p>Servlet：性能最好，处理HTTP请求的标准和规范。</p>\n</li>\n<li><p>SpringMVC：开发效率高（好多共性的东西都封装好了，是对Servlet的封装，核心的DispatcherServlet最终继承自HttpServlet）</p>\n</li>\n</ul>\n<p>这两者的关系，就如同MyBatis和JDBC，一个性能好，一个开发效率高，是对另一个的封装。</p>\n<h3 id=\"Controller层示例\"><a href=\"#Controller层示例\" class=\"headerlink\" title=\"Controller层示例\"></a>Controller层示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/user\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    IUserService service;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/login.do\"</span>, method = &#123;RequestMethod.GET&#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">login</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        User result = service.login(user);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/pages/success.html\"</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/pages/error.html\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<center>\n👀开发过程肉眼可见的简介♥\n</center>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><strong><center>本篇主要记录Java后端开发学习过程中关于Servlet相关技术路线的梳理和总结</center></strong></p>\n<p>按技术迭代顺序依次从下述几个Web技术开展梳理：</p>\n<ul>\n<li>ServerSocket编程</li>\n<li>Web服务器</li>\n<li>Servlet规范</li>\n<li>SpringMCV框架</li>\n</ul>\n<h1 id=\"ServerSocket编程\"><a href=\"#ServerSocket编程\" class=\"headerlink\" title=\"ServerSocket编程\"></a>ServerSocket编程</h1><p><strong><center>本部分通过手撸一个基于Java的简易HTTP服务器来体会最原初的JavaWeb后端开发过程</center></strong></p>\n<h2 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><p>这里客户端就不使用Java代码编写了，可以考虑使用最基本的浏览器或者后端测试工具如PostMan。</p>\n<h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><ul>\n<li>第一步我们先创建ServerSocket，监听8080端口</li>\n<li>第二步接收到请求后把流在控制台进行输出</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpServer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        ServerSocket serverSocket = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Socket socket = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        InputStream is = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        InputStreamReader isr = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        BufferedReader br = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        OutputStream os = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        PrintWriter pw = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            serverSocket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">8080</span>);</span><br><span class=\"line\">            <span class=\"comment\">//调用accept()方法开始监听，等待客户端的连接</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((socket = serverSocket.accept()) != <span class=\"keyword\">null</span> )&#123;</span><br><span class=\"line\">                List&lt;String&gt; lines = IOUtils.readLines(socket.getInputStream(), <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (String line : lines) &#123;</span><br><span class=\"line\">                    System.out.println(line);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//关闭资源</span></span><br><span class=\"line\">            pw.close();</span><br><span class=\"line\">            os.close();</span><br><span class=\"line\">            br.close();</span><br><span class=\"line\">            isr.close();</span><br><span class=\"line\">            is.close();</span><br><span class=\"line\">            socket.close();</span><br><span class=\"line\">            serverSocket.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打印到控制台是以下这段文本:<br><img src=\"https://img.gejiba.com/images/e49002a3b302ec04645132ea159a3f8a.png\" alt></p>\n<p><strong>解释一下：</strong> 上述代码监听了8080端口并将客户端的访问请求打印为字符串，即控制台中的文本信息，只要我们的服务器解析这段字符串然后拼接成request，就能封装HTTP请求。但是这时观察浏览器界面发现没有任何响应。因为我们编写的HTTP服务器什么都没返回就关闭了连接。如果要浏览器正确的显示我们想要看到的helloword。同样也要拼接成浏览器能理解的http协议响应格式才能正确被解析。</p>\n<p>下面继续改动代码，让http返回200成功，并返回helloword：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpServer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        ServerSocket serverSocket = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Socket socket = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        InputStream is = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        InputStreamReader isr = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        BufferedReader br = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        OutputStream os = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        PrintWriter pw = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            serverSocket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">8080</span>);</span><br><span class=\"line\">            <span class=\"comment\">//调用accept()方法开始监听，等待客户端的连接</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((socket = serverSocket.accept()) != <span class=\"keyword\">null</span> )&#123;</span><br><span class=\"line\">                <span class=\"comment\">//获取输出流，响应客户端的请求</span></span><br><span class=\"line\">                os = socket.getOutputStream();</span><br><span class=\"line\">                pw = <span class=\"keyword\">new</span> PrintWriter(os);</span><br><span class=\"line\">                pw.write(<span class=\"string\">\"HTTP/1.1 200 OK\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"Date: Fri, 7 Sept 2022 06:07:21 GMT\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"Content-Type: text/html; charset=UTF-8\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"&lt;html&gt;\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"      &lt;head&gt;&lt;/head&gt;\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"      &lt;body&gt;\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"            helloWord!\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"      &lt;/body&gt;\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"&lt;/html&gt;\"</span>);</span><br><span class=\"line\">                pw.flush();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//关闭资源</span></span><br><span class=\"line\">            pw.close();</span><br><span class=\"line\">            os.close();</span><br><span class=\"line\">            br.close();</span><br><span class=\"line\">            isr.close();</span><br><span class=\"line\">            is.close();</span><br><span class=\"line\">            socket.close();</span><br><span class=\"line\">            serverSocket.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>浏览器访问：localhost:8080 可见：<br><img src=\"https://img.gejiba.com/images/e252a903e9cf4d35eaa77788489e4a4c.png\" alt></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上述示例实现了一个最简单的基于HTTP协议的Java服务器后端，里面并不包含对request请求字符串的处理，仅仅是打印了它，response也仅仅是按HTTP协议的规定封装了一句“helloworld！”。如此简易原始的HTTP服务器的整个访问和回复过程是如此繁琐，可见新技术出现的必要性。</p>\n<h1 id=\"Web服务器\"><a href=\"#Web服务器\" class=\"headerlink\" title=\"Web服务器\"></a>Web服务器</h1><p><strong><center><br>Web服务器是一个应该程序(软件)，对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作，让Web开发更加便捷。主要功能是”提供网上信息浏览服务”</center></strong></p>\n<p><img src=\"https://img.gejiba.com/images/d2eca8a0000dc6e254f5bcf9300b8418.png\" alt></p>\n<p>下面以Apache Tomcat服务器为例展示一个最简单的HTTP Web服务。</p>\n<h2 id=\"创建展示页面\"><a href=\"#创建展示页面\" class=\"headerlink\" title=\"创建展示页面\"></a>创建展示页面</h2><p>在Tomcat根目录的<strong>Webapps</strong>下创建一个test文件夹，内部创建hello.html文件用于返回请求页面👇👇</p>\n<p><img src=\"https://img.gejiba.com/images/ba7d619e9f80190fa9b379c01b9ac67d.png\" alt></p>\n<h2 id=\"启动服务器并请求资源\"><a href=\"#启动服务器并请求资源\" class=\"headerlink\" title=\"启动服务器并请求资源\"></a>启动服务器并请求资源</h2><ul>\n<li>启动Tomcat根目录下的<strong>bin/startup.bat</strong></li>\n<li>使用Post访问<strong>localhost:8080/test/hello.html</strong></li>\n</ul>\n<p><img src=\"https://img.gejiba.com/images/2c4d42954c3df74e89901c3eac879458.png\" alt></p>\n<h2 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>Web服务器作用?<br>➢封装HTTP协议操作，简化开发<br>➢可以将Web项目部署到服务器中，对外提供网上浏览服务</li>\n<li>什么是Tomcat?<br>Tomcat是一个轻量级的Web服务器， 支持Servlet/JSP少量JavaEE规范，也称为Web容器，Servlet容器，Servlet依赖于它或其他Web服务器才能正常运行。</li>\n</ol>\n<h1 id=\"Servlet规范\"><a href=\"#Servlet规范\" class=\"headerlink\" title=\"Servlet规范\"></a>Servlet规范</h1><h2 id=\"Servlet规范简介\"><a href=\"#Servlet规范简介\" class=\"headerlink\" title=\"Servlet规范简介\"></a>Servlet规范简介</h2><p>Servlet（Server Applet，服务端小程序，是服务端的一小部分），全称Java Servlet，未有中文译文。是用Java编写的服务器端程序。其主要功能在于交互式地浏览和修改数据，生成动态Web内容。狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。</p>\n<h3 id=\"补充：Servlet和Web服务器的关系\"><a href=\"#补充：Servlet和Web服务器的关系\" class=\"headerlink\" title=\"补充：Servlet和Web服务器的关系\"></a>补充：Servlet和Web服务器的关系</h3><p>首先要明白我们从来不会在Servlet中写什么监听8080端口的代码，Servlet不会直接和客户端打交道！这些全被Web服务器封装了。</p>\n<p>那请求是怎么来到Servlet的呢？答案是Servlet容器，比如我们最常用的Tomcat。Servlet都是部署在一个容器中的，不然你的Servlet根本不起作用。</p>\n<p>Tomcat才是与客户端直接打交道的家伙，它监听了端口，请求过来后，根据URL等信息，确定要将请求交给哪个Servlet去处理，然后调用那个Servlet的service方法，service方法返回一个response对象，Tomcat再把这个respond返回给客户端。</p>\n<h2 id=\"接口代码\"><a href=\"#接口代码\" class=\"headerlink\" title=\"接口代码\"></a>接口代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Javax.Servlet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Servlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ServletConfig var1)</span> <span class=\"keyword\">throws</span> ServletException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">ServletConfig <span class=\"title\">getServletConfig</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(ServletRequest var1, ServletResponse var2)</span> <span class=\"keyword\">throws</span> ServletException, IOException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getServletInfo</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Servlet接口定义的是一套处理网络请求的规范，所有实现Servlet的类，都需要实现它的那五个方法，其中最主要的是两个声明周期方法init()和destory()，还有一个处理请求的service()。也就是说，所有实现Servlet接口的类，或者说，所有想要处理网络请求的类，都需要回答这三个问题：</p>\n<ul>\n<li>你初始化时要做什么？</li>\n<li>你销毁时要做什么？</li>\n<li>你接收到请求时要做什么？</li>\n</ul>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><p>1、客户端请求该 Servlet；</p>\n<p>2、Tomcat加载 Servlet 类到内存；</p>\n<p>3、Tomcat实例化并调用init()方法初始化该 Servlet；</p>\n<p>4、Tomcat调用service()（根据请求方法不同调用doGet() 或者 doPost()，此外还有doHead()、doPut()、doTrace()、doDelete()、doOptions()）；</p>\n<p>5、destroy()；</p>\n<p>6、加载和实例化 Servlet。这项操作一般是动态执行的。然而，Server 通常会提供一个管理的选项，用于在 Server 启动时强制装载和初始化特定的 Servlet；</p>\n<p>7、Server 创建一个 Servlet的实例；</p>\n<p>8、第一个客户端的请求到达 Server；</p>\n<p>9、Server 调用 Servlet 的 init() 方法（可配置为 Server 创建 Servlet 实例时调用）；</p>\n<p>10、一个客户端的请求到达 Server；</p>\n<p>11、Server 创建一个请求对象，处理客户端请求；</p>\n<p>12、Server 创建一个响应对象，响应客户端请求；</p>\n<p>13、Server 激活 Servlet 的 service() 方法，传递请求和响应对象作为参数；</p>\n<p>14、service() 方法获得关于请求对象的信息，处理请求，访问其他资源，获得需要的信息；</p>\n<p>15、service() 方法使用响应对象的方法，将响应传回Server，最终到达客户端。service()方法可能激活其它方法以处理请求，如 doGet() 或 doPost() 或程序员自己开发的新的方法；</p>\n<h2 id=\"继承体系\"><a href=\"#继承体系\" class=\"headerlink\" title=\"继承体系\"></a>继承体系</h2><p><a href=\"https://img.gejiba.com/image/EAAFoV\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.gejiba.com/images/c4ed97e0e4b645e0968dc28a9fd82b22.png\" alt></a></p>\n<h3 id=\"HttpServlet源码\"><a href=\"#HttpServlet源码\" class=\"headerlink\" title=\"HttpServlet源码\"></a>HttpServlet源码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> javax.servlet.http;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.MessageFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Enumeration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ResourceBundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.GenericServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">GenericServlet</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String METHOD_DELETE = <span class=\"string\">\"DELETE\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String METHOD_HEAD = <span class=\"string\">\"HEAD\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String METHOD_GET = <span class=\"string\">\"GET\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String METHOD_OPTIONS = <span class=\"string\">\"OPTIONS\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String METHOD_POST = <span class=\"string\">\"POST\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String METHOD_PUT = <span class=\"string\">\"PUT\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String METHOD_TRACE = <span class=\"string\">\"TRACE\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String HEADER_IFMODSINCE = <span class=\"string\">\"If-Modified-Since\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String HEADER_LASTMOD = <span class=\"string\">\"Last-Modified\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String LSTRING_FILE = <span class=\"string\">\"javax.servlet.http.LocalStrings\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ResourceBundle lStrings = ResourceBundle.getBundle(<span class=\"string\">\"javax.servlet.http.LocalStrings\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HttpServlet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String protocol = req.getProtocol();</span><br><span class=\"line\">        String msg = lStrings.getString(<span class=\"string\">\"http.method_get_not_supported\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (protocol.endsWith(<span class=\"string\">\"1.1\"</span>)) &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">405</span>, msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">400</span>, msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">long</span> <span class=\"title\">getLastModified</span><span class=\"params\">(HttpServletRequest req)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1L</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doHead</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        NoBodyResponse response = <span class=\"keyword\">new</span> NoBodyResponse(resp);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.doGet(req, response);</span><br><span class=\"line\">        response.setContentLength();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String protocol = req.getProtocol();</span><br><span class=\"line\">        String msg = lStrings.getString(<span class=\"string\">\"http.method_post_not_supported\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (protocol.endsWith(<span class=\"string\">\"1.1\"</span>)) &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">405</span>, msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">400</span>, msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPut</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String protocol = req.getProtocol();</span><br><span class=\"line\">        String msg = lStrings.getString(<span class=\"string\">\"http.method_put_not_supported\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (protocol.endsWith(<span class=\"string\">\"1.1\"</span>)) &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">405</span>, msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">400</span>, msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doDelete</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String protocol = req.getProtocol();</span><br><span class=\"line\">        String msg = lStrings.getString(<span class=\"string\">\"http.method_delete_not_supported\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (protocol.endsWith(<span class=\"string\">\"1.1\"</span>)) &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">405</span>, msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">400</span>, msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Method[] getAllDeclaredMethods(Class c) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c.equals(HttpServlet.class)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Method[] parentMethods = <span class=\"keyword\">this</span>.getAllDeclaredMethods(c.getSuperclass());</span><br><span class=\"line\">            Method[] thisMethods = c.getDeclaredMethods();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (parentMethods != <span class=\"keyword\">null</span> &amp;&amp; parentMethods.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                Method[] allMethods = <span class=\"keyword\">new</span> Method[parentMethods.length + thisMethods.length];</span><br><span class=\"line\">                System.arraycopy(parentMethods, <span class=\"number\">0</span>, allMethods, <span class=\"number\">0</span>, parentMethods.length);</span><br><span class=\"line\">                System.arraycopy(thisMethods, <span class=\"number\">0</span>, allMethods, parentMethods.length, thisMethods.length);</span><br><span class=\"line\">                thisMethods = allMethods;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> thisMethods;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doOptions</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        Method[] methods = <span class=\"keyword\">this</span>.getAllDeclaredMethods(<span class=\"keyword\">this</span>.getClass());</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ALLOW_GET = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ALLOW_HEAD = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ALLOW_POST = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ALLOW_PUT = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ALLOW_DELETE = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ALLOW_TRACE = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ALLOW_OPTIONS = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; methods.length; ++i) &#123;</span><br><span class=\"line\">            Method m = methods[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m.getName().equals(<span class=\"string\">\"doGet\"</span>)) &#123;</span><br><span class=\"line\">                ALLOW_GET = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                ALLOW_HEAD = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m.getName().equals(<span class=\"string\">\"doPost\"</span>)) &#123;</span><br><span class=\"line\">                ALLOW_POST = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m.getName().equals(<span class=\"string\">\"doPut\"</span>)) &#123;</span><br><span class=\"line\">                ALLOW_PUT = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m.getName().equals(<span class=\"string\">\"doDelete\"</span>)) &#123;</span><br><span class=\"line\">                ALLOW_DELETE = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        String allow = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOW_GET &amp;&amp; allow == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            allow = <span class=\"string\">\"GET\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOW_HEAD) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (allow == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                allow = <span class=\"string\">\"HEAD\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                allow = allow + <span class=\"string\">\", HEAD\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOW_POST) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (allow == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                allow = <span class=\"string\">\"POST\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                allow = allow + <span class=\"string\">\", POST\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOW_PUT) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (allow == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                allow = <span class=\"string\">\"PUT\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                allow = allow + <span class=\"string\">\", PUT\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOW_DELETE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (allow == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                allow = <span class=\"string\">\"DELETE\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                allow = allow + <span class=\"string\">\", DELETE\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOW_TRACE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (allow == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                allow = <span class=\"string\">\"TRACE\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                allow = allow + <span class=\"string\">\", TRACE\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOW_OPTIONS) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (allow == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                allow = <span class=\"string\">\"OPTIONS\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                allow = allow + <span class=\"string\">\", OPTIONS\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        resp.setHeader(<span class=\"string\">\"Allow\"</span>, allow);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doTrace</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String CRLF = <span class=\"string\">\"\\r\\n\"</span>;</span><br><span class=\"line\">        String responseString = <span class=\"string\">\"TRACE \"</span> + req.getRequestURI() + <span class=\"string\">\" \"</span> + req.getProtocol();</span><br><span class=\"line\"></span><br><span class=\"line\">        String headerName;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Enumeration reqHeaderEnum = req.getHeaderNames(); reqHeaderEnum.hasMoreElements(); responseString = responseString + CRLF + headerName + <span class=\"string\">\": \"</span> + req.getHeader(headerName)) &#123;</span><br><span class=\"line\">            headerName = (String)reqHeaderEnum.nextElement();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        responseString = responseString + CRLF;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> responseLength = responseString.length();</span><br><span class=\"line\">        resp.setContentType(<span class=\"string\">\"message/http\"</span>);</span><br><span class=\"line\">        resp.setContentLength(responseLength);</span><br><span class=\"line\">        ServletOutputStream out = resp.getOutputStream();</span><br><span class=\"line\">        out.print(responseString);</span><br><span class=\"line\">        out.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String method = req.getMethod();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> lastModified;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"GET\"</span>)) &#123;</span><br><span class=\"line\">            lastModified = <span class=\"keyword\">this</span>.getLastModified(req);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lastModified == -<span class=\"number\">1L</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.doGet(req, resp);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> ifModifiedSince = req.getDateHeader(<span class=\"string\">\"If-Modified-Since\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ifModifiedSince &lt; lastModified / <span class=\"number\">1000L</span> * <span class=\"number\">1000L</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.maybeSetLastModified(resp, lastModified);</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.doGet(req, resp);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    resp.setStatus(<span class=\"number\">304</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"HEAD\"</span>)) &#123;</span><br><span class=\"line\">            lastModified = <span class=\"keyword\">this</span>.getLastModified(req);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.maybeSetLastModified(resp, lastModified);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.doHead(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"POST\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.doPost(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"PUT\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.doPut(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"DELETE\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.doDelete(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"OPTIONS\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.doOptions(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"TRACE\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.doTrace(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            String errMsg = lStrings.getString(<span class=\"string\">\"http.method_not_implemented\"</span>);</span><br><span class=\"line\">            Object[] errArgs = <span class=\"keyword\">new</span> Object[]&#123;method&#125;;</span><br><span class=\"line\">            errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">501</span>, errMsg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">maybeSetLastModified</span><span class=\"params\">(HttpServletResponse resp, <span class=\"keyword\">long</span> lastModified)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!resp.containsHeader(<span class=\"string\">\"Last-Modified\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lastModified &gt;= <span class=\"number\">0L</span>) &#123;</span><br><span class=\"line\">                resp.setDateHeader(<span class=\"string\">\"Last-Modified\"</span>, lastModified);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(ServletRequest req, ServletResponse res)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        HttpServletRequest request;</span><br><span class=\"line\">        HttpServletResponse response;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            request = (HttpServletRequest)req;</span><br><span class=\"line\">            response = (HttpServletResponse)res;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassCastException var6) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ServletException(<span class=\"string\">\"non-HTTP request or response\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.service(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Servlet示例\"><a href=\"#Servlet示例\" class=\"headerlink\" title=\"Servlet示例\"></a>Servlet示例</h2><p><strong><center>👇此处展示一段处理登录业务的Servlet代码👇</center></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.geyu.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.geyu.web.mapper.UserMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.geyu.web.pojo.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.io.Resources;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/loginServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServletDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String username = req.getParameter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">        String password = req.getParameter(<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        String resource = <span class=\"string\">\"mybatis-config.xml\"</span>;</span><br><span class=\"line\">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class=\"line\">        SqlSessionFactory sqlSessionFactory = <span class=\"keyword\">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class=\"line\"></span><br><span class=\"line\">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class=\"line\"></span><br><span class=\"line\">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        User user = userMapper.select(username, password);</span><br><span class=\"line\"></span><br><span class=\"line\">        sqlSession.close();</span><br><span class=\"line\"></span><br><span class=\"line\">        resp.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);</span><br><span class=\"line\">        PrintWriter writer = resp.getWriter();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (user != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//登陆成功</span></span><br><span class=\"line\">            writer.write(<span class=\"string\">\"登陆成功\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//登陆失败</span></span><br><span class=\"line\">            writer.write(<span class=\"string\">\"登录失败\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>讲了这么多废话，总结来说Servlet就是一群人来制定Java应用中使用Web时的各种规范，统一接口，其他内部实现由厂商自己实现，tomcat jetty jboss等等应运而生。</p>\n<p>关于他如何工作的：一个http请求到来，容器将请求封装成Servlet中的request对象，在request中你可以得到所有的http信息，然后你可以取出来操作，最后你再把数据封装成Servlet的response对象，应用容器将respose对象解析之后封装成一个http response。</p>\n<p>Web服务器习惯处理静态页面，所以需要一个程序来帮忙处理动态请求(如当前时间)。Web服务器程序会将动态请求转发给帮助程序，帮助程序处理后，返回处理后的静态结果给Web服务器程序。这样就避免了Web服务器程序处理动态页面。</p>\n<h1 id=\"SpringMVC框架\"><a href=\"#SpringMVC框架\" class=\"headerlink\" title=\"SpringMVC框架\"></a>SpringMVC框架</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Spring MVC是一个基于Java的实现了MVC设计模式的请求驱动类型的轻量级Web框架，通过把Model，View，Controller分离，将web层进行职责解耦，把复杂的web应用分成逻辑清晰的几部分，简化开发，减少出错，方便组内开发人员之间的配合。</p>\n<h3 id=\"SpringMVC和Servlet的区别与联系\"><a href=\"#SpringMVC和Servlet的区别与联系\" class=\"headerlink\" title=\"SpringMVC和Servlet的区别与联系\"></a>SpringMVC和Servlet的区别与联系</h3><ul>\n<li><p>Servlet：性能最好，处理HTTP请求的标准和规范。</p>\n</li>\n<li><p>SpringMVC：开发效率高（好多共性的东西都封装好了，是对Servlet的封装，核心的DispatcherServlet最终继承自HttpServlet）</p>\n</li>\n</ul>\n<p>这两者的关系，就如同MyBatis和JDBC，一个性能好，一个开发效率高，是对另一个的封装。</p>\n<h3 id=\"Controller层示例\"><a href=\"#Controller层示例\" class=\"headerlink\" title=\"Controller层示例\"></a>Controller层示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/user\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    IUserService service;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/login.do\"</span>, method = &#123;RequestMethod.GET&#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">login</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        User result = service.login(user);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/pages/success.html\"</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/pages/error.html\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<center>\n👀开发过程肉眼可见的简介♥\n</center>\n"},{"title":"什么是MNIST 数据集","date":"2019-08-27T16:00:00.000Z","_content":"\n**MNIST 数据集已经是一个被”嚼烂”了的数据集, 很多教程都会对它”下手”, 几乎成为一个 “典范”. 不过有些人可能对它还不是很了解, 下面来介绍一下.**\n\n![手写数字](https://s1.ax1x.com/2022/09/05/vT2wAP.png \"手写数字\")\n\nMNIST 数据集可在 http://yann.lecun.com/exdb/mnist/ 获取, 它包含了四个部分:\n\n- Training set images: train-images-idx3-ubyte.gz (9.9 MB, 解压后 47 MB, 包含 60,000 个样本)\n- Training set labels: train-labels-idx1-ubyte.gz (29 KB, 解压后 60 KB, 包含 60,000 个标签)\n- Test set images: t10k-images-idx3-ubyte.gz (1.6 MB, 解压后 7.8 MB, 包含 10,000 个样本)\n- Test set labels: t10k-labels-idx1-ubyte.gz (5KB, 解压后 10 KB, 包含 10,000 个标签)\n\n![解压后](https://s1.ax1x.com/2022/09/05/vT20tf.png \"解压后\")\n\nMNIST 数据集来自美国国家标准与技术研究所, National Institute of Standards and Technology (NIST). 训练集 (training set) 由来自 250 个不同人手写的数字构成, 其中 50% 是高中学生, 50% 来自人口普查局 (the Census Bureau) 的工作人员. 测试集(test set) 也是同样比例的手写数字数据.\n","source":"_posts/mnist数据集介绍.md","raw":"---\ntitle: 什么是MNIST 数据集\ntags: [手写识别,MNIST]\n\ncategories: [数据集]\ndate: 2019-8-28\n---\n\n**MNIST 数据集已经是一个被”嚼烂”了的数据集, 很多教程都会对它”下手”, 几乎成为一个 “典范”. 不过有些人可能对它还不是很了解, 下面来介绍一下.**\n\n![手写数字](https://s1.ax1x.com/2022/09/05/vT2wAP.png \"手写数字\")\n\nMNIST 数据集可在 http://yann.lecun.com/exdb/mnist/ 获取, 它包含了四个部分:\n\n- Training set images: train-images-idx3-ubyte.gz (9.9 MB, 解压后 47 MB, 包含 60,000 个样本)\n- Training set labels: train-labels-idx1-ubyte.gz (29 KB, 解压后 60 KB, 包含 60,000 个标签)\n- Test set images: t10k-images-idx3-ubyte.gz (1.6 MB, 解压后 7.8 MB, 包含 10,000 个样本)\n- Test set labels: t10k-labels-idx1-ubyte.gz (5KB, 解压后 10 KB, 包含 10,000 个标签)\n\n![解压后](https://s1.ax1x.com/2022/09/05/vT20tf.png \"解压后\")\n\nMNIST 数据集来自美国国家标准与技术研究所, National Institute of Standards and Technology (NIST). 训练集 (training set) 由来自 250 个不同人手写的数字构成, 其中 50% 是高中学生, 50% 来自人口普查局 (the Census Bureau) 的工作人员. 测试集(test set) 也是同样比例的手写数字数据.\n","slug":"mnist数据集介绍","published":1,"updated":"2022-09-05T05:53:17.546Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jba02006v7svwyad4k3o0","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p><strong>MNIST 数据集已经是一个被”嚼烂”了的数据集, 很多教程都会对它”下手”, 几乎成为一个 “典范”. 不过有些人可能对它还不是很了解, 下面来介绍一下.</strong></p>\n<p><img src=\"https://s1.ax1x.com/2022/09/05/vT2wAP.png\" alt=\"手写数字\" title=\"手写数字\"></p>\n<p>MNIST 数据集可在 <a href=\"http://yann.lecun.com/exdb/mnist/\" target=\"_blank\" rel=\"noopener\">http://yann.lecun.com/exdb/mnist/</a> 获取, 它包含了四个部分:</p>\n<ul>\n<li>Training set images: train-images-idx3-ubyte.gz (9.9 MB, 解压后 47 MB, 包含 60,000 个样本)</li>\n<li>Training set labels: train-labels-idx1-ubyte.gz (29 KB, 解压后 60 KB, 包含 60,000 个标签)</li>\n<li>Test set images: t10k-images-idx3-ubyte.gz (1.6 MB, 解压后 7.8 MB, 包含 10,000 个样本)</li>\n<li>Test set labels: t10k-labels-idx1-ubyte.gz (5KB, 解压后 10 KB, 包含 10,000 个标签)</li>\n</ul>\n<p><img src=\"https://s1.ax1x.com/2022/09/05/vT20tf.png\" alt=\"解压后\" title=\"解压后\"></p>\n<p>MNIST 数据集来自美国国家标准与技术研究所, National Institute of Standards and Technology (NIST). 训练集 (training set) 由来自 250 个不同人手写的数字构成, 其中 50% 是高中学生, 50% 来自人口普查局 (the Census Bureau) 的工作人员. 测试集(test set) 也是同样比例的手写数字数据.</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<p><strong>MNIST 数据集已经是一个被”嚼烂”了的数据集, 很多教程都会对它”下手”, 几乎成为一个 “典范”. 不过有些人可能对它还不是很了解, 下面来介绍一下.</strong></p>\n<p><img src=\"https://s1.ax1x.com/2022/09/05/vT2wAP.png\" alt=\"手写数字\" title=\"手写数字\"></p>\n<p>MNIST 数据集可在 <a href=\"http://yann.lecun.com/exdb/mnist/\" target=\"_blank\" rel=\"noopener\">http://yann.lecun.com/exdb/mnist/</a> 获取, 它包含了四个部分:</p>\n<ul>\n<li>Training set images: train-images-idx3-ubyte.gz (9.9 MB, 解压后 47 MB, 包含 60,000 个样本)</li>\n<li>Training set labels: train-labels-idx1-ubyte.gz (29 KB, 解压后 60 KB, 包含 60,000 个标签)</li>\n<li>Test set images: t10k-images-idx3-ubyte.gz (1.6 MB, 解压后 7.8 MB, 包含 10,000 个样本)</li>\n<li>Test set labels: t10k-labels-idx1-ubyte.gz (5KB, 解压后 10 KB, 包含 10,000 个标签)</li>\n</ul>\n<p><img src=\"https://s1.ax1x.com/2022/09/05/vT20tf.png\" alt=\"解压后\" title=\"解压后\"></p>\n<p>MNIST 数据集来自美国国家标准与技术研究所, National Institute of Standards and Technology (NIST). 训练集 (training set) 由来自 250 个不同人手写的数字构成, 其中 50% 是高中学生, 50% 来自人口普查局 (the Census Bureau) 的工作人员. 测试集(test set) 也是同样比例的手写数字数据.</p>\n"},{"title":"MyBatis——解决属性名和数据库字段名不一致问题（注解方式)","date":"2022-09-05T16:00:00.000Z","_content":"## 提问与解答：\n**提问：**当我们使用注解开发时有时会遇到数据库字段名与实体类属性名不一致的问题。xml方式开发可以通过结果集映射的方式解决，那注解方式开发要怎么解决呢？\n\n**解答：**利用 **@Results()**注解！\n\nResults注解中有两个常用的参数，一个是id，另一个是value。\n\n- **id**：这个参数的主要作用在于唯一标记这个Results注解，如果接口中的其他抽象方法也需要通过result注解来解决属性名和数据库字段名不一致问题，那么重新写一个Results注解就太麻烦了，这时我们就可以通过@ResultMap()注解中传入Results注解的参数id来引用Results注解中的内容。\n\n- **value**：这个参数用于建立实体类与数据库表的映射关系，其中可以填写多个@Result注解，用来将实体类的属性名和数据库字段名一一对应。⚠**需要注意如果是主键字段，@Result注解中需要设置id=true。**\n\n## 代码示例：\n\n```java\npublic interface UserMapper {\n    @Select(\"select * from user\")\n    @Results(id=\"aaa\",value={\n            @Result(id=true,column = \"id\",property = \"userId\"),\n            @Result(column = \"name\",property = \"userName\"),\n            @Result(column = \"age\",property = \"userAge\")\n    })\n    List<User> getUsers();\n\n\n    @Select(\"select count(id) from user\")\n    @ResultMap(value={\"aaa\"})\n    int findTotalUser();\n}\n```","source":"_posts/mybatis——解决属性名和数据库字段名不一致问题（注解方式).md","raw":"---\ntitle:  MyBatis——解决属性名和数据库字段名不一致问题（注解方式)\ntags: [编程,学习,Java,MyBatis]\ncategories: [MyBatys]\ndate: 2022-9-6\n\n---\n## 提问与解答：\n**提问：**当我们使用注解开发时有时会遇到数据库字段名与实体类属性名不一致的问题。xml方式开发可以通过结果集映射的方式解决，那注解方式开发要怎么解决呢？\n\n**解答：**利用 **@Results()**注解！\n\nResults注解中有两个常用的参数，一个是id，另一个是value。\n\n- **id**：这个参数的主要作用在于唯一标记这个Results注解，如果接口中的其他抽象方法也需要通过result注解来解决属性名和数据库字段名不一致问题，那么重新写一个Results注解就太麻烦了，这时我们就可以通过@ResultMap()注解中传入Results注解的参数id来引用Results注解中的内容。\n\n- **value**：这个参数用于建立实体类与数据库表的映射关系，其中可以填写多个@Result注解，用来将实体类的属性名和数据库字段名一一对应。⚠**需要注意如果是主键字段，@Result注解中需要设置id=true。**\n\n## 代码示例：\n\n```java\npublic interface UserMapper {\n    @Select(\"select * from user\")\n    @Results(id=\"aaa\",value={\n            @Result(id=true,column = \"id\",property = \"userId\"),\n            @Result(column = \"name\",property = \"userName\"),\n            @Result(column = \"age\",property = \"userAge\")\n    })\n    List<User> getUsers();\n\n\n    @Select(\"select count(id) from user\")\n    @ResultMap(value={\"aaa\"})\n    int findTotalUser();\n}\n```","slug":"mybatis——解决属性名和数据库字段名不一致问题（注解方式)","published":1,"updated":"2022-09-07T05:14:08.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jba04006w7svwpflyyaxl","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"提问与解答：\"><a href=\"#提问与解答：\" class=\"headerlink\" title=\"提问与解答：\"></a>提问与解答：</h2><p><strong>提问：</strong>当我们使用注解开发时有时会遇到数据库字段名与实体类属性名不一致的问题。xml方式开发可以通过结果集映射的方式解决，那注解方式开发要怎么解决呢？</p>\n<p><strong>解答：</strong>利用 <strong>@Results()</strong>注解！</p>\n<p>Results注解中有两个常用的参数，一个是id，另一个是value。</p>\n<ul>\n<li><p><strong>id</strong>：这个参数的主要作用在于唯一标记这个Results注解，如果接口中的其他抽象方法也需要通过result注解来解决属性名和数据库字段名不一致问题，那么重新写一个Results注解就太麻烦了，这时我们就可以通过@ResultMap()注解中传入Results注解的参数id来引用Results注解中的内容。</p>\n</li>\n<li><p><strong>value</strong>：这个参数用于建立实体类与数据库表的映射关系，其中可以填写多个@Result注解，用来将实体类的属性名和数据库字段名一一对应。⚠<strong>需要注意如果是主键字段，@Result注解中需要设置id=true。</strong></p>\n</li>\n</ul>\n<h2 id=\"代码示例：\"><a href=\"#代码示例：\" class=\"headerlink\" title=\"代码示例：\"></a>代码示例：</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Select</span>(<span class=\"string\">\"select * from user\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Results</span>(id=<span class=\"string\">\"aaa\"</span>,value=&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Result</span>(id=<span class=\"keyword\">true</span>,column = <span class=\"string\">\"id\"</span>,property = <span class=\"string\">\"userId\"</span>),</span><br><span class=\"line\">            <span class=\"meta\">@Result</span>(column = <span class=\"string\">\"name\"</span>,property = <span class=\"string\">\"userName\"</span>),</span><br><span class=\"line\">            <span class=\"meta\">@Result</span>(column = <span class=\"string\">\"age\"</span>,property = <span class=\"string\">\"userAge\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"function\">List&lt;User&gt; <span class=\"title\">getUsers</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Select</span>(<span class=\"string\">\"select count(id) from user\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResultMap</span>(value=&#123;<span class=\"string\">\"aaa\"</span>&#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findTotalUser</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h2 id=\"提问与解答：\"><a href=\"#提问与解答：\" class=\"headerlink\" title=\"提问与解答：\"></a>提问与解答：</h2><p><strong>提问：</strong>当我们使用注解开发时有时会遇到数据库字段名与实体类属性名不一致的问题。xml方式开发可以通过结果集映射的方式解决，那注解方式开发要怎么解决呢？</p>\n<p><strong>解答：</strong>利用 <strong>@Results()</strong>注解！</p>\n<p>Results注解中有两个常用的参数，一个是id，另一个是value。</p>\n<ul>\n<li><p><strong>id</strong>：这个参数的主要作用在于唯一标记这个Results注解，如果接口中的其他抽象方法也需要通过result注解来解决属性名和数据库字段名不一致问题，那么重新写一个Results注解就太麻烦了，这时我们就可以通过@ResultMap()注解中传入Results注解的参数id来引用Results注解中的内容。</p>\n</li>\n<li><p><strong>value</strong>：这个参数用于建立实体类与数据库表的映射关系，其中可以填写多个@Result注解，用来将实体类的属性名和数据库字段名一一对应。⚠<strong>需要注意如果是主键字段，@Result注解中需要设置id=true。</strong></p>\n</li>\n</ul>\n<h2 id=\"代码示例：\"><a href=\"#代码示例：\" class=\"headerlink\" title=\"代码示例：\"></a>代码示例：</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Select</span>(<span class=\"string\">\"select * from user\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Results</span>(id=<span class=\"string\">\"aaa\"</span>,value=&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Result</span>(id=<span class=\"keyword\">true</span>,column = <span class=\"string\">\"id\"</span>,property = <span class=\"string\">\"userId\"</span>),</span><br><span class=\"line\">            <span class=\"meta\">@Result</span>(column = <span class=\"string\">\"name\"</span>,property = <span class=\"string\">\"userName\"</span>),</span><br><span class=\"line\">            <span class=\"meta\">@Result</span>(column = <span class=\"string\">\"age\"</span>,property = <span class=\"string\">\"userAge\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"function\">List&lt;User&gt; <span class=\"title\">getUsers</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Select</span>(<span class=\"string\">\"select count(id) from user\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResultMap</span>(value=&#123;<span class=\"string\">\"aaa\"</span>&#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findTotalUser</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"numpy之sum函数的axis参数","date":"2020-03-20T16:00:00.000Z","_content":"\n# 结论：\n\n没有axis参数表示全部相加，axis＝0表示按列相加，axis＝1表示按照行的方向。验证如下：\n![axis&sum](https://5b0988e595225.cdn.sohucs.com/images/20171124/e90ccf3e7386468fa64c8b4bc0e60e5e.png)\n\n# 推广：\naxis=i表示对array的第i个维度**变化**的方向进行操作！","source":"_posts/numpy中的axis参数.md","raw":"---\ntitle:  numpy之sum函数的axis参数\ntags: [python,numpy]\n\ncategories: [python]\ndate: 2020-3-21\n---\n\n# 结论：\n\n没有axis参数表示全部相加，axis＝0表示按列相加，axis＝1表示按照行的方向。验证如下：\n![axis&sum](https://5b0988e595225.cdn.sohucs.com/images/20171124/e90ccf3e7386468fa64c8b4bc0e60e5e.png)\n\n# 推广：\naxis=i表示对array的第i个维度**变化**的方向进行操作！","slug":"numpy中的axis参数","published":1,"updated":"2022-09-05T03:41:04.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jba0700707svwd6o4zosa","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"结论：\"><a href=\"#结论：\" class=\"headerlink\" title=\"结论：\"></a>结论：</h1><p>没有axis参数表示全部相加，axis＝0表示按列相加，axis＝1表示按照行的方向。验证如下：<br><img src=\"https://5b0988e595225.cdn.sohucs.com/images/20171124/e90ccf3e7386468fa64c8b4bc0e60e5e.png\" alt=\"axis&amp;sum\"></p>\n<h1 id=\"推广：\"><a href=\"#推广：\" class=\"headerlink\" title=\"推广：\"></a>推广：</h1><p>axis=i表示对array的第i个维度<strong>变化</strong>的方向进行操作！</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"结论：\"><a href=\"#结论：\" class=\"headerlink\" title=\"结论：\"></a>结论：</h1><p>没有axis参数表示全部相加，axis＝0表示按列相加，axis＝1表示按照行的方向。验证如下：<br><img src=\"https://5b0988e595225.cdn.sohucs.com/images/20171124/e90ccf3e7386468fa64c8b4bc0e60e5e.png\" alt=\"axis&amp;sum\"></p>\n<h1 id=\"推广：\"><a href=\"#推广：\" class=\"headerlink\" title=\"推广：\"></a>推广：</h1><p>axis=i表示对array的第i个维度<strong>变化</strong>的方向进行操作！</p>\n"},{"title":"关于ReLU的问题&思考","date":"2019-07-15T16:00:00.000Z","_content":"\n**今天看完🐟书后回头捋了一下，突然对ReLU激活函数产生了疑问。**\n## 引例\n**试想一下有X1，X2两个输入，对应三个输出的简易网络：**\n\n![eg net](https://s1.ax1x.com/2022/09/05/vTWizF.png \"markdown\")\n\n根据对应把权值W设为W11,W12,W13...W23\n**显然通过矩阵运算：**\n>Y1=W11·X1+W21·X2\n>Y2=W12·X1+W22·X2\n>Y3=W13·X1+W23·X2\n\n所得到的表达式依旧是X的**线性表达式**\n之后通过**ReLU层**（这里假设都>0）\n因为Y1，Y2，Y3＞0，故输出不变：\n>Y1=W11·X1+W21·X2\n>Y2=W12·X1+W22·X2\n>Y3=W13·X1+W23·X2\n\n## 问题提出\n我们知道引入激活函数的目的是为了**使层神经网络表达能力就更加强大（不再是输入的线性组合，而是几乎可以逼近任意函数，详见上篇Blog）**，而通过小实验发现，ReLU好像并没有改变原式的线性结构，反而是原式输出。那么是否有悖机器学习的原理呢？\n\n## 问题解决\n首先肯定一点：**上面的实验确实反映了ReLU没有改变实验对象的线性结构。**\n### 下面细说：\n首先观察实验，实验的基础是Y1,Y2,Y3＞0这个条件，在这个条件下显然是等价于恒等函数的。也就是说Y被原样加工。因为原来的表达式是线性结构，所以激活之后依旧是线性结构。但是，这并不能说明ReLU对增强神经网络的表现力无用。\n\n事实是，参与训练的数据首先不止2个（参考MNIST数据集，训练输入就6万个），其次对权值w的初始化是按标准差为0.01的高斯分布来进行的，**这就肯定输入ReLU层的数据不恒正**！\n![高斯分布](https://s1.ax1x.com/2022/09/05/vTWkM4.png \"Pandao editor.md\")\n而小于0的则被赋值0，这意味着什么呢？**线性结构被破坏！**\n\n用**矛盾推理法**来想一下这个问题（假设ReLU不改变线性结构）：\n- 那么应改满足F(X)=M·X（矩阵乘法）——>ReLU ——>M·X——>G(F(X))=N·M·X——>ReLU ——>N·M·X...\n- 可事实是：权值的正态性不保证每次输入都是正值，所以中间会出现等于0的情况\n- 也就是F(X)=M·X（矩阵乘法）——>**ReLU ——>0——>G(0）！=N·M·X**——>...\n- 显然线性传递被中断\n- 或者说形成了一个新的线性空间，新空间与恒等线性空间互相无法表示，使整个空间呈非线性结构\n","source":"_posts/关于ReLU的问题及思考.md","raw":"---\ntitle: 关于ReLU的问题&思考\ntags: [神经网络,激活函数,代数系统]\ndate: 2019-7-16\ncategories: [机器学习]\n---\n\n**今天看完🐟书后回头捋了一下，突然对ReLU激活函数产生了疑问。**\n## 引例\n**试想一下有X1，X2两个输入，对应三个输出的简易网络：**\n\n![eg net](https://s1.ax1x.com/2022/09/05/vTWizF.png \"markdown\")\n\n根据对应把权值W设为W11,W12,W13...W23\n**显然通过矩阵运算：**\n>Y1=W11·X1+W21·X2\n>Y2=W12·X1+W22·X2\n>Y3=W13·X1+W23·X2\n\n所得到的表达式依旧是X的**线性表达式**\n之后通过**ReLU层**（这里假设都>0）\n因为Y1，Y2，Y3＞0，故输出不变：\n>Y1=W11·X1+W21·X2\n>Y2=W12·X1+W22·X2\n>Y3=W13·X1+W23·X2\n\n## 问题提出\n我们知道引入激活函数的目的是为了**使层神经网络表达能力就更加强大（不再是输入的线性组合，而是几乎可以逼近任意函数，详见上篇Blog）**，而通过小实验发现，ReLU好像并没有改变原式的线性结构，反而是原式输出。那么是否有悖机器学习的原理呢？\n\n## 问题解决\n首先肯定一点：**上面的实验确实反映了ReLU没有改变实验对象的线性结构。**\n### 下面细说：\n首先观察实验，实验的基础是Y1,Y2,Y3＞0这个条件，在这个条件下显然是等价于恒等函数的。也就是说Y被原样加工。因为原来的表达式是线性结构，所以激活之后依旧是线性结构。但是，这并不能说明ReLU对增强神经网络的表现力无用。\n\n事实是，参与训练的数据首先不止2个（参考MNIST数据集，训练输入就6万个），其次对权值w的初始化是按标准差为0.01的高斯分布来进行的，**这就肯定输入ReLU层的数据不恒正**！\n![高斯分布](https://s1.ax1x.com/2022/09/05/vTWkM4.png \"Pandao editor.md\")\n而小于0的则被赋值0，这意味着什么呢？**线性结构被破坏！**\n\n用**矛盾推理法**来想一下这个问题（假设ReLU不改变线性结构）：\n- 那么应改满足F(X)=M·X（矩阵乘法）——>ReLU ——>M·X——>G(F(X))=N·M·X——>ReLU ——>N·M·X...\n- 可事实是：权值的正态性不保证每次输入都是正值，所以中间会出现等于0的情况\n- 也就是F(X)=M·X（矩阵乘法）——>**ReLU ——>0——>G(0）！=N·M·X**——>...\n- 显然线性传递被中断\n- 或者说形成了一个新的线性空间，新空间与恒等线性空间互相无法表示，使整个空间呈非线性结构\n","slug":"关于ReLU的问题及思考","published":1,"updated":"2022-09-05T06:14:09.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jba0900727svwb4z3ua4o","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p><strong>今天看完🐟书后回头捋了一下，突然对ReLU激活函数产生了疑问。</strong></p>\n<h2 id=\"引例\"><a href=\"#引例\" class=\"headerlink\" title=\"引例\"></a>引例</h2><p><strong>试想一下有X1，X2两个输入，对应三个输出的简易网络：</strong></p>\n<p><img src=\"https://s1.ax1x.com/2022/09/05/vTWizF.png\" alt=\"eg net\" title=\"markdown\"></p>\n<p>根据对应把权值W设为W11,W12,W13…W23<br><strong>显然通过矩阵运算：</strong></p>\n<blockquote>\n<p>Y1=W11·X1+W21·X2<br>Y2=W12·X1+W22·X2<br>Y3=W13·X1+W23·X2</p>\n</blockquote>\n<p>所得到的表达式依旧是X的<strong>线性表达式</strong><br>之后通过<strong>ReLU层</strong>（这里假设都&gt;0）<br>因为Y1，Y2，Y3＞0，故输出不变：</p>\n<blockquote>\n<p>Y1=W11·X1+W21·X2<br>Y2=W12·X1+W22·X2<br>Y3=W13·X1+W23·X2</p>\n</blockquote>\n<h2 id=\"问题提出\"><a href=\"#问题提出\" class=\"headerlink\" title=\"问题提出\"></a>问题提出</h2><p>我们知道引入激活函数的目的是为了<strong>使层神经网络表达能力就更加强大（不再是输入的线性组合，而是几乎可以逼近任意函数，详见上篇Blog）</strong>，而通过小实验发现，ReLU好像并没有改变原式的线性结构，反而是原式输出。那么是否有悖机器学习的原理呢？</p>\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><p>首先肯定一点：<strong>上面的实验确实反映了ReLU没有改变实验对象的线性结构。</strong></p>\n<h3 id=\"下面细说：\"><a href=\"#下面细说：\" class=\"headerlink\" title=\"下面细说：\"></a>下面细说：</h3><p>首先观察实验，实验的基础是Y1,Y2,Y3＞0这个条件，在这个条件下显然是等价于恒等函数的。也就是说Y被原样加工。因为原来的表达式是线性结构，所以激活之后依旧是线性结构。但是，这并不能说明ReLU对增强神经网络的表现力无用。</p>\n<p>事实是，参与训练的数据首先不止2个（参考MNIST数据集，训练输入就6万个），其次对权值w的初始化是按标准差为0.01的高斯分布来进行的，<strong>这就肯定输入ReLU层的数据不恒正</strong>！<br><img src=\"https://s1.ax1x.com/2022/09/05/vTWkM4.png\" alt=\"高斯分布\" title=\"Pandao editor.md\"><br>而小于0的则被赋值0，这意味着什么呢？<strong>线性结构被破坏！</strong></p>\n<p>用<strong>矛盾推理法</strong>来想一下这个问题（假设ReLU不改变线性结构）：</p>\n<ul>\n<li>那么应改满足F(X)=M·X（矩阵乘法）——&gt;ReLU ——&gt;M·X——&gt;G(F(X))=N·M·X——&gt;ReLU ——&gt;N·M·X…</li>\n<li>可事实是：权值的正态性不保证每次输入都是正值，所以中间会出现等于0的情况</li>\n<li>也就是F(X)=M·X（矩阵乘法）——&gt;<strong>ReLU ——&gt;0——&gt;G(0）！=N·M·X</strong>——&gt;…</li>\n<li>显然线性传递被中断</li>\n<li>或者说形成了一个新的线性空间，新空间与恒等线性空间互相无法表示，使整个空间呈非线性结构</li>\n</ul>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<p><strong>今天看完🐟书后回头捋了一下，突然对ReLU激活函数产生了疑问。</strong></p>\n<h2 id=\"引例\"><a href=\"#引例\" class=\"headerlink\" title=\"引例\"></a>引例</h2><p><strong>试想一下有X1，X2两个输入，对应三个输出的简易网络：</strong></p>\n<p><img src=\"https://s1.ax1x.com/2022/09/05/vTWizF.png\" alt=\"eg net\" title=\"markdown\"></p>\n<p>根据对应把权值W设为W11,W12,W13…W23<br><strong>显然通过矩阵运算：</strong></p>\n<blockquote>\n<p>Y1=W11·X1+W21·X2<br>Y2=W12·X1+W22·X2<br>Y3=W13·X1+W23·X2</p>\n</blockquote>\n<p>所得到的表达式依旧是X的<strong>线性表达式</strong><br>之后通过<strong>ReLU层</strong>（这里假设都&gt;0）<br>因为Y1，Y2，Y3＞0，故输出不变：</p>\n<blockquote>\n<p>Y1=W11·X1+W21·X2<br>Y2=W12·X1+W22·X2<br>Y3=W13·X1+W23·X2</p>\n</blockquote>\n<h2 id=\"问题提出\"><a href=\"#问题提出\" class=\"headerlink\" title=\"问题提出\"></a>问题提出</h2><p>我们知道引入激活函数的目的是为了<strong>使层神经网络表达能力就更加强大（不再是输入的线性组合，而是几乎可以逼近任意函数，详见上篇Blog）</strong>，而通过小实验发现，ReLU好像并没有改变原式的线性结构，反而是原式输出。那么是否有悖机器学习的原理呢？</p>\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><p>首先肯定一点：<strong>上面的实验确实反映了ReLU没有改变实验对象的线性结构。</strong></p>\n<h3 id=\"下面细说：\"><a href=\"#下面细说：\" class=\"headerlink\" title=\"下面细说：\"></a>下面细说：</h3><p>首先观察实验，实验的基础是Y1,Y2,Y3＞0这个条件，在这个条件下显然是等价于恒等函数的。也就是说Y被原样加工。因为原来的表达式是线性结构，所以激活之后依旧是线性结构。但是，这并不能说明ReLU对增强神经网络的表现力无用。</p>\n<p>事实是，参与训练的数据首先不止2个（参考MNIST数据集，训练输入就6万个），其次对权值w的初始化是按标准差为0.01的高斯分布来进行的，<strong>这就肯定输入ReLU层的数据不恒正</strong>！<br><img src=\"https://s1.ax1x.com/2022/09/05/vTWkM4.png\" alt=\"高斯分布\" title=\"Pandao editor.md\"><br>而小于0的则被赋值0，这意味着什么呢？<strong>线性结构被破坏！</strong></p>\n<p>用<strong>矛盾推理法</strong>来想一下这个问题（假设ReLU不改变线性结构）：</p>\n<ul>\n<li>那么应改满足F(X)=M·X（矩阵乘法）——&gt;ReLU ——&gt;M·X——&gt;G(F(X))=N·M·X——&gt;ReLU ——&gt;N·M·X…</li>\n<li>可事实是：权值的正态性不保证每次输入都是正值，所以中间会出现等于0的情况</li>\n<li>也就是F(X)=M·X（矩阵乘法）——&gt;<strong>ReLU ——&gt;0——&gt;G(0）！=N·M·X</strong>——&gt;…</li>\n<li>显然线性传递被中断</li>\n<li>或者说形成了一个新的线性空间，新空间与恒等线性空间互相无法表示，使整个空间呈非线性结构</li>\n</ul>\n"},{"title":"行人重识别代码实战（一）","date":"2019-08-21T16:00:00.000Z","_content":"# **代码描述**\n\n**代码来源：** <https://github.com/layumi/Person_reID_baseline_pytorch>\n\n`详细信息可见README.md`\n\n# prepare.py 文件简单讲解\n\n**文件代码：**\n``` python\nimport os\nfrom shutil import copyfile\n\n# You only need to change this line to your dataset download path\ndownload_path = 'C:/Users/葛宇/学习/ReId/数据集/Market-1501-v15.09.15'\n\nif not os.path.isdir(download_path):\n    print('please change the download_path')\n\nsave_path = download_path + '/pytorch'\nif not os.path.isdir(save_path):\n    os.mkdir(save_path)\n#-----------------------------------------\n#query\nquery_path = download_path + '/query'\nquery_save_path = download_path + '/pytorch/query'\nif not os.path.isdir(query_save_path):\n    os.mkdir(query_save_path)\n\nfor root, dirs, files in os.walk(query_path, topdown=True):\n    for name in files:\n        if not name[-3:]=='jpg':\n            continue\n        ID  = name.split('_')\n        src_path = query_path + '/' + name\n        dst_path = query_save_path + '/' + ID[0] \n        if not os.path.isdir(dst_path):\n            os.mkdir(dst_path)\n        copyfile(src_path, dst_path + '/' + name)\n\n#-----------------------------------------\n#multi-query\nquery_path = download_path + '/gt_bbox'\n# for dukemtmc-reid, we do not need multi-query\nif os.path.isdir(query_path):\n    query_save_path = download_path + '/pytorch/multi-query'\n    if not os.path.isdir(query_save_path):\n        os.mkdir(query_save_path)\n\n    for root, dirs, files in os.walk(query_path, topdown=True):\n        for name in files:\n            if not name[-3:]=='jpg':\n                continue\n            ID  = name.split('_')\n            src_path = query_path + '/' + name\n            dst_path = query_save_path + '/' + ID[0]\n            if not os.path.isdir(dst_path):\n                os.mkdir(dst_path)\n            copyfile(src_path, dst_path + '/' + name)\n\n#-----------------------------------------\n#gallery\ngallery_path = download_path + '/bounding_box_test'\ngallery_save_path = download_path + '/pytorch/gallery'\nif not os.path.isdir(gallery_save_path):\n    os.mkdir(gallery_save_path)\n\nfor root, dirs, files in os.walk(gallery_path, topdown=True):\n    for name in files:\n        if not name[-3:]=='jpg':\n            continue\n        ID  = name.split('_')\n        src_path = gallery_path + '/' + name\n        dst_path = gallery_save_path + '/' + ID[0]\n        if not os.path.isdir(dst_path):\n            os.mkdir(dst_path)\n        copyfile(src_path, dst_path + '/' + name)\n\n#---------------------------------------\n#train_all\ntrain_path = download_path + '/bounding_box_train'\ntrain_save_path = download_path + '/pytorch/train_all'\nif not os.path.isdir(train_save_path):\n    os.mkdir(train_save_path)\n\nfor root, dirs, files in os.walk(train_path, topdown=True):\n    for name in files:\n        if not name[-3:]=='jpg':\n            continue\n        ID  = name.split('_')\n        src_path = train_path + '/' + name\n        dst_path = train_save_path + '/' + ID[0]\n        if not os.path.isdir(dst_path):\n            os.mkdir(dst_path)\n        copyfile(src_path, dst_path + '/' + name)\n\n\n#---------------------------------------\n#train_val\ntrain_path = download_path + '/bounding_box_train'\ntrain_save_path = download_path + '/pytorch/train'\nval_save_path = download_path + '/pytorch/val'\nif not os.path.isdir(train_save_path):\n    os.mkdir(train_save_path)\n    os.mkdir(val_save_path)\n\nfor root, dirs, files in os.walk(train_path, topdown=True):\n    for name in files:\n        if not name[-3:]=='jpg':\n            continue\n        ID  = name.split('_')\n        src_path = train_path + '/' + name\n        dst_path = train_save_path + '/' + ID[0]\n        if not os.path.isdir(dst_path):\n            os.mkdir(dst_path)\n            dst_path = val_save_path + '/' + ID[0]  #first image is used as val image\n            os.mkdir(dst_path)\n        copyfile(src_path, dst_path + '/' + name)\n```\n**代码比较冗长，我总结一下。**\n这个脚本的作用是将原始数据集重新按图片ID分类。主要操作是通过调用系统函数加之必要的循环判断来实现。可不必细究。运行之前先将第五行`download_path = 'C:/Users/葛宇/学习/ReId/数据集/Market-1501-v15.09.15'`改为你自己的地址。\n按照原作者的使用教程，第一步要做的就是运行prepare.py文件。\n运行之后会发现在原先的Market1501数据集中（详见之前的博客）多出了一个文件夹“pytorch”,打开看看：\n\n![](https://s1.ax1x.com/2022/09/05/vT2hNV.png)\n\n里面是6个文件夹：\n1. gallery中包含752个文件夹项目，均按ID排序：![](https://s1.ax1x.com/2022/09/05/vT24hT.png)\n2. multi中是1051个文件夹项目，从0001到1501\n3. query中包含750个文件项目，不含0000和-1\n4. train中包含751个文件项目，不含0000和-1\n5. train all中包含751个文件项目，不含0000和-1\n6. val中包含751个文件项目，不含0000和-1\n\n具体情况可以自己尝试打开观察。","source":"_posts/行人重识别代码实战（一）.md","raw":"---\ntitle:  行人重识别代码实战（一）\ntags: [行人重识别,深度学习,图像处理]\ncategories: [深度学习]\ndate: 2019-8-22\n\n---\n# **代码描述**\n\n**代码来源：** <https://github.com/layumi/Person_reID_baseline_pytorch>\n\n`详细信息可见README.md`\n\n# prepare.py 文件简单讲解\n\n**文件代码：**\n``` python\nimport os\nfrom shutil import copyfile\n\n# You only need to change this line to your dataset download path\ndownload_path = 'C:/Users/葛宇/学习/ReId/数据集/Market-1501-v15.09.15'\n\nif not os.path.isdir(download_path):\n    print('please change the download_path')\n\nsave_path = download_path + '/pytorch'\nif not os.path.isdir(save_path):\n    os.mkdir(save_path)\n#-----------------------------------------\n#query\nquery_path = download_path + '/query'\nquery_save_path = download_path + '/pytorch/query'\nif not os.path.isdir(query_save_path):\n    os.mkdir(query_save_path)\n\nfor root, dirs, files in os.walk(query_path, topdown=True):\n    for name in files:\n        if not name[-3:]=='jpg':\n            continue\n        ID  = name.split('_')\n        src_path = query_path + '/' + name\n        dst_path = query_save_path + '/' + ID[0] \n        if not os.path.isdir(dst_path):\n            os.mkdir(dst_path)\n        copyfile(src_path, dst_path + '/' + name)\n\n#-----------------------------------------\n#multi-query\nquery_path = download_path + '/gt_bbox'\n# for dukemtmc-reid, we do not need multi-query\nif os.path.isdir(query_path):\n    query_save_path = download_path + '/pytorch/multi-query'\n    if not os.path.isdir(query_save_path):\n        os.mkdir(query_save_path)\n\n    for root, dirs, files in os.walk(query_path, topdown=True):\n        for name in files:\n            if not name[-3:]=='jpg':\n                continue\n            ID  = name.split('_')\n            src_path = query_path + '/' + name\n            dst_path = query_save_path + '/' + ID[0]\n            if not os.path.isdir(dst_path):\n                os.mkdir(dst_path)\n            copyfile(src_path, dst_path + '/' + name)\n\n#-----------------------------------------\n#gallery\ngallery_path = download_path + '/bounding_box_test'\ngallery_save_path = download_path + '/pytorch/gallery'\nif not os.path.isdir(gallery_save_path):\n    os.mkdir(gallery_save_path)\n\nfor root, dirs, files in os.walk(gallery_path, topdown=True):\n    for name in files:\n        if not name[-3:]=='jpg':\n            continue\n        ID  = name.split('_')\n        src_path = gallery_path + '/' + name\n        dst_path = gallery_save_path + '/' + ID[0]\n        if not os.path.isdir(dst_path):\n            os.mkdir(dst_path)\n        copyfile(src_path, dst_path + '/' + name)\n\n#---------------------------------------\n#train_all\ntrain_path = download_path + '/bounding_box_train'\ntrain_save_path = download_path + '/pytorch/train_all'\nif not os.path.isdir(train_save_path):\n    os.mkdir(train_save_path)\n\nfor root, dirs, files in os.walk(train_path, topdown=True):\n    for name in files:\n        if not name[-3:]=='jpg':\n            continue\n        ID  = name.split('_')\n        src_path = train_path + '/' + name\n        dst_path = train_save_path + '/' + ID[0]\n        if not os.path.isdir(dst_path):\n            os.mkdir(dst_path)\n        copyfile(src_path, dst_path + '/' + name)\n\n\n#---------------------------------------\n#train_val\ntrain_path = download_path + '/bounding_box_train'\ntrain_save_path = download_path + '/pytorch/train'\nval_save_path = download_path + '/pytorch/val'\nif not os.path.isdir(train_save_path):\n    os.mkdir(train_save_path)\n    os.mkdir(val_save_path)\n\nfor root, dirs, files in os.walk(train_path, topdown=True):\n    for name in files:\n        if not name[-3:]=='jpg':\n            continue\n        ID  = name.split('_')\n        src_path = train_path + '/' + name\n        dst_path = train_save_path + '/' + ID[0]\n        if not os.path.isdir(dst_path):\n            os.mkdir(dst_path)\n            dst_path = val_save_path + '/' + ID[0]  #first image is used as val image\n            os.mkdir(dst_path)\n        copyfile(src_path, dst_path + '/' + name)\n```\n**代码比较冗长，我总结一下。**\n这个脚本的作用是将原始数据集重新按图片ID分类。主要操作是通过调用系统函数加之必要的循环判断来实现。可不必细究。运行之前先将第五行`download_path = 'C:/Users/葛宇/学习/ReId/数据集/Market-1501-v15.09.15'`改为你自己的地址。\n按照原作者的使用教程，第一步要做的就是运行prepare.py文件。\n运行之后会发现在原先的Market1501数据集中（详见之前的博客）多出了一个文件夹“pytorch”,打开看看：\n\n![](https://s1.ax1x.com/2022/09/05/vT2hNV.png)\n\n里面是6个文件夹：\n1. gallery中包含752个文件夹项目，均按ID排序：![](https://s1.ax1x.com/2022/09/05/vT24hT.png)\n2. multi中是1051个文件夹项目，从0001到1501\n3. query中包含750个文件项目，不含0000和-1\n4. train中包含751个文件项目，不含0000和-1\n5. train all中包含751个文件项目，不含0000和-1\n6. val中包含751个文件项目，不含0000和-1\n\n具体情况可以自己尝试打开观察。","slug":"行人重识别代码实战（一）","published":1,"updated":"2022-09-05T05:57:12.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jba0a00757svwtjet92x9","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"代码描述\"><a href=\"#代码描述\" class=\"headerlink\" title=\"代码描述\"></a><strong>代码描述</strong></h1><p><strong>代码来源：</strong> <a href=\"https://github.com/layumi/Person_reID_baseline_pytorch\">https://github.com/layumi/Person_reID_baseline_pytorch</a></p>\n<p><code>详细信息可见README.md</code></p>\n<h1 id=\"prepare-py-文件简单讲解\"><a href=\"#prepare-py-文件简单讲解\" class=\"headerlink\" title=\"prepare.py 文件简单讲解\"></a>prepare.py 文件简单讲解</h1><p><strong>文件代码：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> shutil <span class=\"keyword\">import</span> copyfile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># You only need to change this line to your dataset download path</span></span><br><span class=\"line\">download_path = <span class=\"string\">'C:/Users/葛宇/学习/ReId/数据集/Market-1501-v15.09.15'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(download_path):</span><br><span class=\"line\">    print(<span class=\"string\">'please change the download_path'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">save_path = download_path + <span class=\"string\">'/pytorch'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(save_path):</span><br><span class=\"line\">    os.mkdir(save_path)</span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#query</span></span><br><span class=\"line\">query_path = download_path + <span class=\"string\">'/query'</span></span><br><span class=\"line\">query_save_path = download_path + <span class=\"string\">'/pytorch/query'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(query_save_path):</span><br><span class=\"line\">    os.mkdir(query_save_path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(query_path, topdown=<span class=\"literal\">True</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name[<span class=\"number\">-3</span>:]==<span class=\"string\">'jpg'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        ID  = name.split(<span class=\"string\">'_'</span>)</span><br><span class=\"line\">        src_path = query_path + <span class=\"string\">'/'</span> + name</span><br><span class=\"line\">        dst_path = query_save_path + <span class=\"string\">'/'</span> + ID[<span class=\"number\">0</span>] </span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(dst_path):</span><br><span class=\"line\">            os.mkdir(dst_path)</span><br><span class=\"line\">        copyfile(src_path, dst_path + <span class=\"string\">'/'</span> + name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#multi-query</span></span><br><span class=\"line\">query_path = download_path + <span class=\"string\">'/gt_bbox'</span></span><br><span class=\"line\"><span class=\"comment\"># for dukemtmc-reid, we do not need multi-query</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> os.path.isdir(query_path):</span><br><span class=\"line\">    query_save_path = download_path + <span class=\"string\">'/pytorch/multi-query'</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(query_save_path):</span><br><span class=\"line\">        os.mkdir(query_save_path)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(query_path, topdown=<span class=\"literal\">True</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name[<span class=\"number\">-3</span>:]==<span class=\"string\">'jpg'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            ID  = name.split(<span class=\"string\">'_'</span>)</span><br><span class=\"line\">            src_path = query_path + <span class=\"string\">'/'</span> + name</span><br><span class=\"line\">            dst_path = query_save_path + <span class=\"string\">'/'</span> + ID[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(dst_path):</span><br><span class=\"line\">                os.mkdir(dst_path)</span><br><span class=\"line\">            copyfile(src_path, dst_path + <span class=\"string\">'/'</span> + name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#gallery</span></span><br><span class=\"line\">gallery_path = download_path + <span class=\"string\">'/bounding_box_test'</span></span><br><span class=\"line\">gallery_save_path = download_path + <span class=\"string\">'/pytorch/gallery'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(gallery_save_path):</span><br><span class=\"line\">    os.mkdir(gallery_save_path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(gallery_path, topdown=<span class=\"literal\">True</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name[<span class=\"number\">-3</span>:]==<span class=\"string\">'jpg'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        ID  = name.split(<span class=\"string\">'_'</span>)</span><br><span class=\"line\">        src_path = gallery_path + <span class=\"string\">'/'</span> + name</span><br><span class=\"line\">        dst_path = gallery_save_path + <span class=\"string\">'/'</span> + ID[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(dst_path):</span><br><span class=\"line\">            os.mkdir(dst_path)</span><br><span class=\"line\">        copyfile(src_path, dst_path + <span class=\"string\">'/'</span> + name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#train_all</span></span><br><span class=\"line\">train_path = download_path + <span class=\"string\">'/bounding_box_train'</span></span><br><span class=\"line\">train_save_path = download_path + <span class=\"string\">'/pytorch/train_all'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(train_save_path):</span><br><span class=\"line\">    os.mkdir(train_save_path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(train_path, topdown=<span class=\"literal\">True</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name[<span class=\"number\">-3</span>:]==<span class=\"string\">'jpg'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        ID  = name.split(<span class=\"string\">'_'</span>)</span><br><span class=\"line\">        src_path = train_path + <span class=\"string\">'/'</span> + name</span><br><span class=\"line\">        dst_path = train_save_path + <span class=\"string\">'/'</span> + ID[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(dst_path):</span><br><span class=\"line\">            os.mkdir(dst_path)</span><br><span class=\"line\">        copyfile(src_path, dst_path + <span class=\"string\">'/'</span> + name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#train_val</span></span><br><span class=\"line\">train_path = download_path + <span class=\"string\">'/bounding_box_train'</span></span><br><span class=\"line\">train_save_path = download_path + <span class=\"string\">'/pytorch/train'</span></span><br><span class=\"line\">val_save_path = download_path + <span class=\"string\">'/pytorch/val'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(train_save_path):</span><br><span class=\"line\">    os.mkdir(train_save_path)</span><br><span class=\"line\">    os.mkdir(val_save_path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(train_path, topdown=<span class=\"literal\">True</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name[<span class=\"number\">-3</span>:]==<span class=\"string\">'jpg'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        ID  = name.split(<span class=\"string\">'_'</span>)</span><br><span class=\"line\">        src_path = train_path + <span class=\"string\">'/'</span> + name</span><br><span class=\"line\">        dst_path = train_save_path + <span class=\"string\">'/'</span> + ID[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(dst_path):</span><br><span class=\"line\">            os.mkdir(dst_path)</span><br><span class=\"line\">            dst_path = val_save_path + <span class=\"string\">'/'</span> + ID[<span class=\"number\">0</span>]  <span class=\"comment\">#first image is used as val image</span></span><br><span class=\"line\">            os.mkdir(dst_path)</span><br><span class=\"line\">        copyfile(src_path, dst_path + <span class=\"string\">'/'</span> + name)</span><br></pre></td></tr></table></figure>\n\n<p><strong>代码比较冗长，我总结一下。</strong><br>这个脚本的作用是将原始数据集重新按图片ID分类。主要操作是通过调用系统函数加之必要的循环判断来实现。可不必细究。运行之前先将第五行<code>download_path = &#39;C:/Users/葛宇/学习/ReId/数据集/Market-1501-v15.09.15&#39;</code>改为你自己的地址。<br>按照原作者的使用教程，第一步要做的就是运行prepare.py文件。<br>运行之后会发现在原先的Market1501数据集中（详见之前的博客）多出了一个文件夹“pytorch”,打开看看：</p>\n<p><img src=\"https://s1.ax1x.com/2022/09/05/vT2hNV.png\" alt></p>\n<p>里面是6个文件夹：</p>\n<ol>\n<li>gallery中包含752个文件夹项目，均按ID排序：<img src=\"https://s1.ax1x.com/2022/09/05/vT24hT.png\" alt></li>\n<li>multi中是1051个文件夹项目，从0001到1501</li>\n<li>query中包含750个文件项目，不含0000和-1</li>\n<li>train中包含751个文件项目，不含0000和-1</li>\n<li>train all中包含751个文件项目，不含0000和-1</li>\n<li>val中包含751个文件项目，不含0000和-1</li>\n</ol>\n<p>具体情况可以自己尝试打开观察。</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"代码描述\"><a href=\"#代码描述\" class=\"headerlink\" title=\"代码描述\"></a><strong>代码描述</strong></h1><p><strong>代码来源：</strong> <a href=\"https://github.com/layumi/Person_reID_baseline_pytorch\">https://github.com/layumi/Person_reID_baseline_pytorch</a></p>\n<p><code>详细信息可见README.md</code></p>\n<h1 id=\"prepare-py-文件简单讲解\"><a href=\"#prepare-py-文件简单讲解\" class=\"headerlink\" title=\"prepare.py 文件简单讲解\"></a>prepare.py 文件简单讲解</h1><p><strong>文件代码：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> shutil <span class=\"keyword\">import</span> copyfile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># You only need to change this line to your dataset download path</span></span><br><span class=\"line\">download_path = <span class=\"string\">'C:/Users/葛宇/学习/ReId/数据集/Market-1501-v15.09.15'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(download_path):</span><br><span class=\"line\">    print(<span class=\"string\">'please change the download_path'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">save_path = download_path + <span class=\"string\">'/pytorch'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(save_path):</span><br><span class=\"line\">    os.mkdir(save_path)</span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#query</span></span><br><span class=\"line\">query_path = download_path + <span class=\"string\">'/query'</span></span><br><span class=\"line\">query_save_path = download_path + <span class=\"string\">'/pytorch/query'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(query_save_path):</span><br><span class=\"line\">    os.mkdir(query_save_path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(query_path, topdown=<span class=\"literal\">True</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name[<span class=\"number\">-3</span>:]==<span class=\"string\">'jpg'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        ID  = name.split(<span class=\"string\">'_'</span>)</span><br><span class=\"line\">        src_path = query_path + <span class=\"string\">'/'</span> + name</span><br><span class=\"line\">        dst_path = query_save_path + <span class=\"string\">'/'</span> + ID[<span class=\"number\">0</span>] </span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(dst_path):</span><br><span class=\"line\">            os.mkdir(dst_path)</span><br><span class=\"line\">        copyfile(src_path, dst_path + <span class=\"string\">'/'</span> + name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#multi-query</span></span><br><span class=\"line\">query_path = download_path + <span class=\"string\">'/gt_bbox'</span></span><br><span class=\"line\"><span class=\"comment\"># for dukemtmc-reid, we do not need multi-query</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> os.path.isdir(query_path):</span><br><span class=\"line\">    query_save_path = download_path + <span class=\"string\">'/pytorch/multi-query'</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(query_save_path):</span><br><span class=\"line\">        os.mkdir(query_save_path)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(query_path, topdown=<span class=\"literal\">True</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name[<span class=\"number\">-3</span>:]==<span class=\"string\">'jpg'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            ID  = name.split(<span class=\"string\">'_'</span>)</span><br><span class=\"line\">            src_path = query_path + <span class=\"string\">'/'</span> + name</span><br><span class=\"line\">            dst_path = query_save_path + <span class=\"string\">'/'</span> + ID[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(dst_path):</span><br><span class=\"line\">                os.mkdir(dst_path)</span><br><span class=\"line\">            copyfile(src_path, dst_path + <span class=\"string\">'/'</span> + name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#gallery</span></span><br><span class=\"line\">gallery_path = download_path + <span class=\"string\">'/bounding_box_test'</span></span><br><span class=\"line\">gallery_save_path = download_path + <span class=\"string\">'/pytorch/gallery'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(gallery_save_path):</span><br><span class=\"line\">    os.mkdir(gallery_save_path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(gallery_path, topdown=<span class=\"literal\">True</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name[<span class=\"number\">-3</span>:]==<span class=\"string\">'jpg'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        ID  = name.split(<span class=\"string\">'_'</span>)</span><br><span class=\"line\">        src_path = gallery_path + <span class=\"string\">'/'</span> + name</span><br><span class=\"line\">        dst_path = gallery_save_path + <span class=\"string\">'/'</span> + ID[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(dst_path):</span><br><span class=\"line\">            os.mkdir(dst_path)</span><br><span class=\"line\">        copyfile(src_path, dst_path + <span class=\"string\">'/'</span> + name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#train_all</span></span><br><span class=\"line\">train_path = download_path + <span class=\"string\">'/bounding_box_train'</span></span><br><span class=\"line\">train_save_path = download_path + <span class=\"string\">'/pytorch/train_all'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(train_save_path):</span><br><span class=\"line\">    os.mkdir(train_save_path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(train_path, topdown=<span class=\"literal\">True</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name[<span class=\"number\">-3</span>:]==<span class=\"string\">'jpg'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        ID  = name.split(<span class=\"string\">'_'</span>)</span><br><span class=\"line\">        src_path = train_path + <span class=\"string\">'/'</span> + name</span><br><span class=\"line\">        dst_path = train_save_path + <span class=\"string\">'/'</span> + ID[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(dst_path):</span><br><span class=\"line\">            os.mkdir(dst_path)</span><br><span class=\"line\">        copyfile(src_path, dst_path + <span class=\"string\">'/'</span> + name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#train_val</span></span><br><span class=\"line\">train_path = download_path + <span class=\"string\">'/bounding_box_train'</span></span><br><span class=\"line\">train_save_path = download_path + <span class=\"string\">'/pytorch/train'</span></span><br><span class=\"line\">val_save_path = download_path + <span class=\"string\">'/pytorch/val'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(train_save_path):</span><br><span class=\"line\">    os.mkdir(train_save_path)</span><br><span class=\"line\">    os.mkdir(val_save_path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(train_path, topdown=<span class=\"literal\">True</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name[<span class=\"number\">-3</span>:]==<span class=\"string\">'jpg'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        ID  = name.split(<span class=\"string\">'_'</span>)</span><br><span class=\"line\">        src_path = train_path + <span class=\"string\">'/'</span> + name</span><br><span class=\"line\">        dst_path = train_save_path + <span class=\"string\">'/'</span> + ID[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(dst_path):</span><br><span class=\"line\">            os.mkdir(dst_path)</span><br><span class=\"line\">            dst_path = val_save_path + <span class=\"string\">'/'</span> + ID[<span class=\"number\">0</span>]  <span class=\"comment\">#first image is used as val image</span></span><br><span class=\"line\">            os.mkdir(dst_path)</span><br><span class=\"line\">        copyfile(src_path, dst_path + <span class=\"string\">'/'</span> + name)</span><br></pre></td></tr></table></figure>\n\n<p><strong>代码比较冗长，我总结一下。</strong><br>这个脚本的作用是将原始数据集重新按图片ID分类。主要操作是通过调用系统函数加之必要的循环判断来实现。可不必细究。运行之前先将第五行<code>download_path = &#39;C:/Users/葛宇/学习/ReId/数据集/Market-1501-v15.09.15&#39;</code>改为你自己的地址。<br>按照原作者的使用教程，第一步要做的就是运行prepare.py文件。<br>运行之后会发现在原先的Market1501数据集中（详见之前的博客）多出了一个文件夹“pytorch”,打开看看：</p>\n<p><img src=\"https://s1.ax1x.com/2022/09/05/vT2hNV.png\" alt></p>\n<p>里面是6个文件夹：</p>\n<ol>\n<li>gallery中包含752个文件夹项目，均按ID排序：<img src=\"https://s1.ax1x.com/2022/09/05/vT24hT.png\" alt></li>\n<li>multi中是1051个文件夹项目，从0001到1501</li>\n<li>query中包含750个文件项目，不含0000和-1</li>\n<li>train中包含751个文件项目，不含0000和-1</li>\n<li>train all中包含751个文件项目，不含0000和-1</li>\n<li>val中包含751个文件项目，不含0000和-1</li>\n</ol>\n<p>具体情况可以自己尝试打开观察。</p>\n"},{"title":"行人重识别代码实战（三）","date":"2019-08-23T16:00:00.000Z","_content":"\n# **代码描述**\n\n**代码来源：** <https://github.com/layumi/Person_reID_baseline_pytorch>\n\n`详细信息可见README.md`\n\n准备好了训练数据和网络结构，下面就可以训练了：\n```cmd\npython train.py --gpu_ids 0 --name ft_ResNet50 --train_all --batchsize 32  --data_dir your_data_path\n--gpu_ids which gpu to run.\n--name the name of the model.\n--data_dir the path of the training data.\n--train_all using all images to train.\n--batchsize batch size.\n--erasing_p random erasing probability.\n```\n这里探究一下`train.py`中都做了些什么。\n首先是读取数据和label。这里使用了`torch.utils.data.DataLoader`, 可以获得两个迭代器`dataloaders['train']` and `dataloaders['val']` 来读数据：\n```python\nimage_datasets = {}\nimage_datasets['train'] = datasets.ImageFolder(os.path.join(data_dir, 'train'),\n                                         data_transforms['train'])\nimage_datasets['val'] = datasets.ImageFolder(os.path.join(data_dir, 'val'),\n                                         data_transforms['val'])\n\ndataloaders = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=opt.batchsize,\n                                            shuffle=True, num_workers=8) # 8 workers may work faster\n             for x in ['train', 'val']}\ndataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}\n```\n以下则是主要的代码来训练模型，一共只有20行：\n```python\n# Iterate over data.\n           for data in dataloaders[phase]:\n               # get a batch of inputs\n               inputs, labels = data\n               now_batch_size,c,h,w = inputs.shape\n               if now_batch_size<opt.batchsize: # skip the last batch\n                   continue\n               # print(inputs.shape)\n               # wrap them in Variable, if gpu is used, we transform the data to cuda.\n               if use_gpu:\n                   inputs = Variable(inputs.cuda())\n                   labels = Variable(labels.cuda())\n               else:\n                   inputs, labels = Variable(inputs), Variable(labels)\n\n               # zero the parameter gradients\n               optimizer.zero_grad()\n\n               #-------- forward --------\n               outputs = model(inputs)\n               _, preds = torch.max(outputs.data, 1)\n               loss = criterion(outputs, labels)\n\n               #-------- backward + optimize --------\n               # only if in training phase\n               if phase == 'train':\n                   loss.backward()\n                   optimizer.step()\n```\n每十轮，都会保存网络和更新loss曲线：\n```python\nif epoch%10 == 9:\n    save_network(model, epoch)\n    draw_curve(epoch)\n```\n更多细节见train.py\n","source":"_posts/行人重识别代码实战（三）.md","raw":"---\ntitle:  行人重识别代码实战（三）\ntags: [行人重识别,深度学习,图像处理]\ncategories: [深度学习]\ndate: 2019-8-24\n\n---\n\n# **代码描述**\n\n**代码来源：** <https://github.com/layumi/Person_reID_baseline_pytorch>\n\n`详细信息可见README.md`\n\n准备好了训练数据和网络结构，下面就可以训练了：\n```cmd\npython train.py --gpu_ids 0 --name ft_ResNet50 --train_all --batchsize 32  --data_dir your_data_path\n--gpu_ids which gpu to run.\n--name the name of the model.\n--data_dir the path of the training data.\n--train_all using all images to train.\n--batchsize batch size.\n--erasing_p random erasing probability.\n```\n这里探究一下`train.py`中都做了些什么。\n首先是读取数据和label。这里使用了`torch.utils.data.DataLoader`, 可以获得两个迭代器`dataloaders['train']` and `dataloaders['val']` 来读数据：\n```python\nimage_datasets = {}\nimage_datasets['train'] = datasets.ImageFolder(os.path.join(data_dir, 'train'),\n                                         data_transforms['train'])\nimage_datasets['val'] = datasets.ImageFolder(os.path.join(data_dir, 'val'),\n                                         data_transforms['val'])\n\ndataloaders = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=opt.batchsize,\n                                            shuffle=True, num_workers=8) # 8 workers may work faster\n             for x in ['train', 'val']}\ndataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}\n```\n以下则是主要的代码来训练模型，一共只有20行：\n```python\n# Iterate over data.\n           for data in dataloaders[phase]:\n               # get a batch of inputs\n               inputs, labels = data\n               now_batch_size,c,h,w = inputs.shape\n               if now_batch_size<opt.batchsize: # skip the last batch\n                   continue\n               # print(inputs.shape)\n               # wrap them in Variable, if gpu is used, we transform the data to cuda.\n               if use_gpu:\n                   inputs = Variable(inputs.cuda())\n                   labels = Variable(labels.cuda())\n               else:\n                   inputs, labels = Variable(inputs), Variable(labels)\n\n               # zero the parameter gradients\n               optimizer.zero_grad()\n\n               #-------- forward --------\n               outputs = model(inputs)\n               _, preds = torch.max(outputs.data, 1)\n               loss = criterion(outputs, labels)\n\n               #-------- backward + optimize --------\n               # only if in training phase\n               if phase == 'train':\n                   loss.backward()\n                   optimizer.step()\n```\n每十轮，都会保存网络和更新loss曲线：\n```python\nif epoch%10 == 9:\n    save_network(model, epoch)\n    draw_curve(epoch)\n```\n更多细节见train.py\n","slug":"行人重识别代码实战（三）","published":1,"updated":"2022-09-05T05:54:42.418Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jba0c00787svwgv35pzxx","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"代码描述\"><a href=\"#代码描述\" class=\"headerlink\" title=\"代码描述\"></a><strong>代码描述</strong></h1><p><strong>代码来源：</strong> <a href=\"https://github.com/layumi/Person_reID_baseline_pytorch\">https://github.com/layumi/Person_reID_baseline_pytorch</a></p>\n<p><code>详细信息可见README.md</code></p>\n<p>准备好了训练数据和网络结构，下面就可以训练了：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python train.py --gpu_ids <span class=\"number\">0</span> --name ft_ResNet50 --train_all --batchsize <span class=\"number\">32</span>  --data_dir your_data_path</span><br><span class=\"line\">--gpu_ids which gpu to run.</span><br><span class=\"line\">--name the name of the model.</span><br><span class=\"line\">--data_dir the <span class=\"built_in\">path</span> of the training data.</span><br><span class=\"line\">--train_all using all images to train.</span><br><span class=\"line\">--batchsize batch size.</span><br><span class=\"line\">--erasing_p random erasing probability.</span><br></pre></td></tr></table></figure>\n\n<p>这里探究一下<code>train.py</code>中都做了些什么。<br>首先是读取数据和label。这里使用了<code>torch.utils.data.DataLoader</code>, 可以获得两个迭代器<code>dataloaders[&#39;train&#39;]</code> and <code>dataloaders[&#39;val&#39;]</code> 来读数据：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">image_datasets = &#123;&#125;</span><br><span class=\"line\">image_datasets[<span class=\"string\">'train'</span>] = datasets.ImageFolder(os.path.join(data_dir, <span class=\"string\">'train'</span>),</span><br><span class=\"line\">                                         data_transforms[<span class=\"string\">'train'</span>])</span><br><span class=\"line\">image_datasets[<span class=\"string\">'val'</span>] = datasets.ImageFolder(os.path.join(data_dir, <span class=\"string\">'val'</span>),</span><br><span class=\"line\">                                         data_transforms[<span class=\"string\">'val'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">dataloaders = &#123;x: torch.utils.data.DataLoader(image_datasets[x], batch_size=opt.batchsize,</span><br><span class=\"line\">                                            shuffle=<span class=\"literal\">True</span>, num_workers=<span class=\"number\">8</span>) <span class=\"comment\"># 8 workers may work faster</span></span><br><span class=\"line\">             <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> [<span class=\"string\">'train'</span>, <span class=\"string\">'val'</span>]&#125;</span><br><span class=\"line\">dataset_sizes = &#123;x: len(image_datasets[x]) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> [<span class=\"string\">'train'</span>, <span class=\"string\">'val'</span>]&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以下则是主要的代码来训练模型，一共只有20行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Iterate over data.</span></span><br><span class=\"line\">           <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> dataloaders[phase]:</span><br><span class=\"line\">               <span class=\"comment\"># get a batch of inputs</span></span><br><span class=\"line\">               inputs, labels = data</span><br><span class=\"line\">               now_batch_size,c,h,w = inputs.shape</span><br><span class=\"line\">               <span class=\"keyword\">if</span> now_batch_size&lt;opt.batchsize: <span class=\"comment\"># skip the last batch</span></span><br><span class=\"line\">                   <span class=\"keyword\">continue</span></span><br><span class=\"line\">               <span class=\"comment\"># print(inputs.shape)</span></span><br><span class=\"line\">               <span class=\"comment\"># wrap them in Variable, if gpu is used, we transform the data to cuda.</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> use_gpu:</span><br><span class=\"line\">                   inputs = Variable(inputs.cuda())</span><br><span class=\"line\">                   labels = Variable(labels.cuda())</span><br><span class=\"line\">               <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                   inputs, labels = Variable(inputs), Variable(labels)</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"comment\"># zero the parameter gradients</span></span><br><span class=\"line\">               optimizer.zero_grad()</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"comment\">#-------- forward --------</span></span><br><span class=\"line\">               outputs = model(inputs)</span><br><span class=\"line\">               _, preds = torch.max(outputs.data, <span class=\"number\">1</span>)</span><br><span class=\"line\">               loss = criterion(outputs, labels)</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"comment\">#-------- backward + optimize --------</span></span><br><span class=\"line\">               <span class=\"comment\"># only if in training phase</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> phase == <span class=\"string\">'train'</span>:</span><br><span class=\"line\">                   loss.backward()</span><br><span class=\"line\">                   optimizer.step()</span><br></pre></td></tr></table></figure>\n\n<p>每十轮，都会保存网络和更新loss曲线：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> epoch%<span class=\"number\">10</span> == <span class=\"number\">9</span>:</span><br><span class=\"line\">    save_network(model, epoch)</span><br><span class=\"line\">    draw_curve(epoch)</span><br></pre></td></tr></table></figure>\n\n<p>更多细节见train.py</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"代码描述\"><a href=\"#代码描述\" class=\"headerlink\" title=\"代码描述\"></a><strong>代码描述</strong></h1><p><strong>代码来源：</strong> <a href=\"https://github.com/layumi/Person_reID_baseline_pytorch\">https://github.com/layumi/Person_reID_baseline_pytorch</a></p>\n<p><code>详细信息可见README.md</code></p>\n<p>准备好了训练数据和网络结构，下面就可以训练了：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python train.py --gpu_ids <span class=\"number\">0</span> --name ft_ResNet50 --train_all --batchsize <span class=\"number\">32</span>  --data_dir your_data_path</span><br><span class=\"line\">--gpu_ids which gpu to run.</span><br><span class=\"line\">--name the name of the model.</span><br><span class=\"line\">--data_dir the <span class=\"built_in\">path</span> of the training data.</span><br><span class=\"line\">--train_all using all images to train.</span><br><span class=\"line\">--batchsize batch size.</span><br><span class=\"line\">--erasing_p random erasing probability.</span><br></pre></td></tr></table></figure>\n\n<p>这里探究一下<code>train.py</code>中都做了些什么。<br>首先是读取数据和label。这里使用了<code>torch.utils.data.DataLoader</code>, 可以获得两个迭代器<code>dataloaders[&#39;train&#39;]</code> and <code>dataloaders[&#39;val&#39;]</code> 来读数据：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">image_datasets = &#123;&#125;</span><br><span class=\"line\">image_datasets[<span class=\"string\">'train'</span>] = datasets.ImageFolder(os.path.join(data_dir, <span class=\"string\">'train'</span>),</span><br><span class=\"line\">                                         data_transforms[<span class=\"string\">'train'</span>])</span><br><span class=\"line\">image_datasets[<span class=\"string\">'val'</span>] = datasets.ImageFolder(os.path.join(data_dir, <span class=\"string\">'val'</span>),</span><br><span class=\"line\">                                         data_transforms[<span class=\"string\">'val'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">dataloaders = &#123;x: torch.utils.data.DataLoader(image_datasets[x], batch_size=opt.batchsize,</span><br><span class=\"line\">                                            shuffle=<span class=\"literal\">True</span>, num_workers=<span class=\"number\">8</span>) <span class=\"comment\"># 8 workers may work faster</span></span><br><span class=\"line\">             <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> [<span class=\"string\">'train'</span>, <span class=\"string\">'val'</span>]&#125;</span><br><span class=\"line\">dataset_sizes = &#123;x: len(image_datasets[x]) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> [<span class=\"string\">'train'</span>, <span class=\"string\">'val'</span>]&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以下则是主要的代码来训练模型，一共只有20行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Iterate over data.</span></span><br><span class=\"line\">           <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> dataloaders[phase]:</span><br><span class=\"line\">               <span class=\"comment\"># get a batch of inputs</span></span><br><span class=\"line\">               inputs, labels = data</span><br><span class=\"line\">               now_batch_size,c,h,w = inputs.shape</span><br><span class=\"line\">               <span class=\"keyword\">if</span> now_batch_size&lt;opt.batchsize: <span class=\"comment\"># skip the last batch</span></span><br><span class=\"line\">                   <span class=\"keyword\">continue</span></span><br><span class=\"line\">               <span class=\"comment\"># print(inputs.shape)</span></span><br><span class=\"line\">               <span class=\"comment\"># wrap them in Variable, if gpu is used, we transform the data to cuda.</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> use_gpu:</span><br><span class=\"line\">                   inputs = Variable(inputs.cuda())</span><br><span class=\"line\">                   labels = Variable(labels.cuda())</span><br><span class=\"line\">               <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                   inputs, labels = Variable(inputs), Variable(labels)</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"comment\"># zero the parameter gradients</span></span><br><span class=\"line\">               optimizer.zero_grad()</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"comment\">#-------- forward --------</span></span><br><span class=\"line\">               outputs = model(inputs)</span><br><span class=\"line\">               _, preds = torch.max(outputs.data, <span class=\"number\">1</span>)</span><br><span class=\"line\">               loss = criterion(outputs, labels)</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"comment\">#-------- backward + optimize --------</span></span><br><span class=\"line\">               <span class=\"comment\"># only if in training phase</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> phase == <span class=\"string\">'train'</span>:</span><br><span class=\"line\">                   loss.backward()</span><br><span class=\"line\">                   optimizer.step()</span><br></pre></td></tr></table></figure>\n\n<p>每十轮，都会保存网络和更新loss曲线：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> epoch%<span class=\"number\">10</span> == <span class=\"number\">9</span>:</span><br><span class=\"line\">    save_network(model, epoch)</span><br><span class=\"line\">    draw_curve(epoch)</span><br></pre></td></tr></table></figure>\n\n<p>更多细节见train.py</p>\n"},{"title":"行人重识别代码实战（二）","date":"2019-08-23T16:00:00.000Z","_content":"\n# **代码描述**\n\n**代码来源：** <https://github.com/layumi/Person_reID_baseline_pytorch>\n\n`详细信息可见README.md`\n\n这次研究的是`model.py`原理是利用和修改预训练模型，代码原作者使用的是**ImageNet**预训练网络。\n\npytorch里引入方式如下：\n```python\nfrom torchvision import models\nmodel =models.resnet50(pretrained = True)\n```\n通过`print（model）`查看网络结构：\n![](https://s1.ax1x.com/2022/09/05/vT2fA0.png)\n\n实际使用时要做修改。考虑到Market1501训练集中有751个不同的人，所以要改变模型来训练Reid的分类器：\n```python\n# Define the ResNet50-based Model\nclass ft_net(nn.Module):\n\n    def __init__(self, class_num, droprate=0.5, stride=2):\n        super(ft_net, self).__init__()\n        model_ft = models.resnet50(pretrained=True)\n        # avg pooling to global pooling\n        if stride == 1:\n            model_ft.layer4[0].downsample[0].stride = (1,1)\n            model_ft.layer4[0].conv2.stride = (1,1)\n        model_ft.avgpool = nn.AdaptiveAvgPool2d((1,1))\n        self.model = model_ft\n        self.classifier = ClassBlock(2048, class_num, droprate)\n\n    def forward(self, x):\n        x = self.model.conv1(x)\n        x = self.model.bn1(x)\n        x = self.model.relu(x)\n        x = self.model.maxpool(x)\n        x = self.model.layer1(x)\n        x = self.model.layer2(x)\n        x = self.model.layer3(x)\n        x = self.model.layer4(x)\n        x = self.model.avgpool(x)\n        x = x.view(x.size(0), x.size(1))\n        x = self.classifier(x)\n        return x\n\n```\n更多细节在model.py中，里面还包含了其他的预训练模型以及对应的修改方法。","source":"_posts/行人重识别代码实战（二）.md","raw":"---\ntitle:  行人重识别代码实战（二）\ntags: [行人重识别,深度学习,图像处理]\ncategories: [深度学习]\ndate: 2019-8-24\n\n---\n\n# **代码描述**\n\n**代码来源：** <https://github.com/layumi/Person_reID_baseline_pytorch>\n\n`详细信息可见README.md`\n\n这次研究的是`model.py`原理是利用和修改预训练模型，代码原作者使用的是**ImageNet**预训练网络。\n\npytorch里引入方式如下：\n```python\nfrom torchvision import models\nmodel =models.resnet50(pretrained = True)\n```\n通过`print（model）`查看网络结构：\n![](https://s1.ax1x.com/2022/09/05/vT2fA0.png)\n\n实际使用时要做修改。考虑到Market1501训练集中有751个不同的人，所以要改变模型来训练Reid的分类器：\n```python\n# Define the ResNet50-based Model\nclass ft_net(nn.Module):\n\n    def __init__(self, class_num, droprate=0.5, stride=2):\n        super(ft_net, self).__init__()\n        model_ft = models.resnet50(pretrained=True)\n        # avg pooling to global pooling\n        if stride == 1:\n            model_ft.layer4[0].downsample[0].stride = (1,1)\n            model_ft.layer4[0].conv2.stride = (1,1)\n        model_ft.avgpool = nn.AdaptiveAvgPool2d((1,1))\n        self.model = model_ft\n        self.classifier = ClassBlock(2048, class_num, droprate)\n\n    def forward(self, x):\n        x = self.model.conv1(x)\n        x = self.model.bn1(x)\n        x = self.model.relu(x)\n        x = self.model.maxpool(x)\n        x = self.model.layer1(x)\n        x = self.model.layer2(x)\n        x = self.model.layer3(x)\n        x = self.model.layer4(x)\n        x = self.model.avgpool(x)\n        x = x.view(x.size(0), x.size(1))\n        x = self.classifier(x)\n        return x\n\n```\n更多细节在model.py中，里面还包含了其他的预训练模型以及对应的修改方法。","slug":"行人重识别代码实战（二）","published":1,"updated":"2022-09-05T05:55:51.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jba0j007a7svwml0j1w70","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"代码描述\"><a href=\"#代码描述\" class=\"headerlink\" title=\"代码描述\"></a><strong>代码描述</strong></h1><p><strong>代码来源：</strong> <a href=\"https://github.com/layumi/Person_reID_baseline_pytorch\">https://github.com/layumi/Person_reID_baseline_pytorch</a></p>\n<p><code>详细信息可见README.md</code></p>\n<p>这次研究的是<code>model.py</code>原理是利用和修改预训练模型，代码原作者使用的是<strong>ImageNet</strong>预训练网络。</p>\n<p>pytorch里引入方式如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torchvision <span class=\"keyword\">import</span> models</span><br><span class=\"line\">model =models.resnet50(pretrained = <span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>print（model）</code>查看网络结构：<br><img src=\"https://s1.ax1x.com/2022/09/05/vT2fA0.png\" alt></p>\n<p>实际使用时要做修改。考虑到Market1501训练集中有751个不同的人，所以要改变模型来训练Reid的分类器：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Define the ResNet50-based Model</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ft_net</span><span class=\"params\">(nn.Module)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, class_num, droprate=<span class=\"number\">0.5</span>, stride=<span class=\"number\">2</span>)</span>:</span></span><br><span class=\"line\">        super(ft_net, self).__init__()</span><br><span class=\"line\">        model_ft = models.resnet50(pretrained=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"comment\"># avg pooling to global pooling</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> stride == <span class=\"number\">1</span>:</span><br><span class=\"line\">            model_ft.layer4[<span class=\"number\">0</span>].downsample[<span class=\"number\">0</span>].stride = (<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">            model_ft.layer4[<span class=\"number\">0</span>].conv2.stride = (<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">        model_ft.avgpool = nn.AdaptiveAvgPool2d((<span class=\"number\">1</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\">        self.model = model_ft</span><br><span class=\"line\">        self.classifier = ClassBlock(<span class=\"number\">2048</span>, class_num, droprate)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        x = self.model.conv1(x)</span><br><span class=\"line\">        x = self.model.bn1(x)</span><br><span class=\"line\">        x = self.model.relu(x)</span><br><span class=\"line\">        x = self.model.maxpool(x)</span><br><span class=\"line\">        x = self.model.layer1(x)</span><br><span class=\"line\">        x = self.model.layer2(x)</span><br><span class=\"line\">        x = self.model.layer3(x)</span><br><span class=\"line\">        x = self.model.layer4(x)</span><br><span class=\"line\">        x = self.model.avgpool(x)</span><br><span class=\"line\">        x = x.view(x.size(<span class=\"number\">0</span>), x.size(<span class=\"number\">1</span>))</span><br><span class=\"line\">        x = self.classifier(x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br></pre></td></tr></table></figure>\n\n<p>更多细节在model.py中，里面还包含了其他的预训练模型以及对应的修改方法。</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"代码描述\"><a href=\"#代码描述\" class=\"headerlink\" title=\"代码描述\"></a><strong>代码描述</strong></h1><p><strong>代码来源：</strong> <a href=\"https://github.com/layumi/Person_reID_baseline_pytorch\">https://github.com/layumi/Person_reID_baseline_pytorch</a></p>\n<p><code>详细信息可见README.md</code></p>\n<p>这次研究的是<code>model.py</code>原理是利用和修改预训练模型，代码原作者使用的是<strong>ImageNet</strong>预训练网络。</p>\n<p>pytorch里引入方式如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torchvision <span class=\"keyword\">import</span> models</span><br><span class=\"line\">model =models.resnet50(pretrained = <span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>print（model）</code>查看网络结构：<br><img src=\"https://s1.ax1x.com/2022/09/05/vT2fA0.png\" alt></p>\n<p>实际使用时要做修改。考虑到Market1501训练集中有751个不同的人，所以要改变模型来训练Reid的分类器：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Define the ResNet50-based Model</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ft_net</span><span class=\"params\">(nn.Module)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, class_num, droprate=<span class=\"number\">0.5</span>, stride=<span class=\"number\">2</span>)</span>:</span></span><br><span class=\"line\">        super(ft_net, self).__init__()</span><br><span class=\"line\">        model_ft = models.resnet50(pretrained=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"comment\"># avg pooling to global pooling</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> stride == <span class=\"number\">1</span>:</span><br><span class=\"line\">            model_ft.layer4[<span class=\"number\">0</span>].downsample[<span class=\"number\">0</span>].stride = (<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">            model_ft.layer4[<span class=\"number\">0</span>].conv2.stride = (<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">        model_ft.avgpool = nn.AdaptiveAvgPool2d((<span class=\"number\">1</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\">        self.model = model_ft</span><br><span class=\"line\">        self.classifier = ClassBlock(<span class=\"number\">2048</span>, class_num, droprate)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        x = self.model.conv1(x)</span><br><span class=\"line\">        x = self.model.bn1(x)</span><br><span class=\"line\">        x = self.model.relu(x)</span><br><span class=\"line\">        x = self.model.maxpool(x)</span><br><span class=\"line\">        x = self.model.layer1(x)</span><br><span class=\"line\">        x = self.model.layer2(x)</span><br><span class=\"line\">        x = self.model.layer3(x)</span><br><span class=\"line\">        x = self.model.layer4(x)</span><br><span class=\"line\">        x = self.model.avgpool(x)</span><br><span class=\"line\">        x = x.view(x.size(<span class=\"number\">0</span>), x.size(<span class=\"number\">1</span>))</span><br><span class=\"line\">        x = self.classifier(x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br></pre></td></tr></table></figure>\n\n<p>更多细节在model.py中，里面还包含了其他的预训练模型以及对应的修改方法。</p>\n"},{"title":"行人重识别初识","date":"2019-07-30T16:00:00.000Z","_content":"\n![](https://s1.ax1x.com/2022/09/05/vTRHG8.png)\n# 行人重识别是什么？\n**行人重识别（Person re-identification）**也称行人再识别，是利用计算机视觉技术判断图像或者视频序列中是否存在特定行人的技术。广泛被认为是一个图像检索的子问题。给定一个监控行人图像，检索跨设备下的该行人图像。旨在弥补目前固定的摄像头的视觉局限，并可与行人检测/行人跟踪技术相结合，可广泛应用于智能视频监控、智能安保等领域。由于不同摄像设备之间的差异，同时行人兼具刚性和柔性的特性 ，外观易受穿着、尺度、遮挡、姿态和视角等影响，使得行人重识别成为计算机视觉领域中一个既具有研究价值同时又极具挑战性的热门课题。\n\n------------\n# 技术难点\n- **能不能用人脸识别做重识别？**\n理论上是可以的。但是有两个原因导致人脸识别较难应用：首先，广泛存在后脑勺和侧脸的情况，做正脸的人脸识别难。其次，摄像头拍摄的像素可能不高，尤其是远景摄像头里面人脸截出来很可能都没有32x32的像素。所以人脸识别在实际的重识别应用中很可能有限。\n- **有些人靠衣服的颜色就可以判断出来了，还需要行人重识别么？**\n衣服颜色确实是行人重识别做出判断一个重要因素，但光靠颜色是不足的。首先，摄像头之间是有色差，并且会有光照的影响。其次，有撞衫（颜色相似）的人怎么办，要找细节，但比如颜色直方图这种统计的特征就把细节给忽略了。在多个数据集上的测试表明，光用颜色特征是难以达到50%的top1正确率的。\n\n- **总结**：\n1. 不同下摄像头造成行人外观的巨大变化；\n2. 目标遮挡（Occlusion）导致部分特征丢失；\n3. 不同的 View，Illumination 导致同一目标的特征差异；\n4. 不同目标衣服颜色近似、特征近似导致区分度下降；\n\n------------\n\n\n# 基本方法\n## 基于部件匹配的方法\n** 基于人体在三维空间中的结构（结构信息），人体图像可以进行分割，按部件来执行匹配。**\n- 常见方案是水平切割，就是将图像切为几个水平的条。由于人体身材往往差不多，所以可以用简单的水平条来做一一比较。\n- 在领域中做匹配，采用的是一个正方形的邻域。\n- 另一个较新的方案是先在人体上检测部件（手，腿，躯干等等）再进行匹配，这样的话可以减少位置的误差，但可能引入检测部件的误差。\n- 类似LSTM的attention匹配，但必须pair输入，测试时间较长，不适合快速图像检索。\n- 如图，类似人脸对齐，使用STN 将行人整个图像先利用热度图对齐，再匹配。\n![](https://s1.ax1x.com/2022/09/05/vTR7Pf.png)\n## 基于损失函数的方法\n**基于高层语义信息，设置一些辅助任务，帮助模型学习到好的特征表达。**\n-  身份损失（Identification loss）直接拿身份label做多类分类。\n-  鉴定损失（Verification loss）比较两个输入图像是否为同一人。\n- 身份损失（Identification loss）+鉴定损失（Verification loss），将以上两种损失函数混合。\n- 三样本损失 （Triplet loss） 以3个样本为一组，同一人的图像特征距离应小于不同人。\n- 加入属性任务 （attribute）比如判断是否背包，是男生还是女生等等。人们遇见陌生人也是利用这些属性来描述。\n- 数据增强 混合多数据集训练 ，加入训练集上 生成对抗网络（GAN）生成的数据，如图：\n ![](https://s1.ax1x.com/2022/09/05/vTRfrd.png)\n\n# 识别机制\n**如图**\n ![](https://s1.ax1x.com/2022/09/05/vTR5VI.png)\n首先要做的是**Detection**，也就是检测出行人，其实这一步数据集已经帮我们做到了，下面介绍数据集的时候会讲到不同数据集采用的不同的目标检测方法以及ID的标注方式。剩下的部分，就是要去**训练一个特征提取网络**，根据特征所计算的度量距离得到损失值，我们选用一个优化器去迭代找到loss最小值，并不断更新网络的参数达到学习的效果。在测试的时候，我们用将要检索的图片（称为**query**或者**probe**），在**底库gallery**中，根据计算出的特征距离进行排序，选出最TOP的几张图片，来达到目标检索的目的。\n\n下面两张图分别是**训练阶段**和**测试阶段**的示意图：\n ![](https://s1.ax1x.com/2022/09/05/vTRrUx.png)\n** 训练阶段**\n  ![](https://s1.ax1x.com/2022/09/05/vTR6PK.png)\n\n------------\n\n# 评测指标\n## rank-k\n`算法返回的排序列表中，前k位为存在检索目标则称为rank-k命中`\n**举个例子:**\n假如在人脸识别中，底库中有100个人，现在来了1个待识别的人脸（假如label为m1），与底库中的人脸比对后将底库中的人脸按照得分从高到低进行排序，我们发现：\n如果识别结果是m1、m2、m3、m4、m5……，则此时rank-1的正确率为100%；rank-2的正确率也为100%；rank-5的正确率也为100%；\n如果识别结果是m2、m1、m3、m4、m5……，则此时rank-1的正确率为0%；rank-2的正确率为100%；rank-5的正确率也为100%；\n如果识别结果是m2、m3、m4、m5、m1……，则此时rank-1的正确率为0%；rank-2的正确率为0%；rank-5的正确率为100%；\n同理，当待识别的人脸集合有很多时，则采取取平均值的做法。例如待识别人脸有3个（假如label为m1，m2，m3），同样对每一个人脸都有一个从高到低的得分，\n**比如：**\n人脸1结果为m1、m2、m3、m4、m5……，\n人脸2结果为m2、m1、m3、m4、m5……，\n人脸3结果m3、m1、m2、m4、m5……，\n则此时rank-1的正确率为（1+1+1）/3=100%；\nrank-2的正确率也为（1+1+1）/3=100%；\nrank-5的正确率也为（1+1+1）/3=100%；\n**比如：**\n人脸1结果为m4、m2、m3、m5、m6……，\n人脸2结果为m1、m2、m3、m4、m5……，\n人脸3结果m3、m1、m2、m4、m5……，\n则此时rank-1的正确率为（0+0+1）/3=33.33%；\nrank-2的正确率为（0+1+1）/3=66.66%；\nrank-5的正确率也为（0+1+1）/3=66.66%；\n\n## mAP(mean average precision)\n反应检索的人在数据库中所有正确的图片排在排序列表前面的程度，能更加全面的衡量ReID算法的性能。如下图，假设该检索行人在gallery中有10张图片，在检索的list中位置（rank）分别为1、2、3、4、5、6、7、8、9，则ap为(1/ 1 + 2 / 2 + 3 / 3 + 4 / 4 + 5 / 5 + 6 / 6 + 7 / 7 + 8 / 8 + 9 / 9) / 10 = 0.90；ap较大时，该行人的检索结果都相对靠前，对所有query的ap取平均值得到mAP\n ![](https://s1.ax1x.com/2022/09/05/vTRc8O.png)","source":"_posts/行人重识别初识.md","raw":"---\ntitle:  行人重识别初识\ntags: [行人重识别,深度学习,图像处理]\ncategories: [深度学习]\ndate: 2019-7-31\n\n---\n\n![](https://s1.ax1x.com/2022/09/05/vTRHG8.png)\n# 行人重识别是什么？\n**行人重识别（Person re-identification）**也称行人再识别，是利用计算机视觉技术判断图像或者视频序列中是否存在特定行人的技术。广泛被认为是一个图像检索的子问题。给定一个监控行人图像，检索跨设备下的该行人图像。旨在弥补目前固定的摄像头的视觉局限，并可与行人检测/行人跟踪技术相结合，可广泛应用于智能视频监控、智能安保等领域。由于不同摄像设备之间的差异，同时行人兼具刚性和柔性的特性 ，外观易受穿着、尺度、遮挡、姿态和视角等影响，使得行人重识别成为计算机视觉领域中一个既具有研究价值同时又极具挑战性的热门课题。\n\n------------\n# 技术难点\n- **能不能用人脸识别做重识别？**\n理论上是可以的。但是有两个原因导致人脸识别较难应用：首先，广泛存在后脑勺和侧脸的情况，做正脸的人脸识别难。其次，摄像头拍摄的像素可能不高，尤其是远景摄像头里面人脸截出来很可能都没有32x32的像素。所以人脸识别在实际的重识别应用中很可能有限。\n- **有些人靠衣服的颜色就可以判断出来了，还需要行人重识别么？**\n衣服颜色确实是行人重识别做出判断一个重要因素，但光靠颜色是不足的。首先，摄像头之间是有色差，并且会有光照的影响。其次，有撞衫（颜色相似）的人怎么办，要找细节，但比如颜色直方图这种统计的特征就把细节给忽略了。在多个数据集上的测试表明，光用颜色特征是难以达到50%的top1正确率的。\n\n- **总结**：\n1. 不同下摄像头造成行人外观的巨大变化；\n2. 目标遮挡（Occlusion）导致部分特征丢失；\n3. 不同的 View，Illumination 导致同一目标的特征差异；\n4. 不同目标衣服颜色近似、特征近似导致区分度下降；\n\n------------\n\n\n# 基本方法\n## 基于部件匹配的方法\n** 基于人体在三维空间中的结构（结构信息），人体图像可以进行分割，按部件来执行匹配。**\n- 常见方案是水平切割，就是将图像切为几个水平的条。由于人体身材往往差不多，所以可以用简单的水平条来做一一比较。\n- 在领域中做匹配，采用的是一个正方形的邻域。\n- 另一个较新的方案是先在人体上检测部件（手，腿，躯干等等）再进行匹配，这样的话可以减少位置的误差，但可能引入检测部件的误差。\n- 类似LSTM的attention匹配，但必须pair输入，测试时间较长，不适合快速图像检索。\n- 如图，类似人脸对齐，使用STN 将行人整个图像先利用热度图对齐，再匹配。\n![](https://s1.ax1x.com/2022/09/05/vTR7Pf.png)\n## 基于损失函数的方法\n**基于高层语义信息，设置一些辅助任务，帮助模型学习到好的特征表达。**\n-  身份损失（Identification loss）直接拿身份label做多类分类。\n-  鉴定损失（Verification loss）比较两个输入图像是否为同一人。\n- 身份损失（Identification loss）+鉴定损失（Verification loss），将以上两种损失函数混合。\n- 三样本损失 （Triplet loss） 以3个样本为一组，同一人的图像特征距离应小于不同人。\n- 加入属性任务 （attribute）比如判断是否背包，是男生还是女生等等。人们遇见陌生人也是利用这些属性来描述。\n- 数据增强 混合多数据集训练 ，加入训练集上 生成对抗网络（GAN）生成的数据，如图：\n ![](https://s1.ax1x.com/2022/09/05/vTRfrd.png)\n\n# 识别机制\n**如图**\n ![](https://s1.ax1x.com/2022/09/05/vTR5VI.png)\n首先要做的是**Detection**，也就是检测出行人，其实这一步数据集已经帮我们做到了，下面介绍数据集的时候会讲到不同数据集采用的不同的目标检测方法以及ID的标注方式。剩下的部分，就是要去**训练一个特征提取网络**，根据特征所计算的度量距离得到损失值，我们选用一个优化器去迭代找到loss最小值，并不断更新网络的参数达到学习的效果。在测试的时候，我们用将要检索的图片（称为**query**或者**probe**），在**底库gallery**中，根据计算出的特征距离进行排序，选出最TOP的几张图片，来达到目标检索的目的。\n\n下面两张图分别是**训练阶段**和**测试阶段**的示意图：\n ![](https://s1.ax1x.com/2022/09/05/vTRrUx.png)\n** 训练阶段**\n  ![](https://s1.ax1x.com/2022/09/05/vTR6PK.png)\n\n------------\n\n# 评测指标\n## rank-k\n`算法返回的排序列表中，前k位为存在检索目标则称为rank-k命中`\n**举个例子:**\n假如在人脸识别中，底库中有100个人，现在来了1个待识别的人脸（假如label为m1），与底库中的人脸比对后将底库中的人脸按照得分从高到低进行排序，我们发现：\n如果识别结果是m1、m2、m3、m4、m5……，则此时rank-1的正确率为100%；rank-2的正确率也为100%；rank-5的正确率也为100%；\n如果识别结果是m2、m1、m3、m4、m5……，则此时rank-1的正确率为0%；rank-2的正确率为100%；rank-5的正确率也为100%；\n如果识别结果是m2、m3、m4、m5、m1……，则此时rank-1的正确率为0%；rank-2的正确率为0%；rank-5的正确率为100%；\n同理，当待识别的人脸集合有很多时，则采取取平均值的做法。例如待识别人脸有3个（假如label为m1，m2，m3），同样对每一个人脸都有一个从高到低的得分，\n**比如：**\n人脸1结果为m1、m2、m3、m4、m5……，\n人脸2结果为m2、m1、m3、m4、m5……，\n人脸3结果m3、m1、m2、m4、m5……，\n则此时rank-1的正确率为（1+1+1）/3=100%；\nrank-2的正确率也为（1+1+1）/3=100%；\nrank-5的正确率也为（1+1+1）/3=100%；\n**比如：**\n人脸1结果为m4、m2、m3、m5、m6……，\n人脸2结果为m1、m2、m3、m4、m5……，\n人脸3结果m3、m1、m2、m4、m5……，\n则此时rank-1的正确率为（0+0+1）/3=33.33%；\nrank-2的正确率为（0+1+1）/3=66.66%；\nrank-5的正确率也为（0+1+1）/3=66.66%；\n\n## mAP(mean average precision)\n反应检索的人在数据库中所有正确的图片排在排序列表前面的程度，能更加全面的衡量ReID算法的性能。如下图，假设该检索行人在gallery中有10张图片，在检索的list中位置（rank）分别为1、2、3、4、5、6、7、8、9，则ap为(1/ 1 + 2 / 2 + 3 / 3 + 4 / 4 + 5 / 5 + 6 / 6 + 7 / 7 + 8 / 8 + 9 / 9) / 10 = 0.90；ap较大时，该行人的检索结果都相对靠前，对所有query的ap取平均值得到mAP\n ![](https://s1.ax1x.com/2022/09/05/vTRc8O.png)","slug":"行人重识别初识","published":1,"updated":"2022-09-05T06:07:37.485Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jba0k007d7svwl9qu8ver","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p><img src=\"https://s1.ax1x.com/2022/09/05/vTRHG8.png\" alt></p>\n<h1 id=\"行人重识别是什么？\"><a href=\"#行人重识别是什么？\" class=\"headerlink\" title=\"行人重识别是什么？\"></a>行人重识别是什么？</h1><p><strong>行人重识别（Person re-identification）</strong>也称行人再识别，是利用计算机视觉技术判断图像或者视频序列中是否存在特定行人的技术。广泛被认为是一个图像检索的子问题。给定一个监控行人图像，检索跨设备下的该行人图像。旨在弥补目前固定的摄像头的视觉局限，并可与行人检测/行人跟踪技术相结合，可广泛应用于智能视频监控、智能安保等领域。由于不同摄像设备之间的差异，同时行人兼具刚性和柔性的特性 ，外观易受穿着、尺度、遮挡、姿态和视角等影响，使得行人重识别成为计算机视觉领域中一个既具有研究价值同时又极具挑战性的热门课题。</p>\n<hr>\n<h1 id=\"技术难点\"><a href=\"#技术难点\" class=\"headerlink\" title=\"技术难点\"></a>技术难点</h1><ul>\n<li><p><strong>能不能用人脸识别做重识别？</strong><br>理论上是可以的。但是有两个原因导致人脸识别较难应用：首先，广泛存在后脑勺和侧脸的情况，做正脸的人脸识别难。其次，摄像头拍摄的像素可能不高，尤其是远景摄像头里面人脸截出来很可能都没有32x32的像素。所以人脸识别在实际的重识别应用中很可能有限。</p>\n</li>\n<li><p><strong>有些人靠衣服的颜色就可以判断出来了，还需要行人重识别么？</strong><br>衣服颜色确实是行人重识别做出判断一个重要因素，但光靠颜色是不足的。首先，摄像头之间是有色差，并且会有光照的影响。其次，有撞衫（颜色相似）的人怎么办，要找细节，但比如颜色直方图这种统计的特征就把细节给忽略了。在多个数据集上的测试表明，光用颜色特征是难以达到50%的top1正确率的。</p>\n</li>\n<li><p><strong>总结</strong>：</p>\n</li>\n</ul>\n<ol>\n<li>不同下摄像头造成行人外观的巨大变化；</li>\n<li>目标遮挡（Occlusion）导致部分特征丢失；</li>\n<li>不同的 View，Illumination 导致同一目标的特征差异；</li>\n<li>不同目标衣服颜色近似、特征近似导致区分度下降；</li>\n</ol>\n<hr>\n<h1 id=\"基本方法\"><a href=\"#基本方法\" class=\"headerlink\" title=\"基本方法\"></a>基本方法</h1><h2 id=\"基于部件匹配的方法\"><a href=\"#基于部件匹配的方法\" class=\"headerlink\" title=\"基于部件匹配的方法\"></a>基于部件匹配的方法</h2><p>** 基于人体在三维空间中的结构（结构信息），人体图像可以进行分割，按部件来执行匹配。**</p>\n<ul>\n<li>常见方案是水平切割，就是将图像切为几个水平的条。由于人体身材往往差不多，所以可以用简单的水平条来做一一比较。</li>\n<li>在领域中做匹配，采用的是一个正方形的邻域。</li>\n<li>另一个较新的方案是先在人体上检测部件（手，腿，躯干等等）再进行匹配，这样的话可以减少位置的误差，但可能引入检测部件的误差。</li>\n<li>类似LSTM的attention匹配，但必须pair输入，测试时间较长，不适合快速图像检索。</li>\n<li>如图，类似人脸对齐，使用STN 将行人整个图像先利用热度图对齐，再匹配。<br><img src=\"https://s1.ax1x.com/2022/09/05/vTR7Pf.png\" alt><h2 id=\"基于损失函数的方法\"><a href=\"#基于损失函数的方法\" class=\"headerlink\" title=\"基于损失函数的方法\"></a>基于损失函数的方法</h2></li>\n</ul>\n<p><strong>基于高层语义信息，设置一些辅助任务，帮助模型学习到好的特征表达。</strong></p>\n<ul>\n<li>身份损失（Identification loss）直接拿身份label做多类分类。</li>\n<li>鉴定损失（Verification loss）比较两个输入图像是否为同一人。</li>\n<li>身份损失（Identification loss）+鉴定损失（Verification loss），将以上两种损失函数混合。</li>\n<li>三样本损失 （Triplet loss） 以3个样本为一组，同一人的图像特征距离应小于不同人。</li>\n<li>加入属性任务 （attribute）比如判断是否背包，是男生还是女生等等。人们遇见陌生人也是利用这些属性来描述。</li>\n<li>数据增强 混合多数据集训练 ，加入训练集上 生成对抗网络（GAN）生成的数据，如图：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTRfrd.png\" alt></li>\n</ul>\n<h1 id=\"识别机制\"><a href=\"#识别机制\" class=\"headerlink\" title=\"识别机制\"></a>识别机制</h1><p><strong>如图</strong><br> <img src=\"https://s1.ax1x.com/2022/09/05/vTR5VI.png\" alt><br>首先要做的是<strong>Detection</strong>，也就是检测出行人，其实这一步数据集已经帮我们做到了，下面介绍数据集的时候会讲到不同数据集采用的不同的目标检测方法以及ID的标注方式。剩下的部分，就是要去<strong>训练一个特征提取网络</strong>，根据特征所计算的度量距离得到损失值，我们选用一个优化器去迭代找到loss最小值，并不断更新网络的参数达到学习的效果。在测试的时候，我们用将要检索的图片（称为<strong>query</strong>或者<strong>probe</strong>），在<strong>底库gallery</strong>中，根据计算出的特征距离进行排序，选出最TOP的几张图片，来达到目标检索的目的。</p>\n<p>下面两张图分别是<strong>训练阶段</strong>和<strong>测试阶段</strong>的示意图：<br> <img src=\"https://s1.ax1x.com/2022/09/05/vTRrUx.png\" alt><br>** 训练阶段**<br>  <img src=\"https://s1.ax1x.com/2022/09/05/vTR6PK.png\" alt></p>\n<hr>\n<h1 id=\"评测指标\"><a href=\"#评测指标\" class=\"headerlink\" title=\"评测指标\"></a>评测指标</h1><h2 id=\"rank-k\"><a href=\"#rank-k\" class=\"headerlink\" title=\"rank-k\"></a>rank-k</h2><p><code>算法返回的排序列表中，前k位为存在检索目标则称为rank-k命中</code><br><strong>举个例子:</strong><br>假如在人脸识别中，底库中有100个人，现在来了1个待识别的人脸（假如label为m1），与底库中的人脸比对后将底库中的人脸按照得分从高到低进行排序，我们发现：<br>如果识别结果是m1、m2、m3、m4、m5……，则此时rank-1的正确率为100%；rank-2的正确率也为100%；rank-5的正确率也为100%；<br>如果识别结果是m2、m1、m3、m4、m5……，则此时rank-1的正确率为0%；rank-2的正确率为100%；rank-5的正确率也为100%；<br>如果识别结果是m2、m3、m4、m5、m1……，则此时rank-1的正确率为0%；rank-2的正确率为0%；rank-5的正确率为100%；<br>同理，当待识别的人脸集合有很多时，则采取取平均值的做法。例如待识别人脸有3个（假如label为m1，m2，m3），同样对每一个人脸都有一个从高到低的得分，<br><strong>比如：</strong><br>人脸1结果为m1、m2、m3、m4、m5……，<br>人脸2结果为m2、m1、m3、m4、m5……，<br>人脸3结果m3、m1、m2、m4、m5……，<br>则此时rank-1的正确率为（1+1+1）/3=100%；<br>rank-2的正确率也为（1+1+1）/3=100%；<br>rank-5的正确率也为（1+1+1）/3=100%；<br><strong>比如：</strong><br>人脸1结果为m4、m2、m3、m5、m6……，<br>人脸2结果为m1、m2、m3、m4、m5……，<br>人脸3结果m3、m1、m2、m4、m5……，<br>则此时rank-1的正确率为（0+0+1）/3=33.33%；<br>rank-2的正确率为（0+1+1）/3=66.66%；<br>rank-5的正确率也为（0+1+1）/3=66.66%；</p>\n<h2 id=\"mAP-mean-average-precision\"><a href=\"#mAP-mean-average-precision\" class=\"headerlink\" title=\"mAP(mean average precision)\"></a>mAP(mean average precision)</h2><p>反应检索的人在数据库中所有正确的图片排在排序列表前面的程度，能更加全面的衡量ReID算法的性能。如下图，假设该检索行人在gallery中有10张图片，在检索的list中位置（rank）分别为1、2、3、4、5、6、7、8、9，则ap为(1/ 1 + 2 / 2 + 3 / 3 + 4 / 4 + 5 / 5 + 6 / 6 + 7 / 7 + 8 / 8 + 9 / 9) / 10 = 0.90；ap较大时，该行人的检索结果都相对靠前，对所有query的ap取平均值得到mAP<br> <img src=\"https://s1.ax1x.com/2022/09/05/vTRc8O.png\" alt></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<p><img src=\"https://s1.ax1x.com/2022/09/05/vTRHG8.png\" alt></p>\n<h1 id=\"行人重识别是什么？\"><a href=\"#行人重识别是什么？\" class=\"headerlink\" title=\"行人重识别是什么？\"></a>行人重识别是什么？</h1><p><strong>行人重识别（Person re-identification）</strong>也称行人再识别，是利用计算机视觉技术判断图像或者视频序列中是否存在特定行人的技术。广泛被认为是一个图像检索的子问题。给定一个监控行人图像，检索跨设备下的该行人图像。旨在弥补目前固定的摄像头的视觉局限，并可与行人检测/行人跟踪技术相结合，可广泛应用于智能视频监控、智能安保等领域。由于不同摄像设备之间的差异，同时行人兼具刚性和柔性的特性 ，外观易受穿着、尺度、遮挡、姿态和视角等影响，使得行人重识别成为计算机视觉领域中一个既具有研究价值同时又极具挑战性的热门课题。</p>\n<hr>\n<h1 id=\"技术难点\"><a href=\"#技术难点\" class=\"headerlink\" title=\"技术难点\"></a>技术难点</h1><ul>\n<li><p><strong>能不能用人脸识别做重识别？</strong><br>理论上是可以的。但是有两个原因导致人脸识别较难应用：首先，广泛存在后脑勺和侧脸的情况，做正脸的人脸识别难。其次，摄像头拍摄的像素可能不高，尤其是远景摄像头里面人脸截出来很可能都没有32x32的像素。所以人脸识别在实际的重识别应用中很可能有限。</p>\n</li>\n<li><p><strong>有些人靠衣服的颜色就可以判断出来了，还需要行人重识别么？</strong><br>衣服颜色确实是行人重识别做出判断一个重要因素，但光靠颜色是不足的。首先，摄像头之间是有色差，并且会有光照的影响。其次，有撞衫（颜色相似）的人怎么办，要找细节，但比如颜色直方图这种统计的特征就把细节给忽略了。在多个数据集上的测试表明，光用颜色特征是难以达到50%的top1正确率的。</p>\n</li>\n<li><p><strong>总结</strong>：</p>\n</li>\n</ul>\n<ol>\n<li>不同下摄像头造成行人外观的巨大变化；</li>\n<li>目标遮挡（Occlusion）导致部分特征丢失；</li>\n<li>不同的 View，Illumination 导致同一目标的特征差异；</li>\n<li>不同目标衣服颜色近似、特征近似导致区分度下降；</li>\n</ol>\n<hr>\n<h1 id=\"基本方法\"><a href=\"#基本方法\" class=\"headerlink\" title=\"基本方法\"></a>基本方法</h1><h2 id=\"基于部件匹配的方法\"><a href=\"#基于部件匹配的方法\" class=\"headerlink\" title=\"基于部件匹配的方法\"></a>基于部件匹配的方法</h2><p>** 基于人体在三维空间中的结构（结构信息），人体图像可以进行分割，按部件来执行匹配。**</p>\n<ul>\n<li>常见方案是水平切割，就是将图像切为几个水平的条。由于人体身材往往差不多，所以可以用简单的水平条来做一一比较。</li>\n<li>在领域中做匹配，采用的是一个正方形的邻域。</li>\n<li>另一个较新的方案是先在人体上检测部件（手，腿，躯干等等）再进行匹配，这样的话可以减少位置的误差，但可能引入检测部件的误差。</li>\n<li>类似LSTM的attention匹配，但必须pair输入，测试时间较长，不适合快速图像检索。</li>\n<li>如图，类似人脸对齐，使用STN 将行人整个图像先利用热度图对齐，再匹配。<br><img src=\"https://s1.ax1x.com/2022/09/05/vTR7Pf.png\" alt><h2 id=\"基于损失函数的方法\"><a href=\"#基于损失函数的方法\" class=\"headerlink\" title=\"基于损失函数的方法\"></a>基于损失函数的方法</h2></li>\n</ul>\n<p><strong>基于高层语义信息，设置一些辅助任务，帮助模型学习到好的特征表达。</strong></p>\n<ul>\n<li>身份损失（Identification loss）直接拿身份label做多类分类。</li>\n<li>鉴定损失（Verification loss）比较两个输入图像是否为同一人。</li>\n<li>身份损失（Identification loss）+鉴定损失（Verification loss），将以上两种损失函数混合。</li>\n<li>三样本损失 （Triplet loss） 以3个样本为一组，同一人的图像特征距离应小于不同人。</li>\n<li>加入属性任务 （attribute）比如判断是否背包，是男生还是女生等等。人们遇见陌生人也是利用这些属性来描述。</li>\n<li>数据增强 混合多数据集训练 ，加入训练集上 生成对抗网络（GAN）生成的数据，如图：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTRfrd.png\" alt></li>\n</ul>\n<h1 id=\"识别机制\"><a href=\"#识别机制\" class=\"headerlink\" title=\"识别机制\"></a>识别机制</h1><p><strong>如图</strong><br> <img src=\"https://s1.ax1x.com/2022/09/05/vTR5VI.png\" alt><br>首先要做的是<strong>Detection</strong>，也就是检测出行人，其实这一步数据集已经帮我们做到了，下面介绍数据集的时候会讲到不同数据集采用的不同的目标检测方法以及ID的标注方式。剩下的部分，就是要去<strong>训练一个特征提取网络</strong>，根据特征所计算的度量距离得到损失值，我们选用一个优化器去迭代找到loss最小值，并不断更新网络的参数达到学习的效果。在测试的时候，我们用将要检索的图片（称为<strong>query</strong>或者<strong>probe</strong>），在<strong>底库gallery</strong>中，根据计算出的特征距离进行排序，选出最TOP的几张图片，来达到目标检索的目的。</p>\n<p>下面两张图分别是<strong>训练阶段</strong>和<strong>测试阶段</strong>的示意图：<br> <img src=\"https://s1.ax1x.com/2022/09/05/vTRrUx.png\" alt><br>** 训练阶段**<br>  <img src=\"https://s1.ax1x.com/2022/09/05/vTR6PK.png\" alt></p>\n<hr>\n<h1 id=\"评测指标\"><a href=\"#评测指标\" class=\"headerlink\" title=\"评测指标\"></a>评测指标</h1><h2 id=\"rank-k\"><a href=\"#rank-k\" class=\"headerlink\" title=\"rank-k\"></a>rank-k</h2><p><code>算法返回的排序列表中，前k位为存在检索目标则称为rank-k命中</code><br><strong>举个例子:</strong><br>假如在人脸识别中，底库中有100个人，现在来了1个待识别的人脸（假如label为m1），与底库中的人脸比对后将底库中的人脸按照得分从高到低进行排序，我们发现：<br>如果识别结果是m1、m2、m3、m4、m5……，则此时rank-1的正确率为100%；rank-2的正确率也为100%；rank-5的正确率也为100%；<br>如果识别结果是m2、m1、m3、m4、m5……，则此时rank-1的正确率为0%；rank-2的正确率为100%；rank-5的正确率也为100%；<br>如果识别结果是m2、m3、m4、m5、m1……，则此时rank-1的正确率为0%；rank-2的正确率为0%；rank-5的正确率为100%；<br>同理，当待识别的人脸集合有很多时，则采取取平均值的做法。例如待识别人脸有3个（假如label为m1，m2，m3），同样对每一个人脸都有一个从高到低的得分，<br><strong>比如：</strong><br>人脸1结果为m1、m2、m3、m4、m5……，<br>人脸2结果为m2、m1、m3、m4、m5……，<br>人脸3结果m3、m1、m2、m4、m5……，<br>则此时rank-1的正确率为（1+1+1）/3=100%；<br>rank-2的正确率也为（1+1+1）/3=100%；<br>rank-5的正确率也为（1+1+1）/3=100%；<br><strong>比如：</strong><br>人脸1结果为m4、m2、m3、m5、m6……，<br>人脸2结果为m1、m2、m3、m4、m5……，<br>人脸3结果m3、m1、m2、m4、m5……，<br>则此时rank-1的正确率为（0+0+1）/3=33.33%；<br>rank-2的正确率为（0+1+1）/3=66.66%；<br>rank-5的正确率也为（0+1+1）/3=66.66%；</p>\n<h2 id=\"mAP-mean-average-precision\"><a href=\"#mAP-mean-average-precision\" class=\"headerlink\" title=\"mAP(mean average precision)\"></a>mAP(mean average precision)</h2><p>反应检索的人在数据库中所有正确的图片排在排序列表前面的程度，能更加全面的衡量ReID算法的性能。如下图，假设该检索行人在gallery中有10张图片，在检索的list中位置（rank）分别为1、2、3、4、5、6、7、8、9，则ap为(1/ 1 + 2 / 2 + 3 / 3 + 4 / 4 + 5 / 5 + 6 / 6 + 7 / 7 + 8 / 8 + 9 / 9) / 10 = 0.90；ap较大时，该行人的检索结果都相对靠前，对所有query的ap取平均值得到mAP<br> <img src=\"https://s1.ax1x.com/2022/09/05/vTRc8O.png\" alt></p>\n"},{"title":"感知机初识","date":"2018-08-09T16:00:00.000Z","_content":"\n# 感知机（perceptron)\n感知机是神经网络（深度学习）的起源算法，学习感知机的构造是通向神经网络和深度学习的一种重要思想。\n>严格讲，应该称为“人工神经元”或“朴素感知机”，但是因为很多基本的处理都是共通的，所以这里就简单地称为“感知机”。\n\n## 原理简介：\n感知机接收多个输入信号，输出一个信号。\n这里所说的“信号”可以想 象成电流或河流那样具备“**流动性**”的东西。\n像电流流过导线，向前方输送 电子一样，感知机的信号也会形成流，向前方输送信息。\n但是，和实际的电 流不同的是，感知机的信号只有**“流/不流”（1/0）**两种取值。\n0 对应“不传递信号”，1对应“传递信号”。\n\n![net](http://r.photo.store.qq.com/psb?/V14eJTFY137vJk/Jb9LnAgcqtwC7udEtAvxtUYaeAQmdphrXHM8w98K9MQ!/r/dIoBAAAAAAAA \"markdown\")\n\n**如图**\n- x<sub>1</sub> 、x<sub>2</sub>是输入信号，\n- y 是输出信号，\n- w<sub>1</sub>、w<sub>2</sub>是权重 （w 是 weight 的首字母）。\n- 图中的○称为“神经元”或者“节点”。\n- 输入信号被送往神经元时，会被分别乘以固定的权重（w<sub>1</sub> x<sub>1</sub> , w<sub>2</sub> x<sub>2</sub> ）。\n- 神经元会计算传送过来的信号的总和，只有当这个总和超过 了某个界限值时，才会输出1（这也称为“神经元被激活）。\n- 这里将这个界限值称为阈值，用符号θ表示。\n\n感知机的多个输入信号都有各自固有的权重，这些权重发挥着控制各个 信号的重要性的作用。也就是说，权重越大，对应该权重的信号的重要性就越高。\n权重：相当于电流里的电阻。电阻是决定电流流动难度的参数， 电阻越低，通过的电流就越大。\n而感知机的权重则是值越大，通过的信号就越大。\n不管是电阻还是权重，在控制信号流动难度（或者流 动容易度）这一点上的作用都是一样的。","source":"_posts/感知机初识.md","raw":"---\ntitle: 感知机初识\ntags: [感知机]\n\ncategories: [机器学习]\n\ndate: 2018-8-10\n---\n\n# 感知机（perceptron)\n感知机是神经网络（深度学习）的起源算法，学习感知机的构造是通向神经网络和深度学习的一种重要思想。\n>严格讲，应该称为“人工神经元”或“朴素感知机”，但是因为很多基本的处理都是共通的，所以这里就简单地称为“感知机”。\n\n## 原理简介：\n感知机接收多个输入信号，输出一个信号。\n这里所说的“信号”可以想 象成电流或河流那样具备“**流动性**”的东西。\n像电流流过导线，向前方输送 电子一样，感知机的信号也会形成流，向前方输送信息。\n但是，和实际的电 流不同的是，感知机的信号只有**“流/不流”（1/0）**两种取值。\n0 对应“不传递信号”，1对应“传递信号”。\n\n![net](http://r.photo.store.qq.com/psb?/V14eJTFY137vJk/Jb9LnAgcqtwC7udEtAvxtUYaeAQmdphrXHM8w98K9MQ!/r/dIoBAAAAAAAA \"markdown\")\n\n**如图**\n- x<sub>1</sub> 、x<sub>2</sub>是输入信号，\n- y 是输出信号，\n- w<sub>1</sub>、w<sub>2</sub>是权重 （w 是 weight 的首字母）。\n- 图中的○称为“神经元”或者“节点”。\n- 输入信号被送往神经元时，会被分别乘以固定的权重（w<sub>1</sub> x<sub>1</sub> , w<sub>2</sub> x<sub>2</sub> ）。\n- 神经元会计算传送过来的信号的总和，只有当这个总和超过 了某个界限值时，才会输出1（这也称为“神经元被激活）。\n- 这里将这个界限值称为阈值，用符号θ表示。\n\n感知机的多个输入信号都有各自固有的权重，这些权重发挥着控制各个 信号的重要性的作用。也就是说，权重越大，对应该权重的信号的重要性就越高。\n权重：相当于电流里的电阻。电阻是决定电流流动难度的参数， 电阻越低，通过的电流就越大。\n而感知机的权重则是值越大，通过的信号就越大。\n不管是电阻还是权重，在控制信号流动难度（或者流 动容易度）这一点上的作用都是一样的。","slug":"感知机初识","published":1,"updated":"2022-09-05T06:19:22.645Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jba0o007f7svwhcdqq93b","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"感知机（perceptron\"><a href=\"#感知机（perceptron\" class=\"headerlink\" title=\"感知机（perceptron)\"></a>感知机（perceptron)</h1><p>感知机是神经网络（深度学习）的起源算法，学习感知机的构造是通向神经网络和深度学习的一种重要思想。</p>\n<blockquote>\n<p>严格讲，应该称为“人工神经元”或“朴素感知机”，但是因为很多基本的处理都是共通的，所以这里就简单地称为“感知机”。</p>\n</blockquote>\n<h2 id=\"原理简介：\"><a href=\"#原理简介：\" class=\"headerlink\" title=\"原理简介：\"></a>原理简介：</h2><p>感知机接收多个输入信号，输出一个信号。<br>这里所说的“信号”可以想 象成电流或河流那样具备“<strong>流动性</strong>”的东西。<br>像电流流过导线，向前方输送 电子一样，感知机的信号也会形成流，向前方输送信息。<br>但是，和实际的电 流不同的是，感知机的信号只有<strong>“流/不流”（1/0）</strong>两种取值。<br>0 对应“不传递信号”，1对应“传递信号”。</p>\n<p><img src=\"http://r.photo.store.qq.com/psb?/V14eJTFY137vJk/Jb9LnAgcqtwC7udEtAvxtUYaeAQmdphrXHM8w98K9MQ!/r/dIoBAAAAAAAA\" alt=\"net\" title=\"markdown\"></p>\n<p><strong>如图</strong></p>\n<ul>\n<li>x<sub>1</sub> 、x<sub>2</sub>是输入信号，</li>\n<li>y 是输出信号，</li>\n<li>w<sub>1</sub>、w<sub>2</sub>是权重 （w 是 weight 的首字母）。</li>\n<li>图中的○称为“神经元”或者“节点”。</li>\n<li>输入信号被送往神经元时，会被分别乘以固定的权重（w<sub>1</sub> x<sub>1</sub> , w<sub>2</sub> x<sub>2</sub> ）。</li>\n<li>神经元会计算传送过来的信号的总和，只有当这个总和超过 了某个界限值时，才会输出1（这也称为“神经元被激活）。</li>\n<li>这里将这个界限值称为阈值，用符号θ表示。</li>\n</ul>\n<p>感知机的多个输入信号都有各自固有的权重，这些权重发挥着控制各个 信号的重要性的作用。也就是说，权重越大，对应该权重的信号的重要性就越高。<br>权重：相当于电流里的电阻。电阻是决定电流流动难度的参数， 电阻越低，通过的电流就越大。<br>而感知机的权重则是值越大，通过的信号就越大。<br>不管是电阻还是权重，在控制信号流动难度（或者流 动容易度）这一点上的作用都是一样的。</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"感知机（perceptron\"><a href=\"#感知机（perceptron\" class=\"headerlink\" title=\"感知机（perceptron)\"></a>感知机（perceptron)</h1><p>感知机是神经网络（深度学习）的起源算法，学习感知机的构造是通向神经网络和深度学习的一种重要思想。</p>\n<blockquote>\n<p>严格讲，应该称为“人工神经元”或“朴素感知机”，但是因为很多基本的处理都是共通的，所以这里就简单地称为“感知机”。</p>\n</blockquote>\n<h2 id=\"原理简介：\"><a href=\"#原理简介：\" class=\"headerlink\" title=\"原理简介：\"></a>原理简介：</h2><p>感知机接收多个输入信号，输出一个信号。<br>这里所说的“信号”可以想 象成电流或河流那样具备“<strong>流动性</strong>”的东西。<br>像电流流过导线，向前方输送 电子一样，感知机的信号也会形成流，向前方输送信息。<br>但是，和实际的电 流不同的是，感知机的信号只有<strong>“流/不流”（1/0）</strong>两种取值。<br>0 对应“不传递信号”，1对应“传递信号”。</p>\n<p><img src=\"http://r.photo.store.qq.com/psb?/V14eJTFY137vJk/Jb9LnAgcqtwC7udEtAvxtUYaeAQmdphrXHM8w98K9MQ!/r/dIoBAAAAAAAA\" alt=\"net\" title=\"markdown\"></p>\n<p><strong>如图</strong></p>\n<ul>\n<li>x<sub>1</sub> 、x<sub>2</sub>是输入信号，</li>\n<li>y 是输出信号，</li>\n<li>w<sub>1</sub>、w<sub>2</sub>是权重 （w 是 weight 的首字母）。</li>\n<li>图中的○称为“神经元”或者“节点”。</li>\n<li>输入信号被送往神经元时，会被分别乘以固定的权重（w<sub>1</sub> x<sub>1</sub> , w<sub>2</sub> x<sub>2</sub> ）。</li>\n<li>神经元会计算传送过来的信号的总和，只有当这个总和超过 了某个界限值时，才会输出1（这也称为“神经元被激活）。</li>\n<li>这里将这个界限值称为阈值，用符号θ表示。</li>\n</ul>\n<p>感知机的多个输入信号都有各自固有的权重，这些权重发挥着控制各个 信号的重要性的作用。也就是说，权重越大，对应该权重的信号的重要性就越高。<br>权重：相当于电流里的电阻。电阻是决定电流流动难度的参数， 电阻越低，通过的电流就越大。<br>而感知机的权重则是值越大，通过的信号就越大。<br>不管是电阻还是权重，在控制信号流动难度（或者流 动容易度）这一点上的作用都是一样的。</p>\n"},{"title":"论文笔记（一）","date":"2020-07-13T16:00:00.000Z","_content":"**CVPR2017**\n# **Re-ranking Person Re-identification with k-reciprocal Encoding**\n![](https://s1.ax1x.com/2022/09/05/vTREUP.png)\n# Abstract\n当将person re-ID看作一个检索过程时，re-ranking是提高其准确性的关键步骤。然而，在re-ID社区中，对re-ranking的努力有限，尤其是那些全自动、无监督的解决方案。在本文中，我们提出了一种k-reciprocal编码方法来re-ranking re-ID的结果。我们的假设是，如果一个gallery图像与k-reciprocal nearest neighbors中的probe查询相似，则更有可能是真正的匹配。具体地，给定图像，通过将其k-reciprocal nearest neighbors编码为单个向量来计算k-reciprocal特征，该向量用于在杰卡德距离（Jaccard Distance：用来衡量两个集合差异性的一种指标）下re-ranking。最终的距离计算为原始距离和杰卡德距离的组合。我们的re-ranking方法不需要任何人工交互或任何标记数据，因此适用于大规模数据集。在大型Market-1501、CUHK03、MARS和PRW数据集上的实验证实了我们方法的有效性。\n\n------------\n\n\n# Introduction\nperson re-ID是计算机视觉中的一个具有挑战性的课题。一般来说，re-ID可以被看作是一个检索问题。给定一个probe person，我们希望在gallery中搜索包含处于跨相机模式下的相同行人的图像。在获得初始排序列表之后，好的实践包括添加re-ranking步骤，期望相关图像将获得更高的排名。因此，本文将重点放在re-ranking问题上。\n\nre-ranking主要是在通用实例检索generic instance retrieval[5、14、34、35]中进行研究。许多re-ranking主方法的主要优点是它可以在不需要额外训练样本的情况下实现，并且可以应用于任何初始ranking结果。\n\nre-ranking的有效性在很大程度上取决于初始ranking列表initial ranking list的质量。许多先前的工作利用了初始排序列表[5，14，34，35，43，44]中排名靠前的图像(例如k-最近邻，k-nearest neighbors)之间的相似关系。一个基本的假设是，如果返回的图像在probe的k个最近邻内排序，那么它很可能是一个真正的匹配，可用于随后的re-ranking。然而，情况可能偏离最佳情况：错误匹配很可能包括在probe的k个最近邻中。例如，在图1中，P1、P2、P3和P4是4个查询图probe的真实匹配，但是它们都不包括在top-4中。我们观察到一些错误匹配（N1-N6）获得高排名。结果，直接使用top-k的图像可能在re-ranking系统中引入噪声并损害最终结果。\n![](https://s1.ax1x.com/2022/09/05/vTReC8.png)\n在文献中，k-reciprocal nearest neighbor[14，34]是解决上述问题的有效方法，即被错误匹配污染的top-k图像。当两个图像被称为k-reciprocal nearest neighbor时，当另一个图像作为probe时，它们都被排到top-k。因此，k-reciprocal nearest neighbor作为两个图像是否正确匹配的更严格规则。在图1中，我们观察到probe是正确匹配图像的reciprocal neighbor，而不是错误匹配图像的reciprocal neighbor。该观察识别初始排序列表initial ranking list中的正确匹配，以改善重新排序re-ranking结果。\n\n基于以上考虑，本文提出了一种基于k-reciprocal编码的re-ID re-ranking方法。我们的方法包括三个步骤。首先，将加权的k-reciprocal neighbor 集编码为一个向量，形成k-reciprocal特征。然后，两个图像之间的Jaccard距离可以通过它们的k-reciprocal特征来计算。其次，为了获得更鲁棒的k-reciprocal特征，我们改进了一种局部查询扩展方法（a local query expansion approach），以进一步改善re-ID性能。最后，最终距离的计算为原始距离和Jaccard距离的加权集合。随后，它被用来获取re-ranking列表。所提出的方法的框架如图2所示。综上所述，本文的贡献是：\n1. 我们提出了一个k-reciprocal特征通过编码k-reciprocal特征到一个单一的向量。重re-ranking过程可以很容易地通过向量比较来执行。\n2. 我们的方法不需要任何人工交互或带标注的数据，并且可以自动和无监督的方式应用于任何人person re-ID ranking结果。\n3. 该方法有效地提高了Market-1501、CUHK03、MARS和PRW等数据集上的person re-ID性能。特别地，我们在rank-1和mAP上实现了Market-1501的最先进的精度。\n![](https://s1.ax1x.com/2022/09/05/vTRV4f.png)\n\n# Related Work\n\n我们推荐感兴趣的读者阅读[3，50]以详细回顾person re-ID。在此，我们重点研究用于目标检索，特别是用于re-ID的re-ranking方法。\n\n**Re-ranking for object retrieval.**\nRe-ranking方法已被成功地研究以提高目标检索精度[51]。许多工作利用k-nearest neighbors来探索相似关系来解决re-ranking问题。[5]提出了average query expansion (AQE)方法，该方法通过对top-k返回结果中的向量进行平均，得到一个新的查询向量（query vector），用于对数据库进行重新查询。为了利用远离查询图像的负样本，Arandjelović和Zisserman[1]改进了discriminative query expansion (DQE)，使用线性SVM来获得权重向量。从决策边界的距离被用来修改初始排序表（initial ranking list）。[35]利用初始排序表的k-nearest neighbors作为新查询（queries）来生成新的排序表。每个图像的新得分根据其在产生的排序表中的位置来计算。最近，稀疏上下文激活sparse contextual activation (SCA)[2]提出将neighbor set编码为向量，并通过广义Jaccard距离来表示样本的相似性。为了防止错误匹配对top-k图像的污染，[14，34]中采用了k-reciprocal nearest neighbors的概念。在[14]中提出了上下文不相似性度量contextual dissimilarity measure (CDM)，通过迭代正则化每个点到其邻域的平均距离来细化相似性。[34]正式提出k-reciprocal nearest neighbors的概念。k-reciprocal nearest neighbors被认为是高度相关的候选，用于构造闭集（closed set）以re-ranking数据集的其余部分。我们的工作从两个方面背离了这两个方法。我们不像文献[14]那样对最近邻（nearest neighborhood）关系进行对称化来细化相似度，也不像文献[34]那样直接将k-reciprocal nearest neighbors看作高阶样本。相反，我们通过比较两幅图像的k-reciprocal nearest neighbors来计算它们之间的新距离。\n\n**Re-ranking for re-ID.**\n大多数现有的person re-ID方法主要集中于特征表示[41，12，23，48，21]或度量学习[23，17，9，32，45]。最近，一些研究者[10，33，28，24，49，20，11，19，42，44]已经注意到在re-ID社区中基于re-ranking的方法。[20]通过分析每对图像的近邻（near neighbors）的相关信息和直接信息，建立re-ranking模型。在[11]中，通过联合考虑排序列表中的内容和上下文信息，学习无监督的重新排序模型，有效地去除了模糊样本，提高了re-ID的性能。[19]提出一种双向排序（bidirectional ranking）方法，利用计算得到的新相似度作为内容相似度和上下文相似度的融合，对初始排序表进行修正。最近，利用不同基线（different baseline）方法的公共最近邻来re-ranking任务[42，44]。[42]将全局特征和局部特征的公共最近邻作为新查询（queries），通过集合全局特征和局部特征的新排序列表来修改初始排序列表。在[44]中，利用k-nearest neighbor set从不同的baseline方法计算相似度和不相似度，然后进行相似度和不相似度的集合来优化初始排序表。上述方法在re-ranking方面继续取得进展，有望为将来从k-nearest neighbors发现进一步的信息作出贡献。然而，使用k-nearest neighbors直接实现re-ranking可能限制整体性能，因为常常包括错误匹配。**为了解决这个问题，本文研究了k-reciprocal neighbors在person re-ID中的重要性，从而设计了一个简单而有效的re-ranking方法。**\n\n# Proposed Approach\n\n### Problem Definition\n给定查询图像`p`和`gallery set`（包含N幅图像，`G = {gi | i = 1, 2, ...N }`），`p`和`gi`之间的原始距离可以用马氏距离（Mahalanobis distance）衡量：\n![](https://s1.ax1x.com/2022/09/05/vTR9jH.png)\n其中，`xp`个`xg`分别代表查询图`p`和**检测集gallery**中`gi`的外观特征，`M`是半正定矩阵。\n初始排序表：\n![](https://s1.ax1x.com/2022/09/05/vTRpge.png)\n可根据`probe p`和`gallery gi`之间的成对原始距离得到，其中：\n![](https://s1.ax1x.com/2022/09/05/vTRPud.png)\n我们的目标是对`L(p,G)`进行**re-rank**，使更多的正样本排在`top`列表中，从而提高person re-ID的性能。\n\n### K -reciprocal Nearest Neighbors\n我们将`N(p,k)`定义为一个probe p的k-nearest neighbors（i.e. 排序列表的top-k samples）：\n![](https://s1.ax1x.com/2022/09/05/vTRFHI.png)\n其中，`|.|`表示集合中候选的数目。k-reciprocal nearest neighbors `R(p, k)`可以定义为：\n![](https://s1.ax1x.com/2022/09/05/vTRAEt.png)\n**根据前面的描述，k-reciprocal nearest neighbors比k-nearest neighbors和probe p更相关**。然而，由于照明、姿态、视图和遮挡的变化，正样本图像可能被从k-nearest neighbors中排除，并且随后不被包括在k-reciprocal nearest neighbors中。为了解决这个问题，我们根据以下条件将`R(p，k)`中每个候选项的`1/2 k-reciprocal nearest neighbors`增量地添加到更鲁棒的集合`R*(p，k)`中：\n![](https://s1.ax1x.com/2022/09/05/vTRiDA.png)\n\n# Conclusion\n\n在本文中，我们解决person re-ID的re-ranking问题。通过将k-reciprocal nearest neighbors编码为单个向量，我们提出了k-reciprocal特征，从而可以通过向量比较容易地执行re-ranking过程。为了从相似样本中获取相似关系，提出了局部扩展查询（local expansion query）以获得更鲁棒的k-reciprocal特征。基于原始距离和Jaccard距离的组合的最终距离有效地提高了多个大规模数据集上的re-ID性能。值得一提的是，我们的方法是全自动和无监督的，并且可以很容易地实现任何ranking结果。","source":"_posts/论文笔记（一）.md","raw":"---\ntitle:  论文笔记（一）\ntags: [行人重识别,深度学习,图像处理]\ncategories: [论文笔记]\ndate: 2020-7-14\n\n---\n**CVPR2017**\n# **Re-ranking Person Re-identification with k-reciprocal Encoding**\n![](https://s1.ax1x.com/2022/09/05/vTREUP.png)\n# Abstract\n当将person re-ID看作一个检索过程时，re-ranking是提高其准确性的关键步骤。然而，在re-ID社区中，对re-ranking的努力有限，尤其是那些全自动、无监督的解决方案。在本文中，我们提出了一种k-reciprocal编码方法来re-ranking re-ID的结果。我们的假设是，如果一个gallery图像与k-reciprocal nearest neighbors中的probe查询相似，则更有可能是真正的匹配。具体地，给定图像，通过将其k-reciprocal nearest neighbors编码为单个向量来计算k-reciprocal特征，该向量用于在杰卡德距离（Jaccard Distance：用来衡量两个集合差异性的一种指标）下re-ranking。最终的距离计算为原始距离和杰卡德距离的组合。我们的re-ranking方法不需要任何人工交互或任何标记数据，因此适用于大规模数据集。在大型Market-1501、CUHK03、MARS和PRW数据集上的实验证实了我们方法的有效性。\n\n------------\n\n\n# Introduction\nperson re-ID是计算机视觉中的一个具有挑战性的课题。一般来说，re-ID可以被看作是一个检索问题。给定一个probe person，我们希望在gallery中搜索包含处于跨相机模式下的相同行人的图像。在获得初始排序列表之后，好的实践包括添加re-ranking步骤，期望相关图像将获得更高的排名。因此，本文将重点放在re-ranking问题上。\n\nre-ranking主要是在通用实例检索generic instance retrieval[5、14、34、35]中进行研究。许多re-ranking主方法的主要优点是它可以在不需要额外训练样本的情况下实现，并且可以应用于任何初始ranking结果。\n\nre-ranking的有效性在很大程度上取决于初始ranking列表initial ranking list的质量。许多先前的工作利用了初始排序列表[5，14，34，35，43，44]中排名靠前的图像(例如k-最近邻，k-nearest neighbors)之间的相似关系。一个基本的假设是，如果返回的图像在probe的k个最近邻内排序，那么它很可能是一个真正的匹配，可用于随后的re-ranking。然而，情况可能偏离最佳情况：错误匹配很可能包括在probe的k个最近邻中。例如，在图1中，P1、P2、P3和P4是4个查询图probe的真实匹配，但是它们都不包括在top-4中。我们观察到一些错误匹配（N1-N6）获得高排名。结果，直接使用top-k的图像可能在re-ranking系统中引入噪声并损害最终结果。\n![](https://s1.ax1x.com/2022/09/05/vTReC8.png)\n在文献中，k-reciprocal nearest neighbor[14，34]是解决上述问题的有效方法，即被错误匹配污染的top-k图像。当两个图像被称为k-reciprocal nearest neighbor时，当另一个图像作为probe时，它们都被排到top-k。因此，k-reciprocal nearest neighbor作为两个图像是否正确匹配的更严格规则。在图1中，我们观察到probe是正确匹配图像的reciprocal neighbor，而不是错误匹配图像的reciprocal neighbor。该观察识别初始排序列表initial ranking list中的正确匹配，以改善重新排序re-ranking结果。\n\n基于以上考虑，本文提出了一种基于k-reciprocal编码的re-ID re-ranking方法。我们的方法包括三个步骤。首先，将加权的k-reciprocal neighbor 集编码为一个向量，形成k-reciprocal特征。然后，两个图像之间的Jaccard距离可以通过它们的k-reciprocal特征来计算。其次，为了获得更鲁棒的k-reciprocal特征，我们改进了一种局部查询扩展方法（a local query expansion approach），以进一步改善re-ID性能。最后，最终距离的计算为原始距离和Jaccard距离的加权集合。随后，它被用来获取re-ranking列表。所提出的方法的框架如图2所示。综上所述，本文的贡献是：\n1. 我们提出了一个k-reciprocal特征通过编码k-reciprocal特征到一个单一的向量。重re-ranking过程可以很容易地通过向量比较来执行。\n2. 我们的方法不需要任何人工交互或带标注的数据，并且可以自动和无监督的方式应用于任何人person re-ID ranking结果。\n3. 该方法有效地提高了Market-1501、CUHK03、MARS和PRW等数据集上的person re-ID性能。特别地，我们在rank-1和mAP上实现了Market-1501的最先进的精度。\n![](https://s1.ax1x.com/2022/09/05/vTRV4f.png)\n\n# Related Work\n\n我们推荐感兴趣的读者阅读[3，50]以详细回顾person re-ID。在此，我们重点研究用于目标检索，特别是用于re-ID的re-ranking方法。\n\n**Re-ranking for object retrieval.**\nRe-ranking方法已被成功地研究以提高目标检索精度[51]。许多工作利用k-nearest neighbors来探索相似关系来解决re-ranking问题。[5]提出了average query expansion (AQE)方法，该方法通过对top-k返回结果中的向量进行平均，得到一个新的查询向量（query vector），用于对数据库进行重新查询。为了利用远离查询图像的负样本，Arandjelović和Zisserman[1]改进了discriminative query expansion (DQE)，使用线性SVM来获得权重向量。从决策边界的距离被用来修改初始排序表（initial ranking list）。[35]利用初始排序表的k-nearest neighbors作为新查询（queries）来生成新的排序表。每个图像的新得分根据其在产生的排序表中的位置来计算。最近，稀疏上下文激活sparse contextual activation (SCA)[2]提出将neighbor set编码为向量，并通过广义Jaccard距离来表示样本的相似性。为了防止错误匹配对top-k图像的污染，[14，34]中采用了k-reciprocal nearest neighbors的概念。在[14]中提出了上下文不相似性度量contextual dissimilarity measure (CDM)，通过迭代正则化每个点到其邻域的平均距离来细化相似性。[34]正式提出k-reciprocal nearest neighbors的概念。k-reciprocal nearest neighbors被认为是高度相关的候选，用于构造闭集（closed set）以re-ranking数据集的其余部分。我们的工作从两个方面背离了这两个方法。我们不像文献[14]那样对最近邻（nearest neighborhood）关系进行对称化来细化相似度，也不像文献[34]那样直接将k-reciprocal nearest neighbors看作高阶样本。相反，我们通过比较两幅图像的k-reciprocal nearest neighbors来计算它们之间的新距离。\n\n**Re-ranking for re-ID.**\n大多数现有的person re-ID方法主要集中于特征表示[41，12，23，48，21]或度量学习[23，17，9，32，45]。最近，一些研究者[10，33，28，24，49，20，11，19，42，44]已经注意到在re-ID社区中基于re-ranking的方法。[20]通过分析每对图像的近邻（near neighbors）的相关信息和直接信息，建立re-ranking模型。在[11]中，通过联合考虑排序列表中的内容和上下文信息，学习无监督的重新排序模型，有效地去除了模糊样本，提高了re-ID的性能。[19]提出一种双向排序（bidirectional ranking）方法，利用计算得到的新相似度作为内容相似度和上下文相似度的融合，对初始排序表进行修正。最近，利用不同基线（different baseline）方法的公共最近邻来re-ranking任务[42，44]。[42]将全局特征和局部特征的公共最近邻作为新查询（queries），通过集合全局特征和局部特征的新排序列表来修改初始排序列表。在[44]中，利用k-nearest neighbor set从不同的baseline方法计算相似度和不相似度，然后进行相似度和不相似度的集合来优化初始排序表。上述方法在re-ranking方面继续取得进展，有望为将来从k-nearest neighbors发现进一步的信息作出贡献。然而，使用k-nearest neighbors直接实现re-ranking可能限制整体性能，因为常常包括错误匹配。**为了解决这个问题，本文研究了k-reciprocal neighbors在person re-ID中的重要性，从而设计了一个简单而有效的re-ranking方法。**\n\n# Proposed Approach\n\n### Problem Definition\n给定查询图像`p`和`gallery set`（包含N幅图像，`G = {gi | i = 1, 2, ...N }`），`p`和`gi`之间的原始距离可以用马氏距离（Mahalanobis distance）衡量：\n![](https://s1.ax1x.com/2022/09/05/vTR9jH.png)\n其中，`xp`个`xg`分别代表查询图`p`和**检测集gallery**中`gi`的外观特征，`M`是半正定矩阵。\n初始排序表：\n![](https://s1.ax1x.com/2022/09/05/vTRpge.png)\n可根据`probe p`和`gallery gi`之间的成对原始距离得到，其中：\n![](https://s1.ax1x.com/2022/09/05/vTRPud.png)\n我们的目标是对`L(p,G)`进行**re-rank**，使更多的正样本排在`top`列表中，从而提高person re-ID的性能。\n\n### K -reciprocal Nearest Neighbors\n我们将`N(p,k)`定义为一个probe p的k-nearest neighbors（i.e. 排序列表的top-k samples）：\n![](https://s1.ax1x.com/2022/09/05/vTRFHI.png)\n其中，`|.|`表示集合中候选的数目。k-reciprocal nearest neighbors `R(p, k)`可以定义为：\n![](https://s1.ax1x.com/2022/09/05/vTRAEt.png)\n**根据前面的描述，k-reciprocal nearest neighbors比k-nearest neighbors和probe p更相关**。然而，由于照明、姿态、视图和遮挡的变化，正样本图像可能被从k-nearest neighbors中排除，并且随后不被包括在k-reciprocal nearest neighbors中。为了解决这个问题，我们根据以下条件将`R(p，k)`中每个候选项的`1/2 k-reciprocal nearest neighbors`增量地添加到更鲁棒的集合`R*(p，k)`中：\n![](https://s1.ax1x.com/2022/09/05/vTRiDA.png)\n\n# Conclusion\n\n在本文中，我们解决person re-ID的re-ranking问题。通过将k-reciprocal nearest neighbors编码为单个向量，我们提出了k-reciprocal特征，从而可以通过向量比较容易地执行re-ranking过程。为了从相似样本中获取相似关系，提出了局部扩展查询（local expansion query）以获得更鲁棒的k-reciprocal特征。基于原始距离和Jaccard距离的组合的最终距离有效地提高了多个大规模数据集上的re-ID性能。值得一提的是，我们的方法是全自动和无监督的，并且可以很容易地实现任何ranking结果。","slug":"论文笔记（一）","published":1,"updated":"2022-09-05T06:03:27.516Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jba12007k7svwjmdxajyp","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p><strong>CVPR2017</strong></p>\n<h1 id=\"Re-ranking-Person-Re-identification-with-k-reciprocal-Encoding\"><a href=\"#Re-ranking-Person-Re-identification-with-k-reciprocal-Encoding\" class=\"headerlink\" title=\"Re-ranking Person Re-identification with k-reciprocal Encoding\"></a><strong>Re-ranking Person Re-identification with k-reciprocal Encoding</strong></h1><p><img src=\"https://s1.ax1x.com/2022/09/05/vTREUP.png\" alt></p>\n<h1 id=\"Abstract\"><a href=\"#Abstract\" class=\"headerlink\" title=\"Abstract\"></a>Abstract</h1><p>当将person re-ID看作一个检索过程时，re-ranking是提高其准确性的关键步骤。然而，在re-ID社区中，对re-ranking的努力有限，尤其是那些全自动、无监督的解决方案。在本文中，我们提出了一种k-reciprocal编码方法来re-ranking re-ID的结果。我们的假设是，如果一个gallery图像与k-reciprocal nearest neighbors中的probe查询相似，则更有可能是真正的匹配。具体地，给定图像，通过将其k-reciprocal nearest neighbors编码为单个向量来计算k-reciprocal特征，该向量用于在杰卡德距离（Jaccard Distance：用来衡量两个集合差异性的一种指标）下re-ranking。最终的距离计算为原始距离和杰卡德距离的组合。我们的re-ranking方法不需要任何人工交互或任何标记数据，因此适用于大规模数据集。在大型Market-1501、CUHK03、MARS和PRW数据集上的实验证实了我们方法的有效性。</p>\n<hr>\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>person re-ID是计算机视觉中的一个具有挑战性的课题。一般来说，re-ID可以被看作是一个检索问题。给定一个probe person，我们希望在gallery中搜索包含处于跨相机模式下的相同行人的图像。在获得初始排序列表之后，好的实践包括添加re-ranking步骤，期望相关图像将获得更高的排名。因此，本文将重点放在re-ranking问题上。</p>\n<p>re-ranking主要是在通用实例检索generic instance retrieval[5、14、34、35]中进行研究。许多re-ranking主方法的主要优点是它可以在不需要额外训练样本的情况下实现，并且可以应用于任何初始ranking结果。</p>\n<p>re-ranking的有效性在很大程度上取决于初始ranking列表initial ranking list的质量。许多先前的工作利用了初始排序列表[5，14，34，35，43，44]中排名靠前的图像(例如k-最近邻，k-nearest neighbors)之间的相似关系。一个基本的假设是，如果返回的图像在probe的k个最近邻内排序，那么它很可能是一个真正的匹配，可用于随后的re-ranking。然而，情况可能偏离最佳情况：错误匹配很可能包括在probe的k个最近邻中。例如，在图1中，P1、P2、P3和P4是4个查询图probe的真实匹配，但是它们都不包括在top-4中。我们观察到一些错误匹配（N1-N6）获得高排名。结果，直接使用top-k的图像可能在re-ranking系统中引入噪声并损害最终结果。<br><img src=\"https://s1.ax1x.com/2022/09/05/vTReC8.png\" alt><br>在文献中，k-reciprocal nearest neighbor[14，34]是解决上述问题的有效方法，即被错误匹配污染的top-k图像。当两个图像被称为k-reciprocal nearest neighbor时，当另一个图像作为probe时，它们都被排到top-k。因此，k-reciprocal nearest neighbor作为两个图像是否正确匹配的更严格规则。在图1中，我们观察到probe是正确匹配图像的reciprocal neighbor，而不是错误匹配图像的reciprocal neighbor。该观察识别初始排序列表initial ranking list中的正确匹配，以改善重新排序re-ranking结果。</p>\n<p>基于以上考虑，本文提出了一种基于k-reciprocal编码的re-ID re-ranking方法。我们的方法包括三个步骤。首先，将加权的k-reciprocal neighbor 集编码为一个向量，形成k-reciprocal特征。然后，两个图像之间的Jaccard距离可以通过它们的k-reciprocal特征来计算。其次，为了获得更鲁棒的k-reciprocal特征，我们改进了一种局部查询扩展方法（a local query expansion approach），以进一步改善re-ID性能。最后，最终距离的计算为原始距离和Jaccard距离的加权集合。随后，它被用来获取re-ranking列表。所提出的方法的框架如图2所示。综上所述，本文的贡献是：</p>\n<ol>\n<li>我们提出了一个k-reciprocal特征通过编码k-reciprocal特征到一个单一的向量。重re-ranking过程可以很容易地通过向量比较来执行。</li>\n<li>我们的方法不需要任何人工交互或带标注的数据，并且可以自动和无监督的方式应用于任何人person re-ID ranking结果。</li>\n<li>该方法有效地提高了Market-1501、CUHK03、MARS和PRW等数据集上的person re-ID性能。特别地，我们在rank-1和mAP上实现了Market-1501的最先进的精度。<br><img src=\"https://s1.ax1x.com/2022/09/05/vTRV4f.png\" alt></li>\n</ol>\n<h1 id=\"Related-Work\"><a href=\"#Related-Work\" class=\"headerlink\" title=\"Related Work\"></a>Related Work</h1><p>我们推荐感兴趣的读者阅读[3，50]以详细回顾person re-ID。在此，我们重点研究用于目标检索，特别是用于re-ID的re-ranking方法。</p>\n<p><strong>Re-ranking for object retrieval.</strong><br>Re-ranking方法已被成功地研究以提高目标检索精度[51]。许多工作利用k-nearest neighbors来探索相似关系来解决re-ranking问题。[5]提出了average query expansion (AQE)方法，该方法通过对top-k返回结果中的向量进行平均，得到一个新的查询向量（query vector），用于对数据库进行重新查询。为了利用远离查询图像的负样本，Arandjelović和Zisserman[1]改进了discriminative query expansion (DQE)，使用线性SVM来获得权重向量。从决策边界的距离被用来修改初始排序表（initial ranking list）。[35]利用初始排序表的k-nearest neighbors作为新查询（queries）来生成新的排序表。每个图像的新得分根据其在产生的排序表中的位置来计算。最近，稀疏上下文激活sparse contextual activation (SCA)[2]提出将neighbor set编码为向量，并通过广义Jaccard距离来表示样本的相似性。为了防止错误匹配对top-k图像的污染，[14，34]中采用了k-reciprocal nearest neighbors的概念。在[14]中提出了上下文不相似性度量contextual dissimilarity measure (CDM)，通过迭代正则化每个点到其邻域的平均距离来细化相似性。[34]正式提出k-reciprocal nearest neighbors的概念。k-reciprocal nearest neighbors被认为是高度相关的候选，用于构造闭集（closed set）以re-ranking数据集的其余部分。我们的工作从两个方面背离了这两个方法。我们不像文献[14]那样对最近邻（nearest neighborhood）关系进行对称化来细化相似度，也不像文献[34]那样直接将k-reciprocal nearest neighbors看作高阶样本。相反，我们通过比较两幅图像的k-reciprocal nearest neighbors来计算它们之间的新距离。</p>\n<p><strong>Re-ranking for re-ID.</strong><br>大多数现有的person re-ID方法主要集中于特征表示[41，12，23，48，21]或度量学习[23，17，9，32，45]。最近，一些研究者[10，33，28，24，49，20，11，19，42，44]已经注意到在re-ID社区中基于re-ranking的方法。[20]通过分析每对图像的近邻（near neighbors）的相关信息和直接信息，建立re-ranking模型。在[11]中，通过联合考虑排序列表中的内容和上下文信息，学习无监督的重新排序模型，有效地去除了模糊样本，提高了re-ID的性能。[19]提出一种双向排序（bidirectional ranking）方法，利用计算得到的新相似度作为内容相似度和上下文相似度的融合，对初始排序表进行修正。最近，利用不同基线（different baseline）方法的公共最近邻来re-ranking任务[42，44]。[42]将全局特征和局部特征的公共最近邻作为新查询（queries），通过集合全局特征和局部特征的新排序列表来修改初始排序列表。在[44]中，利用k-nearest neighbor set从不同的baseline方法计算相似度和不相似度，然后进行相似度和不相似度的集合来优化初始排序表。上述方法在re-ranking方面继续取得进展，有望为将来从k-nearest neighbors发现进一步的信息作出贡献。然而，使用k-nearest neighbors直接实现re-ranking可能限制整体性能，因为常常包括错误匹配。<strong>为了解决这个问题，本文研究了k-reciprocal neighbors在person re-ID中的重要性，从而设计了一个简单而有效的re-ranking方法。</strong></p>\n<h1 id=\"Proposed-Approach\"><a href=\"#Proposed-Approach\" class=\"headerlink\" title=\"Proposed Approach\"></a>Proposed Approach</h1><h3 id=\"Problem-Definition\"><a href=\"#Problem-Definition\" class=\"headerlink\" title=\"Problem Definition\"></a>Problem Definition</h3><p>给定查询图像<code>p</code>和<code>gallery set</code>（包含N幅图像，<code>G = {gi | i = 1, 2, ...N }</code>），<code>p</code>和<code>gi</code>之间的原始距离可以用马氏距离（Mahalanobis distance）衡量：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTR9jH.png\" alt><br>其中，<code>xp</code>个<code>xg</code>分别代表查询图<code>p</code>和<strong>检测集gallery</strong>中<code>gi</code>的外观特征，<code>M</code>是半正定矩阵。<br>初始排序表：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTRpge.png\" alt><br>可根据<code>probe p</code>和<code>gallery gi</code>之间的成对原始距离得到，其中：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTRPud.png\" alt><br>我们的目标是对<code>L(p,G)</code>进行<strong>re-rank</strong>，使更多的正样本排在<code>top</code>列表中，从而提高person re-ID的性能。</p>\n<h3 id=\"K-reciprocal-Nearest-Neighbors\"><a href=\"#K-reciprocal-Nearest-Neighbors\" class=\"headerlink\" title=\"K -reciprocal Nearest Neighbors\"></a>K -reciprocal Nearest Neighbors</h3><p>我们将<code>N(p,k)</code>定义为一个probe p的k-nearest neighbors（i.e. 排序列表的top-k samples）：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTRFHI.png\" alt><br>其中，<code>|.|</code>表示集合中候选的数目。k-reciprocal nearest neighbors <code>R(p, k)</code>可以定义为：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTRAEt.png\" alt><br><strong>根据前面的描述，k-reciprocal nearest neighbors比k-nearest neighbors和probe p更相关</strong>。然而，由于照明、姿态、视图和遮挡的变化，正样本图像可能被从k-nearest neighbors中排除，并且随后不被包括在k-reciprocal nearest neighbors中。为了解决这个问题，我们根据以下条件将<code>R(p，k)</code>中每个候选项的<code>1/2 k-reciprocal nearest neighbors</code>增量地添加到更鲁棒的集合<code>R*(p，k)</code>中：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTRiDA.png\" alt></p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>在本文中，我们解决person re-ID的re-ranking问题。通过将k-reciprocal nearest neighbors编码为单个向量，我们提出了k-reciprocal特征，从而可以通过向量比较容易地执行re-ranking过程。为了从相似样本中获取相似关系，提出了局部扩展查询（local expansion query）以获得更鲁棒的k-reciprocal特征。基于原始距离和Jaccard距离的组合的最终距离有效地提高了多个大规模数据集上的re-ID性能。值得一提的是，我们的方法是全自动和无监督的，并且可以很容易地实现任何ranking结果。</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<p><strong>CVPR2017</strong></p>\n<h1 id=\"Re-ranking-Person-Re-identification-with-k-reciprocal-Encoding\"><a href=\"#Re-ranking-Person-Re-identification-with-k-reciprocal-Encoding\" class=\"headerlink\" title=\"Re-ranking Person Re-identification with k-reciprocal Encoding\"></a><strong>Re-ranking Person Re-identification with k-reciprocal Encoding</strong></h1><p><img src=\"https://s1.ax1x.com/2022/09/05/vTREUP.png\" alt></p>\n<h1 id=\"Abstract\"><a href=\"#Abstract\" class=\"headerlink\" title=\"Abstract\"></a>Abstract</h1><p>当将person re-ID看作一个检索过程时，re-ranking是提高其准确性的关键步骤。然而，在re-ID社区中，对re-ranking的努力有限，尤其是那些全自动、无监督的解决方案。在本文中，我们提出了一种k-reciprocal编码方法来re-ranking re-ID的结果。我们的假设是，如果一个gallery图像与k-reciprocal nearest neighbors中的probe查询相似，则更有可能是真正的匹配。具体地，给定图像，通过将其k-reciprocal nearest neighbors编码为单个向量来计算k-reciprocal特征，该向量用于在杰卡德距离（Jaccard Distance：用来衡量两个集合差异性的一种指标）下re-ranking。最终的距离计算为原始距离和杰卡德距离的组合。我们的re-ranking方法不需要任何人工交互或任何标记数据，因此适用于大规模数据集。在大型Market-1501、CUHK03、MARS和PRW数据集上的实验证实了我们方法的有效性。</p>\n<hr>\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>person re-ID是计算机视觉中的一个具有挑战性的课题。一般来说，re-ID可以被看作是一个检索问题。给定一个probe person，我们希望在gallery中搜索包含处于跨相机模式下的相同行人的图像。在获得初始排序列表之后，好的实践包括添加re-ranking步骤，期望相关图像将获得更高的排名。因此，本文将重点放在re-ranking问题上。</p>\n<p>re-ranking主要是在通用实例检索generic instance retrieval[5、14、34、35]中进行研究。许多re-ranking主方法的主要优点是它可以在不需要额外训练样本的情况下实现，并且可以应用于任何初始ranking结果。</p>\n<p>re-ranking的有效性在很大程度上取决于初始ranking列表initial ranking list的质量。许多先前的工作利用了初始排序列表[5，14，34，35，43，44]中排名靠前的图像(例如k-最近邻，k-nearest neighbors)之间的相似关系。一个基本的假设是，如果返回的图像在probe的k个最近邻内排序，那么它很可能是一个真正的匹配，可用于随后的re-ranking。然而，情况可能偏离最佳情况：错误匹配很可能包括在probe的k个最近邻中。例如，在图1中，P1、P2、P3和P4是4个查询图probe的真实匹配，但是它们都不包括在top-4中。我们观察到一些错误匹配（N1-N6）获得高排名。结果，直接使用top-k的图像可能在re-ranking系统中引入噪声并损害最终结果。<br><img src=\"https://s1.ax1x.com/2022/09/05/vTReC8.png\" alt><br>在文献中，k-reciprocal nearest neighbor[14，34]是解决上述问题的有效方法，即被错误匹配污染的top-k图像。当两个图像被称为k-reciprocal nearest neighbor时，当另一个图像作为probe时，它们都被排到top-k。因此，k-reciprocal nearest neighbor作为两个图像是否正确匹配的更严格规则。在图1中，我们观察到probe是正确匹配图像的reciprocal neighbor，而不是错误匹配图像的reciprocal neighbor。该观察识别初始排序列表initial ranking list中的正确匹配，以改善重新排序re-ranking结果。</p>\n<p>基于以上考虑，本文提出了一种基于k-reciprocal编码的re-ID re-ranking方法。我们的方法包括三个步骤。首先，将加权的k-reciprocal neighbor 集编码为一个向量，形成k-reciprocal特征。然后，两个图像之间的Jaccard距离可以通过它们的k-reciprocal特征来计算。其次，为了获得更鲁棒的k-reciprocal特征，我们改进了一种局部查询扩展方法（a local query expansion approach），以进一步改善re-ID性能。最后，最终距离的计算为原始距离和Jaccard距离的加权集合。随后，它被用来获取re-ranking列表。所提出的方法的框架如图2所示。综上所述，本文的贡献是：</p>\n<ol>\n<li>我们提出了一个k-reciprocal特征通过编码k-reciprocal特征到一个单一的向量。重re-ranking过程可以很容易地通过向量比较来执行。</li>\n<li>我们的方法不需要任何人工交互或带标注的数据，并且可以自动和无监督的方式应用于任何人person re-ID ranking结果。</li>\n<li>该方法有效地提高了Market-1501、CUHK03、MARS和PRW等数据集上的person re-ID性能。特别地，我们在rank-1和mAP上实现了Market-1501的最先进的精度。<br><img src=\"https://s1.ax1x.com/2022/09/05/vTRV4f.png\" alt></li>\n</ol>\n<h1 id=\"Related-Work\"><a href=\"#Related-Work\" class=\"headerlink\" title=\"Related Work\"></a>Related Work</h1><p>我们推荐感兴趣的读者阅读[3，50]以详细回顾person re-ID。在此，我们重点研究用于目标检索，特别是用于re-ID的re-ranking方法。</p>\n<p><strong>Re-ranking for object retrieval.</strong><br>Re-ranking方法已被成功地研究以提高目标检索精度[51]。许多工作利用k-nearest neighbors来探索相似关系来解决re-ranking问题。[5]提出了average query expansion (AQE)方法，该方法通过对top-k返回结果中的向量进行平均，得到一个新的查询向量（query vector），用于对数据库进行重新查询。为了利用远离查询图像的负样本，Arandjelović和Zisserman[1]改进了discriminative query expansion (DQE)，使用线性SVM来获得权重向量。从决策边界的距离被用来修改初始排序表（initial ranking list）。[35]利用初始排序表的k-nearest neighbors作为新查询（queries）来生成新的排序表。每个图像的新得分根据其在产生的排序表中的位置来计算。最近，稀疏上下文激活sparse contextual activation (SCA)[2]提出将neighbor set编码为向量，并通过广义Jaccard距离来表示样本的相似性。为了防止错误匹配对top-k图像的污染，[14，34]中采用了k-reciprocal nearest neighbors的概念。在[14]中提出了上下文不相似性度量contextual dissimilarity measure (CDM)，通过迭代正则化每个点到其邻域的平均距离来细化相似性。[34]正式提出k-reciprocal nearest neighbors的概念。k-reciprocal nearest neighbors被认为是高度相关的候选，用于构造闭集（closed set）以re-ranking数据集的其余部分。我们的工作从两个方面背离了这两个方法。我们不像文献[14]那样对最近邻（nearest neighborhood）关系进行对称化来细化相似度，也不像文献[34]那样直接将k-reciprocal nearest neighbors看作高阶样本。相反，我们通过比较两幅图像的k-reciprocal nearest neighbors来计算它们之间的新距离。</p>\n<p><strong>Re-ranking for re-ID.</strong><br>大多数现有的person re-ID方法主要集中于特征表示[41，12，23，48，21]或度量学习[23，17，9，32，45]。最近，一些研究者[10，33，28，24，49，20，11，19，42，44]已经注意到在re-ID社区中基于re-ranking的方法。[20]通过分析每对图像的近邻（near neighbors）的相关信息和直接信息，建立re-ranking模型。在[11]中，通过联合考虑排序列表中的内容和上下文信息，学习无监督的重新排序模型，有效地去除了模糊样本，提高了re-ID的性能。[19]提出一种双向排序（bidirectional ranking）方法，利用计算得到的新相似度作为内容相似度和上下文相似度的融合，对初始排序表进行修正。最近，利用不同基线（different baseline）方法的公共最近邻来re-ranking任务[42，44]。[42]将全局特征和局部特征的公共最近邻作为新查询（queries），通过集合全局特征和局部特征的新排序列表来修改初始排序列表。在[44]中，利用k-nearest neighbor set从不同的baseline方法计算相似度和不相似度，然后进行相似度和不相似度的集合来优化初始排序表。上述方法在re-ranking方面继续取得进展，有望为将来从k-nearest neighbors发现进一步的信息作出贡献。然而，使用k-nearest neighbors直接实现re-ranking可能限制整体性能，因为常常包括错误匹配。<strong>为了解决这个问题，本文研究了k-reciprocal neighbors在person re-ID中的重要性，从而设计了一个简单而有效的re-ranking方法。</strong></p>\n<h1 id=\"Proposed-Approach\"><a href=\"#Proposed-Approach\" class=\"headerlink\" title=\"Proposed Approach\"></a>Proposed Approach</h1><h3 id=\"Problem-Definition\"><a href=\"#Problem-Definition\" class=\"headerlink\" title=\"Problem Definition\"></a>Problem Definition</h3><p>给定查询图像<code>p</code>和<code>gallery set</code>（包含N幅图像，<code>G = {gi | i = 1, 2, ...N }</code>），<code>p</code>和<code>gi</code>之间的原始距离可以用马氏距离（Mahalanobis distance）衡量：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTR9jH.png\" alt><br>其中，<code>xp</code>个<code>xg</code>分别代表查询图<code>p</code>和<strong>检测集gallery</strong>中<code>gi</code>的外观特征，<code>M</code>是半正定矩阵。<br>初始排序表：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTRpge.png\" alt><br>可根据<code>probe p</code>和<code>gallery gi</code>之间的成对原始距离得到，其中：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTRPud.png\" alt><br>我们的目标是对<code>L(p,G)</code>进行<strong>re-rank</strong>，使更多的正样本排在<code>top</code>列表中，从而提高person re-ID的性能。</p>\n<h3 id=\"K-reciprocal-Nearest-Neighbors\"><a href=\"#K-reciprocal-Nearest-Neighbors\" class=\"headerlink\" title=\"K -reciprocal Nearest Neighbors\"></a>K -reciprocal Nearest Neighbors</h3><p>我们将<code>N(p,k)</code>定义为一个probe p的k-nearest neighbors（i.e. 排序列表的top-k samples）：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTRFHI.png\" alt><br>其中，<code>|.|</code>表示集合中候选的数目。k-reciprocal nearest neighbors <code>R(p, k)</code>可以定义为：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTRAEt.png\" alt><br><strong>根据前面的描述，k-reciprocal nearest neighbors比k-nearest neighbors和probe p更相关</strong>。然而，由于照明、姿态、视图和遮挡的变化，正样本图像可能被从k-nearest neighbors中排除，并且随后不被包括在k-reciprocal nearest neighbors中。为了解决这个问题，我们根据以下条件将<code>R(p，k)</code>中每个候选项的<code>1/2 k-reciprocal nearest neighbors</code>增量地添加到更鲁棒的集合<code>R*(p，k)</code>中：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTRiDA.png\" alt></p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>在本文中，我们解决person re-ID的re-ranking问题。通过将k-reciprocal nearest neighbors编码为单个向量，我们提出了k-reciprocal特征，从而可以通过向量比较容易地执行re-ranking过程。为了从相似样本中获取相似关系，提出了局部扩展查询（local expansion query）以获得更鲁棒的k-reciprocal特征。基于原始距离和Jaccard距离的组合的最终距离有效地提高了多个大规模数据集上的re-ID性能。值得一提的是，我们的方法是全自动和无监督的，并且可以很容易地实现任何ranking结果。</p>\n"},{"title":"关于激活函数的理解","date":"2018-08-18T16:00:00.000Z","_content":"\n# 什么是激活函数：\n\n下午学完了神经网络误差的反向传播，心满意足看着满屏幕刚撸出来的Affine,Sigmoid,ReLU,Softmax......突然,心里发出一声疑问：**激活函数有什么用？？？**我慌了，我说不上来，但是隐隐约约能知道这玩意是干嘛的，本着一贯~~刨根问底跑个稀烂~~的作风,我决定彻底搞清楚！\n\n## 引例\n首先回到机器学习最初始的那个地方-----**逻辑门（感知机表示）**\n```python\n#与门感知机\n\ndef AND(x1,x2):\n    w1,w2,theta=0.5,0.5,0.7\n    tmp=x1*w1+x2*w2\n    if tmp<=theta:\n        return 0\n    elif tmp>theta:\n        return 1\n    \n#Test\nAND(0,0)  #输出0\nAND(1,0)  #输出0\nAND(0,1)  #输出0\nAND(1,1)  #输出1\n```\n```python\n#或门感知机\n\ndef OR(x1,x2):\n    w1,w2,theta=0.5,0.5,0.2\n    tmp=x1*w1+x2*w2\n    if tmp<=theta:\n        return 0\n    elif tmp>theta:\n        return 1\n    \n#Test\nOR(0,0)  #输出0\nOR(1,0)  #输出1\nOR(0,1)  #输出1\nOR(1,1)  #输出1\n```\n```python\n#与非门感知机\n\ndef NAND(x1,x2):\n    w1,w2,theta=0.5,0.5,0.7\n    tmp=x1*w1+x2*w2\n    if tmp<=theta:\n        return 1\n    elif tmp>theta:\n        return 0\n\n#Test\nXOR(0,0)  #输出1\nXOR(1,0)  #输出1\nXOR(0,1)  #输出1\nXOR(1,1)  #输出0\n```\n毫无技术含量，所以这里就不细讲代码。\n\n**接下来看看如何表示异或门：**\n```python\ndef XOR(x1,x2):\n    s1=NAND(x1,x2)\n    s2=OR(x1,x2)\n    y=AND(s1,s2)\n    return y\n\nXOR(0,0)   #输出0\nXOR(1,0)   #输出1\nXOR(0,1)   #输出1\nXOR(1,1)   #输出0\n```\n显然异或门的实现借助了另外三个门！\n下面从**几何角度**上看看异或门：\n![异或门区域](https://s1.ax1x.com/2022/09/05/vTW3sH.png \"markdown\")\n**显然：异或门划分的空间是非线性的！而另外三个门划分都是线性的！**\n\n现在再回头思考，发现通过对简单门的叠加，实现了非线性划分空间的复杂门！\n\n## 回到神经网络中\n\n神经网络中，我们知道，隐藏层中主要是Affine层和各种激活函数层：\n![net](https://s1.ax1x.com/2022/09/05/vTW8Ld.png \"markdown\")\n现在假设把激活函数都删掉，也就是说经过一层仿射变换后不加处理继续下一层仿射变换。\n>比如：x->w·x=y->w'·y=z...（矩阵点乘）\n\n这样会有什么问题呢？很显然。\n>注意： x->w·x=y->w'·y=z就相当于z=cx,其中c=w·w'\n\n这说明**两层仿射变换后的表达式结构还是线性的！！**同理n层之后还是线性！这简直是无用功！要记住，神经网络那么多层的目的是尽可能学习如何逼近数据，如果数据是非线性结构排布的，那叠加再多也毫无卵用！\n所以现在再来看看这个问题：**为什么需要激活函数？**\n## 总结一下：\n如果不用激励函数（其实相当于激励函数是f(x) = x），在这种情况下你每一层节点的输入都是上层输出的线性函数，很容易验证，**无论你神经网络有多少层，输出都是输入的线性组合**，与没有隐藏层效果相当，这种情况就是最原始的感知机（Perceptron）了，那么网络的逼近能力就相当有限。正因为上面的原因，我们决定引入非线性函数作为激励函数，这样深层神经网络表达能力就更加强大（不再是输入的线性组合，而是**几乎可以逼近任意函数**）","source":"_posts/激活函数（一）.md","raw":"---\ntitle:  关于激活函数的理解\ntags: [神经网络,激活函数]\n\ncategories: [机器学习]\ndate: 2018-8-19\n---\n\n# 什么是激活函数：\n\n下午学完了神经网络误差的反向传播，心满意足看着满屏幕刚撸出来的Affine,Sigmoid,ReLU,Softmax......突然,心里发出一声疑问：**激活函数有什么用？？？**我慌了，我说不上来，但是隐隐约约能知道这玩意是干嘛的，本着一贯~~刨根问底跑个稀烂~~的作风,我决定彻底搞清楚！\n\n## 引例\n首先回到机器学习最初始的那个地方-----**逻辑门（感知机表示）**\n```python\n#与门感知机\n\ndef AND(x1,x2):\n    w1,w2,theta=0.5,0.5,0.7\n    tmp=x1*w1+x2*w2\n    if tmp<=theta:\n        return 0\n    elif tmp>theta:\n        return 1\n    \n#Test\nAND(0,0)  #输出0\nAND(1,0)  #输出0\nAND(0,1)  #输出0\nAND(1,1)  #输出1\n```\n```python\n#或门感知机\n\ndef OR(x1,x2):\n    w1,w2,theta=0.5,0.5,0.2\n    tmp=x1*w1+x2*w2\n    if tmp<=theta:\n        return 0\n    elif tmp>theta:\n        return 1\n    \n#Test\nOR(0,0)  #输出0\nOR(1,0)  #输出1\nOR(0,1)  #输出1\nOR(1,1)  #输出1\n```\n```python\n#与非门感知机\n\ndef NAND(x1,x2):\n    w1,w2,theta=0.5,0.5,0.7\n    tmp=x1*w1+x2*w2\n    if tmp<=theta:\n        return 1\n    elif tmp>theta:\n        return 0\n\n#Test\nXOR(0,0)  #输出1\nXOR(1,0)  #输出1\nXOR(0,1)  #输出1\nXOR(1,1)  #输出0\n```\n毫无技术含量，所以这里就不细讲代码。\n\n**接下来看看如何表示异或门：**\n```python\ndef XOR(x1,x2):\n    s1=NAND(x1,x2)\n    s2=OR(x1,x2)\n    y=AND(s1,s2)\n    return y\n\nXOR(0,0)   #输出0\nXOR(1,0)   #输出1\nXOR(0,1)   #输出1\nXOR(1,1)   #输出0\n```\n显然异或门的实现借助了另外三个门！\n下面从**几何角度**上看看异或门：\n![异或门区域](https://s1.ax1x.com/2022/09/05/vTW3sH.png \"markdown\")\n**显然：异或门划分的空间是非线性的！而另外三个门划分都是线性的！**\n\n现在再回头思考，发现通过对简单门的叠加，实现了非线性划分空间的复杂门！\n\n## 回到神经网络中\n\n神经网络中，我们知道，隐藏层中主要是Affine层和各种激活函数层：\n![net](https://s1.ax1x.com/2022/09/05/vTW8Ld.png \"markdown\")\n现在假设把激活函数都删掉，也就是说经过一层仿射变换后不加处理继续下一层仿射变换。\n>比如：x->w·x=y->w'·y=z...（矩阵点乘）\n\n这样会有什么问题呢？很显然。\n>注意： x->w·x=y->w'·y=z就相当于z=cx,其中c=w·w'\n\n这说明**两层仿射变换后的表达式结构还是线性的！！**同理n层之后还是线性！这简直是无用功！要记住，神经网络那么多层的目的是尽可能学习如何逼近数据，如果数据是非线性结构排布的，那叠加再多也毫无卵用！\n所以现在再来看看这个问题：**为什么需要激活函数？**\n## 总结一下：\n如果不用激励函数（其实相当于激励函数是f(x) = x），在这种情况下你每一层节点的输入都是上层输出的线性函数，很容易验证，**无论你神经网络有多少层，输出都是输入的线性组合**，与没有隐藏层效果相当，这种情况就是最原始的感知机（Perceptron）了，那么网络的逼近能力就相当有限。正因为上面的原因，我们决定引入非线性函数作为激励函数，这样深层神经网络表达能力就更加强大（不再是输入的线性组合，而是**几乎可以逼近任意函数**）","slug":"激活函数（一）","published":1,"updated":"2022-09-05T06:17:04.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jba13007m7svw5nlo0fab","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"什么是激活函数：\"><a href=\"#什么是激活函数：\" class=\"headerlink\" title=\"什么是激活函数：\"></a>什么是激活函数：</h1><p>下午学完了神经网络误差的反向传播，心满意足看着满屏幕刚撸出来的Affine,Sigmoid,ReLU,Softmax……突然,心里发出一声疑问：<strong>激活函数有什么用？？？</strong>我慌了，我说不上来，但是隐隐约约能知道这玩意是干嘛的，本着一贯<del>刨根问底跑个稀烂</del>的作风,我决定彻底搞清楚！</p>\n<h2 id=\"引例\"><a href=\"#引例\" class=\"headerlink\" title=\"引例\"></a>引例</h2><p>首先回到机器学习最初始的那个地方—–<strong>逻辑门（感知机表示）</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#与门感知机</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">AND</span><span class=\"params\">(x1,x2)</span>:</span></span><br><span class=\"line\">    w1,w2,theta=<span class=\"number\">0.5</span>,<span class=\"number\">0.5</span>,<span class=\"number\">0.7</span></span><br><span class=\"line\">    tmp=x1*w1+x2*w2</span><br><span class=\"line\">    <span class=\"keyword\">if</span> tmp&lt;=theta:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> tmp&gt;theta:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">#Test</span></span><br><span class=\"line\">AND(<span class=\"number\">0</span>,<span class=\"number\">0</span>)  <span class=\"comment\">#输出0</span></span><br><span class=\"line\">AND(<span class=\"number\">1</span>,<span class=\"number\">0</span>)  <span class=\"comment\">#输出0</span></span><br><span class=\"line\">AND(<span class=\"number\">0</span>,<span class=\"number\">1</span>)  <span class=\"comment\">#输出0</span></span><br><span class=\"line\">AND(<span class=\"number\">1</span>,<span class=\"number\">1</span>)  <span class=\"comment\">#输出1</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#或门感知机</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">OR</span><span class=\"params\">(x1,x2)</span>:</span></span><br><span class=\"line\">    w1,w2,theta=<span class=\"number\">0.5</span>,<span class=\"number\">0.5</span>,<span class=\"number\">0.2</span></span><br><span class=\"line\">    tmp=x1*w1+x2*w2</span><br><span class=\"line\">    <span class=\"keyword\">if</span> tmp&lt;=theta:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> tmp&gt;theta:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">#Test</span></span><br><span class=\"line\">OR(<span class=\"number\">0</span>,<span class=\"number\">0</span>)  <span class=\"comment\">#输出0</span></span><br><span class=\"line\">OR(<span class=\"number\">1</span>,<span class=\"number\">0</span>)  <span class=\"comment\">#输出1</span></span><br><span class=\"line\">OR(<span class=\"number\">0</span>,<span class=\"number\">1</span>)  <span class=\"comment\">#输出1</span></span><br><span class=\"line\">OR(<span class=\"number\">1</span>,<span class=\"number\">1</span>)  <span class=\"comment\">#输出1</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#与非门感知机</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">NAND</span><span class=\"params\">(x1,x2)</span>:</span></span><br><span class=\"line\">    w1,w2,theta=<span class=\"number\">0.5</span>,<span class=\"number\">0.5</span>,<span class=\"number\">0.7</span></span><br><span class=\"line\">    tmp=x1*w1+x2*w2</span><br><span class=\"line\">    <span class=\"keyword\">if</span> tmp&lt;=theta:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> tmp&gt;theta:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Test</span></span><br><span class=\"line\">XOR(<span class=\"number\">0</span>,<span class=\"number\">0</span>)  <span class=\"comment\">#输出1</span></span><br><span class=\"line\">XOR(<span class=\"number\">1</span>,<span class=\"number\">0</span>)  <span class=\"comment\">#输出1</span></span><br><span class=\"line\">XOR(<span class=\"number\">0</span>,<span class=\"number\">1</span>)  <span class=\"comment\">#输出1</span></span><br><span class=\"line\">XOR(<span class=\"number\">1</span>,<span class=\"number\">1</span>)  <span class=\"comment\">#输出0</span></span><br></pre></td></tr></table></figure>\n\n<p>毫无技术含量，所以这里就不细讲代码。</p>\n<p><strong>接下来看看如何表示异或门：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">XOR</span><span class=\"params\">(x1,x2)</span>:</span></span><br><span class=\"line\">    s1=NAND(x1,x2)</span><br><span class=\"line\">    s2=OR(x1,x2)</span><br><span class=\"line\">    y=AND(s1,s2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y</span><br><span class=\"line\"></span><br><span class=\"line\">XOR(<span class=\"number\">0</span>,<span class=\"number\">0</span>)   <span class=\"comment\">#输出0</span></span><br><span class=\"line\">XOR(<span class=\"number\">1</span>,<span class=\"number\">0</span>)   <span class=\"comment\">#输出1</span></span><br><span class=\"line\">XOR(<span class=\"number\">0</span>,<span class=\"number\">1</span>)   <span class=\"comment\">#输出1</span></span><br><span class=\"line\">XOR(<span class=\"number\">1</span>,<span class=\"number\">1</span>)   <span class=\"comment\">#输出0</span></span><br></pre></td></tr></table></figure>\n\n<p>显然异或门的实现借助了另外三个门！<br>下面从<strong>几何角度</strong>上看看异或门：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTW3sH.png\" alt=\"异或门区域\" title=\"markdown\"><br><strong>显然：异或门划分的空间是非线性的！而另外三个门划分都是线性的！</strong></p>\n<p>现在再回头思考，发现通过对简单门的叠加，实现了非线性划分空间的复杂门！</p>\n<h2 id=\"回到神经网络中\"><a href=\"#回到神经网络中\" class=\"headerlink\" title=\"回到神经网络中\"></a>回到神经网络中</h2><p>神经网络中，我们知道，隐藏层中主要是Affine层和各种激活函数层：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTW8Ld.png\" alt=\"net\" title=\"markdown\"><br>现在假设把激活函数都删掉，也就是说经过一层仿射变换后不加处理继续下一层仿射变换。</p>\n<blockquote>\n<p>比如：x-&gt;w·x=y-&gt;w’·y=z…（矩阵点乘）</p>\n</blockquote>\n<p>这样会有什么问题呢？很显然。</p>\n<blockquote>\n<p>注意： x-&gt;w·x=y-&gt;w’·y=z就相当于z=cx,其中c=w·w’</p>\n</blockquote>\n<p>这说明<strong>两层仿射变换后的表达式结构还是线性的！！</strong>同理n层之后还是线性！这简直是无用功！要记住，神经网络那么多层的目的是尽可能学习如何逼近数据，如果数据是非线性结构排布的，那叠加再多也毫无卵用！<br>所以现在再来看看这个问题：<strong>为什么需要激活函数？</strong></p>\n<h2 id=\"总结一下：\"><a href=\"#总结一下：\" class=\"headerlink\" title=\"总结一下：\"></a>总结一下：</h2><p>如果不用激励函数（其实相当于激励函数是f(x) = x），在这种情况下你每一层节点的输入都是上层输出的线性函数，很容易验证，<strong>无论你神经网络有多少层，输出都是输入的线性组合</strong>，与没有隐藏层效果相当，这种情况就是最原始的感知机（Perceptron）了，那么网络的逼近能力就相当有限。正因为上面的原因，我们决定引入非线性函数作为激励函数，这样深层神经网络表达能力就更加强大（不再是输入的线性组合，而是<strong>几乎可以逼近任意函数</strong>）</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"什么是激活函数：\"><a href=\"#什么是激活函数：\" class=\"headerlink\" title=\"什么是激活函数：\"></a>什么是激活函数：</h1><p>下午学完了神经网络误差的反向传播，心满意足看着满屏幕刚撸出来的Affine,Sigmoid,ReLU,Softmax……突然,心里发出一声疑问：<strong>激活函数有什么用？？？</strong>我慌了，我说不上来，但是隐隐约约能知道这玩意是干嘛的，本着一贯<del>刨根问底跑个稀烂</del>的作风,我决定彻底搞清楚！</p>\n<h2 id=\"引例\"><a href=\"#引例\" class=\"headerlink\" title=\"引例\"></a>引例</h2><p>首先回到机器学习最初始的那个地方—–<strong>逻辑门（感知机表示）</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#与门感知机</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">AND</span><span class=\"params\">(x1,x2)</span>:</span></span><br><span class=\"line\">    w1,w2,theta=<span class=\"number\">0.5</span>,<span class=\"number\">0.5</span>,<span class=\"number\">0.7</span></span><br><span class=\"line\">    tmp=x1*w1+x2*w2</span><br><span class=\"line\">    <span class=\"keyword\">if</span> tmp&lt;=theta:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> tmp&gt;theta:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">#Test</span></span><br><span class=\"line\">AND(<span class=\"number\">0</span>,<span class=\"number\">0</span>)  <span class=\"comment\">#输出0</span></span><br><span class=\"line\">AND(<span class=\"number\">1</span>,<span class=\"number\">0</span>)  <span class=\"comment\">#输出0</span></span><br><span class=\"line\">AND(<span class=\"number\">0</span>,<span class=\"number\">1</span>)  <span class=\"comment\">#输出0</span></span><br><span class=\"line\">AND(<span class=\"number\">1</span>,<span class=\"number\">1</span>)  <span class=\"comment\">#输出1</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#或门感知机</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">OR</span><span class=\"params\">(x1,x2)</span>:</span></span><br><span class=\"line\">    w1,w2,theta=<span class=\"number\">0.5</span>,<span class=\"number\">0.5</span>,<span class=\"number\">0.2</span></span><br><span class=\"line\">    tmp=x1*w1+x2*w2</span><br><span class=\"line\">    <span class=\"keyword\">if</span> tmp&lt;=theta:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> tmp&gt;theta:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">#Test</span></span><br><span class=\"line\">OR(<span class=\"number\">0</span>,<span class=\"number\">0</span>)  <span class=\"comment\">#输出0</span></span><br><span class=\"line\">OR(<span class=\"number\">1</span>,<span class=\"number\">0</span>)  <span class=\"comment\">#输出1</span></span><br><span class=\"line\">OR(<span class=\"number\">0</span>,<span class=\"number\">1</span>)  <span class=\"comment\">#输出1</span></span><br><span class=\"line\">OR(<span class=\"number\">1</span>,<span class=\"number\">1</span>)  <span class=\"comment\">#输出1</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#与非门感知机</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">NAND</span><span class=\"params\">(x1,x2)</span>:</span></span><br><span class=\"line\">    w1,w2,theta=<span class=\"number\">0.5</span>,<span class=\"number\">0.5</span>,<span class=\"number\">0.7</span></span><br><span class=\"line\">    tmp=x1*w1+x2*w2</span><br><span class=\"line\">    <span class=\"keyword\">if</span> tmp&lt;=theta:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> tmp&gt;theta:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Test</span></span><br><span class=\"line\">XOR(<span class=\"number\">0</span>,<span class=\"number\">0</span>)  <span class=\"comment\">#输出1</span></span><br><span class=\"line\">XOR(<span class=\"number\">1</span>,<span class=\"number\">0</span>)  <span class=\"comment\">#输出1</span></span><br><span class=\"line\">XOR(<span class=\"number\">0</span>,<span class=\"number\">1</span>)  <span class=\"comment\">#输出1</span></span><br><span class=\"line\">XOR(<span class=\"number\">1</span>,<span class=\"number\">1</span>)  <span class=\"comment\">#输出0</span></span><br></pre></td></tr></table></figure>\n\n<p>毫无技术含量，所以这里就不细讲代码。</p>\n<p><strong>接下来看看如何表示异或门：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">XOR</span><span class=\"params\">(x1,x2)</span>:</span></span><br><span class=\"line\">    s1=NAND(x1,x2)</span><br><span class=\"line\">    s2=OR(x1,x2)</span><br><span class=\"line\">    y=AND(s1,s2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y</span><br><span class=\"line\"></span><br><span class=\"line\">XOR(<span class=\"number\">0</span>,<span class=\"number\">0</span>)   <span class=\"comment\">#输出0</span></span><br><span class=\"line\">XOR(<span class=\"number\">1</span>,<span class=\"number\">0</span>)   <span class=\"comment\">#输出1</span></span><br><span class=\"line\">XOR(<span class=\"number\">0</span>,<span class=\"number\">1</span>)   <span class=\"comment\">#输出1</span></span><br><span class=\"line\">XOR(<span class=\"number\">1</span>,<span class=\"number\">1</span>)   <span class=\"comment\">#输出0</span></span><br></pre></td></tr></table></figure>\n\n<p>显然异或门的实现借助了另外三个门！<br>下面从<strong>几何角度</strong>上看看异或门：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTW3sH.png\" alt=\"异或门区域\" title=\"markdown\"><br><strong>显然：异或门划分的空间是非线性的！而另外三个门划分都是线性的！</strong></p>\n<p>现在再回头思考，发现通过对简单门的叠加，实现了非线性划分空间的复杂门！</p>\n<h2 id=\"回到神经网络中\"><a href=\"#回到神经网络中\" class=\"headerlink\" title=\"回到神经网络中\"></a>回到神经网络中</h2><p>神经网络中，我们知道，隐藏层中主要是Affine层和各种激活函数层：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTW8Ld.png\" alt=\"net\" title=\"markdown\"><br>现在假设把激活函数都删掉，也就是说经过一层仿射变换后不加处理继续下一层仿射变换。</p>\n<blockquote>\n<p>比如：x-&gt;w·x=y-&gt;w’·y=z…（矩阵点乘）</p>\n</blockquote>\n<p>这样会有什么问题呢？很显然。</p>\n<blockquote>\n<p>注意： x-&gt;w·x=y-&gt;w’·y=z就相当于z=cx,其中c=w·w’</p>\n</blockquote>\n<p>这说明<strong>两层仿射变换后的表达式结构还是线性的！！</strong>同理n层之后还是线性！这简直是无用功！要记住，神经网络那么多层的目的是尽可能学习如何逼近数据，如果数据是非线性结构排布的，那叠加再多也毫无卵用！<br>所以现在再来看看这个问题：<strong>为什么需要激活函数？</strong></p>\n<h2 id=\"总结一下：\"><a href=\"#总结一下：\" class=\"headerlink\" title=\"总结一下：\"></a>总结一下：</h2><p>如果不用激励函数（其实相当于激励函数是f(x) = x），在这种情况下你每一层节点的输入都是上层输出的线性函数，很容易验证，<strong>无论你神经网络有多少层，输出都是输入的线性组合</strong>，与没有隐藏层效果相当，这种情况就是最原始的感知机（Perceptron）了，那么网络的逼近能力就相当有限。正因为上面的原因，我们决定引入非线性函数作为激励函数，这样深层神经网络表达能力就更加强大（不再是输入的线性组合，而是<strong>几乎可以逼近任意函数</strong>）</p>\n"},{"title":"简单的3层神经网络实现","date":"2018-08-18T16:00:00.000Z","_content":"\n## 使用sigmoid作为激活函数的极简3层神经网络(前向)范例\n### 导入numpy库\n```python\n    import numpy as np\n```\n### 定义sigmoid函数\n```python\n    def sigmoid(x):\n        return 1/(1+np.exp(-x))\n```\n### 初始化神经网络\n```python\n    def init_network():\n        network={}\n        network['w1']=np.array([[0.1,0.3,0.5],[0.2,0.4,0.6]])\n        network['w2']=np.array([[0.1,0.4],[0.2,0.5],[0.3,0.6]])\n        network['w3']=np.array([[0.1,0.3],[0.2,0.4]])\n        network['b1']=np.array([0.1,0.2,0.3])\n        network['b2']=np.array([0.1,0.2])\n        network['b3']=np.array([0.1,0.2])\n        return network\n```\n### 定义神经网络\n```python\n    def forward(network,x):\n        w1,w2,w3=network['w1'],network['w2'],network['w3']\n        b1,b2,b3=network['b1'],network['b2'],network['b3']\n        \n        a1=np.dot(x,w1)+b1\n        z1=sigmoid(a1)\n        a2=np.dot(z1,w2)+b2\n        z2=sigmoid(a2)\n        a3=np.dot(z2,w3)+b3\n        y=a3\n        return y\n```\n### 执行\n```python\t\n    network=init_network()\n    x=np.array([1.0,0.5])\n    y=forward(network,x)\n    print(y)import numpy as np\n```\n![神经网络](https://s1.ax1x.com/2022/09/05/vTWyes.jpg \"神经网络\")","source":"_posts/简单的3层神经网络实现.md","raw":"---\ntitle: 简单的3层神经网络实现\ntags: [神经网络,python]\n\ncategories: [机器学习]\ndate: 2018-8-19\n---\n\n## 使用sigmoid作为激活函数的极简3层神经网络(前向)范例\n### 导入numpy库\n```python\n    import numpy as np\n```\n### 定义sigmoid函数\n```python\n    def sigmoid(x):\n        return 1/(1+np.exp(-x))\n```\n### 初始化神经网络\n```python\n    def init_network():\n        network={}\n        network['w1']=np.array([[0.1,0.3,0.5],[0.2,0.4,0.6]])\n        network['w2']=np.array([[0.1,0.4],[0.2,0.5],[0.3,0.6]])\n        network['w3']=np.array([[0.1,0.3],[0.2,0.4]])\n        network['b1']=np.array([0.1,0.2,0.3])\n        network['b2']=np.array([0.1,0.2])\n        network['b3']=np.array([0.1,0.2])\n        return network\n```\n### 定义神经网络\n```python\n    def forward(network,x):\n        w1,w2,w3=network['w1'],network['w2'],network['w3']\n        b1,b2,b3=network['b1'],network['b2'],network['b3']\n        \n        a1=np.dot(x,w1)+b1\n        z1=sigmoid(a1)\n        a2=np.dot(z1,w2)+b2\n        z2=sigmoid(a2)\n        a3=np.dot(z2,w3)+b3\n        y=a3\n        return y\n```\n### 执行\n```python\t\n    network=init_network()\n    x=np.array([1.0,0.5])\n    y=forward(network,x)\n    print(y)import numpy as np\n```\n![神经网络](https://s1.ax1x.com/2022/09/05/vTWyes.jpg \"神经网络\")","slug":"简单的3层神经网络实现","published":1,"updated":"2022-09-05T06:18:21.459Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jba15007r7svw7q9b4u7s","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"使用sigmoid作为激活函数的极简3层神经网络-前向-范例\"><a href=\"#使用sigmoid作为激活函数的极简3层神经网络-前向-范例\" class=\"headerlink\" title=\"使用sigmoid作为激活函数的极简3层神经网络(前向)范例\"></a>使用sigmoid作为激活函数的极简3层神经网络(前向)范例</h2><h3 id=\"导入numpy库\"><a href=\"#导入numpy库\" class=\"headerlink\" title=\"导入numpy库\"></a>导入numpy库</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义sigmoid函数\"><a href=\"#定义sigmoid函数\" class=\"headerlink\" title=\"定义sigmoid函数\"></a>定义sigmoid函数</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sigmoid</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>/(<span class=\"number\">1</span>+np.exp(-x))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"初始化神经网络\"><a href=\"#初始化神经网络\" class=\"headerlink\" title=\"初始化神经网络\"></a>初始化神经网络</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_network</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    network=&#123;&#125;</span><br><span class=\"line\">    network[<span class=\"string\">'w1'</span>]=np.array([[<span class=\"number\">0.1</span>,<span class=\"number\">0.3</span>,<span class=\"number\">0.5</span>],[<span class=\"number\">0.2</span>,<span class=\"number\">0.4</span>,<span class=\"number\">0.6</span>]])</span><br><span class=\"line\">    network[<span class=\"string\">'w2'</span>]=np.array([[<span class=\"number\">0.1</span>,<span class=\"number\">0.4</span>],[<span class=\"number\">0.2</span>,<span class=\"number\">0.5</span>],[<span class=\"number\">0.3</span>,<span class=\"number\">0.6</span>]])</span><br><span class=\"line\">    network[<span class=\"string\">'w3'</span>]=np.array([[<span class=\"number\">0.1</span>,<span class=\"number\">0.3</span>],[<span class=\"number\">0.2</span>,<span class=\"number\">0.4</span>]])</span><br><span class=\"line\">    network[<span class=\"string\">'b1'</span>]=np.array([<span class=\"number\">0.1</span>,<span class=\"number\">0.2</span>,<span class=\"number\">0.3</span>])</span><br><span class=\"line\">    network[<span class=\"string\">'b2'</span>]=np.array([<span class=\"number\">0.1</span>,<span class=\"number\">0.2</span>])</span><br><span class=\"line\">    network[<span class=\"string\">'b3'</span>]=np.array([<span class=\"number\">0.1</span>,<span class=\"number\">0.2</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> network</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义神经网络\"><a href=\"#定义神经网络\" class=\"headerlink\" title=\"定义神经网络\"></a>定义神经网络</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span><span class=\"params\">(network,x)</span>:</span></span><br><span class=\"line\">    w1,w2,w3=network[<span class=\"string\">'w1'</span>],network[<span class=\"string\">'w2'</span>],network[<span class=\"string\">'w3'</span>]</span><br><span class=\"line\">    b1,b2,b3=network[<span class=\"string\">'b1'</span>],network[<span class=\"string\">'b2'</span>],network[<span class=\"string\">'b3'</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    a1=np.dot(x,w1)+b1</span><br><span class=\"line\">    z1=sigmoid(a1)</span><br><span class=\"line\">    a2=np.dot(z1,w2)+b2</span><br><span class=\"line\">    z2=sigmoid(a2)</span><br><span class=\"line\">    a3=np.dot(z2,w3)+b3</span><br><span class=\"line\">    y=a3</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">network=init_network()</span><br><span class=\"line\">x=np.array([<span class=\"number\">1.0</span>,<span class=\"number\">0.5</span>])</span><br><span class=\"line\">y=forward(network,x)</span><br><span class=\"line\">print(y)<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s1.ax1x.com/2022/09/05/vTWyes.jpg\" alt=\"神经网络\" title=\"神经网络\"></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h2 id=\"使用sigmoid作为激活函数的极简3层神经网络-前向-范例\"><a href=\"#使用sigmoid作为激活函数的极简3层神经网络-前向-范例\" class=\"headerlink\" title=\"使用sigmoid作为激活函数的极简3层神经网络(前向)范例\"></a>使用sigmoid作为激活函数的极简3层神经网络(前向)范例</h2><h3 id=\"导入numpy库\"><a href=\"#导入numpy库\" class=\"headerlink\" title=\"导入numpy库\"></a>导入numpy库</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义sigmoid函数\"><a href=\"#定义sigmoid函数\" class=\"headerlink\" title=\"定义sigmoid函数\"></a>定义sigmoid函数</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sigmoid</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>/(<span class=\"number\">1</span>+np.exp(-x))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"初始化神经网络\"><a href=\"#初始化神经网络\" class=\"headerlink\" title=\"初始化神经网络\"></a>初始化神经网络</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_network</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    network=&#123;&#125;</span><br><span class=\"line\">    network[<span class=\"string\">'w1'</span>]=np.array([[<span class=\"number\">0.1</span>,<span class=\"number\">0.3</span>,<span class=\"number\">0.5</span>],[<span class=\"number\">0.2</span>,<span class=\"number\">0.4</span>,<span class=\"number\">0.6</span>]])</span><br><span class=\"line\">    network[<span class=\"string\">'w2'</span>]=np.array([[<span class=\"number\">0.1</span>,<span class=\"number\">0.4</span>],[<span class=\"number\">0.2</span>,<span class=\"number\">0.5</span>],[<span class=\"number\">0.3</span>,<span class=\"number\">0.6</span>]])</span><br><span class=\"line\">    network[<span class=\"string\">'w3'</span>]=np.array([[<span class=\"number\">0.1</span>,<span class=\"number\">0.3</span>],[<span class=\"number\">0.2</span>,<span class=\"number\">0.4</span>]])</span><br><span class=\"line\">    network[<span class=\"string\">'b1'</span>]=np.array([<span class=\"number\">0.1</span>,<span class=\"number\">0.2</span>,<span class=\"number\">0.3</span>])</span><br><span class=\"line\">    network[<span class=\"string\">'b2'</span>]=np.array([<span class=\"number\">0.1</span>,<span class=\"number\">0.2</span>])</span><br><span class=\"line\">    network[<span class=\"string\">'b3'</span>]=np.array([<span class=\"number\">0.1</span>,<span class=\"number\">0.2</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> network</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义神经网络\"><a href=\"#定义神经网络\" class=\"headerlink\" title=\"定义神经网络\"></a>定义神经网络</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span><span class=\"params\">(network,x)</span>:</span></span><br><span class=\"line\">    w1,w2,w3=network[<span class=\"string\">'w1'</span>],network[<span class=\"string\">'w2'</span>],network[<span class=\"string\">'w3'</span>]</span><br><span class=\"line\">    b1,b2,b3=network[<span class=\"string\">'b1'</span>],network[<span class=\"string\">'b2'</span>],network[<span class=\"string\">'b3'</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    a1=np.dot(x,w1)+b1</span><br><span class=\"line\">    z1=sigmoid(a1)</span><br><span class=\"line\">    a2=np.dot(z1,w2)+b2</span><br><span class=\"line\">    z2=sigmoid(a2)</span><br><span class=\"line\">    a3=np.dot(z2,w3)+b3</span><br><span class=\"line\">    y=a3</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">network=init_network()</span><br><span class=\"line\">x=np.array([<span class=\"number\">1.0</span>,<span class=\"number\">0.5</span>])</span><br><span class=\"line\">y=forward(network,x)</span><br><span class=\"line\">print(y)<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s1.ax1x.com/2022/09/05/vTWyes.jpg\" alt=\"神经网络\" title=\"神经网络\"></p>\n"},{"title":"🐟书踩坑（一）","date":"2018-09-19T16:00:00.000Z","_content":"\n## 废话不多说，俺先讲一下来龙去脉~\n\n今天看鱼书P108页，遇到一个想不通的地方，我先放一波源码：\n~~（不了解的小伙伴看上一篇博文，有源码连接）~~\n```python\n# coding: utf-8\nimport sys, os\nsys.path.append(os.pardir)  # 为了导入父目录中的文件而进行的设定\nimport numpy as np\nfrom common.functions import softmax, cross_entropy_error\nfrom common.gradient import numerical_gradient\n\n\nclass simpleNet:\n    def __init__(self):\n        self.W = np.random.randn(2,3)\n\n    def predict(self, x):\n        return np.dot(x, self.W)\n\n    def loss(self, x, t):\n        z = self.predict(x)\n        y = softmax(z)\n        loss = cross_entropy_error(y, t)\n\n        return loss\n\nx = np.array([0.6, 0.9])\nt = np.array([0, 0, 1])\n\nnet = simpleNet()\n\nf = lambda w: net.loss(x, t)\ndW = numerical_gradient(f, net.W)\n\nprint(dW)\n```\n没错，这个是一个求神经网络梯度 w 的简单脚本。\n\n如你所见，文件头也import了许多外部函数，下面贴其中一个比较重要的外部函数：\n\n**numerical_gradient函数**\n\n```python\n# coding: utf-8\nimport numpy as np\n\ndef numerical_gradient(f, x):\n    h = 1e-4 # 0.0001\n    grad = np.zeros_like(x)\n    \n    it = np.nditer(x, flags=['multi_index'], op_flags=['readwrite'])\n    while not it.finished:\n        idx = it.multi_index\n        tmp_val = x[idx]\n        x[idx] = float(tmp_val) + h\n        fxh1 = f(x) # f(x+h)\n        \n        x[idx] = tmp_val - h \n        fxh2 = f(x) # f(x-h)\n        grad[idx] = (fxh1 - fxh2) / (2*h)\n        \n        x[idx] = tmp_val # 还原值\n        it.iternext()   \n        \n    return grad\n```\n## 下面讲讲这个坑\n小伙子们注意看第一段代码28，29两行：\n```python\nf = lambda w: net.loss(x, t)\ndW = numerical_gradient(f, net.W)\n```\n函数f中lambda表达式没什么问题，注意里面的参数 w ，仔细看，你会发现......卧槽！这不没jb卵用吗...\n如果你这么想，那你跟年轻的我有的一拼，~~too young,too simple~~\n\n接着看下一行：**dW = numerical_gradient(f, net.W)**很显然调用了**numerical_gradient函数**，没毛病。但是，兄弟萌，请仔细看看**numerical_gradient函数**实现机制，你会发现：\n>第13行：   fxh1 = f(x)\n>第16行：   fxh2 = f(x) \n>？？？？？？？？？？\n\n看不出问题吗？\n注意：这里的f是：\n```python\nf = lambda w: net.loss(x, t)\n```\nw是伪参数，没卵用，而x是**net.W**——神经网络的权重组成的数组，这尼玛驴头不对马嘴怎么就传给f了？？？而且f也不需要参数啊！\n\n我是左思右想一下午，后来有了一个猜想来解释这段代码。\n## 猜想\n我猜想fxh1 = f(x) ，fxh2 = f(x)括号里的x对程序根本没卵用，于是我大胆的删掉了x,变成：\n>第13行：   fxh1 = f()\n>第16行：   fxh2 = f()\n\n当然为了保持兼容，也得把lambda表达式那个伪参数删了：\n>f = lambda : net.loss(x, t)\n\n然后编译运行，结果...tmd就对了，你肯定觉得这是个坑，没错，我开始也觉得是坑，坑死我了。\n后来浏览了后面的代码，发现了一些用**numerical_gradient函数**做测试脚本，其中测试的是一些简单函数的梯度问题，涉及到变量x所以**numerical_gradient函数**的x要保留。。。。。。相应的，神经网络求梯度就要顺着**numerical_gradient函数**，没必要再写一个，于是就加了伪参数w保证兼容。\n\n最后俺深刻的明白：实践是检验真理的唯一标准~~（早试试就不会浪费那么多时间了）~~\n\n![END](http://r.photo.store.qq.com/psb?/V14eJTFY137vJk/5sLv1ifk0X3wKuPoH9lo.XgUnbenkVfUYF4G24tUjTE!/r/dMMAAAAAAAAA \"END\")","source":"_posts/鱼书踩坑（一）.md","raw":"---\ntitle:  🐟书踩坑（一）\ntags: [神经网络,python,坑]\n\ncategories: [机器学习]\ndate: 2018-9-20\n---\n\n## 废话不多说，俺先讲一下来龙去脉~\n\n今天看鱼书P108页，遇到一个想不通的地方，我先放一波源码：\n~~（不了解的小伙伴看上一篇博文，有源码连接）~~\n```python\n# coding: utf-8\nimport sys, os\nsys.path.append(os.pardir)  # 为了导入父目录中的文件而进行的设定\nimport numpy as np\nfrom common.functions import softmax, cross_entropy_error\nfrom common.gradient import numerical_gradient\n\n\nclass simpleNet:\n    def __init__(self):\n        self.W = np.random.randn(2,3)\n\n    def predict(self, x):\n        return np.dot(x, self.W)\n\n    def loss(self, x, t):\n        z = self.predict(x)\n        y = softmax(z)\n        loss = cross_entropy_error(y, t)\n\n        return loss\n\nx = np.array([0.6, 0.9])\nt = np.array([0, 0, 1])\n\nnet = simpleNet()\n\nf = lambda w: net.loss(x, t)\ndW = numerical_gradient(f, net.W)\n\nprint(dW)\n```\n没错，这个是一个求神经网络梯度 w 的简单脚本。\n\n如你所见，文件头也import了许多外部函数，下面贴其中一个比较重要的外部函数：\n\n**numerical_gradient函数**\n\n```python\n# coding: utf-8\nimport numpy as np\n\ndef numerical_gradient(f, x):\n    h = 1e-4 # 0.0001\n    grad = np.zeros_like(x)\n    \n    it = np.nditer(x, flags=['multi_index'], op_flags=['readwrite'])\n    while not it.finished:\n        idx = it.multi_index\n        tmp_val = x[idx]\n        x[idx] = float(tmp_val) + h\n        fxh1 = f(x) # f(x+h)\n        \n        x[idx] = tmp_val - h \n        fxh2 = f(x) # f(x-h)\n        grad[idx] = (fxh1 - fxh2) / (2*h)\n        \n        x[idx] = tmp_val # 还原值\n        it.iternext()   \n        \n    return grad\n```\n## 下面讲讲这个坑\n小伙子们注意看第一段代码28，29两行：\n```python\nf = lambda w: net.loss(x, t)\ndW = numerical_gradient(f, net.W)\n```\n函数f中lambda表达式没什么问题，注意里面的参数 w ，仔细看，你会发现......卧槽！这不没jb卵用吗...\n如果你这么想，那你跟年轻的我有的一拼，~~too young,too simple~~\n\n接着看下一行：**dW = numerical_gradient(f, net.W)**很显然调用了**numerical_gradient函数**，没毛病。但是，兄弟萌，请仔细看看**numerical_gradient函数**实现机制，你会发现：\n>第13行：   fxh1 = f(x)\n>第16行：   fxh2 = f(x) \n>？？？？？？？？？？\n\n看不出问题吗？\n注意：这里的f是：\n```python\nf = lambda w: net.loss(x, t)\n```\nw是伪参数，没卵用，而x是**net.W**——神经网络的权重组成的数组，这尼玛驴头不对马嘴怎么就传给f了？？？而且f也不需要参数啊！\n\n我是左思右想一下午，后来有了一个猜想来解释这段代码。\n## 猜想\n我猜想fxh1 = f(x) ，fxh2 = f(x)括号里的x对程序根本没卵用，于是我大胆的删掉了x,变成：\n>第13行：   fxh1 = f()\n>第16行：   fxh2 = f()\n\n当然为了保持兼容，也得把lambda表达式那个伪参数删了：\n>f = lambda : net.loss(x, t)\n\n然后编译运行，结果...tmd就对了，你肯定觉得这是个坑，没错，我开始也觉得是坑，坑死我了。\n后来浏览了后面的代码，发现了一些用**numerical_gradient函数**做测试脚本，其中测试的是一些简单函数的梯度问题，涉及到变量x所以**numerical_gradient函数**的x要保留。。。。。。相应的，神经网络求梯度就要顺着**numerical_gradient函数**，没必要再写一个，于是就加了伪参数w保证兼容。\n\n最后俺深刻的明白：实践是检验真理的唯一标准~~（早试试就不会浪费那么多时间了）~~\n\n![END](http://r.photo.store.qq.com/psb?/V14eJTFY137vJk/5sLv1ifk0X3wKuPoH9lo.XgUnbenkVfUYF4G24tUjTE!/r/dMMAAAAAAAAA \"END\")","slug":"鱼书踩坑（一）","published":1,"updated":"2022-09-05T03:46:56.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jba16007s7svwzovxxmzs","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"废话不多说，俺先讲一下来龙去脉\"><a href=\"#废话不多说，俺先讲一下来龙去脉\" class=\"headerlink\" title=\"废话不多说，俺先讲一下来龙去脉~\"></a>废话不多说，俺先讲一下来龙去脉~</h2><p>今天看鱼书P108页，遇到一个想不通的地方，我先放一波源码：<br><del>（不了解的小伙伴看上一篇博文，有源码连接）</del></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys, os</span><br><span class=\"line\">sys.path.append(os.pardir)  <span class=\"comment\"># 为了导入父目录中的文件而进行的设定</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> common.functions <span class=\"keyword\">import</span> softmax, cross_entropy_error</span><br><span class=\"line\"><span class=\"keyword\">from</span> common.gradient <span class=\"keyword\">import</span> numerical_gradient</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">simpleNet</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.W = np.random.randn(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">predict</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> np.dot(x, self.W)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loss</span><span class=\"params\">(self, x, t)</span>:</span></span><br><span class=\"line\">        z = self.predict(x)</span><br><span class=\"line\">        y = softmax(z)</span><br><span class=\"line\">        loss = cross_entropy_error(y, t)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> loss</span><br><span class=\"line\"></span><br><span class=\"line\">x = np.array([<span class=\"number\">0.6</span>, <span class=\"number\">0.9</span>])</span><br><span class=\"line\">t = np.array([<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">net = simpleNet()</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"keyword\">lambda</span> w: net.loss(x, t)</span><br><span class=\"line\">dW = numerical_gradient(f, net.W)</span><br><span class=\"line\"></span><br><span class=\"line\">print(dW)</span><br></pre></td></tr></table></figure>\n\n<p>没错，这个是一个求神经网络梯度 w 的简单脚本。</p>\n<p>如你所见，文件头也import了许多外部函数，下面贴其中一个比较重要的外部函数：</p>\n<p><strong>numerical_gradient函数</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numerical_gradient</span><span class=\"params\">(f, x)</span>:</span></span><br><span class=\"line\">    h = <span class=\"number\">1e-4</span> <span class=\"comment\"># 0.0001</span></span><br><span class=\"line\">    grad = np.zeros_like(x)</span><br><span class=\"line\">    </span><br><span class=\"line\">    it = np.nditer(x, flags=[<span class=\"string\">'multi_index'</span>], op_flags=[<span class=\"string\">'readwrite'</span>])</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> it.finished:</span><br><span class=\"line\">        idx = it.multi_index</span><br><span class=\"line\">        tmp_val = x[idx]</span><br><span class=\"line\">        x[idx] = float(tmp_val) + h</span><br><span class=\"line\">        fxh1 = f(x) <span class=\"comment\"># f(x+h)</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        x[idx] = tmp_val - h </span><br><span class=\"line\">        fxh2 = f(x) <span class=\"comment\"># f(x-h)</span></span><br><span class=\"line\">        grad[idx] = (fxh1 - fxh2) / (<span class=\"number\">2</span>*h)</span><br><span class=\"line\">        </span><br><span class=\"line\">        x[idx] = tmp_val <span class=\"comment\"># 还原值</span></span><br><span class=\"line\">        it.iternext()   </span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> grad</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"下面讲讲这个坑\"><a href=\"#下面讲讲这个坑\" class=\"headerlink\" title=\"下面讲讲这个坑\"></a>下面讲讲这个坑</h2><p>小伙子们注意看第一段代码28，29两行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"keyword\">lambda</span> w: net.loss(x, t)</span><br><span class=\"line\">dW = numerical_gradient(f, net.W)</span><br></pre></td></tr></table></figure>\n\n<p>函数f中lambda表达式没什么问题，注意里面的参数 w ，仔细看，你会发现……卧槽！这不没jb卵用吗…<br>如果你这么想，那你跟年轻的我有的一拼，<del>too young,too simple</del></p>\n<p>接着看下一行：<strong>dW = numerical_gradient(f, net.W)</strong>很显然调用了<strong>numerical_gradient函数</strong>，没毛病。但是，兄弟萌，请仔细看看<strong>numerical_gradient函数</strong>实现机制，你会发现：</p>\n<blockquote>\n<p>第13行：   fxh1 = f(x)<br>第16行：   fxh2 = f(x)<br>？？？？？？？？？？</p>\n</blockquote>\n<p>看不出问题吗？<br>注意：这里的f是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"keyword\">lambda</span> w: net.loss(x, t)</span><br></pre></td></tr></table></figure>\n\n<p>w是伪参数，没卵用，而x是<strong>net.W</strong>——神经网络的权重组成的数组，这尼玛驴头不对马嘴怎么就传给f了？？？而且f也不需要参数啊！</p>\n<p>我是左思右想一下午，后来有了一个猜想来解释这段代码。</p>\n<h2 id=\"猜想\"><a href=\"#猜想\" class=\"headerlink\" title=\"猜想\"></a>猜想</h2><p>我猜想fxh1 = f(x) ，fxh2 = f(x)括号里的x对程序根本没卵用，于是我大胆的删掉了x,变成：</p>\n<blockquote>\n<p>第13行：   fxh1 = f()<br>第16行：   fxh2 = f()</p>\n</blockquote>\n<p>当然为了保持兼容，也得把lambda表达式那个伪参数删了：</p>\n<blockquote>\n<p>f = lambda : net.loss(x, t)</p>\n</blockquote>\n<p>然后编译运行，结果…tmd就对了，你肯定觉得这是个坑，没错，我开始也觉得是坑，坑死我了。<br>后来浏览了后面的代码，发现了一些用<strong>numerical_gradient函数</strong>做测试脚本，其中测试的是一些简单函数的梯度问题，涉及到变量x所以<strong>numerical_gradient函数</strong>的x要保留。。。。。。相应的，神经网络求梯度就要顺着<strong>numerical_gradient函数</strong>，没必要再写一个，于是就加了伪参数w保证兼容。</p>\n<p>最后俺深刻的明白：实践是检验真理的唯一标准<del>（早试试就不会浪费那么多时间了）</del></p>\n<p><img src=\"http://r.photo.store.qq.com/psb?/V14eJTFY137vJk/5sLv1ifk0X3wKuPoH9lo.XgUnbenkVfUYF4G24tUjTE!/r/dMMAAAAAAAAA\" alt=\"END\" title=\"END\"></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h2 id=\"废话不多说，俺先讲一下来龙去脉\"><a href=\"#废话不多说，俺先讲一下来龙去脉\" class=\"headerlink\" title=\"废话不多说，俺先讲一下来龙去脉~\"></a>废话不多说，俺先讲一下来龙去脉~</h2><p>今天看鱼书P108页，遇到一个想不通的地方，我先放一波源码：<br><del>（不了解的小伙伴看上一篇博文，有源码连接）</del></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys, os</span><br><span class=\"line\">sys.path.append(os.pardir)  <span class=\"comment\"># 为了导入父目录中的文件而进行的设定</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> common.functions <span class=\"keyword\">import</span> softmax, cross_entropy_error</span><br><span class=\"line\"><span class=\"keyword\">from</span> common.gradient <span class=\"keyword\">import</span> numerical_gradient</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">simpleNet</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.W = np.random.randn(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">predict</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> np.dot(x, self.W)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loss</span><span class=\"params\">(self, x, t)</span>:</span></span><br><span class=\"line\">        z = self.predict(x)</span><br><span class=\"line\">        y = softmax(z)</span><br><span class=\"line\">        loss = cross_entropy_error(y, t)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> loss</span><br><span class=\"line\"></span><br><span class=\"line\">x = np.array([<span class=\"number\">0.6</span>, <span class=\"number\">0.9</span>])</span><br><span class=\"line\">t = np.array([<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">net = simpleNet()</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"keyword\">lambda</span> w: net.loss(x, t)</span><br><span class=\"line\">dW = numerical_gradient(f, net.W)</span><br><span class=\"line\"></span><br><span class=\"line\">print(dW)</span><br></pre></td></tr></table></figure>\n\n<p>没错，这个是一个求神经网络梯度 w 的简单脚本。</p>\n<p>如你所见，文件头也import了许多外部函数，下面贴其中一个比较重要的外部函数：</p>\n<p><strong>numerical_gradient函数</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numerical_gradient</span><span class=\"params\">(f, x)</span>:</span></span><br><span class=\"line\">    h = <span class=\"number\">1e-4</span> <span class=\"comment\"># 0.0001</span></span><br><span class=\"line\">    grad = np.zeros_like(x)</span><br><span class=\"line\">    </span><br><span class=\"line\">    it = np.nditer(x, flags=[<span class=\"string\">'multi_index'</span>], op_flags=[<span class=\"string\">'readwrite'</span>])</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> it.finished:</span><br><span class=\"line\">        idx = it.multi_index</span><br><span class=\"line\">        tmp_val = x[idx]</span><br><span class=\"line\">        x[idx] = float(tmp_val) + h</span><br><span class=\"line\">        fxh1 = f(x) <span class=\"comment\"># f(x+h)</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        x[idx] = tmp_val - h </span><br><span class=\"line\">        fxh2 = f(x) <span class=\"comment\"># f(x-h)</span></span><br><span class=\"line\">        grad[idx] = (fxh1 - fxh2) / (<span class=\"number\">2</span>*h)</span><br><span class=\"line\">        </span><br><span class=\"line\">        x[idx] = tmp_val <span class=\"comment\"># 还原值</span></span><br><span class=\"line\">        it.iternext()   </span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> grad</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"下面讲讲这个坑\"><a href=\"#下面讲讲这个坑\" class=\"headerlink\" title=\"下面讲讲这个坑\"></a>下面讲讲这个坑</h2><p>小伙子们注意看第一段代码28，29两行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"keyword\">lambda</span> w: net.loss(x, t)</span><br><span class=\"line\">dW = numerical_gradient(f, net.W)</span><br></pre></td></tr></table></figure>\n\n<p>函数f中lambda表达式没什么问题，注意里面的参数 w ，仔细看，你会发现……卧槽！这不没jb卵用吗…<br>如果你这么想，那你跟年轻的我有的一拼，<del>too young,too simple</del></p>\n<p>接着看下一行：<strong>dW = numerical_gradient(f, net.W)</strong>很显然调用了<strong>numerical_gradient函数</strong>，没毛病。但是，兄弟萌，请仔细看看<strong>numerical_gradient函数</strong>实现机制，你会发现：</p>\n<blockquote>\n<p>第13行：   fxh1 = f(x)<br>第16行：   fxh2 = f(x)<br>？？？？？？？？？？</p>\n</blockquote>\n<p>看不出问题吗？<br>注意：这里的f是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"keyword\">lambda</span> w: net.loss(x, t)</span><br></pre></td></tr></table></figure>\n\n<p>w是伪参数，没卵用，而x是<strong>net.W</strong>——神经网络的权重组成的数组，这尼玛驴头不对马嘴怎么就传给f了？？？而且f也不需要参数啊！</p>\n<p>我是左思右想一下午，后来有了一个猜想来解释这段代码。</p>\n<h2 id=\"猜想\"><a href=\"#猜想\" class=\"headerlink\" title=\"猜想\"></a>猜想</h2><p>我猜想fxh1 = f(x) ，fxh2 = f(x)括号里的x对程序根本没卵用，于是我大胆的删掉了x,变成：</p>\n<blockquote>\n<p>第13行：   fxh1 = f()<br>第16行：   fxh2 = f()</p>\n</blockquote>\n<p>当然为了保持兼容，也得把lambda表达式那个伪参数删了：</p>\n<blockquote>\n<p>f = lambda : net.loss(x, t)</p>\n</blockquote>\n<p>然后编译运行，结果…tmd就对了，你肯定觉得这是个坑，没错，我开始也觉得是坑，坑死我了。<br>后来浏览了后面的代码，发现了一些用<strong>numerical_gradient函数</strong>做测试脚本，其中测试的是一些简单函数的梯度问题，涉及到变量x所以<strong>numerical_gradient函数</strong>的x要保留。。。。。。相应的，神经网络求梯度就要顺着<strong>numerical_gradient函数</strong>，没必要再写一个，于是就加了伪参数w保证兼容。</p>\n<p>最后俺深刻的明白：实践是检验真理的唯一标准<del>（早试试就不会浪费那么多时间了）</del></p>\n<p><img src=\"http://r.photo.store.qq.com/psb?/V14eJTFY137vJk/5sLv1ifk0X3wKuPoH9lo.XgUnbenkVfUYF4G24tUjTE!/r/dMMAAAAAAAAA\" alt=\"END\" title=\"END\"></p>\n"},{"title":"MySQL笔记","date":"2022-09-06T16:00:00.000Z","_content":"\n# 基础篇\n\n## 通用语法及分类\n\n- DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）\n- DML: 数据操作语言，用来对数据库表中的数据进行增删改\n- DQL: 数据查询语言，用来查询数据库中表的记录\n- DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限\n\n### DDL（数据定义语言）\n\n数据定义语言\n\n#### 数据库操作\n\n查询所有数据库：\n`SHOW DATABASES;`\n查询当前数据库：\n`SELECT DATABASE();`\n创建数据库：\n`CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];`\n删除数据库：\n`DROP DATABASE [ IF EXISTS ] 数据库名;`\n使用数据库：\n`USE 数据库名;`\n\n##### 注意事项\n\n- UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集\n\n#### 表操作\n\n查询当前数据库所有表：\n`SHOW TABLES;`\n查询表结构：\n`DESC 表名;`\n查询指定表的建表语句：\n`SHOW CREATE TABLE 表名;`\n\n创建表：\n```mysql\nCREATE TABLE 表名(\n\t字段1 字段1类型 [COMMENT 字段1注释],\n\t字段2 字段2类型 [COMMENT 字段2注释],\n\t字段3 字段3类型 [COMMENT 字段3注释],\n\t...\n\t字段n 字段n类型 [COMMENT 字段n注释]\n)[ COMMENT 表注释 ];\n```\n**最后一个字段后面没有逗号**\n\n添加字段：\n`ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];`\n例：`ALTER TABLE emp ADD nickname varchar(20) COMMENT '昵称';`\n\n修改数据类型：\n`ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);`\n修改字段名和字段类型：\n`ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];`\n例：将emp表的nickname字段修改为username，类型为varchar(30)\n`ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT '昵称';`\n\n删除字段：\n`ALTER TABLE 表名 DROP 字段名;`\n\n修改表名：\n`ALTER TABLE 表名 RENAME TO 新表名`\n\n删除表：\n`DROP TABLE [IF EXISTS] 表名;`\n删除表，并重新创建该表：\n`TRUNCATE TABLE 表名;`\n\n### DML（数据操作语言）\n\n#### 添加数据\n\n指定字段：\n`INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);`\n全部字段：\n`INSERT INTO 表名 VALUES (值1, 值2, ...);`\n\n批量添加数据：\n`INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);`\n`INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);`\n\n##### 注意事项\n\n- 字符串和日期类型数据应该包含在引号中\n- 插入的数据大小应该在字段的规定范围内\n\n#### 更新和删除数据\n\n修改数据：\n`UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];`\n例：\n`UPDATE emp SET name = 'Jack' WHERE id = 1;`\n\n删除数据：\n`DELETE FROM 表名 [ WHERE 条件 ];`\n\n### DQL（数据查询语言）\n\n语法：\n```mysql\nSELECT\n\t字段列表\nFROM\n\t表名字段\nWHERE\n\t条件列表\nGROUP BY\n\t分组字段列表\nHAVING\n\t分组后的条件列表\nORDER BY\n\t排序字段列表\nLIMIT\n\t分页参数\n```\n\n#### 基础查询\n\n查询多个字段：\n`SELECT 字段1, 字段2, 字段3, ... FROM 表名;`\n`SELECT * FROM 表名;`\n\n设置别名：\n`SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;`\n`SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;`\n\n去除重复记录：\n`SELECT DISTINCT 字段列表 FROM 表名;`\n\n转义：\n`SELECT * FROM 表名 WHERE name LIKE '/_张三' ESCAPE '/'`\n/ 之后的\\_不作为通配符\n\n#### 条件查询\n\n语法：\n`SELECT 字段列表 FROM 表名 WHERE 条件列表;`\n\n条件：\n\n| 比较运算符          | 功能                                        |\n| ------------------- | ------------------------------------------- |\n| >                   | 大于                                        |\n| >=                  | 大于等于                                    |\n| <                   | 小于                                        |\n| <=                  | 小于等于                                    |\n| =                   | 等于                                        |\n| <> 或 !=            | 不等于                                      |\n| BETWEEN ... AND ... | 在某个范围内（含最小、最大值）              |\n| IN(...)             | 在in之后的列表中的值，多选一                |\n| LIKE 占位符         | 模糊匹配（\\_匹配单个字符，%匹配任意个字符） |\n| IS NULL             | 是NULL                                      |\n\n| 逻辑运算符         | 功能                         |\n| ------------------ | ---------------------------- |\n| AND 或 &&          | 并且（多个条件同时成立）     |\n| OR 或 &#124;&#124; | 或者（多个条件任意一个成立） |\n| NOT 或 !           | 非，不是                     |\n\n例子：\n```mysql\n-- 年龄等于30\nselect * from employee where age = 30;\n-- 年龄小于30\nselect * from employee where age < 30;\n-- 小于等于\nselect * from employee where age <= 30;\n-- 没有身份证\nselect * from employee where idcard is null or idcard = '';\n-- 有身份证\nselect * from employee where idcard;\nselect * from employee where idcard is not null;\n-- 不等于\nselect * from employee where age != 30;\n-- 年龄在20到30之间\nselect * from employee where age between 20 and 30;\nselect * from employee where age >= 20 and age <= 30;\n-- 下面语句不报错，但查不到任何信息\nselect * from employee where age between 30 and 20;\n-- 性别为女且年龄小于30\nselect * from employee where age < 30 and gender = '女';\n-- 年龄等于25或30或35\nselect * from employee where age = 25 or age = 30 or age = 35;\nselect * from employee where age in (25, 30, 35);\n-- 姓名为两个字\nselect * from employee where name like '__';\n-- 身份证最后为X\nselect * from employee where idcard like '%X';\n```\n\n#### 聚合查询（聚合函数）\n\n常见聚合函数：\n\n| 函数  | 功能     |\n| ----- | -------- |\n| count | 统计数量 |\n| max   | 最大值   |\n| min   | 最小值   |\n| avg   | 平均值   |\n| sum   | 求和     |\n\n语法：\n`SELECT 聚合函数(字段列表) FROM 表名;`\n例：\n`SELECT count(id) from employee where workaddress = \"广东省\";`\n\n#### 分组查询\n\n语法：\n`SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];`\n\nwhere 和 having 的区别：\n\n- 执行时机不同：where是分组之前进行过滤，不满足where条件不参与分组；having是分组后对结果进行过滤。\n- 判断条件不同：where不能对聚合函数进行判断，而having可以。\n\n例子：\n\n```mysql\n-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）\nselect count(*) from employee group by gender;\n-- 根据性别分组，统计男性和女性数量\nselect gender, count(*) from employee group by gender;\n-- 根据性别分组，统计男性和女性的平均年龄\nselect gender, avg(age) from employee group by gender;\n-- 年龄小于45，并根据工作地址分组\nselect workaddress, count(*) from employee where age < 45 group by workaddress;\n-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址\nselect workaddress, count(*) address_count from employee where age < 45 group by workaddress having address_count >= 3;\n```\n\n##### 注意事项\n\n- 执行顺序：where > 聚合函数 > having\n- 分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义\n\n#### 排序查询\n\n语法：\n`SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;`\n\n排序方式：\n\n- ASC: 升序（默认）\n- DESC: 降序\n\n例子：\n\n```mysql\n-- 根据年龄升序排序\nSELECT * FROM employee ORDER BY age ASC;\nSELECT * FROM employee ORDER BY age;\n-- 两字段排序，根据年龄升序排序，入职时间降序排序\nSELECT * FROM employee ORDER BY age ASC, entrydate DESC;\n```\n\n##### 注意事项\n\n如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序\n\n#### 分页查询\n\n语法：\n`SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;`\n\n例子：\n\n```mysql\n-- 查询第一页数据，展示10条\nSELECT * FROM employee LIMIT 0, 10;\n-- 查询第二页\nSELECT * FROM employee LIMIT 10, 10;\n```\n\n##### 注意事项\n\n- 起始索引从0开始，起始索引 = （查询页码 - 1） * 每页显示记录数\n- 分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT\n- 如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10\n\n#### DQL执行顺序\n\nFROM -> WHERE -> GROUP BY -> SELECT -> ORDER BY -> LIMIT\n\n### DCL\n\n#### 管理用户\n\n查询用户：\n\n```mysql\nUSER mysql;\nSELECT * FROM user;\n```\n\n创建用户:\n`CREATE USER '用户名'@'主机名' IDENTIFIED BY '密码';`\n\n修改用户密码：\n`ALTER USER '用户名'@'主机名' IDENTIFIED WITH mysql_native_password BY '新密码';`\n\n删除用户：\n`DROP USER '用户名'@'主机名';`\n\n例子：\n\n```mysql\n-- 创建用户test，只能在当前主机localhost访问\ncreate user 'test'@'localhost' identified by '123456';\n-- 创建用户test，能在任意主机访问\ncreate user 'test'@'%' identified by '123456';\ncreate user 'test' identified by '123456';\n-- 修改密码\nalter user 'test'@'localhost' identified with mysql_native_password by '1234';\n-- 删除用户\ndrop user 'test'@'localhost';\n```\n\n##### 注意事项\n\n- 主机名可以使用 % 通配\n\n#### 权限控制\n\n常用权限：\n\n| 权限                | 说明               |\n| ------------------- | ------------------ |\n| ALL, ALL PRIVILEGES | 所有权限           |\n| SELECT              | 查询数据           |\n| INSERT              | 插入数据           |\n| UPDATE              | 修改数据           |\n| DELETE              | 删除数据           |\n| ALTER               | 修改表             |\n| DROP                | 删除数据库/表/视图 |\n| CREATE              | 创建数据库/表      |\n\n更多权限请看[权限一览表](#权限一览表 \"权限一览表\")\n\n查询权限：\n`SHOW GRANTS FOR '用户名'@'主机名';`\n\n授予权限：\n`GRANT 权限列表 ON 数据库名.表名 TO '用户名'@'主机名';`\n\n撤销权限：\n`REVOKE 权限列表 ON 数据库名.表名 FROM '用户名'@'主机名';`\n\n##### 注意事项\n\n- 多个权限用逗号分隔\n- 授权时，数据库名和表名可以用 * 进行通配，代表所有\n\n## 函数\n\n- 字符串函数\n- 数值函数\n- 日期函数\n- 流程函数\n\n### 字符串函数\n\n常用函数：\n\n| 函数  | 功能  |\n| ------------ | ------------ |\n| CONCAT(s1, s2, ..., sn)  | 字符串拼接，将s1, s2, ..., sn拼接成一个字符串  |\n| LOWER(str)  | 将字符串全部转为小写  |\n| UPPER(str)  | 将字符串全部转为大写  |\n| LPAD(str, n, pad)  | 左填充，用字符串pad对str的左边进行填充，达到n个字符串长度  |\n| RPAD(str, n, pad)  | 右填充，用字符串pad对str的右边进行填充，达到n个字符串长度  |\n| TRIM(str)  | 去掉字符串头部和尾部的空格  |\n| SUBSTRING(str, start, len)  | 返回从字符串str从start位置起的len个长度的字符串  |\n\n使用示例：\n\n```mysql\n-- 拼接\nSELECT CONCAT('Hello', 'World');\n-- 小写\nSELECT LOWER('Hello');\n-- 大写\nSELECT UPPER('Hello');\n-- 左填充\nSELECT LPAD('01', 5, '-');\n-- 右填充\nSELECT RPAD('01', 5, '-');\n-- 去除空格\nSELECT TRIM(' Hello World ');\n-- 切片（起始索引为1）\nSELECT SUBSTRING('Hello World', 1, 5);\n```\n\n### 数值函数\n\n常见函数：\n\n| 函数  | 功能  |\n| ------------ | ------------ |\n| CEIL(x)  | 向上取整  |\n| FLOOR(x)  | 向下取整  |\n| MOD(x, y)  | 返回x/y的模  |\n| RAND() | 返回0~1内的随机数 |\n| ROUND(x, y) | 求参数x的四舍五入值，保留y位小数 |\n\n### 日期函数\n\n常用函数：\n\n| 函数  | 功能  |\n| ------------ | ------------ |\n| CURDATE()  | 返回当前日期  |\n| CURTIME()  | 返回当前时间  |\n| NOW()  | 返回当前日期和时间  |\n| YEAR(date)  | 获取指定date的年份  |\n| MONTH(date)  | 获取指定date的月份  |\n| DAY(date)  | 获取指定date的日期  |\n| DATE_ADD(date, INTERVAL expr type)  | 返回一个日期/时间值加上一个时间间隔expr后的时间值  |\n| DATEDIFF(date1, date2)  | 返回起始时间date1和结束时间date2之间的天数  |\n\n例子：\n\n```mysql\n-- DATE_ADD\nSELECT DATE_ADD(NOW(), INTERVAL 70 YEAR);\n```\n\n### 流程函数\n\n常用函数：\n\n| 函数  | 功能  |\n| ------------ | ------------ |\n| IF(value, t, f)  | 如果value为true，则返回t，否则返回f  |\n| IFNULL(value1, value2)  | 如果value1不为空，返回value1，否则返回value2  |\n| CASE WHEN [ val1 ] THEN [ res1 ] ... ELSE [ default ] END  | 如果val1为true，返回res1，... 否则返回default默认值  |\n| CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] ... ELSE [ default ] END  | 如果expr的值等于val1，返回res1，... 否则返回default默认值  |\n\n例子：\n\n```mysql\nselect\n\tname,\n\t(case when age > 30 then '中年' else '青年' end)\nfrom employee;\nselect\n\tname,\n\t(case workaddress when '北京市' then '一线城市' when '上海市' then '一线城市' else '二线城市' end) as '工作地址'\nfrom employee;\n```\n\n## 约束\n\n分类：\n\n| 约束  | 描述  | 关键字  |\n| ------------ | ------------ | ------------ |\n| 非空约束  | 限制该字段的数据不能为null  | NOT NULL  |\n| 唯一约束  | 保证该字段的所有数据都是唯一、不重复的  | UNIQUE  |\n| 主键约束  | 主键是一行数据的唯一标识，要求非空且唯一  | PRIMARY KEY  |\n| 默认约束  | 保存数据时，如果未指定该字段的值，则采用默认值  | DEFAULT  |\n| 检查约束（8.0.1版本后）  | 保证字段值满足某一个条件  | CHECK  |\n| 外键约束  | 用来让两张图的数据之间建立连接，保证数据的一致性和完整性  | FOREIGN KEY  |\n\n约束是作用于表中字段上的，可以再创建表/修改表的时候添加约束。\n\n### 常用约束\n\n| 约束条件  | 关键字  |\n| ------------ | ------------ |\n| 主键  | PRIMARY KEY  |\n| 自动增长  | AUTO_INCREMENT  |\n| 不为空  | NOT NULL  |\n| 唯一  | UNIQUE  |\n| 逻辑条件  | CHECK  |\n| 默认值  | DEFAULT  |\n\n例子：\n\n```mysql\ncreate table user(\n\tid int primary key auto_increment,\n\tname varchar(10) not null unique,\n\tage int check(age > 0 and age < 120),\n\tstatus char(1) default '1',\n\tgender char(1)\n);\n```\n\n### 外键约束\n\n添加外键：\n\n```mysql\nCREATE TABLE 表名(\n\t字段名 字段类型,\n\t...\n\t[CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名)\n);\nALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);\n\n-- 例子\nalter table emp add constraint fk_emp_dept_id foreign key(dept_id) references dept(id);\n```\n\n删除外键：\n`ALTER TABLE 表名 DROP FOREIGN KEY 外键名;`\n\n#### 删除/更新行为\n\n| 行为  | 说明  |\n| ------------ | ------------ |\n| NO ACTION  | 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与RESTRICT一致）  |\n| RESTRICT  | 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与NO ACTION一致）  |\n| CASCADE  | 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除/更新外键在子表中的记录  |\n| SET NULL  | 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（要求该外键允许为null）  |\n| SET DEFAULT  | 父表有变更时，子表将外键设为一个默认值（Innodb不支持）  |\n\n更改删除/更新行为：\n`ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为;`\n\n## 多表查询\n\n### 多表关系\n\n- 一对多（多对一）\n- 多对多\n- 一对一\n\n#### 一对多\n\n案例：部门与员工\n关系：一个部门对应多个员工，一个员工对应一个部门\n实现：在多的一方建立外键，指向一的一方的主键\n\n#### 多对多\n\n案例：学生与课程\n关系：一个学生可以选多门课程，一门课程也可以供多个学生选修\n实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键\n\n#### 一对一\n\n案例：用户与用户详情\n关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率\n实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）\n\n### 查询\n\n合并查询（笛卡尔积，会展示所有组合结果）：\n`select * from employee, dept;`\n\n> 笛卡尔积：两个集合A集合和B集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）\n\n消除无效笛卡尔积：\n`select * from employee, dept where employee.dept = dept.id;`\n\n### 内连接查询\n\n内连接查询的是两张表交集的部分\n\n隐式内连接：\n`SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;`\n\n显式内连接：\n`SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;`\n\n显式性能比隐式高\n\n例子：\n\n```mysql\n-- 查询员工姓名，及关联的部门的名称\n-- 隐式\nselect e.name, d.name from employee as e, dept as d where e.dept = d.id;\n-- 显式\nselect e.name, d.name from employee as e inner join dept as d on e.dept = d.id;\n```\n\n### 外连接查询\n\n左外连接：\n查询左表所有数据，以及两张表交集部分数据\n`SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;`\n相当于查询表1的所有数据，包含表1和表2交集部分数据\n\n右外连接：\n查询右表所有数据，以及两张表交集部分数据\n`SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;`\n\n例子：\n\n```mysql\n-- 左\nselect e.*, d.name from employee as e left outer join dept as d on e.dept = d.id;\nselect d.name, e.* from dept d left outer join emp e on e.dept = d.id;  -- 这条语句与下面的语句效果一样\n-- 右\nselect d.name, e.* from employee as e right outer join dept as d on e.dept = d.id;\n```\n\n左连接可以查询到没有dept的employee，右连接可以查询到没有employee的dept\n\n### 自连接查询\n\n当前表与自身的连接查询，自连接必须使用表别名\n\n语法：\n`SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;`\n\n自连接查询，可以是内连接查询，也可以是外连接查询\n\n例子：\n\n```mysql\n-- 查询员工及其所属领导的名字\nselect a.name, b.name from employee a, employee b where a.manager = b.id;\n-- 没有领导的也查询出来\nselect a.name, b.name from employee a left join employee b on a.manager = b.id;\n```\n\n### 联合查询 union, union all\n\n把多次查询的结果合并，形成一个新的查询集\n\n语法：\n\n```mysql\nSELECT 字段列表 FROM 表A ...\nUNION [ALL]\nSELECT 字段列表 FROM 表B ...\n```\n\n#### 注意事项\n\n- UNION ALL 会有重复结果，UNION 不会\n- 联合查询比使用or效率高，不会使索引失效\n\n### 子查询\n\nSQL语句中嵌套SELECT语句，称谓嵌套查询，又称子查询。\n`SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);`\n**子查询外部的语句可以是 INSERT / UPDATE / DELETE / SELECT 的任何一个**\n\n根据子查询结果可以分为：\n\n- 标量子查询（子查询结果为单个值）\n- 列子查询（子查询结果为一列）\n- 行子查询（子查询结果为一行）\n- 表子查询（子查询结果为多行多列）\n\n根据子查询位置可分为：\n\n- WHERE 之后\n- FROM 之后\n- SELECT 之后\n\n#### 标量子查询\n\n子查询返回的结果是单个值（数字、字符串、日期等）。\n常用操作符：- < > > >= < <=\n\n例子：\n\n```mysql\n-- 查询销售部所有员工\nselect id from dept where name = '销售部';\n-- 根据销售部部门ID，查询员工信息\nselect * from employee where dept = 4;\n-- 合并（子查询）\nselect * from employee where dept = (select id from dept where name = '销售部');\n\n-- 查询xxx入职之后的员工信息\nselect * from employee where entrydate > (select entrydate from employee where name = 'xxx');\n```\n\n#### 列子查询\n\n返回的结果是一列（可以是多行）。\n\n常用操作符：\n\n| 操作符  | 描述  |\n| ------------ | ------------ |\n| IN  | 在指定的集合范围内，多选一  |\n| NOT IN  | 不在指定的集合范围内  |\n| ANY  | 子查询返回列表中，有任意一个满足即可  |\n| SOME  | 与ANY等同，使用SOME的地方都可以使用ANY  |\n| ALL  | 子查询返回列表的所有值都必须满足  |\n\n例子：\n\n```mysql\n-- 查询销售部和市场部的所有员工信息\nselect * from employee where dept in (select id from dept where name = '销售部' or name = '市场部');\n-- 查询比财务部所有人工资都高的员工信息\nselect * from employee where salary > all(select salary from employee where dept = (select id from dept where name = '财务部'));\n-- 查询比研发部任意一人工资高的员工信息\nselect * from employee where salary > any (select salary from employee where dept = (select id from dept where name = '研发部'));\n```\n\n#### 行子查询\n\n返回的结果是一行（可以是多列）。\n常用操作符：=, <, >, IN, NOT IN\n\n例子：\n\n```mysql\n-- 查询与xxx的薪资及直属领导相同的员工信息\nselect * from employee where (salary, manager) = (12500, 1);\nselect * from employee where (salary, manager) = (select salary, manager from employee where name = 'xxx');\n```\n\n#### 表子查询\n\n返回的结果是多行多列\n常用操作符：IN\n\n例子：\n\n```mysql\n-- 查询与xxx1，xxx2的职位和薪资相同的员工\nselect * from employee where (job, salary) in (select job, salary from employee where name = 'xxx1' or name = 'xxx2');\n-- 查询入职日期是2006-01-01之后的员工，及其部门信息\nselect e.*, d.* from (select * from employee where entrydate > '2006-01-01') as e left join dept as d on e.dept = d.id;\n```\n\n## 事务\n\n事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。\n\n基本操作：\n\n```mysql\n-- 1. 查询张三账户余额\nselect * from account where name = '张三';\n-- 2. 将张三账户余额-1000\nupdate account set money = money - 1000 where name = '张三';\n-- 此语句出错后张三钱减少但是李四钱没有增加\n模拟sql语句错误\n-- 3. 将李四账户余额+1000\nupdate account set money = money + 1000 where name = '李四';\n\n-- 查看事务提交方式\nSELECT @@AUTOCOMMIT;\n-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效\nSET @@AUTOCOMMIT = 0;\n-- 提交事务\nCOMMIT;\n-- 回滚事务\nROLLBACK;\n\n-- 设置手动提交后上面代码改为：\nselect * from account where name = '张三';\nupdate account set money = money - 1000 where name = '张三';\nupdate account set money = money + 1000 where name = '李四';\ncommit;\n```\n\n操作方式二：\n\n开启事务：\n`START TRANSACTION 或 BEGIN TRANSACTION;`\n提交事务：\n`COMMIT;`\n回滚事务：\n`ROLLBACK;`\n\n操作实例：\n\n```mysql\nstart transaction;\nselect * from account where name = '张三';\nupdate account set money = money - 1000 where name = '张三';\nupdate account set money = money + 1000 where name = '李四';\ncommit;\n```\n\n### 四大特性ACID\n\n- 原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败\n- 一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态\n- 隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行\n- 持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的\n\n### 并发事务\n\n| 问题  | 描述  |\n| ------------ | ------------ |\n| 脏读  | 一个事务读到另一个事务还没提交的数据  |\n| 不可重复读  | 一个事务先后读取同一条记录，但两次读取的数据不同  |\n| 幻读  | 一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在  |\n\n> 这三个问题的详细演示：https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd \n\n并发事务隔离级别：\n\n| 隔离级别  | 脏读  | 不可重复读  | 幻读  |\n| ------------ | ------------ | ------------ | ------------ |\n| Read uncommitted  | √  | √  | √  |\n| Read committed  | ×  | √  | √  |\n| Repeatable Read(默认)  | ×  | ×  | √  |\n| Serializable  | ×  | ×  | ×  |\n\n- √表示在当前隔离级别下该问题会出现\n- Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差\n\n查看事务隔离级别：\n`SELECT @@TRANSACTION_ISOLATION;`\n设置事务隔离级别：\n`SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE };`\nSESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效\n\n# 进阶篇\n\n## 存储引擎\n\nMySQL体系结构：\n\n![结构图](https://dhc.pythonanywhere.com/media/editor/MySQL体系结构_20220315034329549927.png \"结构图\")\n![层级描述](https://dhc.pythonanywhere.com/media/editor/MySQL体系结构层级含义_20220315034359342837.png \"层级描述\")\n\n存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。\n默认存储引擎是InnoDB。\n\n相关操作：\n\n```mysql\n-- 查询建表语句\nshow create table account;\n-- 建表时指定存储引擎\nCREATE TABLE 表名(\n\t...\n) ENGINE=INNODB;\n-- 查看当前数据库支持的存储引擎\nshow engines;\n```\n\n### InnoDB\n\nInnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。\n\n特点：\n\n- DML 操作遵循 ACID 模型，支持**事务**\n- **行级锁**，提高并发访问性能\n- 支持**外键**约束，保证数据的完整性和正确性\n\n文件：\n\n- xxx.ibd: xxx代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。\n\n参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间\n\n知识点：\n\n查看 Mysql 变量：\n`show variables like 'innodb_file_per_table';`\n\n从idb文件提取表结构数据：\n（在cmd运行）\n`ibd2sdi xxx.ibd`\n\nInnoDB 逻辑存储结构：\n![InnoDB逻辑存储结构](https://dhc.pythonanywhere.com/media/editor/逻辑存储结构_20220316030616590001.png \"InnoDB逻辑存储结构\")\n\n### MyISAM\n\nMyISAM 是 MySQL 早期的默认存储引擎。\n\n特点：\n\n- 不支持事务，不支持外键\n- 支持表锁，不支持行锁\n- 访问速度快\n\n文件：\n\n- xxx.sdi: 存储表结构信息\n- xxx.MYD: 存储数据\n- xxx.MYI: 存储索引\n\n### Memory\n\nMemory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。\n\n特点：\n\n- 存放在内存中，速度快\n- hash索引（默认）\n\n文件：\n\n- xxx.sdi: 存储表结构信息\n\n### 存储引擎特点\n\n| 特点  | InnoDB  | MyISAM  | Memory  |\n| ------------ | ------------ | ------------ | ------------ |\n| 存储限制  | 64TB  | 有  | 有  |\n| 事务安全  | 支持  | -  | -  |\n| 锁机制  | 行锁  | 表锁  | 表锁  |\n| B+tree索引  | 支持  | 支持  | 支持  |\n| Hash索引  | -  | -  | 支持  |\n| 全文索引  | 支持（5.6版本之后）  | 支持  | -  |\n| 空间使用  | 高  | 低  | N/A  |\n| 内存使用  | 高  | 低  | 中等  |\n| 批量插入速度  | 低  | 高  | 高  |\n| 支持外键  | 支持  | -  | -  |\n\n### 存储引擎的选择\n\n在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。\n\n- InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择\n- MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。\n- Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性\n\n电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。\n\n## 性能分析\n\n### 查看执行频次\n\n查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：\n`SHOW GLOBAL STATUS LIKE 'Com_______';` 或者 `SHOW SESSION STATUS LIKE 'Com_______';`\n例：`show global status like 'Com_______'`\n\n### 慢查询日志\n\n慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。\nMySQL的慢查询日志默认没有开启，需要在MySQL的配置文件（/etc/my.cnf）中配置如下信息：\n\t# 开启慢查询日志开关\n\tslow_query_log=1\n\t# 设置慢查询日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志\n\tlong_query_time=2\n更改后记得重启MySQL服务，日志文件位置：/var/lib/mysql/localhost-slow.log\n\n查看慢查询日志开关状态：\n`show variables like 'slow_query_log';`\n\n### profile\n\nshow profile 能在做SQL优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：\n`SELECT @@have_profiling;`\nprofiling 默认关闭，可以通过set语句在session/global级别开启 profiling：\n`SET profiling = 1;`\n查看所有语句的耗时：\n`show profiles;`\n查看指定query_id的SQL语句各个阶段的耗时：\n`show profile for query query_id;`\n查看指定query_id的SQL语句CPU的使用情况\n`show profile cpu for query query_id;`\n\n### explain\n\nEXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。\n语法：\n\t# 直接在select语句之前加上关键字 explain / desc\n\tEXPLAIN SELECT 字段列表 FROM 表名 HWERE 条件;\n\nEXPLAIN 各字段含义：\n\n- id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id相同，执行顺序从上到下；id不同，值越大越先执行）\n- select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（SELECT/WHERE之后包含了子查询）等\n- type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all\n- possible_key：可能应用在这张表上的索引，一个或多个\n- Key：实际使用的索引，如果为 NULL，则没有使用索引\n- Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好\n- rows：MySQL认为必须要执行的行数，在InnoDB引擎的表中，是一个估计值，可能并不总是准确的\n- filtered：表示返回结果的行数占需读取行数的百分比，filtered的值越大越好\n\n## 索引\n\n索引是帮助 MySQL **高效获取数据**的**数据结构（有序）**。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。\n\n优缺点：\n\n优点：\n\n- 提高数据检索效率，降低数据库的IO成本\n- 通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗\n\n缺点：\n\n- 索引列也是要占用空间的\n- 索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE\n\n### 索引结构\n\n| 索引结构  | 描述  |\n| ------------ | ------------ |\n| B+Tree  | 最常见的索引类型，大部分引擎都支持B+树索引  |\n| Hash  | 底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询  |\n| R-Tree(空间索引)  | 空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少  |\n| Full-Text(全文索引)  | 是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES  |\n\n| 索引  | InnoDB  | MyISAM  | Memory  |\n| ------------ | ------------ | ------------ | ------------ |\n| B+Tree索引  | 支持  | 支持  | 支持  |\n| Hash索引  | 不支持  | 不支持  | 支持  |\n| R-Tree索引  | 不支持  | 支持  | 不支持  |\n| Full-text  | 5.6版本后支持  | 支持  | 不支持  |\n\n#### B-Tree\n\n![二叉树](https://dhc.pythonanywhere.com/media/editor/二叉树_20220316153214227108.png \"二叉树\")\n\n二叉树的缺点可以用红黑树来解决：\n![红黑树](https://dhc.pythonanywhere.com/media/editor/红黑树_20220316163142686602.png \"红黑树\")\n红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。\n\n为了解决上述问题，可以使用 B-Tree 结构。\nB-Tree (多路平衡查找树) 以一棵最大度数（max-degree，指一个节点的子节点个数）为5（5阶）的 b-tree 为例（每个节点最多存储4个key，5个指针）\n\n![B-Tree结构](https://dhc.pythonanywhere.com/media/editor/B-Tree结构_20220316163813441163.png \"B-Tree结构\")\n\n> B-Tree 的数据插入过程动画参照：https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68\n演示地址：https://www.cs.usfca.edu/~galles/visualization/BTree.html\n\n#### B+Tree\n\n结构图：\n\n![B+Tree结构图](https://dhc.pythonanywhere.com/media/editor/B+Tree结构图_20220316170700591277.png \"B+Tree结构图\")\n\n> 演示地址：https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html\n\n与 B-Tree 的区别：\n\n- 所有的数据都会出现在叶子节点\n- 叶子节点形成一个单向链表\n\nMySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。\n\n![MySQL B+Tree 结构图](https://dhc.pythonanywhere.com/media/editor/结构图_20220316171730865611.png \"MySQL B+Tree 结构图\")\n\n#### Hash\n\n哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。\n如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可以通过链表来解决。\n\n![Hash索引原理图](https://dhc.pythonanywhere.com/media/editor/Hash索引原理图_20220317143226150679.png \"Hash索引原理图\")\n\n特点：\n\n- Hash索引只能用于对等比较（=、in），不支持范围查询（betwwn、>、<、...）\n- 无法利用索引完成排序操作\n- 查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引\n\n存储引擎支持：\n\n- Memory\n- InnoDB: 具有自适应hash功能，hash索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的\n\n#### 面试题\n\n1. 为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？\n\n- 相对于二叉树，层级更少，搜索效率高\n- 对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低\n- 相对于 Hash 索引，B+Tree 支持范围匹配及排序操作\n\n### 索引分类\n\n| 分类  | 含义  | 特点  | 关键字  |\n| ------------ | ------------ | ------------ | ------------ |\n| 主键索引  | 针对于表中主键创建的索引  | 默认自动创建，只能有一个  | PRIMARY  |\n| 唯一索引  | 避免同一个表中某数据列中的值重复  | 可以有多个  | UNIQUE  |\n| 常规索引  | 快速定位特定数据  | 可以有多个  |   |\n| 全文索引  | 全文索引查找的是文本中的关键词，而不是比较索引中的值  | 可以有多个  | FULLTEXT  |\n\n在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：\n\n| 分类  | 含义  | 特点  |\n| ------------ | ------------ | ------------ |\n| 聚集索引(Clustered Index)  | 将数据存储与索引放一块，索引结构的叶子节点保存了行数据  | 必须有，而且只有一个  |\n| 二级索引(Secondary Index)  | 将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键  | 可以存在多个  |\n\n演示图：\n\n![大致原理](https://dhc.pythonanywhere.com/media/editor/原理图_20220318194454880073.png \"大致原理\")\n![演示图](https://dhc.pythonanywhere.com/media/editor/演示图_20220319215403721066.png \"演示图\")\n\n聚集索引选取规则：\n\n- 如果存在主键，主键索引就是聚集索引\n- 如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引\n- 如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引\n\n#### 思考题\n\n1\\. 以下 SQL 语句，哪个执行效率高？为什么？\n\n```mysql\nselect * from user where id = 10;\nselect * from user where name = 'Arm';\n-- 备注：id为主键，name字段创建的有索引\n```\n\n答：第一条语句，因为第二条需要回表查询，相当于两个步骤。\n\n2\\. InnoDB 主键索引的 B+Tree 高度为多少？\n\n答：假设一行数据大小为1k，一页中可以存储16行这样的数据。InnoDB 的指针占用6个字节的空间，主键假设为bigint，占用字节数为8.\n可得公式：`n * 8 + (n + 1) * 6 = 16 * 1024`，其中 8 表示 bigint 占用的字节数，n 表示当前节点存储的key的数量，(n + 1) 表示指针数量（比key多一个）。算出n约为1170。\n\n如果树的高度为2，那么他能存储的数据量大概为：`1171 * 16 = 18736`；\n如果树的高度为3，那么他能存储的数据量大概为：`1171 * 1171 * 16 = 21939856`。\n\n另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。\n\n### 语法\n\n创建索引：\n`CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...);`\n如果不加 CREATE 后面不加索引类型参数，则创建的是常规索引\n\n查看索引：\n`SHOW INDEX FROM table_name;`\n\n删除索引：\n`DROP INDEX index_name ON table_name;`\n\n案例：\n\n```mysql\n-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引\ncreate index idx_user_name on tb_user(name);\n-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引\ncreate unique index idx_user_phone on tb_user (phone);\n-- 为profession, age, status创建联合索引\ncreate index idx_user_pro_age_stat on tb_user(profession, age, status);\n-- 为email建立合适的索引来提升查询效率\ncreate index idx_user_email on tb_user(email);\n\n-- 删除索引\ndrop index idx_user_email on tb_user;\n```\n\n### 使用规则\n\n#### 最左前缀法则\n\n如果索引关联了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。\n如果跳跃某一列，索引将部分失效（后面的字段索引失效）。\n\n联合索引中，出现范围查询（<, >），范围查询右侧的列索引失效。可以用>=或者<=来规避索引失效问题。\n\n#### 索引失效情况\n\n1. 在索引列上进行运算操作，索引将失效。如：`explain select * from tb_user where substring(phone, 10, 2) = '15';`\n2. 字符串类型字段使用时，不加引号，索引将失效。如：`explain select * from tb_user where phone = 17799990015;`，此处phone的值没有加引号\n3. 模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如：`explain select * from tb_user where profession like '%工程';`，前后都有 % 也会失效。\n4. 用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。\n5. 如果 MySQL 评估使用索引比全表更慢，则不使用索引。\n\n#### SQL 提示\n\n是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。\n\n例如，使用索引：\n`explain select * from tb_user use index(idx_user_pro) where profession=\"软件工程\";`\n不使用哪个索引：\n`explain select * from tb_user ignore index(idx_user_pro) where profession=\"软件工程\";`\n必须使用哪个索引：\n`explain select * from tb_user force index(idx_user_pro) where profession=\"软件工程\";`\n\nuse 是建议，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，force就是无论如何都强制使用该索引。\n\n#### 覆盖索引&回表查询\n\n尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。\n\nexplain 中 extra 字段含义：\n`using index condition`：查找使用了索引，但是需要回表查询数据\n`using where; using index;`：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询\n\n如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是select \\*；如果在辅助索引中找聚集索引，如`select id, name from xxx where name='xxx';`，也只需要通过辅助索引(name)查找到对应的id，返回name和name索引对应的id即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如`select id, name, gender from xxx where name='xxx';`\n\n所以尽量不要用`select *`，容易出现回表查询，降低效率，除非有联合索引包含了所有字段\n\n面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下SQL语句进行优化，该如何进行才是最优方案：\n`select id, username, password from tb_user where username='itcast';`\n\n解：给username和password字段建立联合索引，则不需要回表查询，直接覆盖索引\n\n#### 前缀索引\n\n当字段类型为字符串（varchar, text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。\n\n语法：`create index idx_xxxx on table_name(columnn(n));`\n前缀长度：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。\n求选择性公式：\n```mysql\nselect count(distinct email) / count(*) from tb_user;\nselect count(distinct substring(email, 1, 5)) / count(*) from tb_user;\n```\n\nshow index 里面的sub_part可以看到接取的长度\n\n#### 单列索引&联合索引\n\n单列索引：即一个索引只包含单个列\n联合索引：即一个索引包含了多个列\n在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。\n\n单列索引情况：\n`explain select id, phone, name from tb_user where phone = '17799990010' and name = '韩信';`\n这句只会用到phone索引字段\n\n##### 注意事项\n\n- 多条件联合查询时，MySQL优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询\n\n### 设计原则\n\n1. 针对于数据量较大，且查询比较频繁的表建立索引\n2. 针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引\n3. 尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高\n4. 如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引\n5. 尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率\n6. 要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率\n7. 如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询\n\n## SQL 优化\n\n### 插入数据\n\n普通插入：\n\n1. 采用批量插入（一次插入的数据不建议超过1000条）\n2. 手动提交事务\n3. 主键顺序插入\n\n大批量插入：\n如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令插入。\n\n```mysql\n# 客户端连接服务端时，加上参数 --local-infile（这一行在bash/cmd界面输入）\nmysql --local-infile -u root -p\n# 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关\nset global local_infile = 1;\nselect @@local_infile;\n# 执行load指令将准备好的数据，加载到表结构中\nload data local infile '/root/sql1.log' into table 'tb_user' fields terminated by ',' lines terminated by '\\n';\n```\n\n### 主键优化\n\n数据组织方式：在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（Index organized table, IOT）\n\n页分裂：页可以为空，也可以填充一般，也可以填充100%，每个页包含了2-N行数据（如果一行数据过大，会行溢出），根据主键排列。\n页合并：当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录到达 MERGE_THRESHOLD（默认为页的50%），InnoDB会开始寻找最靠近的页（前后）看看是否可以将这两个页合并以优化空间使用。\n\nMERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或创建索引时指定\n\n> 文字说明不够清晰明了，具体可以看视频里的PPT演示过程：https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90\n\n主键设计原则：\n\n- 满足业务需求的情况下，尽量降低主键的长度\n- 插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键\n- 尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号\n- 业务操作时，避免对主键的修改\n\n### order by优化\n\n1. Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序\n2. Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高\n\n如果order by字段全部使用升序排序或者降序排序，则都会走索引，但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain的extra信息显示的是`Using index, Using filesort`，如果要优化掉Using filesort，则需要另外再创建一个索引，如：`create index idx_user_age_phone_ad on tb_user(age asc, phone desc);`，此时使用`select id, age, phone from tb_user order by age asc, phone desc;`会全部走索引\n\n总结：\n\n- 根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则\n- 尽量使用覆盖索引\n- 多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC/DESC）\n- 如果不可避免出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认256k）\n\n### group by优化\n\n- 在分组操作时，可以通过索引来提高效率\n- 分组操作时，索引的使用也是满足最左前缀法则的\n\n如索引为`idx_user_pro_age_stat`，则句式可以是`select ... where profession order by age`，这样也符合最左前缀法则\n\n### limit优化\n\n常见的问题如`limit 2000000, 10`，此时需要 MySQL 排序前2000000条记录，但仅仅返回2000000 - 2000010的记录，其他记录丢弃，查询排序的代价非常大。\n优化方案：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化\n\n例如：\n\n```mysql\n-- 此语句耗时很长\nselect * from tb_sku limit 9000000, 10;\n-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询\nselect id from tb_sku order by id limit 9000000, 10;\n-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit\n-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);\n-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度\nselect * from tb_sku as s, (select id from tb_sku order by id limit 9000000, 10) as a where s.id = a.id;\n```\n\n### count优化\n\nMyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(\\*) 的时候会直接返回这个数，效率很高（前提是不适用where）；\nInnoDB 在执行 count(\\*) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。\n优化方案：自己计数，如创建key-value表存储在内存或硬盘，或者是用redis\n\ncount的几种用法：\n\n- 如果count函数的参数（count里面写的那个字段）不是NULL（字段值不为NULL），累计值就加一，最后返回累计值\n- 用法：count(\\*)、count(主键)、count(字段)、count(1)\n- count(主键)跟count(\\*)一样，因为主键不能为空；count(字段)只计算字段值不为NULL的行；count(1)引擎会为每行添加一个1，然后就count这个1，返回结果也跟count(\\*)一样；count(null)返回0\n\n各种用法的性能：\n\n- count(主键)：InnoDB引擎会遍历整张表，把每行的主键id值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）\n- count(字段)：没有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加；有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加\n- count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加\n- count(\\*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加\n\n按效率排序：count(字段) < count(主键) < count(1) < count(\\*)，所以尽量使用 count(\\*)\n\n### update优化（避免行锁升级为表锁）\n\nInnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。\n\n如以下两条语句：\n`update student set no = '123' where id = 1;`，这句由于id有主键索引，所以只会锁这一行；\n`update student set no = '123' where name = 'test';`，这句由于name没有索引，所以会把整张表都锁住进行数据更新，解决方法是给name字段添加索引\n\n# 数据类型\n\n## 整型\n\n| 类型名称      | 取值范围                                  | 大小    |\n| ------------- | ----------------------------------------- | ------- |\n| TINYINT       | -128〜127                                 | 1个字节 |\n| SMALLINT      | -32768〜32767                             | 2个宇节 |\n| MEDIUMINT     | -8388608〜8388607                         | 3个字节 |\n| INT (INTEGHR) | -2147483648〜2147483647                   | 4个字节 |\n| BIGINT        | -9223372036854775808〜9223372036854775807 | 8个字节 |\n\n无符号在数据类型后加 unsigned 关键字。\n\n## 浮点型\n\n| 类型名称            | 说明               | 存储需求   |\n| ------------------- | ------------------ | ---------- |\n| FLOAT               | 单精度浮点数       | 4 个字节   |\n| DOUBLE              | 双精度浮点数       | 8 个字节   |\n| DECIMAL (M, D)，DEC | 压缩的“严格”定点数 | M+2 个字节 |\n\n## 日期和时间\n\n| 类型名称  | 日期格式            | 日期范围                                          | 存储需求 |\n| --------- | ------------------- | ------------------------------------------------- | -------- |\n| YEAR      | YYYY                | 1901 ~ 2155                                       | 1 个字节 |\n| TIME      | HH:MM:SS            | -838:59:59 ~ 838:59:59                            | 3 个字节 |\n| DATE      | YYYY-MM-DD          | 1000-01-01 ~ 9999-12-3                            | 3 个字节 |\n| DATETIME  | YYYY-MM-DD HH:MM:SS | 1000-01-01 00:00:00 ~ 9999-12-31 23:59:59         | 8 个字节 |\n| TIMESTAMP | YYYY-MM-DD HH:MM:SS | 1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC | 4 个字节 |\n\n## 字符串\n\n| 类型名称   | 说明                                         | 存储需求                                                   |\n| ---------- | -------------------------------------------- | ---------------------------------------------------------- |\n| CHAR(M)    | 固定长度非二进制字符串                       | M 字节，1<=M<=255                                          |\n| VARCHAR(M) | 变长非二进制字符串                           | L+1字节，在此，L< = M和 1<=M<=255                          |\n| TINYTEXT   | 非常小的非二进制字符串                       | L+1字节，在此，L<2^8                                       |\n| TEXT       | 小的非二进制字符串                           | L+2字节，在此，L<2^16                                      |\n| MEDIUMTEXT | 中等大小的非二进制字符串                     | L+3字节，在此，L<2^24                                      |\n| LONGTEXT   | 大的非二进制字符串                           | L+4字节，在此，L<2^32                                      |\n| ENUM       | 枚举类型，只能有一个枚举字符串值             | 1或2个字节，取决于枚举值的数目 (最大值为65535)             |\n| SET        | 一个设置，字符串对象可以有零个或 多个SET成员 | 1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员） |\n\n## 二进制类型\n\n| 类型名称       | 说明                 | 存储需求               |\n| -------------- | -------------------- | ---------------------- |\n| BIT(M)         | 位字段类型           | 大约 (M+7)/8 字节      |\n| BINARY(M)      | 固定长度二进制字符串 | M 字节                 |\n| VARBINARY (M)  | 可变长度二进制字符串 | M+1 字节               |\n| TINYBLOB (M)   | 非常小的BLOB         | L+1 字节，在此，L<2^8  |\n| BLOB (M)       | 小 BLOB              | L+2 字节，在此，L<2^16 |\n| MEDIUMBLOB (M) | 中等大小的BLOB       | L+3 字节，在此，L<2^24 |\n| LONGBLOB (M)   | 非常大的BLOB         | L+4 字节，在此，L<2^32 |\n\n# 权限一览表\n\n> 具体权限的作用详见[官方文档](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html \"官方文档\")\n\nGRANT 和 REVOKE 允许的静态权限\n\n| Privilege                                                    | Grant Table Column           | Context                               |\n| :----------------------------------------------------------- | :--------------------------- | :------------------------------------ |\n| [`ALL [PRIVILEGES]`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_all) | Synonym for “all privileges” | Server administration                 |\n| [`ALTER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter) | `Alter_priv`                 | Tables                                |\n| [`ALTER ROUTINE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter-routine) | `Alter_routine_priv`         | Stored routines                       |\n| [`CREATE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create) | `Create_priv`                | Databases, tables, or indexes         |\n| [`CREATE ROLE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-role) | `Create_role_priv`           | Server administration                 |\n| [`CREATE ROUTINE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-routine) | `Create_routine_priv`        | Stored routines                       |\n| [`CREATE TABLESPACE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-tablespace) | `Create_tablespace_priv`     | Server administration                 |\n| [`CREATE TEMPORARY TABLES`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-temporary-tables) | `Create_tmp_table_priv`      | Tables                                |\n| [`CREATE USER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-user) | `Create_user_priv`           | Server administration                 |\n| [`CREATE VIEW`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-view) | `Create_view_priv`           | Views                                 |\n| [`DELETE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_delete) | `Delete_priv`                | Tables                                |\n| [`DROP`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop) | `Drop_priv`                  | Databases, tables, or views           |\n| [`DROP ROLE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop-role) | `Drop_role_priv`             | Server administration                 |\n| [`EVENT`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_event) | `Event_priv`                 | Databases                             |\n| [`EXECUTE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_execute) | `Execute_priv`               | Stored routines                       |\n| [`FILE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_file) | `File_priv`                  | File access on server host            |\n| [`GRANT OPTION`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_grant-option) | `Grant_priv`                 | Databases, tables, or stored routines |\n| [`INDEX`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_index) | `Index_priv`                 | Tables                                |\n| [`INSERT`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_insert) | `Insert_priv`                | Tables or columns                     |\n| [`LOCK TABLES`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_lock-tables) | `Lock_tables_priv`           | Databases                             |\n| [`PROCESS`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_process) | `Process_priv`               | Server administration                 |\n| [`PROXY`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_proxy) | See `proxies_priv` table     | Server administration                 |\n| [`REFERENCES`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_references) | `References_priv`            | Databases or tables                   |\n| [`RELOAD`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_reload) | `Reload_priv`                | Server administration                 |\n| [`REPLICATION CLIENT`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-client) | `Repl_client_priv`           | Server administration                 |\n| [`REPLICATION SLAVE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave) | `Repl_slave_priv`            | Server administration                 |\n| [`SELECT`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_select) | `Select_priv`                | Tables or columns                     |\n| [`SHOW DATABASES`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-databases) | `Show_db_priv`               | Server administration                 |\n| [`SHOW VIEW`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-view) | `Show_view_priv`             | Views                                 |\n| [`SHUTDOWN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_shutdown) | `Shutdown_priv`              | Server administration                 |\n| [`SUPER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_super) | `Super_priv`                 | Server administration                 |\n| [`TRIGGER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_trigger) | `Trigger_priv`               | Tables                                |\n| [`UPDATE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_update) | `Update_priv`                | Tables or columns                     |\n| [`USAGE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_usage) | Synonym for “no privileges”  | Server administration                 |\n\nGRANT 和 REVOKE 允许的动态权限\n\n| Privilege                                                    | Context                                           |\n| :----------------------------------------------------------- | :------------------------------------------------ |\n| [`APPLICATION_PASSWORD_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_application-password-admin) | Dual password administration                      |\n| [`AUDIT_ABORT_EXEMPT`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-abort-exempt) | Allow queries blocked by audit log filter         |\n| [`AUDIT_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-admin) | Audit log administration                          |\n| [`AUTHENTICATION_POLICY_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_authentication-policy-admin) | Authentication administration                     |\n| [`BACKUP_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_backup-admin) | Backup administration                             |\n| [`BINLOG_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-admin) | Backup and Replication administration             |\n| [`BINLOG_ENCRYPTION_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-encryption-admin) | Backup and Replication administration             |\n| [`CLONE_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_clone-admin) | Clone administration                              |\n| [`CONNECTION_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_connection-admin) | Server administration                             |\n| [`ENCRYPTION_KEY_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_encryption-key-admin) | Server administration                             |\n| [`FIREWALL_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-admin) | Firewall administration                           |\n| [`FIREWALL_EXEMPT`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-exempt) | Firewall administration                           |\n| [`FIREWALL_USER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-user) | Firewall administration                           |\n| [`FLUSH_OPTIMIZER_COSTS`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-optimizer-costs) | Server administration                             |\n| [`FLUSH_STATUS`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-status) | Server administration                             |\n| [`FLUSH_TABLES`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-tables) | Server administration                             |\n| [`FLUSH_USER_RESOURCES`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-user-resources) | Server administration                             |\n| [`GROUP_REPLICATION_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-admin) | Replication administration                        |\n| [`GROUP_REPLICATION_STREAM`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-stream) | Replication administration                        |\n| [`INNODB_REDO_LOG_ARCHIVE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_innodb-redo-log-archive) | Redo log archiving administration                 |\n| [`NDB_STORED_USER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_ndb-stored-user) | NDB Cluster                                       |\n| [`PASSWORDLESS_USER_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_passwordless-user-admin) | Authentication administration                     |\n| [`PERSIST_RO_VARIABLES_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_persist-ro-variables-admin) | Server administration                             |\n| [`REPLICATION_APPLIER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-applier) | `PRIVILEGE_CHECKS_USER` for a replication channel |\n| [`REPLICATION_SLAVE_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave-admin) | Replication administration                        |\n| [`RESOURCE_GROUP_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-admin) | Resource group administration                     |\n| [`RESOURCE_GROUP_USER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-user) | Resource group administration                     |\n| [`ROLE_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_role-admin) | Server administration                             |\n| [`SESSION_VARIABLES_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_session-variables-admin) | Server administration                             |\n| [`SET_USER_ID`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_set-user-id) | Server administration                             |\n| [`SHOW_ROUTINE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-routine) | Server administration                             |\n| [`SYSTEM_USER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-user) | Server administration                             |\n| [`SYSTEM_VARIABLES_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-variables-admin) | Server administration                             |\n| [`TABLE_ENCRYPTION_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_table-encryption-admin) | Server administration                             |\n| [`VERSION_TOKEN_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_version-token-admin) | Server administration                             |\n| [`XA_RECOVER_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_xa-recover-admin) | Server administration                             |\n\n# 图形化界面工具\n\n- Workbench(免费): http://dev.mysql.com/downloads/workbench/\n- navicat(收费，试用版30天): https://www.navicat.com/en/download/navicat-for-mysql\n- Sequel Pro(开源免费，仅支持Mac OS): http://www.sequelpro.com/\n- HeidiSQL(免费): http://www.heidisql.com/\n- phpMyAdmin(免费): https://www.phpmyadmin.net/\n- SQLyog: https://sqlyog.en.softonic.com/\n\n# 安装\n\n# 小技巧\n\n1. 在SQL语句之后加上`\\G`会将结果的表格形式转换成行文本形式\n2. 查看Mysql数据库占用空间：\n```mysql\nSELECT table_schema \"Database Name\"\n     , SUM(data_length + index_length) / (1024 * 1024) \"Database Size in MB\"\nFROM information_schema.TABLES\nGROUP BY table_schema;\n```\n","source":"_posts/MySql.md","raw":"---\ntitle:  MySQL笔记\ntags: [数据库,学习,MySQL]\ncategories: [MySQL]\ndate: 2022-9-7\n\n---\n\n# 基础篇\n\n## 通用语法及分类\n\n- DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）\n- DML: 数据操作语言，用来对数据库表中的数据进行增删改\n- DQL: 数据查询语言，用来查询数据库中表的记录\n- DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限\n\n### DDL（数据定义语言）\n\n数据定义语言\n\n#### 数据库操作\n\n查询所有数据库：\n`SHOW DATABASES;`\n查询当前数据库：\n`SELECT DATABASE();`\n创建数据库：\n`CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];`\n删除数据库：\n`DROP DATABASE [ IF EXISTS ] 数据库名;`\n使用数据库：\n`USE 数据库名;`\n\n##### 注意事项\n\n- UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集\n\n#### 表操作\n\n查询当前数据库所有表：\n`SHOW TABLES;`\n查询表结构：\n`DESC 表名;`\n查询指定表的建表语句：\n`SHOW CREATE TABLE 表名;`\n\n创建表：\n```mysql\nCREATE TABLE 表名(\n\t字段1 字段1类型 [COMMENT 字段1注释],\n\t字段2 字段2类型 [COMMENT 字段2注释],\n\t字段3 字段3类型 [COMMENT 字段3注释],\n\t...\n\t字段n 字段n类型 [COMMENT 字段n注释]\n)[ COMMENT 表注释 ];\n```\n**最后一个字段后面没有逗号**\n\n添加字段：\n`ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];`\n例：`ALTER TABLE emp ADD nickname varchar(20) COMMENT '昵称';`\n\n修改数据类型：\n`ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);`\n修改字段名和字段类型：\n`ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];`\n例：将emp表的nickname字段修改为username，类型为varchar(30)\n`ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT '昵称';`\n\n删除字段：\n`ALTER TABLE 表名 DROP 字段名;`\n\n修改表名：\n`ALTER TABLE 表名 RENAME TO 新表名`\n\n删除表：\n`DROP TABLE [IF EXISTS] 表名;`\n删除表，并重新创建该表：\n`TRUNCATE TABLE 表名;`\n\n### DML（数据操作语言）\n\n#### 添加数据\n\n指定字段：\n`INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);`\n全部字段：\n`INSERT INTO 表名 VALUES (值1, 值2, ...);`\n\n批量添加数据：\n`INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);`\n`INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);`\n\n##### 注意事项\n\n- 字符串和日期类型数据应该包含在引号中\n- 插入的数据大小应该在字段的规定范围内\n\n#### 更新和删除数据\n\n修改数据：\n`UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];`\n例：\n`UPDATE emp SET name = 'Jack' WHERE id = 1;`\n\n删除数据：\n`DELETE FROM 表名 [ WHERE 条件 ];`\n\n### DQL（数据查询语言）\n\n语法：\n```mysql\nSELECT\n\t字段列表\nFROM\n\t表名字段\nWHERE\n\t条件列表\nGROUP BY\n\t分组字段列表\nHAVING\n\t分组后的条件列表\nORDER BY\n\t排序字段列表\nLIMIT\n\t分页参数\n```\n\n#### 基础查询\n\n查询多个字段：\n`SELECT 字段1, 字段2, 字段3, ... FROM 表名;`\n`SELECT * FROM 表名;`\n\n设置别名：\n`SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;`\n`SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;`\n\n去除重复记录：\n`SELECT DISTINCT 字段列表 FROM 表名;`\n\n转义：\n`SELECT * FROM 表名 WHERE name LIKE '/_张三' ESCAPE '/'`\n/ 之后的\\_不作为通配符\n\n#### 条件查询\n\n语法：\n`SELECT 字段列表 FROM 表名 WHERE 条件列表;`\n\n条件：\n\n| 比较运算符          | 功能                                        |\n| ------------------- | ------------------------------------------- |\n| >                   | 大于                                        |\n| >=                  | 大于等于                                    |\n| <                   | 小于                                        |\n| <=                  | 小于等于                                    |\n| =                   | 等于                                        |\n| <> 或 !=            | 不等于                                      |\n| BETWEEN ... AND ... | 在某个范围内（含最小、最大值）              |\n| IN(...)             | 在in之后的列表中的值，多选一                |\n| LIKE 占位符         | 模糊匹配（\\_匹配单个字符，%匹配任意个字符） |\n| IS NULL             | 是NULL                                      |\n\n| 逻辑运算符         | 功能                         |\n| ------------------ | ---------------------------- |\n| AND 或 &&          | 并且（多个条件同时成立）     |\n| OR 或 &#124;&#124; | 或者（多个条件任意一个成立） |\n| NOT 或 !           | 非，不是                     |\n\n例子：\n```mysql\n-- 年龄等于30\nselect * from employee where age = 30;\n-- 年龄小于30\nselect * from employee where age < 30;\n-- 小于等于\nselect * from employee where age <= 30;\n-- 没有身份证\nselect * from employee where idcard is null or idcard = '';\n-- 有身份证\nselect * from employee where idcard;\nselect * from employee where idcard is not null;\n-- 不等于\nselect * from employee where age != 30;\n-- 年龄在20到30之间\nselect * from employee where age between 20 and 30;\nselect * from employee where age >= 20 and age <= 30;\n-- 下面语句不报错，但查不到任何信息\nselect * from employee where age between 30 and 20;\n-- 性别为女且年龄小于30\nselect * from employee where age < 30 and gender = '女';\n-- 年龄等于25或30或35\nselect * from employee where age = 25 or age = 30 or age = 35;\nselect * from employee where age in (25, 30, 35);\n-- 姓名为两个字\nselect * from employee where name like '__';\n-- 身份证最后为X\nselect * from employee where idcard like '%X';\n```\n\n#### 聚合查询（聚合函数）\n\n常见聚合函数：\n\n| 函数  | 功能     |\n| ----- | -------- |\n| count | 统计数量 |\n| max   | 最大值   |\n| min   | 最小值   |\n| avg   | 平均值   |\n| sum   | 求和     |\n\n语法：\n`SELECT 聚合函数(字段列表) FROM 表名;`\n例：\n`SELECT count(id) from employee where workaddress = \"广东省\";`\n\n#### 分组查询\n\n语法：\n`SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];`\n\nwhere 和 having 的区别：\n\n- 执行时机不同：where是分组之前进行过滤，不满足where条件不参与分组；having是分组后对结果进行过滤。\n- 判断条件不同：where不能对聚合函数进行判断，而having可以。\n\n例子：\n\n```mysql\n-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）\nselect count(*) from employee group by gender;\n-- 根据性别分组，统计男性和女性数量\nselect gender, count(*) from employee group by gender;\n-- 根据性别分组，统计男性和女性的平均年龄\nselect gender, avg(age) from employee group by gender;\n-- 年龄小于45，并根据工作地址分组\nselect workaddress, count(*) from employee where age < 45 group by workaddress;\n-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址\nselect workaddress, count(*) address_count from employee where age < 45 group by workaddress having address_count >= 3;\n```\n\n##### 注意事项\n\n- 执行顺序：where > 聚合函数 > having\n- 分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义\n\n#### 排序查询\n\n语法：\n`SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;`\n\n排序方式：\n\n- ASC: 升序（默认）\n- DESC: 降序\n\n例子：\n\n```mysql\n-- 根据年龄升序排序\nSELECT * FROM employee ORDER BY age ASC;\nSELECT * FROM employee ORDER BY age;\n-- 两字段排序，根据年龄升序排序，入职时间降序排序\nSELECT * FROM employee ORDER BY age ASC, entrydate DESC;\n```\n\n##### 注意事项\n\n如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序\n\n#### 分页查询\n\n语法：\n`SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;`\n\n例子：\n\n```mysql\n-- 查询第一页数据，展示10条\nSELECT * FROM employee LIMIT 0, 10;\n-- 查询第二页\nSELECT * FROM employee LIMIT 10, 10;\n```\n\n##### 注意事项\n\n- 起始索引从0开始，起始索引 = （查询页码 - 1） * 每页显示记录数\n- 分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT\n- 如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10\n\n#### DQL执行顺序\n\nFROM -> WHERE -> GROUP BY -> SELECT -> ORDER BY -> LIMIT\n\n### DCL\n\n#### 管理用户\n\n查询用户：\n\n```mysql\nUSER mysql;\nSELECT * FROM user;\n```\n\n创建用户:\n`CREATE USER '用户名'@'主机名' IDENTIFIED BY '密码';`\n\n修改用户密码：\n`ALTER USER '用户名'@'主机名' IDENTIFIED WITH mysql_native_password BY '新密码';`\n\n删除用户：\n`DROP USER '用户名'@'主机名';`\n\n例子：\n\n```mysql\n-- 创建用户test，只能在当前主机localhost访问\ncreate user 'test'@'localhost' identified by '123456';\n-- 创建用户test，能在任意主机访问\ncreate user 'test'@'%' identified by '123456';\ncreate user 'test' identified by '123456';\n-- 修改密码\nalter user 'test'@'localhost' identified with mysql_native_password by '1234';\n-- 删除用户\ndrop user 'test'@'localhost';\n```\n\n##### 注意事项\n\n- 主机名可以使用 % 通配\n\n#### 权限控制\n\n常用权限：\n\n| 权限                | 说明               |\n| ------------------- | ------------------ |\n| ALL, ALL PRIVILEGES | 所有权限           |\n| SELECT              | 查询数据           |\n| INSERT              | 插入数据           |\n| UPDATE              | 修改数据           |\n| DELETE              | 删除数据           |\n| ALTER               | 修改表             |\n| DROP                | 删除数据库/表/视图 |\n| CREATE              | 创建数据库/表      |\n\n更多权限请看[权限一览表](#权限一览表 \"权限一览表\")\n\n查询权限：\n`SHOW GRANTS FOR '用户名'@'主机名';`\n\n授予权限：\n`GRANT 权限列表 ON 数据库名.表名 TO '用户名'@'主机名';`\n\n撤销权限：\n`REVOKE 权限列表 ON 数据库名.表名 FROM '用户名'@'主机名';`\n\n##### 注意事项\n\n- 多个权限用逗号分隔\n- 授权时，数据库名和表名可以用 * 进行通配，代表所有\n\n## 函数\n\n- 字符串函数\n- 数值函数\n- 日期函数\n- 流程函数\n\n### 字符串函数\n\n常用函数：\n\n| 函数  | 功能  |\n| ------------ | ------------ |\n| CONCAT(s1, s2, ..., sn)  | 字符串拼接，将s1, s2, ..., sn拼接成一个字符串  |\n| LOWER(str)  | 将字符串全部转为小写  |\n| UPPER(str)  | 将字符串全部转为大写  |\n| LPAD(str, n, pad)  | 左填充，用字符串pad对str的左边进行填充，达到n个字符串长度  |\n| RPAD(str, n, pad)  | 右填充，用字符串pad对str的右边进行填充，达到n个字符串长度  |\n| TRIM(str)  | 去掉字符串头部和尾部的空格  |\n| SUBSTRING(str, start, len)  | 返回从字符串str从start位置起的len个长度的字符串  |\n\n使用示例：\n\n```mysql\n-- 拼接\nSELECT CONCAT('Hello', 'World');\n-- 小写\nSELECT LOWER('Hello');\n-- 大写\nSELECT UPPER('Hello');\n-- 左填充\nSELECT LPAD('01', 5, '-');\n-- 右填充\nSELECT RPAD('01', 5, '-');\n-- 去除空格\nSELECT TRIM(' Hello World ');\n-- 切片（起始索引为1）\nSELECT SUBSTRING('Hello World', 1, 5);\n```\n\n### 数值函数\n\n常见函数：\n\n| 函数  | 功能  |\n| ------------ | ------------ |\n| CEIL(x)  | 向上取整  |\n| FLOOR(x)  | 向下取整  |\n| MOD(x, y)  | 返回x/y的模  |\n| RAND() | 返回0~1内的随机数 |\n| ROUND(x, y) | 求参数x的四舍五入值，保留y位小数 |\n\n### 日期函数\n\n常用函数：\n\n| 函数  | 功能  |\n| ------------ | ------------ |\n| CURDATE()  | 返回当前日期  |\n| CURTIME()  | 返回当前时间  |\n| NOW()  | 返回当前日期和时间  |\n| YEAR(date)  | 获取指定date的年份  |\n| MONTH(date)  | 获取指定date的月份  |\n| DAY(date)  | 获取指定date的日期  |\n| DATE_ADD(date, INTERVAL expr type)  | 返回一个日期/时间值加上一个时间间隔expr后的时间值  |\n| DATEDIFF(date1, date2)  | 返回起始时间date1和结束时间date2之间的天数  |\n\n例子：\n\n```mysql\n-- DATE_ADD\nSELECT DATE_ADD(NOW(), INTERVAL 70 YEAR);\n```\n\n### 流程函数\n\n常用函数：\n\n| 函数  | 功能  |\n| ------------ | ------------ |\n| IF(value, t, f)  | 如果value为true，则返回t，否则返回f  |\n| IFNULL(value1, value2)  | 如果value1不为空，返回value1，否则返回value2  |\n| CASE WHEN [ val1 ] THEN [ res1 ] ... ELSE [ default ] END  | 如果val1为true，返回res1，... 否则返回default默认值  |\n| CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] ... ELSE [ default ] END  | 如果expr的值等于val1，返回res1，... 否则返回default默认值  |\n\n例子：\n\n```mysql\nselect\n\tname,\n\t(case when age > 30 then '中年' else '青年' end)\nfrom employee;\nselect\n\tname,\n\t(case workaddress when '北京市' then '一线城市' when '上海市' then '一线城市' else '二线城市' end) as '工作地址'\nfrom employee;\n```\n\n## 约束\n\n分类：\n\n| 约束  | 描述  | 关键字  |\n| ------------ | ------------ | ------------ |\n| 非空约束  | 限制该字段的数据不能为null  | NOT NULL  |\n| 唯一约束  | 保证该字段的所有数据都是唯一、不重复的  | UNIQUE  |\n| 主键约束  | 主键是一行数据的唯一标识，要求非空且唯一  | PRIMARY KEY  |\n| 默认约束  | 保存数据时，如果未指定该字段的值，则采用默认值  | DEFAULT  |\n| 检查约束（8.0.1版本后）  | 保证字段值满足某一个条件  | CHECK  |\n| 外键约束  | 用来让两张图的数据之间建立连接，保证数据的一致性和完整性  | FOREIGN KEY  |\n\n约束是作用于表中字段上的，可以再创建表/修改表的时候添加约束。\n\n### 常用约束\n\n| 约束条件  | 关键字  |\n| ------------ | ------------ |\n| 主键  | PRIMARY KEY  |\n| 自动增长  | AUTO_INCREMENT  |\n| 不为空  | NOT NULL  |\n| 唯一  | UNIQUE  |\n| 逻辑条件  | CHECK  |\n| 默认值  | DEFAULT  |\n\n例子：\n\n```mysql\ncreate table user(\n\tid int primary key auto_increment,\n\tname varchar(10) not null unique,\n\tage int check(age > 0 and age < 120),\n\tstatus char(1) default '1',\n\tgender char(1)\n);\n```\n\n### 外键约束\n\n添加外键：\n\n```mysql\nCREATE TABLE 表名(\n\t字段名 字段类型,\n\t...\n\t[CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名)\n);\nALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);\n\n-- 例子\nalter table emp add constraint fk_emp_dept_id foreign key(dept_id) references dept(id);\n```\n\n删除外键：\n`ALTER TABLE 表名 DROP FOREIGN KEY 外键名;`\n\n#### 删除/更新行为\n\n| 行为  | 说明  |\n| ------------ | ------------ |\n| NO ACTION  | 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与RESTRICT一致）  |\n| RESTRICT  | 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与NO ACTION一致）  |\n| CASCADE  | 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除/更新外键在子表中的记录  |\n| SET NULL  | 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（要求该外键允许为null）  |\n| SET DEFAULT  | 父表有变更时，子表将外键设为一个默认值（Innodb不支持）  |\n\n更改删除/更新行为：\n`ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为;`\n\n## 多表查询\n\n### 多表关系\n\n- 一对多（多对一）\n- 多对多\n- 一对一\n\n#### 一对多\n\n案例：部门与员工\n关系：一个部门对应多个员工，一个员工对应一个部门\n实现：在多的一方建立外键，指向一的一方的主键\n\n#### 多对多\n\n案例：学生与课程\n关系：一个学生可以选多门课程，一门课程也可以供多个学生选修\n实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键\n\n#### 一对一\n\n案例：用户与用户详情\n关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率\n实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）\n\n### 查询\n\n合并查询（笛卡尔积，会展示所有组合结果）：\n`select * from employee, dept;`\n\n> 笛卡尔积：两个集合A集合和B集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）\n\n消除无效笛卡尔积：\n`select * from employee, dept where employee.dept = dept.id;`\n\n### 内连接查询\n\n内连接查询的是两张表交集的部分\n\n隐式内连接：\n`SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;`\n\n显式内连接：\n`SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;`\n\n显式性能比隐式高\n\n例子：\n\n```mysql\n-- 查询员工姓名，及关联的部门的名称\n-- 隐式\nselect e.name, d.name from employee as e, dept as d where e.dept = d.id;\n-- 显式\nselect e.name, d.name from employee as e inner join dept as d on e.dept = d.id;\n```\n\n### 外连接查询\n\n左外连接：\n查询左表所有数据，以及两张表交集部分数据\n`SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;`\n相当于查询表1的所有数据，包含表1和表2交集部分数据\n\n右外连接：\n查询右表所有数据，以及两张表交集部分数据\n`SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;`\n\n例子：\n\n```mysql\n-- 左\nselect e.*, d.name from employee as e left outer join dept as d on e.dept = d.id;\nselect d.name, e.* from dept d left outer join emp e on e.dept = d.id;  -- 这条语句与下面的语句效果一样\n-- 右\nselect d.name, e.* from employee as e right outer join dept as d on e.dept = d.id;\n```\n\n左连接可以查询到没有dept的employee，右连接可以查询到没有employee的dept\n\n### 自连接查询\n\n当前表与自身的连接查询，自连接必须使用表别名\n\n语法：\n`SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;`\n\n自连接查询，可以是内连接查询，也可以是外连接查询\n\n例子：\n\n```mysql\n-- 查询员工及其所属领导的名字\nselect a.name, b.name from employee a, employee b where a.manager = b.id;\n-- 没有领导的也查询出来\nselect a.name, b.name from employee a left join employee b on a.manager = b.id;\n```\n\n### 联合查询 union, union all\n\n把多次查询的结果合并，形成一个新的查询集\n\n语法：\n\n```mysql\nSELECT 字段列表 FROM 表A ...\nUNION [ALL]\nSELECT 字段列表 FROM 表B ...\n```\n\n#### 注意事项\n\n- UNION ALL 会有重复结果，UNION 不会\n- 联合查询比使用or效率高，不会使索引失效\n\n### 子查询\n\nSQL语句中嵌套SELECT语句，称谓嵌套查询，又称子查询。\n`SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);`\n**子查询外部的语句可以是 INSERT / UPDATE / DELETE / SELECT 的任何一个**\n\n根据子查询结果可以分为：\n\n- 标量子查询（子查询结果为单个值）\n- 列子查询（子查询结果为一列）\n- 行子查询（子查询结果为一行）\n- 表子查询（子查询结果为多行多列）\n\n根据子查询位置可分为：\n\n- WHERE 之后\n- FROM 之后\n- SELECT 之后\n\n#### 标量子查询\n\n子查询返回的结果是单个值（数字、字符串、日期等）。\n常用操作符：- < > > >= < <=\n\n例子：\n\n```mysql\n-- 查询销售部所有员工\nselect id from dept where name = '销售部';\n-- 根据销售部部门ID，查询员工信息\nselect * from employee where dept = 4;\n-- 合并（子查询）\nselect * from employee where dept = (select id from dept where name = '销售部');\n\n-- 查询xxx入职之后的员工信息\nselect * from employee where entrydate > (select entrydate from employee where name = 'xxx');\n```\n\n#### 列子查询\n\n返回的结果是一列（可以是多行）。\n\n常用操作符：\n\n| 操作符  | 描述  |\n| ------------ | ------------ |\n| IN  | 在指定的集合范围内，多选一  |\n| NOT IN  | 不在指定的集合范围内  |\n| ANY  | 子查询返回列表中，有任意一个满足即可  |\n| SOME  | 与ANY等同，使用SOME的地方都可以使用ANY  |\n| ALL  | 子查询返回列表的所有值都必须满足  |\n\n例子：\n\n```mysql\n-- 查询销售部和市场部的所有员工信息\nselect * from employee where dept in (select id from dept where name = '销售部' or name = '市场部');\n-- 查询比财务部所有人工资都高的员工信息\nselect * from employee where salary > all(select salary from employee where dept = (select id from dept where name = '财务部'));\n-- 查询比研发部任意一人工资高的员工信息\nselect * from employee where salary > any (select salary from employee where dept = (select id from dept where name = '研发部'));\n```\n\n#### 行子查询\n\n返回的结果是一行（可以是多列）。\n常用操作符：=, <, >, IN, NOT IN\n\n例子：\n\n```mysql\n-- 查询与xxx的薪资及直属领导相同的员工信息\nselect * from employee where (salary, manager) = (12500, 1);\nselect * from employee where (salary, manager) = (select salary, manager from employee where name = 'xxx');\n```\n\n#### 表子查询\n\n返回的结果是多行多列\n常用操作符：IN\n\n例子：\n\n```mysql\n-- 查询与xxx1，xxx2的职位和薪资相同的员工\nselect * from employee where (job, salary) in (select job, salary from employee where name = 'xxx1' or name = 'xxx2');\n-- 查询入职日期是2006-01-01之后的员工，及其部门信息\nselect e.*, d.* from (select * from employee where entrydate > '2006-01-01') as e left join dept as d on e.dept = d.id;\n```\n\n## 事务\n\n事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。\n\n基本操作：\n\n```mysql\n-- 1. 查询张三账户余额\nselect * from account where name = '张三';\n-- 2. 将张三账户余额-1000\nupdate account set money = money - 1000 where name = '张三';\n-- 此语句出错后张三钱减少但是李四钱没有增加\n模拟sql语句错误\n-- 3. 将李四账户余额+1000\nupdate account set money = money + 1000 where name = '李四';\n\n-- 查看事务提交方式\nSELECT @@AUTOCOMMIT;\n-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效\nSET @@AUTOCOMMIT = 0;\n-- 提交事务\nCOMMIT;\n-- 回滚事务\nROLLBACK;\n\n-- 设置手动提交后上面代码改为：\nselect * from account where name = '张三';\nupdate account set money = money - 1000 where name = '张三';\nupdate account set money = money + 1000 where name = '李四';\ncommit;\n```\n\n操作方式二：\n\n开启事务：\n`START TRANSACTION 或 BEGIN TRANSACTION;`\n提交事务：\n`COMMIT;`\n回滚事务：\n`ROLLBACK;`\n\n操作实例：\n\n```mysql\nstart transaction;\nselect * from account where name = '张三';\nupdate account set money = money - 1000 where name = '张三';\nupdate account set money = money + 1000 where name = '李四';\ncommit;\n```\n\n### 四大特性ACID\n\n- 原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败\n- 一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态\n- 隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行\n- 持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的\n\n### 并发事务\n\n| 问题  | 描述  |\n| ------------ | ------------ |\n| 脏读  | 一个事务读到另一个事务还没提交的数据  |\n| 不可重复读  | 一个事务先后读取同一条记录，但两次读取的数据不同  |\n| 幻读  | 一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在  |\n\n> 这三个问题的详细演示：https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd \n\n并发事务隔离级别：\n\n| 隔离级别  | 脏读  | 不可重复读  | 幻读  |\n| ------------ | ------------ | ------------ | ------------ |\n| Read uncommitted  | √  | √  | √  |\n| Read committed  | ×  | √  | √  |\n| Repeatable Read(默认)  | ×  | ×  | √  |\n| Serializable  | ×  | ×  | ×  |\n\n- √表示在当前隔离级别下该问题会出现\n- Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差\n\n查看事务隔离级别：\n`SELECT @@TRANSACTION_ISOLATION;`\n设置事务隔离级别：\n`SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE };`\nSESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效\n\n# 进阶篇\n\n## 存储引擎\n\nMySQL体系结构：\n\n![结构图](https://dhc.pythonanywhere.com/media/editor/MySQL体系结构_20220315034329549927.png \"结构图\")\n![层级描述](https://dhc.pythonanywhere.com/media/editor/MySQL体系结构层级含义_20220315034359342837.png \"层级描述\")\n\n存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。\n默认存储引擎是InnoDB。\n\n相关操作：\n\n```mysql\n-- 查询建表语句\nshow create table account;\n-- 建表时指定存储引擎\nCREATE TABLE 表名(\n\t...\n) ENGINE=INNODB;\n-- 查看当前数据库支持的存储引擎\nshow engines;\n```\n\n### InnoDB\n\nInnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。\n\n特点：\n\n- DML 操作遵循 ACID 模型，支持**事务**\n- **行级锁**，提高并发访问性能\n- 支持**外键**约束，保证数据的完整性和正确性\n\n文件：\n\n- xxx.ibd: xxx代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。\n\n参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间\n\n知识点：\n\n查看 Mysql 变量：\n`show variables like 'innodb_file_per_table';`\n\n从idb文件提取表结构数据：\n（在cmd运行）\n`ibd2sdi xxx.ibd`\n\nInnoDB 逻辑存储结构：\n![InnoDB逻辑存储结构](https://dhc.pythonanywhere.com/media/editor/逻辑存储结构_20220316030616590001.png \"InnoDB逻辑存储结构\")\n\n### MyISAM\n\nMyISAM 是 MySQL 早期的默认存储引擎。\n\n特点：\n\n- 不支持事务，不支持外键\n- 支持表锁，不支持行锁\n- 访问速度快\n\n文件：\n\n- xxx.sdi: 存储表结构信息\n- xxx.MYD: 存储数据\n- xxx.MYI: 存储索引\n\n### Memory\n\nMemory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。\n\n特点：\n\n- 存放在内存中，速度快\n- hash索引（默认）\n\n文件：\n\n- xxx.sdi: 存储表结构信息\n\n### 存储引擎特点\n\n| 特点  | InnoDB  | MyISAM  | Memory  |\n| ------------ | ------------ | ------------ | ------------ |\n| 存储限制  | 64TB  | 有  | 有  |\n| 事务安全  | 支持  | -  | -  |\n| 锁机制  | 行锁  | 表锁  | 表锁  |\n| B+tree索引  | 支持  | 支持  | 支持  |\n| Hash索引  | -  | -  | 支持  |\n| 全文索引  | 支持（5.6版本之后）  | 支持  | -  |\n| 空间使用  | 高  | 低  | N/A  |\n| 内存使用  | 高  | 低  | 中等  |\n| 批量插入速度  | 低  | 高  | 高  |\n| 支持外键  | 支持  | -  | -  |\n\n### 存储引擎的选择\n\n在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。\n\n- InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择\n- MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。\n- Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性\n\n电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。\n\n## 性能分析\n\n### 查看执行频次\n\n查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：\n`SHOW GLOBAL STATUS LIKE 'Com_______';` 或者 `SHOW SESSION STATUS LIKE 'Com_______';`\n例：`show global status like 'Com_______'`\n\n### 慢查询日志\n\n慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。\nMySQL的慢查询日志默认没有开启，需要在MySQL的配置文件（/etc/my.cnf）中配置如下信息：\n\t# 开启慢查询日志开关\n\tslow_query_log=1\n\t# 设置慢查询日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志\n\tlong_query_time=2\n更改后记得重启MySQL服务，日志文件位置：/var/lib/mysql/localhost-slow.log\n\n查看慢查询日志开关状态：\n`show variables like 'slow_query_log';`\n\n### profile\n\nshow profile 能在做SQL优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：\n`SELECT @@have_profiling;`\nprofiling 默认关闭，可以通过set语句在session/global级别开启 profiling：\n`SET profiling = 1;`\n查看所有语句的耗时：\n`show profiles;`\n查看指定query_id的SQL语句各个阶段的耗时：\n`show profile for query query_id;`\n查看指定query_id的SQL语句CPU的使用情况\n`show profile cpu for query query_id;`\n\n### explain\n\nEXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。\n语法：\n\t# 直接在select语句之前加上关键字 explain / desc\n\tEXPLAIN SELECT 字段列表 FROM 表名 HWERE 条件;\n\nEXPLAIN 各字段含义：\n\n- id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id相同，执行顺序从上到下；id不同，值越大越先执行）\n- select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（SELECT/WHERE之后包含了子查询）等\n- type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all\n- possible_key：可能应用在这张表上的索引，一个或多个\n- Key：实际使用的索引，如果为 NULL，则没有使用索引\n- Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好\n- rows：MySQL认为必须要执行的行数，在InnoDB引擎的表中，是一个估计值，可能并不总是准确的\n- filtered：表示返回结果的行数占需读取行数的百分比，filtered的值越大越好\n\n## 索引\n\n索引是帮助 MySQL **高效获取数据**的**数据结构（有序）**。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。\n\n优缺点：\n\n优点：\n\n- 提高数据检索效率，降低数据库的IO成本\n- 通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗\n\n缺点：\n\n- 索引列也是要占用空间的\n- 索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE\n\n### 索引结构\n\n| 索引结构  | 描述  |\n| ------------ | ------------ |\n| B+Tree  | 最常见的索引类型，大部分引擎都支持B+树索引  |\n| Hash  | 底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询  |\n| R-Tree(空间索引)  | 空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少  |\n| Full-Text(全文索引)  | 是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES  |\n\n| 索引  | InnoDB  | MyISAM  | Memory  |\n| ------------ | ------------ | ------------ | ------------ |\n| B+Tree索引  | 支持  | 支持  | 支持  |\n| Hash索引  | 不支持  | 不支持  | 支持  |\n| R-Tree索引  | 不支持  | 支持  | 不支持  |\n| Full-text  | 5.6版本后支持  | 支持  | 不支持  |\n\n#### B-Tree\n\n![二叉树](https://dhc.pythonanywhere.com/media/editor/二叉树_20220316153214227108.png \"二叉树\")\n\n二叉树的缺点可以用红黑树来解决：\n![红黑树](https://dhc.pythonanywhere.com/media/editor/红黑树_20220316163142686602.png \"红黑树\")\n红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。\n\n为了解决上述问题，可以使用 B-Tree 结构。\nB-Tree (多路平衡查找树) 以一棵最大度数（max-degree，指一个节点的子节点个数）为5（5阶）的 b-tree 为例（每个节点最多存储4个key，5个指针）\n\n![B-Tree结构](https://dhc.pythonanywhere.com/media/editor/B-Tree结构_20220316163813441163.png \"B-Tree结构\")\n\n> B-Tree 的数据插入过程动画参照：https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68\n演示地址：https://www.cs.usfca.edu/~galles/visualization/BTree.html\n\n#### B+Tree\n\n结构图：\n\n![B+Tree结构图](https://dhc.pythonanywhere.com/media/editor/B+Tree结构图_20220316170700591277.png \"B+Tree结构图\")\n\n> 演示地址：https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html\n\n与 B-Tree 的区别：\n\n- 所有的数据都会出现在叶子节点\n- 叶子节点形成一个单向链表\n\nMySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。\n\n![MySQL B+Tree 结构图](https://dhc.pythonanywhere.com/media/editor/结构图_20220316171730865611.png \"MySQL B+Tree 结构图\")\n\n#### Hash\n\n哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。\n如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可以通过链表来解决。\n\n![Hash索引原理图](https://dhc.pythonanywhere.com/media/editor/Hash索引原理图_20220317143226150679.png \"Hash索引原理图\")\n\n特点：\n\n- Hash索引只能用于对等比较（=、in），不支持范围查询（betwwn、>、<、...）\n- 无法利用索引完成排序操作\n- 查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引\n\n存储引擎支持：\n\n- Memory\n- InnoDB: 具有自适应hash功能，hash索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的\n\n#### 面试题\n\n1. 为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？\n\n- 相对于二叉树，层级更少，搜索效率高\n- 对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低\n- 相对于 Hash 索引，B+Tree 支持范围匹配及排序操作\n\n### 索引分类\n\n| 分类  | 含义  | 特点  | 关键字  |\n| ------------ | ------------ | ------------ | ------------ |\n| 主键索引  | 针对于表中主键创建的索引  | 默认自动创建，只能有一个  | PRIMARY  |\n| 唯一索引  | 避免同一个表中某数据列中的值重复  | 可以有多个  | UNIQUE  |\n| 常规索引  | 快速定位特定数据  | 可以有多个  |   |\n| 全文索引  | 全文索引查找的是文本中的关键词，而不是比较索引中的值  | 可以有多个  | FULLTEXT  |\n\n在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：\n\n| 分类  | 含义  | 特点  |\n| ------------ | ------------ | ------------ |\n| 聚集索引(Clustered Index)  | 将数据存储与索引放一块，索引结构的叶子节点保存了行数据  | 必须有，而且只有一个  |\n| 二级索引(Secondary Index)  | 将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键  | 可以存在多个  |\n\n演示图：\n\n![大致原理](https://dhc.pythonanywhere.com/media/editor/原理图_20220318194454880073.png \"大致原理\")\n![演示图](https://dhc.pythonanywhere.com/media/editor/演示图_20220319215403721066.png \"演示图\")\n\n聚集索引选取规则：\n\n- 如果存在主键，主键索引就是聚集索引\n- 如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引\n- 如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引\n\n#### 思考题\n\n1\\. 以下 SQL 语句，哪个执行效率高？为什么？\n\n```mysql\nselect * from user where id = 10;\nselect * from user where name = 'Arm';\n-- 备注：id为主键，name字段创建的有索引\n```\n\n答：第一条语句，因为第二条需要回表查询，相当于两个步骤。\n\n2\\. InnoDB 主键索引的 B+Tree 高度为多少？\n\n答：假设一行数据大小为1k，一页中可以存储16行这样的数据。InnoDB 的指针占用6个字节的空间，主键假设为bigint，占用字节数为8.\n可得公式：`n * 8 + (n + 1) * 6 = 16 * 1024`，其中 8 表示 bigint 占用的字节数，n 表示当前节点存储的key的数量，(n + 1) 表示指针数量（比key多一个）。算出n约为1170。\n\n如果树的高度为2，那么他能存储的数据量大概为：`1171 * 16 = 18736`；\n如果树的高度为3，那么他能存储的数据量大概为：`1171 * 1171 * 16 = 21939856`。\n\n另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。\n\n### 语法\n\n创建索引：\n`CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...);`\n如果不加 CREATE 后面不加索引类型参数，则创建的是常规索引\n\n查看索引：\n`SHOW INDEX FROM table_name;`\n\n删除索引：\n`DROP INDEX index_name ON table_name;`\n\n案例：\n\n```mysql\n-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引\ncreate index idx_user_name on tb_user(name);\n-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引\ncreate unique index idx_user_phone on tb_user (phone);\n-- 为profession, age, status创建联合索引\ncreate index idx_user_pro_age_stat on tb_user(profession, age, status);\n-- 为email建立合适的索引来提升查询效率\ncreate index idx_user_email on tb_user(email);\n\n-- 删除索引\ndrop index idx_user_email on tb_user;\n```\n\n### 使用规则\n\n#### 最左前缀法则\n\n如果索引关联了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。\n如果跳跃某一列，索引将部分失效（后面的字段索引失效）。\n\n联合索引中，出现范围查询（<, >），范围查询右侧的列索引失效。可以用>=或者<=来规避索引失效问题。\n\n#### 索引失效情况\n\n1. 在索引列上进行运算操作，索引将失效。如：`explain select * from tb_user where substring(phone, 10, 2) = '15';`\n2. 字符串类型字段使用时，不加引号，索引将失效。如：`explain select * from tb_user where phone = 17799990015;`，此处phone的值没有加引号\n3. 模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如：`explain select * from tb_user where profession like '%工程';`，前后都有 % 也会失效。\n4. 用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。\n5. 如果 MySQL 评估使用索引比全表更慢，则不使用索引。\n\n#### SQL 提示\n\n是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。\n\n例如，使用索引：\n`explain select * from tb_user use index(idx_user_pro) where profession=\"软件工程\";`\n不使用哪个索引：\n`explain select * from tb_user ignore index(idx_user_pro) where profession=\"软件工程\";`\n必须使用哪个索引：\n`explain select * from tb_user force index(idx_user_pro) where profession=\"软件工程\";`\n\nuse 是建议，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，force就是无论如何都强制使用该索引。\n\n#### 覆盖索引&回表查询\n\n尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。\n\nexplain 中 extra 字段含义：\n`using index condition`：查找使用了索引，但是需要回表查询数据\n`using where; using index;`：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询\n\n如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是select \\*；如果在辅助索引中找聚集索引，如`select id, name from xxx where name='xxx';`，也只需要通过辅助索引(name)查找到对应的id，返回name和name索引对应的id即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如`select id, name, gender from xxx where name='xxx';`\n\n所以尽量不要用`select *`，容易出现回表查询，降低效率，除非有联合索引包含了所有字段\n\n面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下SQL语句进行优化，该如何进行才是最优方案：\n`select id, username, password from tb_user where username='itcast';`\n\n解：给username和password字段建立联合索引，则不需要回表查询，直接覆盖索引\n\n#### 前缀索引\n\n当字段类型为字符串（varchar, text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。\n\n语法：`create index idx_xxxx on table_name(columnn(n));`\n前缀长度：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。\n求选择性公式：\n```mysql\nselect count(distinct email) / count(*) from tb_user;\nselect count(distinct substring(email, 1, 5)) / count(*) from tb_user;\n```\n\nshow index 里面的sub_part可以看到接取的长度\n\n#### 单列索引&联合索引\n\n单列索引：即一个索引只包含单个列\n联合索引：即一个索引包含了多个列\n在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。\n\n单列索引情况：\n`explain select id, phone, name from tb_user where phone = '17799990010' and name = '韩信';`\n这句只会用到phone索引字段\n\n##### 注意事项\n\n- 多条件联合查询时，MySQL优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询\n\n### 设计原则\n\n1. 针对于数据量较大，且查询比较频繁的表建立索引\n2. 针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引\n3. 尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高\n4. 如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引\n5. 尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率\n6. 要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率\n7. 如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询\n\n## SQL 优化\n\n### 插入数据\n\n普通插入：\n\n1. 采用批量插入（一次插入的数据不建议超过1000条）\n2. 手动提交事务\n3. 主键顺序插入\n\n大批量插入：\n如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令插入。\n\n```mysql\n# 客户端连接服务端时，加上参数 --local-infile（这一行在bash/cmd界面输入）\nmysql --local-infile -u root -p\n# 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关\nset global local_infile = 1;\nselect @@local_infile;\n# 执行load指令将准备好的数据，加载到表结构中\nload data local infile '/root/sql1.log' into table 'tb_user' fields terminated by ',' lines terminated by '\\n';\n```\n\n### 主键优化\n\n数据组织方式：在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（Index organized table, IOT）\n\n页分裂：页可以为空，也可以填充一般，也可以填充100%，每个页包含了2-N行数据（如果一行数据过大，会行溢出），根据主键排列。\n页合并：当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录到达 MERGE_THRESHOLD（默认为页的50%），InnoDB会开始寻找最靠近的页（前后）看看是否可以将这两个页合并以优化空间使用。\n\nMERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或创建索引时指定\n\n> 文字说明不够清晰明了，具体可以看视频里的PPT演示过程：https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90\n\n主键设计原则：\n\n- 满足业务需求的情况下，尽量降低主键的长度\n- 插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键\n- 尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号\n- 业务操作时，避免对主键的修改\n\n### order by优化\n\n1. Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序\n2. Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高\n\n如果order by字段全部使用升序排序或者降序排序，则都会走索引，但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain的extra信息显示的是`Using index, Using filesort`，如果要优化掉Using filesort，则需要另外再创建一个索引，如：`create index idx_user_age_phone_ad on tb_user(age asc, phone desc);`，此时使用`select id, age, phone from tb_user order by age asc, phone desc;`会全部走索引\n\n总结：\n\n- 根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则\n- 尽量使用覆盖索引\n- 多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC/DESC）\n- 如果不可避免出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认256k）\n\n### group by优化\n\n- 在分组操作时，可以通过索引来提高效率\n- 分组操作时，索引的使用也是满足最左前缀法则的\n\n如索引为`idx_user_pro_age_stat`，则句式可以是`select ... where profession order by age`，这样也符合最左前缀法则\n\n### limit优化\n\n常见的问题如`limit 2000000, 10`，此时需要 MySQL 排序前2000000条记录，但仅仅返回2000000 - 2000010的记录，其他记录丢弃，查询排序的代价非常大。\n优化方案：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化\n\n例如：\n\n```mysql\n-- 此语句耗时很长\nselect * from tb_sku limit 9000000, 10;\n-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询\nselect id from tb_sku order by id limit 9000000, 10;\n-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit\n-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);\n-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度\nselect * from tb_sku as s, (select id from tb_sku order by id limit 9000000, 10) as a where s.id = a.id;\n```\n\n### count优化\n\nMyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(\\*) 的时候会直接返回这个数，效率很高（前提是不适用where）；\nInnoDB 在执行 count(\\*) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。\n优化方案：自己计数，如创建key-value表存储在内存或硬盘，或者是用redis\n\ncount的几种用法：\n\n- 如果count函数的参数（count里面写的那个字段）不是NULL（字段值不为NULL），累计值就加一，最后返回累计值\n- 用法：count(\\*)、count(主键)、count(字段)、count(1)\n- count(主键)跟count(\\*)一样，因为主键不能为空；count(字段)只计算字段值不为NULL的行；count(1)引擎会为每行添加一个1，然后就count这个1，返回结果也跟count(\\*)一样；count(null)返回0\n\n各种用法的性能：\n\n- count(主键)：InnoDB引擎会遍历整张表，把每行的主键id值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）\n- count(字段)：没有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加；有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加\n- count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加\n- count(\\*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加\n\n按效率排序：count(字段) < count(主键) < count(1) < count(\\*)，所以尽量使用 count(\\*)\n\n### update优化（避免行锁升级为表锁）\n\nInnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。\n\n如以下两条语句：\n`update student set no = '123' where id = 1;`，这句由于id有主键索引，所以只会锁这一行；\n`update student set no = '123' where name = 'test';`，这句由于name没有索引，所以会把整张表都锁住进行数据更新，解决方法是给name字段添加索引\n\n# 数据类型\n\n## 整型\n\n| 类型名称      | 取值范围                                  | 大小    |\n| ------------- | ----------------------------------------- | ------- |\n| TINYINT       | -128〜127                                 | 1个字节 |\n| SMALLINT      | -32768〜32767                             | 2个宇节 |\n| MEDIUMINT     | -8388608〜8388607                         | 3个字节 |\n| INT (INTEGHR) | -2147483648〜2147483647                   | 4个字节 |\n| BIGINT        | -9223372036854775808〜9223372036854775807 | 8个字节 |\n\n无符号在数据类型后加 unsigned 关键字。\n\n## 浮点型\n\n| 类型名称            | 说明               | 存储需求   |\n| ------------------- | ------------------ | ---------- |\n| FLOAT               | 单精度浮点数       | 4 个字节   |\n| DOUBLE              | 双精度浮点数       | 8 个字节   |\n| DECIMAL (M, D)，DEC | 压缩的“严格”定点数 | M+2 个字节 |\n\n## 日期和时间\n\n| 类型名称  | 日期格式            | 日期范围                                          | 存储需求 |\n| --------- | ------------------- | ------------------------------------------------- | -------- |\n| YEAR      | YYYY                | 1901 ~ 2155                                       | 1 个字节 |\n| TIME      | HH:MM:SS            | -838:59:59 ~ 838:59:59                            | 3 个字节 |\n| DATE      | YYYY-MM-DD          | 1000-01-01 ~ 9999-12-3                            | 3 个字节 |\n| DATETIME  | YYYY-MM-DD HH:MM:SS | 1000-01-01 00:00:00 ~ 9999-12-31 23:59:59         | 8 个字节 |\n| TIMESTAMP | YYYY-MM-DD HH:MM:SS | 1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC | 4 个字节 |\n\n## 字符串\n\n| 类型名称   | 说明                                         | 存储需求                                                   |\n| ---------- | -------------------------------------------- | ---------------------------------------------------------- |\n| CHAR(M)    | 固定长度非二进制字符串                       | M 字节，1<=M<=255                                          |\n| VARCHAR(M) | 变长非二进制字符串                           | L+1字节，在此，L< = M和 1<=M<=255                          |\n| TINYTEXT   | 非常小的非二进制字符串                       | L+1字节，在此，L<2^8                                       |\n| TEXT       | 小的非二进制字符串                           | L+2字节，在此，L<2^16                                      |\n| MEDIUMTEXT | 中等大小的非二进制字符串                     | L+3字节，在此，L<2^24                                      |\n| LONGTEXT   | 大的非二进制字符串                           | L+4字节，在此，L<2^32                                      |\n| ENUM       | 枚举类型，只能有一个枚举字符串值             | 1或2个字节，取决于枚举值的数目 (最大值为65535)             |\n| SET        | 一个设置，字符串对象可以有零个或 多个SET成员 | 1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员） |\n\n## 二进制类型\n\n| 类型名称       | 说明                 | 存储需求               |\n| -------------- | -------------------- | ---------------------- |\n| BIT(M)         | 位字段类型           | 大约 (M+7)/8 字节      |\n| BINARY(M)      | 固定长度二进制字符串 | M 字节                 |\n| VARBINARY (M)  | 可变长度二进制字符串 | M+1 字节               |\n| TINYBLOB (M)   | 非常小的BLOB         | L+1 字节，在此，L<2^8  |\n| BLOB (M)       | 小 BLOB              | L+2 字节，在此，L<2^16 |\n| MEDIUMBLOB (M) | 中等大小的BLOB       | L+3 字节，在此，L<2^24 |\n| LONGBLOB (M)   | 非常大的BLOB         | L+4 字节，在此，L<2^32 |\n\n# 权限一览表\n\n> 具体权限的作用详见[官方文档](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html \"官方文档\")\n\nGRANT 和 REVOKE 允许的静态权限\n\n| Privilege                                                    | Grant Table Column           | Context                               |\n| :----------------------------------------------------------- | :--------------------------- | :------------------------------------ |\n| [`ALL [PRIVILEGES]`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_all) | Synonym for “all privileges” | Server administration                 |\n| [`ALTER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter) | `Alter_priv`                 | Tables                                |\n| [`ALTER ROUTINE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter-routine) | `Alter_routine_priv`         | Stored routines                       |\n| [`CREATE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create) | `Create_priv`                | Databases, tables, or indexes         |\n| [`CREATE ROLE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-role) | `Create_role_priv`           | Server administration                 |\n| [`CREATE ROUTINE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-routine) | `Create_routine_priv`        | Stored routines                       |\n| [`CREATE TABLESPACE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-tablespace) | `Create_tablespace_priv`     | Server administration                 |\n| [`CREATE TEMPORARY TABLES`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-temporary-tables) | `Create_tmp_table_priv`      | Tables                                |\n| [`CREATE USER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-user) | `Create_user_priv`           | Server administration                 |\n| [`CREATE VIEW`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-view) | `Create_view_priv`           | Views                                 |\n| [`DELETE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_delete) | `Delete_priv`                | Tables                                |\n| [`DROP`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop) | `Drop_priv`                  | Databases, tables, or views           |\n| [`DROP ROLE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop-role) | `Drop_role_priv`             | Server administration                 |\n| [`EVENT`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_event) | `Event_priv`                 | Databases                             |\n| [`EXECUTE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_execute) | `Execute_priv`               | Stored routines                       |\n| [`FILE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_file) | `File_priv`                  | File access on server host            |\n| [`GRANT OPTION`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_grant-option) | `Grant_priv`                 | Databases, tables, or stored routines |\n| [`INDEX`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_index) | `Index_priv`                 | Tables                                |\n| [`INSERT`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_insert) | `Insert_priv`                | Tables or columns                     |\n| [`LOCK TABLES`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_lock-tables) | `Lock_tables_priv`           | Databases                             |\n| [`PROCESS`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_process) | `Process_priv`               | Server administration                 |\n| [`PROXY`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_proxy) | See `proxies_priv` table     | Server administration                 |\n| [`REFERENCES`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_references) | `References_priv`            | Databases or tables                   |\n| [`RELOAD`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_reload) | `Reload_priv`                | Server administration                 |\n| [`REPLICATION CLIENT`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-client) | `Repl_client_priv`           | Server administration                 |\n| [`REPLICATION SLAVE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave) | `Repl_slave_priv`            | Server administration                 |\n| [`SELECT`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_select) | `Select_priv`                | Tables or columns                     |\n| [`SHOW DATABASES`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-databases) | `Show_db_priv`               | Server administration                 |\n| [`SHOW VIEW`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-view) | `Show_view_priv`             | Views                                 |\n| [`SHUTDOWN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_shutdown) | `Shutdown_priv`              | Server administration                 |\n| [`SUPER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_super) | `Super_priv`                 | Server administration                 |\n| [`TRIGGER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_trigger) | `Trigger_priv`               | Tables                                |\n| [`UPDATE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_update) | `Update_priv`                | Tables or columns                     |\n| [`USAGE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_usage) | Synonym for “no privileges”  | Server administration                 |\n\nGRANT 和 REVOKE 允许的动态权限\n\n| Privilege                                                    | Context                                           |\n| :----------------------------------------------------------- | :------------------------------------------------ |\n| [`APPLICATION_PASSWORD_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_application-password-admin) | Dual password administration                      |\n| [`AUDIT_ABORT_EXEMPT`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-abort-exempt) | Allow queries blocked by audit log filter         |\n| [`AUDIT_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-admin) | Audit log administration                          |\n| [`AUTHENTICATION_POLICY_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_authentication-policy-admin) | Authentication administration                     |\n| [`BACKUP_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_backup-admin) | Backup administration                             |\n| [`BINLOG_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-admin) | Backup and Replication administration             |\n| [`BINLOG_ENCRYPTION_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-encryption-admin) | Backup and Replication administration             |\n| [`CLONE_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_clone-admin) | Clone administration                              |\n| [`CONNECTION_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_connection-admin) | Server administration                             |\n| [`ENCRYPTION_KEY_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_encryption-key-admin) | Server administration                             |\n| [`FIREWALL_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-admin) | Firewall administration                           |\n| [`FIREWALL_EXEMPT`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-exempt) | Firewall administration                           |\n| [`FIREWALL_USER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-user) | Firewall administration                           |\n| [`FLUSH_OPTIMIZER_COSTS`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-optimizer-costs) | Server administration                             |\n| [`FLUSH_STATUS`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-status) | Server administration                             |\n| [`FLUSH_TABLES`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-tables) | Server administration                             |\n| [`FLUSH_USER_RESOURCES`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-user-resources) | Server administration                             |\n| [`GROUP_REPLICATION_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-admin) | Replication administration                        |\n| [`GROUP_REPLICATION_STREAM`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-stream) | Replication administration                        |\n| [`INNODB_REDO_LOG_ARCHIVE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_innodb-redo-log-archive) | Redo log archiving administration                 |\n| [`NDB_STORED_USER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_ndb-stored-user) | NDB Cluster                                       |\n| [`PASSWORDLESS_USER_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_passwordless-user-admin) | Authentication administration                     |\n| [`PERSIST_RO_VARIABLES_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_persist-ro-variables-admin) | Server administration                             |\n| [`REPLICATION_APPLIER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-applier) | `PRIVILEGE_CHECKS_USER` for a replication channel |\n| [`REPLICATION_SLAVE_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave-admin) | Replication administration                        |\n| [`RESOURCE_GROUP_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-admin) | Resource group administration                     |\n| [`RESOURCE_GROUP_USER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-user) | Resource group administration                     |\n| [`ROLE_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_role-admin) | Server administration                             |\n| [`SESSION_VARIABLES_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_session-variables-admin) | Server administration                             |\n| [`SET_USER_ID`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_set-user-id) | Server administration                             |\n| [`SHOW_ROUTINE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-routine) | Server administration                             |\n| [`SYSTEM_USER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-user) | Server administration                             |\n| [`SYSTEM_VARIABLES_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-variables-admin) | Server administration                             |\n| [`TABLE_ENCRYPTION_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_table-encryption-admin) | Server administration                             |\n| [`VERSION_TOKEN_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_version-token-admin) | Server administration                             |\n| [`XA_RECOVER_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_xa-recover-admin) | Server administration                             |\n\n# 图形化界面工具\n\n- Workbench(免费): http://dev.mysql.com/downloads/workbench/\n- navicat(收费，试用版30天): https://www.navicat.com/en/download/navicat-for-mysql\n- Sequel Pro(开源免费，仅支持Mac OS): http://www.sequelpro.com/\n- HeidiSQL(免费): http://www.heidisql.com/\n- phpMyAdmin(免费): https://www.phpmyadmin.net/\n- SQLyog: https://sqlyog.en.softonic.com/\n\n# 安装\n\n# 小技巧\n\n1. 在SQL语句之后加上`\\G`会将结果的表格形式转换成行文本形式\n2. 查看Mysql数据库占用空间：\n```mysql\nSELECT table_schema \"Database Name\"\n     , SUM(data_length + index_length) / (1024 * 1024) \"Database Size in MB\"\nFROM information_schema.TABLES\nGROUP BY table_schema;\n```\n","slug":"MySql","published":1,"updated":"2022-09-07T05:03:43.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jba2h00ap7svw0n9smx5i","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"基础篇\"><a href=\"#基础篇\" class=\"headerlink\" title=\"基础篇\"></a>基础篇</h1><h2 id=\"通用语法及分类\"><a href=\"#通用语法及分类\" class=\"headerlink\" title=\"通用语法及分类\"></a>通用语法及分类</h2><ul>\n<li>DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）</li>\n<li>DML: 数据操作语言，用来对数据库表中的数据进行增删改</li>\n<li>DQL: 数据查询语言，用来查询数据库中表的记录</li>\n<li>DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限</li>\n</ul>\n<h3 id=\"DDL（数据定义语言）\"><a href=\"#DDL（数据定义语言）\" class=\"headerlink\" title=\"DDL（数据定义语言）\"></a>DDL（数据定义语言）</h3><p>数据定义语言</p>\n<h4 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h4><p>查询所有数据库：<br><code>SHOW DATABASES;</code><br>查询当前数据库：<br><code>SELECT DATABASE();</code><br>创建数据库：<br><code>CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];</code><br>删除数据库：<br><code>DROP DATABASE [ IF EXISTS ] 数据库名;</code><br>使用数据库：<br><code>USE 数据库名;</code></p>\n<h5 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li>UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集</li>\n</ul>\n<h4 id=\"表操作\"><a href=\"#表操作\" class=\"headerlink\" title=\"表操作\"></a>表操作</h4><p>查询当前数据库所有表：<br><code>SHOW TABLES;</code><br>查询表结构：<br><code>DESC 表名;</code><br>查询指定表的建表语句：<br><code>SHOW CREATE TABLE 表名;</code></p>\n<p>创建表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE 表名(</span><br><span class=\"line\">\t字段1 字段1类型 [COMMENT 字段1注释],</span><br><span class=\"line\">\t字段2 字段2类型 [COMMENT 字段2注释],</span><br><span class=\"line\">\t字段3 字段3类型 [COMMENT 字段3注释],</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t字段n 字段n类型 [COMMENT 字段n注释]</span><br><span class=\"line\">)[ COMMENT 表注释 ];</span><br></pre></td></tr></table></figure>\n\n<p><strong>最后一个字段后面没有逗号</strong></p>\n<p>添加字段：<br><code>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：<code>ALTER TABLE emp ADD nickname varchar(20) COMMENT &#39;昵称&#39;;</code></p>\n<p>修改数据类型：<br><code>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</code><br>修改字段名和字段类型：<br><code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：将emp表的nickname字段修改为username，类型为varchar(30)<br><code>ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT &#39;昵称&#39;;</code></p>\n<p>删除字段：<br><code>ALTER TABLE 表名 DROP 字段名;</code></p>\n<p>修改表名：<br><code>ALTER TABLE 表名 RENAME TO 新表名</code></p>\n<p>删除表：<br><code>DROP TABLE [IF EXISTS] 表名;</code><br>删除表，并重新创建该表：<br><code>TRUNCATE TABLE 表名;</code></p>\n<h3 id=\"DML（数据操作语言）\"><a href=\"#DML（数据操作语言）\" class=\"headerlink\" title=\"DML（数据操作语言）\"></a>DML（数据操作语言）</h3><h4 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a>添加数据</h4><p>指定字段：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</code><br>全部字段：<br><code>INSERT INTO 表名 VALUES (值1, 值2, ...);</code></p>\n<p>批量添加数据：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code><br><code>INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code></p>\n<h5 id=\"注意事项-1\"><a href=\"#注意事项-1\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li>字符串和日期类型数据应该包含在引号中</li>\n<li>插入的数据大小应该在字段的规定范围内</li>\n</ul>\n<h4 id=\"更新和删除数据\"><a href=\"#更新和删除数据\" class=\"headerlink\" title=\"更新和删除数据\"></a>更新和删除数据</h4><p>修改数据：<br><code>UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];</code><br>例：<br><code>UPDATE emp SET name = &#39;Jack&#39; WHERE id = 1;</code></p>\n<p>删除数据：<br><code>DELETE FROM 表名 [ WHERE 条件 ];</code></p>\n<h3 id=\"DQL（数据查询语言）\"><a href=\"#DQL（数据查询语言）\" class=\"headerlink\" title=\"DQL（数据查询语言）\"></a>DQL（数据查询语言）</h3><p>语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">\t字段列表</span><br><span class=\"line\">FROM</span><br><span class=\"line\">\t表名字段</span><br><span class=\"line\">WHERE</span><br><span class=\"line\">\t条件列表</span><br><span class=\"line\">GROUP BY</span><br><span class=\"line\">\t分组字段列表</span><br><span class=\"line\">HAVING</span><br><span class=\"line\">\t分组后的条件列表</span><br><span class=\"line\">ORDER BY</span><br><span class=\"line\">\t排序字段列表</span><br><span class=\"line\">LIMIT</span><br><span class=\"line\">\t分页参数</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"基础查询\"><a href=\"#基础查询\" class=\"headerlink\" title=\"基础查询\"></a>基础查询</h4><p>查询多个字段：<br><code>SELECT 字段1, 字段2, 字段3, ... FROM 表名;</code><br><code>SELECT * FROM 表名;</code></p>\n<p>设置别名：<br><code>SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;</code><br><code>SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;</code></p>\n<p>去除重复记录：<br><code>SELECT DISTINCT 字段列表 FROM 表名;</code></p>\n<p>转义：<br><code>SELECT * FROM 表名 WHERE name LIKE &#39;/_张三&#39; ESCAPE &#39;/&#39;</code><br>/ 之后的_不作为通配符</p>\n<h4 id=\"条件查询\"><a href=\"#条件查询\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code></p>\n<p>条件：</p>\n<table>\n<thead>\n<tr>\n<th>比较运算符</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&gt;</td>\n<td>大于</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于</td>\n</tr>\n<tr>\n<td>=</td>\n<td>等于</td>\n</tr>\n<tr>\n<td>&lt;&gt; 或 !=</td>\n<td>不等于</td>\n</tr>\n<tr>\n<td>BETWEEN … AND …</td>\n<td>在某个范围内（含最小、最大值）</td>\n</tr>\n<tr>\n<td>IN(…)</td>\n<td>在in之后的列表中的值，多选一</td>\n</tr>\n<tr>\n<td>LIKE 占位符</td>\n<td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td>\n</tr>\n<tr>\n<td>IS NULL</td>\n<td>是NULL</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>逻辑运算符</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>AND 或 &amp;&amp;</td>\n<td>并且（多个条件同时成立）</td>\n</tr>\n<tr>\n<td>OR 或 &#124;&#124;</td>\n<td>或者（多个条件任意一个成立）</td>\n</tr>\n<tr>\n<td>NOT 或 !</td>\n<td>非，不是</td>\n</tr>\n</tbody></table>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 年龄等于30</span><br><span class=\"line\">select * from employee where age = 30;</span><br><span class=\"line\">-- 年龄小于30</span><br><span class=\"line\">select * from employee where age &lt; 30;</span><br><span class=\"line\">-- 小于等于</span><br><span class=\"line\">select * from employee where age &lt;= 30;</span><br><span class=\"line\">-- 没有身份证</span><br><span class=\"line\">select * from employee where idcard is null or idcard = &apos;&apos;;</span><br><span class=\"line\">-- 有身份证</span><br><span class=\"line\">select * from employee where idcard;</span><br><span class=\"line\">select * from employee where idcard is not null;</span><br><span class=\"line\">-- 不等于</span><br><span class=\"line\">select * from employee where age != 30;</span><br><span class=\"line\">-- 年龄在20到30之间</span><br><span class=\"line\">select * from employee where age between 20 and 30;</span><br><span class=\"line\">select * from employee where age &gt;= 20 and age &lt;= 30;</span><br><span class=\"line\">-- 下面语句不报错，但查不到任何信息</span><br><span class=\"line\">select * from employee where age between 30 and 20;</span><br><span class=\"line\">-- 性别为女且年龄小于30</span><br><span class=\"line\">select * from employee where age &lt; 30 and gender = &apos;女&apos;;</span><br><span class=\"line\">-- 年龄等于25或30或35</span><br><span class=\"line\">select * from employee where age = 25 or age = 30 or age = 35;</span><br><span class=\"line\">select * from employee where age in (25, 30, 35);</span><br><span class=\"line\">-- 姓名为两个字</span><br><span class=\"line\">select * from employee where name like &apos;__&apos;;</span><br><span class=\"line\">-- 身份证最后为X</span><br><span class=\"line\">select * from employee where idcard like &apos;%X&apos;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"聚合查询（聚合函数）\"><a href=\"#聚合查询（聚合函数）\" class=\"headerlink\" title=\"聚合查询（聚合函数）\"></a>聚合查询（聚合函数）</h4><p>常见聚合函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>count</td>\n<td>统计数量</td>\n</tr>\n<tr>\n<td>max</td>\n<td>最大值</td>\n</tr>\n<tr>\n<td>min</td>\n<td>最小值</td>\n</tr>\n<tr>\n<td>avg</td>\n<td>平均值</td>\n</tr>\n<tr>\n<td>sum</td>\n<td>求和</td>\n</tr>\n</tbody></table>\n<p>语法：<br><code>SELECT 聚合函数(字段列表) FROM 表名;</code><br>例：<br><code>SELECT count(id) from employee where workaddress = &quot;广东省&quot;;</code></p>\n<h4 id=\"分组查询\"><a href=\"#分组查询\" class=\"headerlink\" title=\"分组查询\"></a>分组查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];</code></p>\n<p>where 和 having 的区别：</p>\n<ul>\n<li>执行时机不同：where是分组之前进行过滤，不满足where条件不参与分组；having是分组后对结果进行过滤。</li>\n<li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li>\n</ul>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）</span><br><span class=\"line\">select count(*) from employee group by gender;</span><br><span class=\"line\">-- 根据性别分组，统计男性和女性数量</span><br><span class=\"line\">select gender, count(*) from employee group by gender;</span><br><span class=\"line\">-- 根据性别分组，统计男性和女性的平均年龄</span><br><span class=\"line\">select gender, avg(age) from employee group by gender;</span><br><span class=\"line\">-- 年龄小于45，并根据工作地址分组</span><br><span class=\"line\">select workaddress, count(*) from employee where age &lt; 45 group by workaddress;</span><br><span class=\"line\">-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址</span><br><span class=\"line\">select workaddress, count(*) address_count from employee where age &lt; 45 group by workaddress having address_count &gt;= 3;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意事项-2\"><a href=\"#注意事项-2\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li>执行顺序：where &gt; 聚合函数 &gt; having</li>\n<li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li>\n</ul>\n<h4 id=\"排序查询\"><a href=\"#排序查询\" class=\"headerlink\" title=\"排序查询\"></a>排序查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;</code></p>\n<p>排序方式：</p>\n<ul>\n<li>ASC: 升序（默认）</li>\n<li>DESC: 降序</li>\n</ul>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 根据年龄升序排序</span><br><span class=\"line\">SELECT * FROM employee ORDER BY age ASC;</span><br><span class=\"line\">SELECT * FROM employee ORDER BY age;</span><br><span class=\"line\">-- 两字段排序，根据年龄升序排序，入职时间降序排序</span><br><span class=\"line\">SELECT * FROM employee ORDER BY age ASC, entrydate DESC;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意事项-3\"><a href=\"#注意事项-3\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p>\n<h4 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;</code></p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询第一页数据，展示10条</span><br><span class=\"line\">SELECT * FROM employee LIMIT 0, 10;</span><br><span class=\"line\">-- 查询第二页</span><br><span class=\"line\">SELECT * FROM employee LIMIT 10, 10;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意事项-4\"><a href=\"#注意事项-4\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li>起始索引从0开始，起始索引 = （查询页码 - 1） * 每页显示记录数</li>\n<li>分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT</li>\n<li>如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10</li>\n</ul>\n<h4 id=\"DQL执行顺序\"><a href=\"#DQL执行顺序\" class=\"headerlink\" title=\"DQL执行顺序\"></a>DQL执行顺序</h4><p>FROM -&gt; WHERE -&gt; GROUP BY -&gt; SELECT -&gt; ORDER BY -&gt; LIMIT</p>\n<h3 id=\"DCL\"><a href=\"#DCL\" class=\"headerlink\" title=\"DCL\"></a>DCL</h3><h4 id=\"管理用户\"><a href=\"#管理用户\" class=\"headerlink\" title=\"管理用户\"></a>管理用户</h4><p>查询用户：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USER mysql;</span><br><span class=\"line\">SELECT * FROM user;</span><br></pre></td></tr></table></figure>\n\n<p>创建用户:<br><code>CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;</code></p>\n<p>修改用户密码：<br><code>ALTER USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;;</code></p>\n<p>删除用户：<br><code>DROP USER &#39;用户名&#39;@&#39;主机名&#39;;</code></p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 创建用户test，只能在当前主机localhost访问</span><br><span class=\"line\">create user &apos;test&apos;@&apos;localhost&apos; identified by &apos;123456&apos;;</span><br><span class=\"line\">-- 创建用户test，能在任意主机访问</span><br><span class=\"line\">create user &apos;test&apos;@&apos;%&apos; identified by &apos;123456&apos;;</span><br><span class=\"line\">create user &apos;test&apos; identified by &apos;123456&apos;;</span><br><span class=\"line\">-- 修改密码</span><br><span class=\"line\">alter user &apos;test&apos;@&apos;localhost&apos; identified with mysql_native_password by &apos;1234&apos;;</span><br><span class=\"line\">-- 删除用户</span><br><span class=\"line\">drop user &apos;test&apos;@&apos;localhost&apos;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意事项-5\"><a href=\"#注意事项-5\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li>主机名可以使用 % 通配</li>\n</ul>\n<h4 id=\"权限控制\"><a href=\"#权限控制\" class=\"headerlink\" title=\"权限控制\"></a>权限控制</h4><p>常用权限：</p>\n<table>\n<thead>\n<tr>\n<th>权限</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ALL, ALL PRIVILEGES</td>\n<td>所有权限</td>\n</tr>\n<tr>\n<td>SELECT</td>\n<td>查询数据</td>\n</tr>\n<tr>\n<td>INSERT</td>\n<td>插入数据</td>\n</tr>\n<tr>\n<td>UPDATE</td>\n<td>修改数据</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>删除数据</td>\n</tr>\n<tr>\n<td>ALTER</td>\n<td>修改表</td>\n</tr>\n<tr>\n<td>DROP</td>\n<td>删除数据库/表/视图</td>\n</tr>\n<tr>\n<td>CREATE</td>\n<td>创建数据库/表</td>\n</tr>\n</tbody></table>\n<p>更多权限请看<a href=\"#权限一览表\" title=\"权限一览表\">权限一览表</a></p>\n<p>查询权限：<br><code>SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39;;</code></p>\n<p>授予权限：<br><code>GRANT 权限列表 ON 数据库名.表名 TO &#39;用户名&#39;@&#39;主机名&#39;;</code></p>\n<p>撤销权限：<br><code>REVOKE 权限列表 ON 数据库名.表名 FROM &#39;用户名&#39;@&#39;主机名&#39;;</code></p>\n<h5 id=\"注意事项-6\"><a href=\"#注意事项-6\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li>多个权限用逗号分隔</li>\n<li>授权时，数据库名和表名可以用 * 进行通配，代表所有</li>\n</ul>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ul>\n<li>字符串函数</li>\n<li>数值函数</li>\n<li>日期函数</li>\n<li>流程函数</li>\n</ul>\n<h3 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"字符串函数\"></a>字符串函数</h3><p>常用函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CONCAT(s1, s2, …, sn)</td>\n<td>字符串拼接，将s1, s2, …, sn拼接成一个字符串</td>\n</tr>\n<tr>\n<td>LOWER(str)</td>\n<td>将字符串全部转为小写</td>\n</tr>\n<tr>\n<td>UPPER(str)</td>\n<td>将字符串全部转为大写</td>\n</tr>\n<tr>\n<td>LPAD(str, n, pad)</td>\n<td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td>\n</tr>\n<tr>\n<td>RPAD(str, n, pad)</td>\n<td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td>\n</tr>\n<tr>\n<td>TRIM(str)</td>\n<td>去掉字符串头部和尾部的空格</td>\n</tr>\n<tr>\n<td>SUBSTRING(str, start, len)</td>\n<td>返回从字符串str从start位置起的len个长度的字符串</td>\n</tr>\n</tbody></table>\n<p>使用示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 拼接</span><br><span class=\"line\">SELECT CONCAT(&apos;Hello&apos;, &apos;World&apos;);</span><br><span class=\"line\">-- 小写</span><br><span class=\"line\">SELECT LOWER(&apos;Hello&apos;);</span><br><span class=\"line\">-- 大写</span><br><span class=\"line\">SELECT UPPER(&apos;Hello&apos;);</span><br><span class=\"line\">-- 左填充</span><br><span class=\"line\">SELECT LPAD(&apos;01&apos;, 5, &apos;-&apos;);</span><br><span class=\"line\">-- 右填充</span><br><span class=\"line\">SELECT RPAD(&apos;01&apos;, 5, &apos;-&apos;);</span><br><span class=\"line\">-- 去除空格</span><br><span class=\"line\">SELECT TRIM(&apos; Hello World &apos;);</span><br><span class=\"line\">-- 切片（起始索引为1）</span><br><span class=\"line\">SELECT SUBSTRING(&apos;Hello World&apos;, 1, 5);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数值函数\"><a href=\"#数值函数\" class=\"headerlink\" title=\"数值函数\"></a>数值函数</h3><p>常见函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CEIL(x)</td>\n<td>向上取整</td>\n</tr>\n<tr>\n<td>FLOOR(x)</td>\n<td>向下取整</td>\n</tr>\n<tr>\n<td>MOD(x, y)</td>\n<td>返回x/y的模</td>\n</tr>\n<tr>\n<td>RAND()</td>\n<td>返回0~1内的随机数</td>\n</tr>\n<tr>\n<td>ROUND(x, y)</td>\n<td>求参数x的四舍五入值，保留y位小数</td>\n</tr>\n</tbody></table>\n<h3 id=\"日期函数\"><a href=\"#日期函数\" class=\"headerlink\" title=\"日期函数\"></a>日期函数</h3><p>常用函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CURDATE()</td>\n<td>返回当前日期</td>\n</tr>\n<tr>\n<td>CURTIME()</td>\n<td>返回当前时间</td>\n</tr>\n<tr>\n<td>NOW()</td>\n<td>返回当前日期和时间</td>\n</tr>\n<tr>\n<td>YEAR(date)</td>\n<td>获取指定date的年份</td>\n</tr>\n<tr>\n<td>MONTH(date)</td>\n<td>获取指定date的月份</td>\n</tr>\n<tr>\n<td>DAY(date)</td>\n<td>获取指定date的日期</td>\n</tr>\n<tr>\n<td>DATE_ADD(date, INTERVAL expr type)</td>\n<td>返回一个日期/时间值加上一个时间间隔expr后的时间值</td>\n</tr>\n<tr>\n<td>DATEDIFF(date1, date2)</td>\n<td>返回起始时间date1和结束时间date2之间的天数</td>\n</tr>\n</tbody></table>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- DATE_ADD</span><br><span class=\"line\">SELECT DATE_ADD(NOW(), INTERVAL 70 YEAR);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"流程函数\"><a href=\"#流程函数\" class=\"headerlink\" title=\"流程函数\"></a>流程函数</h3><p>常用函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IF(value, t, f)</td>\n<td>如果value为true，则返回t，否则返回f</td>\n</tr>\n<tr>\n<td>IFNULL(value1, value2)</td>\n<td>如果value1不为空，返回value1，否则返回value2</td>\n</tr>\n<tr>\n<td>CASE WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td>\n<td>如果val1为true，返回res1，… 否则返回default默认值</td>\n</tr>\n<tr>\n<td>CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td>\n<td>如果expr的值等于val1，返回res1，… 否则返回default默认值</td>\n</tr>\n</tbody></table>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select</span><br><span class=\"line\">\tname,</span><br><span class=\"line\">\t(case when age &gt; 30 then &apos;中年&apos; else &apos;青年&apos; end)</span><br><span class=\"line\">from employee;</span><br><span class=\"line\">select</span><br><span class=\"line\">\tname,</span><br><span class=\"line\">\t(case workaddress when &apos;北京市&apos; then &apos;一线城市&apos; when &apos;上海市&apos; then &apos;一线城市&apos; else &apos;二线城市&apos; end) as &apos;工作地址&apos;</span><br><span class=\"line\">from employee;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"约束\"><a href=\"#约束\" class=\"headerlink\" title=\"约束\"></a>约束</h2><p>分类：</p>\n<table>\n<thead>\n<tr>\n<th>约束</th>\n<th>描述</th>\n<th>关键字</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>非空约束</td>\n<td>限制该字段的数据不能为null</td>\n<td>NOT NULL</td>\n</tr>\n<tr>\n<td>唯一约束</td>\n<td>保证该字段的所有数据都是唯一、不重复的</td>\n<td>UNIQUE</td>\n</tr>\n<tr>\n<td>主键约束</td>\n<td>主键是一行数据的唯一标识，要求非空且唯一</td>\n<td>PRIMARY KEY</td>\n</tr>\n<tr>\n<td>默认约束</td>\n<td>保存数据时，如果未指定该字段的值，则采用默认值</td>\n<td>DEFAULT</td>\n</tr>\n<tr>\n<td>检查约束（8.0.1版本后）</td>\n<td>保证字段值满足某一个条件</td>\n<td>CHECK</td>\n</tr>\n<tr>\n<td>外键约束</td>\n<td>用来让两张图的数据之间建立连接，保证数据的一致性和完整性</td>\n<td>FOREIGN KEY</td>\n</tr>\n</tbody></table>\n<p>约束是作用于表中字段上的，可以再创建表/修改表的时候添加约束。</p>\n<h3 id=\"常用约束\"><a href=\"#常用约束\" class=\"headerlink\" title=\"常用约束\"></a>常用约束</h3><table>\n<thead>\n<tr>\n<th>约束条件</th>\n<th>关键字</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>主键</td>\n<td>PRIMARY KEY</td>\n</tr>\n<tr>\n<td>自动增长</td>\n<td>AUTO_INCREMENT</td>\n</tr>\n<tr>\n<td>不为空</td>\n<td>NOT NULL</td>\n</tr>\n<tr>\n<td>唯一</td>\n<td>UNIQUE</td>\n</tr>\n<tr>\n<td>逻辑条件</td>\n<td>CHECK</td>\n</tr>\n<tr>\n<td>默认值</td>\n<td>DEFAULT</td>\n</tr>\n</tbody></table>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table user(</span><br><span class=\"line\">\tid int primary key auto_increment,</span><br><span class=\"line\">\tname varchar(10) not null unique,</span><br><span class=\"line\">\tage int check(age &gt; 0 and age &lt; 120),</span><br><span class=\"line\">\tstatus char(1) default &apos;1&apos;,</span><br><span class=\"line\">\tgender char(1)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"外键约束\"><a href=\"#外键约束\" class=\"headerlink\" title=\"外键约束\"></a>外键约束</h3><p>添加外键：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE 表名(</span><br><span class=\"line\">\t字段名 字段类型,</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t[CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名)</span><br><span class=\"line\">);</span><br><span class=\"line\">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);</span><br><span class=\"line\"></span><br><span class=\"line\">-- 例子</span><br><span class=\"line\">alter table emp add constraint fk_emp_dept_id foreign key(dept_id) references dept(id);</span><br></pre></td></tr></table></figure>\n\n<p>删除外键：<br><code>ALTER TABLE 表名 DROP FOREIGN KEY 外键名;</code></p>\n<h4 id=\"删除-更新行为\"><a href=\"#删除-更新行为\" class=\"headerlink\" title=\"删除/更新行为\"></a>删除/更新行为</h4><table>\n<thead>\n<tr>\n<th>行为</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NO ACTION</td>\n<td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与RESTRICT一致）</td>\n</tr>\n<tr>\n<td>RESTRICT</td>\n<td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与NO ACTION一致）</td>\n</tr>\n<tr>\n<td>CASCADE</td>\n<td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除/更新外键在子表中的记录</td>\n</tr>\n<tr>\n<td>SET NULL</td>\n<td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（要求该外键允许为null）</td>\n</tr>\n<tr>\n<td>SET DEFAULT</td>\n<td>父表有变更时，子表将外键设为一个默认值（Innodb不支持）</td>\n</tr>\n</tbody></table>\n<p>更改删除/更新行为：<br><code>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为;</code></p>\n<h2 id=\"多表查询\"><a href=\"#多表查询\" class=\"headerlink\" title=\"多表查询\"></a>多表查询</h2><h3 id=\"多表关系\"><a href=\"#多表关系\" class=\"headerlink\" title=\"多表关系\"></a>多表关系</h3><ul>\n<li>一对多（多对一）</li>\n<li>多对多</li>\n<li>一对一</li>\n</ul>\n<h4 id=\"一对多\"><a href=\"#一对多\" class=\"headerlink\" title=\"一对多\"></a>一对多</h4><p>案例：部门与员工<br>关系：一个部门对应多个员工，一个员工对应一个部门<br>实现：在多的一方建立外键，指向一的一方的主键</p>\n<h4 id=\"多对多\"><a href=\"#多对多\" class=\"headerlink\" title=\"多对多\"></a>多对多</h4><p>案例：学生与课程<br>关系：一个学生可以选多门课程，一门课程也可以供多个学生选修<br>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p>\n<h4 id=\"一对一\"><a href=\"#一对一\" class=\"headerlink\" title=\"一对一\"></a>一对一</h4><p>案例：用户与用户详情<br>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率<br>实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）</p>\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><p>合并查询（笛卡尔积，会展示所有组合结果）：<br><code>select * from employee, dept;</code></p>\n<blockquote>\n<p>笛卡尔积：两个集合A集合和B集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）</p>\n</blockquote>\n<p>消除无效笛卡尔积：<br><code>select * from employee, dept where employee.dept = dept.id;</code></p>\n<h3 id=\"内连接查询\"><a href=\"#内连接查询\" class=\"headerlink\" title=\"内连接查询\"></a>内连接查询</h3><p>内连接查询的是两张表交集的部分</p>\n<p>隐式内连接：<br><code>SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;</code></p>\n<p>显式内连接：<br><code>SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;</code></p>\n<p>显式性能比隐式高</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询员工姓名，及关联的部门的名称</span><br><span class=\"line\">-- 隐式</span><br><span class=\"line\">select e.name, d.name from employee as e, dept as d where e.dept = d.id;</span><br><span class=\"line\">-- 显式</span><br><span class=\"line\">select e.name, d.name from employee as e inner join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"外连接查询\"><a href=\"#外连接查询\" class=\"headerlink\" title=\"外连接查询\"></a>外连接查询</h3><p>左外连接：<br>查询左表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;</code><br>相当于查询表1的所有数据，包含表1和表2交集部分数据</p>\n<p>右外连接：<br>查询右表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;</code></p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 左</span><br><span class=\"line\">select e.*, d.name from employee as e left outer join dept as d on e.dept = d.id;</span><br><span class=\"line\">select d.name, e.* from dept d left outer join emp e on e.dept = d.id;  -- 这条语句与下面的语句效果一样</span><br><span class=\"line\">-- 右</span><br><span class=\"line\">select d.name, e.* from employee as e right outer join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure>\n\n<p>左连接可以查询到没有dept的employee，右连接可以查询到没有employee的dept</p>\n<h3 id=\"自连接查询\"><a href=\"#自连接查询\" class=\"headerlink\" title=\"自连接查询\"></a>自连接查询</h3><p>当前表与自身的连接查询，自连接必须使用表别名</p>\n<p>语法：<br><code>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;</code></p>\n<p>自连接查询，可以是内连接查询，也可以是外连接查询</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询员工及其所属领导的名字</span><br><span class=\"line\">select a.name, b.name from employee a, employee b where a.manager = b.id;</span><br><span class=\"line\">-- 没有领导的也查询出来</span><br><span class=\"line\">select a.name, b.name from employee a left join employee b on a.manager = b.id;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"联合查询-union-union-all\"><a href=\"#联合查询-union-union-all\" class=\"headerlink\" title=\"联合查询 union, union all\"></a>联合查询 union, union all</h3><p>把多次查询的结果合并，形成一个新的查询集</p>\n<p>语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT 字段列表 FROM 表A ...</span><br><span class=\"line\">UNION [ALL]</span><br><span class=\"line\">SELECT 字段列表 FROM 表B ...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意事项-7\"><a href=\"#注意事项-7\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><ul>\n<li>UNION ALL 会有重复结果，UNION 不会</li>\n<li>联合查询比使用or效率高，不会使索引失效</li>\n</ul>\n<h3 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h3><p>SQL语句中嵌套SELECT语句，称谓嵌套查询，又称子查询。<br><code>SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);</code><br><strong>子查询外部的语句可以是 INSERT / UPDATE / DELETE / SELECT 的任何一个</strong></p>\n<p>根据子查询结果可以分为：</p>\n<ul>\n<li>标量子查询（子查询结果为单个值）</li>\n<li>列子查询（子查询结果为一列）</li>\n<li>行子查询（子查询结果为一行）</li>\n<li>表子查询（子查询结果为多行多列）</li>\n</ul>\n<p>根据子查询位置可分为：</p>\n<ul>\n<li>WHERE 之后</li>\n<li>FROM 之后</li>\n<li>SELECT 之后</li>\n</ul>\n<h4 id=\"标量子查询\"><a href=\"#标量子查询\" class=\"headerlink\" title=\"标量子查询\"></a>标量子查询</h4><p>子查询返回的结果是单个值（数字、字符串、日期等）。<br>常用操作符：- &lt; &gt; &gt; &gt;= &lt; &lt;=</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询销售部所有员工</span><br><span class=\"line\">select id from dept where name = &apos;销售部&apos;;</span><br><span class=\"line\">-- 根据销售部部门ID，查询员工信息</span><br><span class=\"line\">select * from employee where dept = 4;</span><br><span class=\"line\">-- 合并（子查询）</span><br><span class=\"line\">select * from employee where dept = (select id from dept where name = &apos;销售部&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">-- 查询xxx入职之后的员工信息</span><br><span class=\"line\">select * from employee where entrydate &gt; (select entrydate from employee where name = &apos;xxx&apos;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"列子查询\"><a href=\"#列子查询\" class=\"headerlink\" title=\"列子查询\"></a>列子查询</h4><p>返回的结果是一列（可以是多行）。</p>\n<p>常用操作符：</p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IN</td>\n<td>在指定的集合范围内，多选一</td>\n</tr>\n<tr>\n<td>NOT IN</td>\n<td>不在指定的集合范围内</td>\n</tr>\n<tr>\n<td>ANY</td>\n<td>子查询返回列表中，有任意一个满足即可</td>\n</tr>\n<tr>\n<td>SOME</td>\n<td>与ANY等同，使用SOME的地方都可以使用ANY</td>\n</tr>\n<tr>\n<td>ALL</td>\n<td>子查询返回列表的所有值都必须满足</td>\n</tr>\n</tbody></table>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询销售部和市场部的所有员工信息</span><br><span class=\"line\">select * from employee where dept in (select id from dept where name = &apos;销售部&apos; or name = &apos;市场部&apos;);</span><br><span class=\"line\">-- 查询比财务部所有人工资都高的员工信息</span><br><span class=\"line\">select * from employee where salary &gt; all(select salary from employee where dept = (select id from dept where name = &apos;财务部&apos;));</span><br><span class=\"line\">-- 查询比研发部任意一人工资高的员工信息</span><br><span class=\"line\">select * from employee where salary &gt; any (select salary from employee where dept = (select id from dept where name = &apos;研发部&apos;));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"行子查询\"><a href=\"#行子查询\" class=\"headerlink\" title=\"行子查询\"></a>行子查询</h4><p>返回的结果是一行（可以是多列）。<br>常用操作符：=, &lt;, &gt;, IN, NOT IN</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询与xxx的薪资及直属领导相同的员工信息</span><br><span class=\"line\">select * from employee where (salary, manager) = (12500, 1);</span><br><span class=\"line\">select * from employee where (salary, manager) = (select salary, manager from employee where name = &apos;xxx&apos;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"表子查询\"><a href=\"#表子查询\" class=\"headerlink\" title=\"表子查询\"></a>表子查询</h4><p>返回的结果是多行多列<br>常用操作符：IN</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询与xxx1，xxx2的职位和薪资相同的员工</span><br><span class=\"line\">select * from employee where (job, salary) in (select job, salary from employee where name = &apos;xxx1&apos; or name = &apos;xxx2&apos;);</span><br><span class=\"line\">-- 查询入职日期是2006-01-01之后的员工，及其部门信息</span><br><span class=\"line\">select e.*, d.* from (select * from employee where entrydate &gt; &apos;2006-01-01&apos;) as e left join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><p>事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p>\n<p>基本操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 1. 查询张三账户余额</span><br><span class=\"line\">select * from account where name = &apos;张三&apos;;</span><br><span class=\"line\">-- 2. 将张三账户余额-1000</span><br><span class=\"line\">update account set money = money - 1000 where name = &apos;张三&apos;;</span><br><span class=\"line\">-- 此语句出错后张三钱减少但是李四钱没有增加</span><br><span class=\"line\">模拟sql语句错误</span><br><span class=\"line\">-- 3. 将李四账户余额+1000</span><br><span class=\"line\">update account set money = money + 1000 where name = &apos;李四&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 查看事务提交方式</span><br><span class=\"line\">SELECT @@AUTOCOMMIT;</span><br><span class=\"line\">-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效</span><br><span class=\"line\">SET @@AUTOCOMMIT = 0;</span><br><span class=\"line\">-- 提交事务</span><br><span class=\"line\">COMMIT;</span><br><span class=\"line\">-- 回滚事务</span><br><span class=\"line\">ROLLBACK;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 设置手动提交后上面代码改为：</span><br><span class=\"line\">select * from account where name = &apos;张三&apos;;</span><br><span class=\"line\">update account set money = money - 1000 where name = &apos;张三&apos;;</span><br><span class=\"line\">update account set money = money + 1000 where name = &apos;李四&apos;;</span><br><span class=\"line\">commit;</span><br></pre></td></tr></table></figure>\n\n<p>操作方式二：</p>\n<p>开启事务：<br><code>START TRANSACTION 或 BEGIN TRANSACTION;</code><br>提交事务：<br><code>COMMIT;</code><br>回滚事务：<br><code>ROLLBACK;</code></p>\n<p>操作实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start transaction;</span><br><span class=\"line\">select * from account where name = &apos;张三&apos;;</span><br><span class=\"line\">update account set money = money - 1000 where name = &apos;张三&apos;;</span><br><span class=\"line\">update account set money = money + 1000 where name = &apos;李四&apos;;</span><br><span class=\"line\">commit;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四大特性ACID\"><a href=\"#四大特性ACID\" class=\"headerlink\" title=\"四大特性ACID\"></a>四大特性ACID</h3><ul>\n<li>原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败</li>\n<li>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</li>\n<li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li>\n<li>持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li>\n</ul>\n<h3 id=\"并发事务\"><a href=\"#并发事务\" class=\"headerlink\" title=\"并发事务\"></a>并发事务</h3><table>\n<thead>\n<tr>\n<th>问题</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>脏读</td>\n<td>一个事务读到另一个事务还没提交的数据</td>\n</tr>\n<tr>\n<td>不可重复读</td>\n<td>一个事务先后读取同一条记录，但两次读取的数据不同</td>\n</tr>\n<tr>\n<td>幻读</td>\n<td>一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>这三个问题的详细演示：<a href=\"https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd</a> </p>\n</blockquote>\n<p>并发事务隔离级别：</p>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Read uncommitted</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>Read committed</td>\n<td>×</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>Repeatable Read(默认)</td>\n<td>×</td>\n<td>×</td>\n<td>√</td>\n</tr>\n<tr>\n<td>Serializable</td>\n<td>×</td>\n<td>×</td>\n<td>×</td>\n</tr>\n</tbody></table>\n<ul>\n<li>√表示在当前隔离级别下该问题会出现</li>\n<li>Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差</li>\n</ul>\n<p>查看事务隔离级别：<br><code>SELECT @@TRANSACTION_ISOLATION;</code><br>设置事务隔离级别：<br><code>SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE };</code><br>SESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效</p>\n<h1 id=\"进阶篇\"><a href=\"#进阶篇\" class=\"headerlink\" title=\"进阶篇\"></a>进阶篇</h1><h2 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h2><p>MySQL体系结构：</p>\n<p><img src=\"https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_20220315034329549927.png\" alt=\"结构图\" title=\"结构图\"><br><img src=\"https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%B1%82%E7%BA%A7%E5%90%AB%E4%B9%89_20220315034359342837.png\" alt=\"层级描述\" title=\"层级描述\"></p>\n<p>存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。<br>默认存储引擎是InnoDB。</p>\n<p>相关操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询建表语句</span><br><span class=\"line\">show create table account;</span><br><span class=\"line\">-- 建表时指定存储引擎</span><br><span class=\"line\">CREATE TABLE 表名(</span><br><span class=\"line\">\t...</span><br><span class=\"line\">) ENGINE=INNODB;</span><br><span class=\"line\">-- 查看当前数据库支持的存储引擎</span><br><span class=\"line\">show engines;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h3><p>InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。</p>\n<p>特点：</p>\n<ul>\n<li>DML 操作遵循 ACID 模型，支持<strong>事务</strong></li>\n<li><strong>行级锁</strong>，提高并发访问性能</li>\n<li>支持<strong>外键</strong>约束，保证数据的完整性和正确性</li>\n</ul>\n<p>文件：</p>\n<ul>\n<li>xxx.ibd: xxx代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。</li>\n</ul>\n<p>参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间</p>\n<p>知识点：</p>\n<p>查看 Mysql 变量：<br><code>show variables like &#39;innodb_file_per_table&#39;;</code></p>\n<p>从idb文件提取表结构数据：<br>（在cmd运行）<br><code>ibd2sdi xxx.ibd</code></p>\n<p>InnoDB 逻辑存储结构：<br><img src=\"https://dhc.pythonanywhere.com/media/editor/%E9%80%BB%E8%BE%91%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84_20220316030616590001.png\" alt=\"InnoDB逻辑存储结构\" title=\"InnoDB逻辑存储结构\"></p>\n<h3 id=\"MyISAM\"><a href=\"#MyISAM\" class=\"headerlink\" title=\"MyISAM\"></a>MyISAM</h3><p>MyISAM 是 MySQL 早期的默认存储引擎。</p>\n<p>特点：</p>\n<ul>\n<li>不支持事务，不支持外键</li>\n<li>支持表锁，不支持行锁</li>\n<li>访问速度快</li>\n</ul>\n<p>文件：</p>\n<ul>\n<li>xxx.sdi: 存储表结构信息</li>\n<li>xxx.MYD: 存储数据</li>\n<li>xxx.MYI: 存储索引</li>\n</ul>\n<h3 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory\"></a>Memory</h3><p>Memory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。</p>\n<p>特点：</p>\n<ul>\n<li>存放在内存中，速度快</li>\n<li>hash索引（默认）</li>\n</ul>\n<p>文件：</p>\n<ul>\n<li>xxx.sdi: 存储表结构信息</li>\n</ul>\n<h3 id=\"存储引擎特点\"><a href=\"#存储引擎特点\" class=\"headerlink\" title=\"存储引擎特点\"></a>存储引擎特点</h3><table>\n<thead>\n<tr>\n<th>特点</th>\n<th>InnoDB</th>\n<th>MyISAM</th>\n<th>Memory</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>存储限制</td>\n<td>64TB</td>\n<td>有</td>\n<td>有</td>\n</tr>\n<tr>\n<td>事务安全</td>\n<td>支持</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>锁机制</td>\n<td>行锁</td>\n<td>表锁</td>\n<td>表锁</td>\n</tr>\n<tr>\n<td>B+tree索引</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>Hash索引</td>\n<td>-</td>\n<td>-</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>全文索引</td>\n<td>支持（5.6版本之后）</td>\n<td>支持</td>\n<td>-</td>\n</tr>\n<tr>\n<td>空间使用</td>\n<td>高</td>\n<td>低</td>\n<td>N/A</td>\n</tr>\n<tr>\n<td>内存使用</td>\n<td>高</td>\n<td>低</td>\n<td>中等</td>\n</tr>\n<tr>\n<td>批量插入速度</td>\n<td>低</td>\n<td>高</td>\n<td>高</td>\n</tr>\n<tr>\n<td>支持外键</td>\n<td>支持</td>\n<td>-</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<h3 id=\"存储引擎的选择\"><a href=\"#存储引擎的选择\" class=\"headerlink\" title=\"存储引擎的选择\"></a>存储引擎的选择</h3><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。</p>\n<ul>\n<li>InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择</li>\n<li>MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。</li>\n<li>Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li>\n</ul>\n<p>电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。</p>\n<h2 id=\"性能分析\"><a href=\"#性能分析\" class=\"headerlink\" title=\"性能分析\"></a>性能分析</h2><h3 id=\"查看执行频次\"><a href=\"#查看执行频次\" class=\"headerlink\" title=\"查看执行频次\"></a>查看执行频次</h3><p>查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：<br><code>SHOW GLOBAL STATUS LIKE &#39;Com_______&#39;;</code> 或者 <code>SHOW SESSION STATUS LIKE &#39;Com_______&#39;;</code><br>例：<code>show global status like &#39;Com_______&#39;</code></p>\n<h3 id=\"慢查询日志\"><a href=\"#慢查询日志\" class=\"headerlink\" title=\"慢查询日志\"></a>慢查询日志</h3><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。<br>MySQL的慢查询日志默认没有开启，需要在MySQL的配置文件（/etc/my.cnf）中配置如下信息：<br>    # 开启慢查询日志开关<br>    slow_query_log=1<br>    # 设置慢查询日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志<br>    long_query_time=2</p>\n<p>更改后记得重启MySQL服务，日志文件位置：/var/lib/mysql/localhost-slow.log</p>\n<p>查看慢查询日志开关状态：<br><code>show variables like &#39;slow_query_log&#39;;</code></p>\n<h3 id=\"profile\"><a href=\"#profile\" class=\"headerlink\" title=\"profile\"></a>profile</h3><p>show profile 能在做SQL优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：<br><code>SELECT @@have_profiling;</code><br>profiling 默认关闭，可以通过set语句在session/global级别开启 profiling：<br><code>SET profiling = 1;</code><br>查看所有语句的耗时：<br><code>show profiles;</code><br>查看指定query_id的SQL语句各个阶段的耗时：<br><code>show profile for query query_id;</code><br>查看指定query_id的SQL语句CPU的使用情况<br><code>show profile cpu for query query_id;</code></p>\n<h3 id=\"explain\"><a href=\"#explain\" class=\"headerlink\" title=\"explain\"></a>explain</h3><p>EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。<br>语法：<br>    # 直接在select语句之前加上关键字 explain / desc<br>    EXPLAIN SELECT 字段列表 FROM 表名 HWERE 条件;</p>\n<p>EXPLAIN 各字段含义：</p>\n<ul>\n<li>id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id相同，执行顺序从上到下；id不同，值越大越先执行）</li>\n<li>select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（SELECT/WHERE之后包含了子查询）等</li>\n<li>type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all</li>\n<li>possible_key：可能应用在这张表上的索引，一个或多个</li>\n<li>Key：实际使用的索引，如果为 NULL，则没有使用索引</li>\n<li>Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</li>\n<li>rows：MySQL认为必须要执行的行数，在InnoDB引擎的表中，是一个估计值，可能并不总是准确的</li>\n<li>filtered：表示返回结果的行数占需读取行数的百分比，filtered的值越大越好</li>\n</ul>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><p>索引是帮助 MySQL <strong>高效获取数据</strong>的<strong>数据结构（有序）</strong>。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。</p>\n<p>优缺点：</p>\n<p>优点：</p>\n<ul>\n<li>提高数据检索效率，降低数据库的IO成本</li>\n<li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>索引列也是要占用空间的</li>\n<li>索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE</li>\n</ul>\n<h3 id=\"索引结构\"><a href=\"#索引结构\" class=\"headerlink\" title=\"索引结构\"></a>索引结构</h3><table>\n<thead>\n<tr>\n<th>索引结构</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>B+Tree</td>\n<td>最常见的索引类型，大部分引擎都支持B+树索引</td>\n</tr>\n<tr>\n<td>Hash</td>\n<td>底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询</td>\n</tr>\n<tr>\n<td>R-Tree(空间索引)</td>\n<td>空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td>\n</tr>\n<tr>\n<td>Full-Text(全文索引)</td>\n<td>是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>索引</th>\n<th>InnoDB</th>\n<th>MyISAM</th>\n<th>Memory</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>B+Tree索引</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>Hash索引</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>R-Tree索引</td>\n<td>不支持</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>Full-text</td>\n<td>5.6版本后支持</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n</tbody></table>\n<h4 id=\"B-Tree\"><a href=\"#B-Tree\" class=\"headerlink\" title=\"B-Tree\"></a>B-Tree</h4><p><img src=\"https://dhc.pythonanywhere.com/media/editor/%E4%BA%8C%E5%8F%89%E6%A0%91_20220316153214227108.png\" alt=\"二叉树\" title=\"二叉树\"></p>\n<p>二叉树的缺点可以用红黑树来解决：<br><img src=\"https://dhc.pythonanywhere.com/media/editor/%E7%BA%A2%E9%BB%91%E6%A0%91_20220316163142686602.png\" alt=\"红黑树\" title=\"红黑树\"><br>红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。</p>\n<p>为了解决上述问题，可以使用 B-Tree 结构。<br>B-Tree (多路平衡查找树) 以一棵最大度数（max-degree，指一个节点的子节点个数）为5（5阶）的 b-tree 为例（每个节点最多存储4个key，5个指针）</p>\n<p><img src=\"https://dhc.pythonanywhere.com/media/editor/B-Tree%E7%BB%93%E6%9E%84_20220316163813441163.png\" alt=\"B-Tree结构\" title=\"B-Tree结构\"></p>\n<blockquote>\n<p>B-Tree 的数据插入过程动画参照：<a href=\"https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68</a><br>演示地址：<a href=\"https://www.cs.usfca.edu/~galles/visualization/BTree.html\" target=\"_blank\" rel=\"noopener\">https://www.cs.usfca.edu/~galles/visualization/BTree.html</a></p>\n</blockquote>\n<h4 id=\"B-Tree-1\"><a href=\"#B-Tree-1\" class=\"headerlink\" title=\"B+Tree\"></a>B+Tree</h4><p>结构图：</p>\n<p><img src=\"https://dhc.pythonanywhere.com/media/editor/B+Tree%E7%BB%93%E6%9E%84%E5%9B%BE_20220316170700591277.png\" alt=\"B+Tree结构图\" title=\"B+Tree结构图\"></p>\n<blockquote>\n<p>演示地址：<a href=\"https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html\" target=\"_blank\" rel=\"noopener\">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</a></p>\n</blockquote>\n<p>与 B-Tree 的区别：</p>\n<ul>\n<li>所有的数据都会出现在叶子节点</li>\n<li>叶子节点形成一个单向链表</li>\n</ul>\n<p>MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。</p>\n<p><img src=\"https://dhc.pythonanywhere.com/media/editor/%E7%BB%93%E6%9E%84%E5%9B%BE_20220316171730865611.png\" alt=\"MySQL B+Tree 结构图\" title=\"MySQL B+Tree 结构图\"></p>\n<h4 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h4><p>哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。<br>如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可以通过链表来解决。</p>\n<p><img src=\"https://dhc.pythonanywhere.com/media/editor/Hash%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86%E5%9B%BE_20220317143226150679.png\" alt=\"Hash索引原理图\" title=\"Hash索引原理图\"></p>\n<p>特点：</p>\n<ul>\n<li>Hash索引只能用于对等比较（=、in），不支持范围查询（betwwn、&gt;、&lt;、…）</li>\n<li>无法利用索引完成排序操作</li>\n<li>查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引</li>\n</ul>\n<p>存储引擎支持：</p>\n<ul>\n<li>Memory</li>\n<li>InnoDB: 具有自适应hash功能，hash索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的</li>\n</ul>\n<h4 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h4><ol>\n<li>为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？</li>\n</ol>\n<ul>\n<li>相对于二叉树，层级更少，搜索效率高</li>\n<li>对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li>\n<li>相对于 Hash 索引，B+Tree 支持范围匹配及排序操作</li>\n</ul>\n<h3 id=\"索引分类\"><a href=\"#索引分类\" class=\"headerlink\" title=\"索引分类\"></a>索引分类</h3><table>\n<thead>\n<tr>\n<th>分类</th>\n<th>含义</th>\n<th>特点</th>\n<th>关键字</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>主键索引</td>\n<td>针对于表中主键创建的索引</td>\n<td>默认自动创建，只能有一个</td>\n<td>PRIMARY</td>\n</tr>\n<tr>\n<td>唯一索引</td>\n<td>避免同一个表中某数据列中的值重复</td>\n<td>可以有多个</td>\n<td>UNIQUE</td>\n</tr>\n<tr>\n<td>常规索引</td>\n<td>快速定位特定数据</td>\n<td>可以有多个</td>\n<td></td>\n</tr>\n<tr>\n<td>全文索引</td>\n<td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td>\n<td>可以有多个</td>\n<td>FULLTEXT</td>\n</tr>\n</tbody></table>\n<p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：</p>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>含义</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>聚集索引(Clustered Index)</td>\n<td>将数据存储与索引放一块，索引结构的叶子节点保存了行数据</td>\n<td>必须有，而且只有一个</td>\n</tr>\n<tr>\n<td>二级索引(Secondary Index)</td>\n<td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td>\n<td>可以存在多个</td>\n</tr>\n</tbody></table>\n<p>演示图：</p>\n<p><img src=\"https://dhc.pythonanywhere.com/media/editor/%E5%8E%9F%E7%90%86%E5%9B%BE_20220318194454880073.png\" alt=\"大致原理\" title=\"大致原理\"><br><img src=\"https://dhc.pythonanywhere.com/media/editor/%E6%BC%94%E7%A4%BA%E5%9B%BE_20220319215403721066.png\" alt=\"演示图\" title=\"演示图\"></p>\n<p>聚集索引选取规则：</p>\n<ul>\n<li>如果存在主键，主键索引就是聚集索引</li>\n<li>如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引</li>\n<li>如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引</li>\n</ul>\n<h4 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h4><p>1. 以下 SQL 语句，哪个执行效率高？为什么？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from user where id = 10;</span><br><span class=\"line\">select * from user where name = &apos;Arm&apos;;</span><br><span class=\"line\">-- 备注：id为主键，name字段创建的有索引</span><br></pre></td></tr></table></figure>\n\n<p>答：第一条语句，因为第二条需要回表查询，相当于两个步骤。</p>\n<p>2. InnoDB 主键索引的 B+Tree 高度为多少？</p>\n<p>答：假设一行数据大小为1k，一页中可以存储16行这样的数据。InnoDB 的指针占用6个字节的空间，主键假设为bigint，占用字节数为8.<br>可得公式：<code>n * 8 + (n + 1) * 6 = 16 * 1024</code>，其中 8 表示 bigint 占用的字节数，n 表示当前节点存储的key的数量，(n + 1) 表示指针数量（比key多一个）。算出n约为1170。</p>\n<p>如果树的高度为2，那么他能存储的数据量大概为：<code>1171 * 16 = 18736</code>；<br>如果树的高度为3，那么他能存储的数据量大概为：<code>1171 * 1171 * 16 = 21939856</code>。</p>\n<p>另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>创建索引：<br><code>CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...);</code><br>如果不加 CREATE 后面不加索引类型参数，则创建的是常规索引</p>\n<p>查看索引：<br><code>SHOW INDEX FROM table_name;</code></p>\n<p>删除索引：<br><code>DROP INDEX index_name ON table_name;</code></p>\n<p>案例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引</span><br><span class=\"line\">create index idx_user_name on tb_user(name);</span><br><span class=\"line\">-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引</span><br><span class=\"line\">create unique index idx_user_phone on tb_user (phone);</span><br><span class=\"line\">-- 为profession, age, status创建联合索引</span><br><span class=\"line\">create index idx_user_pro_age_stat on tb_user(profession, age, status);</span><br><span class=\"line\">-- 为email建立合适的索引来提升查询效率</span><br><span class=\"line\">create index idx_user_email on tb_user(email);</span><br><span class=\"line\"></span><br><span class=\"line\">-- 删除索引</span><br><span class=\"line\">drop index idx_user_email on tb_user;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用规则\"><a href=\"#使用规则\" class=\"headerlink\" title=\"使用规则\"></a>使用规则</h3><h4 id=\"最左前缀法则\"><a href=\"#最左前缀法则\" class=\"headerlink\" title=\"最左前缀法则\"></a>最左前缀法则</h4><p>如果索引关联了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。<br>如果跳跃某一列，索引将部分失效（后面的字段索引失效）。</p>\n<p>联合索引中，出现范围查询（&lt;, &gt;），范围查询右侧的列索引失效。可以用&gt;=或者&lt;=来规避索引失效问题。</p>\n<h4 id=\"索引失效情况\"><a href=\"#索引失效情况\" class=\"headerlink\" title=\"索引失效情况\"></a>索引失效情况</h4><ol>\n<li>在索引列上进行运算操作，索引将失效。如：<code>explain select * from tb_user where substring(phone, 10, 2) = &#39;15&#39;;</code></li>\n<li>字符串类型字段使用时，不加引号，索引将失效。如：<code>explain select * from tb_user where phone = 17799990015;</code>，此处phone的值没有加引号</li>\n<li>模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如：<code>explain select * from tb_user where profession like &#39;%工程&#39;;</code>，前后都有 % 也会失效。</li>\n<li>用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。</li>\n<li>如果 MySQL 评估使用索引比全表更慢，则不使用索引。</li>\n</ol>\n<h4 id=\"SQL-提示\"><a href=\"#SQL-提示\" class=\"headerlink\" title=\"SQL 提示\"></a>SQL 提示</h4><p>是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</p>\n<p>例如，使用索引：<br><code>explain select * from tb_user use index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>不使用哪个索引：<br><code>explain select * from tb_user ignore index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>必须使用哪个索引：<br><code>explain select * from tb_user force index(idx_user_pro) where profession=&quot;软件工程&quot;;</code></p>\n<p>use 是建议，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，force就是无论如何都强制使用该索引。</p>\n<h4 id=\"覆盖索引-amp-回表查询\"><a href=\"#覆盖索引-amp-回表查询\" class=\"headerlink\" title=\"覆盖索引&amp;回表查询\"></a>覆盖索引&amp;回表查询</h4><p>尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。</p>\n<p>explain 中 extra 字段含义：<br><code>using index condition</code>：查找使用了索引，但是需要回表查询数据<br><code>using where; using index;</code>：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询</p>\n<p>如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是select *；如果在辅助索引中找聚集索引，如<code>select id, name from xxx where name=&#39;xxx&#39;;</code>，也只需要通过辅助索引(name)查找到对应的id，返回name和name索引对应的id即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如<code>select id, name, gender from xxx where name=&#39;xxx&#39;;</code></p>\n<p>所以尽量不要用<code>select *</code>，容易出现回表查询，降低效率，除非有联合索引包含了所有字段</p>\n<p>面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下SQL语句进行优化，该如何进行才是最优方案：<br><code>select id, username, password from tb_user where username=&#39;itcast&#39;;</code></p>\n<p>解：给username和password字段建立联合索引，则不需要回表查询，直接覆盖索引</p>\n<h4 id=\"前缀索引\"><a href=\"#前缀索引\" class=\"headerlink\" title=\"前缀索引\"></a>前缀索引</h4><p>当字段类型为字符串（varchar, text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</p>\n<p>语法：<code>create index idx_xxxx on table_name(columnn(n));</code><br>前缀长度：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。<br>求选择性公式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select count(distinct email) / count(*) from tb_user;</span><br><span class=\"line\">select count(distinct substring(email, 1, 5)) / count(*) from tb_user;</span><br></pre></td></tr></table></figure>\n\n<p>show index 里面的sub_part可以看到接取的长度</p>\n<h4 id=\"单列索引-amp-联合索引\"><a href=\"#单列索引-amp-联合索引\" class=\"headerlink\" title=\"单列索引&amp;联合索引\"></a>单列索引&amp;联合索引</h4><p>单列索引：即一个索引只包含单个列<br>联合索引：即一个索引包含了多个列<br>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。</p>\n<p>单列索引情况：<br><code>explain select id, phone, name from tb_user where phone = &#39;17799990010&#39; and name = &#39;韩信&#39;;</code><br>这句只会用到phone索引字段</p>\n<h5 id=\"注意事项-8\"><a href=\"#注意事项-8\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li>多条件联合查询时，MySQL优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询</li>\n</ul>\n<h3 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h3><ol>\n<li>针对于数据量较大，且查询比较频繁的表建立索引</li>\n<li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li>\n<li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li>\n<li>如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引</li>\n<li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li>\n<li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率</li>\n<li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询</li>\n</ol>\n<h2 id=\"SQL-优化\"><a href=\"#SQL-优化\" class=\"headerlink\" title=\"SQL 优化\"></a>SQL 优化</h2><h3 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h3><p>普通插入：</p>\n<ol>\n<li>采用批量插入（一次插入的数据不建议超过1000条）</li>\n<li>手动提交事务</li>\n<li>主键顺序插入</li>\n</ol>\n<p>大批量插入：<br>如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令插入。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 客户端连接服务端时，加上参数 --local-infile（这一行在bash/cmd界面输入）</span><br><span class=\"line\">mysql --local-infile -u root -p</span><br><span class=\"line\"># 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关</span><br><span class=\"line\">set global local_infile = 1;</span><br><span class=\"line\">select @@local_infile;</span><br><span class=\"line\"># 执行load指令将准备好的数据，加载到表结构中</span><br><span class=\"line\">load data local infile &apos;/root/sql1.log&apos; into table &apos;tb_user&apos; fields terminated by &apos;,&apos; lines terminated by &apos;\\n&apos;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"主键优化\"><a href=\"#主键优化\" class=\"headerlink\" title=\"主键优化\"></a>主键优化</h3><p>数据组织方式：在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（Index organized table, IOT）</p>\n<p>页分裂：页可以为空，也可以填充一般，也可以填充100%，每个页包含了2-N行数据（如果一行数据过大，会行溢出），根据主键排列。<br>页合并：当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录到达 MERGE_THRESHOLD（默认为页的50%），InnoDB会开始寻找最靠近的页（前后）看看是否可以将这两个页合并以优化空间使用。</p>\n<p>MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或创建索引时指定</p>\n<blockquote>\n<p>文字说明不够清晰明了，具体可以看视频里的PPT演示过程：<a href=\"https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90</a></p>\n</blockquote>\n<p>主键设计原则：</p>\n<ul>\n<li>满足业务需求的情况下，尽量降低主键的长度</li>\n<li>插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键</li>\n<li>尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号</li>\n<li>业务操作时，避免对主键的修改</li>\n</ul>\n<h3 id=\"order-by优化\"><a href=\"#order-by优化\" class=\"headerlink\" title=\"order by优化\"></a>order by优化</h3><ol>\n<li>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序</li>\n<li>Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</li>\n</ol>\n<p>如果order by字段全部使用升序排序或者降序排序，则都会走索引，但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain的extra信息显示的是<code>Using index, Using filesort</code>，如果要优化掉Using filesort，则需要另外再创建一个索引，如：<code>create index idx_user_age_phone_ad on tb_user(age asc, phone desc);</code>，此时使用<code>select id, age, phone from tb_user order by age asc, phone desc;</code>会全部走索引</p>\n<p>总结：</p>\n<ul>\n<li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li>\n<li>尽量使用覆盖索引</li>\n<li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC/DESC）</li>\n<li>如果不可避免出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认256k）</li>\n</ul>\n<h3 id=\"group-by优化\"><a href=\"#group-by优化\" class=\"headerlink\" title=\"group by优化\"></a>group by优化</h3><ul>\n<li>在分组操作时，可以通过索引来提高效率</li>\n<li>分组操作时，索引的使用也是满足最左前缀法则的</li>\n</ul>\n<p>如索引为<code>idx_user_pro_age_stat</code>，则句式可以是<code>select ... where profession order by age</code>，这样也符合最左前缀法则</p>\n<h3 id=\"limit优化\"><a href=\"#limit优化\" class=\"headerlink\" title=\"limit优化\"></a>limit优化</h3><p>常见的问题如<code>limit 2000000, 10</code>，此时需要 MySQL 排序前2000000条记录，但仅仅返回2000000 - 2000010的记录，其他记录丢弃，查询排序的代价非常大。<br>优化方案：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化</p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 此语句耗时很长</span><br><span class=\"line\">select * from tb_sku limit 9000000, 10;</span><br><span class=\"line\">-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询</span><br><span class=\"line\">select id from tb_sku order by id limit 9000000, 10;</span><br><span class=\"line\">-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit</span><br><span class=\"line\">-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);</span><br><span class=\"line\">-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度</span><br><span class=\"line\">select * from tb_sku as s, (select id from tb_sku order by id limit 9000000, 10) as a where s.id = a.id;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"count优化\"><a href=\"#count优化\" class=\"headerlink\" title=\"count优化\"></a>count优化</h3><p>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高（前提是不适用where）；<br>InnoDB 在执行 count(*) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。<br>优化方案：自己计数，如创建key-value表存储在内存或硬盘，或者是用redis</p>\n<p>count的几种用法：</p>\n<ul>\n<li>如果count函数的参数（count里面写的那个字段）不是NULL（字段值不为NULL），累计值就加一，最后返回累计值</li>\n<li>用法：count(*)、count(主键)、count(字段)、count(1)</li>\n<li>count(主键)跟count(*)一样，因为主键不能为空；count(字段)只计算字段值不为NULL的行；count(1)引擎会为每行添加一个1，然后就count这个1，返回结果也跟count(*)一样；count(null)返回0</li>\n</ul>\n<p>各种用法的性能：</p>\n<ul>\n<li>count(主键)：InnoDB引擎会遍历整张表，把每行的主键id值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）</li>\n<li>count(字段)：没有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加；有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加</li>\n<li>count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加</li>\n<li>count(*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加</li>\n</ul>\n<p>按效率排序：count(字段) &lt; count(主键) &lt; count(1) &lt; count(*)，所以尽量使用 count(*)</p>\n<h3 id=\"update优化（避免行锁升级为表锁）\"><a href=\"#update优化（避免行锁升级为表锁）\" class=\"headerlink\" title=\"update优化（避免行锁升级为表锁）\"></a>update优化（避免行锁升级为表锁）</h3><p>InnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。</p>\n<p>如以下两条语句：<br><code>update student set no = &#39;123&#39; where id = 1;</code>，这句由于id有主键索引，所以只会锁这一行；<br><code>update student set no = &#39;123&#39; where name = &#39;test&#39;;</code>，这句由于name没有索引，所以会把整张表都锁住进行数据更新，解决方法是给name字段添加索引</p>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><h2 id=\"整型\"><a href=\"#整型\" class=\"headerlink\" title=\"整型\"></a>整型</h2><table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>取值范围</th>\n<th>大小</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>TINYINT</td>\n<td>-128〜127</td>\n<td>1个字节</td>\n</tr>\n<tr>\n<td>SMALLINT</td>\n<td>-32768〜32767</td>\n<td>2个宇节</td>\n</tr>\n<tr>\n<td>MEDIUMINT</td>\n<td>-8388608〜8388607</td>\n<td>3个字节</td>\n</tr>\n<tr>\n<td>INT (INTEGHR)</td>\n<td>-2147483648〜2147483647</td>\n<td>4个字节</td>\n</tr>\n<tr>\n<td>BIGINT</td>\n<td>-9223372036854775808〜9223372036854775807</td>\n<td>8个字节</td>\n</tr>\n</tbody></table>\n<p>无符号在数据类型后加 unsigned 关键字。</p>\n<h2 id=\"浮点型\"><a href=\"#浮点型\" class=\"headerlink\" title=\"浮点型\"></a>浮点型</h2><table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>FLOAT</td>\n<td>单精度浮点数</td>\n<td>4 个字节</td>\n</tr>\n<tr>\n<td>DOUBLE</td>\n<td>双精度浮点数</td>\n<td>8 个字节</td>\n</tr>\n<tr>\n<td>DECIMAL (M, D)，DEC</td>\n<td>压缩的“严格”定点数</td>\n<td>M+2 个字节</td>\n</tr>\n</tbody></table>\n<h2 id=\"日期和时间\"><a href=\"#日期和时间\" class=\"headerlink\" title=\"日期和时间\"></a>日期和时间</h2><table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>日期格式</th>\n<th>日期范围</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>YEAR</td>\n<td>YYYY</td>\n<td>1901 ~ 2155</td>\n<td>1 个字节</td>\n</tr>\n<tr>\n<td>TIME</td>\n<td>HH:MM:SS</td>\n<td>-838:59:59 ~ 838:59:59</td>\n<td>3 个字节</td>\n</tr>\n<tr>\n<td>DATE</td>\n<td>YYYY-MM-DD</td>\n<td>1000-01-01 ~ 9999-12-3</td>\n<td>3 个字节</td>\n</tr>\n<tr>\n<td>DATETIME</td>\n<td>YYYY-MM-DD HH:MM:SS</td>\n<td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td>\n<td>8 个字节</td>\n</tr>\n<tr>\n<td>TIMESTAMP</td>\n<td>YYYY-MM-DD HH:MM:SS</td>\n<td>1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td>\n<td>4 个字节</td>\n</tr>\n</tbody></table>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CHAR(M)</td>\n<td>固定长度非二进制字符串</td>\n<td>M 字节，1&lt;=M&lt;=255</td>\n</tr>\n<tr>\n<td>VARCHAR(M)</td>\n<td>变长非二进制字符串</td>\n<td>L+1字节，在此，L&lt; = M和 1&lt;=M&lt;=255</td>\n</tr>\n<tr>\n<td>TINYTEXT</td>\n<td>非常小的非二进制字符串</td>\n<td>L+1字节，在此，L&lt;2^8</td>\n</tr>\n<tr>\n<td>TEXT</td>\n<td>小的非二进制字符串</td>\n<td>L+2字节，在此，L&lt;2^16</td>\n</tr>\n<tr>\n<td>MEDIUMTEXT</td>\n<td>中等大小的非二进制字符串</td>\n<td>L+3字节，在此，L&lt;2^24</td>\n</tr>\n<tr>\n<td>LONGTEXT</td>\n<td>大的非二进制字符串</td>\n<td>L+4字节，在此，L&lt;2^32</td>\n</tr>\n<tr>\n<td>ENUM</td>\n<td>枚举类型，只能有一个枚举字符串值</td>\n<td>1或2个字节，取决于枚举值的数目 (最大值为65535)</td>\n</tr>\n<tr>\n<td>SET</td>\n<td>一个设置，字符串对象可以有零个或 多个SET成员</td>\n<td>1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员）</td>\n</tr>\n</tbody></table>\n<h2 id=\"二进制类型\"><a href=\"#二进制类型\" class=\"headerlink\" title=\"二进制类型\"></a>二进制类型</h2><table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BIT(M)</td>\n<td>位字段类型</td>\n<td>大约 (M+7)/8 字节</td>\n</tr>\n<tr>\n<td>BINARY(M)</td>\n<td>固定长度二进制字符串</td>\n<td>M 字节</td>\n</tr>\n<tr>\n<td>VARBINARY (M)</td>\n<td>可变长度二进制字符串</td>\n<td>M+1 字节</td>\n</tr>\n<tr>\n<td>TINYBLOB (M)</td>\n<td>非常小的BLOB</td>\n<td>L+1 字节，在此，L&lt;2^8</td>\n</tr>\n<tr>\n<td>BLOB (M)</td>\n<td>小 BLOB</td>\n<td>L+2 字节，在此，L&lt;2^16</td>\n</tr>\n<tr>\n<td>MEDIUMBLOB (M)</td>\n<td>中等大小的BLOB</td>\n<td>L+3 字节，在此，L&lt;2^24</td>\n</tr>\n<tr>\n<td>LONGBLOB (M)</td>\n<td>非常大的BLOB</td>\n<td>L+4 字节，在此，L&lt;2^32</td>\n</tr>\n</tbody></table>\n<h1 id=\"权限一览表\"><a href=\"#权限一览表\" class=\"headerlink\" title=\"权限一览表\"></a>权限一览表</h1><blockquote>\n<p>具体权限的作用详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html\" title=\"官方文档\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n</blockquote>\n<p>GRANT 和 REVOKE 允许的静态权限</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Privilege</th>\n<th align=\"left\">Grant Table Column</th>\n<th align=\"left\">Context</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_all\" target=\"_blank\" rel=\"noopener\"><code>ALL [PRIVILEGES]</code></a></td>\n<td align=\"left\">Synonym for “all privileges”</td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter\" target=\"_blank\" rel=\"noopener\"><code>ALTER</code></a></td>\n<td align=\"left\"><code>Alter_priv</code></td>\n<td align=\"left\">Tables</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter-routine\" target=\"_blank\" rel=\"noopener\"><code>ALTER ROUTINE</code></a></td>\n<td align=\"left\"><code>Alter_routine_priv</code></td>\n<td align=\"left\">Stored routines</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create\" target=\"_blank\" rel=\"noopener\"><code>CREATE</code></a></td>\n<td align=\"left\"><code>Create_priv</code></td>\n<td align=\"left\">Databases, tables, or indexes</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-role\" target=\"_blank\" rel=\"noopener\"><code>CREATE ROLE</code></a></td>\n<td align=\"left\"><code>Create_role_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-routine\" target=\"_blank\" rel=\"noopener\"><code>CREATE ROUTINE</code></a></td>\n<td align=\"left\"><code>Create_routine_priv</code></td>\n<td align=\"left\">Stored routines</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-tablespace\" target=\"_blank\" rel=\"noopener\"><code>CREATE TABLESPACE</code></a></td>\n<td align=\"left\"><code>Create_tablespace_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-temporary-tables\" target=\"_blank\" rel=\"noopener\"><code>CREATE TEMPORARY TABLES</code></a></td>\n<td align=\"left\"><code>Create_tmp_table_priv</code></td>\n<td align=\"left\">Tables</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-user\" target=\"_blank\" rel=\"noopener\"><code>CREATE USER</code></a></td>\n<td align=\"left\"><code>Create_user_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-view\" target=\"_blank\" rel=\"noopener\"><code>CREATE VIEW</code></a></td>\n<td align=\"left\"><code>Create_view_priv</code></td>\n<td align=\"left\">Views</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_delete\" target=\"_blank\" rel=\"noopener\"><code>DELETE</code></a></td>\n<td align=\"left\"><code>Delete_priv</code></td>\n<td align=\"left\">Tables</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop\" target=\"_blank\" rel=\"noopener\"><code>DROP</code></a></td>\n<td align=\"left\"><code>Drop_priv</code></td>\n<td align=\"left\">Databases, tables, or views</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop-role\" target=\"_blank\" rel=\"noopener\"><code>DROP ROLE</code></a></td>\n<td align=\"left\"><code>Drop_role_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_event\" target=\"_blank\" rel=\"noopener\"><code>EVENT</code></a></td>\n<td align=\"left\"><code>Event_priv</code></td>\n<td align=\"left\">Databases</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_execute\" target=\"_blank\" rel=\"noopener\"><code>EXECUTE</code></a></td>\n<td align=\"left\"><code>Execute_priv</code></td>\n<td align=\"left\">Stored routines</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_file\" target=\"_blank\" rel=\"noopener\"><code>FILE</code></a></td>\n<td align=\"left\"><code>File_priv</code></td>\n<td align=\"left\">File access on server host</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_grant-option\" target=\"_blank\" rel=\"noopener\"><code>GRANT OPTION</code></a></td>\n<td align=\"left\"><code>Grant_priv</code></td>\n<td align=\"left\">Databases, tables, or stored routines</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_index\" target=\"_blank\" rel=\"noopener\"><code>INDEX</code></a></td>\n<td align=\"left\"><code>Index_priv</code></td>\n<td align=\"left\">Tables</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_insert\" target=\"_blank\" rel=\"noopener\"><code>INSERT</code></a></td>\n<td align=\"left\"><code>Insert_priv</code></td>\n<td align=\"left\">Tables or columns</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_lock-tables\" target=\"_blank\" rel=\"noopener\"><code>LOCK TABLES</code></a></td>\n<td align=\"left\"><code>Lock_tables_priv</code></td>\n<td align=\"left\">Databases</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_process\" target=\"_blank\" rel=\"noopener\"><code>PROCESS</code></a></td>\n<td align=\"left\"><code>Process_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_proxy\" target=\"_blank\" rel=\"noopener\"><code>PROXY</code></a></td>\n<td align=\"left\">See <code>proxies_priv</code> table</td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_references\" target=\"_blank\" rel=\"noopener\"><code>REFERENCES</code></a></td>\n<td align=\"left\"><code>References_priv</code></td>\n<td align=\"left\">Databases or tables</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_reload\" target=\"_blank\" rel=\"noopener\"><code>RELOAD</code></a></td>\n<td align=\"left\"><code>Reload_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-client\" target=\"_blank\" rel=\"noopener\"><code>REPLICATION CLIENT</code></a></td>\n<td align=\"left\"><code>Repl_client_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave\" target=\"_blank\" rel=\"noopener\"><code>REPLICATION SLAVE</code></a></td>\n<td align=\"left\"><code>Repl_slave_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_select\" target=\"_blank\" rel=\"noopener\"><code>SELECT</code></a></td>\n<td align=\"left\"><code>Select_priv</code></td>\n<td align=\"left\">Tables or columns</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-databases\" target=\"_blank\" rel=\"noopener\"><code>SHOW DATABASES</code></a></td>\n<td align=\"left\"><code>Show_db_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-view\" target=\"_blank\" rel=\"noopener\"><code>SHOW VIEW</code></a></td>\n<td align=\"left\"><code>Show_view_priv</code></td>\n<td align=\"left\">Views</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_shutdown\" target=\"_blank\" rel=\"noopener\"><code>SHUTDOWN</code></a></td>\n<td align=\"left\"><code>Shutdown_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_super\" target=\"_blank\" rel=\"noopener\"><code>SUPER</code></a></td>\n<td align=\"left\"><code>Super_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_trigger\" target=\"_blank\" rel=\"noopener\"><code>TRIGGER</code></a></td>\n<td align=\"left\"><code>Trigger_priv</code></td>\n<td align=\"left\">Tables</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_update\" target=\"_blank\" rel=\"noopener\"><code>UPDATE</code></a></td>\n<td align=\"left\"><code>Update_priv</code></td>\n<td align=\"left\">Tables or columns</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_usage\" target=\"_blank\" rel=\"noopener\"><code>USAGE</code></a></td>\n<td align=\"left\">Synonym for “no privileges”</td>\n<td align=\"left\">Server administration</td>\n</tr>\n</tbody></table>\n<p>GRANT 和 REVOKE 允许的动态权限</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Privilege</th>\n<th align=\"left\">Context</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_application-password-admin\" target=\"_blank\" rel=\"noopener\"><code>APPLICATION_PASSWORD_ADMIN</code></a></td>\n<td align=\"left\">Dual password administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-abort-exempt\" target=\"_blank\" rel=\"noopener\"><code>AUDIT_ABORT_EXEMPT</code></a></td>\n<td align=\"left\">Allow queries blocked by audit log filter</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-admin\" target=\"_blank\" rel=\"noopener\"><code>AUDIT_ADMIN</code></a></td>\n<td align=\"left\">Audit log administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_authentication-policy-admin\" target=\"_blank\" rel=\"noopener\"><code>AUTHENTICATION_POLICY_ADMIN</code></a></td>\n<td align=\"left\">Authentication administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_backup-admin\" target=\"_blank\" rel=\"noopener\"><code>BACKUP_ADMIN</code></a></td>\n<td align=\"left\">Backup administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-admin\" target=\"_blank\" rel=\"noopener\"><code>BINLOG_ADMIN</code></a></td>\n<td align=\"left\">Backup and Replication administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-encryption-admin\" target=\"_blank\" rel=\"noopener\"><code>BINLOG_ENCRYPTION_ADMIN</code></a></td>\n<td align=\"left\">Backup and Replication administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_clone-admin\" target=\"_blank\" rel=\"noopener\"><code>CLONE_ADMIN</code></a></td>\n<td align=\"left\">Clone administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_connection-admin\" target=\"_blank\" rel=\"noopener\"><code>CONNECTION_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_encryption-key-admin\" target=\"_blank\" rel=\"noopener\"><code>ENCRYPTION_KEY_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-admin\" target=\"_blank\" rel=\"noopener\"><code>FIREWALL_ADMIN</code></a></td>\n<td align=\"left\">Firewall administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-exempt\" target=\"_blank\" rel=\"noopener\"><code>FIREWALL_EXEMPT</code></a></td>\n<td align=\"left\">Firewall administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-user\" target=\"_blank\" rel=\"noopener\"><code>FIREWALL_USER</code></a></td>\n<td align=\"left\">Firewall administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-optimizer-costs\" target=\"_blank\" rel=\"noopener\"><code>FLUSH_OPTIMIZER_COSTS</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-status\" target=\"_blank\" rel=\"noopener\"><code>FLUSH_STATUS</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-tables\" target=\"_blank\" rel=\"noopener\"><code>FLUSH_TABLES</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-user-resources\" target=\"_blank\" rel=\"noopener\"><code>FLUSH_USER_RESOURCES</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-admin\" target=\"_blank\" rel=\"noopener\"><code>GROUP_REPLICATION_ADMIN</code></a></td>\n<td align=\"left\">Replication administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-stream\" target=\"_blank\" rel=\"noopener\"><code>GROUP_REPLICATION_STREAM</code></a></td>\n<td align=\"left\">Replication administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_innodb-redo-log-archive\" target=\"_blank\" rel=\"noopener\"><code>INNODB_REDO_LOG_ARCHIVE</code></a></td>\n<td align=\"left\">Redo log archiving administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_ndb-stored-user\" target=\"_blank\" rel=\"noopener\"><code>NDB_STORED_USER</code></a></td>\n<td align=\"left\">NDB Cluster</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_passwordless-user-admin\" target=\"_blank\" rel=\"noopener\"><code>PASSWORDLESS_USER_ADMIN</code></a></td>\n<td align=\"left\">Authentication administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_persist-ro-variables-admin\" target=\"_blank\" rel=\"noopener\"><code>PERSIST_RO_VARIABLES_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-applier\" target=\"_blank\" rel=\"noopener\"><code>REPLICATION_APPLIER</code></a></td>\n<td align=\"left\"><code>PRIVILEGE_CHECKS_USER</code> for a replication channel</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave-admin\" target=\"_blank\" rel=\"noopener\"><code>REPLICATION_SLAVE_ADMIN</code></a></td>\n<td align=\"left\">Replication administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-admin\" target=\"_blank\" rel=\"noopener\"><code>RESOURCE_GROUP_ADMIN</code></a></td>\n<td align=\"left\">Resource group administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-user\" target=\"_blank\" rel=\"noopener\"><code>RESOURCE_GROUP_USER</code></a></td>\n<td align=\"left\">Resource group administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_role-admin\" target=\"_blank\" rel=\"noopener\"><code>ROLE_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_session-variables-admin\" target=\"_blank\" rel=\"noopener\"><code>SESSION_VARIABLES_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_set-user-id\" target=\"_blank\" rel=\"noopener\"><code>SET_USER_ID</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-routine\" target=\"_blank\" rel=\"noopener\"><code>SHOW_ROUTINE</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-user\" target=\"_blank\" rel=\"noopener\"><code>SYSTEM_USER</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-variables-admin\" target=\"_blank\" rel=\"noopener\"><code>SYSTEM_VARIABLES_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_table-encryption-admin\" target=\"_blank\" rel=\"noopener\"><code>TABLE_ENCRYPTION_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_version-token-admin\" target=\"_blank\" rel=\"noopener\"><code>VERSION_TOKEN_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_xa-recover-admin\" target=\"_blank\" rel=\"noopener\"><code>XA_RECOVER_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n</tbody></table>\n<h1 id=\"图形化界面工具\"><a href=\"#图形化界面工具\" class=\"headerlink\" title=\"图形化界面工具\"></a>图形化界面工具</h1><ul>\n<li>Workbench(免费): <a href=\"http://dev.mysql.com/downloads/workbench/\" target=\"_blank\" rel=\"noopener\">http://dev.mysql.com/downloads/workbench/</a></li>\n<li>navicat(收费，试用版30天): <a href=\"https://www.navicat.com/en/download/navicat-for-mysql\" target=\"_blank\" rel=\"noopener\">https://www.navicat.com/en/download/navicat-for-mysql</a></li>\n<li>Sequel Pro(开源免费，仅支持Mac OS): <a href=\"http://www.sequelpro.com/\" target=\"_blank\" rel=\"noopener\">http://www.sequelpro.com/</a></li>\n<li>HeidiSQL(免费): <a href=\"http://www.heidisql.com/\" target=\"_blank\" rel=\"noopener\">http://www.heidisql.com/</a></li>\n<li>phpMyAdmin(免费): <a href=\"https://www.phpmyadmin.net/\" target=\"_blank\" rel=\"noopener\">https://www.phpmyadmin.net/</a></li>\n<li>SQLyog: <a href=\"https://sqlyog.en.softonic.com/\" target=\"_blank\" rel=\"noopener\">https://sqlyog.en.softonic.com/</a></li>\n</ul>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><h1 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h1><ol>\n<li>在SQL语句之后加上<code>\\G</code>会将结果的表格形式转换成行文本形式</li>\n<li>查看Mysql数据库占用空间：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT table_schema &quot;Database Name&quot;</span><br><span class=\"line\">     , SUM(data_length + index_length) / (1024 * 1024) &quot;Database Size in MB&quot;</span><br><span class=\"line\">FROM information_schema.TABLES</span><br><span class=\"line\">GROUP BY table_schema;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"基础篇\"><a href=\"#基础篇\" class=\"headerlink\" title=\"基础篇\"></a>基础篇</h1><h2 id=\"通用语法及分类\"><a href=\"#通用语法及分类\" class=\"headerlink\" title=\"通用语法及分类\"></a>通用语法及分类</h2><ul>\n<li>DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）</li>\n<li>DML: 数据操作语言，用来对数据库表中的数据进行增删改</li>\n<li>DQL: 数据查询语言，用来查询数据库中表的记录</li>\n<li>DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限</li>\n</ul>\n<h3 id=\"DDL（数据定义语言）\"><a href=\"#DDL（数据定义语言）\" class=\"headerlink\" title=\"DDL（数据定义语言）\"></a>DDL（数据定义语言）</h3><p>数据定义语言</p>\n<h4 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h4><p>查询所有数据库：<br><code>SHOW DATABASES;</code><br>查询当前数据库：<br><code>SELECT DATABASE();</code><br>创建数据库：<br><code>CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];</code><br>删除数据库：<br><code>DROP DATABASE [ IF EXISTS ] 数据库名;</code><br>使用数据库：<br><code>USE 数据库名;</code></p>\n<h5 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li>UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集</li>\n</ul>\n<h4 id=\"表操作\"><a href=\"#表操作\" class=\"headerlink\" title=\"表操作\"></a>表操作</h4><p>查询当前数据库所有表：<br><code>SHOW TABLES;</code><br>查询表结构：<br><code>DESC 表名;</code><br>查询指定表的建表语句：<br><code>SHOW CREATE TABLE 表名;</code></p>\n<p>创建表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE 表名(</span><br><span class=\"line\">\t字段1 字段1类型 [COMMENT 字段1注释],</span><br><span class=\"line\">\t字段2 字段2类型 [COMMENT 字段2注释],</span><br><span class=\"line\">\t字段3 字段3类型 [COMMENT 字段3注释],</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t字段n 字段n类型 [COMMENT 字段n注释]</span><br><span class=\"line\">)[ COMMENT 表注释 ];</span><br></pre></td></tr></table></figure>\n\n<p><strong>最后一个字段后面没有逗号</strong></p>\n<p>添加字段：<br><code>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：<code>ALTER TABLE emp ADD nickname varchar(20) COMMENT &#39;昵称&#39;;</code></p>\n<p>修改数据类型：<br><code>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</code><br>修改字段名和字段类型：<br><code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：将emp表的nickname字段修改为username，类型为varchar(30)<br><code>ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT &#39;昵称&#39;;</code></p>\n<p>删除字段：<br><code>ALTER TABLE 表名 DROP 字段名;</code></p>\n<p>修改表名：<br><code>ALTER TABLE 表名 RENAME TO 新表名</code></p>\n<p>删除表：<br><code>DROP TABLE [IF EXISTS] 表名;</code><br>删除表，并重新创建该表：<br><code>TRUNCATE TABLE 表名;</code></p>\n<h3 id=\"DML（数据操作语言）\"><a href=\"#DML（数据操作语言）\" class=\"headerlink\" title=\"DML（数据操作语言）\"></a>DML（数据操作语言）</h3><h4 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a>添加数据</h4><p>指定字段：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</code><br>全部字段：<br><code>INSERT INTO 表名 VALUES (值1, 值2, ...);</code></p>\n<p>批量添加数据：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code><br><code>INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code></p>\n<h5 id=\"注意事项-1\"><a href=\"#注意事项-1\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li>字符串和日期类型数据应该包含在引号中</li>\n<li>插入的数据大小应该在字段的规定范围内</li>\n</ul>\n<h4 id=\"更新和删除数据\"><a href=\"#更新和删除数据\" class=\"headerlink\" title=\"更新和删除数据\"></a>更新和删除数据</h4><p>修改数据：<br><code>UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];</code><br>例：<br><code>UPDATE emp SET name = &#39;Jack&#39; WHERE id = 1;</code></p>\n<p>删除数据：<br><code>DELETE FROM 表名 [ WHERE 条件 ];</code></p>\n<h3 id=\"DQL（数据查询语言）\"><a href=\"#DQL（数据查询语言）\" class=\"headerlink\" title=\"DQL（数据查询语言）\"></a>DQL（数据查询语言）</h3><p>语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">\t字段列表</span><br><span class=\"line\">FROM</span><br><span class=\"line\">\t表名字段</span><br><span class=\"line\">WHERE</span><br><span class=\"line\">\t条件列表</span><br><span class=\"line\">GROUP BY</span><br><span class=\"line\">\t分组字段列表</span><br><span class=\"line\">HAVING</span><br><span class=\"line\">\t分组后的条件列表</span><br><span class=\"line\">ORDER BY</span><br><span class=\"line\">\t排序字段列表</span><br><span class=\"line\">LIMIT</span><br><span class=\"line\">\t分页参数</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"基础查询\"><a href=\"#基础查询\" class=\"headerlink\" title=\"基础查询\"></a>基础查询</h4><p>查询多个字段：<br><code>SELECT 字段1, 字段2, 字段3, ... FROM 表名;</code><br><code>SELECT * FROM 表名;</code></p>\n<p>设置别名：<br><code>SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;</code><br><code>SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;</code></p>\n<p>去除重复记录：<br><code>SELECT DISTINCT 字段列表 FROM 表名;</code></p>\n<p>转义：<br><code>SELECT * FROM 表名 WHERE name LIKE &#39;/_张三&#39; ESCAPE &#39;/&#39;</code><br>/ 之后的_不作为通配符</p>\n<h4 id=\"条件查询\"><a href=\"#条件查询\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code></p>\n<p>条件：</p>\n<table>\n<thead>\n<tr>\n<th>比较运算符</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&gt;</td>\n<td>大于</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于</td>\n</tr>\n<tr>\n<td>=</td>\n<td>等于</td>\n</tr>\n<tr>\n<td>&lt;&gt; 或 !=</td>\n<td>不等于</td>\n</tr>\n<tr>\n<td>BETWEEN … AND …</td>\n<td>在某个范围内（含最小、最大值）</td>\n</tr>\n<tr>\n<td>IN(…)</td>\n<td>在in之后的列表中的值，多选一</td>\n</tr>\n<tr>\n<td>LIKE 占位符</td>\n<td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td>\n</tr>\n<tr>\n<td>IS NULL</td>\n<td>是NULL</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>逻辑运算符</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>AND 或 &amp;&amp;</td>\n<td>并且（多个条件同时成立）</td>\n</tr>\n<tr>\n<td>OR 或 &#124;&#124;</td>\n<td>或者（多个条件任意一个成立）</td>\n</tr>\n<tr>\n<td>NOT 或 !</td>\n<td>非，不是</td>\n</tr>\n</tbody></table>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 年龄等于30</span><br><span class=\"line\">select * from employee where age = 30;</span><br><span class=\"line\">-- 年龄小于30</span><br><span class=\"line\">select * from employee where age &lt; 30;</span><br><span class=\"line\">-- 小于等于</span><br><span class=\"line\">select * from employee where age &lt;= 30;</span><br><span class=\"line\">-- 没有身份证</span><br><span class=\"line\">select * from employee where idcard is null or idcard = &apos;&apos;;</span><br><span class=\"line\">-- 有身份证</span><br><span class=\"line\">select * from employee where idcard;</span><br><span class=\"line\">select * from employee where idcard is not null;</span><br><span class=\"line\">-- 不等于</span><br><span class=\"line\">select * from employee where age != 30;</span><br><span class=\"line\">-- 年龄在20到30之间</span><br><span class=\"line\">select * from employee where age between 20 and 30;</span><br><span class=\"line\">select * from employee where age &gt;= 20 and age &lt;= 30;</span><br><span class=\"line\">-- 下面语句不报错，但查不到任何信息</span><br><span class=\"line\">select * from employee where age between 30 and 20;</span><br><span class=\"line\">-- 性别为女且年龄小于30</span><br><span class=\"line\">select * from employee where age &lt; 30 and gender = &apos;女&apos;;</span><br><span class=\"line\">-- 年龄等于25或30或35</span><br><span class=\"line\">select * from employee where age = 25 or age = 30 or age = 35;</span><br><span class=\"line\">select * from employee where age in (25, 30, 35);</span><br><span class=\"line\">-- 姓名为两个字</span><br><span class=\"line\">select * from employee where name like &apos;__&apos;;</span><br><span class=\"line\">-- 身份证最后为X</span><br><span class=\"line\">select * from employee where idcard like &apos;%X&apos;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"聚合查询（聚合函数）\"><a href=\"#聚合查询（聚合函数）\" class=\"headerlink\" title=\"聚合查询（聚合函数）\"></a>聚合查询（聚合函数）</h4><p>常见聚合函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>count</td>\n<td>统计数量</td>\n</tr>\n<tr>\n<td>max</td>\n<td>最大值</td>\n</tr>\n<tr>\n<td>min</td>\n<td>最小值</td>\n</tr>\n<tr>\n<td>avg</td>\n<td>平均值</td>\n</tr>\n<tr>\n<td>sum</td>\n<td>求和</td>\n</tr>\n</tbody></table>\n<p>语法：<br><code>SELECT 聚合函数(字段列表) FROM 表名;</code><br>例：<br><code>SELECT count(id) from employee where workaddress = &quot;广东省&quot;;</code></p>\n<h4 id=\"分组查询\"><a href=\"#分组查询\" class=\"headerlink\" title=\"分组查询\"></a>分组查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];</code></p>\n<p>where 和 having 的区别：</p>\n<ul>\n<li>执行时机不同：where是分组之前进行过滤，不满足where条件不参与分组；having是分组后对结果进行过滤。</li>\n<li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li>\n</ul>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）</span><br><span class=\"line\">select count(*) from employee group by gender;</span><br><span class=\"line\">-- 根据性别分组，统计男性和女性数量</span><br><span class=\"line\">select gender, count(*) from employee group by gender;</span><br><span class=\"line\">-- 根据性别分组，统计男性和女性的平均年龄</span><br><span class=\"line\">select gender, avg(age) from employee group by gender;</span><br><span class=\"line\">-- 年龄小于45，并根据工作地址分组</span><br><span class=\"line\">select workaddress, count(*) from employee where age &lt; 45 group by workaddress;</span><br><span class=\"line\">-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址</span><br><span class=\"line\">select workaddress, count(*) address_count from employee where age &lt; 45 group by workaddress having address_count &gt;= 3;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意事项-2\"><a href=\"#注意事项-2\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li>执行顺序：where &gt; 聚合函数 &gt; having</li>\n<li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li>\n</ul>\n<h4 id=\"排序查询\"><a href=\"#排序查询\" class=\"headerlink\" title=\"排序查询\"></a>排序查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;</code></p>\n<p>排序方式：</p>\n<ul>\n<li>ASC: 升序（默认）</li>\n<li>DESC: 降序</li>\n</ul>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 根据年龄升序排序</span><br><span class=\"line\">SELECT * FROM employee ORDER BY age ASC;</span><br><span class=\"line\">SELECT * FROM employee ORDER BY age;</span><br><span class=\"line\">-- 两字段排序，根据年龄升序排序，入职时间降序排序</span><br><span class=\"line\">SELECT * FROM employee ORDER BY age ASC, entrydate DESC;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意事项-3\"><a href=\"#注意事项-3\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p>\n<h4 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;</code></p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询第一页数据，展示10条</span><br><span class=\"line\">SELECT * FROM employee LIMIT 0, 10;</span><br><span class=\"line\">-- 查询第二页</span><br><span class=\"line\">SELECT * FROM employee LIMIT 10, 10;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意事项-4\"><a href=\"#注意事项-4\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li>起始索引从0开始，起始索引 = （查询页码 - 1） * 每页显示记录数</li>\n<li>分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT</li>\n<li>如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10</li>\n</ul>\n<h4 id=\"DQL执行顺序\"><a href=\"#DQL执行顺序\" class=\"headerlink\" title=\"DQL执行顺序\"></a>DQL执行顺序</h4><p>FROM -&gt; WHERE -&gt; GROUP BY -&gt; SELECT -&gt; ORDER BY -&gt; LIMIT</p>\n<h3 id=\"DCL\"><a href=\"#DCL\" class=\"headerlink\" title=\"DCL\"></a>DCL</h3><h4 id=\"管理用户\"><a href=\"#管理用户\" class=\"headerlink\" title=\"管理用户\"></a>管理用户</h4><p>查询用户：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USER mysql;</span><br><span class=\"line\">SELECT * FROM user;</span><br></pre></td></tr></table></figure>\n\n<p>创建用户:<br><code>CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;</code></p>\n<p>修改用户密码：<br><code>ALTER USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;;</code></p>\n<p>删除用户：<br><code>DROP USER &#39;用户名&#39;@&#39;主机名&#39;;</code></p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 创建用户test，只能在当前主机localhost访问</span><br><span class=\"line\">create user &apos;test&apos;@&apos;localhost&apos; identified by &apos;123456&apos;;</span><br><span class=\"line\">-- 创建用户test，能在任意主机访问</span><br><span class=\"line\">create user &apos;test&apos;@&apos;%&apos; identified by &apos;123456&apos;;</span><br><span class=\"line\">create user &apos;test&apos; identified by &apos;123456&apos;;</span><br><span class=\"line\">-- 修改密码</span><br><span class=\"line\">alter user &apos;test&apos;@&apos;localhost&apos; identified with mysql_native_password by &apos;1234&apos;;</span><br><span class=\"line\">-- 删除用户</span><br><span class=\"line\">drop user &apos;test&apos;@&apos;localhost&apos;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意事项-5\"><a href=\"#注意事项-5\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li>主机名可以使用 % 通配</li>\n</ul>\n<h4 id=\"权限控制\"><a href=\"#权限控制\" class=\"headerlink\" title=\"权限控制\"></a>权限控制</h4><p>常用权限：</p>\n<table>\n<thead>\n<tr>\n<th>权限</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ALL, ALL PRIVILEGES</td>\n<td>所有权限</td>\n</tr>\n<tr>\n<td>SELECT</td>\n<td>查询数据</td>\n</tr>\n<tr>\n<td>INSERT</td>\n<td>插入数据</td>\n</tr>\n<tr>\n<td>UPDATE</td>\n<td>修改数据</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>删除数据</td>\n</tr>\n<tr>\n<td>ALTER</td>\n<td>修改表</td>\n</tr>\n<tr>\n<td>DROP</td>\n<td>删除数据库/表/视图</td>\n</tr>\n<tr>\n<td>CREATE</td>\n<td>创建数据库/表</td>\n</tr>\n</tbody></table>\n<p>更多权限请看<a href=\"#权限一览表\" title=\"权限一览表\">权限一览表</a></p>\n<p>查询权限：<br><code>SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39;;</code></p>\n<p>授予权限：<br><code>GRANT 权限列表 ON 数据库名.表名 TO &#39;用户名&#39;@&#39;主机名&#39;;</code></p>\n<p>撤销权限：<br><code>REVOKE 权限列表 ON 数据库名.表名 FROM &#39;用户名&#39;@&#39;主机名&#39;;</code></p>\n<h5 id=\"注意事项-6\"><a href=\"#注意事项-6\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li>多个权限用逗号分隔</li>\n<li>授权时，数据库名和表名可以用 * 进行通配，代表所有</li>\n</ul>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ul>\n<li>字符串函数</li>\n<li>数值函数</li>\n<li>日期函数</li>\n<li>流程函数</li>\n</ul>\n<h3 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"字符串函数\"></a>字符串函数</h3><p>常用函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CONCAT(s1, s2, …, sn)</td>\n<td>字符串拼接，将s1, s2, …, sn拼接成一个字符串</td>\n</tr>\n<tr>\n<td>LOWER(str)</td>\n<td>将字符串全部转为小写</td>\n</tr>\n<tr>\n<td>UPPER(str)</td>\n<td>将字符串全部转为大写</td>\n</tr>\n<tr>\n<td>LPAD(str, n, pad)</td>\n<td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td>\n</tr>\n<tr>\n<td>RPAD(str, n, pad)</td>\n<td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td>\n</tr>\n<tr>\n<td>TRIM(str)</td>\n<td>去掉字符串头部和尾部的空格</td>\n</tr>\n<tr>\n<td>SUBSTRING(str, start, len)</td>\n<td>返回从字符串str从start位置起的len个长度的字符串</td>\n</tr>\n</tbody></table>\n<p>使用示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 拼接</span><br><span class=\"line\">SELECT CONCAT(&apos;Hello&apos;, &apos;World&apos;);</span><br><span class=\"line\">-- 小写</span><br><span class=\"line\">SELECT LOWER(&apos;Hello&apos;);</span><br><span class=\"line\">-- 大写</span><br><span class=\"line\">SELECT UPPER(&apos;Hello&apos;);</span><br><span class=\"line\">-- 左填充</span><br><span class=\"line\">SELECT LPAD(&apos;01&apos;, 5, &apos;-&apos;);</span><br><span class=\"line\">-- 右填充</span><br><span class=\"line\">SELECT RPAD(&apos;01&apos;, 5, &apos;-&apos;);</span><br><span class=\"line\">-- 去除空格</span><br><span class=\"line\">SELECT TRIM(&apos; Hello World &apos;);</span><br><span class=\"line\">-- 切片（起始索引为1）</span><br><span class=\"line\">SELECT SUBSTRING(&apos;Hello World&apos;, 1, 5);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数值函数\"><a href=\"#数值函数\" class=\"headerlink\" title=\"数值函数\"></a>数值函数</h3><p>常见函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CEIL(x)</td>\n<td>向上取整</td>\n</tr>\n<tr>\n<td>FLOOR(x)</td>\n<td>向下取整</td>\n</tr>\n<tr>\n<td>MOD(x, y)</td>\n<td>返回x/y的模</td>\n</tr>\n<tr>\n<td>RAND()</td>\n<td>返回0~1内的随机数</td>\n</tr>\n<tr>\n<td>ROUND(x, y)</td>\n<td>求参数x的四舍五入值，保留y位小数</td>\n</tr>\n</tbody></table>\n<h3 id=\"日期函数\"><a href=\"#日期函数\" class=\"headerlink\" title=\"日期函数\"></a>日期函数</h3><p>常用函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CURDATE()</td>\n<td>返回当前日期</td>\n</tr>\n<tr>\n<td>CURTIME()</td>\n<td>返回当前时间</td>\n</tr>\n<tr>\n<td>NOW()</td>\n<td>返回当前日期和时间</td>\n</tr>\n<tr>\n<td>YEAR(date)</td>\n<td>获取指定date的年份</td>\n</tr>\n<tr>\n<td>MONTH(date)</td>\n<td>获取指定date的月份</td>\n</tr>\n<tr>\n<td>DAY(date)</td>\n<td>获取指定date的日期</td>\n</tr>\n<tr>\n<td>DATE_ADD(date, INTERVAL expr type)</td>\n<td>返回一个日期/时间值加上一个时间间隔expr后的时间值</td>\n</tr>\n<tr>\n<td>DATEDIFF(date1, date2)</td>\n<td>返回起始时间date1和结束时间date2之间的天数</td>\n</tr>\n</tbody></table>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- DATE_ADD</span><br><span class=\"line\">SELECT DATE_ADD(NOW(), INTERVAL 70 YEAR);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"流程函数\"><a href=\"#流程函数\" class=\"headerlink\" title=\"流程函数\"></a>流程函数</h3><p>常用函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IF(value, t, f)</td>\n<td>如果value为true，则返回t，否则返回f</td>\n</tr>\n<tr>\n<td>IFNULL(value1, value2)</td>\n<td>如果value1不为空，返回value1，否则返回value2</td>\n</tr>\n<tr>\n<td>CASE WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td>\n<td>如果val1为true，返回res1，… 否则返回default默认值</td>\n</tr>\n<tr>\n<td>CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td>\n<td>如果expr的值等于val1，返回res1，… 否则返回default默认值</td>\n</tr>\n</tbody></table>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select</span><br><span class=\"line\">\tname,</span><br><span class=\"line\">\t(case when age &gt; 30 then &apos;中年&apos; else &apos;青年&apos; end)</span><br><span class=\"line\">from employee;</span><br><span class=\"line\">select</span><br><span class=\"line\">\tname,</span><br><span class=\"line\">\t(case workaddress when &apos;北京市&apos; then &apos;一线城市&apos; when &apos;上海市&apos; then &apos;一线城市&apos; else &apos;二线城市&apos; end) as &apos;工作地址&apos;</span><br><span class=\"line\">from employee;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"约束\"><a href=\"#约束\" class=\"headerlink\" title=\"约束\"></a>约束</h2><p>分类：</p>\n<table>\n<thead>\n<tr>\n<th>约束</th>\n<th>描述</th>\n<th>关键字</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>非空约束</td>\n<td>限制该字段的数据不能为null</td>\n<td>NOT NULL</td>\n</tr>\n<tr>\n<td>唯一约束</td>\n<td>保证该字段的所有数据都是唯一、不重复的</td>\n<td>UNIQUE</td>\n</tr>\n<tr>\n<td>主键约束</td>\n<td>主键是一行数据的唯一标识，要求非空且唯一</td>\n<td>PRIMARY KEY</td>\n</tr>\n<tr>\n<td>默认约束</td>\n<td>保存数据时，如果未指定该字段的值，则采用默认值</td>\n<td>DEFAULT</td>\n</tr>\n<tr>\n<td>检查约束（8.0.1版本后）</td>\n<td>保证字段值满足某一个条件</td>\n<td>CHECK</td>\n</tr>\n<tr>\n<td>外键约束</td>\n<td>用来让两张图的数据之间建立连接，保证数据的一致性和完整性</td>\n<td>FOREIGN KEY</td>\n</tr>\n</tbody></table>\n<p>约束是作用于表中字段上的，可以再创建表/修改表的时候添加约束。</p>\n<h3 id=\"常用约束\"><a href=\"#常用约束\" class=\"headerlink\" title=\"常用约束\"></a>常用约束</h3><table>\n<thead>\n<tr>\n<th>约束条件</th>\n<th>关键字</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>主键</td>\n<td>PRIMARY KEY</td>\n</tr>\n<tr>\n<td>自动增长</td>\n<td>AUTO_INCREMENT</td>\n</tr>\n<tr>\n<td>不为空</td>\n<td>NOT NULL</td>\n</tr>\n<tr>\n<td>唯一</td>\n<td>UNIQUE</td>\n</tr>\n<tr>\n<td>逻辑条件</td>\n<td>CHECK</td>\n</tr>\n<tr>\n<td>默认值</td>\n<td>DEFAULT</td>\n</tr>\n</tbody></table>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table user(</span><br><span class=\"line\">\tid int primary key auto_increment,</span><br><span class=\"line\">\tname varchar(10) not null unique,</span><br><span class=\"line\">\tage int check(age &gt; 0 and age &lt; 120),</span><br><span class=\"line\">\tstatus char(1) default &apos;1&apos;,</span><br><span class=\"line\">\tgender char(1)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"外键约束\"><a href=\"#外键约束\" class=\"headerlink\" title=\"外键约束\"></a>外键约束</h3><p>添加外键：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE 表名(</span><br><span class=\"line\">\t字段名 字段类型,</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t[CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名)</span><br><span class=\"line\">);</span><br><span class=\"line\">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);</span><br><span class=\"line\"></span><br><span class=\"line\">-- 例子</span><br><span class=\"line\">alter table emp add constraint fk_emp_dept_id foreign key(dept_id) references dept(id);</span><br></pre></td></tr></table></figure>\n\n<p>删除外键：<br><code>ALTER TABLE 表名 DROP FOREIGN KEY 外键名;</code></p>\n<h4 id=\"删除-更新行为\"><a href=\"#删除-更新行为\" class=\"headerlink\" title=\"删除/更新行为\"></a>删除/更新行为</h4><table>\n<thead>\n<tr>\n<th>行为</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NO ACTION</td>\n<td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与RESTRICT一致）</td>\n</tr>\n<tr>\n<td>RESTRICT</td>\n<td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与NO ACTION一致）</td>\n</tr>\n<tr>\n<td>CASCADE</td>\n<td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除/更新外键在子表中的记录</td>\n</tr>\n<tr>\n<td>SET NULL</td>\n<td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（要求该外键允许为null）</td>\n</tr>\n<tr>\n<td>SET DEFAULT</td>\n<td>父表有变更时，子表将外键设为一个默认值（Innodb不支持）</td>\n</tr>\n</tbody></table>\n<p>更改删除/更新行为：<br><code>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为;</code></p>\n<h2 id=\"多表查询\"><a href=\"#多表查询\" class=\"headerlink\" title=\"多表查询\"></a>多表查询</h2><h3 id=\"多表关系\"><a href=\"#多表关系\" class=\"headerlink\" title=\"多表关系\"></a>多表关系</h3><ul>\n<li>一对多（多对一）</li>\n<li>多对多</li>\n<li>一对一</li>\n</ul>\n<h4 id=\"一对多\"><a href=\"#一对多\" class=\"headerlink\" title=\"一对多\"></a>一对多</h4><p>案例：部门与员工<br>关系：一个部门对应多个员工，一个员工对应一个部门<br>实现：在多的一方建立外键，指向一的一方的主键</p>\n<h4 id=\"多对多\"><a href=\"#多对多\" class=\"headerlink\" title=\"多对多\"></a>多对多</h4><p>案例：学生与课程<br>关系：一个学生可以选多门课程，一门课程也可以供多个学生选修<br>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p>\n<h4 id=\"一对一\"><a href=\"#一对一\" class=\"headerlink\" title=\"一对一\"></a>一对一</h4><p>案例：用户与用户详情<br>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率<br>实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）</p>\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><p>合并查询（笛卡尔积，会展示所有组合结果）：<br><code>select * from employee, dept;</code></p>\n<blockquote>\n<p>笛卡尔积：两个集合A集合和B集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）</p>\n</blockquote>\n<p>消除无效笛卡尔积：<br><code>select * from employee, dept where employee.dept = dept.id;</code></p>\n<h3 id=\"内连接查询\"><a href=\"#内连接查询\" class=\"headerlink\" title=\"内连接查询\"></a>内连接查询</h3><p>内连接查询的是两张表交集的部分</p>\n<p>隐式内连接：<br><code>SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;</code></p>\n<p>显式内连接：<br><code>SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;</code></p>\n<p>显式性能比隐式高</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询员工姓名，及关联的部门的名称</span><br><span class=\"line\">-- 隐式</span><br><span class=\"line\">select e.name, d.name from employee as e, dept as d where e.dept = d.id;</span><br><span class=\"line\">-- 显式</span><br><span class=\"line\">select e.name, d.name from employee as e inner join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"外连接查询\"><a href=\"#外连接查询\" class=\"headerlink\" title=\"外连接查询\"></a>外连接查询</h3><p>左外连接：<br>查询左表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;</code><br>相当于查询表1的所有数据，包含表1和表2交集部分数据</p>\n<p>右外连接：<br>查询右表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;</code></p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 左</span><br><span class=\"line\">select e.*, d.name from employee as e left outer join dept as d on e.dept = d.id;</span><br><span class=\"line\">select d.name, e.* from dept d left outer join emp e on e.dept = d.id;  -- 这条语句与下面的语句效果一样</span><br><span class=\"line\">-- 右</span><br><span class=\"line\">select d.name, e.* from employee as e right outer join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure>\n\n<p>左连接可以查询到没有dept的employee，右连接可以查询到没有employee的dept</p>\n<h3 id=\"自连接查询\"><a href=\"#自连接查询\" class=\"headerlink\" title=\"自连接查询\"></a>自连接查询</h3><p>当前表与自身的连接查询，自连接必须使用表别名</p>\n<p>语法：<br><code>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;</code></p>\n<p>自连接查询，可以是内连接查询，也可以是外连接查询</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询员工及其所属领导的名字</span><br><span class=\"line\">select a.name, b.name from employee a, employee b where a.manager = b.id;</span><br><span class=\"line\">-- 没有领导的也查询出来</span><br><span class=\"line\">select a.name, b.name from employee a left join employee b on a.manager = b.id;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"联合查询-union-union-all\"><a href=\"#联合查询-union-union-all\" class=\"headerlink\" title=\"联合查询 union, union all\"></a>联合查询 union, union all</h3><p>把多次查询的结果合并，形成一个新的查询集</p>\n<p>语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT 字段列表 FROM 表A ...</span><br><span class=\"line\">UNION [ALL]</span><br><span class=\"line\">SELECT 字段列表 FROM 表B ...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意事项-7\"><a href=\"#注意事项-7\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><ul>\n<li>UNION ALL 会有重复结果，UNION 不会</li>\n<li>联合查询比使用or效率高，不会使索引失效</li>\n</ul>\n<h3 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h3><p>SQL语句中嵌套SELECT语句，称谓嵌套查询，又称子查询。<br><code>SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);</code><br><strong>子查询外部的语句可以是 INSERT / UPDATE / DELETE / SELECT 的任何一个</strong></p>\n<p>根据子查询结果可以分为：</p>\n<ul>\n<li>标量子查询（子查询结果为单个值）</li>\n<li>列子查询（子查询结果为一列）</li>\n<li>行子查询（子查询结果为一行）</li>\n<li>表子查询（子查询结果为多行多列）</li>\n</ul>\n<p>根据子查询位置可分为：</p>\n<ul>\n<li>WHERE 之后</li>\n<li>FROM 之后</li>\n<li>SELECT 之后</li>\n</ul>\n<h4 id=\"标量子查询\"><a href=\"#标量子查询\" class=\"headerlink\" title=\"标量子查询\"></a>标量子查询</h4><p>子查询返回的结果是单个值（数字、字符串、日期等）。<br>常用操作符：- &lt; &gt; &gt; &gt;= &lt; &lt;=</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询销售部所有员工</span><br><span class=\"line\">select id from dept where name = &apos;销售部&apos;;</span><br><span class=\"line\">-- 根据销售部部门ID，查询员工信息</span><br><span class=\"line\">select * from employee where dept = 4;</span><br><span class=\"line\">-- 合并（子查询）</span><br><span class=\"line\">select * from employee where dept = (select id from dept where name = &apos;销售部&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">-- 查询xxx入职之后的员工信息</span><br><span class=\"line\">select * from employee where entrydate &gt; (select entrydate from employee where name = &apos;xxx&apos;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"列子查询\"><a href=\"#列子查询\" class=\"headerlink\" title=\"列子查询\"></a>列子查询</h4><p>返回的结果是一列（可以是多行）。</p>\n<p>常用操作符：</p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IN</td>\n<td>在指定的集合范围内，多选一</td>\n</tr>\n<tr>\n<td>NOT IN</td>\n<td>不在指定的集合范围内</td>\n</tr>\n<tr>\n<td>ANY</td>\n<td>子查询返回列表中，有任意一个满足即可</td>\n</tr>\n<tr>\n<td>SOME</td>\n<td>与ANY等同，使用SOME的地方都可以使用ANY</td>\n</tr>\n<tr>\n<td>ALL</td>\n<td>子查询返回列表的所有值都必须满足</td>\n</tr>\n</tbody></table>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询销售部和市场部的所有员工信息</span><br><span class=\"line\">select * from employee where dept in (select id from dept where name = &apos;销售部&apos; or name = &apos;市场部&apos;);</span><br><span class=\"line\">-- 查询比财务部所有人工资都高的员工信息</span><br><span class=\"line\">select * from employee where salary &gt; all(select salary from employee where dept = (select id from dept where name = &apos;财务部&apos;));</span><br><span class=\"line\">-- 查询比研发部任意一人工资高的员工信息</span><br><span class=\"line\">select * from employee where salary &gt; any (select salary from employee where dept = (select id from dept where name = &apos;研发部&apos;));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"行子查询\"><a href=\"#行子查询\" class=\"headerlink\" title=\"行子查询\"></a>行子查询</h4><p>返回的结果是一行（可以是多列）。<br>常用操作符：=, &lt;, &gt;, IN, NOT IN</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询与xxx的薪资及直属领导相同的员工信息</span><br><span class=\"line\">select * from employee where (salary, manager) = (12500, 1);</span><br><span class=\"line\">select * from employee where (salary, manager) = (select salary, manager from employee where name = &apos;xxx&apos;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"表子查询\"><a href=\"#表子查询\" class=\"headerlink\" title=\"表子查询\"></a>表子查询</h4><p>返回的结果是多行多列<br>常用操作符：IN</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询与xxx1，xxx2的职位和薪资相同的员工</span><br><span class=\"line\">select * from employee where (job, salary) in (select job, salary from employee where name = &apos;xxx1&apos; or name = &apos;xxx2&apos;);</span><br><span class=\"line\">-- 查询入职日期是2006-01-01之后的员工，及其部门信息</span><br><span class=\"line\">select e.*, d.* from (select * from employee where entrydate &gt; &apos;2006-01-01&apos;) as e left join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><p>事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p>\n<p>基本操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 1. 查询张三账户余额</span><br><span class=\"line\">select * from account where name = &apos;张三&apos;;</span><br><span class=\"line\">-- 2. 将张三账户余额-1000</span><br><span class=\"line\">update account set money = money - 1000 where name = &apos;张三&apos;;</span><br><span class=\"line\">-- 此语句出错后张三钱减少但是李四钱没有增加</span><br><span class=\"line\">模拟sql语句错误</span><br><span class=\"line\">-- 3. 将李四账户余额+1000</span><br><span class=\"line\">update account set money = money + 1000 where name = &apos;李四&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 查看事务提交方式</span><br><span class=\"line\">SELECT @@AUTOCOMMIT;</span><br><span class=\"line\">-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效</span><br><span class=\"line\">SET @@AUTOCOMMIT = 0;</span><br><span class=\"line\">-- 提交事务</span><br><span class=\"line\">COMMIT;</span><br><span class=\"line\">-- 回滚事务</span><br><span class=\"line\">ROLLBACK;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 设置手动提交后上面代码改为：</span><br><span class=\"line\">select * from account where name = &apos;张三&apos;;</span><br><span class=\"line\">update account set money = money - 1000 where name = &apos;张三&apos;;</span><br><span class=\"line\">update account set money = money + 1000 where name = &apos;李四&apos;;</span><br><span class=\"line\">commit;</span><br></pre></td></tr></table></figure>\n\n<p>操作方式二：</p>\n<p>开启事务：<br><code>START TRANSACTION 或 BEGIN TRANSACTION;</code><br>提交事务：<br><code>COMMIT;</code><br>回滚事务：<br><code>ROLLBACK;</code></p>\n<p>操作实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start transaction;</span><br><span class=\"line\">select * from account where name = &apos;张三&apos;;</span><br><span class=\"line\">update account set money = money - 1000 where name = &apos;张三&apos;;</span><br><span class=\"line\">update account set money = money + 1000 where name = &apos;李四&apos;;</span><br><span class=\"line\">commit;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四大特性ACID\"><a href=\"#四大特性ACID\" class=\"headerlink\" title=\"四大特性ACID\"></a>四大特性ACID</h3><ul>\n<li>原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败</li>\n<li>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</li>\n<li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li>\n<li>持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li>\n</ul>\n<h3 id=\"并发事务\"><a href=\"#并发事务\" class=\"headerlink\" title=\"并发事务\"></a>并发事务</h3><table>\n<thead>\n<tr>\n<th>问题</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>脏读</td>\n<td>一个事务读到另一个事务还没提交的数据</td>\n</tr>\n<tr>\n<td>不可重复读</td>\n<td>一个事务先后读取同一条记录，但两次读取的数据不同</td>\n</tr>\n<tr>\n<td>幻读</td>\n<td>一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>这三个问题的详细演示：<a href=\"https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd</a> </p>\n</blockquote>\n<p>并发事务隔离级别：</p>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Read uncommitted</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>Read committed</td>\n<td>×</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>Repeatable Read(默认)</td>\n<td>×</td>\n<td>×</td>\n<td>√</td>\n</tr>\n<tr>\n<td>Serializable</td>\n<td>×</td>\n<td>×</td>\n<td>×</td>\n</tr>\n</tbody></table>\n<ul>\n<li>√表示在当前隔离级别下该问题会出现</li>\n<li>Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差</li>\n</ul>\n<p>查看事务隔离级别：<br><code>SELECT @@TRANSACTION_ISOLATION;</code><br>设置事务隔离级别：<br><code>SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE };</code><br>SESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效</p>\n<h1 id=\"进阶篇\"><a href=\"#进阶篇\" class=\"headerlink\" title=\"进阶篇\"></a>进阶篇</h1><h2 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h2><p>MySQL体系结构：</p>\n<p><img src=\"https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_20220315034329549927.png\" alt=\"结构图\" title=\"结构图\"><br><img src=\"https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%B1%82%E7%BA%A7%E5%90%AB%E4%B9%89_20220315034359342837.png\" alt=\"层级描述\" title=\"层级描述\"></p>\n<p>存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。<br>默认存储引擎是InnoDB。</p>\n<p>相关操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询建表语句</span><br><span class=\"line\">show create table account;</span><br><span class=\"line\">-- 建表时指定存储引擎</span><br><span class=\"line\">CREATE TABLE 表名(</span><br><span class=\"line\">\t...</span><br><span class=\"line\">) ENGINE=INNODB;</span><br><span class=\"line\">-- 查看当前数据库支持的存储引擎</span><br><span class=\"line\">show engines;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h3><p>InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。</p>\n<p>特点：</p>\n<ul>\n<li>DML 操作遵循 ACID 模型，支持<strong>事务</strong></li>\n<li><strong>行级锁</strong>，提高并发访问性能</li>\n<li>支持<strong>外键</strong>约束，保证数据的完整性和正确性</li>\n</ul>\n<p>文件：</p>\n<ul>\n<li>xxx.ibd: xxx代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。</li>\n</ul>\n<p>参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间</p>\n<p>知识点：</p>\n<p>查看 Mysql 变量：<br><code>show variables like &#39;innodb_file_per_table&#39;;</code></p>\n<p>从idb文件提取表结构数据：<br>（在cmd运行）<br><code>ibd2sdi xxx.ibd</code></p>\n<p>InnoDB 逻辑存储结构：<br><img src=\"https://dhc.pythonanywhere.com/media/editor/%E9%80%BB%E8%BE%91%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84_20220316030616590001.png\" alt=\"InnoDB逻辑存储结构\" title=\"InnoDB逻辑存储结构\"></p>\n<h3 id=\"MyISAM\"><a href=\"#MyISAM\" class=\"headerlink\" title=\"MyISAM\"></a>MyISAM</h3><p>MyISAM 是 MySQL 早期的默认存储引擎。</p>\n<p>特点：</p>\n<ul>\n<li>不支持事务，不支持外键</li>\n<li>支持表锁，不支持行锁</li>\n<li>访问速度快</li>\n</ul>\n<p>文件：</p>\n<ul>\n<li>xxx.sdi: 存储表结构信息</li>\n<li>xxx.MYD: 存储数据</li>\n<li>xxx.MYI: 存储索引</li>\n</ul>\n<h3 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory\"></a>Memory</h3><p>Memory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。</p>\n<p>特点：</p>\n<ul>\n<li>存放在内存中，速度快</li>\n<li>hash索引（默认）</li>\n</ul>\n<p>文件：</p>\n<ul>\n<li>xxx.sdi: 存储表结构信息</li>\n</ul>\n<h3 id=\"存储引擎特点\"><a href=\"#存储引擎特点\" class=\"headerlink\" title=\"存储引擎特点\"></a>存储引擎特点</h3><table>\n<thead>\n<tr>\n<th>特点</th>\n<th>InnoDB</th>\n<th>MyISAM</th>\n<th>Memory</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>存储限制</td>\n<td>64TB</td>\n<td>有</td>\n<td>有</td>\n</tr>\n<tr>\n<td>事务安全</td>\n<td>支持</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>锁机制</td>\n<td>行锁</td>\n<td>表锁</td>\n<td>表锁</td>\n</tr>\n<tr>\n<td>B+tree索引</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>Hash索引</td>\n<td>-</td>\n<td>-</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>全文索引</td>\n<td>支持（5.6版本之后）</td>\n<td>支持</td>\n<td>-</td>\n</tr>\n<tr>\n<td>空间使用</td>\n<td>高</td>\n<td>低</td>\n<td>N/A</td>\n</tr>\n<tr>\n<td>内存使用</td>\n<td>高</td>\n<td>低</td>\n<td>中等</td>\n</tr>\n<tr>\n<td>批量插入速度</td>\n<td>低</td>\n<td>高</td>\n<td>高</td>\n</tr>\n<tr>\n<td>支持外键</td>\n<td>支持</td>\n<td>-</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<h3 id=\"存储引擎的选择\"><a href=\"#存储引擎的选择\" class=\"headerlink\" title=\"存储引擎的选择\"></a>存储引擎的选择</h3><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。</p>\n<ul>\n<li>InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择</li>\n<li>MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。</li>\n<li>Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li>\n</ul>\n<p>电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。</p>\n<h2 id=\"性能分析\"><a href=\"#性能分析\" class=\"headerlink\" title=\"性能分析\"></a>性能分析</h2><h3 id=\"查看执行频次\"><a href=\"#查看执行频次\" class=\"headerlink\" title=\"查看执行频次\"></a>查看执行频次</h3><p>查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：<br><code>SHOW GLOBAL STATUS LIKE &#39;Com_______&#39;;</code> 或者 <code>SHOW SESSION STATUS LIKE &#39;Com_______&#39;;</code><br>例：<code>show global status like &#39;Com_______&#39;</code></p>\n<h3 id=\"慢查询日志\"><a href=\"#慢查询日志\" class=\"headerlink\" title=\"慢查询日志\"></a>慢查询日志</h3><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。<br>MySQL的慢查询日志默认没有开启，需要在MySQL的配置文件（/etc/my.cnf）中配置如下信息：<br>    # 开启慢查询日志开关<br>    slow_query_log=1<br>    # 设置慢查询日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志<br>    long_query_time=2</p>\n<p>更改后记得重启MySQL服务，日志文件位置：/var/lib/mysql/localhost-slow.log</p>\n<p>查看慢查询日志开关状态：<br><code>show variables like &#39;slow_query_log&#39;;</code></p>\n<h3 id=\"profile\"><a href=\"#profile\" class=\"headerlink\" title=\"profile\"></a>profile</h3><p>show profile 能在做SQL优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：<br><code>SELECT @@have_profiling;</code><br>profiling 默认关闭，可以通过set语句在session/global级别开启 profiling：<br><code>SET profiling = 1;</code><br>查看所有语句的耗时：<br><code>show profiles;</code><br>查看指定query_id的SQL语句各个阶段的耗时：<br><code>show profile for query query_id;</code><br>查看指定query_id的SQL语句CPU的使用情况<br><code>show profile cpu for query query_id;</code></p>\n<h3 id=\"explain\"><a href=\"#explain\" class=\"headerlink\" title=\"explain\"></a>explain</h3><p>EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。<br>语法：<br>    # 直接在select语句之前加上关键字 explain / desc<br>    EXPLAIN SELECT 字段列表 FROM 表名 HWERE 条件;</p>\n<p>EXPLAIN 各字段含义：</p>\n<ul>\n<li>id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id相同，执行顺序从上到下；id不同，值越大越先执行）</li>\n<li>select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（SELECT/WHERE之后包含了子查询）等</li>\n<li>type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all</li>\n<li>possible_key：可能应用在这张表上的索引，一个或多个</li>\n<li>Key：实际使用的索引，如果为 NULL，则没有使用索引</li>\n<li>Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</li>\n<li>rows：MySQL认为必须要执行的行数，在InnoDB引擎的表中，是一个估计值，可能并不总是准确的</li>\n<li>filtered：表示返回结果的行数占需读取行数的百分比，filtered的值越大越好</li>\n</ul>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><p>索引是帮助 MySQL <strong>高效获取数据</strong>的<strong>数据结构（有序）</strong>。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。</p>\n<p>优缺点：</p>\n<p>优点：</p>\n<ul>\n<li>提高数据检索效率，降低数据库的IO成本</li>\n<li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>索引列也是要占用空间的</li>\n<li>索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE</li>\n</ul>\n<h3 id=\"索引结构\"><a href=\"#索引结构\" class=\"headerlink\" title=\"索引结构\"></a>索引结构</h3><table>\n<thead>\n<tr>\n<th>索引结构</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>B+Tree</td>\n<td>最常见的索引类型，大部分引擎都支持B+树索引</td>\n</tr>\n<tr>\n<td>Hash</td>\n<td>底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询</td>\n</tr>\n<tr>\n<td>R-Tree(空间索引)</td>\n<td>空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td>\n</tr>\n<tr>\n<td>Full-Text(全文索引)</td>\n<td>是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>索引</th>\n<th>InnoDB</th>\n<th>MyISAM</th>\n<th>Memory</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>B+Tree索引</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>Hash索引</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>R-Tree索引</td>\n<td>不支持</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>Full-text</td>\n<td>5.6版本后支持</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n</tbody></table>\n<h4 id=\"B-Tree\"><a href=\"#B-Tree\" class=\"headerlink\" title=\"B-Tree\"></a>B-Tree</h4><p><img src=\"https://dhc.pythonanywhere.com/media/editor/%E4%BA%8C%E5%8F%89%E6%A0%91_20220316153214227108.png\" alt=\"二叉树\" title=\"二叉树\"></p>\n<p>二叉树的缺点可以用红黑树来解决：<br><img src=\"https://dhc.pythonanywhere.com/media/editor/%E7%BA%A2%E9%BB%91%E6%A0%91_20220316163142686602.png\" alt=\"红黑树\" title=\"红黑树\"><br>红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。</p>\n<p>为了解决上述问题，可以使用 B-Tree 结构。<br>B-Tree (多路平衡查找树) 以一棵最大度数（max-degree，指一个节点的子节点个数）为5（5阶）的 b-tree 为例（每个节点最多存储4个key，5个指针）</p>\n<p><img src=\"https://dhc.pythonanywhere.com/media/editor/B-Tree%E7%BB%93%E6%9E%84_20220316163813441163.png\" alt=\"B-Tree结构\" title=\"B-Tree结构\"></p>\n<blockquote>\n<p>B-Tree 的数据插入过程动画参照：<a href=\"https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68</a><br>演示地址：<a href=\"https://www.cs.usfca.edu/~galles/visualization/BTree.html\" target=\"_blank\" rel=\"noopener\">https://www.cs.usfca.edu/~galles/visualization/BTree.html</a></p>\n</blockquote>\n<h4 id=\"B-Tree-1\"><a href=\"#B-Tree-1\" class=\"headerlink\" title=\"B+Tree\"></a>B+Tree</h4><p>结构图：</p>\n<p><img src=\"https://dhc.pythonanywhere.com/media/editor/B+Tree%E7%BB%93%E6%9E%84%E5%9B%BE_20220316170700591277.png\" alt=\"B+Tree结构图\" title=\"B+Tree结构图\"></p>\n<blockquote>\n<p>演示地址：<a href=\"https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html\" target=\"_blank\" rel=\"noopener\">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</a></p>\n</blockquote>\n<p>与 B-Tree 的区别：</p>\n<ul>\n<li>所有的数据都会出现在叶子节点</li>\n<li>叶子节点形成一个单向链表</li>\n</ul>\n<p>MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。</p>\n<p><img src=\"https://dhc.pythonanywhere.com/media/editor/%E7%BB%93%E6%9E%84%E5%9B%BE_20220316171730865611.png\" alt=\"MySQL B+Tree 结构图\" title=\"MySQL B+Tree 结构图\"></p>\n<h4 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h4><p>哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。<br>如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可以通过链表来解决。</p>\n<p><img src=\"https://dhc.pythonanywhere.com/media/editor/Hash%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86%E5%9B%BE_20220317143226150679.png\" alt=\"Hash索引原理图\" title=\"Hash索引原理图\"></p>\n<p>特点：</p>\n<ul>\n<li>Hash索引只能用于对等比较（=、in），不支持范围查询（betwwn、&gt;、&lt;、…）</li>\n<li>无法利用索引完成排序操作</li>\n<li>查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引</li>\n</ul>\n<p>存储引擎支持：</p>\n<ul>\n<li>Memory</li>\n<li>InnoDB: 具有自适应hash功能，hash索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的</li>\n</ul>\n<h4 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h4><ol>\n<li>为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？</li>\n</ol>\n<ul>\n<li>相对于二叉树，层级更少，搜索效率高</li>\n<li>对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li>\n<li>相对于 Hash 索引，B+Tree 支持范围匹配及排序操作</li>\n</ul>\n<h3 id=\"索引分类\"><a href=\"#索引分类\" class=\"headerlink\" title=\"索引分类\"></a>索引分类</h3><table>\n<thead>\n<tr>\n<th>分类</th>\n<th>含义</th>\n<th>特点</th>\n<th>关键字</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>主键索引</td>\n<td>针对于表中主键创建的索引</td>\n<td>默认自动创建，只能有一个</td>\n<td>PRIMARY</td>\n</tr>\n<tr>\n<td>唯一索引</td>\n<td>避免同一个表中某数据列中的值重复</td>\n<td>可以有多个</td>\n<td>UNIQUE</td>\n</tr>\n<tr>\n<td>常规索引</td>\n<td>快速定位特定数据</td>\n<td>可以有多个</td>\n<td></td>\n</tr>\n<tr>\n<td>全文索引</td>\n<td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td>\n<td>可以有多个</td>\n<td>FULLTEXT</td>\n</tr>\n</tbody></table>\n<p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：</p>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>含义</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>聚集索引(Clustered Index)</td>\n<td>将数据存储与索引放一块，索引结构的叶子节点保存了行数据</td>\n<td>必须有，而且只有一个</td>\n</tr>\n<tr>\n<td>二级索引(Secondary Index)</td>\n<td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td>\n<td>可以存在多个</td>\n</tr>\n</tbody></table>\n<p>演示图：</p>\n<p><img src=\"https://dhc.pythonanywhere.com/media/editor/%E5%8E%9F%E7%90%86%E5%9B%BE_20220318194454880073.png\" alt=\"大致原理\" title=\"大致原理\"><br><img src=\"https://dhc.pythonanywhere.com/media/editor/%E6%BC%94%E7%A4%BA%E5%9B%BE_20220319215403721066.png\" alt=\"演示图\" title=\"演示图\"></p>\n<p>聚集索引选取规则：</p>\n<ul>\n<li>如果存在主键，主键索引就是聚集索引</li>\n<li>如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引</li>\n<li>如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引</li>\n</ul>\n<h4 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h4><p>1. 以下 SQL 语句，哪个执行效率高？为什么？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from user where id = 10;</span><br><span class=\"line\">select * from user where name = &apos;Arm&apos;;</span><br><span class=\"line\">-- 备注：id为主键，name字段创建的有索引</span><br></pre></td></tr></table></figure>\n\n<p>答：第一条语句，因为第二条需要回表查询，相当于两个步骤。</p>\n<p>2. InnoDB 主键索引的 B+Tree 高度为多少？</p>\n<p>答：假设一行数据大小为1k，一页中可以存储16行这样的数据。InnoDB 的指针占用6个字节的空间，主键假设为bigint，占用字节数为8.<br>可得公式：<code>n * 8 + (n + 1) * 6 = 16 * 1024</code>，其中 8 表示 bigint 占用的字节数，n 表示当前节点存储的key的数量，(n + 1) 表示指针数量（比key多一个）。算出n约为1170。</p>\n<p>如果树的高度为2，那么他能存储的数据量大概为：<code>1171 * 16 = 18736</code>；<br>如果树的高度为3，那么他能存储的数据量大概为：<code>1171 * 1171 * 16 = 21939856</code>。</p>\n<p>另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>创建索引：<br><code>CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...);</code><br>如果不加 CREATE 后面不加索引类型参数，则创建的是常规索引</p>\n<p>查看索引：<br><code>SHOW INDEX FROM table_name;</code></p>\n<p>删除索引：<br><code>DROP INDEX index_name ON table_name;</code></p>\n<p>案例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引</span><br><span class=\"line\">create index idx_user_name on tb_user(name);</span><br><span class=\"line\">-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引</span><br><span class=\"line\">create unique index idx_user_phone on tb_user (phone);</span><br><span class=\"line\">-- 为profession, age, status创建联合索引</span><br><span class=\"line\">create index idx_user_pro_age_stat on tb_user(profession, age, status);</span><br><span class=\"line\">-- 为email建立合适的索引来提升查询效率</span><br><span class=\"line\">create index idx_user_email on tb_user(email);</span><br><span class=\"line\"></span><br><span class=\"line\">-- 删除索引</span><br><span class=\"line\">drop index idx_user_email on tb_user;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用规则\"><a href=\"#使用规则\" class=\"headerlink\" title=\"使用规则\"></a>使用规则</h3><h4 id=\"最左前缀法则\"><a href=\"#最左前缀法则\" class=\"headerlink\" title=\"最左前缀法则\"></a>最左前缀法则</h4><p>如果索引关联了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。<br>如果跳跃某一列，索引将部分失效（后面的字段索引失效）。</p>\n<p>联合索引中，出现范围查询（&lt;, &gt;），范围查询右侧的列索引失效。可以用&gt;=或者&lt;=来规避索引失效问题。</p>\n<h4 id=\"索引失效情况\"><a href=\"#索引失效情况\" class=\"headerlink\" title=\"索引失效情况\"></a>索引失效情况</h4><ol>\n<li>在索引列上进行运算操作，索引将失效。如：<code>explain select * from tb_user where substring(phone, 10, 2) = &#39;15&#39;;</code></li>\n<li>字符串类型字段使用时，不加引号，索引将失效。如：<code>explain select * from tb_user where phone = 17799990015;</code>，此处phone的值没有加引号</li>\n<li>模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如：<code>explain select * from tb_user where profession like &#39;%工程&#39;;</code>，前后都有 % 也会失效。</li>\n<li>用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。</li>\n<li>如果 MySQL 评估使用索引比全表更慢，则不使用索引。</li>\n</ol>\n<h4 id=\"SQL-提示\"><a href=\"#SQL-提示\" class=\"headerlink\" title=\"SQL 提示\"></a>SQL 提示</h4><p>是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</p>\n<p>例如，使用索引：<br><code>explain select * from tb_user use index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>不使用哪个索引：<br><code>explain select * from tb_user ignore index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>必须使用哪个索引：<br><code>explain select * from tb_user force index(idx_user_pro) where profession=&quot;软件工程&quot;;</code></p>\n<p>use 是建议，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，force就是无论如何都强制使用该索引。</p>\n<h4 id=\"覆盖索引-amp-回表查询\"><a href=\"#覆盖索引-amp-回表查询\" class=\"headerlink\" title=\"覆盖索引&amp;回表查询\"></a>覆盖索引&amp;回表查询</h4><p>尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。</p>\n<p>explain 中 extra 字段含义：<br><code>using index condition</code>：查找使用了索引，但是需要回表查询数据<br><code>using where; using index;</code>：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询</p>\n<p>如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是select *；如果在辅助索引中找聚集索引，如<code>select id, name from xxx where name=&#39;xxx&#39;;</code>，也只需要通过辅助索引(name)查找到对应的id，返回name和name索引对应的id即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如<code>select id, name, gender from xxx where name=&#39;xxx&#39;;</code></p>\n<p>所以尽量不要用<code>select *</code>，容易出现回表查询，降低效率，除非有联合索引包含了所有字段</p>\n<p>面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下SQL语句进行优化，该如何进行才是最优方案：<br><code>select id, username, password from tb_user where username=&#39;itcast&#39;;</code></p>\n<p>解：给username和password字段建立联合索引，则不需要回表查询，直接覆盖索引</p>\n<h4 id=\"前缀索引\"><a href=\"#前缀索引\" class=\"headerlink\" title=\"前缀索引\"></a>前缀索引</h4><p>当字段类型为字符串（varchar, text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</p>\n<p>语法：<code>create index idx_xxxx on table_name(columnn(n));</code><br>前缀长度：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。<br>求选择性公式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select count(distinct email) / count(*) from tb_user;</span><br><span class=\"line\">select count(distinct substring(email, 1, 5)) / count(*) from tb_user;</span><br></pre></td></tr></table></figure>\n\n<p>show index 里面的sub_part可以看到接取的长度</p>\n<h4 id=\"单列索引-amp-联合索引\"><a href=\"#单列索引-amp-联合索引\" class=\"headerlink\" title=\"单列索引&amp;联合索引\"></a>单列索引&amp;联合索引</h4><p>单列索引：即一个索引只包含单个列<br>联合索引：即一个索引包含了多个列<br>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。</p>\n<p>单列索引情况：<br><code>explain select id, phone, name from tb_user where phone = &#39;17799990010&#39; and name = &#39;韩信&#39;;</code><br>这句只会用到phone索引字段</p>\n<h5 id=\"注意事项-8\"><a href=\"#注意事项-8\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li>多条件联合查询时，MySQL优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询</li>\n</ul>\n<h3 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h3><ol>\n<li>针对于数据量较大，且查询比较频繁的表建立索引</li>\n<li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li>\n<li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li>\n<li>如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引</li>\n<li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li>\n<li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率</li>\n<li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询</li>\n</ol>\n<h2 id=\"SQL-优化\"><a href=\"#SQL-优化\" class=\"headerlink\" title=\"SQL 优化\"></a>SQL 优化</h2><h3 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h3><p>普通插入：</p>\n<ol>\n<li>采用批量插入（一次插入的数据不建议超过1000条）</li>\n<li>手动提交事务</li>\n<li>主键顺序插入</li>\n</ol>\n<p>大批量插入：<br>如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令插入。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 客户端连接服务端时，加上参数 --local-infile（这一行在bash/cmd界面输入）</span><br><span class=\"line\">mysql --local-infile -u root -p</span><br><span class=\"line\"># 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关</span><br><span class=\"line\">set global local_infile = 1;</span><br><span class=\"line\">select @@local_infile;</span><br><span class=\"line\"># 执行load指令将准备好的数据，加载到表结构中</span><br><span class=\"line\">load data local infile &apos;/root/sql1.log&apos; into table &apos;tb_user&apos; fields terminated by &apos;,&apos; lines terminated by &apos;\\n&apos;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"主键优化\"><a href=\"#主键优化\" class=\"headerlink\" title=\"主键优化\"></a>主键优化</h3><p>数据组织方式：在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（Index organized table, IOT）</p>\n<p>页分裂：页可以为空，也可以填充一般，也可以填充100%，每个页包含了2-N行数据（如果一行数据过大，会行溢出），根据主键排列。<br>页合并：当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录到达 MERGE_THRESHOLD（默认为页的50%），InnoDB会开始寻找最靠近的页（前后）看看是否可以将这两个页合并以优化空间使用。</p>\n<p>MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或创建索引时指定</p>\n<blockquote>\n<p>文字说明不够清晰明了，具体可以看视频里的PPT演示过程：<a href=\"https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90</a></p>\n</blockquote>\n<p>主键设计原则：</p>\n<ul>\n<li>满足业务需求的情况下，尽量降低主键的长度</li>\n<li>插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键</li>\n<li>尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号</li>\n<li>业务操作时，避免对主键的修改</li>\n</ul>\n<h3 id=\"order-by优化\"><a href=\"#order-by优化\" class=\"headerlink\" title=\"order by优化\"></a>order by优化</h3><ol>\n<li>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序</li>\n<li>Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</li>\n</ol>\n<p>如果order by字段全部使用升序排序或者降序排序，则都会走索引，但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain的extra信息显示的是<code>Using index, Using filesort</code>，如果要优化掉Using filesort，则需要另外再创建一个索引，如：<code>create index idx_user_age_phone_ad on tb_user(age asc, phone desc);</code>，此时使用<code>select id, age, phone from tb_user order by age asc, phone desc;</code>会全部走索引</p>\n<p>总结：</p>\n<ul>\n<li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li>\n<li>尽量使用覆盖索引</li>\n<li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC/DESC）</li>\n<li>如果不可避免出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认256k）</li>\n</ul>\n<h3 id=\"group-by优化\"><a href=\"#group-by优化\" class=\"headerlink\" title=\"group by优化\"></a>group by优化</h3><ul>\n<li>在分组操作时，可以通过索引来提高效率</li>\n<li>分组操作时，索引的使用也是满足最左前缀法则的</li>\n</ul>\n<p>如索引为<code>idx_user_pro_age_stat</code>，则句式可以是<code>select ... where profession order by age</code>，这样也符合最左前缀法则</p>\n<h3 id=\"limit优化\"><a href=\"#limit优化\" class=\"headerlink\" title=\"limit优化\"></a>limit优化</h3><p>常见的问题如<code>limit 2000000, 10</code>，此时需要 MySQL 排序前2000000条记录，但仅仅返回2000000 - 2000010的记录，其他记录丢弃，查询排序的代价非常大。<br>优化方案：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化</p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 此语句耗时很长</span><br><span class=\"line\">select * from tb_sku limit 9000000, 10;</span><br><span class=\"line\">-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询</span><br><span class=\"line\">select id from tb_sku order by id limit 9000000, 10;</span><br><span class=\"line\">-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit</span><br><span class=\"line\">-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);</span><br><span class=\"line\">-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度</span><br><span class=\"line\">select * from tb_sku as s, (select id from tb_sku order by id limit 9000000, 10) as a where s.id = a.id;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"count优化\"><a href=\"#count优化\" class=\"headerlink\" title=\"count优化\"></a>count优化</h3><p>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高（前提是不适用where）；<br>InnoDB 在执行 count(*) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。<br>优化方案：自己计数，如创建key-value表存储在内存或硬盘，或者是用redis</p>\n<p>count的几种用法：</p>\n<ul>\n<li>如果count函数的参数（count里面写的那个字段）不是NULL（字段值不为NULL），累计值就加一，最后返回累计值</li>\n<li>用法：count(*)、count(主键)、count(字段)、count(1)</li>\n<li>count(主键)跟count(*)一样，因为主键不能为空；count(字段)只计算字段值不为NULL的行；count(1)引擎会为每行添加一个1，然后就count这个1，返回结果也跟count(*)一样；count(null)返回0</li>\n</ul>\n<p>各种用法的性能：</p>\n<ul>\n<li>count(主键)：InnoDB引擎会遍历整张表，把每行的主键id值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）</li>\n<li>count(字段)：没有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加；有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加</li>\n<li>count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加</li>\n<li>count(*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加</li>\n</ul>\n<p>按效率排序：count(字段) &lt; count(主键) &lt; count(1) &lt; count(*)，所以尽量使用 count(*)</p>\n<h3 id=\"update优化（避免行锁升级为表锁）\"><a href=\"#update优化（避免行锁升级为表锁）\" class=\"headerlink\" title=\"update优化（避免行锁升级为表锁）\"></a>update优化（避免行锁升级为表锁）</h3><p>InnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。</p>\n<p>如以下两条语句：<br><code>update student set no = &#39;123&#39; where id = 1;</code>，这句由于id有主键索引，所以只会锁这一行；<br><code>update student set no = &#39;123&#39; where name = &#39;test&#39;;</code>，这句由于name没有索引，所以会把整张表都锁住进行数据更新，解决方法是给name字段添加索引</p>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><h2 id=\"整型\"><a href=\"#整型\" class=\"headerlink\" title=\"整型\"></a>整型</h2><table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>取值范围</th>\n<th>大小</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>TINYINT</td>\n<td>-128〜127</td>\n<td>1个字节</td>\n</tr>\n<tr>\n<td>SMALLINT</td>\n<td>-32768〜32767</td>\n<td>2个宇节</td>\n</tr>\n<tr>\n<td>MEDIUMINT</td>\n<td>-8388608〜8388607</td>\n<td>3个字节</td>\n</tr>\n<tr>\n<td>INT (INTEGHR)</td>\n<td>-2147483648〜2147483647</td>\n<td>4个字节</td>\n</tr>\n<tr>\n<td>BIGINT</td>\n<td>-9223372036854775808〜9223372036854775807</td>\n<td>8个字节</td>\n</tr>\n</tbody></table>\n<p>无符号在数据类型后加 unsigned 关键字。</p>\n<h2 id=\"浮点型\"><a href=\"#浮点型\" class=\"headerlink\" title=\"浮点型\"></a>浮点型</h2><table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>FLOAT</td>\n<td>单精度浮点数</td>\n<td>4 个字节</td>\n</tr>\n<tr>\n<td>DOUBLE</td>\n<td>双精度浮点数</td>\n<td>8 个字节</td>\n</tr>\n<tr>\n<td>DECIMAL (M, D)，DEC</td>\n<td>压缩的“严格”定点数</td>\n<td>M+2 个字节</td>\n</tr>\n</tbody></table>\n<h2 id=\"日期和时间\"><a href=\"#日期和时间\" class=\"headerlink\" title=\"日期和时间\"></a>日期和时间</h2><table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>日期格式</th>\n<th>日期范围</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>YEAR</td>\n<td>YYYY</td>\n<td>1901 ~ 2155</td>\n<td>1 个字节</td>\n</tr>\n<tr>\n<td>TIME</td>\n<td>HH:MM:SS</td>\n<td>-838:59:59 ~ 838:59:59</td>\n<td>3 个字节</td>\n</tr>\n<tr>\n<td>DATE</td>\n<td>YYYY-MM-DD</td>\n<td>1000-01-01 ~ 9999-12-3</td>\n<td>3 个字节</td>\n</tr>\n<tr>\n<td>DATETIME</td>\n<td>YYYY-MM-DD HH:MM:SS</td>\n<td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td>\n<td>8 个字节</td>\n</tr>\n<tr>\n<td>TIMESTAMP</td>\n<td>YYYY-MM-DD HH:MM:SS</td>\n<td>1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td>\n<td>4 个字节</td>\n</tr>\n</tbody></table>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CHAR(M)</td>\n<td>固定长度非二进制字符串</td>\n<td>M 字节，1&lt;=M&lt;=255</td>\n</tr>\n<tr>\n<td>VARCHAR(M)</td>\n<td>变长非二进制字符串</td>\n<td>L+1字节，在此，L&lt; = M和 1&lt;=M&lt;=255</td>\n</tr>\n<tr>\n<td>TINYTEXT</td>\n<td>非常小的非二进制字符串</td>\n<td>L+1字节，在此，L&lt;2^8</td>\n</tr>\n<tr>\n<td>TEXT</td>\n<td>小的非二进制字符串</td>\n<td>L+2字节，在此，L&lt;2^16</td>\n</tr>\n<tr>\n<td>MEDIUMTEXT</td>\n<td>中等大小的非二进制字符串</td>\n<td>L+3字节，在此，L&lt;2^24</td>\n</tr>\n<tr>\n<td>LONGTEXT</td>\n<td>大的非二进制字符串</td>\n<td>L+4字节，在此，L&lt;2^32</td>\n</tr>\n<tr>\n<td>ENUM</td>\n<td>枚举类型，只能有一个枚举字符串值</td>\n<td>1或2个字节，取决于枚举值的数目 (最大值为65535)</td>\n</tr>\n<tr>\n<td>SET</td>\n<td>一个设置，字符串对象可以有零个或 多个SET成员</td>\n<td>1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员）</td>\n</tr>\n</tbody></table>\n<h2 id=\"二进制类型\"><a href=\"#二进制类型\" class=\"headerlink\" title=\"二进制类型\"></a>二进制类型</h2><table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BIT(M)</td>\n<td>位字段类型</td>\n<td>大约 (M+7)/8 字节</td>\n</tr>\n<tr>\n<td>BINARY(M)</td>\n<td>固定长度二进制字符串</td>\n<td>M 字节</td>\n</tr>\n<tr>\n<td>VARBINARY (M)</td>\n<td>可变长度二进制字符串</td>\n<td>M+1 字节</td>\n</tr>\n<tr>\n<td>TINYBLOB (M)</td>\n<td>非常小的BLOB</td>\n<td>L+1 字节，在此，L&lt;2^8</td>\n</tr>\n<tr>\n<td>BLOB (M)</td>\n<td>小 BLOB</td>\n<td>L+2 字节，在此，L&lt;2^16</td>\n</tr>\n<tr>\n<td>MEDIUMBLOB (M)</td>\n<td>中等大小的BLOB</td>\n<td>L+3 字节，在此，L&lt;2^24</td>\n</tr>\n<tr>\n<td>LONGBLOB (M)</td>\n<td>非常大的BLOB</td>\n<td>L+4 字节，在此，L&lt;2^32</td>\n</tr>\n</tbody></table>\n<h1 id=\"权限一览表\"><a href=\"#权限一览表\" class=\"headerlink\" title=\"权限一览表\"></a>权限一览表</h1><blockquote>\n<p>具体权限的作用详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html\" title=\"官方文档\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n</blockquote>\n<p>GRANT 和 REVOKE 允许的静态权限</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Privilege</th>\n<th align=\"left\">Grant Table Column</th>\n<th align=\"left\">Context</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_all\" target=\"_blank\" rel=\"noopener\"><code>ALL [PRIVILEGES]</code></a></td>\n<td align=\"left\">Synonym for “all privileges”</td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter\" target=\"_blank\" rel=\"noopener\"><code>ALTER</code></a></td>\n<td align=\"left\"><code>Alter_priv</code></td>\n<td align=\"left\">Tables</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter-routine\" target=\"_blank\" rel=\"noopener\"><code>ALTER ROUTINE</code></a></td>\n<td align=\"left\"><code>Alter_routine_priv</code></td>\n<td align=\"left\">Stored routines</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create\" target=\"_blank\" rel=\"noopener\"><code>CREATE</code></a></td>\n<td align=\"left\"><code>Create_priv</code></td>\n<td align=\"left\">Databases, tables, or indexes</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-role\" target=\"_blank\" rel=\"noopener\"><code>CREATE ROLE</code></a></td>\n<td align=\"left\"><code>Create_role_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-routine\" target=\"_blank\" rel=\"noopener\"><code>CREATE ROUTINE</code></a></td>\n<td align=\"left\"><code>Create_routine_priv</code></td>\n<td align=\"left\">Stored routines</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-tablespace\" target=\"_blank\" rel=\"noopener\"><code>CREATE TABLESPACE</code></a></td>\n<td align=\"left\"><code>Create_tablespace_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-temporary-tables\" target=\"_blank\" rel=\"noopener\"><code>CREATE TEMPORARY TABLES</code></a></td>\n<td align=\"left\"><code>Create_tmp_table_priv</code></td>\n<td align=\"left\">Tables</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-user\" target=\"_blank\" rel=\"noopener\"><code>CREATE USER</code></a></td>\n<td align=\"left\"><code>Create_user_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-view\" target=\"_blank\" rel=\"noopener\"><code>CREATE VIEW</code></a></td>\n<td align=\"left\"><code>Create_view_priv</code></td>\n<td align=\"left\">Views</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_delete\" target=\"_blank\" rel=\"noopener\"><code>DELETE</code></a></td>\n<td align=\"left\"><code>Delete_priv</code></td>\n<td align=\"left\">Tables</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop\" target=\"_blank\" rel=\"noopener\"><code>DROP</code></a></td>\n<td align=\"left\"><code>Drop_priv</code></td>\n<td align=\"left\">Databases, tables, or views</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop-role\" target=\"_blank\" rel=\"noopener\"><code>DROP ROLE</code></a></td>\n<td align=\"left\"><code>Drop_role_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_event\" target=\"_blank\" rel=\"noopener\"><code>EVENT</code></a></td>\n<td align=\"left\"><code>Event_priv</code></td>\n<td align=\"left\">Databases</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_execute\" target=\"_blank\" rel=\"noopener\"><code>EXECUTE</code></a></td>\n<td align=\"left\"><code>Execute_priv</code></td>\n<td align=\"left\">Stored routines</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_file\" target=\"_blank\" rel=\"noopener\"><code>FILE</code></a></td>\n<td align=\"left\"><code>File_priv</code></td>\n<td align=\"left\">File access on server host</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_grant-option\" target=\"_blank\" rel=\"noopener\"><code>GRANT OPTION</code></a></td>\n<td align=\"left\"><code>Grant_priv</code></td>\n<td align=\"left\">Databases, tables, or stored routines</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_index\" target=\"_blank\" rel=\"noopener\"><code>INDEX</code></a></td>\n<td align=\"left\"><code>Index_priv</code></td>\n<td align=\"left\">Tables</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_insert\" target=\"_blank\" rel=\"noopener\"><code>INSERT</code></a></td>\n<td align=\"left\"><code>Insert_priv</code></td>\n<td align=\"left\">Tables or columns</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_lock-tables\" target=\"_blank\" rel=\"noopener\"><code>LOCK TABLES</code></a></td>\n<td align=\"left\"><code>Lock_tables_priv</code></td>\n<td align=\"left\">Databases</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_process\" target=\"_blank\" rel=\"noopener\"><code>PROCESS</code></a></td>\n<td align=\"left\"><code>Process_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_proxy\" target=\"_blank\" rel=\"noopener\"><code>PROXY</code></a></td>\n<td align=\"left\">See <code>proxies_priv</code> table</td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_references\" target=\"_blank\" rel=\"noopener\"><code>REFERENCES</code></a></td>\n<td align=\"left\"><code>References_priv</code></td>\n<td align=\"left\">Databases or tables</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_reload\" target=\"_blank\" rel=\"noopener\"><code>RELOAD</code></a></td>\n<td align=\"left\"><code>Reload_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-client\" target=\"_blank\" rel=\"noopener\"><code>REPLICATION CLIENT</code></a></td>\n<td align=\"left\"><code>Repl_client_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave\" target=\"_blank\" rel=\"noopener\"><code>REPLICATION SLAVE</code></a></td>\n<td align=\"left\"><code>Repl_slave_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_select\" target=\"_blank\" rel=\"noopener\"><code>SELECT</code></a></td>\n<td align=\"left\"><code>Select_priv</code></td>\n<td align=\"left\">Tables or columns</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-databases\" target=\"_blank\" rel=\"noopener\"><code>SHOW DATABASES</code></a></td>\n<td align=\"left\"><code>Show_db_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-view\" target=\"_blank\" rel=\"noopener\"><code>SHOW VIEW</code></a></td>\n<td align=\"left\"><code>Show_view_priv</code></td>\n<td align=\"left\">Views</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_shutdown\" target=\"_blank\" rel=\"noopener\"><code>SHUTDOWN</code></a></td>\n<td align=\"left\"><code>Shutdown_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_super\" target=\"_blank\" rel=\"noopener\"><code>SUPER</code></a></td>\n<td align=\"left\"><code>Super_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_trigger\" target=\"_blank\" rel=\"noopener\"><code>TRIGGER</code></a></td>\n<td align=\"left\"><code>Trigger_priv</code></td>\n<td align=\"left\">Tables</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_update\" target=\"_blank\" rel=\"noopener\"><code>UPDATE</code></a></td>\n<td align=\"left\"><code>Update_priv</code></td>\n<td align=\"left\">Tables or columns</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_usage\" target=\"_blank\" rel=\"noopener\"><code>USAGE</code></a></td>\n<td align=\"left\">Synonym for “no privileges”</td>\n<td align=\"left\">Server administration</td>\n</tr>\n</tbody></table>\n<p>GRANT 和 REVOKE 允许的动态权限</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Privilege</th>\n<th align=\"left\">Context</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_application-password-admin\" target=\"_blank\" rel=\"noopener\"><code>APPLICATION_PASSWORD_ADMIN</code></a></td>\n<td align=\"left\">Dual password administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-abort-exempt\" target=\"_blank\" rel=\"noopener\"><code>AUDIT_ABORT_EXEMPT</code></a></td>\n<td align=\"left\">Allow queries blocked by audit log filter</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-admin\" target=\"_blank\" rel=\"noopener\"><code>AUDIT_ADMIN</code></a></td>\n<td align=\"left\">Audit log administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_authentication-policy-admin\" target=\"_blank\" rel=\"noopener\"><code>AUTHENTICATION_POLICY_ADMIN</code></a></td>\n<td align=\"left\">Authentication administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_backup-admin\" target=\"_blank\" rel=\"noopener\"><code>BACKUP_ADMIN</code></a></td>\n<td align=\"left\">Backup administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-admin\" target=\"_blank\" rel=\"noopener\"><code>BINLOG_ADMIN</code></a></td>\n<td align=\"left\">Backup and Replication administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-encryption-admin\" target=\"_blank\" rel=\"noopener\"><code>BINLOG_ENCRYPTION_ADMIN</code></a></td>\n<td align=\"left\">Backup and Replication administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_clone-admin\" target=\"_blank\" rel=\"noopener\"><code>CLONE_ADMIN</code></a></td>\n<td align=\"left\">Clone administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_connection-admin\" target=\"_blank\" rel=\"noopener\"><code>CONNECTION_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_encryption-key-admin\" target=\"_blank\" rel=\"noopener\"><code>ENCRYPTION_KEY_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-admin\" target=\"_blank\" rel=\"noopener\"><code>FIREWALL_ADMIN</code></a></td>\n<td align=\"left\">Firewall administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-exempt\" target=\"_blank\" rel=\"noopener\"><code>FIREWALL_EXEMPT</code></a></td>\n<td align=\"left\">Firewall administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-user\" target=\"_blank\" rel=\"noopener\"><code>FIREWALL_USER</code></a></td>\n<td align=\"left\">Firewall administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-optimizer-costs\" target=\"_blank\" rel=\"noopener\"><code>FLUSH_OPTIMIZER_COSTS</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-status\" target=\"_blank\" rel=\"noopener\"><code>FLUSH_STATUS</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-tables\" target=\"_blank\" rel=\"noopener\"><code>FLUSH_TABLES</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-user-resources\" target=\"_blank\" rel=\"noopener\"><code>FLUSH_USER_RESOURCES</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-admin\" target=\"_blank\" rel=\"noopener\"><code>GROUP_REPLICATION_ADMIN</code></a></td>\n<td align=\"left\">Replication administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-stream\" target=\"_blank\" rel=\"noopener\"><code>GROUP_REPLICATION_STREAM</code></a></td>\n<td align=\"left\">Replication administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_innodb-redo-log-archive\" target=\"_blank\" rel=\"noopener\"><code>INNODB_REDO_LOG_ARCHIVE</code></a></td>\n<td align=\"left\">Redo log archiving administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_ndb-stored-user\" target=\"_blank\" rel=\"noopener\"><code>NDB_STORED_USER</code></a></td>\n<td align=\"left\">NDB Cluster</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_passwordless-user-admin\" target=\"_blank\" rel=\"noopener\"><code>PASSWORDLESS_USER_ADMIN</code></a></td>\n<td align=\"left\">Authentication administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_persist-ro-variables-admin\" target=\"_blank\" rel=\"noopener\"><code>PERSIST_RO_VARIABLES_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-applier\" target=\"_blank\" rel=\"noopener\"><code>REPLICATION_APPLIER</code></a></td>\n<td align=\"left\"><code>PRIVILEGE_CHECKS_USER</code> for a replication channel</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave-admin\" target=\"_blank\" rel=\"noopener\"><code>REPLICATION_SLAVE_ADMIN</code></a></td>\n<td align=\"left\">Replication administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-admin\" target=\"_blank\" rel=\"noopener\"><code>RESOURCE_GROUP_ADMIN</code></a></td>\n<td align=\"left\">Resource group administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-user\" target=\"_blank\" rel=\"noopener\"><code>RESOURCE_GROUP_USER</code></a></td>\n<td align=\"left\">Resource group administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_role-admin\" target=\"_blank\" rel=\"noopener\"><code>ROLE_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_session-variables-admin\" target=\"_blank\" rel=\"noopener\"><code>SESSION_VARIABLES_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_set-user-id\" target=\"_blank\" rel=\"noopener\"><code>SET_USER_ID</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-routine\" target=\"_blank\" rel=\"noopener\"><code>SHOW_ROUTINE</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-user\" target=\"_blank\" rel=\"noopener\"><code>SYSTEM_USER</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-variables-admin\" target=\"_blank\" rel=\"noopener\"><code>SYSTEM_VARIABLES_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_table-encryption-admin\" target=\"_blank\" rel=\"noopener\"><code>TABLE_ENCRYPTION_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_version-token-admin\" target=\"_blank\" rel=\"noopener\"><code>VERSION_TOKEN_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_xa-recover-admin\" target=\"_blank\" rel=\"noopener\"><code>XA_RECOVER_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n</tbody></table>\n<h1 id=\"图形化界面工具\"><a href=\"#图形化界面工具\" class=\"headerlink\" title=\"图形化界面工具\"></a>图形化界面工具</h1><ul>\n<li>Workbench(免费): <a href=\"http://dev.mysql.com/downloads/workbench/\" target=\"_blank\" rel=\"noopener\">http://dev.mysql.com/downloads/workbench/</a></li>\n<li>navicat(收费，试用版30天): <a href=\"https://www.navicat.com/en/download/navicat-for-mysql\" target=\"_blank\" rel=\"noopener\">https://www.navicat.com/en/download/navicat-for-mysql</a></li>\n<li>Sequel Pro(开源免费，仅支持Mac OS): <a href=\"http://www.sequelpro.com/\" target=\"_blank\" rel=\"noopener\">http://www.sequelpro.com/</a></li>\n<li>HeidiSQL(免费): <a href=\"http://www.heidisql.com/\" target=\"_blank\" rel=\"noopener\">http://www.heidisql.com/</a></li>\n<li>phpMyAdmin(免费): <a href=\"https://www.phpmyadmin.net/\" target=\"_blank\" rel=\"noopener\">https://www.phpmyadmin.net/</a></li>\n<li>SQLyog: <a href=\"https://sqlyog.en.softonic.com/\" target=\"_blank\" rel=\"noopener\">https://sqlyog.en.softonic.com/</a></li>\n</ul>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><h1 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h1><ol>\n<li>在SQL语句之后加上<code>\\G</code>会将结果的表格形式转换成行文本形式</li>\n<li>查看Mysql数据库占用空间：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT table_schema &quot;Database Name&quot;</span><br><span class=\"line\">     , SUM(data_length + index_length) / (1024 * 1024) &quot;Database Size in MB&quot;</span><br><span class=\"line\">FROM information_schema.TABLES</span><br><span class=\"line\">GROUP BY table_schema;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n"},{"title":"Deep Low-Resolution Person Re-Identification阅读笔记","date":"2020-07-14T16:00:00.000Z","_content":"# 标题及作者\n![](https://s3.bmp.ovh/imgs/2022/09/05/aa8ff46d06e6cc07.png)\n## 方法概况及总结\n### 整体架构\n![整体架构](https://s3.bmp.ovh/imgs/2022/09/05/d2fb70f26d148a01.png)\nSING CNN由SR子网(d)和Re-ID子网(e)两部分组成，在模型训练中部署三个流，分别以LR图像(a)、合成LR图像(b)和HR图像(c)作为输入。中间流(b)作为连接图像SR (d)和人Re-ID (e)学习任务的桥梁。\n### 损失函数构建\n损失函数由**SR损失**和**Re-ID**损失联合构建，公式如下：\n![SR损失函数 ](https://s3.bmp.ovh/imgs/2022/09/05/2dfc3dd0e6857260.png)\n![Re-ID损失函数](https://s3.bmp.ovh/imgs/2022/09/05/f440a4392562d931.png)\nL-reid式中：\n![ ](https://s3.bmp.ovh/imgs/2022/09/05/aed7d2417f060ddb.png)\n最后构建联合损失函数如下：\n![联合损失函数](https://s3.bmp.ovh/imgs/2022/09/05/194e32f193a83d27.png)\n### 训练及验证\n训练阶段上文已叙述，主要讲一下验证时的操作。验证时输入为2张图片，分别来自gallery的HR图片和probe的LR图片。对于HR图片，直接经过Re-ID子网提取特征；对于LR图片，需要先进行SR子网的增强再经过Re-ID提取特征，最后度量L2距离。\n### 实验结果\n参考以下四张表格：\n![和现行方法的比较](https://s3.bmp.ovh/imgs/2022/09/05/da5efeb01914b978.png)\n![组合网络的比较](https://s3.bmp.ovh/imgs/2022/09/05/3d02d144e35fddb2.png)\n![加入自制LR的效果](https://s3.bmp.ovh/imgs/2022/09/05/26de61efb1180638.png)\n![加入多尺度的效果](https://s3.bmp.ovh/imgs/2022/09/05/5bb3aae90e39a19b.png)","source":"_posts/论文笔记(一).md","raw":"---\ntitle: Deep Low-Resolution Person Re-Identification阅读笔记\ntags: [行人重识别,论文]\ncategories: [论文笔记]\ndate: 2020-7-15\n\n---\n# 标题及作者\n![](https://s3.bmp.ovh/imgs/2022/09/05/aa8ff46d06e6cc07.png)\n## 方法概况及总结\n### 整体架构\n![整体架构](https://s3.bmp.ovh/imgs/2022/09/05/d2fb70f26d148a01.png)\nSING CNN由SR子网(d)和Re-ID子网(e)两部分组成，在模型训练中部署三个流，分别以LR图像(a)、合成LR图像(b)和HR图像(c)作为输入。中间流(b)作为连接图像SR (d)和人Re-ID (e)学习任务的桥梁。\n### 损失函数构建\n损失函数由**SR损失**和**Re-ID**损失联合构建，公式如下：\n![SR损失函数 ](https://s3.bmp.ovh/imgs/2022/09/05/2dfc3dd0e6857260.png)\n![Re-ID损失函数](https://s3.bmp.ovh/imgs/2022/09/05/f440a4392562d931.png)\nL-reid式中：\n![ ](https://s3.bmp.ovh/imgs/2022/09/05/aed7d2417f060ddb.png)\n最后构建联合损失函数如下：\n![联合损失函数](https://s3.bmp.ovh/imgs/2022/09/05/194e32f193a83d27.png)\n### 训练及验证\n训练阶段上文已叙述，主要讲一下验证时的操作。验证时输入为2张图片，分别来自gallery的HR图片和probe的LR图片。对于HR图片，直接经过Re-ID子网提取特征；对于LR图片，需要先进行SR子网的增强再经过Re-ID提取特征，最后度量L2距离。\n### 实验结果\n参考以下四张表格：\n![和现行方法的比较](https://s3.bmp.ovh/imgs/2022/09/05/da5efeb01914b978.png)\n![组合网络的比较](https://s3.bmp.ovh/imgs/2022/09/05/3d02d144e35fddb2.png)\n![加入自制LR的效果](https://s3.bmp.ovh/imgs/2022/09/05/26de61efb1180638.png)\n![加入多尺度的效果](https://s3.bmp.ovh/imgs/2022/09/05/5bb3aae90e39a19b.png)","slug":"论文笔记(一)","published":1,"updated":"2022-09-05T04:59:17.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jba2i00ar7svwierdktmz","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"标题及作者\"><a href=\"#标题及作者\" class=\"headerlink\" title=\"标题及作者\"></a>标题及作者</h1><p><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/aa8ff46d06e6cc07.png\" alt></p>\n<h2 id=\"方法概况及总结\"><a href=\"#方法概况及总结\" class=\"headerlink\" title=\"方法概况及总结\"></a>方法概况及总结</h2><h3 id=\"整体架构\"><a href=\"#整体架构\" class=\"headerlink\" title=\"整体架构\"></a>整体架构</h3><p><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/d2fb70f26d148a01.png\" alt=\"整体架构\"><br>SING CNN由SR子网(d)和Re-ID子网(e)两部分组成，在模型训练中部署三个流，分别以LR图像(a)、合成LR图像(b)和HR图像(c)作为输入。中间流(b)作为连接图像SR (d)和人Re-ID (e)学习任务的桥梁。</p>\n<h3 id=\"损失函数构建\"><a href=\"#损失函数构建\" class=\"headerlink\" title=\"损失函数构建\"></a>损失函数构建</h3><p>损失函数由<strong>SR损失</strong>和<strong>Re-ID</strong>损失联合构建，公式如下：<br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/2dfc3dd0e6857260.png\" alt=\"SR损失函数 \"><br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/f440a4392562d931.png\" alt=\"Re-ID损失函数\"><br>L-reid式中：<br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/aed7d2417f060ddb.png\" alt=\" \"><br>最后构建联合损失函数如下：<br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/194e32f193a83d27.png\" alt=\"联合损失函数\"></p>\n<h3 id=\"训练及验证\"><a href=\"#训练及验证\" class=\"headerlink\" title=\"训练及验证\"></a>训练及验证</h3><p>训练阶段上文已叙述，主要讲一下验证时的操作。验证时输入为2张图片，分别来自gallery的HR图片和probe的LR图片。对于HR图片，直接经过Re-ID子网提取特征；对于LR图片，需要先进行SR子网的增强再经过Re-ID提取特征，最后度量L2距离。</p>\n<h3 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h3><p>参考以下四张表格：<br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/da5efeb01914b978.png\" alt=\"和现行方法的比较\"><br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/3d02d144e35fddb2.png\" alt=\"组合网络的比较\"><br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/26de61efb1180638.png\" alt=\"加入自制LR的效果\"><br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/5bb3aae90e39a19b.png\" alt=\"加入多尺度的效果\"></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"标题及作者\"><a href=\"#标题及作者\" class=\"headerlink\" title=\"标题及作者\"></a>标题及作者</h1><p><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/aa8ff46d06e6cc07.png\" alt></p>\n<h2 id=\"方法概况及总结\"><a href=\"#方法概况及总结\" class=\"headerlink\" title=\"方法概况及总结\"></a>方法概况及总结</h2><h3 id=\"整体架构\"><a href=\"#整体架构\" class=\"headerlink\" title=\"整体架构\"></a>整体架构</h3><p><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/d2fb70f26d148a01.png\" alt=\"整体架构\"><br>SING CNN由SR子网(d)和Re-ID子网(e)两部分组成，在模型训练中部署三个流，分别以LR图像(a)、合成LR图像(b)和HR图像(c)作为输入。中间流(b)作为连接图像SR (d)和人Re-ID (e)学习任务的桥梁。</p>\n<h3 id=\"损失函数构建\"><a href=\"#损失函数构建\" class=\"headerlink\" title=\"损失函数构建\"></a>损失函数构建</h3><p>损失函数由<strong>SR损失</strong>和<strong>Re-ID</strong>损失联合构建，公式如下：<br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/2dfc3dd0e6857260.png\" alt=\"SR损失函数 \"><br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/f440a4392562d931.png\" alt=\"Re-ID损失函数\"><br>L-reid式中：<br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/aed7d2417f060ddb.png\" alt=\" \"><br>最后构建联合损失函数如下：<br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/194e32f193a83d27.png\" alt=\"联合损失函数\"></p>\n<h3 id=\"训练及验证\"><a href=\"#训练及验证\" class=\"headerlink\" title=\"训练及验证\"></a>训练及验证</h3><p>训练阶段上文已叙述，主要讲一下验证时的操作。验证时输入为2张图片，分别来自gallery的HR图片和probe的LR图片。对于HR图片，直接经过Re-ID子网提取特征；对于LR图片，需要先进行SR子网的增强再经过Re-ID提取特征，最后度量L2距离。</p>\n<h3 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h3><p>参考以下四张表格：<br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/da5efeb01914b978.png\" alt=\"和现行方法的比较\"><br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/3d02d144e35fddb2.png\" alt=\"组合网络的比较\"><br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/26de61efb1180638.png\" alt=\"加入自制LR的效果\"><br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/5bb3aae90e39a19b.png\" alt=\"加入多尺度的效果\"></p>\n"},{"title":"试玩YOLOv3多目标检测","date":"2019-10-23T16:00:00.000Z","_content":"# YOLOv3简介\n\n![](https://s1.ax1x.com/2022/09/05/vT2ltK.png)\n\n[官网链接](https://pjreddie.com/darknet/yolo/)\n[论文链接](https://pjreddie.com/media/files/papers/YOLOv3.pdf)\n\n# 运行环境搭建\n首先下载源码：\n**源码：** <https://github.com/NUISTGY/TensorFlow2.0-Examples/tree/master/4-Object_Detection/YOLOV3>\n\n接着安装依赖库和训练好的权重：\n```\n$ pip3 install -r ./docs/requirements.txt\n$ wget https://pjreddie.com/media/files/yolov3.weights\n```\n将权重文件置于源码文件夹目录下即可。\n\n# Quick Start\n前面已经完成了所有的准备公作，运行以下命令即可进行目标检测：\n```\n$ python image_demo.py\n$ python video_demo.py # if use camera, set video_path = 0\n```\n![运行python image_demo.py的结果](https://s1.ax1x.com/2022/09/05/vT2KTx.jpg)\n\n# 尝试检测自己的图片或视频\n想要识别自己的图片只需要做很小的改动即可。\n打开`image_demo.py`:\n![](https://s1.ax1x.com/2022/09/05/vT2J6H.png)\n将22行image_path改为自己图片的地址即可，视频目标检测同理。\n\n最后再贴一张目标比较多的照片：\n![](https://s1.ax1x.com/2022/09/05/vT2Qk6.png)\n\n","source":"_posts/试玩YOLOv3多目标检测.md","raw":"---\ntitle:  试玩YOLOv3多目标检测\ntags: [目标检测,深度学习,图像处理]\ncategories: [深度学习]\ndate: 2019-10-24\n\n---\n# YOLOv3简介\n\n![](https://s1.ax1x.com/2022/09/05/vT2ltK.png)\n\n[官网链接](https://pjreddie.com/darknet/yolo/)\n[论文链接](https://pjreddie.com/media/files/papers/YOLOv3.pdf)\n\n# 运行环境搭建\n首先下载源码：\n**源码：** <https://github.com/NUISTGY/TensorFlow2.0-Examples/tree/master/4-Object_Detection/YOLOV3>\n\n接着安装依赖库和训练好的权重：\n```\n$ pip3 install -r ./docs/requirements.txt\n$ wget https://pjreddie.com/media/files/yolov3.weights\n```\n将权重文件置于源码文件夹目录下即可。\n\n# Quick Start\n前面已经完成了所有的准备公作，运行以下命令即可进行目标检测：\n```\n$ python image_demo.py\n$ python video_demo.py # if use camera, set video_path = 0\n```\n![运行python image_demo.py的结果](https://s1.ax1x.com/2022/09/05/vT2KTx.jpg)\n\n# 尝试检测自己的图片或视频\n想要识别自己的图片只需要做很小的改动即可。\n打开`image_demo.py`:\n![](https://s1.ax1x.com/2022/09/05/vT2J6H.png)\n将22行image_path改为自己图片的地址即可，视频目标检测同理。\n\n最后再贴一张目标比较多的照片：\n![](https://s1.ax1x.com/2022/09/05/vT2Qk6.png)\n\n","slug":"试玩YOLOv3多目标检测","published":1,"updated":"2022-09-05T05:51:05.001Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl81jba3a00b27svwbsrdloat","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"YOLOv3简介\"><a href=\"#YOLOv3简介\" class=\"headerlink\" title=\"YOLOv3简介\"></a>YOLOv3简介</h1><p><img src=\"https://s1.ax1x.com/2022/09/05/vT2ltK.png\" alt></p>\n<p><a href=\"https://pjreddie.com/darknet/yolo/\" target=\"_blank\" rel=\"noopener\">官网链接</a><br><a href=\"https://pjreddie.com/media/files/papers/YOLOv3.pdf\" target=\"_blank\" rel=\"noopener\">论文链接</a></p>\n<h1 id=\"运行环境搭建\"><a href=\"#运行环境搭建\" class=\"headerlink\" title=\"运行环境搭建\"></a>运行环境搭建</h1><p>首先下载源码：<br><strong>源码：</strong> <a href=\"https://github.com/NUISTGY/TensorFlow2.0-Examples/tree/master/4-Object_Detection/YOLOV3\">https://github.com/NUISTGY/TensorFlow2.0-Examples/tree/master/4-Object_Detection/YOLOV3</a></p>\n<p>接着安装依赖库和训练好的权重：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip3 install -r ./docs/requirements.txt</span><br><span class=\"line\">$ wget https://pjreddie.com/media/files/yolov3.weights</span><br></pre></td></tr></table></figure>\n\n<p>将权重文件置于源码文件夹目录下即可。</p>\n<h1 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h1><p>前面已经完成了所有的准备公作，运行以下命令即可进行目标检测：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python image_demo.py</span><br><span class=\"line\">$ python video_demo.py # if use camera, set video_path = 0</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s1.ax1x.com/2022/09/05/vT2KTx.jpg\" alt=\"运行python image_demo.py的结果\"></p>\n<h1 id=\"尝试检测自己的图片或视频\"><a href=\"#尝试检测自己的图片或视频\" class=\"headerlink\" title=\"尝试检测自己的图片或视频\"></a>尝试检测自己的图片或视频</h1><p>想要识别自己的图片只需要做很小的改动即可。<br>打开<code>image_demo.py</code>:<br><img src=\"https://s1.ax1x.com/2022/09/05/vT2J6H.png\" alt><br>将22行image_path改为自己图片的地址即可，视频目标检测同理。</p>\n<p>最后再贴一张目标比较多的照片：<br><img src=\"https://s1.ax1x.com/2022/09/05/vT2Qk6.png\" alt></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"YOLOv3简介\"><a href=\"#YOLOv3简介\" class=\"headerlink\" title=\"YOLOv3简介\"></a>YOLOv3简介</h1><p><img src=\"https://s1.ax1x.com/2022/09/05/vT2ltK.png\" alt></p>\n<p><a href=\"https://pjreddie.com/darknet/yolo/\" target=\"_blank\" rel=\"noopener\">官网链接</a><br><a href=\"https://pjreddie.com/media/files/papers/YOLOv3.pdf\" target=\"_blank\" rel=\"noopener\">论文链接</a></p>\n<h1 id=\"运行环境搭建\"><a href=\"#运行环境搭建\" class=\"headerlink\" title=\"运行环境搭建\"></a>运行环境搭建</h1><p>首先下载源码：<br><strong>源码：</strong> <a href=\"https://github.com/NUISTGY/TensorFlow2.0-Examples/tree/master/4-Object_Detection/YOLOV3\">https://github.com/NUISTGY/TensorFlow2.0-Examples/tree/master/4-Object_Detection/YOLOV3</a></p>\n<p>接着安装依赖库和训练好的权重：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip3 install -r ./docs/requirements.txt</span><br><span class=\"line\">$ wget https://pjreddie.com/media/files/yolov3.weights</span><br></pre></td></tr></table></figure>\n\n<p>将权重文件置于源码文件夹目录下即可。</p>\n<h1 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h1><p>前面已经完成了所有的准备公作，运行以下命令即可进行目标检测：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python image_demo.py</span><br><span class=\"line\">$ python video_demo.py # if use camera, set video_path = 0</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s1.ax1x.com/2022/09/05/vT2KTx.jpg\" alt=\"运行python image_demo.py的结果\"></p>\n<h1 id=\"尝试检测自己的图片或视频\"><a href=\"#尝试检测自己的图片或视频\" class=\"headerlink\" title=\"尝试检测自己的图片或视频\"></a>尝试检测自己的图片或视频</h1><p>想要识别自己的图片只需要做很小的改动即可。<br>打开<code>image_demo.py</code>:<br><img src=\"https://s1.ax1x.com/2022/09/05/vT2J6H.png\" alt><br>将22行image_path改为自己图片的地址即可，视频目标检测同理。</p>\n<p>最后再贴一张目标比较多的照片：<br><img src=\"https://s1.ax1x.com/2022/09/05/vT2Qk6.png\" alt></p>\n"},{"title":"Git工作区中文件状态总结","date":"2022-09-15T16:00:00.000Z","_content":"\n# 总结\n\nGit工作区中文件的状态👇\n\nGit工作区中的文件存在两种状态:\n\n- untracked未跟踪（未被纳入版本控制)\n- tracked已跟踪（被纳入版本控制)\n  - 1.Unmodified 未修改状态\n  - 2.Modified 已修改状态\n  - 3.Staged 已暂存状态\n\n# 详细说明\n\n**注⚠：使用git status查看文件状态**\n\n## untracker\n\n设想：此时在.git所在目录中新建文件Hello.txt\n则：此时查看文件Hello.txt状态为 <font color=\"#660000\">untracker</font> \n\n## tracker\n\n### Staged\n\n设想：此时对Hello.txt文件进行git add. 操作\n则：此时查看文件Hello.txt状态为 <font color=\"#006600\">Staged</font>\n\n### Unmodified\n\n设想：此时对Hello.txt文件进行git commit 操作\n则：此时查看文件Hello.txt状态为 Unmodified，注意此时调用状态查看结果并不显示\n\n### Modified\n\n设想：此时对Hello.txt文件内容进行修改操作\n则：此时查看文件Hello.txt状态为 <font color=\"#660000\">Modified</font> (未放入缓存区)\n\n紧接着：再次执行git add. 操作\n则：此时查看文件Hello.txt状态为 <font color=\"#006600\">Modified</font> (已归入缓存区)","source":"_posts/git_status总结.md","raw":"---\ntitle:  Git工作区中文件状态总结\ntags: [git]\ncategories: [git]\ndate: 2022-9-16\n\n---\n\n# 总结\n\nGit工作区中文件的状态👇\n\nGit工作区中的文件存在两种状态:\n\n- untracked未跟踪（未被纳入版本控制)\n- tracked已跟踪（被纳入版本控制)\n  - 1.Unmodified 未修改状态\n  - 2.Modified 已修改状态\n  - 3.Staged 已暂存状态\n\n# 详细说明\n\n**注⚠：使用git status查看文件状态**\n\n## untracker\n\n设想：此时在.git所在目录中新建文件Hello.txt\n则：此时查看文件Hello.txt状态为 <font color=\"#660000\">untracker</font> \n\n## tracker\n\n### Staged\n\n设想：此时对Hello.txt文件进行git add. 操作\n则：此时查看文件Hello.txt状态为 <font color=\"#006600\">Staged</font>\n\n### Unmodified\n\n设想：此时对Hello.txt文件进行git commit 操作\n则：此时查看文件Hello.txt状态为 Unmodified，注意此时调用状态查看结果并不显示\n\n### Modified\n\n设想：此时对Hello.txt文件内容进行修改操作\n则：此时查看文件Hello.txt状态为 <font color=\"#660000\">Modified</font> (未放入缓存区)\n\n紧接着：再次执行git add. 操作\n则：此时查看文件Hello.txt状态为 <font color=\"#006600\">Modified</font> (已归入缓存区)","slug":"git_status总结","published":1,"updated":"2022-09-16T14:22:57.805Z","_id":"cl84kbhzn0000awvwdpo88di0","comments":1,"layout":"post","photos":[],"link":"","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Git工作区中文件的状态👇</p>\n<p>Git工作区中的文件存在两种状态:</p>\n<ul>\n<li>untracked未跟踪（未被纳入版本控制)</li>\n<li>tracked已跟踪（被纳入版本控制)<ul>\n<li>1.Unmodified 未修改状态</li>\n<li>2.Modified 已修改状态</li>\n<li>3.Staged 已暂存状态</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"详细说明\"><a href=\"#详细说明\" class=\"headerlink\" title=\"详细说明\"></a>详细说明</h1><p><strong>注⚠：使用git status查看文件状态</strong></p>\n<h2 id=\"untracker\"><a href=\"#untracker\" class=\"headerlink\" title=\"untracker\"></a>untracker</h2><p>设想：此时在.git所在目录中新建文件Hello.txt<br>则：此时查看文件Hello.txt状态为 <font color=\"#660000\">untracker</font> </p>\n<h2 id=\"tracker\"><a href=\"#tracker\" class=\"headerlink\" title=\"tracker\"></a>tracker</h2><h3 id=\"Staged\"><a href=\"#Staged\" class=\"headerlink\" title=\"Staged\"></a>Staged</h3><p>设想：此时对Hello.txt文件进行git add. 操作<br>则：此时查看文件Hello.txt状态为 <font color=\"#006600\">Staged</font></p>\n<h3 id=\"Unmodified\"><a href=\"#Unmodified\" class=\"headerlink\" title=\"Unmodified\"></a>Unmodified</h3><p>设想：此时对Hello.txt文件进行git commit 操作<br>则：此时查看文件Hello.txt状态为 Unmodified，注意此时调用状态查看结果并不显示</p>\n<h3 id=\"Modified\"><a href=\"#Modified\" class=\"headerlink\" title=\"Modified\"></a>Modified</h3><p>设想：此时对Hello.txt文件内容进行修改操作<br>则：此时查看文件Hello.txt状态为 <font color=\"#660000\">Modified</font> (未放入缓存区)</p>\n<p>紧接着：再次执行git add. 操作<br>则：此时查看文件Hello.txt状态为 <font color=\"#006600\">Modified</font> (已归入缓存区)</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Git工作区中文件的状态👇</p>\n<p>Git工作区中的文件存在两种状态:</p>\n<ul>\n<li>untracked未跟踪（未被纳入版本控制)</li>\n<li>tracked已跟踪（被纳入版本控制)<ul>\n<li>1.Unmodified 未修改状态</li>\n<li>2.Modified 已修改状态</li>\n<li>3.Staged 已暂存状态</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"详细说明\"><a href=\"#详细说明\" class=\"headerlink\" title=\"详细说明\"></a>详细说明</h1><p><strong>注⚠：使用git status查看文件状态</strong></p>\n<h2 id=\"untracker\"><a href=\"#untracker\" class=\"headerlink\" title=\"untracker\"></a>untracker</h2><p>设想：此时在.git所在目录中新建文件Hello.txt<br>则：此时查看文件Hello.txt状态为 <font color=\"#660000\">untracker</font> </p>\n<h2 id=\"tracker\"><a href=\"#tracker\" class=\"headerlink\" title=\"tracker\"></a>tracker</h2><h3 id=\"Staged\"><a href=\"#Staged\" class=\"headerlink\" title=\"Staged\"></a>Staged</h3><p>设想：此时对Hello.txt文件进行git add. 操作<br>则：此时查看文件Hello.txt状态为 <font color=\"#006600\">Staged</font></p>\n<h3 id=\"Unmodified\"><a href=\"#Unmodified\" class=\"headerlink\" title=\"Unmodified\"></a>Unmodified</h3><p>设想：此时对Hello.txt文件进行git commit 操作<br>则：此时查看文件Hello.txt状态为 Unmodified，注意此时调用状态查看结果并不显示</p>\n<h3 id=\"Modified\"><a href=\"#Modified\" class=\"headerlink\" title=\"Modified\"></a>Modified</h3><p>设想：此时对Hello.txt文件内容进行修改操作<br>则：此时查看文件Hello.txt状态为 <font color=\"#660000\">Modified</font> (未放入缓存区)</p>\n<p>紧接着：再次执行git add. 操作<br>则：此时查看文件Hello.txt状态为 <font color=\"#006600\">Modified</font> (已归入缓存区)</p>\n"},{"title":"Docker中的Redis部署","date":"2022-09-17T16:00:00.000Z","_content":"\n## 创建Redis的Docker容器\n\n<center>👇直奔主题👇</center>\n\n### shell脚本\n\n```shell\ndocker run \\\n--name myredis \\\n-v /root/redis_docker/mydata/redis/conf/redis.conf:/etc/redis/redis.conf \\\n-v /root/redis_docker/mydata/redis/data:/data \\\n-p 6379:6379 \\\n-d --restart=always redis:5.0 redis-server /etc/redis/redis.conf \\\n--appendonly yes  \\\n--requirepass ******\n```\n\n### 说明\n- --name redis 【容器名】\n- -p 6379:6379 【映射端口】\n- -v /usr/local/app/redis/redis.conf:/etc/redis/redis.conf 【conf文件挂载目录】\n- -v /usr/local/app/redis/data:/data 【data挂载目录】\n- -d redis:5.0 【后台运行镜像】\n- --restart=always 【docker重启后自动启动镜像】\n- redis-server /etc/redis/redis.conf 【在容器执行redis-server启动命令，执行conf文件】\n- --appendonly yes 【持久化】\n- --requirepass \"root\" 【设置密码】\n\n### 补充\n\n- docker exec -it redis bash 【进入容器】\n- redis-cli 【连接】\n- auth root 【登录】\n- set hello world\n- get hello","source":"_posts/Docker中的Redis部署.md","raw":"---\ntitle:  Docker中的Redis部署\ntags: [Redis, Docker]\ncategories: [Docker, Redis, 后端]\ndate: 2022-9-18\n\n---\n\n## 创建Redis的Docker容器\n\n<center>👇直奔主题👇</center>\n\n### shell脚本\n\n```shell\ndocker run \\\n--name myredis \\\n-v /root/redis_docker/mydata/redis/conf/redis.conf:/etc/redis/redis.conf \\\n-v /root/redis_docker/mydata/redis/data:/data \\\n-p 6379:6379 \\\n-d --restart=always redis:5.0 redis-server /etc/redis/redis.conf \\\n--appendonly yes  \\\n--requirepass ******\n```\n\n### 说明\n- --name redis 【容器名】\n- -p 6379:6379 【映射端口】\n- -v /usr/local/app/redis/redis.conf:/etc/redis/redis.conf 【conf文件挂载目录】\n- -v /usr/local/app/redis/data:/data 【data挂载目录】\n- -d redis:5.0 【后台运行镜像】\n- --restart=always 【docker重启后自动启动镜像】\n- redis-server /etc/redis/redis.conf 【在容器执行redis-server启动命令，执行conf文件】\n- --appendonly yes 【持久化】\n- --requirepass \"root\" 【设置密码】\n\n### 补充\n\n- docker exec -it redis bash 【进入容器】\n- redis-cli 【连接】\n- auth root 【登录】\n- set hello world\n- get hello","slug":"Docker中的Redis部署","published":1,"updated":"2022-09-18T12:07:26.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl87ankuh0000yrvwtfxlc9jh","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"创建Redis的Docker容器\"><a href=\"#创建Redis的Docker容器\" class=\"headerlink\" title=\"创建Redis的Docker容器\"></a>创建Redis的Docker容器</h2><center>👇直奔主题👇</center>\n\n<h3 id=\"shell脚本\"><a href=\"#shell脚本\" class=\"headerlink\" title=\"shell脚本\"></a>shell脚本</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">--name myredis \\</span><br><span class=\"line\">-v /root/redis_docker/mydata/redis/conf/redis.conf:/etc/redis/redis.conf \\</span><br><span class=\"line\">-v /root/redis_docker/mydata/redis/data:/data \\</span><br><span class=\"line\">-p 6379:6379 \\</span><br><span class=\"line\">-d --restart=always redis:5.0 redis-server /etc/redis/redis.conf \\</span><br><span class=\"line\">--appendonly yes  \\</span><br><span class=\"line\">--requirepass ******</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li>–name redis 【容器名】</li>\n<li>-p 6379:6379 【映射端口】</li>\n<li>-v /usr/local/app/redis/redis.conf:/etc/redis/redis.conf 【conf文件挂载目录】</li>\n<li>-v /usr/local/app/redis/data:/data 【data挂载目录】</li>\n<li>-d redis:5.0 【后台运行镜像】</li>\n<li>–restart=always 【docker重启后自动启动镜像】</li>\n<li>redis-server /etc/redis/redis.conf 【在容器执行redis-server启动命令，执行conf文件】</li>\n<li>–appendonly yes 【持久化】</li>\n<li>–requirepass “root” 【设置密码】</li>\n</ul>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><ul>\n<li>docker exec -it redis bash 【进入容器】</li>\n<li>redis-cli 【连接】</li>\n<li>auth root 【登录】</li>\n<li>set hello world</li>\n<li>get hello</li>\n</ul>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"category_generator":{"per_page":5},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h2 id=\"创建Redis的Docker容器\"><a href=\"#创建Redis的Docker容器\" class=\"headerlink\" title=\"创建Redis的Docker容器\"></a>创建Redis的Docker容器</h2><center>👇直奔主题👇</center>\n\n<h3 id=\"shell脚本\"><a href=\"#shell脚本\" class=\"headerlink\" title=\"shell脚本\"></a>shell脚本</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">--name myredis \\</span><br><span class=\"line\">-v /root/redis_docker/mydata/redis/conf/redis.conf:/etc/redis/redis.conf \\</span><br><span class=\"line\">-v /root/redis_docker/mydata/redis/data:/data \\</span><br><span class=\"line\">-p 6379:6379 \\</span><br><span class=\"line\">-d --restart=always redis:5.0 redis-server /etc/redis/redis.conf \\</span><br><span class=\"line\">--appendonly yes  \\</span><br><span class=\"line\">--requirepass ******</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li>–name redis 【容器名】</li>\n<li>-p 6379:6379 【映射端口】</li>\n<li>-v /usr/local/app/redis/redis.conf:/etc/redis/redis.conf 【conf文件挂载目录】</li>\n<li>-v /usr/local/app/redis/data:/data 【data挂载目录】</li>\n<li>-d redis:5.0 【后台运行镜像】</li>\n<li>–restart=always 【docker重启后自动启动镜像】</li>\n<li>redis-server /etc/redis/redis.conf 【在容器执行redis-server启动命令，执行conf文件】</li>\n<li>–appendonly yes 【持久化】</li>\n<li>–requirepass “root” 【设置密码】</li>\n</ul>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><ul>\n<li>docker exec -it redis bash 【进入容器】</li>\n<li>redis-cli 【连接】</li>\n<li>auth root 【登录】</li>\n<li>set hello world</li>\n<li>get hello</li>\n</ul>\n"},{"title":"代理模式","date":"2022-09-18T16:00:00.000Z","_content":"\n## 代理模式\n\n在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。\n在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。\n\n### 介绍\n\n- **意图**：为其他对象提供一种代理以控制对这个对象的访问。\n\n- **主要解决**：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。\n\n- **何时使用**：想在访问一个类时做一些控制。\n\n## 实现\n这里将创建一个 Image 接口和实现了 Image 接口的实体类。ProxyImage 是一个代理类，减少 RealImage 对象加载的内存占用。\n\nProxyPatternDemo 类使用 ProxyImage 来获取要加载的 Image 对象，并按照需求进行显示。\n\n![](https://s1.ax1x.com/2022/09/19/x9x6tf.jpg)\n\n### 步骤一：创建接口\n```java\n//Image.java\npublic interface Image {\n   void display();\n}\n```\n### 步骤二：创建实现类\n```java\n//RealImage.java\npublic class RealImage implements Image {\n \n   private String fileName;\n \n   public RealImage(String fileName){\n      this.fileName = fileName;\n      loadFromDisk(fileName);\n   }\n \n   @Override\n   public void display() {\n      System.out.println(\"Displaying \" + fileName);\n   }\n \n   private void loadFromDisk(String fileName){\n      System.out.println(\"Loading \" + fileName);\n   }\n}\n```\n```java\n//ProxyImage.java\npublic class ProxyImage implements Image{\n \n   private RealImage realImage;\n   private String fileName;\n \n   public ProxyImage(String fileName){\n      this.fileName = fileName;\n   }\n \n   @Override\n   public void display() {\n      if(realImage == null){\n         realImage = new RealImage(fileName);\n      }\n      realImage.display();\n   }\n}\n```\n### 步骤三： 测试类\n```java\n//Test.java\npublic class Test {\n   \n   public static void main(String[] args) {\n      Image image = new ProxyImage(\"test_10mb.jpg\");\n \n      // 图像将从磁盘加载\n      image.display(); \n      System.out.println(\"\");\n      // 图像不需要从磁盘加载\n      image.display();  \n   }\n}\n```\n","source":"_posts/代理模式.md","raw":"---\ntitle:  代理模式\ntags: [Java, 设计模式, 代理模式]\ncategories: [设计模式]\ndate: 2022-9-19\n\n---\n\n## 代理模式\n\n在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。\n在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。\n\n### 介绍\n\n- **意图**：为其他对象提供一种代理以控制对这个对象的访问。\n\n- **主要解决**：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。\n\n- **何时使用**：想在访问一个类时做一些控制。\n\n## 实现\n这里将创建一个 Image 接口和实现了 Image 接口的实体类。ProxyImage 是一个代理类，减少 RealImage 对象加载的内存占用。\n\nProxyPatternDemo 类使用 ProxyImage 来获取要加载的 Image 对象，并按照需求进行显示。\n\n![](https://s1.ax1x.com/2022/09/19/x9x6tf.jpg)\n\n### 步骤一：创建接口\n```java\n//Image.java\npublic interface Image {\n   void display();\n}\n```\n### 步骤二：创建实现类\n```java\n//RealImage.java\npublic class RealImage implements Image {\n \n   private String fileName;\n \n   public RealImage(String fileName){\n      this.fileName = fileName;\n      loadFromDisk(fileName);\n   }\n \n   @Override\n   public void display() {\n      System.out.println(\"Displaying \" + fileName);\n   }\n \n   private void loadFromDisk(String fileName){\n      System.out.println(\"Loading \" + fileName);\n   }\n}\n```\n```java\n//ProxyImage.java\npublic class ProxyImage implements Image{\n \n   private RealImage realImage;\n   private String fileName;\n \n   public ProxyImage(String fileName){\n      this.fileName = fileName;\n   }\n \n   @Override\n   public void display() {\n      if(realImage == null){\n         realImage = new RealImage(fileName);\n      }\n      realImage.display();\n   }\n}\n```\n### 步骤三： 测试类\n```java\n//Test.java\npublic class Test {\n   \n   public static void main(String[] args) {\n      Image image = new ProxyImage(\"test_10mb.jpg\");\n \n      // 图像将从磁盘加载\n      image.display(); \n      System.out.println(\"\");\n      // 图像不需要从磁盘加载\n      image.display();  \n   }\n}\n```\n","slug":"代理模式","published":1,"updated":"2022-09-19T13:45:07.913Z","_id":"cl88tjl5c0000mjvw1odrsf46","comments":1,"layout":"post","photos":[],"link":"","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2><p>在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。<br>在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。</p>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><ul>\n<li><p><strong>意图</strong>：为其他对象提供一种代理以控制对这个对象的访问。</p>\n</li>\n<li><p><strong>主要解决</strong>：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。</p>\n</li>\n<li><p><strong>何时使用</strong>：想在访问一个类时做一些控制。</p>\n</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>这里将创建一个 Image 接口和实现了 Image 接口的实体类。ProxyImage 是一个代理类，减少 RealImage 对象加载的内存占用。</p>\n<p>ProxyPatternDemo 类使用 ProxyImage 来获取要加载的 Image 对象，并按照需求进行显示。</p>\n<p><img src=\"https://s1.ax1x.com/2022/09/19/x9x6tf.jpg\" alt></p>\n<h3 id=\"步骤一：创建接口\"><a href=\"#步骤一：创建接口\" class=\"headerlink\" title=\"步骤一：创建接口\"></a>步骤一：创建接口</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Image.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Image</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤二：创建实现类\"><a href=\"#步骤二：创建实现类\" class=\"headerlink\" title=\"步骤二：创建实现类\"></a>步骤二：创建实现类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//RealImage.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealImage</span> <span class=\"keyword\">implements</span> <span class=\"title\">Image</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">private</span> String fileName;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RealImage</span><span class=\"params\">(String fileName)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.fileName = fileName;</span><br><span class=\"line\">      loadFromDisk(fileName);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Displaying \"</span> + fileName);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">loadFromDisk</span><span class=\"params\">(String fileName)</span></span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Loading \"</span> + fileName);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ProxyImage.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyImage</span> <span class=\"keyword\">implements</span> <span class=\"title\">Image</span></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">private</span> RealImage realImage;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String fileName;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProxyImage</span><span class=\"params\">(String fileName)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.fileName = fileName;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(realImage == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">         realImage = <span class=\"keyword\">new</span> RealImage(fileName);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      realImage.display();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤三：-测试类\"><a href=\"#步骤三：-测试类\" class=\"headerlink\" title=\"步骤三： 测试类\"></a>步骤三： 测试类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Test.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      Image image = <span class=\"keyword\">new</span> ProxyImage(<span class=\"string\">\"test_10mb.jpg\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 图像将从磁盘加载</span></span><br><span class=\"line\">      image.display(); </span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 图像不需要从磁盘加载</span></span><br><span class=\"line\">      image.display();  </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2><p>在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。<br>在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。</p>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><ul>\n<li><p><strong>意图</strong>：为其他对象提供一种代理以控制对这个对象的访问。</p>\n</li>\n<li><p><strong>主要解决</strong>：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。</p>\n</li>\n<li><p><strong>何时使用</strong>：想在访问一个类时做一些控制。</p>\n</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>这里将创建一个 Image 接口和实现了 Image 接口的实体类。ProxyImage 是一个代理类，减少 RealImage 对象加载的内存占用。</p>\n<p>ProxyPatternDemo 类使用 ProxyImage 来获取要加载的 Image 对象，并按照需求进行显示。</p>\n<p><img src=\"https://s1.ax1x.com/2022/09/19/x9x6tf.jpg\" alt></p>\n<h3 id=\"步骤一：创建接口\"><a href=\"#步骤一：创建接口\" class=\"headerlink\" title=\"步骤一：创建接口\"></a>步骤一：创建接口</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Image.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Image</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤二：创建实现类\"><a href=\"#步骤二：创建实现类\" class=\"headerlink\" title=\"步骤二：创建实现类\"></a>步骤二：创建实现类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//RealImage.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealImage</span> <span class=\"keyword\">implements</span> <span class=\"title\">Image</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">private</span> String fileName;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RealImage</span><span class=\"params\">(String fileName)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.fileName = fileName;</span><br><span class=\"line\">      loadFromDisk(fileName);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Displaying \"</span> + fileName);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">loadFromDisk</span><span class=\"params\">(String fileName)</span></span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Loading \"</span> + fileName);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ProxyImage.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyImage</span> <span class=\"keyword\">implements</span> <span class=\"title\">Image</span></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">private</span> RealImage realImage;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String fileName;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProxyImage</span><span class=\"params\">(String fileName)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.fileName = fileName;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(realImage == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">         realImage = <span class=\"keyword\">new</span> RealImage(fileName);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      realImage.display();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤三：-测试类\"><a href=\"#步骤三：-测试类\" class=\"headerlink\" title=\"步骤三： 测试类\"></a>步骤三： 测试类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Test.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      Image image = <span class=\"keyword\">new</span> ProxyImage(<span class=\"string\">\"test_10mb.jpg\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 图像将从磁盘加载</span></span><br><span class=\"line\">      image.display(); </span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 图像不需要从磁盘加载</span></span><br><span class=\"line\">      image.display();  </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Mysql主从复制————基于Docker的实现","date":"2022-09-20T16:00:00.000Z","_content":"\n## 主库\n\n**主库采用远程服务器中安装的Mysql 8.0.26**\n### Step1 修改配置文件\n\nvi打开/etc/my.cnf写入👇\n\n```\nlog-bin=mysql-bin   #[必须]启用二进制日志\nserver-id=100       #[必须]配置服务器ID，可自定\n```\n\n### Step2 重启Mysql服务\n\n```\nsystemctl restart mysqld\n```\n\n### Step3 创建从库用户并授权\n\n```\ncreate user ‘#userName’@’#host’ identified by ‘#passWord’;\n```\n- **#userName** 代表你要创建的此数据库的新用户账号\n- **#host** 代表访问权限，如下：\n  - **%** 代表通配所有host地址权限(可远程访问)\n  - **localhost** 为本地权限(不可远程访问)\n  - 指定特殊Ip访问权限 如10.138.106.102\n\n```\ngrant all privileges on *.* to '#userName'@'#host';\nflush privileges;\n```\n\n### 查看并记录主库状态\n\n```\nshow master status;\n```\n记录下**File**和**Position**\n\n## 从库\n\n从库使用了Docker\n\n### 创建容器并挂在数据卷\nvi打开/etc/my.cnf写入👇\n```\ndocker run -id \\\n-p 3307:3306 \\\n--name=c_mysql \\\n-v $PWD/conf:/etc/mysql \\\n-v $PWD/logs:/logs \\\n-v $PWD/mysql-files:/var/lib/mysql-files \\\n-e MYSQL_ROOT_PASSWORD=**** \\\nmysql:8.0.26\n```\n\n### 修改从库配置文件\nvi打开$PWD/conf/my.cnf文件添加👇\n```\n[mysqld]\n## 设置serverid,同一个局域网内要唯一\nserver_id=101\n##指定不需要同步的数据库名称\nbinlog-ignore-db=mysql\n##开启二进制日志功能\nlog-bin=mall-mysql-slave1-bin\n##设置二进制日志使用内存大小(事务)\nbinlog_cache_size=1M\n##设置使用的二进制日志格式\nbinlog_format=mixed\n##二进制日志过期清理时间\nexpire_logs_days=7\n##跳过主从复制中所有错误或指定类型的错误，避免slave端复制中断\n###1062主键重复，1032主重数据不一致\nslave_skip_errors=1062\n##配置中继日志\nrelay_log=mall-mysql-relay-bin\n##表示slave将复制事件写进自己的二进制日志\nlog_slave_updates=1\n##slave设置为只读\nread_only=1\n```\n\n### 重启Docker容器\n\n### 开启从库Slave模式\n进入容器Bash后登录数据库，执行👇\n```\nchange master to master_host='****', master_user='slave', master_password='****', master_port=3306, master_log_file='mysql-bin.000004', master_log_pos=156;\n```\n\n- master_log_file 参考主库状态的**File**\n- master_log_pos 参考主库状态的**Position**\n\n```\nstart slave;\n```\n\n查看是否开启\n```\nshow slave status;\n```","source":"_posts/Mysql主从复制基于Docker的实现.md","raw":"---\ntitle:  Mysql主从复制————基于Docker的实现\ntags: [Mysql, Docker, 数据库, 后端]\ncategories: [数据库]\ndate: 2022-9-21\n\n---\n\n## 主库\n\n**主库采用远程服务器中安装的Mysql 8.0.26**\n### Step1 修改配置文件\n\nvi打开/etc/my.cnf写入👇\n\n```\nlog-bin=mysql-bin   #[必须]启用二进制日志\nserver-id=100       #[必须]配置服务器ID，可自定\n```\n\n### Step2 重启Mysql服务\n\n```\nsystemctl restart mysqld\n```\n\n### Step3 创建从库用户并授权\n\n```\ncreate user ‘#userName’@’#host’ identified by ‘#passWord’;\n```\n- **#userName** 代表你要创建的此数据库的新用户账号\n- **#host** 代表访问权限，如下：\n  - **%** 代表通配所有host地址权限(可远程访问)\n  - **localhost** 为本地权限(不可远程访问)\n  - 指定特殊Ip访问权限 如10.138.106.102\n\n```\ngrant all privileges on *.* to '#userName'@'#host';\nflush privileges;\n```\n\n### 查看并记录主库状态\n\n```\nshow master status;\n```\n记录下**File**和**Position**\n\n## 从库\n\n从库使用了Docker\n\n### 创建容器并挂在数据卷\nvi打开/etc/my.cnf写入👇\n```\ndocker run -id \\\n-p 3307:3306 \\\n--name=c_mysql \\\n-v $PWD/conf:/etc/mysql \\\n-v $PWD/logs:/logs \\\n-v $PWD/mysql-files:/var/lib/mysql-files \\\n-e MYSQL_ROOT_PASSWORD=**** \\\nmysql:8.0.26\n```\n\n### 修改从库配置文件\nvi打开$PWD/conf/my.cnf文件添加👇\n```\n[mysqld]\n## 设置serverid,同一个局域网内要唯一\nserver_id=101\n##指定不需要同步的数据库名称\nbinlog-ignore-db=mysql\n##开启二进制日志功能\nlog-bin=mall-mysql-slave1-bin\n##设置二进制日志使用内存大小(事务)\nbinlog_cache_size=1M\n##设置使用的二进制日志格式\nbinlog_format=mixed\n##二进制日志过期清理时间\nexpire_logs_days=7\n##跳过主从复制中所有错误或指定类型的错误，避免slave端复制中断\n###1062主键重复，1032主重数据不一致\nslave_skip_errors=1062\n##配置中继日志\nrelay_log=mall-mysql-relay-bin\n##表示slave将复制事件写进自己的二进制日志\nlog_slave_updates=1\n##slave设置为只读\nread_only=1\n```\n\n### 重启Docker容器\n\n### 开启从库Slave模式\n进入容器Bash后登录数据库，执行👇\n```\nchange master to master_host='****', master_user='slave', master_password='****', master_port=3306, master_log_file='mysql-bin.000004', master_log_pos=156;\n```\n\n- master_log_file 参考主库状态的**File**\n- master_log_pos 参考主库状态的**Position**\n\n```\nstart slave;\n```\n\n查看是否开启\n```\nshow slave status;\n```","slug":"Mysql主从复制基于Docker的实现","published":1,"updated":"2022-09-21T12:08:24.254Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8bl0paq0000x3vwcg8mfk9v","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"主库\"><a href=\"#主库\" class=\"headerlink\" title=\"主库\"></a>主库</h2><p><strong>主库采用远程服务器中安装的Mysql 8.0.26</strong></p>\n<h3 id=\"Step1-修改配置文件\"><a href=\"#Step1-修改配置文件\" class=\"headerlink\" title=\"Step1 修改配置文件\"></a>Step1 修改配置文件</h3><p>vi打开/etc/my.cnf写入👇</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log-bin=mysql-bin   #[必须]启用二进制日志</span><br><span class=\"line\">server-id=100       #[必须]配置服务器ID，可自定</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Step2-重启Mysql服务\"><a href=\"#Step2-重启Mysql服务\" class=\"headerlink\" title=\"Step2 重启Mysql服务\"></a>Step2 重启Mysql服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart mysqld</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Step3-创建从库用户并授权\"><a href=\"#Step3-创建从库用户并授权\" class=\"headerlink\" title=\"Step3 创建从库用户并授权\"></a>Step3 创建从库用户并授权</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create user ‘#userName’@’#host’ identified by ‘#passWord’;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>#userName</strong> 代表你要创建的此数据库的新用户账号</li>\n<li><strong>#host</strong> 代表访问权限，如下：<ul>\n<li><strong>%</strong> 代表通配所有host地址权限(可远程访问)</li>\n<li><strong>localhost</strong> 为本地权限(不可远程访问)</li>\n<li>指定特殊Ip访问权限 如10.138.106.102</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant all privileges on *.* to &apos;#userName&apos;@&apos;#host&apos;;</span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看并记录主库状态\"><a href=\"#查看并记录主库状态\" class=\"headerlink\" title=\"查看并记录主库状态\"></a>查看并记录主库状态</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show master status;</span><br></pre></td></tr></table></figure>\n\n<p>记录下<strong>File</strong>和<strong>Position</strong></p>\n<h2 id=\"从库\"><a href=\"#从库\" class=\"headerlink\" title=\"从库\"></a>从库</h2><p>从库使用了Docker</p>\n<h3 id=\"创建容器并挂在数据卷\"><a href=\"#创建容器并挂在数据卷\" class=\"headerlink\" title=\"创建容器并挂在数据卷\"></a>创建容器并挂在数据卷</h3><p>vi打开/etc/my.cnf写入👇</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -id \\</span><br><span class=\"line\">-p 3307:3306 \\</span><br><span class=\"line\">--name=c_mysql \\</span><br><span class=\"line\">-v $PWD/conf:/etc/mysql \\</span><br><span class=\"line\">-v $PWD/logs:/logs \\</span><br><span class=\"line\">-v $PWD/mysql-files:/var/lib/mysql-files \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=**** \\</span><br><span class=\"line\">mysql:8.0.26</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改从库配置文件\"><a href=\"#修改从库配置文件\" class=\"headerlink\" title=\"修改从库配置文件\"></a>修改从库配置文件</h3><p>vi打开$PWD/conf/my.cnf文件添加👇</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">## 设置serverid,同一个局域网内要唯一</span><br><span class=\"line\">server_id=101</span><br><span class=\"line\">##指定不需要同步的数据库名称</span><br><span class=\"line\">binlog-ignore-db=mysql</span><br><span class=\"line\">##开启二进制日志功能</span><br><span class=\"line\">log-bin=mall-mysql-slave1-bin</span><br><span class=\"line\">##设置二进制日志使用内存大小(事务)</span><br><span class=\"line\">binlog_cache_size=1M</span><br><span class=\"line\">##设置使用的二进制日志格式</span><br><span class=\"line\">binlog_format=mixed</span><br><span class=\"line\">##二进制日志过期清理时间</span><br><span class=\"line\">expire_logs_days=7</span><br><span class=\"line\">##跳过主从复制中所有错误或指定类型的错误，避免slave端复制中断</span><br><span class=\"line\">###1062主键重复，1032主重数据不一致</span><br><span class=\"line\">slave_skip_errors=1062</span><br><span class=\"line\">##配置中继日志</span><br><span class=\"line\">relay_log=mall-mysql-relay-bin</span><br><span class=\"line\">##表示slave将复制事件写进自己的二进制日志</span><br><span class=\"line\">log_slave_updates=1</span><br><span class=\"line\">##slave设置为只读</span><br><span class=\"line\">read_only=1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重启Docker容器\"><a href=\"#重启Docker容器\" class=\"headerlink\" title=\"重启Docker容器\"></a>重启Docker容器</h3><h3 id=\"开启从库Slave模式\"><a href=\"#开启从库Slave模式\" class=\"headerlink\" title=\"开启从库Slave模式\"></a>开启从库Slave模式</h3><p>进入容器Bash后登录数据库，执行👇</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">change master to master_host=&apos;****&apos;, master_user=&apos;slave&apos;, master_password=&apos;****&apos;, master_port=3306, master_log_file=&apos;mysql-bin.000004&apos;, master_log_pos=156;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>master_log_file 参考主库状态的<strong>File</strong></li>\n<li>master_log_pos 参考主库状态的<strong>Position</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start slave;</span><br></pre></td></tr></table></figure>\n\n<p>查看是否开启</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show slave status;</span><br></pre></td></tr></table></figure>","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"category_generator":{"per_page":5},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h2 id=\"主库\"><a href=\"#主库\" class=\"headerlink\" title=\"主库\"></a>主库</h2><p><strong>主库采用远程服务器中安装的Mysql 8.0.26</strong></p>\n<h3 id=\"Step1-修改配置文件\"><a href=\"#Step1-修改配置文件\" class=\"headerlink\" title=\"Step1 修改配置文件\"></a>Step1 修改配置文件</h3><p>vi打开/etc/my.cnf写入👇</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log-bin=mysql-bin   #[必须]启用二进制日志</span><br><span class=\"line\">server-id=100       #[必须]配置服务器ID，可自定</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Step2-重启Mysql服务\"><a href=\"#Step2-重启Mysql服务\" class=\"headerlink\" title=\"Step2 重启Mysql服务\"></a>Step2 重启Mysql服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart mysqld</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Step3-创建从库用户并授权\"><a href=\"#Step3-创建从库用户并授权\" class=\"headerlink\" title=\"Step3 创建从库用户并授权\"></a>Step3 创建从库用户并授权</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create user ‘#userName’@’#host’ identified by ‘#passWord’;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>#userName</strong> 代表你要创建的此数据库的新用户账号</li>\n<li><strong>#host</strong> 代表访问权限，如下：<ul>\n<li><strong>%</strong> 代表通配所有host地址权限(可远程访问)</li>\n<li><strong>localhost</strong> 为本地权限(不可远程访问)</li>\n<li>指定特殊Ip访问权限 如10.138.106.102</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant all privileges on *.* to &apos;#userName&apos;@&apos;#host&apos;;</span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看并记录主库状态\"><a href=\"#查看并记录主库状态\" class=\"headerlink\" title=\"查看并记录主库状态\"></a>查看并记录主库状态</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show master status;</span><br></pre></td></tr></table></figure>\n\n<p>记录下<strong>File</strong>和<strong>Position</strong></p>\n<h2 id=\"从库\"><a href=\"#从库\" class=\"headerlink\" title=\"从库\"></a>从库</h2><p>从库使用了Docker</p>\n<h3 id=\"创建容器并挂在数据卷\"><a href=\"#创建容器并挂在数据卷\" class=\"headerlink\" title=\"创建容器并挂在数据卷\"></a>创建容器并挂在数据卷</h3><p>vi打开/etc/my.cnf写入👇</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -id \\</span><br><span class=\"line\">-p 3307:3306 \\</span><br><span class=\"line\">--name=c_mysql \\</span><br><span class=\"line\">-v $PWD/conf:/etc/mysql \\</span><br><span class=\"line\">-v $PWD/logs:/logs \\</span><br><span class=\"line\">-v $PWD/mysql-files:/var/lib/mysql-files \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=**** \\</span><br><span class=\"line\">mysql:8.0.26</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改从库配置文件\"><a href=\"#修改从库配置文件\" class=\"headerlink\" title=\"修改从库配置文件\"></a>修改从库配置文件</h3><p>vi打开$PWD/conf/my.cnf文件添加👇</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">## 设置serverid,同一个局域网内要唯一</span><br><span class=\"line\">server_id=101</span><br><span class=\"line\">##指定不需要同步的数据库名称</span><br><span class=\"line\">binlog-ignore-db=mysql</span><br><span class=\"line\">##开启二进制日志功能</span><br><span class=\"line\">log-bin=mall-mysql-slave1-bin</span><br><span class=\"line\">##设置二进制日志使用内存大小(事务)</span><br><span class=\"line\">binlog_cache_size=1M</span><br><span class=\"line\">##设置使用的二进制日志格式</span><br><span class=\"line\">binlog_format=mixed</span><br><span class=\"line\">##二进制日志过期清理时间</span><br><span class=\"line\">expire_logs_days=7</span><br><span class=\"line\">##跳过主从复制中所有错误或指定类型的错误，避免slave端复制中断</span><br><span class=\"line\">###1062主键重复，1032主重数据不一致</span><br><span class=\"line\">slave_skip_errors=1062</span><br><span class=\"line\">##配置中继日志</span><br><span class=\"line\">relay_log=mall-mysql-relay-bin</span><br><span class=\"line\">##表示slave将复制事件写进自己的二进制日志</span><br><span class=\"line\">log_slave_updates=1</span><br><span class=\"line\">##slave设置为只读</span><br><span class=\"line\">read_only=1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重启Docker容器\"><a href=\"#重启Docker容器\" class=\"headerlink\" title=\"重启Docker容器\"></a>重启Docker容器</h3><h3 id=\"开启从库Slave模式\"><a href=\"#开启从库Slave模式\" class=\"headerlink\" title=\"开启从库Slave模式\"></a>开启从库Slave模式</h3><p>进入容器Bash后登录数据库，执行👇</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">change master to master_host=&apos;****&apos;, master_user=&apos;slave&apos;, master_password=&apos;****&apos;, master_port=3306, master_log_file=&apos;mysql-bin.000004&apos;, master_log_pos=156;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>master_log_file 参考主库状态的<strong>File</strong></li>\n<li>master_log_pos 参考主库状态的<strong>Position</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start slave;</span><br></pre></td></tr></table></figure>\n\n<p>查看是否开启</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show slave status;</span><br></pre></td></tr></table></figure>"},{"title":"JS学习之路--常量","date":"2022-10-17T16:00:00.000Z","_content":"\n## const⛔\n\n- const 修饰的叫常量，只能赋值一次\n\n```javascript\nconst b = 300;\nb = 400 // error\n```\n\n- const 并不意味着它的引用内容不可修改，例如：\n\n```javascript\nconst c = [1,2,3];\nc[2] = 4; // ok\nc = [5,6]; // error\n```","source":"_posts/JS —— 常量.md","raw":"---\ntitle:  JS学习之路--常量\ntags: [编程,学习,JS,前端]\ncategories: [JS]\ndate: 2022-10-18\n\n---\n\n## const⛔\n\n- const 修饰的叫常量，只能赋值一次\n\n```javascript\nconst b = 300;\nb = 400 // error\n```\n\n- const 并不意味着它的引用内容不可修改，例如：\n\n```javascript\nconst c = [1,2,3];\nc[2] = 4; // ok\nc = [5,6]; // error\n```","slug":"JS —— 常量","published":1,"updated":"2022-10-18T01:26:43.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9diz6uk0000k2vw079q1gr9","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"const⛔\"><a href=\"#const⛔\" class=\"headerlink\" title=\"const⛔\"></a>const⛔</h2><ul>\n<li>const 修饰的叫常量，只能赋值一次</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"number\">300</span>;</span><br><span class=\"line\">b = <span class=\"number\">400</span> <span class=\"comment\">// error</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>const 并不意味着它的引用内容不可修改，例如：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> c = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">c[<span class=\"number\">2</span>] = <span class=\"number\">4</span>; <span class=\"comment\">// ok</span></span><br><span class=\"line\">c = [<span class=\"number\">5</span>,<span class=\"number\">6</span>]; <span class=\"comment\">// error</span></span><br></pre></td></tr></table></figure>","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"category_generator":{"per_page":5},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h2 id=\"const⛔\"><a href=\"#const⛔\" class=\"headerlink\" title=\"const⛔\"></a>const⛔</h2><ul>\n<li>const 修饰的叫常量，只能赋值一次</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"number\">300</span>;</span><br><span class=\"line\">b = <span class=\"number\">400</span> <span class=\"comment\">// error</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>const 并不意味着它的引用内容不可修改，例如：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> c = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">c[<span class=\"number\">2</span>] = <span class=\"number\">4</span>; <span class=\"comment\">// ok</span></span><br><span class=\"line\">c = [<span class=\"number\">5</span>,<span class=\"number\">6</span>]; <span class=\"comment\">// error</span></span><br></pre></td></tr></table></figure>"},{"title":"JS学习之路--逻辑或","date":"2022-10-18T16:00:00.000Z","_content":"\n## ||\n\n**关于逻辑或有一点需要声明**\n\n在某些代码中会出现：\n```javascript\nfunction test(n){\n    n = n || '2';\n    console.log(n);\n}\n\ntest('1')   //输出 1\ntest()      //输出 2\n```\n\n它的语法为：\n``` x || y ```\n- 如果 x 是Truthy则返回x\n- 如果 x 是Falsy则返回y\n  \n**但是不推荐这种用法！**\n","source":"_posts/JS----逻辑或.md","raw":"---\ntitle:  JS学习之路--逻辑或\ntags: [编程,学习,JS,前端]\ncategories: [JS]\ndate: 2022-10-19\n\n---\n\n## ||\n\n**关于逻辑或有一点需要声明**\n\n在某些代码中会出现：\n```javascript\nfunction test(n){\n    n = n || '2';\n    console.log(n);\n}\n\ntest('1')   //输出 1\ntest()      //输出 2\n```\n\n它的语法为：\n``` x || y ```\n- 如果 x 是Truthy则返回x\n- 如果 x 是Falsy则返回y\n  \n**但是不推荐这种用法！**\n","slug":"JS----逻辑或","published":1,"updated":"2022-10-19T02:13:51.442Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl9f03g2v0000tpvwzusi7hdy","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id><a href=\"#\" class=\"headerlink\" title=\"||\"></a>||</h2><p><strong>关于逻辑或有一点需要声明</strong></p>\n<p>在某些代码中会出现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    n = n || <span class=\"string\">'2'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'1'</span>)   <span class=\"comment\">//输出 1</span></span><br><span class=\"line\">test()      <span class=\"comment\">//输出 2</span></span><br></pre></td></tr></table></figure>\n\n<p>它的语法为：<br><code>x || y</code></p>\n<ul>\n<li>如果 x 是Truthy则返回x</li>\n<li>如果 x 是Falsy则返回y</li>\n</ul>\n<p><strong>但是不推荐这种用法！</strong></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h2 id><a href=\"#\" class=\"headerlink\" title=\"||\"></a>||</h2><p><strong>关于逻辑或有一点需要声明</strong></p>\n<p>在某些代码中会出现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    n = n || <span class=\"string\">'2'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'1'</span>)   <span class=\"comment\">//输出 1</span></span><br><span class=\"line\">test()      <span class=\"comment\">//输出 2</span></span><br></pre></td></tr></table></figure>\n\n<p>它的语法为：<br><code>x || y</code></p>\n<ul>\n<li>如果 x 是Truthy则返回x</li>\n<li>如果 x 是Falsy则返回y</li>\n</ul>\n<p><strong>但是不推荐这种用法！</strong></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl81jb7k100057svw01ti5knk","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7kr000b7svwxv4eybaq"},{"post_id":"cl81jb7jm00007svwv0elkd6t","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7ku000f7svwn3twn1qr"},{"post_id":"cl81jb7k200067svw19k3huqv","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7l1000h7svwd642eeju"},{"post_id":"cl81jb7ko00097svw21884kdf","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7l3000l7svwru41qr36"},{"post_id":"cl81jb7jv00017svwj5qdb9tg","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7l5000o7svw5upfp0ob"},{"post_id":"cl81jb7kq000a7svw2hwsu70k","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7l6000s7svwkt7hx6dw"},{"post_id":"cl81jb7ks000e7svwe03yk5lf","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7l8000v7svw9ckla0rq"},{"post_id":"cl81jb7jz00047svwf6njxj74","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7la000z7svwwm0jrgpy"},{"post_id":"cl81jb7ku000g7svwpiqpw0h2","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7lb00127svwemm4eu1w"},{"post_id":"cl81jb7l2000k7svw7gvkps2i","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7le00167svw250du3ka"},{"post_id":"cl81jb7l4000n7svwnmuw4i9s","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7lf00197svwjnb7sq5e"},{"post_id":"cl81jb7l6000r7svw6csrdj6g","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7lh001d7svwvaqe7qv5"},{"post_id":"cl81jb7l7000u7svwrkyyj8j4","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7li001g7svw5xipvcbn"},{"post_id":"cl81jb7l9000y7svw8zfmjmi2","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7lk001k7svwvyfdc2wv"},{"post_id":"cl81jb7la00117svwcyewbx63","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7lm001n7svw4wx0s3jo"},{"post_id":"cl81jb7ld00157svwrhuxk805","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7lp001r7svwl0s3jdey"},{"post_id":"cl81jb7lf00187svwzktidy8g","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7lr001u7svwt4ye2thu"},{"post_id":"cl81jb7lg001c7svw3u3825i5","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7lu001y7svw70tqfy5x"},{"post_id":"cl81jb7li001f7svwxqf7syhv","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7lw00217svwqol2xf38"},{"post_id":"cl81jb7lk001j7svwbexdjxmb","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7ly00257svwl3lqglpf"},{"post_id":"cl81jb7ll001m7svwh30ors74","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7m000287svwxijgxenl"},{"post_id":"cl81jb7lo001q7svwdt5vvlef","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7m6002c7svw93ml2zfj"},{"post_id":"cl81jb7lq001t7svws4zv0edb","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7m8002f7svw58avexic"},{"post_id":"cl81jb7lt001x7svwyuldboz5","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7mg002j7svw7ni1oogy"},{"post_id":"cl81jb7lv00207svwk5kd7ubb","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7mh002m7svwyh7ocz19"},{"post_id":"cl81jb7lx00247svw9gq3wqcg","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7mj002q7svw6bhv7f1q"},{"post_id":"cl81jb7ly00277svwfjeycv0t","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7ml002t7svw4kfzyfli"},{"post_id":"cl81jb7m2002b7svwk6fjotk7","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7mn002x7svwqqearqm3"},{"post_id":"cl81jb7m8002e7svwwqgk288e","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7mo00307svww10u9nnz"},{"post_id":"cl81jb7mf002i7svwj9ha5uao","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7mp00337svwd3380kog"},{"post_id":"cl81jb7mg002l7svw6erkgnrm","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7mr00367svwj1rb5jty"},{"post_id":"cl81jb7mj002p7svwjtgk0b92","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7ms00397svw72ufifjq"},{"post_id":"cl81jb7mk002s7svwckwvelwf","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7mt003c7svwa01o53eq"},{"post_id":"cl81jb7mm002w7svwy2bv8ygp","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7mu003f7svw8b55ljdt"},{"post_id":"cl81jb7mn002z7svw23e4hdk8","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7mv003j7svwpxnhm8m5"},{"post_id":"cl81jb7mo00327svw0b5zgpf4","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7mw003l7svwl9lg81ga"},{"post_id":"cl81jb7mq00357svwwsyy8wlx","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7mw003n7svway9ogqcc"},{"post_id":"cl81jb7mr00387svwkv1n2nkv","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7mw003p7svw7gf0lza1"},{"post_id":"cl81jb7mu003e7svwjki7vkjh","category_id":"cl81jb7jx00027svw7bvxw53o","_id":"cl81jb7mx003r7svwu65fms2j"},{"post_id":"cl81jb7ms003b7svwmb4qhd2o","category_id":"cl81jb7mv003g7svwz5l4bsiy","_id":"cl81jb7mx003t7svw0oidb7re"},{"post_id":"cl81jb9za006e7svw2fbtqe41","category_id":"cl81jb9z6006b7svw7cwbw04i","_id":"cl81jb9zh006k7svwd2ar6qbl"},{"post_id":"cl81jb9z100677svwqxhd6jy4","category_id":"cl81jb9z6006b7svw7cwbw04i","_id":"cl81jb9zn006o7svwmr3q4bs1"},{"post_id":"cl81jb9z400697svw5rwslhy9","category_id":"cl81jb9zd006g7svwd9354hxa","_id":"cl81jb9zq006s7svw6ml6u8nq"},{"post_id":"cl81jb9zb006f7svw76y2333y","category_id":"cl81jb9zi006l7svwz63zwv3h","_id":"cl81jba05006x7svwemaxzhan"},{"post_id":"cl81jb9zp006q7svwx2cf8qoo","category_id":"cl81jb9zd006g7svwd9354hxa","_id":"cl81jba0800717svwk59o63dk"},{"post_id":"cl81jba02006v7svwyad4k3o0","category_id":"cl81jb9z6006b7svw7cwbw04i","_id":"cl81jba0a00737svwhia051hw"},{"post_id":"cl81jb9zf006i7svwnpze4pl7","category_id":"cl81jba01006t7svwc3n4guce","_id":"cl81jba0c00777svw7qwns35t"},{"post_id":"cl81jb9zg006j7svw62t085yi","category_id":"cl81jba01006t7svwc3n4guce","_id":"cl81jba0i00797svwphi8c5eo"},{"post_id":"cl81jb9zm006n7svwbazhwa2h","category_id":"cl81jba0a00747svw22bg8yi9","_id":"cl81jba0o007g7svwd9gmveyb"},{"post_id":"cl81jba04006w7svwpflyyaxl","category_id":"cl81jba0j007b7svwuryou69d","_id":"cl81jba14007p7svwpeeis2si"},{"post_id":"cl81jba0700707svwd6o4zosa","category_id":"cl81jba0a00747svw22bg8yi9","_id":"cl81jba17007t7svwci4rol9d"},{"post_id":"cl81jba15007r7svw7q9b4u7s","category_id":"cl81jba14007o7svwa1cfhcy6","_id":"cl81jba18007w7svwapwhczi2"},{"post_id":"cl81jba0900727svwb4z3ua4o","category_id":"cl81jba14007o7svwa1cfhcy6","_id":"cl81jba18007y7svw1qookp49"},{"post_id":"cl81jba16007s7svwzovxxmzs","category_id":"cl81jba14007o7svwa1cfhcy6","_id":"cl81jba1900807svw20r6tboq"},{"post_id":"cl81jba0a00757svwtjet92x9","category_id":"cl81jba17007u7svw3zm8ehzz","_id":"cl81jba1a00837svwvqtiwcgj"},{"post_id":"cl81jba0c00787svwgv35pzxx","category_id":"cl81jba17007u7svw3zm8ehzz","_id":"cl81jba1b00887svwpef2wqlb"},{"post_id":"cl81jba0j007a7svwml0j1w70","category_id":"cl81jba17007u7svw3zm8ehzz","_id":"cl81jba1c008d7svwsezxh7iz"},{"post_id":"cl81jba0k007d7svwl9qu8ver","category_id":"cl81jba17007u7svw3zm8ehzz","_id":"cl81jba1e008h7svwl5ucnciu"},{"post_id":"cl81jba0o007f7svwhcdqq93b","category_id":"cl81jba14007o7svwa1cfhcy6","_id":"cl81jba1l008l7svwcyii5i2l"},{"post_id":"cl81jba12007k7svwjmdxajyp","category_id":"cl81jba1e008g7svwdqvs052y","_id":"cl81jba1n008p7svwxfzfsojf"},{"post_id":"cl81jba13007m7svw5nlo0fab","category_id":"cl81jba14007o7svwa1cfhcy6","_id":"cl81jba1o008s7svwulj6nu0n"},{"post_id":"cl81jba2i00ar7svwierdktmz","category_id":"cl81jba1e008g7svwdqvs052y","_id":"cl81jba2k00aw7svw77u2p436"},{"post_id":"cl81jba2h00ap7svw0n9smx5i","category_id":"cl81jba2j00as7svw558osppn","_id":"cl81jba2l00ay7svwyq287jra"},{"post_id":"cl81jba3a00b27svwbsrdloat","category_id":"cl81jba17007u7svw3zm8ehzz","_id":"cl81jba3c00b47svwyw99q8au"},{"post_id":"cl84kbhzn0000awvwdpo88di0","category_id":"cl84kbhzu0001awvwvuemucbm","_id":"cl84kbi0v0004awvw4aa09z80"},{"post_id":"cl87ankuh0000yrvwtfxlc9jh","category_id":"cl87ankus0001yrvwv36j07gx","_id":"cl87ankvx0008yrvwnksrd6pq"},{"post_id":"cl87ankuh0000yrvwtfxlc9jh","category_id":"cl87ankvr0004yrvwth5hxk8c","_id":"cl87ankvx0009yrvw7dmwbkfw"},{"post_id":"cl87ankuh0000yrvwtfxlc9jh","category_id":"cl87ankvv0007yrvwswzol0ub","_id":"cl87ankvx000ayrvwwa4wk8km"},{"post_id":"cl88tjl5c0000mjvw1odrsf46","category_id":"cl88tjl5l0001mjvwo4cebbaf","_id":"cl88tjl6n0004mjvwljemao8m"},{"post_id":"cl8bl0paq0000x3vwcg8mfk9v","category_id":"cl8bl0pb00001x3vwtshe50lb","_id":"cl8bl0pc30005x3vwbc7kzst6"},{"post_id":"cl9diz6uk0000k2vw079q1gr9","category_id":"cl9diz6up0001k2vwi8n2vcaa","_id":"cl9diz6vl0004k2vwqce9sudd"},{"post_id":"cl9f03g2v0000tpvwzusi7hdy","category_id":"cl9diz6up0001k2vwi8n2vcaa","_id":"cl9f03g320003tpvweb2rduyc"}],"PostTag":[{"post_id":"cl81jb7ks000e7svwe03yk5lf","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7l2000j7svwg2tgi85w"},{"post_id":"cl81jb7ks000e7svwe03yk5lf","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7l4000m7svwc679b6r9"},{"post_id":"cl81jb7ks000e7svwe03yk5lf","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7l5000q7svwpfl0kylb"},{"post_id":"cl81jb7jm00007svwv0elkd6t","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7l7000t7svw8q0jf9dk"},{"post_id":"cl81jb7jm00007svwv0elkd6t","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7l9000x7svwseefgcy6"},{"post_id":"cl81jb7jm00007svwv0elkd6t","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7la00107svwi6pq5alc"},{"post_id":"cl81jb7ku000g7svwpiqpw0h2","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7lc00147svwrqth3u6n"},{"post_id":"cl81jb7ku000g7svwpiqpw0h2","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7le00177svw1y6fnfc4"},{"post_id":"cl81jb7ku000g7svwpiqpw0h2","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7lg001b7svwarlphni2"},{"post_id":"cl81jb7l2000k7svw7gvkps2i","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7li001e7svwn3a40669"},{"post_id":"cl81jb7l2000k7svw7gvkps2i","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7lj001i7svwqmmef82z"},{"post_id":"cl81jb7l2000k7svw7gvkps2i","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7ll001l7svwidooe8lx"},{"post_id":"cl81jb7l4000n7svwnmuw4i9s","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7lo001p7svw1y66zl5w"},{"post_id":"cl81jb7l4000n7svwnmuw4i9s","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7lp001s7svwpugiz9vx"},{"post_id":"cl81jb7l4000n7svwnmuw4i9s","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7lt001w7svwalsq4mwp"},{"post_id":"cl81jb7l6000r7svw6csrdj6g","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7lv001z7svwf4jaky67"},{"post_id":"cl81jb7l6000r7svw6csrdj6g","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7lw00237svwm5d528xe"},{"post_id":"cl81jb7l6000r7svw6csrdj6g","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7ly00267svw1zv8scbd"},{"post_id":"cl81jb7l7000u7svwrkyyj8j4","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7m0002a7svwjy0hkvfn"},{"post_id":"cl81jb7l7000u7svwrkyyj8j4","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7m7002d7svws9x9tfoi"},{"post_id":"cl81jb7l7000u7svwrkyyj8j4","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7m9002h7svwpadbnjxr"},{"post_id":"cl81jb7l9000y7svw8zfmjmi2","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7mg002k7svwfeetym9l"},{"post_id":"cl81jb7l9000y7svw8zfmjmi2","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7mi002o7svwucm3hhrx"},{"post_id":"cl81jb7l9000y7svw8zfmjmi2","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7mk002r7svwh8n03dbj"},{"post_id":"cl81jb7jv00017svwj5qdb9tg","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7mm002v7svwlpmqxqxf"},{"post_id":"cl81jb7jv00017svwj5qdb9tg","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7mn002y7svwqhfexmj0"},{"post_id":"cl81jb7jv00017svwj5qdb9tg","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7mo00317svwqz5hq9ya"},{"post_id":"cl81jb7la00117svwcyewbx63","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7mq00347svwk2it9v2d"},{"post_id":"cl81jb7la00117svwcyewbx63","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7mr00377svwf0sk66o4"},{"post_id":"cl81jb7la00117svwcyewbx63","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7ms003a7svw4rybxrmf"},{"post_id":"cl81jb7ld00157svwrhuxk805","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7mu003d7svwslj598vw"},{"post_id":"cl81jb7ld00157svwrhuxk805","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7mv003i7svweav38y0y"},{"post_id":"cl81jb7ld00157svwrhuxk805","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7mw003k7svwhcyxtkqv"},{"post_id":"cl81jb7lf00187svwzktidy8g","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7mw003m7svwcfs4t67z"},{"post_id":"cl81jb7lf00187svwzktidy8g","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7mw003o7svwj1wxfui5"},{"post_id":"cl81jb7lf00187svwzktidy8g","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7mw003q7svw29zlwb3c"},{"post_id":"cl81jb7lg001c7svw3u3825i5","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7mx003s7svwxvglrdvq"},{"post_id":"cl81jb7lg001c7svw3u3825i5","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7mx003u7svwikvw05tj"},{"post_id":"cl81jb7lg001c7svw3u3825i5","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7mx003v7svw7nmgyxhz"},{"post_id":"cl81jb7li001f7svwxqf7syhv","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7mx003w7svwm7qb35tv"},{"post_id":"cl81jb7li001f7svwxqf7syhv","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7mx003x7svwu1xo5ai6"},{"post_id":"cl81jb7li001f7svwxqf7syhv","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7mx003y7svwg55o8pxd"},{"post_id":"cl81jb7lk001j7svwbexdjxmb","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7mx003z7svw308v89w7"},{"post_id":"cl81jb7lk001j7svwbexdjxmb","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7mx00407svw01jhmn0c"},{"post_id":"cl81jb7lk001j7svwbexdjxmb","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7mx00417svwqqr8chbw"},{"post_id":"cl81jb7jz00047svwf6njxj74","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7mx00427svwrmwrkqlq"},{"post_id":"cl81jb7jz00047svwf6njxj74","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7mx00437svw3mixjp2z"},{"post_id":"cl81jb7jz00047svwf6njxj74","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7mx00447svwl6chfir4"},{"post_id":"cl81jb7ll001m7svwh30ors74","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7mx00457svwx4logp4q"},{"post_id":"cl81jb7ll001m7svwh30ors74","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7my00467svwc1uuio59"},{"post_id":"cl81jb7ll001m7svwh30ors74","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7my00477svwabl3vosw"},{"post_id":"cl81jb7lo001q7svwdt5vvlef","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7my00487svw71hgjsi7"},{"post_id":"cl81jb7lo001q7svwdt5vvlef","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7my00497svwvl9dez40"},{"post_id":"cl81jb7lo001q7svwdt5vvlef","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7my004a7svw256btu8q"},{"post_id":"cl81jb7lq001t7svws4zv0edb","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7my004b7svwjtnb2m9h"},{"post_id":"cl81jb7lq001t7svws4zv0edb","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7my004c7svwfyqylb9v"},{"post_id":"cl81jb7lq001t7svws4zv0edb","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7my004d7svwoyxpc1ze"},{"post_id":"cl81jb7lt001x7svwyuldboz5","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7my004e7svwcjcocss4"},{"post_id":"cl81jb7lt001x7svwyuldboz5","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7mz004f7svwrmq49og0"},{"post_id":"cl81jb7lt001x7svwyuldboz5","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7mz004g7svwjnscxpes"},{"post_id":"cl81jb7k100057svw01ti5knk","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7mz004h7svwuf0pcf6x"},{"post_id":"cl81jb7k100057svw01ti5knk","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7n0004i7svw0u5a9a1i"},{"post_id":"cl81jb7k100057svw01ti5knk","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7n0004j7svwamf9zivk"},{"post_id":"cl81jb7lv00207svwk5kd7ubb","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7n0004k7svw7xdgnj2d"},{"post_id":"cl81jb7lv00207svwk5kd7ubb","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7n0004l7svwnps557oy"},{"post_id":"cl81jb7lv00207svwk5kd7ubb","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7n0004m7svw73cbzd7v"},{"post_id":"cl81jb7lx00247svw9gq3wqcg","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7n0004n7svwr73rzlt9"},{"post_id":"cl81jb7lx00247svw9gq3wqcg","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7n0004o7svwqsq6bvd2"},{"post_id":"cl81jb7lx00247svw9gq3wqcg","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7n0004p7svwsf3qbvk4"},{"post_id":"cl81jb7ly00277svwfjeycv0t","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7n0004q7svw7blcs3ad"},{"post_id":"cl81jb7ly00277svwfjeycv0t","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7n0004r7svwzu7mv23f"},{"post_id":"cl81jb7ly00277svwfjeycv0t","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7n0004s7svwsya9eak4"},{"post_id":"cl81jb7m2002b7svwk6fjotk7","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7n0004t7svwre3jes3r"},{"post_id":"cl81jb7m2002b7svwk6fjotk7","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7n0004u7svwzb7bmyn3"},{"post_id":"cl81jb7m2002b7svwk6fjotk7","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7n0004v7svwvzpk0x6u"},{"post_id":"cl81jb7k200067svw19k3huqv","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7n1004w7svwmi78bplo"},{"post_id":"cl81jb7k200067svw19k3huqv","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7n1004x7svwjfoktl1z"},{"post_id":"cl81jb7k200067svw19k3huqv","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7n1004y7svwhbb95uac"},{"post_id":"cl81jb7m8002e7svwwqgk288e","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7n1004z7svwvmgur0et"},{"post_id":"cl81jb7m8002e7svwwqgk288e","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7n100507svw50u0cmh7"},{"post_id":"cl81jb7m8002e7svwwqgk288e","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7n100517svw40bssf4p"},{"post_id":"cl81jb7mf002i7svwj9ha5uao","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7n100527svwh4sc21bp"},{"post_id":"cl81jb7mf002i7svwj9ha5uao","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7n100537svwf04u1bxc"},{"post_id":"cl81jb7mf002i7svwj9ha5uao","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7n100547svwl89rd2zf"},{"post_id":"cl81jb7ko00097svw21884kdf","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7n200557svwquq4iajy"},{"post_id":"cl81jb7ko00097svw21884kdf","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7n200567svwibtvwvjf"},{"post_id":"cl81jb7ko00097svw21884kdf","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7n200577svwvfv1jsgj"},{"post_id":"cl81jb7mj002p7svwjtgk0b92","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7n200587svw4wt9m0c7"},{"post_id":"cl81jb7mj002p7svwjtgk0b92","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7n200597svwqh4lfxmf"},{"post_id":"cl81jb7mj002p7svwjtgk0b92","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7n2005a7svww5kgsh47"},{"post_id":"cl81jb7kq000a7svw2hwsu70k","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7n2005b7svwjlb45n6v"},{"post_id":"cl81jb7kq000a7svw2hwsu70k","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7n2005c7svwcvo2z1oq"},{"post_id":"cl81jb7kq000a7svw2hwsu70k","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7n2005d7svw7544b197"},{"post_id":"cl81jb7mk002s7svwckwvelwf","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7n2005e7svw8481ie1d"},{"post_id":"cl81jb7mk002s7svwckwvelwf","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7n2005f7svwxyo8y2mw"},{"post_id":"cl81jb7mk002s7svwckwvelwf","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7n2005g7svwgxe2wikh"},{"post_id":"cl81jb7mm002w7svwy2bv8ygp","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7n2005h7svwq3a7potw"},{"post_id":"cl81jb7mm002w7svwy2bv8ygp","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7n3005i7svwbzrq3xbj"},{"post_id":"cl81jb7mm002w7svwy2bv8ygp","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7n3005j7svwovahp89c"},{"post_id":"cl81jb7mg002l7svw6erkgnrm","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7n3005k7svwqyqjuz9c"},{"post_id":"cl81jb7mg002l7svw6erkgnrm","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7n3005l7svwa4ejmgrj"},{"post_id":"cl81jb7mg002l7svw6erkgnrm","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7n3005m7svwp56ri5j2"},{"post_id":"cl81jb7mg002l7svw6erkgnrm","tag_id":"cl81jb7ml002u7svwurhs52c9","_id":"cl81jb7n3005n7svwha582q8r"},{"post_id":"cl81jb7mn002z7svw23e4hdk8","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7n3005o7svw9kvv6ezc"},{"post_id":"cl81jb7mn002z7svw23e4hdk8","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7n3005p7svwwavlbfzt"},{"post_id":"cl81jb7mn002z7svw23e4hdk8","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7n3005q7svwn78seaop"},{"post_id":"cl81jb7mo00327svw0b5zgpf4","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7n3005r7svwgvftra8w"},{"post_id":"cl81jb7mo00327svw0b5zgpf4","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7n3005s7svwjj0k4hzz"},{"post_id":"cl81jb7mo00327svw0b5zgpf4","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7n3005t7svwlewh7utq"},{"post_id":"cl81jb7mq00357svwwsyy8wlx","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7n3005u7svwymu4p40n"},{"post_id":"cl81jb7mq00357svwwsyy8wlx","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7n3005v7svw8oe6fws0"},{"post_id":"cl81jb7mq00357svwwsyy8wlx","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7n3005w7svwu32l5zyw"},{"post_id":"cl81jb7mr00387svwkv1n2nkv","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7n4005x7svwtysuq330"},{"post_id":"cl81jb7mr00387svwkv1n2nkv","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7n4005y7svwjnfhdsqb"},{"post_id":"cl81jb7mr00387svwkv1n2nkv","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7n4005z7svwjj9cvu8p"},{"post_id":"cl81jb7mu003e7svwjki7vkjh","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7n400607svw60p2o7da"},{"post_id":"cl81jb7mu003e7svwjki7vkjh","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7n400617svw1e9h6lx8"},{"post_id":"cl81jb7mu003e7svwjki7vkjh","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7n400627svw2quwsi34"},{"post_id":"cl81jb7ms003b7svwmb4qhd2o","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jb7n400637svw6ujvszck"},{"post_id":"cl81jb7ms003b7svwmb4qhd2o","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jb7n400647svw8dhsfo3u"},{"post_id":"cl81jb7ms003b7svwmb4qhd2o","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jb7n400657svwrs9q2pig"},{"post_id":"cl81jb7ms003b7svwmb4qhd2o","tag_id":"cl81jb7mv003h7svwlks6ev8s","_id":"cl81jb7n400667svwlp2tem4i"},{"post_id":"cl81jb9z100677svwqxhd6jy4","tag_id":"cl81jb9z7006c7svwofwhn1m5","_id":"cl81jb9zn006p7svwf91xrbak"},{"post_id":"cl81jb9z100677svwqxhd6jy4","tag_id":"cl81jb9ze006h7svwo0g8q7z7","_id":"cl81jb9zq006r7svwt41bu7za"},{"post_id":"cl81jb9z400697svw5rwslhy9","tag_id":"cl81jb9zi006m7svwz2bdt3m0","_id":"cl81jba0l007e7svwr8wh6ru7"},{"post_id":"cl81jb9z400697svw5rwslhy9","tag_id":"cl81jba02006u7svw9z4acjdj","_id":"cl81jba0o007h7svwtikdokvj"},{"post_id":"cl81jb9z400697svw5rwslhy9","tag_id":"cl81jba06006z7svwkk91rh1y","_id":"cl81jba12007l7svwq0smyjgf"},{"post_id":"cl81jb9z400697svw5rwslhy9","tag_id":"cl81jba0b00767svwggnrwd56","_id":"cl81jba14007n7svw0nzq8v1r"},{"post_id":"cl81jb9za006e7svw2fbtqe41","tag_id":"cl81jba0k007c7svww6embrlg","_id":"cl81jba1900817svw6iksenx1"},{"post_id":"cl81jb9za006e7svw2fbtqe41","tag_id":"cl81jba0p007j7svwryw11hlg","_id":"cl81jba1a00847svwceva4g51"},{"post_id":"cl81jb9za006e7svw2fbtqe41","tag_id":"cl81jba14007q7svw7qnm69tj","_id":"cl81jba1b00867svwm7rko9tb"},{"post_id":"cl81jb9za006e7svw2fbtqe41","tag_id":"cl81jba17007v7svw4r2nsyln","_id":"cl81jba1b00897svwrqrbcmjl"},{"post_id":"cl81jb9zb006f7svw76y2333y","tag_id":"cl81jb9z7006c7svwofwhn1m5","_id":"cl81jba1c008b7svwq2bzmiw3"},{"post_id":"cl81jb9zb006f7svw76y2333y","tag_id":"cl81jba19007z7svwxxqpaqui","_id":"cl81jba1d008e7svww54j5541"},{"post_id":"cl81jb9zf006i7svwnpze4pl7","tag_id":"cl81jba1a00857svwnlmi31pw","_id":"cl81jba1e008i7svw9htzjkmp"},{"post_id":"cl81jb9zf006i7svwnpze4pl7","tag_id":"cl81jba1c008a7svw3o78x4c3","_id":"cl81jba1k008j7svwtyiab27h"},{"post_id":"cl81jb9zg006j7svw62t085yi","tag_id":"cl81jba1a00857svwnlmi31pw","_id":"cl81jba1n008o7svwplunypaq"},{"post_id":"cl81jb9zg006j7svw62t085yi","tag_id":"cl81jba1c008a7svw3o78x4c3","_id":"cl81jba1n008q7svwuflimej2"},{"post_id":"cl81jb9zm006n7svwbazhwa2h","tag_id":"cl81jba0k007c7svww6embrlg","_id":"cl81jba1p008u7svwtwmgof62"},{"post_id":"cl81jb9zm006n7svwbazhwa2h","tag_id":"cl81jba1n008r7svw53kcmmbu","_id":"cl81jba1p008v7svwwfnnj7oh"},{"post_id":"cl81jb9zp006q7svwx2cf8qoo","tag_id":"cl81jb9zi006m7svwz2bdt3m0","_id":"cl81jba1s00907svw9xk27n5c"},{"post_id":"cl81jb9zp006q7svwx2cf8qoo","tag_id":"cl81jba02006u7svw9z4acjdj","_id":"cl81jba1s00917svwtzcucv9k"},{"post_id":"cl81jb9zp006q7svwx2cf8qoo","tag_id":"cl81jba1p008w7svwgt0mbn3n","_id":"cl81jba1s00937svw062zstz4"},{"post_id":"cl81jb9zp006q7svwx2cf8qoo","tag_id":"cl81jba06006z7svwkk91rh1y","_id":"cl81jba1s00947svwqth0sf2j"},{"post_id":"cl81jb9zp006q7svwx2cf8qoo","tag_id":"cl81jba1r008y7svwwqg1wqta","_id":"cl81jba1t00967svwi7jlpkwe"},{"post_id":"cl81jba02006v7svwyad4k3o0","tag_id":"cl81jba0p007j7svwryw11hlg","_id":"cl81jba1t00977svwongmqq4s"},{"post_id":"cl81jba02006v7svwyad4k3o0","tag_id":"cl81jba14007q7svw7qnm69tj","_id":"cl81jba1u00997svwhp8te594"},{"post_id":"cl81jba04006w7svwpflyyaxl","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl81jba1w009a7svw447walvs"},{"post_id":"cl81jba04006w7svwpflyyaxl","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jba1y009c7svw80861hqz"},{"post_id":"cl81jba04006w7svwpflyyaxl","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl81jba1y009d7svwdmllyjdj"},{"post_id":"cl81jba04006w7svwpflyyaxl","tag_id":"cl81jba1s00957svwk00ys0f0","_id":"cl81jba1y009f7svw8cr58pjm"},{"post_id":"cl81jba0700707svwd6o4zosa","tag_id":"cl81jba0k007c7svww6embrlg","_id":"cl81jba1y009g7svwyw1ixzzc"},{"post_id":"cl81jba0700707svwd6o4zosa","tag_id":"cl81jba1n008r7svw53kcmmbu","_id":"cl81jba1z009i7svwx65kwvbn"},{"post_id":"cl81jba0900727svwb4z3ua4o","tag_id":"cl81jba1y009e7svwvt1wjw3g","_id":"cl81jba1z009l7svwugy4s8m5"},{"post_id":"cl81jba0900727svwb4z3ua4o","tag_id":"cl81jba1y009h7svwq08y7170","_id":"cl81jba1z009m7svwktwxlwo2"},{"post_id":"cl81jba0900727svwb4z3ua4o","tag_id":"cl81jba1z009j7svw9dhjy6hi","_id":"cl81jba20009o7svwkqa3mmtk"},{"post_id":"cl81jba0a00757svwtjet92x9","tag_id":"cl81jb9z7006c7svwofwhn1m5","_id":"cl81jba20009q7svwj6fmpr6g"},{"post_id":"cl81jba0a00757svwtjet92x9","tag_id":"cl81jba1z009k7svwlyf0t4i0","_id":"cl81jba20009r7svwjkao44gr"},{"post_id":"cl81jba0a00757svwtjet92x9","tag_id":"cl81jba1z009n7svwovy8izo9","_id":"cl81jba21009t7svwb0tkja2l"},{"post_id":"cl81jba0c00787svwgv35pzxx","tag_id":"cl81jb9z7006c7svwofwhn1m5","_id":"cl81jba22009v7svwh2vsx20t"},{"post_id":"cl81jba0c00787svwgv35pzxx","tag_id":"cl81jba1z009k7svwlyf0t4i0","_id":"cl81jba22009w7svwdvm0ub15"},{"post_id":"cl81jba0c00787svwgv35pzxx","tag_id":"cl81jba1z009n7svwovy8izo9","_id":"cl81jba22009y7svweae9sk98"},{"post_id":"cl81jba0j007a7svwml0j1w70","tag_id":"cl81jb9z7006c7svwofwhn1m5","_id":"cl81jba2300a07svwy2vhuwzo"},{"post_id":"cl81jba0j007a7svwml0j1w70","tag_id":"cl81jba1z009k7svwlyf0t4i0","_id":"cl81jba2300a17svwko7wjp0d"},{"post_id":"cl81jba0j007a7svwml0j1w70","tag_id":"cl81jba1z009n7svwovy8izo9","_id":"cl81jba2400a37svwx1rwgiv6"},{"post_id":"cl81jba0k007d7svwl9qu8ver","tag_id":"cl81jb9z7006c7svwofwhn1m5","_id":"cl81jba2400a57svwcedxqx7c"},{"post_id":"cl81jba0k007d7svwl9qu8ver","tag_id":"cl81jba1z009k7svwlyf0t4i0","_id":"cl81jba2500a67svwegoevh5v"},{"post_id":"cl81jba0k007d7svwl9qu8ver","tag_id":"cl81jba1z009n7svwovy8izo9","_id":"cl81jba2500a87svwflddfmtf"},{"post_id":"cl81jba0o007f7svwhcdqq93b","tag_id":"cl81jba2400a47svwkx2wqy07","_id":"cl81jba2500a97svw4v1zzplb"},{"post_id":"cl81jba12007k7svwjmdxajyp","tag_id":"cl81jb9z7006c7svwofwhn1m5","_id":"cl81jba2600ac7svw7aftk2nr"},{"post_id":"cl81jba12007k7svwjmdxajyp","tag_id":"cl81jba1z009k7svwlyf0t4i0","_id":"cl81jba2700ad7svwi4baiyg7"},{"post_id":"cl81jba12007k7svwjmdxajyp","tag_id":"cl81jba1z009n7svwovy8izo9","_id":"cl81jba2700af7svwhn2u2jd1"},{"post_id":"cl81jba13007m7svw5nlo0fab","tag_id":"cl81jba1y009e7svwvt1wjw3g","_id":"cl81jba2800ah7svwn6y9j2ls"},{"post_id":"cl81jba13007m7svw5nlo0fab","tag_id":"cl81jba1y009h7svwq08y7170","_id":"cl81jba2800ai7svwvxhsyanl"},{"post_id":"cl81jba15007r7svw7q9b4u7s","tag_id":"cl81jba1y009e7svwvt1wjw3g","_id":"cl81jba2900ak7svwg91jfbew"},{"post_id":"cl81jba15007r7svw7q9b4u7s","tag_id":"cl81jba0k007c7svww6embrlg","_id":"cl81jba2900al7svwu2lt3mj1"},{"post_id":"cl81jba16007s7svwzovxxmzs","tag_id":"cl81jba1y009e7svwvt1wjw3g","_id":"cl81jba2900am7svwzg2iu6lo"},{"post_id":"cl81jba16007s7svwzovxxmzs","tag_id":"cl81jba0k007c7svww6embrlg","_id":"cl81jba2900an7svw7jcxnr35"},{"post_id":"cl81jba16007s7svwzovxxmzs","tag_id":"cl81jb7ml002u7svwurhs52c9","_id":"cl81jba2900ao7svwte9qmwjo"},{"post_id":"cl81jba2i00ar7svwierdktmz","tag_id":"cl81jb9z7006c7svwofwhn1m5","_id":"cl81jba2k00au7svwreazw1d9"},{"post_id":"cl81jba2i00ar7svwierdktmz","tag_id":"cl81jba19007z7svwxxqpaqui","_id":"cl81jba2k00av7svwkcspdkvo"},{"post_id":"cl81jba2h00ap7svw0n9smx5i","tag_id":"cl81jba2j00at7svwxc7s0opn","_id":"cl81jba2l00az7svwdkaky2re"},{"post_id":"cl81jba2h00ap7svw0n9smx5i","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl81jba2l00b07svwibn2a50x"},{"post_id":"cl81jba2h00ap7svw0n9smx5i","tag_id":"cl81jba2k00ax7svwsk1mx9r1","_id":"cl81jba2l00b17svwzhyx4j1i"},{"post_id":"cl81jba3a00b27svwbsrdloat","tag_id":"cl81jba3c00b37svw7m605kyn","_id":"cl81jba3d00b57svw2s2srb65"},{"post_id":"cl81jba3a00b27svwbsrdloat","tag_id":"cl81jba1z009k7svwlyf0t4i0","_id":"cl81jba3d00b67svw3ukmxrc9"},{"post_id":"cl81jba3a00b27svwbsrdloat","tag_id":"cl81jba1z009n7svwovy8izo9","_id":"cl81jba3d00b77svwkh0sitcj"},{"post_id":"cl84kbhzn0000awvwdpo88di0","tag_id":"cl84kbi0t0002awvw8na661za","_id":"cl84kbi0u0003awvwhhm134ug"},{"post_id":"cl87ankuh0000yrvwtfxlc9jh","tag_id":"cl87ankvp0002yrvwa4qr7r9s","_id":"cl87ankvt0005yrvwqcg8ee0j"},{"post_id":"cl87ankuh0000yrvwtfxlc9jh","tag_id":"cl87ankvr0003yrvw6cg74q66","_id":"cl87ankvv0006yrvwx76l2snp"},{"post_id":"cl88tjl5c0000mjvw1odrsf46","tag_id":"cl81jb7kr000d7svw28c5fype","_id":"cl88tjl6n0005mjvwqdx5ck1v"},{"post_id":"cl88tjl5c0000mjvw1odrsf46","tag_id":"cl88tjl6k0002mjvwczb7geqa","_id":"cl88tjl6o0006mjvwpg2sf03i"},{"post_id":"cl88tjl5c0000mjvw1odrsf46","tag_id":"cl88tjl6l0003mjvwk3lga8wz","_id":"cl88tjl6o0007mjvwsha593t2"},{"post_id":"cl8bl0paq0000x3vwcg8mfk9v","tag_id":"cl8bl0pc00002x3vw6s5zcnuf","_id":"cl8bl0pc30003x3vw08mbb69y"},{"post_id":"cl8bl0paq0000x3vwcg8mfk9v","tag_id":"cl87ankvr0003yrvw6cg74q66","_id":"cl8bl0pc30004x3vwiye1t9jj"},{"post_id":"cl8bl0paq0000x3vwcg8mfk9v","tag_id":"cl81jba2j00at7svwxc7s0opn","_id":"cl8bl0pc40006x3vw2j5ask5l"},{"post_id":"cl8bl0paq0000x3vwcg8mfk9v","tag_id":"cl81jba02006u7svw9z4acjdj","_id":"cl8bl0pc40007x3vwl5j5dc1d"},{"post_id":"cl9diz6uk0000k2vw079q1gr9","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl9diz6vm0005k2vwfdumg94g"},{"post_id":"cl9diz6uk0000k2vw079q1gr9","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl9diz6vm0006k2vwwayj1tqj"},{"post_id":"cl9diz6uk0000k2vw079q1gr9","tag_id":"cl9diz6vi0002k2vwryeq7yu0","_id":"cl9diz6vm0007k2vwf78h4kc7"},{"post_id":"cl9diz6uk0000k2vw079q1gr9","tag_id":"cl9diz6vj0003k2vw9xs33apo","_id":"cl9diz6vn0008k2vwqutas4w5"},{"post_id":"cl9f03g2v0000tpvwzusi7hdy","tag_id":"cl81jb7jz00037svw3rcu6aan","_id":"cl9f03g310001tpvwiimp54xr"},{"post_id":"cl9f03g2v0000tpvwzusi7hdy","tag_id":"cl81jb7k300087svwj1md873d","_id":"cl9f03g320002tpvw2t0w5obv"},{"post_id":"cl9f03g2v0000tpvwzusi7hdy","tag_id":"cl9diz6vi0002k2vwryeq7yu0","_id":"cl9f03g320004tpvwxc7o0wj7"},{"post_id":"cl9f03g2v0000tpvwzusi7hdy","tag_id":"cl9diz6vj0003k2vw9xs33apo","_id":"cl9f03g320005tpvwv3muq0os"}],"Tag":[{"name":"编程","_id":"cl81jb7jz00037svw3rcu6aan"},{"name":"学习","_id":"cl81jb7k300087svwj1md873d"},{"name":"Java","_id":"cl81jb7kr000d7svw28c5fype"},{"name":"坑","_id":"cl81jb7ml002u7svwurhs52c9"},{"name":"Maven","_id":"cl81jb7mv003h7svwlks6ev8s"},{"name":"行人重识别","_id":"cl81jb9z7006c7svwofwhn1m5"},{"name":"数据集","_id":"cl81jb9ze006h7svwo0g8q7z7"},{"name":"JavaWeb","_id":"cl81jb9zi006m7svwz2bdt3m0"},{"name":"后端","_id":"cl81jba02006u7svw9z4acjdj"},{"name":"SpringMVC","_id":"cl81jba06006z7svwkk91rh1y"},{"name":"RESTful","_id":"cl81jba0b00767svwggnrwd56"},{"name":"python","_id":"cl81jba0k007c7svww6embrlg"},{"name":"手写识别","_id":"cl81jba0p007j7svwryw11hlg"},{"name":"MNIST","_id":"cl81jba14007q7svw7qnm69tj"},{"name":"图像识别","_id":"cl81jba17007v7svw4r2nsyln"},{"name":"论文","_id":"cl81jba19007z7svwxxqpaqui"},{"name":"Matlab","_id":"cl81jba1a00857svwnlmi31pw"},{"name":"数学建模","_id":"cl81jba1c008a7svw3o78x4c3"},{"name":"numpy","_id":"cl81jba1n008r7svw53kcmmbu"},{"name":"Servlet","_id":"cl81jba1p008w7svwgt0mbn3n"},{"name":"Tomcat","_id":"cl81jba1r008y7svwwqg1wqta"},{"name":"MyBatis","_id":"cl81jba1s00957svwk00ys0f0"},{"name":"神经网络","_id":"cl81jba1y009e7svwvt1wjw3g"},{"name":"激活函数","_id":"cl81jba1y009h7svwq08y7170"},{"name":"代数系统","_id":"cl81jba1z009j7svw9dhjy6hi"},{"name":"深度学习","_id":"cl81jba1z009k7svwlyf0t4i0"},{"name":"图像处理","_id":"cl81jba1z009n7svwovy8izo9"},{"name":"感知机","_id":"cl81jba2400a47svwkx2wqy07"},{"name":"数据库","_id":"cl81jba2j00at7svwxc7s0opn"},{"name":"MySQL","_id":"cl81jba2k00ax7svwsk1mx9r1"},{"name":"目标检测","_id":"cl81jba3c00b37svw7m605kyn"},{"name":"git","_id":"cl84kbi0t0002awvw8na661za"},{"name":"Redis","_id":"cl87ankvp0002yrvwa4qr7r9s"},{"name":"Docker","_id":"cl87ankvr0003yrvw6cg74q66"},{"name":"设计模式","_id":"cl88tjl6k0002mjvwczb7geqa"},{"name":"代理模式","_id":"cl88tjl6l0003mjvwk3lga8wz"},{"name":"Mysql","_id":"cl8bl0pc00002x3vw6s5zcnuf"},{"name":"JS","_id":"cl9diz6vi0002k2vwryeq7yu0"},{"name":"前端","_id":"cl9diz6vj0003k2vw9xs33apo"}]}}