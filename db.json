{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/melody/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/melody/source/js/hexo-theme-melody.js","path":"js/hexo-theme-melody.js","modified":0,"renderable":1},{"_id":"themes/melody/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/melody/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/melody/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/melody/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/melody/source/js/copy.js","path":"js/copy.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/fireworks.js","path":"js/fireworks.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/head.js","path":"js/head.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/transition.js","path":"js/transition.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/anime.min.js","path":"js/third-party/anime.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","path":"js/third-party/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.min.js","path":"js/third-party/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","path":"js/third-party/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.min.js","path":"js/third-party/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/markdown.min.js","path":"js/third-party/reveal/markdown.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/marked.min.js","path":"js/third-party/reveal/marked.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/math.min.js","path":"js/third-party/reveal/math.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/notes.min.js","path":"js/third-party/reveal/notes.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/reveal.min.js","path":"js/third-party/reveal/reveal.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/zoom.min.js","path":"js/third-party/reveal/zoom.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","path":"js/third-party/reveal/head.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/highlight.min.js","path":"js/third-party/reveal/highlight.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/melody/.eslintignore","hash":"719a633358c168ec04b544a5a306fc454471f72f","modified":1562668202000},{"_id":"themes/melody/.eslintrc","hash":"2c75ddb670b21591023b2c4f52ecfb02578b5eae","modified":1562668202000},{"_id":"themes/melody/.gitignore","hash":"371c0a57184696c2069b146fc8ccaa285ca7626c","modified":1562668202000},{"_id":"themes/melody/.travis.demo.yml","hash":"977db46c56f95e0b475326ee7499890aa16bd971","modified":1562668202000},{"_id":"themes/melody/FAQ.md","hash":"2e4871193be2bbade191c1064216072cbe61ab72","modified":1562668202000},{"_id":"themes/melody/LICENSE","hash":"e7e7b7677bb19563a9013e936486bdefeb761d07","modified":1562668202000},{"_id":"themes/melody/README.md","hash":"69b44680fc2cf884b29d44e279efacf5a3f5f386","modified":1562668202000},{"_id":"themes/melody/_config.yml","hash":"f1c4a26387ded88c99789928a560ba10ba4c995c","modified":1662371477581},{"_id":"themes/melody/package.json","hash":"0dc3179de85b18cbb351c03a3949b262030250f3","modified":1562668202000},{"_id":"themes/melody/stylus_format.json","hash":"53008fbf66531953489ab0f2ce166576b7ba1ab7","modified":1562668202000},{"_id":"themes/melody/scripts/hexo-plugins.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1562668202000},{"_id":"source/_data/melody.yml","hash":"673d9a5f024109d0ca7c3b03c7cb4bcb1dd05dc7","modified":1668053637135},{"_id":"source/_posts/07_Java程序员要掌握的前端_HTML&CSS.md","hash":"749dc3eb6ddc3be62bdb0ffcbbbc199cb4c5eb5c","modified":1667453907994},{"_id":"source/_posts/08_Java程序员要掌握的前端-js.md","hash":"b7ab0ebf8f9afc6152a64123e0de63020cfce70f","modified":1666359321401},{"_id":"source/_posts/09_Java程序员要掌握的前端-ts.md","hash":"d57a7ff452ef3cbc08f8cb51bb42aa1f4cb5d94a","modified":1667453058136},{"_id":"source/_posts/09_Java程序员要掌握的前端-vue2.md","hash":"87e316549734736dc5ea38a6ceb732d88099be49","modified":1667453776845},{"_id":"source/_posts/Docker中的Redis部署.md","hash":"e81854ddefe4a90a904292ea42130cbfd27d0f57","modified":1667453927168},{"_id":"source/_posts/Java学习之路(1).md","hash":"76a867c4ff8c3f5140019b26693442076555562d","modified":1582869186000},{"_id":"source/_posts/Java学习之路(10).md","hash":"383e3e086cb48c41539aa4f762d7ddd2c69e0394","modified":1582869138000},{"_id":"source/_posts/Java学习之路(11).md","hash":"3bd46fccaf955f4505ee4dacaab06774b40862f4","modified":1582869132000},{"_id":"source/_posts/Java学习之路(12).md","hash":"1b5ee4e3b476ee13c8fa898816b7c4fd6c8263cd","modified":1582869124000},{"_id":"source/_posts/Java学习之路(13).md","hash":"b587e0fc927d81ca33da73dfac4ed07c936d0e0f","modified":1582869120000},{"_id":"source/_posts/Java学习之路(14).md","hash":"ec361b0f32fcb5e39c18c99ec2d6b8e81bdba828","modified":1582869110000},{"_id":"source/_posts/Java学习之路(15).md","hash":"a1cbc88a02f7da23e76ae97590cc29e25b17ece5","modified":1582869102000},{"_id":"source/_posts/Java学习之路(16).md","hash":"da25936445baed682b7d425fd97b2c453bad2ab8","modified":1582869092000},{"_id":"source/_posts/Java学习之路(17).md","hash":"74bbc48ddd3582276e661c8498f885b3e76ea69f","modified":1582869234000},{"_id":"source/_posts/Java学习之路(18).md","hash":"08a2371f8188cccd0746a8322dca84eebde0afc2","modified":1582869620000},{"_id":"source/_posts/Java学习之路(19).md","hash":"441a9a710f48faf76f6f88ca8aea8bb2b3d08778","modified":1582869614000},{"_id":"source/_posts/Java学习之路(2).md","hash":"c0484d3b107f3a14ab77ff00728fee909229b52b","modified":1582867100000},{"_id":"source/_posts/Java学习之路(20).md","hash":"4046515ed8e7a8efcc8d2e0474c016ae29d9211e","modified":1582869656000},{"_id":"source/_posts/Java学习之路(21).md","hash":"684b9f1766cbfb29a8c775e47a5e44cdf526ae92","modified":1583033576000},{"_id":"source/_posts/Java学习之路(22).md","hash":"31165e84431b9e7f0f0e5cd8df3664dc12ae095a","modified":1583033626000},{"_id":"source/_posts/Java学习之路(23).md","hash":"84c937db96c1f37ab4efd14fae50753d850d6a03","modified":1583033674000},{"_id":"source/_posts/Java学习之路(24).md","hash":"802e986be2be451a0c84f725cc05ce1d549456e2","modified":1583033714000},{"_id":"source/_posts/Java学习之路(25).md","hash":"475b7e85dc1594e1f29481c78405853a16418179","modified":1583033812000},{"_id":"source/_posts/Java学习之路(26).md","hash":"7c5a718556b7e716daa9c0556f82d8ca65ea824a","modified":1583033852000},{"_id":"source/_posts/Java学习之路(27).md","hash":"195dcdfc53125df831e9e3d3edbb3535f5a3ab06","modified":1583033918000},{"_id":"source/_posts/Java学习之路(28).md","hash":"38feb8e4ac7a863af93aaf43e88714e10f77327a","modified":1583033992000},{"_id":"source/_posts/Java学习之路(29).md","hash":"a9d5f5509be68981afb762298f8b71a8dc1e2139","modified":1583034046000},{"_id":"source/_posts/Java学习之路(3).md","hash":"c096a9b65d36cd3afacb38b78a3d36f8007f6328","modified":1582869176000},{"_id":"source/_posts/Java学习之路(30).md","hash":"dfe6de71a527de780aab8e92229db8320feeac09","modified":1583034106000},{"_id":"source/_posts/Java学习之路(31).md","hash":"e7ca6bd166d785a686b579f414331c0de4e942ff","modified":1583034146000},{"_id":"source/_posts/Java学习之路(32).md","hash":"084df7b3cd6f650e9ba80a6361cfbe3fabb92716","modified":1583034194000},{"_id":"source/_posts/Java学习之路(33).md","hash":"745e60aa2fc008ab074211e25dce5863463cad29","modified":1583034266000},{"_id":"source/_posts/Java学习之路(34).md","hash":"9729c9070f45540748bd718019a44517c072e57d","modified":1583034302000},{"_id":"source/_posts/Java学习之路(35).md","hash":"9729c9070f45540748bd718019a44517c072e57d","modified":1583034662000},{"_id":"source/_posts/Java学习之路(36).md","hash":"8e5668adfbfb9bae1f9e7f60f111ec6fb2933af8","modified":1583034642000},{"_id":"source/_posts/Java学习之路(37).md","hash":"99bc7f5cf5c3db1c4de6dd1244f00a57ef2d0539","modified":1662355255445},{"_id":"source/_posts/Java学习之路(38).md","hash":"841e61c2120fe182f5e10363096dbd33951ffcd0","modified":1584351034000},{"_id":"source/_posts/Java学习之路(39).md","hash":"3ba2fb6a655d5851bc035a5c9240f9583e97b14d","modified":1663939065908},{"_id":"source/_posts/Java学习之路(4).md","hash":"06f76cc655bd315f6d139e6d26fdc9acc7e71f6f","modified":1582869172000},{"_id":"source/_posts/Java学习之路(40).md","hash":"cdbae338a6dd34b2de72c53a6874561186725a23","modified":1666698108892},{"_id":"source/_posts/Java学习之路(41).md","hash":"fa285c7c784cf4488b1ebd90468194852d9ce28e","modified":1667269636100},{"_id":"source/_posts/Java学习之路(5).md","hash":"fc00b2e3f53dd49d49dc2560ffae8caf72bbd1d8","modified":1582869164000},{"_id":"source/_posts/Java学习之路(6).md","hash":"828826a71e282ddd3b9628d1deb86c9559b1d13a","modified":1582869160000},{"_id":"source/_posts/Java学习之路(7).md","hash":"fdd7f24c5f768c4028943c96112c03aee24b4860","modified":1582869154000},{"_id":"source/_posts/Java学习之路(8).md","hash":"8655990183693cce8813ed353bcf5824326e6dad","modified":1582869148000},{"_id":"source/_posts/Java学习之路(9).md","hash":"539f3b5d19775bc51512cdbb73bfb4a1122a7e98","modified":1582869142000},{"_id":"source/_posts/Matlab数模(1).md","hash":"d2be0ce1b77f47c597e9956a79adc2ce7225a61c","modified":1662355328753},{"_id":"source/_posts/Matlab数模(2).md","hash":"92c393df5ac61ed746b2202e3d343730eaf9f83d","modified":1662355443123},{"_id":"source/_posts/Maven中dependence和dependenceManagement.md","hash":"d0ecf996abf3bf9380d0889d7e5b0c9e87e78c95","modified":1662527015146},{"_id":"source/_posts/Mysql主从复制基于Docker的实现.md","hash":"65978f02a07e35d20c54e6a0d83dfb0321fac867","modified":1663762104254},{"_id":"source/_posts/Nginx_Base_Use.md","hash":"d0c2bc3ee29590b214ab4d0a89df3135b8b00a1d","modified":1667966907900},{"_id":"source/_posts/Nginx_Basic_case_configuration.md","hash":"ef73579b00fb85e67c6b18abba78c008b0424136","modified":1667967024268},{"_id":"source/_posts/Nginx_Configuration_file.md","hash":"1b48f66722a546c897aea53f70acdba4fc37bfc9","modified":1667966853309},{"_id":"source/_posts/Nginx_Static_resource_deployment.md","hash":"74de99fefea36e25d182a24f2b67e43e0e82682c","modified":1668061186460},{"_id":"source/_posts/Nginx_install.md","hash":"6d24c3f086392944a1c6dd838f9783db239d0798","modified":1667966933326},{"_id":"source/_posts/Nginx_introduce.md","hash":"dfee1a78c84b5ce219c9d5d7cbe1cf22476ef73d","modified":1667872787805},{"_id":"source/_posts/PSHRNet.md","hash":"8193e6b6f213e6eddf65e34c6756eee892e6e1cd","modified":1662431376116},{"_id":"source/_posts/Person Re-identification数据集描述——Market-1501.md","hash":"224753960ab124c1344aa1d81e7752c4d02c6785","modified":1571988628000},{"_id":"source/_posts/SpringMVC - 获取Get请求参数详解.md","hash":"4f8a46fdc17fa26d5846839c79b2d4746137a671","modified":1663154574646},{"_id":"source/_posts/git_status总结.md","hash":"9a0396b8d1e4be8e1c2d0018f8415a6d9586788e","modified":1663338177805},{"_id":"source/_posts/hello-world.md","hash":"f4deb743a099bf87357c3187988bdd2fbf397cb9","modified":1662349614744},{"_id":"source/_posts/mnist数据集下载与处理.md","hash":"07fa85539653bd3c0790f3fa6b87ea644cb40361","modified":1662349773491},{"_id":"source/_posts/mnist数据集介绍.md","hash":"ec89fed0f324234147e06642db24eabe0fa247e5","modified":1662357197546},{"_id":"source/_posts/mybatis——解决属性名和数据库字段名不一致问题（注解方式).md","hash":"fef6e8fcb510fb8f8280d04794fcef857214260c","modified":1663939035418},{"_id":"source/_posts/numpy中的axis参数.md","hash":"0c654572189064a2543497ce0dd4849835161d74","modified":1662349264047},{"_id":"source/_posts/numpy数组和python列表的区别.md","hash":"14a790d7f5c05cb4aa7ec7911dc9d0e4fa07fcaf","modified":1662349768937},{"_id":"source/_posts/servlet进化之旅.md","hash":"18f7cdebd5ca82cbaaec9b3a24b59997033d9c1e","modified":1665842120716},{"_id":"source/_posts/代理模式.md","hash":"2649fbc192bc4840e0e173b2e01e695942d8288a","modified":1663595107913},{"_id":"source/_posts/关于ReLU的问题及思考.md","hash":"a0687e51fba88c5737ddafc4a152b5b48906be78","modified":1662358449713},{"_id":"source/_posts/感知机初识.md","hash":"866160d2cad240150e15363d2c44607da15aa33b","modified":1662358762645},{"_id":"source/_posts/正向代理与反向代理.md","hash":"89886faaea6f623ee9d7e082de911ab030d8d17a","modified":1667878116505},{"_id":"source/_posts/激活函数（一）.md","hash":"2b61e6b8b16599718c9f7ab3c885522d2b887adb","modified":1662358624103},{"_id":"source/_posts/简单的3层神经网络实现.md","hash":"fb3879260832a2ef5576469eee18b5c46274133d","modified":1662358701459},{"_id":"source/_posts/行人重识别代码实战（一）.md","hash":"c01c5e4d09bef2f8b9ca1e03371cfa27abf7054b","modified":1662357432281},{"_id":"source/_posts/行人重识别代码实战（三）.md","hash":"9b554d52c3f3a5c6d6685373dfdfe71c76a10f68","modified":1662357282418},{"_id":"source/_posts/行人重识别代码实战（二）.md","hash":"caf1694135c567cafd9fa1869aff520c637808c7","modified":1662357351722},{"_id":"source/_posts/行人重识别初识.md","hash":"4a98f1a323b0b3b22332e8ecde8ba30b209e7dbb","modified":1662358057485},{"_id":"source/_posts/论文笔记(一).md","hash":"54a8876a04548a2cda28fc7ff1cfb8cc869bae9e","modified":1662353957747},{"_id":"source/_posts/论文笔记（一）.md","hash":"8f449eff5338360459dd06483d07fab4fba5ed8b","modified":1662357807516},{"_id":"source/_posts/试玩YOLOv3多目标检测.md","hash":"4b58e148a16874ea359ec368df1a5c2a27f7c957","modified":1662357065001},{"_id":"source/_posts/鱼书踩坑（一）.md","hash":"962ba4fc8e986350ec85f03f7f252cb792b4e4cc","modified":1662349616520},{"_id":"source/about/index.md","hash":"74a8fc43017b01bcae8aa86de1b528855f8ca4f7","modified":1662370196625},{"_id":"source/categories/index.md","hash":"bec105a277774c06d5e3b1f45e5c493046ee92b3","modified":1562835136000},{"_id":"source/tags/index.md","hash":"391320ad2507d9650249c9c903e057072cb870d8","modified":1562835146000},{"_id":"themes/melody/.git/FETCH_HEAD","hash":"0c82cb4bc5eab554d2552172b0619f94f811444e","modified":1562668390000},{"_id":"themes/melody/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1562668202000},{"_id":"themes/melody/.git/ORIG_HEAD","hash":"6182e96489d5e3cc5a84b84a159da7a011b81d87","modified":1562668390000},{"_id":"themes/melody/.git/config","hash":"d15ada34b8f38ff379372b129e946457ccfb5653","modified":1562668202000},{"_id":"themes/melody/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1562668196000},{"_id":"themes/melody/.git/index","hash":"9dd3e3b59a7fc22a50c224b280e16c2f1b99510c","modified":1662339652468},{"_id":"themes/melody/.git/packed-refs","hash":"226b6395afa77982d6f591b75d4dff70ff5da59c","modified":1562668202000},{"_id":"themes/melody/.github/ISSUE_TEMPLATE.md","hash":"d1420092142acd3f38c31099934d84bf5c4a4b7c","modified":1562668202000},{"_id":"themes/melody/.vscode/launch.json","hash":"52d28f3455d1e9ff1d7c56316773a77710e89751","modified":1562668202000},{"_id":"themes/melody/.vscode/settings.json","hash":"46d72f2c9c27996464091654d1687babcd603d24","modified":1562668202000},{"_id":"themes/melody/languages/default.yml","hash":"4a60ece6d7a3d23ac2966115835fdcfa7bd3e9e7","modified":1562668202000},{"_id":"themes/melody/languages/en.yml","hash":"4a60ece6d7a3d23ac2966115835fdcfa7bd3e9e7","modified":1562668202000},{"_id":"themes/melody/languages/zh-Hans.yml","hash":"efa9712848d8316b38270f9674d7392a640d6af1","modified":1562668202000},{"_id":"themes/melody/layout/archive.pug","hash":"f3198ed4d59ca9d0423060a428106a857247a8f8","modified":1562668202000},{"_id":"themes/melody/layout/category.pug","hash":"27fe85787ee1e4bba75a6eadbf86f7ffc58cb66a","modified":1562668202000},{"_id":"themes/melody/layout/gallery.pug","hash":"1470a86b329eb5c60d6fa6a7bafa25ddf1255f97","modified":1562668202000},{"_id":"themes/melody/layout/index.pug","hash":"d15a36b5c8f1bec367888edb358e70b47eb15ea9","modified":1562668202000},{"_id":"themes/melody/layout/page.pug","hash":"bbcd45cc14b69e260cf7bf851d1926dedc5cd3be","modified":1562668202000},{"_id":"themes/melody/layout/post.pug","hash":"e0d840ee90bf773e1dcc14e884c809822baefb09","modified":1562668202000},{"_id":"themes/melody/layout/slides.pug","hash":"1e84a92d5b854dd233e0b511d59c1cd7c8d647a1","modified":1562668202000},{"_id":"themes/melody/layout/tag.pug","hash":"6b5c5c08e9a6773a4fce8583fdf614a784beb045","modified":1562668202000},{"_id":"themes/melody/scripts/gallery-tag.js","hash":"b18e4a809de37da54ea914452ce4a24785fa7621","modified":1562668202000},{"_id":"themes/melody/scripts/replace-config.js","hash":"9d5378898a068e77b5e601c950b631144bd743cf","modified":1562668202000},{"_id":"themes/melody/source/favicon.ico","hash":"6cdeaa296bfb310e0cfa886e5220364778b8891f","modified":1316143966000},{"_id":"source/_posts/MySql.md","hash":"a03612019802d38dd0290ade5b5caea5f14c95e7","modified":1662527023751},{"_id":"themes/melody/source/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1562668202000},{"_id":"themes/melody/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1562668196000},{"_id":"themes/melody/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1562668196000},{"_id":"themes/melody/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1562668196000},{"_id":"themes/melody/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1562668196000},{"_id":"themes/melody/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1562668196000},{"_id":"themes/melody/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1562668196000},{"_id":"themes/melody/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1562668196000},{"_id":"themes/melody/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1562668196000},{"_id":"themes/melody/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1562668196000},{"_id":"themes/melody/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1562668196000},{"_id":"themes/melody/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1562668196000},{"_id":"themes/melody/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1562668196000},{"_id":"themes/melody/.git/logs/HEAD","hash":"6c5b7ce31b5736fd6367216a0778341bc498db8f","modified":1562668202000},{"_id":"themes/melody/layout/includes/additional-js.pug","hash":"7137f872dde2e44616098f92e1af6bc291e70bbe","modified":1562668202000},{"_id":"themes/melody/layout/includes/config.pug","hash":"42e523fef2e9f285d989d494f0a6fce485921719","modified":1562668202000},{"_id":"themes/melody/layout/includes/footer.pug","hash":"c5968d30a668c3d1b8e658d784b661799d3ba48a","modified":1562668202000},{"_id":"themes/melody/layout/includes/head.pug","hash":"4cf465d5ac4f335a6bc57cec29fddf9ac0943741","modified":1562668202000},{"_id":"themes/melody/layout/includes/header.pug","hash":"664705214dc167e7a323fea6e7874790d870fb3c","modified":1562668202000},{"_id":"themes/melody/layout/includes/layout.pug","hash":"3b4dc121038cbc6509621d9db4e7eafffb850fdc","modified":1562668202000},{"_id":"themes/melody/layout/includes/nav.pug","hash":"90ad9fdeb551f524eac6f25090346a884d13d2dd","modified":1562668202000},{"_id":"themes/melody/layout/includes/pagination.pug","hash":"a28c30fca4780a2afd5375f98833637b6b6e941a","modified":1562668202000},{"_id":"themes/melody/layout/includes/recent-posts.pug","hash":"f37dc3576cc45ad3da097b58f420b5b523d8a9a5","modified":1562668202000},{"_id":"themes/melody/layout/includes/sidebar.pug","hash":"4a531e4f09417e2172ebda39c7d7c856b3979ced","modified":1562668202000},{"_id":"themes/melody/source/css/index.styl","hash":"c2823ad6013df237993eea5cf190c313270da4db","modified":1562668202000},{"_id":"themes/melody/source/css/var.styl","hash":"7a1f4099b71741e3a156003234ef9a9a48b66abe","modified":1562668202000},{"_id":"themes/melody/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1562668202000},{"_id":"themes/melody/source/img/avatar.png","hash":"48e410926305699eac0f559bb13ce776ae3d2f5a","modified":1562677932000},{"_id":"themes/melody/source/js/copy.js","hash":"8d21285129bf9638d18bacaca21945e24ec5b872","modified":1562668202000},{"_id":"themes/melody/source/js/fancybox.js","hash":"59f9356b60732438a40a8ab7af17a70171a60b00","modified":1562668202000},{"_id":"themes/melody/source/js/fireworks.js","hash":"f4f902392525133028f501bef2afa6b1045b5b9c","modified":1562668202000},{"_id":"themes/melody/source/js/head.js","hash":"1f0693d5d985b4bc5de16c79c5c9d4601260d617","modified":1562668202000},{"_id":"themes/melody/source/js/scroll.js","hash":"b45eb54e5c6ba67cea5bee365885735ca4e4f4f9","modified":1562668202000},{"_id":"themes/melody/source/js/sidebar.js","hash":"6906dcca3a6b9bd46489ca378bc1e74e454168ac","modified":1562668202000},{"_id":"themes/melody/source/js/transition.js","hash":"254820390dd5dfe9ee9097f3ef58e8c17b4bb280","modified":1562668202000},{"_id":"themes/melody/source/js/utils.js","hash":"5ff6609b1d674f7879f30e491bdd3c69139704da","modified":1562668202000},{"_id":"themes/melody/layout/includes/gallery/script.pug","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1562668202000},{"_id":"themes/melody/.git/objects/pack/pack-8c0f2a8562d25e23c8f819bc3b42e3afadbdc473.idx","hash":"56a850700cba0f04343147d91e980e8b0e2ee071","modified":1562668202000},{"_id":"themes/melody/.git/refs/heads/master","hash":"6182e96489d5e3cc5a84b84a159da7a011b81d87","modified":1562668202000},{"_id":"themes/melody/layout/includes/comments/disqus.pug","hash":"0d753ace1190deebd9173279ab5369e4a30c53a8","modified":1562668202000},{"_id":"themes/melody/layout/includes/comments/gitalk.pug","hash":"590bc5af43bc55182157dbac65e7cd8bf39f410d","modified":1562668202000},{"_id":"themes/melody/layout/includes/comments/gitment.pug","hash":"97f524092775c9b7e618c691df40b4bce9e121ac","modified":1562668202000},{"_id":"themes/melody/layout/includes/comments/index.pug","hash":"b8c1344a2760a46774f1894967c879d72802556d","modified":1562668202000},{"_id":"themes/melody/layout/includes/comments/laibili.pug","hash":"1ffb80147fd443144ca6cf0230515f229eba6745","modified":1562668202000},{"_id":"themes/melody/layout/includes/comments/valine.pug","hash":"81e10998d5a2d28857f1c32e2d8b1ba1d84ce0f8","modified":1562668202000},{"_id":"themes/melody/layout/includes/count/busuanzi.pug","hash":"760be9ea92e5eb6959f37b76b9c13fb627893b0a","modified":1562668202000},{"_id":"themes/melody/layout/includes/gallery/layout.pug","hash":"8ff96c4f9afb416c5fc586c9585ae51cb6129529","modified":1562668202000},{"_id":"themes/melody/layout/includes/mixins/article-sort.pug","hash":"05c080cbd236b7d94765350cc699b92736ca4609","modified":1562668202000},{"_id":"themes/melody/layout/includes/mixins/slide.pug","hash":"cde884e97dd980bf05910934ce1d52ef3bd5df9c","modified":1562668202000},{"_id":"themes/melody/layout/includes/search/algolia.pug","hash":"3d2b2de0e199ab1fb151f41f2bbaac909f3d3d12","modified":1562668202000},{"_id":"themes/melody/layout/includes/search/index.pug","hash":"66b4f4e8119e987cd3f9907298689a1408a05859","modified":1562668202000},{"_id":"themes/melody/layout/includes/search/local-search.pug","hash":"205aff585f7763b61b8597c6121e6d8c5f9329a4","modified":1562668202000},{"_id":"themes/melody/layout/includes/share/add-this.pug","hash":"055d41a0cc135b8fb02da8faa1df5faacb8fc13d","modified":1562668202000},{"_id":"themes/melody/layout/includes/share/index.pug","hash":"49cf38dc1f25f5646bf28568b08b4e35d5822648","modified":1562668202000},{"_id":"themes/melody/layout/includes/share/share-js.pug","hash":"7d8660614f5b80e9078c184456f4742a520c5d56","modified":1562668202000},{"_id":"themes/melody/layout/includes/slide/layout.pug","hash":"ed853a81c74e8f21e5acca0cc4738bc4f204b751","modified":1562668202000},{"_id":"themes/melody/layout/includes/slide/script.pug","hash":"245823713e729136779af3f0cbb33bf1de5a5103","modified":1562668202000},{"_id":"themes/melody/layout/includes/third-party/katex.pug","hash":"d5ed449e505740620c8f8a110f124bec8cb46be0","modified":1562668202000},{"_id":"themes/melody/layout/includes/third-party/mathjax.pug","hash":"0afc0e488ef64f5cb27b9fc90b13f0f9e9f958a5","modified":1562668202000},{"_id":"themes/melody/source/css/_global/index.styl","hash":"a6ad6d2675e975883855a1fa3a634c7ba06d4685","modified":1562668202000},{"_id":"themes/melody/source/css/_highlight/diff.styl","hash":"bb83b379954dc2e7f5a9915e5ed50da7223e3efa","modified":1562668202000},{"_id":"themes/melody/source/css/_highlight/highlight.styl","hash":"26b397cd1528680095407c67f9c8ae069ed4eafa","modified":1562668202000},{"_id":"themes/melody/source/css/_highlight/theme.styl","hash":"89af8e4eb6adacee6693b3df46d87a0b1b2b0d2d","modified":1562668202000},{"_id":"themes/melody/source/css/_layout/comments.styl","hash":"3b32040e894978ec9be6569f44fd5557734f2340","modified":1562668202000},{"_id":"themes/melody/source/css/_layout/footer.styl","hash":"367a6d225d2a70aa45bcc48b38989c1efdbebfcc","modified":1562668202000},{"_id":"themes/melody/source/css/_layout/head.styl","hash":"9c14f6d686a00507212e15a0aabd8b9af5634e1d","modified":1562668202000},{"_id":"themes/melody/source/css/_layout/page.styl","hash":"c6da797bf07b5dbf2a94f48237e3e0dc7e976f37","modified":1562668202000},{"_id":"themes/melody/source/css/_layout/pagination.styl","hash":"ad5dc99b438588f92115592ed2d65a47c980720d","modified":1562668202000},{"_id":"themes/melody/source/css/_layout/post.styl","hash":"5d6d635ca50c762a2ab2cdf8c82b2790b34bf275","modified":1562668202000},{"_id":"themes/melody/source/css/_layout/sidebar.styl","hash":"29b02d3c319d84ab98dddec449f4bc83fbfdad36","modified":1562668202000},{"_id":"themes/melody/source/css/_search/algolia.styl","hash":"0168c78d28fbc8996ad9e1764457a6526404515b","modified":1562668202000},{"_id":"themes/melody/source/css/_search/index.styl","hash":"b16e4c15ad5844096f427eb3bdb49c5bb0bbcaf7","modified":1562668202000},{"_id":"themes/melody/source/css/_search/local-search.styl","hash":"adb2663fcfee1c84461231472f228aa82c6478bd","modified":1562668202000},{"_id":"themes/melody/source/css/_third-party/jquery.fancybox.min.css","hash":"f9c94ec04062a1bfe1ef894c49e6ec33fa121778","modified":1562668202000},{"_id":"themes/melody/source/css/_third-party/normalize.min.css","hash":"e12eef6d6811c132f4f2fcf6c936be384191bcaf","modified":1562668202000},{"_id":"themes/melody/source/js/search/algolia.js","hash":"8a6673cb1616b50a5ac8b2dc20fb3475bc32039f","modified":1562668202000},{"_id":"themes/melody/source/js/search/local-search.js","hash":"a642a93fb52ebc87f05e5d3cee38618013fda539","modified":1562668202000},{"_id":"themes/melody/source/js/third-party/anime.min.js","hash":"7c9416c1b444773b2d82e797131d6047364645a3","modified":1562668202000},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","hash":"0acabccbb20d722141fa15b37d535807092b2c88","modified":1562668202000},{"_id":"themes/melody/source/js/third-party/velocity.min.js","hash":"15a9dc404e02f2cd9b46cc71293b65671976567b","modified":1562668202000},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1562668202000},{"_id":"themes/melody/source/js/third-party/jquery.min.js","hash":"67bdacbd077ee59f411109fd119ee9f58db15a5f","modified":1562668202000},{"_id":"themes/melody/.git/logs/refs/heads/master","hash":"6c5b7ce31b5736fd6367216a0778341bc498db8f","modified":1562668202000},{"_id":"themes/melody/.git/refs/remotes/origin/HEAD","hash":"2c142208129b78a4616cbb6798f96f4fb3580296","modified":1562668202000},{"_id":"themes/melody/source/js/third-party/reveal/markdown.min.js","hash":"859d70cd7c459819b90fe27afb940d16ecff6614","modified":1562668202000},{"_id":"themes/melody/source/js/third-party/reveal/marked.min.js","hash":"abd5391551b7b4e0cc0511c4b5c5ccfe66100f1b","modified":1562668202000},{"_id":"themes/melody/source/js/third-party/reveal/math.min.js","hash":"779c98dbd83a528f27ea4b9f2d420c957c0939ba","modified":1562668202000},{"_id":"themes/melody/source/js/third-party/reveal/notes.min.js","hash":"4bb2925b111467791fdef3c4e4b41993d59ce90f","modified":1562668202000},{"_id":"themes/melody/source/js/third-party/reveal/reveal.min.js","hash":"d8377a86451712488dea87caf5acbf8e97aa991f","modified":1562668202000},{"_id":"themes/melody/source/js/third-party/reveal/zoom.min.js","hash":"aca47bf417d451c4d364c6eb287a230e4b462b17","modified":1562668202000},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","hash":"e34a3faf6e51034de612d15700e059fe82dba310","modified":1562668202000},{"_id":"themes/melody/.git/logs/refs/remotes/origin/HEAD","hash":"daabd8eb1b4aa92873a258f1ae1c21f2f135795c","modified":1562668202000},{"_id":"themes/melody/source/js/third-party/reveal/highlight.min.js","hash":"10dd530e712a67f25cf27845213c0f28d2fe9e4d","modified":1562668202000},{"_id":"themes/melody/.git/objects/pack/pack-8c0f2a8562d25e23c8f819bc3b42e3afadbdc473.pack","hash":"6951baa7273a8c4a52bc77f76794362f03b8e377","modified":1562668202000},{"_id":"public/search.xml","hash":"e117aa433d8f29a50e112466fe3e3964a198b3ac","modified":1668061196630},{"_id":"public/about/index.html","hash":"7e6015e7c4bf33d9750cdbc2aaa4ffca1002494e","modified":1668053647891},{"_id":"public/categories/index.html","hash":"eec6df4023beb751087671f1744467b488a6a804","modified":1668053647892},{"_id":"public/tags/index.html","hash":"547b883c232066e1af744f6ad8d3df81a2b369e6","modified":1668053647893},{"_id":"public/2022/11/08/正向代理与反向代理/index.html","hash":"ed947c34a3a23d2360b2c2b409897b950b041c27","modified":1668053648005},{"_id":"public/2022/10/30/Java学习之路(41)/index.html","hash":"b781c680e6de32595829a7eea2893ca2831548d2","modified":1668053648006},{"_id":"public/2022/10/25/Java学习之路(40)/index.html","hash":"4a739fa0fe23594e4a514834e2a70ae98608038e","modified":1668053648006},{"_id":"public/2022/09/18/Docker中的Redis部署/index.html","hash":"f15e20e54c95a11001a7ccc084cfc3ac4c597ae4","modified":1668053648006},{"_id":"public/2022/09/16/git_status总结/index.html","hash":"bedad33dcf64730d05055a59d577855cd3106d17","modified":1668053648006},{"_id":"public/2022/09/06/mybatis——解决属性名和数据库字段名不一致问题（注解方式)/index.html","hash":"75c6e992d158720a53467198ab3b489bd64c652a","modified":1668053648006},{"_id":"public/2021/10/07/PSHRNet/index.html","hash":"65d8afaca88bf249474143c5959f1458a9414ff1","modified":1668053648006},{"_id":"public/2020/07/15/论文笔记(一)/index.html","hash":"f3ce8f51881ec85f50555c675bb136b3f286ab5e","modified":1668053648006},{"_id":"public/2020/03/21/numpy中的axis参数/index.html","hash":"b2c6170e6d30864789b08666ecad58c587549f51","modified":1668053648006},{"_id":"public/2020/03/21/numpy数组和python列表的区别/index.html","hash":"c81bbe38393d7401e4bb2ab7e2b1530db59ed526","modified":1668053648006},{"_id":"public/2020/02/21/Matlab数模(1)/index.html","hash":"cd51757c445507010dad6261b00f6b3780a4da6d","modified":1668053648006},{"_id":"public/2020/02/21/Matlab数模(2)/index.html","hash":"f46bb5f3a50bd3251602b604fd4a46e644ed58a7","modified":1668053648006},{"_id":"public/2020/02/19/Java学习之路(38)/index.html","hash":"239a5c4294b05776aa6480bace05624963b9d525","modified":1668053648006},{"_id":"public/2020/02/19/Java学习之路(39)/index.html","hash":"eca128cc4e747d9c95ba998bb3ad1ccdf3685494","modified":1668053648006},{"_id":"public/2020/01/31/Java学习之路(36)/index.html","hash":"664f01e07503c5266ad68d79a89318b5ac2fc5df","modified":1668053648006},{"_id":"public/2020/01/30/Java学习之路(33)/index.html","hash":"8b09278ddd6e9cc2080f89989eb5fe96e3678bc8","modified":1668053648006},{"_id":"public/2020/01/30/Java学习之路(34)/index.html","hash":"198b2a068eb47147dbaa744b9acd3e43be6a6a07","modified":1668053648007},{"_id":"public/2020/01/30/Java学习之路(35)/index.html","hash":"84fafccd54b3f19366e47c649cc0016349633981","modified":1668053648007},{"_id":"public/2020/01/29/Java学习之路(32)/index.html","hash":"35e60f4bde8704da70caa18c3d24efa8f69e871b","modified":1668053648007},{"_id":"public/2020/01/28/Java学习之路(26)/index.html","hash":"ed6d2df015ea5c7afde44257128a419d95d88276","modified":1668053648007},{"_id":"public/2020/01/28/Java学习之路(27)/index.html","hash":"fd596950952493acb10fe91acbae14d5f98a6695","modified":1668053648007},{"_id":"public/2020/01/28/Java学习之路(28)/index.html","hash":"fe2a732a4d463929db0b9750cfb72b278bb36297","modified":1668053648007},{"_id":"public/2020/01/28/Java学习之路(29)/index.html","hash":"d065129ab3be3e61cd365195d98f0a81c0a720fc","modified":1668053648007},{"_id":"public/2020/01/28/Java学习之路(30)/index.html","hash":"8e286dabec217a53fdb49c0d368459f883050b7b","modified":1668053648007},{"_id":"public/2020/01/28/Java学习之路(31)/index.html","hash":"7c7f89172f8bbcd21af2daaa197e2fb3452d8772","modified":1668053648007},{"_id":"public/2020/01/27/Java学习之路(22)/index.html","hash":"1cbf717d7277c050c2ec954fe2457f1eeb142851","modified":1668053648007},{"_id":"public/2020/01/27/Java学习之路(23)/index.html","hash":"c00339da7230eb053a2b2e02227b7f1293647e3e","modified":1668053648007},{"_id":"public/2020/01/27/Java学习之路(24)/index.html","hash":"bd5992a2ece0e0b463aada05d290b4b2d8ca9a4c","modified":1668053648007},{"_id":"public/2020/01/27/Java学习之路(25)/index.html","hash":"46a4e1da3807ff2dfeb75a9f15246191002e76a4","modified":1668053648007},{"_id":"public/2020/01/26/Java学习之路(18)/index.html","hash":"db2530cf9ee132758af1846a51280f7a0a3f3e71","modified":1668053648007},{"_id":"public/2020/01/26/Java学习之路(19)/index.html","hash":"48b51e942d05328dc192c9ffd4d69ea06edb057d","modified":1668053648007},{"_id":"public/2020/01/26/Java学习之路(20)/index.html","hash":"c3c961cc9a9f4b6cc9467d940460bffc7bd441f3","modified":1668053648007},{"_id":"public/2020/01/25/Java学习之路(14)/index.html","hash":"8ba78da8e63944650fed97fdd869734e0262170a","modified":1668053648007},{"_id":"public/2020/01/25/Java学习之路(15)/index.html","hash":"1e6e019ece21e44438d17a1637a2bca4cc5dae3b","modified":1668053648008},{"_id":"public/2020/01/25/Java学习之路(16)/index.html","hash":"ce5b64151e31f8dec19cdafb97872474ee93630f","modified":1668053648008},{"_id":"public/2020/01/25/Java学习之路(17)/index.html","hash":"6f42ab9f6cee85d765516639084dcfbfbd9ae784","modified":1668053648008},{"_id":"public/2020/01/23/Java学习之路(10)/index.html","hash":"455f7476e6b1fd4cd417423fd1c08216acd2c213","modified":1668053648008},{"_id":"public/2020/01/23/Java学习之路(11)/index.html","hash":"2371b75a6d217cbb46bb606d312f09fa67eae1ac","modified":1668053648008},{"_id":"public/2020/01/23/Java学习之路(12)/index.html","hash":"107defe60d0fa677e1b70b953b186cdd56ecc1c1","modified":1668053648008},{"_id":"public/2020/01/23/Java学习之路(13)/index.html","hash":"935076ea339ddf793daf330f9cff62e6cf1d293c","modified":1668053648008},{"_id":"public/2020/01/23/Java学习之路(9)/index.html","hash":"33ee2a19571d40310ae0fdc2a9c50c00a099a05a","modified":1668053648008},{"_id":"public/2020/01/22/Java学习之路(6)/index.html","hash":"17767a557a554adff9c694100eac3deccbafec03","modified":1668053648008},{"_id":"public/2020/01/22/Java学习之路(7)/index.html","hash":"24c7693148bc377a979e329fa5793d69775e4f01","modified":1668053648008},{"_id":"public/2020/01/22/Java学习之路(8)/index.html","hash":"987f6169d2e1cd374b7b2c07d91a5dd33c145c18","modified":1668053648008},{"_id":"public/2020/01/20/Java学习之路(1)/index.html","hash":"01d5e1584b736594ea04f5e49a3b71af54fba693","modified":1668053648008},{"_id":"public/2020/01/20/Java学习之路(2)/index.html","hash":"b1f5ca82b0329c32fc77f7cc144eb8c53ef3f794","modified":1668053648009},{"_id":"public/2020/01/20/Java学习之路(3)/index.html","hash":"dd4f634dbd7ef08fd29852095777b8b0b8b12232","modified":1668053648009},{"_id":"public/2020/01/20/Java学习之路(4)/index.html","hash":"923a31861384377d1ab50e59a919ff78c0ce4657","modified":1668053648009},{"_id":"public/2020/01/20/Java学习之路(5)/index.html","hash":"01d4a28a9e93fb2ecf1037bed1fb14f483c5580f","modified":1668053648009},{"_id":"public/2019/10/24/试玩YOLOv3多目标检测/index.html","hash":"1293cd23cb245413b99d4da519ab93113a78fb8f","modified":1668053648009},{"_id":"public/2019/08/28/mnist数据集介绍/index.html","hash":"97719c049f7570adff8efef8943fcd85439b553e","modified":1668053648009},{"_id":"public/2019/08/24/行人重识别代码实战（三）/index.html","hash":"aa9a3b653e88a1f5def194a1053d2ca777cd3adf","modified":1668053648009},{"_id":"public/2019/08/24/行人重识别代码实战（二）/index.html","hash":"91d0bddc6d983c469183f2b917436a6ec00adb8b","modified":1668053648009},{"_id":"public/2019/07/31/Person Re-identification数据集描述——Market-1501/index.html","hash":"f23723d3642f46d168d137107494b21930c466e7","modified":1668053648009},{"_id":"public/2019/07/16/关于ReLU的问题及思考/index.html","hash":"a816254880c094a283b8a006c93e14b8962e5c58","modified":1668053648009},{"_id":"public/2018/08/19/简单的3层神经网络实现/index.html","hash":"5ac4cfe2ed6973d255ce8e238e2874c4a445c149","modified":1668053648009},{"_id":"public/2018/08/10/感知机初识/index.html","hash":"55185dedda66d2dd0b8a2bb9c40af355f0097b78","modified":1668053648009},{"_id":"public/2015/01/20/hello-world/index.html","hash":"7bf436880a1be5effb0b78287ed125add50be0c9","modified":1668053648009},{"_id":"public/archives/index.html","hash":"9e73c71fdf7157cbf3f302072793e28d294917c7","modified":1668053648009},{"_id":"public/archives/page/2/index.html","hash":"250d05986b5a39f87047515fc6c1ce07343652e5","modified":1668053648009},{"_id":"public/archives/page/3/index.html","hash":"4d1cad38ec0a38048e3ce0036c63a7996b44da28","modified":1668053648009},{"_id":"public/archives/page/4/index.html","hash":"d920fad113d963f28441fcf843a753daa9f2f8c2","modified":1668053648009},{"_id":"public/archives/page/5/index.html","hash":"58cbfdb4229b4b01efebbcbfe930548be7f537f5","modified":1668053648009},{"_id":"public/archives/page/6/index.html","hash":"27af6c40538ca4c161b0d2acff4d0270a834ae65","modified":1668053648009},{"_id":"public/archives/page/7/index.html","hash":"5c45bfcad610ab0dc9fe56d015547c7d9da1d458","modified":1668053648010},{"_id":"public/archives/page/8/index.html","hash":"c8558877e38b71ca5b7957bf4a4bc6169e4b3151","modified":1668053648010},{"_id":"public/archives/page/9/index.html","hash":"304489e4e7c52a0a7370b1589b6e02722bb5908c","modified":1668053648010},{"_id":"public/archives/page/10/index.html","hash":"40ad1d5eafcc163cd4386b931e910c260ac8f343","modified":1668053648010},{"_id":"public/archives/page/11/index.html","hash":"1227ab19a94b44b1e4fc5bf2968e47e77f7a889e","modified":1668053648010},{"_id":"public/archives/page/12/index.html","hash":"5b6db86b827ec3266969f0500929cb90743047b0","modified":1668053648010},{"_id":"public/archives/page/13/index.html","hash":"ef6e6bf9c022e89dbf41b3e62bc97c588e2b99c7","modified":1668053648010},{"_id":"public/archives/page/14/index.html","hash":"6b8c65292422157386e047741e6f9ae1442879f1","modified":1668053648010},{"_id":"public/archives/page/15/index.html","hash":"29d657250976ab287caef29b55924a5636759b78","modified":1668053648010},{"_id":"public/archives/page/16/index.html","hash":"5dd0852385e3f4bd40215b4f4aaa508903548131","modified":1668053648010},{"_id":"public/archives/page/17/index.html","hash":"88b00410bf59ae896e31654876a458bb882854a2","modified":1668053648010},{"_id":"public/archives/2015/index.html","hash":"9aaf9524207bb9149a6d058af4393ea579e9c28d","modified":1668053648010},{"_id":"public/archives/2015/01/index.html","hash":"9644a159e2989ffaf104f8957718bef75db95900","modified":1668053648010},{"_id":"public/archives/2018/index.html","hash":"7a8207562cead8e1588efee8d0c9ce828ed6a54a","modified":1668053648010},{"_id":"public/archives/2018/08/index.html","hash":"de1d2e373d16a88b88c8e95821704b2f026971a9","modified":1668053648010},{"_id":"public/archives/2018/09/index.html","hash":"c2ed6a31013f96d9a523c75a2c7cc9d52cafb363","modified":1668053648010},{"_id":"public/archives/2019/index.html","hash":"16a3b852ca504a9003e28be5289c75818a0c2b69","modified":1668053648010},{"_id":"public/archives/2019/page/2/index.html","hash":"ba16efef968580b3441489311dce74838c9d0e41","modified":1668053648010},{"_id":"public/archives/2019/07/index.html","hash":"260310070dde254bd39bd77e801f8b1275a3812c","modified":1668053648010},{"_id":"public/archives/2019/08/index.html","hash":"635ee8a588e5b65f7236be7f215698408566d205","modified":1668053648010},{"_id":"public/archives/2019/10/index.html","hash":"d82e141237b391bfd864c6411b808f5116089623","modified":1668053648011},{"_id":"public/archives/2020/index.html","hash":"34ef0865a99f07cdb312b5a238502a60fc4a29fb","modified":1668053648011},{"_id":"public/archives/2020/page/2/index.html","hash":"159a086c1dbbf7ac6e8d25413cff3a7f95cb1dc1","modified":1668053648011},{"_id":"public/archives/2020/page/3/index.html","hash":"0280a7d831173aa7fab8d846943823c14179f3a8","modified":1668053648011},{"_id":"public/archives/2020/page/4/index.html","hash":"4535b7a0da91f7c0ea4be00660d4209a27bc8698","modified":1668053648011},{"_id":"public/archives/2020/page/5/index.html","hash":"a0b211b5585505d8429635a43860b4ca4a4b4bbb","modified":1668053648011},{"_id":"public/archives/2020/page/6/index.html","hash":"82021494d34c99a419ebd7ea380736f9fc204238","modified":1668053648011},{"_id":"public/archives/2020/page/7/index.html","hash":"c9027a81f3bd7b36ccd327776a13a177811bd010","modified":1668053648011},{"_id":"public/archives/2020/page/8/index.html","hash":"c478f64252c82f9c60eb28fdd694cedef6a3a6b9","modified":1668053648011},{"_id":"public/archives/2020/page/9/index.html","hash":"d66cd1fe91d2150bcdf18532b92208d955a2a811","modified":1668053648011},{"_id":"public/archives/2020/01/index.html","hash":"79825022ffee6bab9da5d90f647cb697ce7bf3ee","modified":1668053648011},{"_id":"public/archives/2020/01/page/2/index.html","hash":"8233a0c1fa75ac0fb14f3ac0c27e031f6eae0b97","modified":1668053648011},{"_id":"public/archives/2020/01/page/3/index.html","hash":"0a9522a41cc46ac0ee277fcae211b9c385793616","modified":1668053648011},{"_id":"public/archives/2020/01/page/4/index.html","hash":"e2b1b197e8510770ad5909826bacc8f35c57e81e","modified":1668053648011},{"_id":"public/archives/2020/01/page/5/index.html","hash":"b93aee8b7190cba8a7fe54b0e38a58a8dfafd22a","modified":1668053648011},{"_id":"public/archives/2020/01/page/6/index.html","hash":"97a66e0b0d24c14529b776360df7120b93fbbb16","modified":1668053648034},{"_id":"public/archives/2020/01/page/7/index.html","hash":"36f6bfaa4703b679a2d0255f959b985cec6154d7","modified":1668053648034},{"_id":"public/archives/2020/01/page/8/index.html","hash":"6dc5f0bf5392803139d1ee8700f29fd4bdbf6e06","modified":1668053648034},{"_id":"public/archives/2020/02/index.html","hash":"8a81b4b426611139142a54059ece6ec03bedb417","modified":1668053648034},{"_id":"public/archives/2020/03/index.html","hash":"a01a52a23b197ffa926c49c9fb0309a59a66a343","modified":1668053648034},{"_id":"public/archives/2020/07/index.html","hash":"fa205ee31e2d772ee45bc582dbf0374c996c5cd7","modified":1668053648034},{"_id":"public/archives/2021/index.html","hash":"9f0a95d2304a6c5f1fea31aa65edb5805fef1f49","modified":1668053648034},{"_id":"public/archives/2021/10/index.html","hash":"97f95dd013ef3d9cc7fb5a69be044c7918c387bf","modified":1668053648050},{"_id":"public/archives/2022/index.html","hash":"b6a31b91d0434ea51fdb603a6126c4b2e25fef4c","modified":1668053648050},{"_id":"public/archives/2022/page/2/index.html","hash":"f550b600b9d5e40deacde259f61da86c9ed5b3aa","modified":1668053648050},{"_id":"public/archives/2022/page/3/index.html","hash":"7263bcb1dbeec99b923ef408313929627f70f201","modified":1668053648050},{"_id":"public/archives/2022/page/4/index.html","hash":"8f8ce2082334e93e6e7fdfcf7a5c5913caa9c1cb","modified":1668053648050},{"_id":"public/archives/2022/page/5/index.html","hash":"3f10d7527c66b7909ab97d279a1b203626733902","modified":1668053648050},{"_id":"public/archives/2022/09/index.html","hash":"04584de57e9316716c708597d01f691ce2df7fcd","modified":1668053648050},{"_id":"public/archives/2022/09/page/2/index.html","hash":"1b8aaffa0e39f4fce59124933130a2fa816a9c07","modified":1668053648050},{"_id":"public/archives/2022/10/index.html","hash":"68e0c9edeb9d8b882712cee3e8e2149350fe0254","modified":1668053648050},{"_id":"public/archives/2022/11/index.html","hash":"c38c6bac951d45570897c8abe66dde127277ea9b","modified":1668053648050},{"_id":"public/archives/2022/11/page/2/index.html","hash":"e735c42db1a9738f007d314bad73e76b42131a36","modified":1668053648050},{"_id":"public/categories/前端/index.html","hash":"c6e99fd35d58095b4de7581cdf542a1de1f59d64","modified":1668053648050},{"_id":"public/categories/Javascript/index.html","hash":"269f21bf232757a15c0d618ea091eae14eb030ab","modified":1668053648050},{"_id":"public/categories/Typescript/index.html","hash":"1b81c71d545d1759d61d0fe9bb1d2b5d87069703","modified":1668053648050},{"_id":"public/categories/Vue2/index.html","hash":"334d0f704cb10daf333eee2db6cab0693d3f3731","modified":1668053648051},{"_id":"public/categories/Docker/index.html","hash":"71bf8d718e1659312407309c08cd97be5fe584bc","modified":1668053648051},{"_id":"public/categories/Java/index.html","hash":"8270ea124b1ad7022752c597891aa95590f58e68","modified":1668053648051},{"_id":"public/categories/Java/page/2/index.html","hash":"c4971fa06c07810d3fc4a2f0b72219288bf6b872","modified":1668053648051},{"_id":"public/categories/Java/page/3/index.html","hash":"6f4f5bd1e44b7ad68fa2783bff653c02ea22f016","modified":1668053648051},{"_id":"public/categories/Java/page/4/index.html","hash":"cd19c62aa61cc0734aedec6459ac2df63bc89063","modified":1668053648051},{"_id":"public/categories/Java/page/5/index.html","hash":"9bac6d1c154f31df3aa90ed75a68609d66d3e189","modified":1668053648051},{"_id":"public/categories/Java/page/6/index.html","hash":"8cf3aa825e056859436ca53d4354d7e428edbf56","modified":1668053648051},{"_id":"public/categories/Java/page/7/index.html","hash":"53e765917a1985cd56969b6fcfb70642eda27a97","modified":1668053648051},{"_id":"public/categories/Java/page/8/index.html","hash":"c29f45ec8fd266a66fbfb7acfb4c78d8671c1aa5","modified":1668053648051},{"_id":"public/categories/Java/page/9/index.html","hash":"bc33f62cba4bbf43a6c7539f79ee0551af99d95e","modified":1668053648051},{"_id":"public/categories/科学计算/index.html","hash":"058e0c524050d7e2d8956795362f0af7a375f4a0","modified":1668053648051},{"_id":"public/categories/Maven/index.html","hash":"5b603acf992bc356d41dd247c3f907e0d98d3af8","modified":1668053648051},{"_id":"public/categories/数据库/index.html","hash":"769a1f052072fab046cb72f177244312b9691fd6","modified":1668053648051},{"_id":"public/categories/Nginx/index.html","hash":"b5c18ac04688904835ad974e1d88659eed8d0691","modified":1668053648051},{"_id":"public/categories/Nginx/page/2/index.html","hash":"8fa8ea4b5f70fe138c08aec11144caf353c6173b","modified":1668053648051},{"_id":"public/categories/行人重识别/index.html","hash":"a098cfbeb17d86b2a4f65b556e15c61c975a0399","modified":1668053648057},{"_id":"public/categories/数据集/index.html","hash":"04cdd003010c16a483a26d1cadc6d9c10bcd1c03","modified":1668053648058},{"_id":"public/categories/后端/index.html","hash":"c63f4d6e63593a87e5b9d3d63c707983765d9ea2","modified":1668053648059},{"_id":"public/categories/git/index.html","hash":"8add6e049bd77bbf0f62ae1a30e7b919bd11c43e","modified":1668053648059},{"_id":"public/categories/MyBatys/index.html","hash":"b0af934d03a0499480f58e1eadcc73717c8bb613","modified":1668053648059},{"_id":"public/categories/python/index.html","hash":"2f01e4df3034046378ccd82849da8643dc6e7a88","modified":1668053648059},{"_id":"public/categories/设计模式/index.html","hash":"640c6f1046b8051142796359dbec4a22fb5cd695","modified":1668053648059},{"_id":"public/categories/机器学习/index.html","hash":"502f99a96584acf82048195259bc7305f5f9d63d","modified":1668053648059},{"_id":"public/categories/深度学习/index.html","hash":"9e151a545adcdc8daeabda0ac1b3323d16e38728","modified":1668053648059},{"_id":"public/categories/论文笔记/index.html","hash":"cd673cb2427818ab6e5d6c2a8c745c71f31000ef","modified":1668053648059},{"_id":"public/categories/MySQL/index.html","hash":"a7383229f85ea78fce2e02266f19556b381d4436","modified":1668053648059},{"_id":"public/2022/11/10/Nginx_Basic_case_configuration/index.html","hash":"084ddeb74a16326745744442b74ff5504df59b93","modified":1668053648034},{"_id":"public/2022/11/10/Nginx_Configuration_file/index.html","hash":"10609efa23f7618039df85ad535bd11d246510f6","modified":1668053648034},{"_id":"public/2022/11/10/Nginx_Static_resource_deployment/index.html","hash":"7c116ae2160e8e08186fda681304b202733b72d5","modified":1668061197448},{"_id":"public/2022/11/09/Nginx_Base_Use/index.html","hash":"169a1271220105e4dd82848a1e6359be7129892a","modified":1668053648035},{"_id":"public/2022/11/09/Nginx_install/index.html","hash":"970c7caafee2b36a9d0a9f39288fdbe908798fc8","modified":1668053648035},{"_id":"public/2022/11/08/Nginx_introduce/index.html","hash":"aca5a2dd26da310e3b03fa3944a6bd719d9e72b4","modified":1668053648035},{"_id":"public/2022/11/03/09_Java程序员要掌握的前端-ts/index.html","hash":"30221bc056509f007619aa74321be6b14baa8885","modified":1668053648035},{"_id":"public/2022/11/03/09_Java程序员要掌握的前端-vue2/index.html","hash":"841b7a3eaa5cc9d19713a3f1a1745d9c93d54535","modified":1668053648035},{"_id":"public/2022/10/24/07_Java程序员要掌握的前端_HTML&CSS/index.html","hash":"e410af56514999a55965d45a169a6ab6c1ecdb22","modified":1668053648035},{"_id":"public/2022/10/20/08_Java程序员要掌握的前端-js/index.html","hash":"bbf2bc3e7c413b993003a0941667cbc213e00b59","modified":1668053648035},{"_id":"public/2022/09/21/Mysql主从复制基于Docker的实现/index.html","hash":"6ccf1797be1b956acde491c35378cae26d490d96","modified":1668053648035},{"_id":"public/2022/09/19/代理模式/index.html","hash":"a9b2b61ec06bda843c609e0e7b01cbbd65156478","modified":1668053648035},{"_id":"public/2022/09/13/SpringMVC - 获取Get请求参数详解/index.html","hash":"ae4183f400fa51095b288a675ff6060de72fc725","modified":1668053648035},{"_id":"public/2022/09/08/servlet进化之旅/index.html","hash":"31c0c4f0d5408b29a1e7b98e8606c1140f90af7f","modified":1668053648035},{"_id":"public/2022/09/07/MySql/index.html","hash":"80d60cb00fad5fe6e3d6b90224e143792ce603b6","modified":1668053648036},{"_id":"public/2022/09/06/Maven中dependence和dependenceManagement/index.html","hash":"cde6b91a28b9926b5e87ef68eedc8df523e2c6b5","modified":1668053648036},{"_id":"public/2020/07/14/论文笔记（一）/index.html","hash":"d60928b57cc806facb2850287a0c310b06774f9f","modified":1668053648036},{"_id":"public/2020/03/16/Java学习之路(37)/index.html","hash":"8ca05e0eca5be319259b09e851f4c34aa58bd84f","modified":1668053648036},{"_id":"public/2020/01/27/Java学习之路(21)/index.html","hash":"b0ff0c95c231ae8ebb03269c54897c43e269a5fc","modified":1668053648036},{"_id":"public/2019/08/28/mnist数据集下载与处理/index.html","hash":"2159ce0e42c146ebfc1f8c132940017b60934d28","modified":1668053648036},{"_id":"public/2019/08/22/行人重识别代码实战（一）/index.html","hash":"daf110f899bbd32060732fa4b60248e1345704c8","modified":1668053648036},{"_id":"public/2019/07/31/行人重识别初识/index.html","hash":"2c3de2c70b928f14bf12b336c28267345ee0f5cf","modified":1668053648036},{"_id":"public/2018/09/20/鱼书踩坑（一）/index.html","hash":"cde0fc128386153ce76aeff1790801cff5fe0044","modified":1668053648036},{"_id":"public/2018/08/19/激活函数（一）/index.html","hash":"7d40c547b1be23b91cf139978494b841d81bdba8","modified":1668053648036},{"_id":"public/index.html","hash":"679fbc5795bb722ebb9fc43083071bd3272eb1ad","modified":1668061197579},{"_id":"public/page/2/index.html","hash":"1a13b8fbc78262c1e14e05f2c7aa5945981325ba","modified":1668053648067},{"_id":"public/page/3/index.html","hash":"c3ff673caba33d1c21e4f6ad6a381532395fed2e","modified":1668053648067},{"_id":"public/page/4/index.html","hash":"eb4e01b7b794145d4333dd4a35ece376e82efbc1","modified":1668053648067},{"_id":"public/page/5/index.html","hash":"673d99f6a6b2e6fdbe1a2ef94b57eeab993bdcc5","modified":1668053648067},{"_id":"public/page/6/index.html","hash":"734bab82046e2e37e073a28609981abeddab8e7d","modified":1668053648067},{"_id":"public/page/7/index.html","hash":"c8ec7b235dc9c45f8ff1e3d8d68a0af1dbbe788d","modified":1668053648068},{"_id":"public/page/8/index.html","hash":"9444c35b48034b797ae3eb06af6c4c935b8436eb","modified":1668053648068},{"_id":"public/page/9/index.html","hash":"42547e032fafc28900bae2b41d81a60d8a2b4bfe","modified":1668053648068},{"_id":"public/page/17/index.html","hash":"4636304ac81c54c10d205b34a95818439e8ff696","modified":1668053648059},{"_id":"public/tags/编程/index.html","hash":"d6e52b75e34f68e04a971a7aa2f8aa2b627c600c","modified":1668053648059},{"_id":"public/tags/编程/page/2/index.html","hash":"21c6d1fb727eb62b6a9a2c6648343dd729b54a3f","modified":1668053648059},{"_id":"public/tags/编程/page/3/index.html","hash":"c8db9d05bd409263e48dd4559bbd6d764cb59016","modified":1668053648059},{"_id":"public/tags/编程/page/4/index.html","hash":"a5653c57e281bdaae9d6d3b1fa154f2b20e2d192","modified":1668053648059},{"_id":"public/tags/编程/page/5/index.html","hash":"b6774116f0659b7bbcb057cdecd5266baa218019","modified":1668053648059},{"_id":"public/tags/编程/page/6/index.html","hash":"0a08a9653c1cf6ee1966112211fffb62f03931df","modified":1668053648059},{"_id":"public/tags/编程/page/7/index.html","hash":"f3c596146aea3ecd6d1f1593fd808f95050751ff","modified":1668053648059},{"_id":"public/tags/编程/page/8/index.html","hash":"04069450881740ee62a3d31b64ff0f8190adfa73","modified":1668053648060},{"_id":"public/tags/编程/page/9/index.html","hash":"68f467c722b8403a121f4dcc7d75159390597291","modified":1668053648060},{"_id":"public/tags/编程/page/10/index.html","hash":"12057e22215273d7c895a1b643d9b98bc0c0f9ed","modified":1668053648060},{"_id":"public/tags/学习/index.html","hash":"d30f2a15f9831cfd215d2299ed650a7384f8deb9","modified":1668053648060},{"_id":"public/tags/学习/page/2/index.html","hash":"94a1a41788394a6c890a23ab30ddad5051de3eee","modified":1668053648060},{"_id":"public/tags/学习/page/3/index.html","hash":"c9f080c09cbb1fa0e3acd056d3179eb71bed7d1f","modified":1668053648060},{"_id":"public/tags/学习/page/4/index.html","hash":"ab34e324d8a224e5b997d7c57014c806a33430ad","modified":1668053648060},{"_id":"public/tags/学习/page/5/index.html","hash":"7c692f951397c540f06041f93a9e6013cacd8c9e","modified":1668053648060},{"_id":"public/tags/学习/page/6/index.html","hash":"2e2850f16fb195216b7b6985bbc36154fe58a67d","modified":1668053648060},{"_id":"public/tags/学习/page/7/index.html","hash":"70220e82de210af281011a2c8e720de25030a103","modified":1668053648060},{"_id":"public/tags/学习/page/8/index.html","hash":"e685428b3f862264b73ed2a6554480cfc5d738a2","modified":1668053648060},{"_id":"public/tags/学习/page/9/index.html","hash":"7e0f7663367c1b9198862fa2e69a8af709a7a93d","modified":1668053648060},{"_id":"public/tags/学习/page/10/index.html","hash":"91f3a8d0e2595916431bf96152d253654d658bd6","modified":1668053648060},{"_id":"public/tags/HTML/index.html","hash":"6b966a795c1645ab9f112ff90092b03be0697f14","modified":1668053648060},{"_id":"public/tags/CSS/index.html","hash":"bd62155c8b08a599d34b3f7134864773d4c08cc0","modified":1668053648060},{"_id":"public/tags/前端/index.html","hash":"2aeecff7246809f29184bb7f1f0bb338dd1c10ab","modified":1668053648060},{"_id":"public/tags/Javascript/index.html","hash":"5b7b11dee22ef427a562530b4d69d4469493b68e","modified":1668053648060},{"_id":"public/tags/Typescript/index.html","hash":"9e65bf986c5c443d397d6c012c7e93a190c8e9a1","modified":1668053648061},{"_id":"public/tags/Vue2/index.html","hash":"707a018156e38e00da7dc27ffef657ceb1437d7a","modified":1668053648061},{"_id":"public/tags/Redis/index.html","hash":"12a57d304d8f7b0d14d5da9ec1731c37944b4e44","modified":1668053648061},{"_id":"public/tags/Docker/index.html","hash":"2ab99bf7032df27e139d0918ffaf10d5c9c6226e","modified":1668053648061},{"_id":"public/tags/Java/index.html","hash":"d73ed25c36b552b3ad11ab73620c8c9c6271cdbc","modified":1668053648061},{"_id":"public/tags/Java/page/2/index.html","hash":"fe2516a6f8e2d3de2bd89da9529646e21cf94ca8","modified":1668053648061},{"_id":"public/tags/Java/page/3/index.html","hash":"616a17ef862d4787cca203f6e4e45c257baa5de9","modified":1668053648061},{"_id":"public/tags/Java/page/4/index.html","hash":"7a821b45de15c33531c3dcacf2d79b6a5c2849cf","modified":1668053648061},{"_id":"public/tags/Java/page/5/index.html","hash":"a927158ee058fb4672e276d867e11804ff002d65","modified":1668053648061},{"_id":"public/tags/Java/page/6/index.html","hash":"769c2ea975189586b77dcdab137d5c00281a30a9","modified":1668053648061},{"_id":"public/tags/Java/page/7/index.html","hash":"6814f4fc8c0b480e6e1a2d19e785609dd184af34","modified":1668053648061},{"_id":"public/tags/Java/page/8/index.html","hash":"f636d35f8b6ae1e420b68c22b539f8ee31111765","modified":1668053648061},{"_id":"public/tags/Java/page/9/index.html","hash":"f1474e53d757fcbc714a2bdcfb0d82074a08e6a3","modified":1668053648061},{"_id":"public/tags/坑/index.html","hash":"52009d37882204439a8d7875d3faf6e93eb94330","modified":1668053648061},{"_id":"public/tags/Matlab/index.html","hash":"059adb81ec9017a67b264d075a0aa09f9afb5b89","modified":1668053648061},{"_id":"public/tags/数学建模/index.html","hash":"dc01ae7bc3ae877be9f528c3ea538a371e06c350","modified":1668053648061},{"_id":"public/tags/Maven/index.html","hash":"adbaf2f541d35c2cd1cee47a93fc1fde15dfce89","modified":1668053648061},{"_id":"public/tags/Mysql/index.html","hash":"8501199252e3cc8acfbd9258bbdb5cb33f0779eb","modified":1668053648061},{"_id":"public/tags/数据库/index.html","hash":"0e566e6bfe8941906c09b90cede1e3917965eeed","modified":1668053648061},{"_id":"public/tags/后端/index.html","hash":"52b2c1e0df182a01184d101374075af6e9983972","modified":1668053648061},{"_id":"public/tags/后端/page/2/index.html","hash":"27bc8abaed9d49f6953240e8015a5d0f16373ee9","modified":1668053648061},{"_id":"public/tags/Nginx/index.html","hash":"1831b3d214270a800aa061dab1e727a5f0b19d4e","modified":1668053648062},{"_id":"public/tags/Nginx/page/2/index.html","hash":"bee07fe98cca9ba68f93b75e085a2884539bcfd7","modified":1668053648062},{"_id":"public/tags/中间件/index.html","hash":"8937b77b822b528b132c96a1562422f165b4b21e","modified":1668053648062},{"_id":"public/tags/中间件/page/2/index.html","hash":"b8430b0623d140c3956e048076f12c87871f17d5","modified":1668053648062},{"_id":"public/tags/行人重识别/index.html","hash":"cdedfdfc8c056f48ccc52a56edc6a08d31177618","modified":1668053648062},{"_id":"public/tags/行人重识别/page/2/index.html","hash":"16db44b380b526d318498dfc92d4c76ee05d8c07","modified":1668053648062},{"_id":"public/tags/论文/index.html","hash":"7d08b624d58cb2e014a7cf1c8036f58179a05810","modified":1668053648062},{"_id":"public/tags/数据集/index.html","hash":"8aca475356e272446eb445a91c3869e031f8cc75","modified":1668053648062},{"_id":"public/tags/JavaWeb/index.html","hash":"c223b777002f1bc1e8a5f40a4faf915e83faa184","modified":1668053648062},{"_id":"public/tags/SpringMVC/index.html","hash":"99ff14a42bdbcfac1cc904427e65fcc361051b13","modified":1668053648062},{"_id":"public/tags/RESTful/index.html","hash":"7930f05a8cf6e549f358b74ffff325fab239acbc","modified":1668053648062},{"_id":"public/tags/git/index.html","hash":"2b29857f6c5eef3bc2cb99dd161d22dd2c88d091","modified":1668053648062},{"_id":"public/tags/python/index.html","hash":"16a22cc13ffac216e49071e4032eb5a7b298ef21","modified":1668053648062},{"_id":"public/tags/手写识别/index.html","hash":"5b07ff731b1f4c6effa975a62adfeb64cf90c57e","modified":1668053648062},{"_id":"public/tags/MNIST/index.html","hash":"ab41d8f39a42f034e47dceca7e796af22e57bab2","modified":1668053648062},{"_id":"public/tags/图像识别/index.html","hash":"2495305c8922713dfaaa11fc003c0a9e953e0cde","modified":1668053648062},{"_id":"public/tags/MyBatis/index.html","hash":"02cc880f3170eb47a4540caaf768c71409fbe637","modified":1668053648066},{"_id":"public/tags/numpy/index.html","hash":"2c3e96bacd4878a1e1db2caf6fd3df89953a7980","modified":1668053648066},{"_id":"public/tags/Servlet/index.html","hash":"65c8f7684df175ebd005927620c682eb60d68b6c","modified":1668053648066},{"_id":"public/tags/Tomcat/index.html","hash":"d495114592280d98fc3473b23872768521a4496d","modified":1668053648066},{"_id":"public/tags/设计模式/index.html","hash":"dd332fc54a65e0416620c5440470df3b7dbf87fc","modified":1668053648066},{"_id":"public/tags/代理模式/index.html","hash":"0603aac7e6409e44f618dc8b40aad62535a4ed83","modified":1668053648066},{"_id":"public/tags/神经网络/index.html","hash":"040a5f743f3b41d8f23a27d80b8382d24c345698","modified":1668053648066},{"_id":"public/tags/激活函数/index.html","hash":"769c1e1a2b97e52112ed35df28ab839d348e16c2","modified":1668053648066},{"_id":"public/tags/代数系统/index.html","hash":"2b20147e29cd260a0b9b8d231b03bb864c56187a","modified":1668053648066},{"_id":"public/tags/感知机/index.html","hash":"cb8456837d2039dbd8e4fa8e78c921605faa8209","modified":1668053648066},{"_id":"public/tags/Web服务器/index.html","hash":"82e4ae548bad58ae2854d693decd09591ef0eb2c","modified":1668053648066},{"_id":"public/tags/深度学习/index.html","hash":"882974f5a7cf3b9befe086e1a1c69487e8e84bc4","modified":1668053648066},{"_id":"public/tags/深度学习/page/2/index.html","hash":"ab556b58a02362ea7a42a7df81a92b7ddef711e0","modified":1668053648066},{"_id":"public/tags/图像处理/index.html","hash":"d85aed033d6c1d1cefb6cae7508e10d5ee6e7e6d","modified":1668053648067},{"_id":"public/tags/图像处理/page/2/index.html","hash":"d327dade76f2a6b29a01ec9662f9f5e9409ab4e2","modified":1668053648067},{"_id":"public/tags/目标检测/index.html","hash":"e078103d76f4b949a7f58ae54c5a708a8b441b3f","modified":1668053648067},{"_id":"public/tags/MySQL/index.html","hash":"5da17152cdd509ff72ddfc6cda5709d5fca242e7","modified":1668053648067},{"_id":"public/page/10/index.html","hash":"64ad572d0255296db41cb8c6bbd210ef1d137b88","modified":1668053648068},{"_id":"public/page/11/index.html","hash":"7721166d8b94e3eab8935e4a30a84568d0d91eda","modified":1668053648068},{"_id":"public/page/12/index.html","hash":"266a1bd64ea3f523356f86cc9ba62b3c52f9448e","modified":1668053648068},{"_id":"public/page/13/index.html","hash":"e5bf252b7d4c094489e8912c912d4bc5581578d4","modified":1668053648068},{"_id":"public/page/14/index.html","hash":"4332420747db3663617e91fcfb5891516f003ef3","modified":1668053648068},{"_id":"public/page/15/index.html","hash":"4a1490b2781ea7dbf7657aa966d205efdccf88e3","modified":1668053648068},{"_id":"public/page/16/index.html","hash":"b42fae933192775acc26e568be079afa8b831a22","modified":1668053648068},{"_id":"public/favicon.ico","hash":"6cdeaa296bfb310e0cfa886e5220364778b8891f","modified":1668053406647},{"_id":"public/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1668053406647},{"_id":"public/img/avatar.png","hash":"48e410926305699eac0f559bb13ce776ae3d2f5a","modified":1668053406647},{"_id":"public/assets/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1668053406647},{"_id":"public/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1668053407693},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1668053407693},{"_id":"public/js/copy.js","hash":"8d5080cd13ef6b50f5c0c22c140bba44cc5ee7fc","modified":1668053407693},{"_id":"public/js/fancybox.js","hash":"cb63b81c05fcf1cee9f41befd84c41eeb55e5fce","modified":1668053407693},{"_id":"public/js/fireworks.js","hash":"17d5770d46d9b531b675b129835561146290af83","modified":1668053407693},{"_id":"public/js/head.js","hash":"212a32f824cadea0167bf4204c9714df5b7e5f5d","modified":1668053407693},{"_id":"public/js/scroll.js","hash":"50aee3035949bbc178eafd86adf19fd51916640d","modified":1668053407693},{"_id":"public/js/sidebar.js","hash":"a42109c5a69dedc87e1aaf8cb2383fd43069677e","modified":1668053407693},{"_id":"public/js/transition.js","hash":"998c3bb6523a248d4dd4d747510c03a914a6378d","modified":1668053407693},{"_id":"public/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1668053407693},{"_id":"public/js/search/algolia.js","hash":"8d2cc7ac4a015563344a3981c3040d308489935c","modified":1668053407693},{"_id":"public/js/search/local-search.js","hash":"b7e77c27097d9d3ced13618912069d1ddf1cd64a","modified":1668053407693},{"_id":"public/js/third-party/anime.min.js","hash":"3c46c9597c721644a515c1c54ab13f46406657f7","modified":1668053407694},{"_id":"public/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1668053407694},{"_id":"public/js/third-party/reveal/markdown.min.js","hash":"859d70cd7c459819b90fe27afb940d16ecff6614","modified":1668053407694},{"_id":"public/js/third-party/reveal/math.min.js","hash":"779c98dbd83a528f27ea4b9f2d420c957c0939ba","modified":1668053407694},{"_id":"public/js/third-party/reveal/notes.min.js","hash":"4bb2925b111467791fdef3c4e4b41993d59ce90f","modified":1668053407694},{"_id":"public/js/third-party/reveal/zoom.min.js","hash":"aca47bf417d451c4d364c6eb287a230e4b462b17","modified":1668053407694},{"_id":"public/js/third-party/reveal/head.min.js","hash":"95c9de30444117adbbb3218070fda00af187a76a","modified":1668053407694},{"_id":"public/css/index.css","hash":"ff961356fa910e1a9f7a4233644af68b82cdf6f7","modified":1668053407694},{"_id":"public/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1668053407694},{"_id":"public/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1668053407694},{"_id":"public/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1668053407694},{"_id":"public/js/third-party/reveal/marked.min.js","hash":"37f3186f93ec854f56bf745a5988a89225e8da6c","modified":1668053407694},{"_id":"public/js/third-party/reveal/reveal.min.js","hash":"d8377a86451712488dea87caf5acbf8e97aa991f","modified":1668053407694},{"_id":"public/js/third-party/reveal/highlight.min.js","hash":"10dd530e712a67f25cf27845213c0f28d2fe9e4d","modified":1668053407694}],"Category":[{"name":"前端","_id":"claajxb3w0002a8vwgmhi16xq"},{"name":"Javascript","_id":"claajxb420007a8vwpoi9yvh4"},{"name":"Typescript","_id":"claajxb45000ba8vwefoy9ycc"},{"name":"Vue2","_id":"claajxb46000ea8vwydghl77c"},{"name":"Docker","_id":"claajxb46000ha8vw9kgyyqwd"},{"name":"Java","_id":"claajxb47000ka8vwaz1kxa0v"},{"name":"科学计算","_id":"claajxdko006va8vwvczbl2iu"},{"name":"Maven","_id":"claajxdl4007aa8vw0xbq1y8v"},{"name":"数据库","_id":"claajxdlc007ia8vw2tz5w523"},{"name":"Nginx","_id":"claajxdlf007qa8vwsmlrucak"},{"name":"行人重识别","_id":"claajxdm7008ua8vwnybqdfz8"},{"name":"数据集","_id":"claajxdmb0094a8vwupvdgauj"},{"name":"后端","_id":"claajxdme009ba8vwt3wz1tm6"},{"name":"git","_id":"claajxdmh009ia8vwhoek7va1"},{"name":"MyBatys","_id":"claajxdmp00a1a8vw1frne1yb"},{"name":"python","_id":"claajxdmr00a8a8vwn1r73d7m"},{"name":"设计模式","_id":"claajxdn800aja8vwqg2u6fdo"},{"name":"机器学习","_id":"claajxdn900apa8vw8d6divfu"},{"name":"深度学习","_id":"claajxdnf00b8a8vwrt918hvl"},{"name":"论文笔记","_id":"claajxdnk00boa8vwj5dcmvpg"},{"name":"MySQL","_id":"claajxdq000f7a8vwindp91j3"}],"Data":[{"_id":"melody","data":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true}}],"Page":[{"title":"About Me","date":"2018-11-16T10:33:35.000Z","comments":0,"_content":"\n<center>\n\n**<font size=6>Hi 👋 Yu's here.</font>**\n\n</center>\n\n- 💻 Computer Science & Technology\n- 👨‍💻 Normal postgraduate boi\n- 📝 Use Spring backend, Vue.JS or React for frontend\n- 🌟 Make something to improve the world\n- 💕 Opensource\n\n---\n\n<center>\n<figure>\n\n![34a20deb56a7dfb657d99f7415d644da.png](https://img.gejiba.com/images/34a20deb56a7dfb657d99f7415d644da.png)\n\n![38472bc08bcd32a858f614873c8aeb72.png](https://img.gejiba.com/images/38472bc08bcd32a858f614873c8aeb72.png)\n\n![skills](https://skillicons.dev/icons?i=bash,css,docker,dotnet,electron,express,git,github,html,js,linux,md,mongodb,nextjs,nodejs,postgres,pr,prisma,py,raspberrypi,react,redis,regex,sass,stackoverflow,ts,visualstudio,vscode,vue,workers)\n\n</figure>\n</center>","source":"about/index.md","raw":"---\ntitle: About Me\ndate: 2018-11-16 18:33:35\ncomments: false\n---\n\n<center>\n\n**<font size=6>Hi 👋 Yu's here.</font>**\n\n</center>\n\n- 💻 Computer Science & Technology\n- 👨‍💻 Normal postgraduate boi\n- 📝 Use Spring backend, Vue.JS or React for frontend\n- 🌟 Make something to improve the world\n- 💕 Opensource\n\n---\n\n<center>\n<figure>\n\n![34a20deb56a7dfb657d99f7415d644da.png](https://img.gejiba.com/images/34a20deb56a7dfb657d99f7415d644da.png)\n\n![38472bc08bcd32a858f614873c8aeb72.png](https://img.gejiba.com/images/38472bc08bcd32a858f614873c8aeb72.png)\n\n![skills](https://skillicons.dev/icons?i=bash,css,docker,dotnet,electron,express,git,github,html,js,linux,md,mongodb,nextjs,nodejs,postgres,pr,prisma,py,raspberrypi,react,redis,regex,sass,stackoverflow,ts,visualstudio,vscode,vue,workers)\n\n</figure>\n</center>","updated":"2022-09-05T09:29:56.625Z","path":"about/index.html","layout":"page","_id":"claajxdjf0061a8vwb5i9wnew","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><center>\n\n<p><strong><font size=\"6\">Hi 👋 Yu’s here.</font></strong></p>\n</center>\n\n<ul>\n<li>💻 Computer Science &amp; Technology</li>\n<li>👨‍💻 Normal postgraduate boi</li>\n<li>📝 Use Spring backend, Vue.JS or React for frontend</li>\n<li>🌟 Make something to improve the world</li>\n<li>💕 Opensource</li>\n</ul>\n<hr>\n<center>\n<figure>\n\n<p><img src=\"https://img.gejiba.com/images/34a20deb56a7dfb657d99f7415d644da.png\" alt=\"34a20deb56a7dfb657d99f7415d644da.png\"></p>\n<p><img src=\"https://img.gejiba.com/images/38472bc08bcd32a858f614873c8aeb72.png\" alt=\"38472bc08bcd32a858f614873c8aeb72.png\"></p>\n<p><img src=\"https://skillicons.dev/icons?i=bash,css,docker,dotnet,electron,express,git,github,html,js,linux,md,mongodb,nextjs,nodejs,postgres,pr,prisma,py,raspberrypi,react,redis,regex,sass,stackoverflow,ts,visualstudio,vscode,vue,workers\" alt=\"skills\"></p>\n</figure>\n</center>","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<center>\n\n<p><strong><font size=\"6\">Hi 👋 Yu’s here.</font></strong></p>\n</center>\n\n<ul>\n<li>💻 Computer Science &amp; Technology</li>\n<li>👨‍💻 Normal postgraduate boi</li>\n<li>📝 Use Spring backend, Vue.JS or React for frontend</li>\n<li>🌟 Make something to improve the world</li>\n<li>💕 Opensource</li>\n</ul>\n<hr>\n<center>\n<figure>\n\n<p><img src=\"https://img.gejiba.com/images/34a20deb56a7dfb657d99f7415d644da.png\" alt=\"34a20deb56a7dfb657d99f7415d644da.png\"></p>\n<p><img src=\"https://img.gejiba.com/images/38472bc08bcd32a858f614873c8aeb72.png\" alt=\"38472bc08bcd32a858f614873c8aeb72.png\"></p>\n<p><img src=\"https://skillicons.dev/icons?i=bash,css,docker,dotnet,electron,express,git,github,html,js,linux,md,mongodb,nextjs,nodejs,postgres,pr,prisma,py,raspberrypi,react,redis,regex,sass,stackoverflow,ts,visualstudio,vscode,vue,workers\" alt=\"skills\"></p>\n</figure>\n</center>"},{"title":"分类","date":"2018-01-04T16:00:00.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-01-05 00:00:00\ntype: \"categories\"\n---","updated":"2019-07-11T08:52:16.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"claajxdji0063a8vw15vw6vju","content":"<script src=\"/assets/js/APlayer.min.js\"> </script>","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":""},{"title":"标签","date":"2018-01-04T16:00:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-01-05 00:00:00\ntype: \"tags\"\n---","updated":"2019-07-11T08:52:26.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"claajxdjl0066a8vwp7ry0yrv","content":"<script src=\"/assets/js/APlayer.min.js\"> </script>","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":""}],"Post":[{"title":"HTML&CSS知识点总结","date":"2022-10-23T16:00:00.000Z","_content":"\n# HTML 与 CSS\n\nHTML 是什么：即 HyperText Markup language 超文本标记语言，咱们熟知的网页就是用它编写的，HTML 的作用是定义网页的内容和结构。\n\n* HyperText 是指用超链接的方式组织网页，把网页联系起来\n* Markup 是指用 `<标签>` 的方式赋予内容不同的功能和含义\n\nCSS 是什么：即 Cascading  Style  Sheets 级联（层叠）样式表，它描述了网页的表现与展示效果\n\n\n\n## 1. HTML 元素\n\nHTML 由一系列元素 `elements` 组成，例如\n\n```html\n<p>Hello, world!</p>\n```\n\n* 整体称之为元素\n* `<p>` 和 `</p>` 分别称为起始和结束标签\n* 标签包围起来的 Hello, world 称之为内容\n\n* p 是预先定义好的 html 标签，作用是将内容作为一个单独的段落\n\n\n\n元素还可以有属性，如\n\n```html\n<p id=\"p1\">Hello, world!</p>\n```\n\n* 属性一般是预先定义好的，这里的 id 属性是给元素一个唯一的标识\n\n\n\n元素之间可以嵌套，如\n\n```html\n<p>HTML 是一门非常<b>强大</b>的语言</p>\n```\n\n错误嵌套写法：\n\n```html\n<p>HTML 是一门非常<b>强大的语言</p></b>\n```\n\n\n\n不包含内容的元素称之为空元素，如\n\n```html\n<img src=\"1.png\">\n<img src=\"1.png\"/>\n```\n\n* img 作用是用来展示图片\n* src 属性用来指明图片路径\n\n\n\n## 2. HTML 页面\n\n前面介绍的只是单独的 HTML 元素，它们可以充当一份完整的 HTML 页面的组成部分\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>测试页面</title>\n  </head>\n  <body>\n    <p id=\"p1\">Hello, world!</p>\n    <img src=\"1.png\">\n  </body>\n</html>\n```\n\n* `html` 元素囊括了页面中所有其它元素，整个页面只需一个，称为根元素\n* `head` 元素包含的是那些不用于展现内容的元素，如 `title`，`link`，`meta` 等\n* `body` 元素包含了对用户展现内容的元素，例如后面会学到的用于展示文本、图片、视频、音频的各种元素\n\n\n\n## 3. 常见元素\n\n### 1) 文本\n\n#### Heading\n\n```html\n<h1>1号标题</h1>\n<h2>2号标题</h2>\n<h3>3号标题</h3>\n<h4>4号标题</h4>\n<h5>5号标题</h5>\n<h6>6号标题</h6>\n```\n\n\n\n#### Paragraph\n\n```html\n<p>段落</p>\n```\n\n\n\n#### List\n\n无序列表 unordered list\n\n```html\n<ul>\n    <li>列表项1</li>\n    <li>列表项2</li>\n    <li>列表项3</li>\n</ul>\n```\n\n有序列表\n\n```html\n<ol>\n    <li>列表项1</li>\n    <li>列表项2</li>\n    <li>列表项3</li>\n</ol>\n```\n\n多级列表\n\n```html\n<ul>\n    <li>\n    \t北京市\n        <ul>\n            <li>海淀区</li>\n            <li>朝阳区</li>\n            <li>昌平区</li>\n        </ul>\n    </li>\n    <li>\n    \t河北省\n        <ul>\n            <li>石家庄</li>\n            <li>保定</li>\n        </ul>\n    </li>\n</ul>\n```\n\n\n\n#### Anchor\n\n锚，超链接\n\n```html\n<a href=\"网页地址\">超链接文本</a>\n```\n\n\n\n### 2) 多媒体\n\n#### Image\n\n```html\n<img src=\"文件路径\">\n```\n\nsrc 格式有 3 种\n\n* 文件地址\n\n* data URL，格式如下\n\n  ```\n  data:媒体类型;base64,数据\n  ```\n\n* object URL，需要配合 javascript 使用\n\n#### Video\n\n```html\n<video src=\"文件路径\"></video>\n```\n\n#### Audio\n\n```html\n<audio src=\"文件路径\"></audio>\n```\n\n\n\n### 3) 表单\n\n#### 作用与语法\n\n表单的作用：**收集**用户填入的**数据**，并将这些数据**提交给服务器**\n\n表单的语法\n\n```html\n<form action=\"服务器地址\" method=\"请求方式\" enctype=\"数据格式\">\n    <!-- 表单项 -->\n    \n    <input type=\"submit\" value=\"提交按钮\">\n</form>\n```\n\n* method 请求方式有 \n  * get （默认）提交时，数据跟在 URL 地址之后\n  * post 提交时，数据在请求体内\n* enctype 在 post 请求时，指定请求体的数据格式\n  * application/x-www-form-urlencoded（默认）\n  * multipart/form-data\n* 其中表单项提供多种收集数据的方式\n  * 有 name 属性的表单项数据，才会被发送给服务器\n\n\n\n#### 常见的表单项\n\n文本框\n\n```html\n<input type=\"text\" name=\"uesrname\">\n```\n\n密码框\n\n```html\n<input type=\"password\" name=\"password\">\n```\n\n隐藏框\n\n```html\n<input type=\"hidden\" name=\"id\">\n```\n\n日期框\n\n```html\n<input type=\"date\" name=\"birthday\">\n```\n\n单选\n\n```html\n<input type=\"radio\" name=\"sex\" value=\"男\" checked>\n<input type=\"radio\" name=\"sex\" value=\"女\">\n```\n\n多选\n\n```html\n<input type=\"checkbox\" name=\"fav\" value=\"唱歌\">\n<input type=\"checkbox\" name=\"fav\" value=\"逛街\">\n<input type=\"checkbox\" name=\"fav\" value=\"游戏\">\n```\n\n文件上传\n\n```html\n<input type=\"file\" name=\"avatar\">\n```\n\n\n\n## 4. HTTP 请求\n\n### 1) 请求组成\n\n请求由三部分组成\n\n1. 请求行\n2. 请求头\n3. 请求体\n\n可以用 telnet 程序测试\n\n### 2) 请求方式与数据格式\n\n#### get 请求示例\n\n```\nGET /test2?name=%E5%BC%A0&age=20 HTTP/1.1\nHost: localhost\n```\n\n* %E5%BC%A0 是【张】经过 URL 编码后的结果\n\n#### post 请求示例\n\n```\nPOST /test2 HTTP/1.1\nHost: localhost\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 21\n\nname=%E5%BC%A0&age=18\n```\n\napplication/x-www-form-urlencoed 格式细节：\n\n* 参数分成名字和值，中间用 = 分隔\n* 多个参数使用 & 进行分隔\n* 【张】等特殊字符需要用 encodeURIComponent() 编码为 【%E5%BC%A0】后才能发送\n\n\n\n#### json 请求示例\n\n```\nPOST /test3 HTTP/1.1\nHost: localhost\nContent-Type: application/json\nContent-Length: 25\n\n{\"name\":\"zhang\",\"age\":18}\n```\n\n\n\njson 对象格式\n\n```\n{\"属性名\":属性值}\n```\n\n其中属性值可以是\n\n* 字符串 \"\"\n* 数字\n* true, false\n* null\n* 对象\n* 数组\n\njson 数组格式\n\n```\n[元素1, 元素2, ...]\n```\n\n\n\n#### multipart 请求示例\n\n```\nPOST /test2 HTTP/1.1\nHost: localhost\nContent-Type: multipart/form-data; boundary=123\nContent-Length: 125\n\n--123\nContent-Disposition: form-data; name=\"name\"\n\nlisi\n--123\nContent-Disposition: form-data; name=\"age\"\n\n30\n--123--\n```\n\n* boundary=123 用来定义分隔符\n* 起始分隔符是 `--分隔符`\n* 结束分隔符是 `--分隔符--`\n\n\n\n#### 数据格式小结\n\n客户端发送\n\n* 编码 \n  * application/x-www-form-urlencoded ：url 编码\n  * application/json：utf-8 编码\n  * multipart/form-data：每部分编码可以不同\n* 表单只支持以 application/x-www-form-urlencoded 和 multipart/form-data 格式发送数据\n* 文件上传需要用 multipart/form-data 格式\n* js 代码可以支持任意格式发送数据 \n\n服务端接收\n\n* 对 application/x-www-form-urlencoded 和 multipart/form-data 格式的数据，Spring 接收方式是统一的，只需要用 java bean 的属性名对应请求参数名即可\n* 对于 applicaiton/json 格式的数据，Spring 接收需要使用 @RequestBody 注解 + java bean 的方式\n\n\n\n### 3) session 原理\n\nHttp 无状态，有会话\n\n* 无状态是指，请求之间相互独立，第一次请求的数据，第二次请求不能重用\n* 有会话是指，客户端和服务端都有相应的技术，可以暂存数据，让数据在请求间共享\n\n服务端使用了 session 技术来暂存数据\n\n存\n\n```\nGET /s1?name=zhang HTTP/1.1\nHost: localhost\n```\n\n取\n\n```\nGET /s2 HTTP/1.1\nHost: localhost\nCookie: JSESSIONID=560FA845D02AE09B176E1BC5D9816A5D\n```\n\n\n\nsession 技术实现身份验证\n\n```mermaid\nsequenceDiagram\nparticipant Client\nparticipant L as LoginController\nparticipant i as LoginInterceptor\nparticipant Session\nrect rgb(200, 223, 255)\nClient ->> +L : 登录请求\nL ->> L : 检查用户名，密码，验证通过\nL ->> +Session : 存入用户名\nSession -->> -L: \nL -->> -Client: 登录成功\nend\nrect rgb(200, 190, 255)\nClient ->> +i : 其它请求\ni ->> +Session : 获取用户名\nSession -->> -i : \ni ->> i: 用户名存在，放行\ni -->> -Client : \nend\n```\n\n\n\n\n\n\n\n### 4) jwt 原理\n\njwt 技术实现身份验证\n\n```mermaid\nsequenceDiagram\nparticipant Client\nparticipant L as LoginController\nparticipant i as LoginInterceptor\n\nrect rgb(200, 223, 255)\nClient ->> +L : 登录请求\nL ->> L : 检查用户名，密码，验证通过\nL -->> -Client : 登录成功，返回token\nend\n\nrect rgb(150, 190, 155)\nClient ->> +i : 其它请求，携带token\ni ->> i : 校验token，校验无误，放行\ni -->> -Client : \nend\n```\n\n生成 token\n\n```\nGET /j1?name=zhang&pass=123 HTTP/1.1\nHost: localhost\n```\n校验 token\n\n```\nGET /j2 HTTP/1.1\nHost: localhost\nAuthorization: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiJ9._1-P_TLlzQPb1_lCyGwplMZaKQ8Mcw_plBbYPZ3OX28\n```\n\n\n\n## 5. CSS\n\n即 Cascading  Style  Sheets，它描述了网页的表现与展示效果\n\n### 1) 选择器\n\n* type 选择器 - 根据标签名进行匹配（元素选择器）\n* class 选择器 - 根据元素的 class 属性进行匹配\n\n* id 选择器  - 根据元素的 id 属性进行匹配\n\n### 2) 属性和值\n\n* background-color : red;\n* ...\n* display\n\n### 3) 布局\n\n与布局相关的 html 元素\n\n* div\n* template\n","source":"_posts/07_Java程序员要掌握的前端_HTML&CSS.md","raw":"---\ntitle:  HTML&CSS知识点总结\ntags: [编程,学习,HTML,CSS,前端]\ncategories: [前端]\ndate: 2022-10-24\n\n---\n\n# HTML 与 CSS\n\nHTML 是什么：即 HyperText Markup language 超文本标记语言，咱们熟知的网页就是用它编写的，HTML 的作用是定义网页的内容和结构。\n\n* HyperText 是指用超链接的方式组织网页，把网页联系起来\n* Markup 是指用 `<标签>` 的方式赋予内容不同的功能和含义\n\nCSS 是什么：即 Cascading  Style  Sheets 级联（层叠）样式表，它描述了网页的表现与展示效果\n\n\n\n## 1. HTML 元素\n\nHTML 由一系列元素 `elements` 组成，例如\n\n```html\n<p>Hello, world!</p>\n```\n\n* 整体称之为元素\n* `<p>` 和 `</p>` 分别称为起始和结束标签\n* 标签包围起来的 Hello, world 称之为内容\n\n* p 是预先定义好的 html 标签，作用是将内容作为一个单独的段落\n\n\n\n元素还可以有属性，如\n\n```html\n<p id=\"p1\">Hello, world!</p>\n```\n\n* 属性一般是预先定义好的，这里的 id 属性是给元素一个唯一的标识\n\n\n\n元素之间可以嵌套，如\n\n```html\n<p>HTML 是一门非常<b>强大</b>的语言</p>\n```\n\n错误嵌套写法：\n\n```html\n<p>HTML 是一门非常<b>强大的语言</p></b>\n```\n\n\n\n不包含内容的元素称之为空元素，如\n\n```html\n<img src=\"1.png\">\n<img src=\"1.png\"/>\n```\n\n* img 作用是用来展示图片\n* src 属性用来指明图片路径\n\n\n\n## 2. HTML 页面\n\n前面介绍的只是单独的 HTML 元素，它们可以充当一份完整的 HTML 页面的组成部分\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>测试页面</title>\n  </head>\n  <body>\n    <p id=\"p1\">Hello, world!</p>\n    <img src=\"1.png\">\n  </body>\n</html>\n```\n\n* `html` 元素囊括了页面中所有其它元素，整个页面只需一个，称为根元素\n* `head` 元素包含的是那些不用于展现内容的元素，如 `title`，`link`，`meta` 等\n* `body` 元素包含了对用户展现内容的元素，例如后面会学到的用于展示文本、图片、视频、音频的各种元素\n\n\n\n## 3. 常见元素\n\n### 1) 文本\n\n#### Heading\n\n```html\n<h1>1号标题</h1>\n<h2>2号标题</h2>\n<h3>3号标题</h3>\n<h4>4号标题</h4>\n<h5>5号标题</h5>\n<h6>6号标题</h6>\n```\n\n\n\n#### Paragraph\n\n```html\n<p>段落</p>\n```\n\n\n\n#### List\n\n无序列表 unordered list\n\n```html\n<ul>\n    <li>列表项1</li>\n    <li>列表项2</li>\n    <li>列表项3</li>\n</ul>\n```\n\n有序列表\n\n```html\n<ol>\n    <li>列表项1</li>\n    <li>列表项2</li>\n    <li>列表项3</li>\n</ol>\n```\n\n多级列表\n\n```html\n<ul>\n    <li>\n    \t北京市\n        <ul>\n            <li>海淀区</li>\n            <li>朝阳区</li>\n            <li>昌平区</li>\n        </ul>\n    </li>\n    <li>\n    \t河北省\n        <ul>\n            <li>石家庄</li>\n            <li>保定</li>\n        </ul>\n    </li>\n</ul>\n```\n\n\n\n#### Anchor\n\n锚，超链接\n\n```html\n<a href=\"网页地址\">超链接文本</a>\n```\n\n\n\n### 2) 多媒体\n\n#### Image\n\n```html\n<img src=\"文件路径\">\n```\n\nsrc 格式有 3 种\n\n* 文件地址\n\n* data URL，格式如下\n\n  ```\n  data:媒体类型;base64,数据\n  ```\n\n* object URL，需要配合 javascript 使用\n\n#### Video\n\n```html\n<video src=\"文件路径\"></video>\n```\n\n#### Audio\n\n```html\n<audio src=\"文件路径\"></audio>\n```\n\n\n\n### 3) 表单\n\n#### 作用与语法\n\n表单的作用：**收集**用户填入的**数据**，并将这些数据**提交给服务器**\n\n表单的语法\n\n```html\n<form action=\"服务器地址\" method=\"请求方式\" enctype=\"数据格式\">\n    <!-- 表单项 -->\n    \n    <input type=\"submit\" value=\"提交按钮\">\n</form>\n```\n\n* method 请求方式有 \n  * get （默认）提交时，数据跟在 URL 地址之后\n  * post 提交时，数据在请求体内\n* enctype 在 post 请求时，指定请求体的数据格式\n  * application/x-www-form-urlencoded（默认）\n  * multipart/form-data\n* 其中表单项提供多种收集数据的方式\n  * 有 name 属性的表单项数据，才会被发送给服务器\n\n\n\n#### 常见的表单项\n\n文本框\n\n```html\n<input type=\"text\" name=\"uesrname\">\n```\n\n密码框\n\n```html\n<input type=\"password\" name=\"password\">\n```\n\n隐藏框\n\n```html\n<input type=\"hidden\" name=\"id\">\n```\n\n日期框\n\n```html\n<input type=\"date\" name=\"birthday\">\n```\n\n单选\n\n```html\n<input type=\"radio\" name=\"sex\" value=\"男\" checked>\n<input type=\"radio\" name=\"sex\" value=\"女\">\n```\n\n多选\n\n```html\n<input type=\"checkbox\" name=\"fav\" value=\"唱歌\">\n<input type=\"checkbox\" name=\"fav\" value=\"逛街\">\n<input type=\"checkbox\" name=\"fav\" value=\"游戏\">\n```\n\n文件上传\n\n```html\n<input type=\"file\" name=\"avatar\">\n```\n\n\n\n## 4. HTTP 请求\n\n### 1) 请求组成\n\n请求由三部分组成\n\n1. 请求行\n2. 请求头\n3. 请求体\n\n可以用 telnet 程序测试\n\n### 2) 请求方式与数据格式\n\n#### get 请求示例\n\n```\nGET /test2?name=%E5%BC%A0&age=20 HTTP/1.1\nHost: localhost\n```\n\n* %E5%BC%A0 是【张】经过 URL 编码后的结果\n\n#### post 请求示例\n\n```\nPOST /test2 HTTP/1.1\nHost: localhost\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 21\n\nname=%E5%BC%A0&age=18\n```\n\napplication/x-www-form-urlencoed 格式细节：\n\n* 参数分成名字和值，中间用 = 分隔\n* 多个参数使用 & 进行分隔\n* 【张】等特殊字符需要用 encodeURIComponent() 编码为 【%E5%BC%A0】后才能发送\n\n\n\n#### json 请求示例\n\n```\nPOST /test3 HTTP/1.1\nHost: localhost\nContent-Type: application/json\nContent-Length: 25\n\n{\"name\":\"zhang\",\"age\":18}\n```\n\n\n\njson 对象格式\n\n```\n{\"属性名\":属性值}\n```\n\n其中属性值可以是\n\n* 字符串 \"\"\n* 数字\n* true, false\n* null\n* 对象\n* 数组\n\njson 数组格式\n\n```\n[元素1, 元素2, ...]\n```\n\n\n\n#### multipart 请求示例\n\n```\nPOST /test2 HTTP/1.1\nHost: localhost\nContent-Type: multipart/form-data; boundary=123\nContent-Length: 125\n\n--123\nContent-Disposition: form-data; name=\"name\"\n\nlisi\n--123\nContent-Disposition: form-data; name=\"age\"\n\n30\n--123--\n```\n\n* boundary=123 用来定义分隔符\n* 起始分隔符是 `--分隔符`\n* 结束分隔符是 `--分隔符--`\n\n\n\n#### 数据格式小结\n\n客户端发送\n\n* 编码 \n  * application/x-www-form-urlencoded ：url 编码\n  * application/json：utf-8 编码\n  * multipart/form-data：每部分编码可以不同\n* 表单只支持以 application/x-www-form-urlencoded 和 multipart/form-data 格式发送数据\n* 文件上传需要用 multipart/form-data 格式\n* js 代码可以支持任意格式发送数据 \n\n服务端接收\n\n* 对 application/x-www-form-urlencoded 和 multipart/form-data 格式的数据，Spring 接收方式是统一的，只需要用 java bean 的属性名对应请求参数名即可\n* 对于 applicaiton/json 格式的数据，Spring 接收需要使用 @RequestBody 注解 + java bean 的方式\n\n\n\n### 3) session 原理\n\nHttp 无状态，有会话\n\n* 无状态是指，请求之间相互独立，第一次请求的数据，第二次请求不能重用\n* 有会话是指，客户端和服务端都有相应的技术，可以暂存数据，让数据在请求间共享\n\n服务端使用了 session 技术来暂存数据\n\n存\n\n```\nGET /s1?name=zhang HTTP/1.1\nHost: localhost\n```\n\n取\n\n```\nGET /s2 HTTP/1.1\nHost: localhost\nCookie: JSESSIONID=560FA845D02AE09B176E1BC5D9816A5D\n```\n\n\n\nsession 技术实现身份验证\n\n```mermaid\nsequenceDiagram\nparticipant Client\nparticipant L as LoginController\nparticipant i as LoginInterceptor\nparticipant Session\nrect rgb(200, 223, 255)\nClient ->> +L : 登录请求\nL ->> L : 检查用户名，密码，验证通过\nL ->> +Session : 存入用户名\nSession -->> -L: \nL -->> -Client: 登录成功\nend\nrect rgb(200, 190, 255)\nClient ->> +i : 其它请求\ni ->> +Session : 获取用户名\nSession -->> -i : \ni ->> i: 用户名存在，放行\ni -->> -Client : \nend\n```\n\n\n\n\n\n\n\n### 4) jwt 原理\n\njwt 技术实现身份验证\n\n```mermaid\nsequenceDiagram\nparticipant Client\nparticipant L as LoginController\nparticipant i as LoginInterceptor\n\nrect rgb(200, 223, 255)\nClient ->> +L : 登录请求\nL ->> L : 检查用户名，密码，验证通过\nL -->> -Client : 登录成功，返回token\nend\n\nrect rgb(150, 190, 155)\nClient ->> +i : 其它请求，携带token\ni ->> i : 校验token，校验无误，放行\ni -->> -Client : \nend\n```\n\n生成 token\n\n```\nGET /j1?name=zhang&pass=123 HTTP/1.1\nHost: localhost\n```\n校验 token\n\n```\nGET /j2 HTTP/1.1\nHost: localhost\nAuthorization: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiJ9._1-P_TLlzQPb1_lCyGwplMZaKQ8Mcw_plBbYPZ3OX28\n```\n\n\n\n## 5. CSS\n\n即 Cascading  Style  Sheets，它描述了网页的表现与展示效果\n\n### 1) 选择器\n\n* type 选择器 - 根据标签名进行匹配（元素选择器）\n* class 选择器 - 根据元素的 class 属性进行匹配\n\n* id 选择器  - 根据元素的 id 属性进行匹配\n\n### 2) 属性和值\n\n* background-color : red;\n* ...\n* display\n\n### 3) 布局\n\n与布局相关的 html 元素\n\n* div\n* template\n","slug":"07_Java程序员要掌握的前端_HTML&CSS","published":1,"updated":"2022-11-03T05:38:27.994Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb3g0000a8vw256wx2d9","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"HTML-与-CSS\"><a href=\"#HTML-与-CSS\" class=\"headerlink\" title=\"HTML 与 CSS\"></a>HTML 与 CSS</h1><p>HTML 是什么：即 HyperText Markup language 超文本标记语言，咱们熟知的网页就是用它编写的，HTML 的作用是定义网页的内容和结构。</p>\n<ul>\n<li>HyperText 是指用超链接的方式组织网页，把网页联系起来</li>\n<li>Markup 是指用 <code>&lt;标签&gt;</code> 的方式赋予内容不同的功能和含义</li>\n</ul>\n<p>CSS 是什么：即 Cascading  Style  Sheets 级联（层叠）样式表，它描述了网页的表现与展示效果</p>\n<h2 id=\"1-HTML-元素\"><a href=\"#1-HTML-元素\" class=\"headerlink\" title=\"1. HTML 元素\"></a>1. HTML 元素</h2><p>HTML 由一系列元素 <code>elements</code> 组成，例如</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>整体称之为元素</p>\n</li>\n<li><p><code>&lt;p&gt;</code> 和 <code>&lt;/p&gt;</code> 分别称为起始和结束标签</p>\n</li>\n<li><p>标签包围起来的 Hello, world 称之为内容</p>\n</li>\n<li><p>p 是预先定义好的 html 标签，作用是将内容作为一个单独的段落</p>\n</li>\n</ul>\n<p>元素还可以有属性，如</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"p1\"</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>属性一般是预先定义好的，这里的 id 属性是给元素一个唯一的标识</li>\n</ul>\n<p>元素之间可以嵌套，如</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>HTML 是一门非常<span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>强大<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span>的语言<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>错误嵌套写法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>HTML 是一门非常<span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>强大的语言<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>不包含内容的元素称之为空元素，如</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"1.png\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"1.png\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>img 作用是用来展示图片</li>\n<li>src 属性用来指明图片路径</li>\n</ul>\n<h2 id=\"2-HTML-页面\"><a href=\"#2-HTML-页面\" class=\"headerlink\" title=\"2. HTML 页面\"></a>2. HTML 页面</h2><p>前面介绍的只是单独的 HTML 元素，它们可以充当一份完整的 HTML 页面的组成部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>测试页面<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"p1\"</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"1.png\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>html</code> 元素囊括了页面中所有其它元素，整个页面只需一个，称为根元素</li>\n<li><code>head</code> 元素包含的是那些不用于展现内容的元素，如 <code>title</code>，<code>link</code>，<code>meta</code> 等</li>\n<li><code>body</code> 元素包含了对用户展现内容的元素，例如后面会学到的用于展示文本、图片、视频、音频的各种元素</li>\n</ul>\n<h2 id=\"3-常见元素\"><a href=\"#3-常见元素\" class=\"headerlink\" title=\"3. 常见元素\"></a>3. 常见元素</h2><h3 id=\"1-文本\"><a href=\"#1-文本\" class=\"headerlink\" title=\"1) 文本\"></a>1) 文本</h3><h4 id=\"Heading\"><a href=\"#Heading\" class=\"headerlink\" title=\"Heading\"></a>Heading</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>1号标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>2号标题<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>3号标题<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>4号标题<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h5</span>&gt;</span>5号标题<span class=\"tag\">&lt;/<span class=\"name\">h5</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h6</span>&gt;</span>6号标题<span class=\"tag\">&lt;/<span class=\"name\">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Paragraph\"><a href=\"#Paragraph\" class=\"headerlink\" title=\"Paragraph\"></a>Paragraph</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>段落<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h4><p>无序列表 unordered list</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表项1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表项2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表项3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>有序列表</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表项1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表项2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表项3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>多级列表</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    \t北京市</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>海淀区<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>朝阳区<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>昌平区<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    \t河北省</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>石家庄<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>保定<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Anchor\"><a href=\"#Anchor\" class=\"headerlink\" title=\"Anchor\"></a>Anchor</h4><p>锚，超链接</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"网页地址\"</span>&gt;</span>超链接文本<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-多媒体\"><a href=\"#2-多媒体\" class=\"headerlink\" title=\"2) 多媒体\"></a>2) 多媒体</h3><h4 id=\"Image\"><a href=\"#Image\" class=\"headerlink\" title=\"Image\"></a>Image</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"文件路径\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>src 格式有 3 种</p>\n<ul>\n<li><p>文件地址</p>\n</li>\n<li><p>data URL，格式如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data:媒体类型;base64,数据</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>object URL，需要配合 javascript 使用</p>\n</li>\n</ul>\n<h4 id=\"Video\"><a href=\"#Video\" class=\"headerlink\" title=\"Video\"></a>Video</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">src</span>=<span class=\"string\">\"文件路径\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Audio\"><a href=\"#Audio\" class=\"headerlink\" title=\"Audio\"></a>Audio</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">audio</span> <span class=\"attr\">src</span>=<span class=\"string\">\"文件路径\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-表单\"><a href=\"#3-表单\" class=\"headerlink\" title=\"3) 表单\"></a>3) 表单</h3><h4 id=\"作用与语法\"><a href=\"#作用与语法\" class=\"headerlink\" title=\"作用与语法\"></a>作用与语法</h4><p>表单的作用：<strong>收集</strong>用户填入的<strong>数据</strong>，并将这些数据<strong>提交给服务器</strong></p>\n<p>表单的语法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"服务器地址\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"请求方式\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"数据格式\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 表单项 --&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"提交按钮\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>method 请求方式有 <ul>\n<li>get （默认）提交时，数据跟在 URL 地址之后</li>\n<li>post 提交时，数据在请求体内</li>\n</ul>\n</li>\n<li>enctype 在 post 请求时，指定请求体的数据格式<ul>\n<li>application/x-www-form-urlencoded（默认）</li>\n<li>multipart/form-data</li>\n</ul>\n</li>\n<li>其中表单项提供多种收集数据的方式<ul>\n<li>有 name 属性的表单项数据，才会被发送给服务器</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"常见的表单项\"><a href=\"#常见的表单项\" class=\"headerlink\" title=\"常见的表单项\"></a>常见的表单项</h4><p>文本框</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uesrname\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>密码框</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>隐藏框</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"id\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>日期框</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"date\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"birthday\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>单选</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sex\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"男\"</span> <span class=\"attr\">checked</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sex\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"女\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>多选</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fav\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"唱歌\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fav\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"逛街\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fav\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"游戏\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>文件上传</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"avatar\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-HTTP-请求\"><a href=\"#4-HTTP-请求\" class=\"headerlink\" title=\"4. HTTP 请求\"></a>4. HTTP 请求</h2><h3 id=\"1-请求组成\"><a href=\"#1-请求组成\" class=\"headerlink\" title=\"1) 请求组成\"></a>1) 请求组成</h3><p>请求由三部分组成</p>\n<ol>\n<li>请求行</li>\n<li>请求头</li>\n<li>请求体</li>\n</ol>\n<p>可以用 telnet 程序测试</p>\n<h3 id=\"2-请求方式与数据格式\"><a href=\"#2-请求方式与数据格式\" class=\"headerlink\" title=\"2) 请求方式与数据格式\"></a>2) 请求方式与数据格式</h3><h4 id=\"get-请求示例\"><a href=\"#get-请求示例\" class=\"headerlink\" title=\"get 请求示例\"></a>get 请求示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /test2?name=%E5%BC%A0&amp;age=20 HTTP/1.1</span><br><span class=\"line\">Host: localhost</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>%E5%BC%A0 是【张】经过 URL 编码后的结果</li>\n</ul>\n<h4 id=\"post-请求示例\"><a href=\"#post-请求示例\" class=\"headerlink\" title=\"post 请求示例\"></a>post 请求示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /test2 HTTP/1.1</span><br><span class=\"line\">Host: localhost</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded</span><br><span class=\"line\">Content-Length: 21</span><br><span class=\"line\"></span><br><span class=\"line\">name=%E5%BC%A0&amp;age=18</span><br></pre></td></tr></table></figure>\n\n<p>application/x-www-form-urlencoed 格式细节：</p>\n<ul>\n<li>参数分成名字和值，中间用 = 分隔</li>\n<li>多个参数使用 &amp; 进行分隔</li>\n<li>【张】等特殊字符需要用 encodeURIComponent() 编码为 【%E5%BC%A0】后才能发送</li>\n</ul>\n<h4 id=\"json-请求示例\"><a href=\"#json-请求示例\" class=\"headerlink\" title=\"json 请求示例\"></a>json 请求示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /test3 HTTP/1.1</span><br><span class=\"line\">Host: localhost</span><br><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\">Content-Length: 25</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;name&quot;:&quot;zhang&quot;,&quot;age&quot;:18&#125;</span><br></pre></td></tr></table></figure>\n\n<p>json 对象格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;属性名&quot;:属性值&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中属性值可以是</p>\n<ul>\n<li>字符串 “”</li>\n<li>数字</li>\n<li>true, false</li>\n<li>null</li>\n<li>对象</li>\n<li>数组</li>\n</ul>\n<p>json 数组格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[元素1, 元素2, ...]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"multipart-请求示例\"><a href=\"#multipart-请求示例\" class=\"headerlink\" title=\"multipart 请求示例\"></a>multipart 请求示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /test2 HTTP/1.1</span><br><span class=\"line\">Host: localhost</span><br><span class=\"line\">Content-Type: multipart/form-data; boundary=123</span><br><span class=\"line\">Content-Length: 125</span><br><span class=\"line\"></span><br><span class=\"line\">--123</span><br><span class=\"line\">Content-Disposition: form-data; name=&quot;name&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">lisi</span><br><span class=\"line\">--123</span><br><span class=\"line\">Content-Disposition: form-data; name=&quot;age&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">30</span><br><span class=\"line\">--123--</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>boundary=123 用来定义分隔符</li>\n<li>起始分隔符是 <code>--分隔符</code></li>\n<li>结束分隔符是 <code>--分隔符--</code></li>\n</ul>\n<h4 id=\"数据格式小结\"><a href=\"#数据格式小结\" class=\"headerlink\" title=\"数据格式小结\"></a>数据格式小结</h4><p>客户端发送</p>\n<ul>\n<li>编码 <ul>\n<li>application/x-www-form-urlencoded ：url 编码</li>\n<li>application/json：utf-8 编码</li>\n<li>multipart/form-data：每部分编码可以不同</li>\n</ul>\n</li>\n<li>表单只支持以 application/x-www-form-urlencoded 和 multipart/form-data 格式发送数据</li>\n<li>文件上传需要用 multipart/form-data 格式</li>\n<li>js 代码可以支持任意格式发送数据 </li>\n</ul>\n<p>服务端接收</p>\n<ul>\n<li>对 application/x-www-form-urlencoded 和 multipart/form-data 格式的数据，Spring 接收方式是统一的，只需要用 java bean 的属性名对应请求参数名即可</li>\n<li>对于 applicaiton/json 格式的数据，Spring 接收需要使用 @RequestBody 注解 + java bean 的方式</li>\n</ul>\n<h3 id=\"3-session-原理\"><a href=\"#3-session-原理\" class=\"headerlink\" title=\"3) session 原理\"></a>3) session 原理</h3><p>Http 无状态，有会话</p>\n<ul>\n<li>无状态是指，请求之间相互独立，第一次请求的数据，第二次请求不能重用</li>\n<li>有会话是指，客户端和服务端都有相应的技术，可以暂存数据，让数据在请求间共享</li>\n</ul>\n<p>服务端使用了 session 技术来暂存数据</p>\n<p>存</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /s1?name=zhang HTTP/1.1</span><br><span class=\"line\">Host: localhost</span><br></pre></td></tr></table></figure>\n\n<p>取</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /s2 HTTP/1.1</span><br><span class=\"line\">Host: localhost</span><br><span class=\"line\">Cookie: JSESSIONID=560FA845D02AE09B176E1BC5D9816A5D</span><br></pre></td></tr></table></figure>\n\n<p>session 技术实现身份验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">participant Client</span><br><span class=\"line\">participant L as LoginController</span><br><span class=\"line\">participant i as LoginInterceptor</span><br><span class=\"line\">participant Session</span><br><span class=\"line\">rect rgb(200, 223, 255)</span><br><span class=\"line\">Client -&gt;&gt; +L : 登录请求</span><br><span class=\"line\">L -&gt;&gt; L : 检查用户名，密码，验证通过</span><br><span class=\"line\">L -&gt;&gt; +Session : 存入用户名</span><br><span class=\"line\">Session --&gt;&gt; -L: </span><br><span class=\"line\">L --&gt;&gt; -Client: 登录成功</span><br><span class=\"line\">end</span><br><span class=\"line\">rect rgb(200, 190, 255)</span><br><span class=\"line\">Client -&gt;&gt; +i : 其它请求</span><br><span class=\"line\">i -&gt;&gt; +Session : 获取用户名</span><br><span class=\"line\">Session --&gt;&gt; -i : </span><br><span class=\"line\">i -&gt;&gt; i: 用户名存在，放行</span><br><span class=\"line\">i --&gt;&gt; -Client : </span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-jwt-原理\"><a href=\"#4-jwt-原理\" class=\"headerlink\" title=\"4) jwt 原理\"></a>4) jwt 原理</h3><p>jwt 技术实现身份验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">participant Client</span><br><span class=\"line\">participant L as LoginController</span><br><span class=\"line\">participant i as LoginInterceptor</span><br><span class=\"line\"></span><br><span class=\"line\">rect rgb(200, 223, 255)</span><br><span class=\"line\">Client -&gt;&gt; +L : 登录请求</span><br><span class=\"line\">L -&gt;&gt; L : 检查用户名，密码，验证通过</span><br><span class=\"line\">L --&gt;&gt; -Client : 登录成功，返回token</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">rect rgb(150, 190, 155)</span><br><span class=\"line\">Client -&gt;&gt; +i : 其它请求，携带token</span><br><span class=\"line\">i -&gt;&gt; i : 校验token，校验无误，放行</span><br><span class=\"line\">i --&gt;&gt; -Client : </span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>生成 token</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /j1?name=zhang&amp;pass=123 HTTP/1.1</span><br><span class=\"line\">Host: localhost</span><br></pre></td></tr></table></figure>\n\n<p>校验 token</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /j2 HTTP/1.1</span><br><span class=\"line\">Host: localhost</span><br><span class=\"line\">Authorization: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiJ9._1-P_TLlzQPb1_lCyGwplMZaKQ8Mcw_plBbYPZ3OX28</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-CSS\"><a href=\"#5-CSS\" class=\"headerlink\" title=\"5. CSS\"></a>5. CSS</h2><p>即 Cascading  Style  Sheets，它描述了网页的表现与展示效果</p>\n<h3 id=\"1-选择器\"><a href=\"#1-选择器\" class=\"headerlink\" title=\"1) 选择器\"></a>1) 选择器</h3><ul>\n<li><p>type 选择器 - 根据标签名进行匹配（元素选择器）</p>\n</li>\n<li><p>class 选择器 - 根据元素的 class 属性进行匹配</p>\n</li>\n<li><p>id 选择器  - 根据元素的 id 属性进行匹配</p>\n</li>\n</ul>\n<h3 id=\"2-属性和值\"><a href=\"#2-属性和值\" class=\"headerlink\" title=\"2) 属性和值\"></a>2) 属性和值</h3><ul>\n<li>background-color : red;</li>\n<li>…</li>\n<li>display</li>\n</ul>\n<h3 id=\"3-布局\"><a href=\"#3-布局\" class=\"headerlink\" title=\"3) 布局\"></a>3) 布局</h3><p>与布局相关的 html 元素</p>\n<ul>\n<li>div</li>\n<li>template</li>\n</ul>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"HTML-与-CSS\"><a href=\"#HTML-与-CSS\" class=\"headerlink\" title=\"HTML 与 CSS\"></a>HTML 与 CSS</h1><p>HTML 是什么：即 HyperText Markup language 超文本标记语言，咱们熟知的网页就是用它编写的，HTML 的作用是定义网页的内容和结构。</p>\n<ul>\n<li>HyperText 是指用超链接的方式组织网页，把网页联系起来</li>\n<li>Markup 是指用 <code>&lt;标签&gt;</code> 的方式赋予内容不同的功能和含义</li>\n</ul>\n<p>CSS 是什么：即 Cascading  Style  Sheets 级联（层叠）样式表，它描述了网页的表现与展示效果</p>\n<h2 id=\"1-HTML-元素\"><a href=\"#1-HTML-元素\" class=\"headerlink\" title=\"1. HTML 元素\"></a>1. HTML 元素</h2><p>HTML 由一系列元素 <code>elements</code> 组成，例如</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>整体称之为元素</p>\n</li>\n<li><p><code>&lt;p&gt;</code> 和 <code>&lt;/p&gt;</code> 分别称为起始和结束标签</p>\n</li>\n<li><p>标签包围起来的 Hello, world 称之为内容</p>\n</li>\n<li><p>p 是预先定义好的 html 标签，作用是将内容作为一个单独的段落</p>\n</li>\n</ul>\n<p>元素还可以有属性，如</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"p1\"</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>属性一般是预先定义好的，这里的 id 属性是给元素一个唯一的标识</li>\n</ul>\n<p>元素之间可以嵌套，如</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>HTML 是一门非常<span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>强大<span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span>的语言<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>错误嵌套写法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>HTML 是一门非常<span class=\"tag\">&lt;<span class=\"name\">b</span>&gt;</span>强大的语言<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">b</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>不包含内容的元素称之为空元素，如</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"1.png\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"1.png\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>img 作用是用来展示图片</li>\n<li>src 属性用来指明图片路径</li>\n</ul>\n<h2 id=\"2-HTML-页面\"><a href=\"#2-HTML-页面\" class=\"headerlink\" title=\"2. HTML 页面\"></a>2. HTML 页面</h2><p>前面介绍的只是单独的 HTML 元素，它们可以充当一份完整的 HTML 页面的组成部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>测试页面<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"p1\"</span>&gt;</span>Hello, world!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"1.png\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>html</code> 元素囊括了页面中所有其它元素，整个页面只需一个，称为根元素</li>\n<li><code>head</code> 元素包含的是那些不用于展现内容的元素，如 <code>title</code>，<code>link</code>，<code>meta</code> 等</li>\n<li><code>body</code> 元素包含了对用户展现内容的元素，例如后面会学到的用于展示文本、图片、视频、音频的各种元素</li>\n</ul>\n<h2 id=\"3-常见元素\"><a href=\"#3-常见元素\" class=\"headerlink\" title=\"3. 常见元素\"></a>3. 常见元素</h2><h3 id=\"1-文本\"><a href=\"#1-文本\" class=\"headerlink\" title=\"1) 文本\"></a>1) 文本</h3><h4 id=\"Heading\"><a href=\"#Heading\" class=\"headerlink\" title=\"Heading\"></a>Heading</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>1号标题<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>2号标题<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>3号标题<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h4</span>&gt;</span>4号标题<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h5</span>&gt;</span>5号标题<span class=\"tag\">&lt;/<span class=\"name\">h5</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h6</span>&gt;</span>6号标题<span class=\"tag\">&lt;/<span class=\"name\">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Paragraph\"><a href=\"#Paragraph\" class=\"headerlink\" title=\"Paragraph\"></a>Paragraph</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>段落<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h4><p>无序列表 unordered list</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表项1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表项2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表项3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>有序列表</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表项1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表项2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>列表项3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>多级列表</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    \t北京市</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>海淀区<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>朝阳区<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>昌平区<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    \t河北省</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>石家庄<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>保定<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Anchor\"><a href=\"#Anchor\" class=\"headerlink\" title=\"Anchor\"></a>Anchor</h4><p>锚，超链接</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"网页地址\"</span>&gt;</span>超链接文本<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-多媒体\"><a href=\"#2-多媒体\" class=\"headerlink\" title=\"2) 多媒体\"></a>2) 多媒体</h3><h4 id=\"Image\"><a href=\"#Image\" class=\"headerlink\" title=\"Image\"></a>Image</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"文件路径\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>src 格式有 3 种</p>\n<ul>\n<li><p>文件地址</p>\n</li>\n<li><p>data URL，格式如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data:媒体类型;base64,数据</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>object URL，需要配合 javascript 使用</p>\n</li>\n</ul>\n<h4 id=\"Video\"><a href=\"#Video\" class=\"headerlink\" title=\"Video\"></a>Video</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">src</span>=<span class=\"string\">\"文件路径\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Audio\"><a href=\"#Audio\" class=\"headerlink\" title=\"Audio\"></a>Audio</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">audio</span> <span class=\"attr\">src</span>=<span class=\"string\">\"文件路径\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-表单\"><a href=\"#3-表单\" class=\"headerlink\" title=\"3) 表单\"></a>3) 表单</h3><h4 id=\"作用与语法\"><a href=\"#作用与语法\" class=\"headerlink\" title=\"作用与语法\"></a>作用与语法</h4><p>表单的作用：<strong>收集</strong>用户填入的<strong>数据</strong>，并将这些数据<strong>提交给服务器</strong></p>\n<p>表单的语法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"服务器地址\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"请求方式\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"数据格式\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 表单项 --&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"提交按钮\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>method 请求方式有 <ul>\n<li>get （默认）提交时，数据跟在 URL 地址之后</li>\n<li>post 提交时，数据在请求体内</li>\n</ul>\n</li>\n<li>enctype 在 post 请求时，指定请求体的数据格式<ul>\n<li>application/x-www-form-urlencoded（默认）</li>\n<li>multipart/form-data</li>\n</ul>\n</li>\n<li>其中表单项提供多种收集数据的方式<ul>\n<li>有 name 属性的表单项数据，才会被发送给服务器</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"常见的表单项\"><a href=\"#常见的表单项\" class=\"headerlink\" title=\"常见的表单项\"></a>常见的表单项</h4><p>文本框</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"uesrname\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>密码框</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>隐藏框</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"id\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>日期框</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"date\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"birthday\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>单选</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sex\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"男\"</span> <span class=\"attr\">checked</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sex\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"女\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>多选</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fav\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"唱歌\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fav\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"逛街\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fav\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"游戏\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>文件上传</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"avatar\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-HTTP-请求\"><a href=\"#4-HTTP-请求\" class=\"headerlink\" title=\"4. HTTP 请求\"></a>4. HTTP 请求</h2><h3 id=\"1-请求组成\"><a href=\"#1-请求组成\" class=\"headerlink\" title=\"1) 请求组成\"></a>1) 请求组成</h3><p>请求由三部分组成</p>\n<ol>\n<li>请求行</li>\n<li>请求头</li>\n<li>请求体</li>\n</ol>\n<p>可以用 telnet 程序测试</p>\n<h3 id=\"2-请求方式与数据格式\"><a href=\"#2-请求方式与数据格式\" class=\"headerlink\" title=\"2) 请求方式与数据格式\"></a>2) 请求方式与数据格式</h3><h4 id=\"get-请求示例\"><a href=\"#get-请求示例\" class=\"headerlink\" title=\"get 请求示例\"></a>get 请求示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /test2?name=%E5%BC%A0&amp;age=20 HTTP/1.1</span><br><span class=\"line\">Host: localhost</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>%E5%BC%A0 是【张】经过 URL 编码后的结果</li>\n</ul>\n<h4 id=\"post-请求示例\"><a href=\"#post-请求示例\" class=\"headerlink\" title=\"post 请求示例\"></a>post 请求示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /test2 HTTP/1.1</span><br><span class=\"line\">Host: localhost</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded</span><br><span class=\"line\">Content-Length: 21</span><br><span class=\"line\"></span><br><span class=\"line\">name=%E5%BC%A0&amp;age=18</span><br></pre></td></tr></table></figure>\n\n<p>application/x-www-form-urlencoed 格式细节：</p>\n<ul>\n<li>参数分成名字和值，中间用 = 分隔</li>\n<li>多个参数使用 &amp; 进行分隔</li>\n<li>【张】等特殊字符需要用 encodeURIComponent() 编码为 【%E5%BC%A0】后才能发送</li>\n</ul>\n<h4 id=\"json-请求示例\"><a href=\"#json-请求示例\" class=\"headerlink\" title=\"json 请求示例\"></a>json 请求示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /test3 HTTP/1.1</span><br><span class=\"line\">Host: localhost</span><br><span class=\"line\">Content-Type: application/json</span><br><span class=\"line\">Content-Length: 25</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;name&quot;:&quot;zhang&quot;,&quot;age&quot;:18&#125;</span><br></pre></td></tr></table></figure>\n\n<p>json 对象格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;属性名&quot;:属性值&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中属性值可以是</p>\n<ul>\n<li>字符串 “”</li>\n<li>数字</li>\n<li>true, false</li>\n<li>null</li>\n<li>对象</li>\n<li>数组</li>\n</ul>\n<p>json 数组格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[元素1, 元素2, ...]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"multipart-请求示例\"><a href=\"#multipart-请求示例\" class=\"headerlink\" title=\"multipart 请求示例\"></a>multipart 请求示例</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /test2 HTTP/1.1</span><br><span class=\"line\">Host: localhost</span><br><span class=\"line\">Content-Type: multipart/form-data; boundary=123</span><br><span class=\"line\">Content-Length: 125</span><br><span class=\"line\"></span><br><span class=\"line\">--123</span><br><span class=\"line\">Content-Disposition: form-data; name=&quot;name&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">lisi</span><br><span class=\"line\">--123</span><br><span class=\"line\">Content-Disposition: form-data; name=&quot;age&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">30</span><br><span class=\"line\">--123--</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>boundary=123 用来定义分隔符</li>\n<li>起始分隔符是 <code>--分隔符</code></li>\n<li>结束分隔符是 <code>--分隔符--</code></li>\n</ul>\n<h4 id=\"数据格式小结\"><a href=\"#数据格式小结\" class=\"headerlink\" title=\"数据格式小结\"></a>数据格式小结</h4><p>客户端发送</p>\n<ul>\n<li>编码 <ul>\n<li>application/x-www-form-urlencoded ：url 编码</li>\n<li>application/json：utf-8 编码</li>\n<li>multipart/form-data：每部分编码可以不同</li>\n</ul>\n</li>\n<li>表单只支持以 application/x-www-form-urlencoded 和 multipart/form-data 格式发送数据</li>\n<li>文件上传需要用 multipart/form-data 格式</li>\n<li>js 代码可以支持任意格式发送数据 </li>\n</ul>\n<p>服务端接收</p>\n<ul>\n<li>对 application/x-www-form-urlencoded 和 multipart/form-data 格式的数据，Spring 接收方式是统一的，只需要用 java bean 的属性名对应请求参数名即可</li>\n<li>对于 applicaiton/json 格式的数据，Spring 接收需要使用 @RequestBody 注解 + java bean 的方式</li>\n</ul>\n<h3 id=\"3-session-原理\"><a href=\"#3-session-原理\" class=\"headerlink\" title=\"3) session 原理\"></a>3) session 原理</h3><p>Http 无状态，有会话</p>\n<ul>\n<li>无状态是指，请求之间相互独立，第一次请求的数据，第二次请求不能重用</li>\n<li>有会话是指，客户端和服务端都有相应的技术，可以暂存数据，让数据在请求间共享</li>\n</ul>\n<p>服务端使用了 session 技术来暂存数据</p>\n<p>存</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /s1?name=zhang HTTP/1.1</span><br><span class=\"line\">Host: localhost</span><br></pre></td></tr></table></figure>\n\n<p>取</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /s2 HTTP/1.1</span><br><span class=\"line\">Host: localhost</span><br><span class=\"line\">Cookie: JSESSIONID=560FA845D02AE09B176E1BC5D9816A5D</span><br></pre></td></tr></table></figure>\n\n<p>session 技术实现身份验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">participant Client</span><br><span class=\"line\">participant L as LoginController</span><br><span class=\"line\">participant i as LoginInterceptor</span><br><span class=\"line\">participant Session</span><br><span class=\"line\">rect rgb(200, 223, 255)</span><br><span class=\"line\">Client -&gt;&gt; +L : 登录请求</span><br><span class=\"line\">L -&gt;&gt; L : 检查用户名，密码，验证通过</span><br><span class=\"line\">L -&gt;&gt; +Session : 存入用户名</span><br><span class=\"line\">Session --&gt;&gt; -L: </span><br><span class=\"line\">L --&gt;&gt; -Client: 登录成功</span><br><span class=\"line\">end</span><br><span class=\"line\">rect rgb(200, 190, 255)</span><br><span class=\"line\">Client -&gt;&gt; +i : 其它请求</span><br><span class=\"line\">i -&gt;&gt; +Session : 获取用户名</span><br><span class=\"line\">Session --&gt;&gt; -i : </span><br><span class=\"line\">i -&gt;&gt; i: 用户名存在，放行</span><br><span class=\"line\">i --&gt;&gt; -Client : </span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-jwt-原理\"><a href=\"#4-jwt-原理\" class=\"headerlink\" title=\"4) jwt 原理\"></a>4) jwt 原理</h3><p>jwt 技术实现身份验证</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">participant Client</span><br><span class=\"line\">participant L as LoginController</span><br><span class=\"line\">participant i as LoginInterceptor</span><br><span class=\"line\"></span><br><span class=\"line\">rect rgb(200, 223, 255)</span><br><span class=\"line\">Client -&gt;&gt; +L : 登录请求</span><br><span class=\"line\">L -&gt;&gt; L : 检查用户名，密码，验证通过</span><br><span class=\"line\">L --&gt;&gt; -Client : 登录成功，返回token</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\">rect rgb(150, 190, 155)</span><br><span class=\"line\">Client -&gt;&gt; +i : 其它请求，携带token</span><br><span class=\"line\">i -&gt;&gt; i : 校验token，校验无误，放行</span><br><span class=\"line\">i --&gt;&gt; -Client : </span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>生成 token</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /j1?name=zhang&amp;pass=123 HTTP/1.1</span><br><span class=\"line\">Host: localhost</span><br></pre></td></tr></table></figure>\n\n<p>校验 token</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /j2 HTTP/1.1</span><br><span class=\"line\">Host: localhost</span><br><span class=\"line\">Authorization: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiJ9._1-P_TLlzQPb1_lCyGwplMZaKQ8Mcw_plBbYPZ3OX28</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-CSS\"><a href=\"#5-CSS\" class=\"headerlink\" title=\"5. CSS\"></a>5. CSS</h2><p>即 Cascading  Style  Sheets，它描述了网页的表现与展示效果</p>\n<h3 id=\"1-选择器\"><a href=\"#1-选择器\" class=\"headerlink\" title=\"1) 选择器\"></a>1) 选择器</h3><ul>\n<li><p>type 选择器 - 根据标签名进行匹配（元素选择器）</p>\n</li>\n<li><p>class 选择器 - 根据元素的 class 属性进行匹配</p>\n</li>\n<li><p>id 选择器  - 根据元素的 id 属性进行匹配</p>\n</li>\n</ul>\n<h3 id=\"2-属性和值\"><a href=\"#2-属性和值\" class=\"headerlink\" title=\"2) 属性和值\"></a>2) 属性和值</h3><ul>\n<li>background-color : red;</li>\n<li>…</li>\n<li>display</li>\n</ul>\n<h3 id=\"3-布局\"><a href=\"#3-布局\" class=\"headerlink\" title=\"3) 布局\"></a>3) 布局</h3><p>与布局相关的 html 元素</p>\n<ul>\n<li>div</li>\n<li>template</li>\n</ul>\n"},{"title":"JS知识点总结","date":"2022-10-19T16:00:00.000Z","_content":"# Javascript\n\n它是一种脚本语言，可以用来更改页面内容，控制多媒体，制作图像、动画等等\n\n\n\n例子\n\n* 修改页面内容\n\n\n\njs 代码位置\n\n```html\n<script>\n\t// js 代码\n</script>\n```\n\n引入 js 脚本\n\n```html\n<script src=\"js脚本路径\"></script>\n```\n\n* 注意，到了框架之后，引入方式会有不同\n\n\n\n\n\n## 1. 变量与数据类型\n\n### 声明变量\n\n#### 1) let \n\n```js\nlet 变量名 = 值;\n```\n\n* let 声明的变量可以被多次赋值，例如\n\n```js\nlet a = 100;  // 初始值是 100\na = 200;\t  // ok, 被重新赋值为 200\n```\n\n#### 2) const \n\n* const 修饰的叫常量，只能赋值一次\n\n```js\nconst b = 300; // 初始值是 300\nb = 400;\t   // error, 不能再次赋值\n```\n\n* const 并不意味着它引用的内容不可修改，例如\n\n```js\nconst c = [1,2,3];\nc[2] = 4; \t        // ok, 数组内容被修改成 [1,2,4]\nc = [5,6];\t\t\t// error, 不能再次赋值\n```\n\n#### 3) var\n\nvar 声明的变量可以被多次赋值，例如\n\n```js\nvar f = 100;\nf = 200;\n```\n\n\n\n### 基本类型\n\n#### 1,2) undefined 和 null\n\n* 执行表达式或函数，没有返回结果，出现 undefined\n* 访问数组不存在的元素，访问对象不存在的属性，出现 undefined\n* 定义变量，没有初始化，出现 undefined\n\n例\n\n```js\nconsole.log(1);  \t// 函数没有返回值, 结果是  undefined\nlet a = 10;\t\t \t// 表达式没有返回值, 结果是 undefined\nlet b = [1,2,3];\nconsole.log(b[10]); // 数组未定义元素是 undefined\nlet c = {\"name\":\"张三\"};\nconsole.log(c.age); // 对象未定义属性是 undefined\nlet d;\nconsole.log(d);\t\t// 变量未初始化是 undefined\n```\n\n二者共同点\n\n* 都没有属性、方法\n* 二者合称 Nullish\n\n二者区别\n\n* undefined 由 js 产生\n* null 由程序员提供\n\n\n\n#### 3) string \n\njs 字符串三种写法\n\n```js\nlet a = \"hello\";  // 双引号\nlet b = \"world\";  // 单引号\nlet c = `hello`;  // 反引号\n```\n\n\n\nhtml 代码如下，用 java 和 js 中的字符串如何表示？\n\n```html\n<a href=\"1.html\">超链接</a>\n```\n\njava 显得比较繁琐\n\n```java\nString s1 = \"<a href=\\\"1.html\\\">超链接</a>\";\n\nString s2 = \"\"\"\n    <a href=\"1.html\">超链接</a>\"\"\";\n```\n\njs 就比较灵活\n\n```js\nlet s1 = '<a href=\"1.html\">超链接</a>';\n\nlet s2 = `<a href=\"1.html\">超链接</a>`;\n```\n\n\n\n模板字符串（Template strings）\n\n需求：拼接 URI 的请求参数，如\n\n```\n/test?name=zhang&age=18\n/test?name=li&age=20\n```\n\n传统方法拼接\n\n```js\nlet name = ; // zhang li ...\nlet age = ; // 18 20 ...\n\nlet uri = \"/test?name=\" + name + \"&age=\" + age;\n```\n\n模板字符串方式\n\n```js\nlet name = ; // zhang li ...\nlet age = ; // 18 20 ...\n\nlet uri = `/test?name=${name}&age=${age}`;\n```\n\n\n\n#### 4,5) number 和 bigint\n\nnumber 类型标识的是双精度浮动小数，例如\n\n```js\n10 / 3;   // 结果 3.3333333333333335\n```\n\n既然是浮点小数，那么可以除零\n\n```js\n10 / 0;\t  // 结果 Infinity 正无穷大\n-10 / 0;  // 结果 -Infinity 负无穷大\n```\n\n浮点小数都有运算精度问题，例如\n\n```js\n2.0 - 1.1; // 结果 0.8999999999999999\n```\n\n字符串转数字\n\n```js\nparseInt(\"10\"); \t// 结果是数字 10 \nparseInt(\"10.5\");\t// 结果是数字 10, 去除了小数部分\nparseInt(\"10\") / 3; // 结果仍视为 number 浮点数, 因此结果为 3.3333333333333335\n\nparseInt(\"abc\");\t// 转换失败，结果是特殊值 NaN (Not a Number)\n```\n\n要表示真正的整数，需要用 bigint，数字的结尾用 n 表示它是一个 bigint 类型\n\n```js\n10n / 3n;\t\t\t// 结果 3n, 按整数除法处理\n```\n\n\n\n#### 6) boolean \n\n* Truthy\n* Falsy\n\n在 js 中，并不是 boolean 才能用于条件判断，你可以在 if 语句中使用【数字】、【字符串】... 作为判断条件\n\n```js\nlet b = 1;\n\nif(b) { // true\n    console.log(\"进入了\");\n}\n```\n\n\n\n这时就有一个规则，当需要条件判断时，这个值被当作 true 还是 false，当作 true 的值归类为 truthy，当作 false 的值归类为 falsy\n\n下面值都是 falsy\n\n* `false`\n* `Nullish (null, undefined)`\n* `0, 0n, NaN`\n* 长度为零的字符串\n\n剩余的值绝大部分都是 truthy\n\n有几个容易被当作 falsy 实际是 truthy 的\n\n* `\"false\", \"0\"` 即字符串的 false 和 字符串的零\n* `[]` 空数组\n* `{}` 空对象\n\n\n\n#### 7) symbol\n\n* 很少使用\n\n\n\n### 对象类型\n\n#### 1) Function \n\n##### 定义函数\n\n```js\nfunction 函数名(参数) {\n    // 函数体\n    return 结果;\n}\n```\n\n例\n\n```js\nfunction add(a, b) {\n    return a + b;\n}\n```\n\n##### 调用函数\n\n```js\n函数名(实参);\n```\n\n例\n\n```js\nadd(1, 2);     // 返回 3\n```\n\njs 中的函数调用特点：对参数的**类型**和**个数**都没有限制，例如\n\n```js\nadd('a', 'b');  // 返回 ab\nadd(4, 5, 6);   // 返回 9, 第三个参数没有被用到, 不会报错\nadd(1);\t\t\t// 返回 NaN, 这时 b 没有定义是 undefined, undefined 做数学运算结果就是 NaN\n```\n\n\n\n##### 默认参数\n\njava 中（spring）要实现默认参数的效果得这么做：\n\n```java\n@RestController \npublic class MyController {\n    \n    @RequestMapping(\"/page\")\n    @ResponseBody\n    public void page(\n        @RequestParam(defaultValue=\"1\") int page, \n        @RequestParam(defaultValue=\"10\") int size\n    ){\n        // ...\n    }\n}\n```\n\njs\n\n```js\nfunction pagination(page = 1, size = 10) {\n    console.log(page, size);\n}\n```\n\n\n\n##### 匿名函数\n\n语法\n\n```js\n(function (参数) {\n    // 函数体\n    return 结果;\n})\n```\n\n例\n\n```js\n(function(a,b){\n    return a + b;\n})\n```\n\n第一种场景：定义完毕后立刻调用\n\n```js\n(function(a,b){\n    return a + b;\n})(1,2)\n```\n\n第二种场景：作为其它对象的方法，例如\n\n页面有元素\n\n```html\n<p id=\"p1\">点我啊</p>\n```\n\n此元素有一个 onclick 方法，会在鼠标单击这个元素后被执行，onclick 方法刚开始是 null，需要赋值后才能使用\n\n```js\ndocument.getElementById(\"p1\").onclick = (function(){\n    console.log(\"鼠标单击了...\");\n});\n```\n\n\n\n##### 箭头函数\n\n```js\n(参数) => {\n    // 函数体\n    return 结果;\n}\n```\n\n* 如果没有参数，() 还是要保留\n* 如果只有一个参数，() 可以省略\n* 如果函数体内只有一行代码，{} 可以省略\n* 如果这一行代码就是结果，return 可以省略\n\n例\n\n```js\ndocument.getElementById(\"p1\").onclick = () =>  console.log(\"aa\");\n```\n\n\n\n##### 函数是对象\n\n以下形式在 js 中非常常见！\n\n1. 可以参与赋值，例，具名函数也能参与赋值\n\n```js\nfunction abc() {\n    console.log(\"bb\");\n}\n\ndocument.getElementById(\"p1\").onclick = abc;\n```\n\n\n\n2. 有属性、有方法，执行 `console.dir(abc)`，输出结果如下\n\n```\nƒ abc()\n    arguments: null\n    caller: null\n    length: 0\n    name: \"abc\"\n    ➡prototype: {constructor: ƒ}\n    [[FunctionLocation]]: VM1962:1\n    ➡[[Prototype]]: ƒ ()\n    ➡[[Scopes]]: Scopes[1]\n```\n\n* 其中带有 f 标记的是方法，不带的是属性\n* 带有 ➡ 符号的可以继续展开，限于篇幅省略了\n\n* 带有 `[[ ]]` 的是内置属性，不能访问，只能查看\n* 相对重要的是 `[[Prototype]]` 和 `[[Scopes]]` 会在后面继承和作用域时讲到\n\n\n\n3. 可以作为方法参数\n\n```js\nfunction a() {\n    console.log('a')\n}\n\nfunction b(fn) {          // fn 将来可以是一个函数对象\n    console.log('b')\n    fn();                 // 调用函数对象\n}\n\nb(a)\n```\n\n\n\n4. 可以作为方法返回值\n\n```js\nfunction c() {\n    console.log(\"c\");\n    function d() {\n        console.log(\"d\");\n    }\n    return d;\n}\n\nc()()\n```\n\n\n\n##### 函数作用域\n\n函数可以嵌套（js 代码中很常见，只是嵌套的形式更多是匿名函数，箭头函数）\n\n```js\nfunction a() {\n    function b() {        \n    }\n}\n```\n\n看下面的例子\n\n```js\nfunction c() {\n    var z = 30;\n}\n\nvar x = 10;\nfunction a() {\n    var y = 20;\n    function b() {\n        // 看这里\n        console.log(x, y);\n    }\n    b();\n}\na();\n```\n\n* 以函数为分界线划定作用域，所有函数之外是全局作用域\n* 查找变量时，由内向外查找\n  * 在内层作用域找到变量，就会停止查找，不会再找外层\n  * 所有作用域都找不到变量，报错\n* 作用域本质上是函数对象的属性，可以通过 console.dir 来查看调试\n\n\n\n##### 闭包\n\n```js\nvar x = 10;\nfunction a() {\n    var y = 20;\n    function b() {\n        console.log(x,y);\n    }\n    return b;\n}\na()();  // 在外面执行了 b\n```\n\n* 函数定义时，它的作用域已经确定好了，因此无论函数将来去了哪，都能从它的作用域中找到当时那些变量\n* 别被概念忽悠了，闭包就是指**函数能够访问自己的作用域中变量**\n\n\n\n##### let、var 与作用域\n\n如果函数外层引用的是 let 变量，那么外层普通的 {} 也会作为作用域边界，最外层的 let 也占一个 script 作用域\n\n```js\nlet x = 10; \nif(true) {\n    let y = 20;\n    function b() {\n        console.log(x,y);\n    }\n    console.dir(b);\n}\n```\n\n如果函数外层引用的是 var 变量，外层普通的 {} 不会视为边界\n\n```js\nvar x = 10; \nif(true) {\n    var y = 20;\n    function b() {\n        console.log(x,y);\n    }\n    console.dir(b);\n}\n```\n\n如果 var 变量出现了重名，则他俩会被视为同一作用域中的同一个变量\n\n```js\nvar e = 10; \nif(true) {\n    var e = 20;\n    console.log(e);\t// 打印 20\n}\nconsole.log(e);\t\t// 因为是同一个变量，还是打印 20\n```\n\n如果是 let，则视为两个作用域中的两个变量\n\n```js\nlet e = 10; \nif(true) {\n    let e = 20;\t\n    console.log(e);\t// 打印 20\n}\nconsole.log(e);\t\t// 打印 10\n```\n\n要想里面的 e 和外面的 e 能区分开来，最简单的办法是改成 let，或者用函数来界定作用域范围\n\n```js\nvar e = 10; \nif(true) {\n    function b() {\n        var e = 20;\n    \tconsole.log(e);\n    }\n    b();\n}\nconsole.log(e);\t\n```\n\n\n\n#### 2) Array :star:\n\n语法\n\n```js\n// 创建数组\nlet arr = [1,2,3]; \n\n// 获取数组元素\nconsole.log(arr[0]); // 输出 1\n\n// 修改数组元素\narray[0] = 5;\t\t // 数组元素变成了 [5,2,3]\n\n// 遍历数组元素，其中 length 是数组属性，代表数组长度\nfor(let i = 0; i < arr.length; i++) {\n    console.log(arr[i]);\n}\n```\n\nAPI\n\n* push、shift、splice\n\n```js\nlet arr = [1,2,3]; \n\narr.push(4);    \t// 向数组尾部(右侧)添加元素, 结果 [1,2,3,4]\narr.shift();\t\t// 从数组头部(左侧)移除元素, 结果 [2,3,4]\narr.splice(1,1);\t// 删除【参数1】索引位置的【参数2】个元素，结果 [2,4]\n```\n\n* join\n\n```js\nlet arr = ['a','b','c'];\n\narr.join(); \t\t// 默认使用【,】作为连接符，结果 'a,b,c'\narr.join('');\t\t// 结果 'abc'\narr.join('-');\t\t// 结果 'a-b-c'\n```\n\n* map、filter、forEach\n\n```js\nlet arr = [1,2,3,6];\n\nfunction a(i) {   // 代表的新旧元素之间的变换规则\n    return i * 10\n}\n\n// arr.map(a) // 具名函数，结果 [10,20,30,60]\n\n// arr.map( (i) => {return i * 10} ); // 箭头函数\narr.map( i => i * 10 ); // 箭头函数\n```\n\n* 传给 map 的函数，参数代表旧元素，返回值代表新元素\n\nmap 的内部实现（伪代码）\n\n```js\nfunction map(a) { // 参数是一个函数\n    let narr = [];\n    for(let i = 0; i < arr.length; i++) {\n        let o = arr[i]; // 旧元素\n        let n = a(o);   // 新元素\n        narr.push(n);\n    }\n    return narr;\n} \n```\n\nfilter 例子\n\n```js\nlet arr = [1,2,3,6];\narr.filter( (i)=> i % 2 == 1 ); // 结果 [1,3]\n```\n\n* 传给 filter 的函数，参数代表旧元素，返回 true 表示要留下的元素\n\nforEach 例子\n\n```js\nlet arr = [1,2,3,6];\n\n/*for(let i = 0; i < arr.length; i++) {\n    console.log(arr[i]);\n}*/\n\narr.forEach( (i) => console.log(i) );\n```\n\n两个称呼\n\n* 高阶函数，map，filter，forEach\n* 回调函数，例如作为参数传入的函数\n\n\n\n#### 3) Object :star::star:\n\n##### 语法\n\n```js\nlet obj = {\n    属性名: 值,\n    方法名: 函数,\n    get 属性名() {},\n    set 属性名(新值) {}\n}\n```\n\n例1\n\n```js\nlet stu1 = {\n    name: \"小明\",\n    age: 18,\n    study: function(){\n        console.log(this.name + \"爱学习\");\n    }    \n}\n```\n\n例2\n\n```js\nlet name = \"小黑\";\nlet age = 20;\nlet study = function(){\n    console.log(this.name + \"爱学习\");\n}\n\nlet stu2 = { name, age, study }\n```\n\n例3（重点）\n\n```js\nlet stu3 = {\n    name: \"小白\",\n    age: 18,\n    study(){\n        console.log(this.name + \"爱学习\");\n    }    \n}\n```\n\n* **注意**：对象方法这么写，仅限于对象内部\n\n例4\n\n```js\nlet stu4 = {\n    _name: null, /*类似于java中私有成员变量*/\n    get name() {\n        console.log(\"进入了get\");\n        return this._name;\n    },\n    set name(name) {\n        console.log(\"进入了set\");\n        this._name = name;\n    }\n}\n```\n\n调用 get，set\n\n```js\nstu4.name = \"小白\"\n\nconsole.log(stu4.name)\n```\n\n\n\n##### 特色：属性增删\n\n对比一下 Java 中的 Object\n\n* Java 的 Object 是以类作为模板来创建，对象不能脱离类模板的范围，一个对象的属性、能用的方法都是确定好的\n* js 的对象，不需要什么模板，它的属性和方法可以随时加减\n\n```js\nlet stu = {name:'张三'};\nstu.age = 18;\t\t\t\t\t// 添加属性\ndelete stu.age;\t\t\t\t\t// 删除属性\n\nstu.study = function() {\t\t// 添加方法\n    console.log(this.name + \"在学习\");\n}\n```\n\n添加 get，set，需要借助 Object.definePropery\n\n```js\nlet stu = {_name:null};\n\nObject.defineProperty(stu, \"name\", {\n    get(){\n        return this._name;\n    },\n    set(name){\n        this._name = name;\n    }\n});\n```\n\n* 参数1：目标对象\n* 参数2：属性名\n* 参数3：get，set 的定义\n\n\n\n##### 特色：this\n\n先来对 Java 中的 this 有个理解\n\n```java\npublic class TestMethod {\n\n    static class Student {\n        private String name;\n\n        public Student(String name) {\n            this.name = name;\n        }\n\n        public void study(Student this, String subject) {\n            System.out.println(this.name + \"在学习 \" + subject);\n        }\n    }\n\n    public static void main(String[] args) {\n        Student stu = new Student(\"小明\");\n        \n        // 下面的代码，本质上是执行 study(stu, \"java\")，因此 this 就是 stu\n        stu.study(\"java\"); \n    }\n}\n```\n\n* Java 中的 this 是个隐式参数\n* Java 中，我们说 this 代表的就是调用方法的那个对象\n\n\n\njs 中的 this 也是隐式参数，但它与函数运行时上下文相关\n\n例如，一个“落单”的函数\n\n```js\nfunction study(subject) {\n    console.log(this.name + \"在学习 \" + subject)\n}\n```\n\n测试一下\n\n```js\nstudy(\"js\");  // 输出 在学习 js\n```\n\n这是因为此时函数执行，全局对象 window 被当作了 this，window 对象的 name 属性是空串\n\n\n\n同样的函数，如果作为对象的方法\n\n```js\nlet stu = {\n    name:\"小白\",\n    study\n}\n```\n\n这种情况下，会将当前对象作为 this\n\n```js\nstu.study('js'); \t// 输出 小白在学习 js\n```\n\n\n\n还可以动态改变 this\n\n```js\nlet stu = {name:\"小黑\"};\nstudy.call(stu, \"js\");\t// 输出 小黑在学习 js\n```\n\n这回 study 执行时，就把 call 的第一个参数 stu 作为 this\n\n\n\n一个例外是，在**箭头函数**内出现的 this，以外层 this 理解 \n\n用匿名函数\n\n```js\nlet stu = {\n    name: \"小花\",\n    friends: [\"小白\",\"小黑\",\"小明\"],\n    play() {\n        this.friends.forEach(function(e){\n            console.log(this.name + \"与\" + e + \"在玩耍\");\n        });\n    }\n}\nstu.play()\n```\n\n* this.name 所在的函数是【落单】的函数，因此 this 代表 window\n\n输出结果为\n\n```\n与小白在玩耍\n与小黑在玩耍\n与小明在玩耍\n```\n\n用箭头函数\n\n```js\nlet stu = {\n    name: \"小花\",\n    friends: [\"小白\",\"小黑\",\"小明\"],\n    play() {\n        this.friends.forEach(e => {\n            console.log(this.name + \"与\" + e + \"在玩耍\");\n        })\n    }    \n}\n```\n\n* this.name 所在的函数是箭头函数，因此 this 要看它外层的 play 函数，play 又是属于 stu 的方法，因此 this 代表 stu 对象\n\n输出结果为\n\n```\n小花与小白在玩耍\n小花与小黑在玩耍\n小花与小明在玩耍\n```\n\n不用箭头函数的做法\n\n```js\nlet stu = {\n    name: \"小花\",\n    friends: [\"小白\",\"小黑\",\"小明\"],\n    play() {\n        let me = this;\n        this.friends.forEach(function(e){\n            console.log(me.name + \"与\" + e + \"在玩耍\");\n        });\n    }\n}\n```\n\n\n\n##### 特色：原型继承\n\n```js\nlet father = {\n    f1: '父属性',\n    m1: function() {\n        console.log(\"父方法\");\n    }\n}\n\nlet son = Object.create(father);\n\nconsole.log(son.f1);  // 打印 父属性\nson.m1();\t\t\t  // 打印 父方法\n```\n\n* father 是父对象，son 去调用 .m1 或 .f1 时，自身对象没有，就到父对象找\n* son 自己可以添加自己的属性和方法\n* son 里有特殊属性 `__proto__` 代表它的父对象，js 术语： son 的原型对象\n* 不同浏览器对打印 son 的 `__proto__` 属性时显示不同\n  * Edge 打印 console.dir(son) 显示 `[[Prototype]]`\n  * Firefox 打印 console.dir(son) 显示 `<prototype>`\n\n\n\n##### 特色：基于函数的原型继承\n\n出于方便的原因，js 又提供了一种基于函数的原型继承\n\n> **函数职责**\n>\n> 1. 负责创建子对象，给子对象提供属性、方法，功能上相当于构造方法\n>\n> 3. 函数有个特殊的属性 prototype，它就是函数创建的子对象的父对象\n>\n>    **注意！**名字有差异，这个属性的作用就是为新对象提供原型\n\n```js\nfunction cons(f2) {\n    // 创建子对象(this), 给子对象提供属性和方法\n    this.f2 = f2;\n    this.m2 = function () {\n        console.log(\"子方法\");\n    }\n}\n// cons.prototype 就是父对象\ncons.prototype.f1 = \"父属性\";\ncons.prototype.m1 = function() {\n    console.log(\"父方法\");\n}\n```\n\n配合 new 关键字，创建子对象\n\n```js\nlet son = new cons(\"子属性\")\n```\n\n子对象的 `__proto__` 就是函数的 `prototype` 属性\n\n\n\n##### JSON\n\n之前我们讲 http 请求格式时，讲过 json 这种数据格式，它的语法看起来与 js 对象非常相似，例如：\n\n一个 json 对象可以长这样：\n\n```json\n{\n    \"name\":\"张三\",\n    \"age\":18\n}\n```\n\n一个 js 对象长这样：\n\n```js\n{\n    name:\"张三\",\n    age:18\n}\n```\n\n那么他们的区别在哪儿呢？我总结了这么几点\n\n1. 本质不同\n   * json 对象本质上是个字符串，它的职责是作为客户端和服务器之间传递数据的一种格式，它的属性只是样子货\n   * js 对象是切切实实的对象，可以有属性方法\n2. 语法细节不同\n   * json 中只能有 null、true|false、数字、字符串（只有双引号）、对象、数组\n   * json 中不能有除以上的其它 js 对象的特性，如方法等\n   * json 中的属性必须用双引号引起来\n\n\n\njson 字符串与 js 对象的转换\n\n```js\nJSON.parse(json字符串);  // 返回js对象\nJSON.stringify(js对象);  // 返回json字符串\n```\n\n\n\n### 动态类型\n\n静态类型语言，如 Java，值有类型，变量也有类型、赋值给变量时，类型要相符\n\n```java\nint a = 10;\nString b = \"abc\";\n\nint c = \"abc\";  // 错误\n```\n\n而 js 属于动态类型语言，值有类型，但变量没有类型，赋值给变量时，没要求\n\n例如\n\n```js\nlet a = 200;\n\nlet b = 100;\nb = 'abc';\nb = true;\n```\n\n动态类型看起来比较灵活，但变量没有类型，会给后期维护带来困难，例如\n\n```js\nfunction test(obj) {\n    // obj 的类型未知，必须根据不同类型做出相应的容错处理\n}\n```\n\n\n\n## 2. 运算符与表达式\n\n* `+ - * / % ** `\n* `+= -= *= /= %= **=`\n* `++ --`\n* 位运算、移位运算\n* `== != > >= < <=`\n* `=== !==` :star:\n* `&& || !` :star:\n* `?? ?.` :star:\n* `...` :star:\n* 解构赋值 :star:\n\n\n\n### 1) ===\n\n严格相等运算符，用作逻辑判等\n\n```js\n1 == 1    \t// 返回 true \n1 == '1'\t// 返回 true，会先将右侧的字符串转为数字，再做比较\n1 === '1'\t// 返回 false，类型不等，直接返回 false\n```\n\ntypeof 查看某个值的类型\n\n```js\ntypeof 1\t// 返回 'number'\ntypeof '1'\t// 返回 'string'\n```\n\n\n\n### 2) ||\n\n需求，如果参数 n 没有传递，给它一个【男】\n\n**推荐**做法\n\n```js\nfunction test(n = '男') {\n    console.log(n);\n}\n```\n\n你可能的做法\n\n```js\nfunction test(n) {\n    if(n === undefined) {\n        n = '男';\n    }\n    console.log(n);\n}\n```\n\n还可能是这样\n\n```js\nfunction test(n) {\n    n = (n === undefined) ? '男' : n;\n    console.log(n);\n}\n```\n\n一些老旧代码中可能的做法（不推荐）\n\n```js\nfunction test(n) {\n    n = n || '男';\n    console.log(n);\n}\n```\n\n它的语法是\n\n```js\n值1 || 值2\n```\n\n如果值1 是 Truthy，返回值1，如果值1 是 Falsy 返回值 2\n\n\n\n### 3) ?? 与 ?.\n\n#### ??\n\n需求，如果参数 n 没有传递或是 null，给它一个【男】\n\n如果用传统办法\n\n```js\nfunction test(n) {\n    if(n === undefined || n === null) {\n        n = '男';\n    }\n    console.log(n);\n}\n```\n\n用 ??\n\n```js\nfunction test(n) {\n    n = n ?? '男';\n    console.log(n);\n}\n```\n\n语法\n\n```\n值1 ?? 值2\n```\n\n* 值1 是 nullish，返回值2\n* 值1 不是 nullish，返回值1\n\n\n\n#### ?.\n\n需求，函数参数是一个对象，可能包含有子属性\n\n例如，参数可能是\n\n```js\nlet stu1 = {\n    name:\"张三\",\n    address: {\n        city: '北京'\n    }\n};\n\nlet stu2 = {\n    name:\"李四\"\n}\n\nlet stu3 = {\n    name:\"李四\",\n    address: null\n}\n```\n\n现在要访问子属性（有问题）\n\n```js\nfunction test(stu) {\n    console.log(stu.address.city)\n}\n```\n\n现在希望当某个属性是 nullish 时，短路并返回 undefined，可以用 ?.\n\n```js\nfunction test(stu) {\n    console.log(stu.address?.city)\n}\n```\n\n用传统办法 \n\n```js\nfunction test(stu) {\n    if(stu.address === undefined || stu.address === null) {\n        console.log(undefined);\n        return;\n    }\n    console.log(stu.address.city)\n}\n```\n\n\n\n### 4) ...\n\n展开运算符\n\n作用1：打散数组，把元素传递给多个参数\n\n```js\nlet arr = [1,2,3];\n\nfunction test(a,b,c) {\n    console.log(a,b,c);\n}\n```\n\n需求，把数组元素依次传递给函数参数\n\n传统写法\n\n```js\ntest(arr[0],arr[1],arr[2]);\t\t// 输出 1,2,3\n```\n\n展开运算符写法\n\n```js\ntest(...arr);\t\t\t\t\t// 输出 1,2,3\n```\n\n* 打散可以理解为【去掉了】数组外侧的中括号，只剩下数组元素\n\n\n\n作用2：复制数组或对象\n\n数组\n\n```js\nlet arr1 = [1,2,3];\nlet arr2 = [...arr1];\t\t// 复制数组\n```\n\n对象\n\n```js\nlet obj1 = {name:'张三', age: 18};\n\nlet obj2 = {...obj1};\t\t// 复制对象\n```\n\n**注意**：展开运算符复制属于浅拷贝，例如\n\n```js\nlet o1 = {name:'张三', address: {city: '北京'} }\n\nlet o2 = {...o1};\n```\n\n\n\n作用3：合并数组或对象\n\n合并数组\n\n```js\nlet a1 = [1,2];\nlet a2 = [3,4];\n\nlet b1 = [...a1,...a2];\t\t// 结果 [1,2,3,4]\nlet b2 = [...a2,5,...a1]\t// 结果 [3,4,5,1,2]\n```\n\n合并对象\n\n```js\nlet o1 = {name:'张三'};\nlet o2 = {age:18};\nlet o3 = {name:'李四'};\n\nlet n1 = {...o1, ...o2};\t// 结果 {name:'张三',age:18}\n\nlet n2 = {...o3, ...o2, ...o1}; // 结果{name:'李四',age:18}\n```\n\n* 复制对象时出现同名属性，后面的会覆盖前面的\n\n\n\n### 5) [] {}\n\n解构赋值\n\n#### []\n\n用在声明变量时\n\n```js\nlet arr = [1,2,3];\n\nlet [a, b, c] = arr;\t// 结果 a=1, b=2, c=3\n```\n\n用在声明参数时\n\n```js\nlet arr = [1,2,3];\n\nfunction test([a,b,c]) {\n    console.log(a,b,c) \t// 结果 a=1, b=2, c=3\n}\n\ntest(arr);\t\t\t\t\n```\n\n\n\n#### {}\n\n用在声明变量时\n\n```js\nlet obj = {name:\"张三\", age:18};\n\nlet {name,age} = obj;\t// 结果 name=张三, age=18\n```\n\n用在声明参数时\n\n```js\nlet obj = {name:\"张三\", age:18};\n\nfunction test({name, age}) {\n    console.log(name, age); // 结果 name=张三, age=18\n}\n\ntest(obj)\n```\n\n\n\n## 3. 控制语句\n\n* `if ... else`\n* `switch`\n* `while`\n* `do ... while`\n* `for` \n* `for ... in` :star:\n* `for ... of` :star:\n* `try ... catch` :star:\n\n\n\n### 1) for in\n\n主要用来遍历对象\n\n```js\nlet father = {name:'张三', age:18, study:function(){}};\n\nfor(const n in father) {\n    console.log(n);\n}\n```\n\n* 其中 const n 代表遍历出来的属性名\n* 注意1：方法名也能被遍历出来（它其实也算一种特殊属性）\n* 注意2：遍历子对象时，父对象的属性会跟着遍历出来\n\n```js\nlet son = Object.create(father);\nson.sex = \"男\";\n\nfor(const n in son) {\n    console.log(n);\n}\n```\n\n* 注意3：在 for in 内获取属性值，要使用 [] 语法，而不能用 . 语法\n\n```js\nfor(const n in son) {\n    console.log(n, son[n]);\n}\n```\n\n\n\n### 2) for of\n\n主要用来遍历数组，也可以是其它可迭代对象，如 Map，Set 等\n\n```js\nlet a1 = [1,2,3];\n\nfor(const i of a1) {\n    console.log(i);\n}\n\nlet a2 = [\n    {name:'张三', age:18},\n    {name:'李四', age:20},\n    {name:'王五', age:22}\n];\n\nfor(const obj of a2) {\n    console.log(obj.name, obj.age);\n}\n\nfor(const {name,age} of a2) {\n    console.log(name, age);\n}\n```\n\n\n\n### 3) try catch\n\n```js\nlet stu1 = {name:'张三', age:18, address: {city:'北京'}};\nlet stu2 = {name:'张三', age:18};\n\nfunction test(stu) {\n    try {\n        console.log(stu.address.city)   \n    } catch(e) {\n        console.log('出现了异常', e.message)\n    } finally {\n        console.log('finally');\n    }\n}\n```\n\n\n\n## 4. API\n\n### 环境准备\n\n#### 1) 安装 nvm\n\nnvm 即 (node version manager)，好处是方便切换 node.js 版本\n\n安装注意事项\n\n1. 要卸载掉现有的 nodejs\n2. 提示选择 nvm 和 nodejs 目录时，一定要避免目录中出现空格\n3. 选用【以管理员身份运行】cmd 程序来执行 nvm 命令\n4. 首次运行前设置好国内镜像地址\n\n```\nnvm node_mirror http://npm.taobao.org/mirrors/node/\nnvm npm_mirror https://npm.taobao.org/mirrors/npm/\n```\n\n首先查看有哪些可用版本\n\n```\nnvm list available\n```\n\n输出\n\n```\n\n|   CURRENT    |     LTS      |  OLD STABLE  | OLD UNSTABLE |\n|--------------|--------------|--------------|--------------|\n|    18.7.0    |   16.16.0    |   0.12.18    |   0.11.16    |\n|    18.6.0    |   16.15.1    |   0.12.17    |   0.11.15    |\n|    18.5.0    |   16.15.0    |   0.12.16    |   0.11.14    |\n|    18.4.0    |   16.14.2    |   0.12.15    |   0.11.13    |\n|    18.3.0    |   16.14.1    |   0.12.14    |   0.11.12    |\n|    18.2.0    |   16.14.0    |   0.12.13    |   0.11.11    |\n|    18.1.0    |   16.13.2    |   0.12.12    |   0.11.10    |\n|    18.0.0    |   16.13.1    |   0.12.11    |    0.11.9    |\n|    17.9.1    |   16.13.0    |   0.12.10    |    0.11.8    |\n|    17.9.0    |   14.20.0    |    0.12.9    |    0.11.7    |\n|    17.8.0    |   14.19.3    |    0.12.8    |    0.11.6    |\n|    17.7.2    |   14.19.2    |    0.12.7    |    0.11.5    |\n|    17.7.1    |   14.19.1    |    0.12.6    |    0.11.4    |\n|    17.7.0    |   14.19.0    |    0.12.5    |    0.11.3    |\n|    17.6.0    |   14.18.3    |    0.12.4    |    0.11.2    |\n|    17.5.0    |   14.18.2    |    0.12.3    |    0.11.1    |\n|    17.4.0    |   14.18.1    |    0.12.2    |    0.11.0    |\n|    17.3.1    |   14.18.0    |    0.12.1    |    0.9.12    |\n|    17.3.0    |   14.17.6    |    0.12.0    |    0.9.11    |\n|    17.2.0    |   14.17.5    |   0.10.48    |    0.9.10    |\n```\n\n建议安装 LTS（长期支持版）\n\n```\nnvm install 16.16.0\nnvm install 14.20.0\n```\n\n执行 `nvm list` 会列出已安装版本\n\n切换到 16.16.0\n\n```\nnvm use 16.16.0\n```\n\n切换到 14.20.0\n\n```\nnvm use 14.20.0\n```\n\n安装后 nvm 自己的环境变量会自动添加，但可能需要手工添加 nodejs 的 PATH 环境变量\n\n\n\n#### 2) 检查 npm\n\nnpm 是 js 的包管理器，就类似于 java 界的 maven，要确保它使用的是国内镜像\n\n检查镜像\n\n```\nnpm get registry\n```\n\n如果返回的不是 `https://registry.npm.taobao.org/`，需要做如下设置\n\n```\nnpm config set registry https://registry.npm.taobao.org/\n```\n\n\n\n#### 3) 搭建前端服务器\n\n新建一个保存项目的 client 文件夹，进入文件夹执行\n\n```\nnpm install express --save-dev\n```\n\n修改 package.json 文件\n\n```json\n{\n  \"type\": \"module\",\n  \"devDependencies\": {\n    \"express\": \"^4.18.1\"\n  }\n}\n```\n\n* 其中 devDependencies 是 npm install --save-dev 添加的\n\n编写 main.js 代码\n\n```js\nimport express from 'express'\nconst app = express()\n\napp.use(express.static('./'))\napp.listen(7070)\n```\n\n执行 js 代码（运行前端服务器）\n\n```\nnode main.js\n```\n\n\n\n### 前端案例\n\n初步效果\n\n![image-20220812103323220](https://s1.ax1x.com/2022/10/21/xcKwEF.png)\n\n架构\n\n![image-20220812103219916](https://s1.ax1x.com/2022/10/21/xcKNuV.png)\n\n* 前端只有静态页面，使用 Express 服务器\n* 后端使用 Tomcat 服务器，通过 SpringBoot、MyBatis 等框架获取数据库数据\n\n\n\n#### 1) 查找元素\n\n* document.getElementById - 根据 id 值查找一个元素\n* [document|元素].querySelector - 根据选择器查找第一个匹配元素\n* [document|元素].querySelectorAll - 根据选择器查找所有匹配元素\n\n例如，有下面的 html 代码\n\n```html\n<div>\n    <div class=\"title\">学生列表</div>\n    <div class=\"thead\">\n        <div class=\"row bold\">\n            <div class=\"col\">编号</div>\n            <div class=\"col\">姓名</div>\n            <div class=\"col\">性别</div>\n            <div class=\"col\">年龄</div>\n        </div>\n    </div>\n    <div class=\"tbody\">\n        <div class=\"row\">\n            <div class=\"col\">1</div>\n            <div class=\"col\">张三</div>\n            <div class=\"col\">男</div>\n            <div class=\"col\">18</div>\n        </div>\n    </div>\n</div>\n```\n\n执行\n\n```js\ndocument.querySelector('.title'); // 找到 <div class=\"title\">学生列表</div>\n```\n\n执行\n\n```js\ndocument.querySelector('.col'); // 找到 <div class=\"col\">编号</div>\n```\n\n执行\n\n```js\ndocument.querySelectorAll('.col');\n\n/*\n  找到的是一个集合\n  <div class=\"col\">编号</div>\n  <div class=\"col\">姓名</div>\n  <div class=\"col\">性别</div>\n  <div class=\"col\">年龄</div>\n  <div class=\"col\">1</div>\n  <div class=\"col\">张三</div>\n  <div class=\"col\">男</div>\n  <div class=\"col\">18</div>\n*/\n```\n\n执行\n\n```js\nconst thead = document.querySelector('.thead');\n\n// 只在 thead 元素范围内找\nthead.querySelectorAll('.col');\n\n/*\n  找到的是一个集合\n  <div class=\"col\">编号</div>\n  <div class=\"col\">姓名</div>\n  <div class=\"col\">性别</div>\n  <div class=\"col\">年龄</div>\n*/\n```\n\n根据 id 属性查找既可以用\n\n```js\ndocument.getElementById(\"id值\")\n```\n\n也可以用 \n\n```js\ndocument.querySelector(\"#id值\")\n```\n\n\n\n#### 2) 修改元素内容\n\n* 元素.innerHTML\n* 元素.textContent\n\n例如\n\n```js\ndocument.querySelector('.title').innerHTML = '侠客列表'\n```\n\n效果\n\n![image-20220812161003958](https://s1.ax1x.com/2022/10/21/xcKUBT.png)\n\ninnerHTML  会解析内容中的标签，例如\n\n![image-20220812161137912](https://s1.ax1x.com/2022/10/21/xcK0N4.png)\n\ntextContext 不会解析内容中的标签\n\n![image-20220812161341825](https://s1.ax1x.com/2022/10/21/xcKaHU.png)\n\n给 innerHTML 或 textContent 赋值空串，可以实现清空标签内容的效果\n\n\n\n#### 3) 利用模板\n\n```html\n<div>\n    <div class=\"title\">学生列表</div>\n    <div class=\"thead\">\n        <div class=\"row bold\">\n            <div class=\"col\">编号</div>\n            <div class=\"col\">姓名</div>\n            <div class=\"col\">性别</div>\n            <div class=\"col\">年龄</div>\n        </div>\n    </div>\n    <div class=\"tbody\">\n    </div>\n</div>\n\n<template id=\"tp\">\n    <div class=\"row\">\n        <div class=\"col\">xx</div>\n        <div class=\"col\">xx</div>\n        <div class=\"col\">xx</div>\n        <div class=\"col\">xx</div>\n    </div>\n</template>\n\n<script>\n    // 将来这些数据从 java 端返回\n    let array = [\n        { id: 1, name: '张三', sex: '男', age: 18 },\n        { id: 2, name: '李四', sex: '女', age: 17 }\n    ];\n\n    const tp = document.getElementById(\"tp\");\n    const row = tp.content;\n    const [c1,c2,c3,c4] = row.querySelectorAll(\".col\");\n    const tbody = document.querySelector('.tbody');\n    for(const {id,name,sex,age} of array) {\n        c1.textContent = id;\n        c2.textContent = name;\n        c3.textContent = sex;\n        c4.textContent = age;\n        // 复制元素\n        const newRow = document.importNode(row, true);\n        // 建立父子关系，左边父，右边子\n        tbody.appendChild(newRow);\n    }\n</script>\n```\n\n\n\n#### 4) Fetch API\n\nFetch API 可以用来获取远程数据，它有两种方式接收结果，同步方式与异步方式\n\n格式\n\n```js\nfetch(url, options) // 返回 Promise\n```\n\n同步方式\n\n```js\nconst 结果 = await Promise\n// 后续代码\n```\n\n* await 关键字必须在一个标记了 async 的 function 内来使用\n* 后续代码不会在结果返回前执行\n\n异步方式\n\n```js\nPromise\n\t.then(结果 => { ... })\n// 后续代码                 \n```\n\n* 后续代码不必等待结果返回就可以执行\n\n\n\n例：\n\n在 express 服务器上有 students.json 文件\n\n```json\n[\n    { \"id\": 1, \"name\": \"张三\", \"sex\": \"男\", \"age\": 18 },\n    { \"id\": 2, \"name\": \"李四\", \"sex\": \"女\", \"age\": 17 }\n]\n```\n\n现在用 fetch api 获取这些数据，并展示\n\n同步方式\n\n```html\n<script>\n    async function findStudents() {\n        try {\n            // 获取响应对象\n            const resp = await fetch('students.json')\n\n            // 获取响应体, 按json格式转换为js数组\n            const array = await resp.json();\n\n            // 显示数据\n            const tp = document.getElementById(\"tp\");\n            const row = tp.content;\n            const [c1,c2,c3,c4] = row.querySelectorAll(\".col\");\n            const tbody = document.querySelector('.tbody');\n            for(const {id,name,sex,age} of array) {\n                c1.textContent = id;\n                c2.textContent = name;\n                c3.textContent = sex;\n                c4.textContent = age;\n                // 复制元素\n                const newRow = document.importNode(row, true);\n                // 建立父子关系\n                tbody.appendChild(newRow);\n            }\n        } catch (e) {\n            console.log(e);\n        }\n\n    }\n    findStudents()\n</script>\n```\n\n* fetch('students.json') 内部会发送请求，但响应结果不能立刻返回，因此 await 就是等待响应结果返回\n* 其中 resp.json() 也不是立刻能返回结果，它返回的也是 Promise 对象，也要配合 await 取结果\n\n异步方式\n\n```html\n<script>\n    fetch('students.json')\n        .then( resp => resp.json() )\n        .then( array => {\n        \t// 显示数据\n            const tp = document.getElementById(\"tp\");\n            const row = tp.content;\n            const [c1,c2,c3,c4] = row.querySelectorAll(\".col\");\n            const tbody = document.querySelector('.tbody');\n            for(const {id,name,sex,age} of array) {\n                c1.textContent = id;\n                c2.textContent = name;\n                c3.textContent = sex;\n                c4.textContent = age;\n                // 复制元素\n                const newRow = document.importNode(row, true);\n                // 建立父子关系\n                tbody.appendChild(newRow);\n            }\n        })\n        .catch( e => console.log(e) )\n\n\n</script>\n```\n\n* 第一个 then 是在响应返回后，才会调用它里面的箭头函数，箭头函数参数即 resp  响应对象\n* 第二个 then 是在 json 解析完成后，才会调用它里面的箭头函数，箭头函数参数即解析结果（本例是 array 数组）\n* 上一个 then 返回的是 Promise 对象时，才能链式调用下一个 then\n\n\n\n##### 跨域问题\n\n![image-20220814105448882](https://s1.ax1x.com/2022/10/21/xcKB4J.png)\n\n* 只要协议、主机、端口之一不同，就不同源，例如\n  * http://localhost:7070/a 和 https://localhost:7070/b 就不同源\n* 同源检查是浏览器的行为，而且只针对 fetch、xhr 请求\n  * 如果是其它客户端，例如 java http client，postman，它们是不做同源检查的\n  * 通过表单提交、浏览器直接输入 url 地址这些方式发送的请求，也不会做同源检查\n* 更多相关知识请参考\n  * [跨源资源共享（CORS） - HTTP | MDN (mozilla.org)](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS)\n\n\n\n请求响应头解决\n\n![image-20220814144040703](https://s1.ax1x.com/2022/10/21/xcKrC9.png)\n\n* fetch 请求跨域，会携带一个 Origin 头，代表【发请求的资源源自何处】，目标通过它就能辨别是否发生跨域\n  * 我们的例子中：student.html 发送 fetch 请求，告诉 tomcat，我源自 localhost:7070\n* 目标资源通过返回 Access-Control-Allow-Origin 头，告诉浏览器【允许哪些源使用此响应】\n  * 我们的例子中：tomcat 返回 fetch 响应，告诉浏览器，这个响应允许源自 localhost:7070 的资源使用\n\n\n\n代理解决\n\n![image-20220814161532141](https://s1.ax1x.com/2022/10/21/xcKTgI.png)\n\n```cmd\nnpm install http-proxy-middleware --save-dev\n```\n\n在 express 服务器启动代码中加入\n\n```js\nimport {createProxyMiddleware} from 'http-proxy-middleware'\n\n// ...\n\napp.use('/api', createProxyMiddleware({ target: 'http://localhost:8080', changeOrigin: true }));\n```\n\nfetch 代码改为\n\n```js\nconst resp = await fetch('http://localhost:7070/api/students')\n```\n\n或\n\n```js\nconst resp = await fetch('/api/students')\n```\n\n\n\n#### 5) 模块化\n\n单个导出 const、let、function\n\n```js\nexport const a = 10;\nexport let b = 20;\nexport function c() {\n    console.log('c');\n}\n```\n\n一齐导出\n\n```js\nconst a = 10;\nlet b = 20;\nfunction c() {\n    console.log('c')\n}\n\nexport {a,b,c}\n```\n\n导出 default，只能有一个\n\n```js\nexport const a = 10;\nexport let b = 20;\nexport function c() {\n    console.log('c')\n}\n\nexport default b;\n```\n\n\n\nimport 语法\n\n```html\n<script type=\"module\">\n\timport 语句\n</script>\n```\n\n* import 需要遵循同源策略\n\n整个导入\n\n```js\nimport * as module from '/1.js'\nconsole.log(module.a)\t\t// 输出10\nconsole.log(module.b)\t\t// 输出20\nmodule.c()\t\t\t\t\t// 输出c\n```\n\n单个导入\n\n```js\nimport {a,c} from '/1.js'\nconsole.log(a)\t\t\t\t// 输出10\nc()\t\t\t\t\t\t\t// 输出c\n```\n\n导入默认\n\n```js\nimport x from '/1.js'\nconsole.log(x)\t\t\t\t// 输出20\n```\n\n","source":"_posts/08_Java程序员要掌握的前端-js.md","raw":"---\ntitle:  JS知识点总结\ntags: [编程,学习,Javascript,前端]\ncategories: [Javascript]\ndate: 2022-10-20\n\n---\n# Javascript\n\n它是一种脚本语言，可以用来更改页面内容，控制多媒体，制作图像、动画等等\n\n\n\n例子\n\n* 修改页面内容\n\n\n\njs 代码位置\n\n```html\n<script>\n\t// js 代码\n</script>\n```\n\n引入 js 脚本\n\n```html\n<script src=\"js脚本路径\"></script>\n```\n\n* 注意，到了框架之后，引入方式会有不同\n\n\n\n\n\n## 1. 变量与数据类型\n\n### 声明变量\n\n#### 1) let \n\n```js\nlet 变量名 = 值;\n```\n\n* let 声明的变量可以被多次赋值，例如\n\n```js\nlet a = 100;  // 初始值是 100\na = 200;\t  // ok, 被重新赋值为 200\n```\n\n#### 2) const \n\n* const 修饰的叫常量，只能赋值一次\n\n```js\nconst b = 300; // 初始值是 300\nb = 400;\t   // error, 不能再次赋值\n```\n\n* const 并不意味着它引用的内容不可修改，例如\n\n```js\nconst c = [1,2,3];\nc[2] = 4; \t        // ok, 数组内容被修改成 [1,2,4]\nc = [5,6];\t\t\t// error, 不能再次赋值\n```\n\n#### 3) var\n\nvar 声明的变量可以被多次赋值，例如\n\n```js\nvar f = 100;\nf = 200;\n```\n\n\n\n### 基本类型\n\n#### 1,2) undefined 和 null\n\n* 执行表达式或函数，没有返回结果，出现 undefined\n* 访问数组不存在的元素，访问对象不存在的属性，出现 undefined\n* 定义变量，没有初始化，出现 undefined\n\n例\n\n```js\nconsole.log(1);  \t// 函数没有返回值, 结果是  undefined\nlet a = 10;\t\t \t// 表达式没有返回值, 结果是 undefined\nlet b = [1,2,3];\nconsole.log(b[10]); // 数组未定义元素是 undefined\nlet c = {\"name\":\"张三\"};\nconsole.log(c.age); // 对象未定义属性是 undefined\nlet d;\nconsole.log(d);\t\t// 变量未初始化是 undefined\n```\n\n二者共同点\n\n* 都没有属性、方法\n* 二者合称 Nullish\n\n二者区别\n\n* undefined 由 js 产生\n* null 由程序员提供\n\n\n\n#### 3) string \n\njs 字符串三种写法\n\n```js\nlet a = \"hello\";  // 双引号\nlet b = \"world\";  // 单引号\nlet c = `hello`;  // 反引号\n```\n\n\n\nhtml 代码如下，用 java 和 js 中的字符串如何表示？\n\n```html\n<a href=\"1.html\">超链接</a>\n```\n\njava 显得比较繁琐\n\n```java\nString s1 = \"<a href=\\\"1.html\\\">超链接</a>\";\n\nString s2 = \"\"\"\n    <a href=\"1.html\">超链接</a>\"\"\";\n```\n\njs 就比较灵活\n\n```js\nlet s1 = '<a href=\"1.html\">超链接</a>';\n\nlet s2 = `<a href=\"1.html\">超链接</a>`;\n```\n\n\n\n模板字符串（Template strings）\n\n需求：拼接 URI 的请求参数，如\n\n```\n/test?name=zhang&age=18\n/test?name=li&age=20\n```\n\n传统方法拼接\n\n```js\nlet name = ; // zhang li ...\nlet age = ; // 18 20 ...\n\nlet uri = \"/test?name=\" + name + \"&age=\" + age;\n```\n\n模板字符串方式\n\n```js\nlet name = ; // zhang li ...\nlet age = ; // 18 20 ...\n\nlet uri = `/test?name=${name}&age=${age}`;\n```\n\n\n\n#### 4,5) number 和 bigint\n\nnumber 类型标识的是双精度浮动小数，例如\n\n```js\n10 / 3;   // 结果 3.3333333333333335\n```\n\n既然是浮点小数，那么可以除零\n\n```js\n10 / 0;\t  // 结果 Infinity 正无穷大\n-10 / 0;  // 结果 -Infinity 负无穷大\n```\n\n浮点小数都有运算精度问题，例如\n\n```js\n2.0 - 1.1; // 结果 0.8999999999999999\n```\n\n字符串转数字\n\n```js\nparseInt(\"10\"); \t// 结果是数字 10 \nparseInt(\"10.5\");\t// 结果是数字 10, 去除了小数部分\nparseInt(\"10\") / 3; // 结果仍视为 number 浮点数, 因此结果为 3.3333333333333335\n\nparseInt(\"abc\");\t// 转换失败，结果是特殊值 NaN (Not a Number)\n```\n\n要表示真正的整数，需要用 bigint，数字的结尾用 n 表示它是一个 bigint 类型\n\n```js\n10n / 3n;\t\t\t// 结果 3n, 按整数除法处理\n```\n\n\n\n#### 6) boolean \n\n* Truthy\n* Falsy\n\n在 js 中，并不是 boolean 才能用于条件判断，你可以在 if 语句中使用【数字】、【字符串】... 作为判断条件\n\n```js\nlet b = 1;\n\nif(b) { // true\n    console.log(\"进入了\");\n}\n```\n\n\n\n这时就有一个规则，当需要条件判断时，这个值被当作 true 还是 false，当作 true 的值归类为 truthy，当作 false 的值归类为 falsy\n\n下面值都是 falsy\n\n* `false`\n* `Nullish (null, undefined)`\n* `0, 0n, NaN`\n* 长度为零的字符串\n\n剩余的值绝大部分都是 truthy\n\n有几个容易被当作 falsy 实际是 truthy 的\n\n* `\"false\", \"0\"` 即字符串的 false 和 字符串的零\n* `[]` 空数组\n* `{}` 空对象\n\n\n\n#### 7) symbol\n\n* 很少使用\n\n\n\n### 对象类型\n\n#### 1) Function \n\n##### 定义函数\n\n```js\nfunction 函数名(参数) {\n    // 函数体\n    return 结果;\n}\n```\n\n例\n\n```js\nfunction add(a, b) {\n    return a + b;\n}\n```\n\n##### 调用函数\n\n```js\n函数名(实参);\n```\n\n例\n\n```js\nadd(1, 2);     // 返回 3\n```\n\njs 中的函数调用特点：对参数的**类型**和**个数**都没有限制，例如\n\n```js\nadd('a', 'b');  // 返回 ab\nadd(4, 5, 6);   // 返回 9, 第三个参数没有被用到, 不会报错\nadd(1);\t\t\t// 返回 NaN, 这时 b 没有定义是 undefined, undefined 做数学运算结果就是 NaN\n```\n\n\n\n##### 默认参数\n\njava 中（spring）要实现默认参数的效果得这么做：\n\n```java\n@RestController \npublic class MyController {\n    \n    @RequestMapping(\"/page\")\n    @ResponseBody\n    public void page(\n        @RequestParam(defaultValue=\"1\") int page, \n        @RequestParam(defaultValue=\"10\") int size\n    ){\n        // ...\n    }\n}\n```\n\njs\n\n```js\nfunction pagination(page = 1, size = 10) {\n    console.log(page, size);\n}\n```\n\n\n\n##### 匿名函数\n\n语法\n\n```js\n(function (参数) {\n    // 函数体\n    return 结果;\n})\n```\n\n例\n\n```js\n(function(a,b){\n    return a + b;\n})\n```\n\n第一种场景：定义完毕后立刻调用\n\n```js\n(function(a,b){\n    return a + b;\n})(1,2)\n```\n\n第二种场景：作为其它对象的方法，例如\n\n页面有元素\n\n```html\n<p id=\"p1\">点我啊</p>\n```\n\n此元素有一个 onclick 方法，会在鼠标单击这个元素后被执行，onclick 方法刚开始是 null，需要赋值后才能使用\n\n```js\ndocument.getElementById(\"p1\").onclick = (function(){\n    console.log(\"鼠标单击了...\");\n});\n```\n\n\n\n##### 箭头函数\n\n```js\n(参数) => {\n    // 函数体\n    return 结果;\n}\n```\n\n* 如果没有参数，() 还是要保留\n* 如果只有一个参数，() 可以省略\n* 如果函数体内只有一行代码，{} 可以省略\n* 如果这一行代码就是结果，return 可以省略\n\n例\n\n```js\ndocument.getElementById(\"p1\").onclick = () =>  console.log(\"aa\");\n```\n\n\n\n##### 函数是对象\n\n以下形式在 js 中非常常见！\n\n1. 可以参与赋值，例，具名函数也能参与赋值\n\n```js\nfunction abc() {\n    console.log(\"bb\");\n}\n\ndocument.getElementById(\"p1\").onclick = abc;\n```\n\n\n\n2. 有属性、有方法，执行 `console.dir(abc)`，输出结果如下\n\n```\nƒ abc()\n    arguments: null\n    caller: null\n    length: 0\n    name: \"abc\"\n    ➡prototype: {constructor: ƒ}\n    [[FunctionLocation]]: VM1962:1\n    ➡[[Prototype]]: ƒ ()\n    ➡[[Scopes]]: Scopes[1]\n```\n\n* 其中带有 f 标记的是方法，不带的是属性\n* 带有 ➡ 符号的可以继续展开，限于篇幅省略了\n\n* 带有 `[[ ]]` 的是内置属性，不能访问，只能查看\n* 相对重要的是 `[[Prototype]]` 和 `[[Scopes]]` 会在后面继承和作用域时讲到\n\n\n\n3. 可以作为方法参数\n\n```js\nfunction a() {\n    console.log('a')\n}\n\nfunction b(fn) {          // fn 将来可以是一个函数对象\n    console.log('b')\n    fn();                 // 调用函数对象\n}\n\nb(a)\n```\n\n\n\n4. 可以作为方法返回值\n\n```js\nfunction c() {\n    console.log(\"c\");\n    function d() {\n        console.log(\"d\");\n    }\n    return d;\n}\n\nc()()\n```\n\n\n\n##### 函数作用域\n\n函数可以嵌套（js 代码中很常见，只是嵌套的形式更多是匿名函数，箭头函数）\n\n```js\nfunction a() {\n    function b() {        \n    }\n}\n```\n\n看下面的例子\n\n```js\nfunction c() {\n    var z = 30;\n}\n\nvar x = 10;\nfunction a() {\n    var y = 20;\n    function b() {\n        // 看这里\n        console.log(x, y);\n    }\n    b();\n}\na();\n```\n\n* 以函数为分界线划定作用域，所有函数之外是全局作用域\n* 查找变量时，由内向外查找\n  * 在内层作用域找到变量，就会停止查找，不会再找外层\n  * 所有作用域都找不到变量，报错\n* 作用域本质上是函数对象的属性，可以通过 console.dir 来查看调试\n\n\n\n##### 闭包\n\n```js\nvar x = 10;\nfunction a() {\n    var y = 20;\n    function b() {\n        console.log(x,y);\n    }\n    return b;\n}\na()();  // 在外面执行了 b\n```\n\n* 函数定义时，它的作用域已经确定好了，因此无论函数将来去了哪，都能从它的作用域中找到当时那些变量\n* 别被概念忽悠了，闭包就是指**函数能够访问自己的作用域中变量**\n\n\n\n##### let、var 与作用域\n\n如果函数外层引用的是 let 变量，那么外层普通的 {} 也会作为作用域边界，最外层的 let 也占一个 script 作用域\n\n```js\nlet x = 10; \nif(true) {\n    let y = 20;\n    function b() {\n        console.log(x,y);\n    }\n    console.dir(b);\n}\n```\n\n如果函数外层引用的是 var 变量，外层普通的 {} 不会视为边界\n\n```js\nvar x = 10; \nif(true) {\n    var y = 20;\n    function b() {\n        console.log(x,y);\n    }\n    console.dir(b);\n}\n```\n\n如果 var 变量出现了重名，则他俩会被视为同一作用域中的同一个变量\n\n```js\nvar e = 10; \nif(true) {\n    var e = 20;\n    console.log(e);\t// 打印 20\n}\nconsole.log(e);\t\t// 因为是同一个变量，还是打印 20\n```\n\n如果是 let，则视为两个作用域中的两个变量\n\n```js\nlet e = 10; \nif(true) {\n    let e = 20;\t\n    console.log(e);\t// 打印 20\n}\nconsole.log(e);\t\t// 打印 10\n```\n\n要想里面的 e 和外面的 e 能区分开来，最简单的办法是改成 let，或者用函数来界定作用域范围\n\n```js\nvar e = 10; \nif(true) {\n    function b() {\n        var e = 20;\n    \tconsole.log(e);\n    }\n    b();\n}\nconsole.log(e);\t\n```\n\n\n\n#### 2) Array :star:\n\n语法\n\n```js\n// 创建数组\nlet arr = [1,2,3]; \n\n// 获取数组元素\nconsole.log(arr[0]); // 输出 1\n\n// 修改数组元素\narray[0] = 5;\t\t // 数组元素变成了 [5,2,3]\n\n// 遍历数组元素，其中 length 是数组属性，代表数组长度\nfor(let i = 0; i < arr.length; i++) {\n    console.log(arr[i]);\n}\n```\n\nAPI\n\n* push、shift、splice\n\n```js\nlet arr = [1,2,3]; \n\narr.push(4);    \t// 向数组尾部(右侧)添加元素, 结果 [1,2,3,4]\narr.shift();\t\t// 从数组头部(左侧)移除元素, 结果 [2,3,4]\narr.splice(1,1);\t// 删除【参数1】索引位置的【参数2】个元素，结果 [2,4]\n```\n\n* join\n\n```js\nlet arr = ['a','b','c'];\n\narr.join(); \t\t// 默认使用【,】作为连接符，结果 'a,b,c'\narr.join('');\t\t// 结果 'abc'\narr.join('-');\t\t// 结果 'a-b-c'\n```\n\n* map、filter、forEach\n\n```js\nlet arr = [1,2,3,6];\n\nfunction a(i) {   // 代表的新旧元素之间的变换规则\n    return i * 10\n}\n\n// arr.map(a) // 具名函数，结果 [10,20,30,60]\n\n// arr.map( (i) => {return i * 10} ); // 箭头函数\narr.map( i => i * 10 ); // 箭头函数\n```\n\n* 传给 map 的函数，参数代表旧元素，返回值代表新元素\n\nmap 的内部实现（伪代码）\n\n```js\nfunction map(a) { // 参数是一个函数\n    let narr = [];\n    for(let i = 0; i < arr.length; i++) {\n        let o = arr[i]; // 旧元素\n        let n = a(o);   // 新元素\n        narr.push(n);\n    }\n    return narr;\n} \n```\n\nfilter 例子\n\n```js\nlet arr = [1,2,3,6];\narr.filter( (i)=> i % 2 == 1 ); // 结果 [1,3]\n```\n\n* 传给 filter 的函数，参数代表旧元素，返回 true 表示要留下的元素\n\nforEach 例子\n\n```js\nlet arr = [1,2,3,6];\n\n/*for(let i = 0; i < arr.length; i++) {\n    console.log(arr[i]);\n}*/\n\narr.forEach( (i) => console.log(i) );\n```\n\n两个称呼\n\n* 高阶函数，map，filter，forEach\n* 回调函数，例如作为参数传入的函数\n\n\n\n#### 3) Object :star::star:\n\n##### 语法\n\n```js\nlet obj = {\n    属性名: 值,\n    方法名: 函数,\n    get 属性名() {},\n    set 属性名(新值) {}\n}\n```\n\n例1\n\n```js\nlet stu1 = {\n    name: \"小明\",\n    age: 18,\n    study: function(){\n        console.log(this.name + \"爱学习\");\n    }    \n}\n```\n\n例2\n\n```js\nlet name = \"小黑\";\nlet age = 20;\nlet study = function(){\n    console.log(this.name + \"爱学习\");\n}\n\nlet stu2 = { name, age, study }\n```\n\n例3（重点）\n\n```js\nlet stu3 = {\n    name: \"小白\",\n    age: 18,\n    study(){\n        console.log(this.name + \"爱学习\");\n    }    \n}\n```\n\n* **注意**：对象方法这么写，仅限于对象内部\n\n例4\n\n```js\nlet stu4 = {\n    _name: null, /*类似于java中私有成员变量*/\n    get name() {\n        console.log(\"进入了get\");\n        return this._name;\n    },\n    set name(name) {\n        console.log(\"进入了set\");\n        this._name = name;\n    }\n}\n```\n\n调用 get，set\n\n```js\nstu4.name = \"小白\"\n\nconsole.log(stu4.name)\n```\n\n\n\n##### 特色：属性增删\n\n对比一下 Java 中的 Object\n\n* Java 的 Object 是以类作为模板来创建，对象不能脱离类模板的范围，一个对象的属性、能用的方法都是确定好的\n* js 的对象，不需要什么模板，它的属性和方法可以随时加减\n\n```js\nlet stu = {name:'张三'};\nstu.age = 18;\t\t\t\t\t// 添加属性\ndelete stu.age;\t\t\t\t\t// 删除属性\n\nstu.study = function() {\t\t// 添加方法\n    console.log(this.name + \"在学习\");\n}\n```\n\n添加 get，set，需要借助 Object.definePropery\n\n```js\nlet stu = {_name:null};\n\nObject.defineProperty(stu, \"name\", {\n    get(){\n        return this._name;\n    },\n    set(name){\n        this._name = name;\n    }\n});\n```\n\n* 参数1：目标对象\n* 参数2：属性名\n* 参数3：get，set 的定义\n\n\n\n##### 特色：this\n\n先来对 Java 中的 this 有个理解\n\n```java\npublic class TestMethod {\n\n    static class Student {\n        private String name;\n\n        public Student(String name) {\n            this.name = name;\n        }\n\n        public void study(Student this, String subject) {\n            System.out.println(this.name + \"在学习 \" + subject);\n        }\n    }\n\n    public static void main(String[] args) {\n        Student stu = new Student(\"小明\");\n        \n        // 下面的代码，本质上是执行 study(stu, \"java\")，因此 this 就是 stu\n        stu.study(\"java\"); \n    }\n}\n```\n\n* Java 中的 this 是个隐式参数\n* Java 中，我们说 this 代表的就是调用方法的那个对象\n\n\n\njs 中的 this 也是隐式参数，但它与函数运行时上下文相关\n\n例如，一个“落单”的函数\n\n```js\nfunction study(subject) {\n    console.log(this.name + \"在学习 \" + subject)\n}\n```\n\n测试一下\n\n```js\nstudy(\"js\");  // 输出 在学习 js\n```\n\n这是因为此时函数执行，全局对象 window 被当作了 this，window 对象的 name 属性是空串\n\n\n\n同样的函数，如果作为对象的方法\n\n```js\nlet stu = {\n    name:\"小白\",\n    study\n}\n```\n\n这种情况下，会将当前对象作为 this\n\n```js\nstu.study('js'); \t// 输出 小白在学习 js\n```\n\n\n\n还可以动态改变 this\n\n```js\nlet stu = {name:\"小黑\"};\nstudy.call(stu, \"js\");\t// 输出 小黑在学习 js\n```\n\n这回 study 执行时，就把 call 的第一个参数 stu 作为 this\n\n\n\n一个例外是，在**箭头函数**内出现的 this，以外层 this 理解 \n\n用匿名函数\n\n```js\nlet stu = {\n    name: \"小花\",\n    friends: [\"小白\",\"小黑\",\"小明\"],\n    play() {\n        this.friends.forEach(function(e){\n            console.log(this.name + \"与\" + e + \"在玩耍\");\n        });\n    }\n}\nstu.play()\n```\n\n* this.name 所在的函数是【落单】的函数，因此 this 代表 window\n\n输出结果为\n\n```\n与小白在玩耍\n与小黑在玩耍\n与小明在玩耍\n```\n\n用箭头函数\n\n```js\nlet stu = {\n    name: \"小花\",\n    friends: [\"小白\",\"小黑\",\"小明\"],\n    play() {\n        this.friends.forEach(e => {\n            console.log(this.name + \"与\" + e + \"在玩耍\");\n        })\n    }    \n}\n```\n\n* this.name 所在的函数是箭头函数，因此 this 要看它外层的 play 函数，play 又是属于 stu 的方法，因此 this 代表 stu 对象\n\n输出结果为\n\n```\n小花与小白在玩耍\n小花与小黑在玩耍\n小花与小明在玩耍\n```\n\n不用箭头函数的做法\n\n```js\nlet stu = {\n    name: \"小花\",\n    friends: [\"小白\",\"小黑\",\"小明\"],\n    play() {\n        let me = this;\n        this.friends.forEach(function(e){\n            console.log(me.name + \"与\" + e + \"在玩耍\");\n        });\n    }\n}\n```\n\n\n\n##### 特色：原型继承\n\n```js\nlet father = {\n    f1: '父属性',\n    m1: function() {\n        console.log(\"父方法\");\n    }\n}\n\nlet son = Object.create(father);\n\nconsole.log(son.f1);  // 打印 父属性\nson.m1();\t\t\t  // 打印 父方法\n```\n\n* father 是父对象，son 去调用 .m1 或 .f1 时，自身对象没有，就到父对象找\n* son 自己可以添加自己的属性和方法\n* son 里有特殊属性 `__proto__` 代表它的父对象，js 术语： son 的原型对象\n* 不同浏览器对打印 son 的 `__proto__` 属性时显示不同\n  * Edge 打印 console.dir(son) 显示 `[[Prototype]]`\n  * Firefox 打印 console.dir(son) 显示 `<prototype>`\n\n\n\n##### 特色：基于函数的原型继承\n\n出于方便的原因，js 又提供了一种基于函数的原型继承\n\n> **函数职责**\n>\n> 1. 负责创建子对象，给子对象提供属性、方法，功能上相当于构造方法\n>\n> 3. 函数有个特殊的属性 prototype，它就是函数创建的子对象的父对象\n>\n>    **注意！**名字有差异，这个属性的作用就是为新对象提供原型\n\n```js\nfunction cons(f2) {\n    // 创建子对象(this), 给子对象提供属性和方法\n    this.f2 = f2;\n    this.m2 = function () {\n        console.log(\"子方法\");\n    }\n}\n// cons.prototype 就是父对象\ncons.prototype.f1 = \"父属性\";\ncons.prototype.m1 = function() {\n    console.log(\"父方法\");\n}\n```\n\n配合 new 关键字，创建子对象\n\n```js\nlet son = new cons(\"子属性\")\n```\n\n子对象的 `__proto__` 就是函数的 `prototype` 属性\n\n\n\n##### JSON\n\n之前我们讲 http 请求格式时，讲过 json 这种数据格式，它的语法看起来与 js 对象非常相似，例如：\n\n一个 json 对象可以长这样：\n\n```json\n{\n    \"name\":\"张三\",\n    \"age\":18\n}\n```\n\n一个 js 对象长这样：\n\n```js\n{\n    name:\"张三\",\n    age:18\n}\n```\n\n那么他们的区别在哪儿呢？我总结了这么几点\n\n1. 本质不同\n   * json 对象本质上是个字符串，它的职责是作为客户端和服务器之间传递数据的一种格式，它的属性只是样子货\n   * js 对象是切切实实的对象，可以有属性方法\n2. 语法细节不同\n   * json 中只能有 null、true|false、数字、字符串（只有双引号）、对象、数组\n   * json 中不能有除以上的其它 js 对象的特性，如方法等\n   * json 中的属性必须用双引号引起来\n\n\n\njson 字符串与 js 对象的转换\n\n```js\nJSON.parse(json字符串);  // 返回js对象\nJSON.stringify(js对象);  // 返回json字符串\n```\n\n\n\n### 动态类型\n\n静态类型语言，如 Java，值有类型，变量也有类型、赋值给变量时，类型要相符\n\n```java\nint a = 10;\nString b = \"abc\";\n\nint c = \"abc\";  // 错误\n```\n\n而 js 属于动态类型语言，值有类型，但变量没有类型，赋值给变量时，没要求\n\n例如\n\n```js\nlet a = 200;\n\nlet b = 100;\nb = 'abc';\nb = true;\n```\n\n动态类型看起来比较灵活，但变量没有类型，会给后期维护带来困难，例如\n\n```js\nfunction test(obj) {\n    // obj 的类型未知，必须根据不同类型做出相应的容错处理\n}\n```\n\n\n\n## 2. 运算符与表达式\n\n* `+ - * / % ** `\n* `+= -= *= /= %= **=`\n* `++ --`\n* 位运算、移位运算\n* `== != > >= < <=`\n* `=== !==` :star:\n* `&& || !` :star:\n* `?? ?.` :star:\n* `...` :star:\n* 解构赋值 :star:\n\n\n\n### 1) ===\n\n严格相等运算符，用作逻辑判等\n\n```js\n1 == 1    \t// 返回 true \n1 == '1'\t// 返回 true，会先将右侧的字符串转为数字，再做比较\n1 === '1'\t// 返回 false，类型不等，直接返回 false\n```\n\ntypeof 查看某个值的类型\n\n```js\ntypeof 1\t// 返回 'number'\ntypeof '1'\t// 返回 'string'\n```\n\n\n\n### 2) ||\n\n需求，如果参数 n 没有传递，给它一个【男】\n\n**推荐**做法\n\n```js\nfunction test(n = '男') {\n    console.log(n);\n}\n```\n\n你可能的做法\n\n```js\nfunction test(n) {\n    if(n === undefined) {\n        n = '男';\n    }\n    console.log(n);\n}\n```\n\n还可能是这样\n\n```js\nfunction test(n) {\n    n = (n === undefined) ? '男' : n;\n    console.log(n);\n}\n```\n\n一些老旧代码中可能的做法（不推荐）\n\n```js\nfunction test(n) {\n    n = n || '男';\n    console.log(n);\n}\n```\n\n它的语法是\n\n```js\n值1 || 值2\n```\n\n如果值1 是 Truthy，返回值1，如果值1 是 Falsy 返回值 2\n\n\n\n### 3) ?? 与 ?.\n\n#### ??\n\n需求，如果参数 n 没有传递或是 null，给它一个【男】\n\n如果用传统办法\n\n```js\nfunction test(n) {\n    if(n === undefined || n === null) {\n        n = '男';\n    }\n    console.log(n);\n}\n```\n\n用 ??\n\n```js\nfunction test(n) {\n    n = n ?? '男';\n    console.log(n);\n}\n```\n\n语法\n\n```\n值1 ?? 值2\n```\n\n* 值1 是 nullish，返回值2\n* 值1 不是 nullish，返回值1\n\n\n\n#### ?.\n\n需求，函数参数是一个对象，可能包含有子属性\n\n例如，参数可能是\n\n```js\nlet stu1 = {\n    name:\"张三\",\n    address: {\n        city: '北京'\n    }\n};\n\nlet stu2 = {\n    name:\"李四\"\n}\n\nlet stu3 = {\n    name:\"李四\",\n    address: null\n}\n```\n\n现在要访问子属性（有问题）\n\n```js\nfunction test(stu) {\n    console.log(stu.address.city)\n}\n```\n\n现在希望当某个属性是 nullish 时，短路并返回 undefined，可以用 ?.\n\n```js\nfunction test(stu) {\n    console.log(stu.address?.city)\n}\n```\n\n用传统办法 \n\n```js\nfunction test(stu) {\n    if(stu.address === undefined || stu.address === null) {\n        console.log(undefined);\n        return;\n    }\n    console.log(stu.address.city)\n}\n```\n\n\n\n### 4) ...\n\n展开运算符\n\n作用1：打散数组，把元素传递给多个参数\n\n```js\nlet arr = [1,2,3];\n\nfunction test(a,b,c) {\n    console.log(a,b,c);\n}\n```\n\n需求，把数组元素依次传递给函数参数\n\n传统写法\n\n```js\ntest(arr[0],arr[1],arr[2]);\t\t// 输出 1,2,3\n```\n\n展开运算符写法\n\n```js\ntest(...arr);\t\t\t\t\t// 输出 1,2,3\n```\n\n* 打散可以理解为【去掉了】数组外侧的中括号，只剩下数组元素\n\n\n\n作用2：复制数组或对象\n\n数组\n\n```js\nlet arr1 = [1,2,3];\nlet arr2 = [...arr1];\t\t// 复制数组\n```\n\n对象\n\n```js\nlet obj1 = {name:'张三', age: 18};\n\nlet obj2 = {...obj1};\t\t// 复制对象\n```\n\n**注意**：展开运算符复制属于浅拷贝，例如\n\n```js\nlet o1 = {name:'张三', address: {city: '北京'} }\n\nlet o2 = {...o1};\n```\n\n\n\n作用3：合并数组或对象\n\n合并数组\n\n```js\nlet a1 = [1,2];\nlet a2 = [3,4];\n\nlet b1 = [...a1,...a2];\t\t// 结果 [1,2,3,4]\nlet b2 = [...a2,5,...a1]\t// 结果 [3,4,5,1,2]\n```\n\n合并对象\n\n```js\nlet o1 = {name:'张三'};\nlet o2 = {age:18};\nlet o3 = {name:'李四'};\n\nlet n1 = {...o1, ...o2};\t// 结果 {name:'张三',age:18}\n\nlet n2 = {...o3, ...o2, ...o1}; // 结果{name:'李四',age:18}\n```\n\n* 复制对象时出现同名属性，后面的会覆盖前面的\n\n\n\n### 5) [] {}\n\n解构赋值\n\n#### []\n\n用在声明变量时\n\n```js\nlet arr = [1,2,3];\n\nlet [a, b, c] = arr;\t// 结果 a=1, b=2, c=3\n```\n\n用在声明参数时\n\n```js\nlet arr = [1,2,3];\n\nfunction test([a,b,c]) {\n    console.log(a,b,c) \t// 结果 a=1, b=2, c=3\n}\n\ntest(arr);\t\t\t\t\n```\n\n\n\n#### {}\n\n用在声明变量时\n\n```js\nlet obj = {name:\"张三\", age:18};\n\nlet {name,age} = obj;\t// 结果 name=张三, age=18\n```\n\n用在声明参数时\n\n```js\nlet obj = {name:\"张三\", age:18};\n\nfunction test({name, age}) {\n    console.log(name, age); // 结果 name=张三, age=18\n}\n\ntest(obj)\n```\n\n\n\n## 3. 控制语句\n\n* `if ... else`\n* `switch`\n* `while`\n* `do ... while`\n* `for` \n* `for ... in` :star:\n* `for ... of` :star:\n* `try ... catch` :star:\n\n\n\n### 1) for in\n\n主要用来遍历对象\n\n```js\nlet father = {name:'张三', age:18, study:function(){}};\n\nfor(const n in father) {\n    console.log(n);\n}\n```\n\n* 其中 const n 代表遍历出来的属性名\n* 注意1：方法名也能被遍历出来（它其实也算一种特殊属性）\n* 注意2：遍历子对象时，父对象的属性会跟着遍历出来\n\n```js\nlet son = Object.create(father);\nson.sex = \"男\";\n\nfor(const n in son) {\n    console.log(n);\n}\n```\n\n* 注意3：在 for in 内获取属性值，要使用 [] 语法，而不能用 . 语法\n\n```js\nfor(const n in son) {\n    console.log(n, son[n]);\n}\n```\n\n\n\n### 2) for of\n\n主要用来遍历数组，也可以是其它可迭代对象，如 Map，Set 等\n\n```js\nlet a1 = [1,2,3];\n\nfor(const i of a1) {\n    console.log(i);\n}\n\nlet a2 = [\n    {name:'张三', age:18},\n    {name:'李四', age:20},\n    {name:'王五', age:22}\n];\n\nfor(const obj of a2) {\n    console.log(obj.name, obj.age);\n}\n\nfor(const {name,age} of a2) {\n    console.log(name, age);\n}\n```\n\n\n\n### 3) try catch\n\n```js\nlet stu1 = {name:'张三', age:18, address: {city:'北京'}};\nlet stu2 = {name:'张三', age:18};\n\nfunction test(stu) {\n    try {\n        console.log(stu.address.city)   \n    } catch(e) {\n        console.log('出现了异常', e.message)\n    } finally {\n        console.log('finally');\n    }\n}\n```\n\n\n\n## 4. API\n\n### 环境准备\n\n#### 1) 安装 nvm\n\nnvm 即 (node version manager)，好处是方便切换 node.js 版本\n\n安装注意事项\n\n1. 要卸载掉现有的 nodejs\n2. 提示选择 nvm 和 nodejs 目录时，一定要避免目录中出现空格\n3. 选用【以管理员身份运行】cmd 程序来执行 nvm 命令\n4. 首次运行前设置好国内镜像地址\n\n```\nnvm node_mirror http://npm.taobao.org/mirrors/node/\nnvm npm_mirror https://npm.taobao.org/mirrors/npm/\n```\n\n首先查看有哪些可用版本\n\n```\nnvm list available\n```\n\n输出\n\n```\n\n|   CURRENT    |     LTS      |  OLD STABLE  | OLD UNSTABLE |\n|--------------|--------------|--------------|--------------|\n|    18.7.0    |   16.16.0    |   0.12.18    |   0.11.16    |\n|    18.6.0    |   16.15.1    |   0.12.17    |   0.11.15    |\n|    18.5.0    |   16.15.0    |   0.12.16    |   0.11.14    |\n|    18.4.0    |   16.14.2    |   0.12.15    |   0.11.13    |\n|    18.3.0    |   16.14.1    |   0.12.14    |   0.11.12    |\n|    18.2.0    |   16.14.0    |   0.12.13    |   0.11.11    |\n|    18.1.0    |   16.13.2    |   0.12.12    |   0.11.10    |\n|    18.0.0    |   16.13.1    |   0.12.11    |    0.11.9    |\n|    17.9.1    |   16.13.0    |   0.12.10    |    0.11.8    |\n|    17.9.0    |   14.20.0    |    0.12.9    |    0.11.7    |\n|    17.8.0    |   14.19.3    |    0.12.8    |    0.11.6    |\n|    17.7.2    |   14.19.2    |    0.12.7    |    0.11.5    |\n|    17.7.1    |   14.19.1    |    0.12.6    |    0.11.4    |\n|    17.7.0    |   14.19.0    |    0.12.5    |    0.11.3    |\n|    17.6.0    |   14.18.3    |    0.12.4    |    0.11.2    |\n|    17.5.0    |   14.18.2    |    0.12.3    |    0.11.1    |\n|    17.4.0    |   14.18.1    |    0.12.2    |    0.11.0    |\n|    17.3.1    |   14.18.0    |    0.12.1    |    0.9.12    |\n|    17.3.0    |   14.17.6    |    0.12.0    |    0.9.11    |\n|    17.2.0    |   14.17.5    |   0.10.48    |    0.9.10    |\n```\n\n建议安装 LTS（长期支持版）\n\n```\nnvm install 16.16.0\nnvm install 14.20.0\n```\n\n执行 `nvm list` 会列出已安装版本\n\n切换到 16.16.0\n\n```\nnvm use 16.16.0\n```\n\n切换到 14.20.0\n\n```\nnvm use 14.20.0\n```\n\n安装后 nvm 自己的环境变量会自动添加，但可能需要手工添加 nodejs 的 PATH 环境变量\n\n\n\n#### 2) 检查 npm\n\nnpm 是 js 的包管理器，就类似于 java 界的 maven，要确保它使用的是国内镜像\n\n检查镜像\n\n```\nnpm get registry\n```\n\n如果返回的不是 `https://registry.npm.taobao.org/`，需要做如下设置\n\n```\nnpm config set registry https://registry.npm.taobao.org/\n```\n\n\n\n#### 3) 搭建前端服务器\n\n新建一个保存项目的 client 文件夹，进入文件夹执行\n\n```\nnpm install express --save-dev\n```\n\n修改 package.json 文件\n\n```json\n{\n  \"type\": \"module\",\n  \"devDependencies\": {\n    \"express\": \"^4.18.1\"\n  }\n}\n```\n\n* 其中 devDependencies 是 npm install --save-dev 添加的\n\n编写 main.js 代码\n\n```js\nimport express from 'express'\nconst app = express()\n\napp.use(express.static('./'))\napp.listen(7070)\n```\n\n执行 js 代码（运行前端服务器）\n\n```\nnode main.js\n```\n\n\n\n### 前端案例\n\n初步效果\n\n![image-20220812103323220](https://s1.ax1x.com/2022/10/21/xcKwEF.png)\n\n架构\n\n![image-20220812103219916](https://s1.ax1x.com/2022/10/21/xcKNuV.png)\n\n* 前端只有静态页面，使用 Express 服务器\n* 后端使用 Tomcat 服务器，通过 SpringBoot、MyBatis 等框架获取数据库数据\n\n\n\n#### 1) 查找元素\n\n* document.getElementById - 根据 id 值查找一个元素\n* [document|元素].querySelector - 根据选择器查找第一个匹配元素\n* [document|元素].querySelectorAll - 根据选择器查找所有匹配元素\n\n例如，有下面的 html 代码\n\n```html\n<div>\n    <div class=\"title\">学生列表</div>\n    <div class=\"thead\">\n        <div class=\"row bold\">\n            <div class=\"col\">编号</div>\n            <div class=\"col\">姓名</div>\n            <div class=\"col\">性别</div>\n            <div class=\"col\">年龄</div>\n        </div>\n    </div>\n    <div class=\"tbody\">\n        <div class=\"row\">\n            <div class=\"col\">1</div>\n            <div class=\"col\">张三</div>\n            <div class=\"col\">男</div>\n            <div class=\"col\">18</div>\n        </div>\n    </div>\n</div>\n```\n\n执行\n\n```js\ndocument.querySelector('.title'); // 找到 <div class=\"title\">学生列表</div>\n```\n\n执行\n\n```js\ndocument.querySelector('.col'); // 找到 <div class=\"col\">编号</div>\n```\n\n执行\n\n```js\ndocument.querySelectorAll('.col');\n\n/*\n  找到的是一个集合\n  <div class=\"col\">编号</div>\n  <div class=\"col\">姓名</div>\n  <div class=\"col\">性别</div>\n  <div class=\"col\">年龄</div>\n  <div class=\"col\">1</div>\n  <div class=\"col\">张三</div>\n  <div class=\"col\">男</div>\n  <div class=\"col\">18</div>\n*/\n```\n\n执行\n\n```js\nconst thead = document.querySelector('.thead');\n\n// 只在 thead 元素范围内找\nthead.querySelectorAll('.col');\n\n/*\n  找到的是一个集合\n  <div class=\"col\">编号</div>\n  <div class=\"col\">姓名</div>\n  <div class=\"col\">性别</div>\n  <div class=\"col\">年龄</div>\n*/\n```\n\n根据 id 属性查找既可以用\n\n```js\ndocument.getElementById(\"id值\")\n```\n\n也可以用 \n\n```js\ndocument.querySelector(\"#id值\")\n```\n\n\n\n#### 2) 修改元素内容\n\n* 元素.innerHTML\n* 元素.textContent\n\n例如\n\n```js\ndocument.querySelector('.title').innerHTML = '侠客列表'\n```\n\n效果\n\n![image-20220812161003958](https://s1.ax1x.com/2022/10/21/xcKUBT.png)\n\ninnerHTML  会解析内容中的标签，例如\n\n![image-20220812161137912](https://s1.ax1x.com/2022/10/21/xcK0N4.png)\n\ntextContext 不会解析内容中的标签\n\n![image-20220812161341825](https://s1.ax1x.com/2022/10/21/xcKaHU.png)\n\n给 innerHTML 或 textContent 赋值空串，可以实现清空标签内容的效果\n\n\n\n#### 3) 利用模板\n\n```html\n<div>\n    <div class=\"title\">学生列表</div>\n    <div class=\"thead\">\n        <div class=\"row bold\">\n            <div class=\"col\">编号</div>\n            <div class=\"col\">姓名</div>\n            <div class=\"col\">性别</div>\n            <div class=\"col\">年龄</div>\n        </div>\n    </div>\n    <div class=\"tbody\">\n    </div>\n</div>\n\n<template id=\"tp\">\n    <div class=\"row\">\n        <div class=\"col\">xx</div>\n        <div class=\"col\">xx</div>\n        <div class=\"col\">xx</div>\n        <div class=\"col\">xx</div>\n    </div>\n</template>\n\n<script>\n    // 将来这些数据从 java 端返回\n    let array = [\n        { id: 1, name: '张三', sex: '男', age: 18 },\n        { id: 2, name: '李四', sex: '女', age: 17 }\n    ];\n\n    const tp = document.getElementById(\"tp\");\n    const row = tp.content;\n    const [c1,c2,c3,c4] = row.querySelectorAll(\".col\");\n    const tbody = document.querySelector('.tbody');\n    for(const {id,name,sex,age} of array) {\n        c1.textContent = id;\n        c2.textContent = name;\n        c3.textContent = sex;\n        c4.textContent = age;\n        // 复制元素\n        const newRow = document.importNode(row, true);\n        // 建立父子关系，左边父，右边子\n        tbody.appendChild(newRow);\n    }\n</script>\n```\n\n\n\n#### 4) Fetch API\n\nFetch API 可以用来获取远程数据，它有两种方式接收结果，同步方式与异步方式\n\n格式\n\n```js\nfetch(url, options) // 返回 Promise\n```\n\n同步方式\n\n```js\nconst 结果 = await Promise\n// 后续代码\n```\n\n* await 关键字必须在一个标记了 async 的 function 内来使用\n* 后续代码不会在结果返回前执行\n\n异步方式\n\n```js\nPromise\n\t.then(结果 => { ... })\n// 后续代码                 \n```\n\n* 后续代码不必等待结果返回就可以执行\n\n\n\n例：\n\n在 express 服务器上有 students.json 文件\n\n```json\n[\n    { \"id\": 1, \"name\": \"张三\", \"sex\": \"男\", \"age\": 18 },\n    { \"id\": 2, \"name\": \"李四\", \"sex\": \"女\", \"age\": 17 }\n]\n```\n\n现在用 fetch api 获取这些数据，并展示\n\n同步方式\n\n```html\n<script>\n    async function findStudents() {\n        try {\n            // 获取响应对象\n            const resp = await fetch('students.json')\n\n            // 获取响应体, 按json格式转换为js数组\n            const array = await resp.json();\n\n            // 显示数据\n            const tp = document.getElementById(\"tp\");\n            const row = tp.content;\n            const [c1,c2,c3,c4] = row.querySelectorAll(\".col\");\n            const tbody = document.querySelector('.tbody');\n            for(const {id,name,sex,age} of array) {\n                c1.textContent = id;\n                c2.textContent = name;\n                c3.textContent = sex;\n                c4.textContent = age;\n                // 复制元素\n                const newRow = document.importNode(row, true);\n                // 建立父子关系\n                tbody.appendChild(newRow);\n            }\n        } catch (e) {\n            console.log(e);\n        }\n\n    }\n    findStudents()\n</script>\n```\n\n* fetch('students.json') 内部会发送请求，但响应结果不能立刻返回，因此 await 就是等待响应结果返回\n* 其中 resp.json() 也不是立刻能返回结果，它返回的也是 Promise 对象，也要配合 await 取结果\n\n异步方式\n\n```html\n<script>\n    fetch('students.json')\n        .then( resp => resp.json() )\n        .then( array => {\n        \t// 显示数据\n            const tp = document.getElementById(\"tp\");\n            const row = tp.content;\n            const [c1,c2,c3,c4] = row.querySelectorAll(\".col\");\n            const tbody = document.querySelector('.tbody');\n            for(const {id,name,sex,age} of array) {\n                c1.textContent = id;\n                c2.textContent = name;\n                c3.textContent = sex;\n                c4.textContent = age;\n                // 复制元素\n                const newRow = document.importNode(row, true);\n                // 建立父子关系\n                tbody.appendChild(newRow);\n            }\n        })\n        .catch( e => console.log(e) )\n\n\n</script>\n```\n\n* 第一个 then 是在响应返回后，才会调用它里面的箭头函数，箭头函数参数即 resp  响应对象\n* 第二个 then 是在 json 解析完成后，才会调用它里面的箭头函数，箭头函数参数即解析结果（本例是 array 数组）\n* 上一个 then 返回的是 Promise 对象时，才能链式调用下一个 then\n\n\n\n##### 跨域问题\n\n![image-20220814105448882](https://s1.ax1x.com/2022/10/21/xcKB4J.png)\n\n* 只要协议、主机、端口之一不同，就不同源，例如\n  * http://localhost:7070/a 和 https://localhost:7070/b 就不同源\n* 同源检查是浏览器的行为，而且只针对 fetch、xhr 请求\n  * 如果是其它客户端，例如 java http client，postman，它们是不做同源检查的\n  * 通过表单提交、浏览器直接输入 url 地址这些方式发送的请求，也不会做同源检查\n* 更多相关知识请参考\n  * [跨源资源共享（CORS） - HTTP | MDN (mozilla.org)](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS)\n\n\n\n请求响应头解决\n\n![image-20220814144040703](https://s1.ax1x.com/2022/10/21/xcKrC9.png)\n\n* fetch 请求跨域，会携带一个 Origin 头，代表【发请求的资源源自何处】，目标通过它就能辨别是否发生跨域\n  * 我们的例子中：student.html 发送 fetch 请求，告诉 tomcat，我源自 localhost:7070\n* 目标资源通过返回 Access-Control-Allow-Origin 头，告诉浏览器【允许哪些源使用此响应】\n  * 我们的例子中：tomcat 返回 fetch 响应，告诉浏览器，这个响应允许源自 localhost:7070 的资源使用\n\n\n\n代理解决\n\n![image-20220814161532141](https://s1.ax1x.com/2022/10/21/xcKTgI.png)\n\n```cmd\nnpm install http-proxy-middleware --save-dev\n```\n\n在 express 服务器启动代码中加入\n\n```js\nimport {createProxyMiddleware} from 'http-proxy-middleware'\n\n// ...\n\napp.use('/api', createProxyMiddleware({ target: 'http://localhost:8080', changeOrigin: true }));\n```\n\nfetch 代码改为\n\n```js\nconst resp = await fetch('http://localhost:7070/api/students')\n```\n\n或\n\n```js\nconst resp = await fetch('/api/students')\n```\n\n\n\n#### 5) 模块化\n\n单个导出 const、let、function\n\n```js\nexport const a = 10;\nexport let b = 20;\nexport function c() {\n    console.log('c');\n}\n```\n\n一齐导出\n\n```js\nconst a = 10;\nlet b = 20;\nfunction c() {\n    console.log('c')\n}\n\nexport {a,b,c}\n```\n\n导出 default，只能有一个\n\n```js\nexport const a = 10;\nexport let b = 20;\nexport function c() {\n    console.log('c')\n}\n\nexport default b;\n```\n\n\n\nimport 语法\n\n```html\n<script type=\"module\">\n\timport 语句\n</script>\n```\n\n* import 需要遵循同源策略\n\n整个导入\n\n```js\nimport * as module from '/1.js'\nconsole.log(module.a)\t\t// 输出10\nconsole.log(module.b)\t\t// 输出20\nmodule.c()\t\t\t\t\t// 输出c\n```\n\n单个导入\n\n```js\nimport {a,c} from '/1.js'\nconsole.log(a)\t\t\t\t// 输出10\nc()\t\t\t\t\t\t\t// 输出c\n```\n\n导入默认\n\n```js\nimport x from '/1.js'\nconsole.log(x)\t\t\t\t// 输出20\n```\n\n","slug":"08_Java程序员要掌握的前端-js","published":1,"updated":"2022-10-21T13:35:21.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb3u0001a8vw1si5ppox","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h1><p>它是一种脚本语言，可以用来更改页面内容，控制多媒体，制作图像、动画等等</p>\n<p>例子</p>\n<ul>\n<li>修改页面内容</li>\n</ul>\n<p>js 代码位置</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t// js 代码</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>引入 js 脚本</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js脚本路径\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意，到了框架之后，引入方式会有不同</li>\n</ul>\n<h2 id=\"1-变量与数据类型\"><a href=\"#1-变量与数据类型\" class=\"headerlink\" title=\"1. 变量与数据类型\"></a>1. 变量与数据类型</h2><h3 id=\"声明变量\"><a href=\"#声明变量\" class=\"headerlink\" title=\"声明变量\"></a>声明变量</h3><h4 id=\"1-let\"><a href=\"#1-let\" class=\"headerlink\" title=\"1) let\"></a>1) let</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> 变量名 = 值;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>let 声明的变量可以被多次赋值，例如</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">100</span>;  <span class=\"comment\">// 初始值是 100</span></span><br><span class=\"line\">a = <span class=\"number\">200</span>;\t  <span class=\"comment\">// ok, 被重新赋值为 200</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-const\"><a href=\"#2-const\" class=\"headerlink\" title=\"2) const\"></a>2) const</h4><ul>\n<li>const 修饰的叫常量，只能赋值一次</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"number\">300</span>; <span class=\"comment\">// 初始值是 300</span></span><br><span class=\"line\">b = <span class=\"number\">400</span>;\t   <span class=\"comment\">// error, 不能再次赋值</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>const 并不意味着它引用的内容不可修改，例如</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> c = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">c[<span class=\"number\">2</span>] = <span class=\"number\">4</span>; \t        <span class=\"comment\">// ok, 数组内容被修改成 [1,2,4]</span></span><br><span class=\"line\">c = [<span class=\"number\">5</span>,<span class=\"number\">6</span>];\t\t\t<span class=\"comment\">// error, 不能再次赋值</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-var\"><a href=\"#3-var\" class=\"headerlink\" title=\"3) var\"></a>3) var</h4><p>var 声明的变量可以被多次赋值，例如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"number\">100</span>;</span><br><span class=\"line\">f = <span class=\"number\">200</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本类型\"><a href=\"#基本类型\" class=\"headerlink\" title=\"基本类型\"></a>基本类型</h3><h4 id=\"1-2-undefined-和-null\"><a href=\"#1-2-undefined-和-null\" class=\"headerlink\" title=\"1,2) undefined 和 null\"></a>1,2) undefined 和 null</h4><ul>\n<li>执行表达式或函数，没有返回结果，出现 undefined</li>\n<li>访问数组不存在的元素，访问对象不存在的属性，出现 undefined</li>\n<li>定义变量，没有初始化，出现 undefined</li>\n</ul>\n<p>例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);  \t<span class=\"comment\">// 函数没有返回值, 结果是  undefined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;\t\t \t<span class=\"comment\">// 表达式没有返回值, 结果是 undefined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b[<span class=\"number\">10</span>]); <span class=\"comment\">// 数组未定义元素是 undefined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"张三\"</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.age); <span class=\"comment\">// 对象未定义属性是 undefined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> d;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d);\t\t<span class=\"comment\">// 变量未初始化是 undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>二者共同点</p>\n<ul>\n<li>都没有属性、方法</li>\n<li>二者合称 Nullish</li>\n</ul>\n<p>二者区别</p>\n<ul>\n<li>undefined 由 js 产生</li>\n<li>null 由程序员提供</li>\n</ul>\n<h4 id=\"3-string\"><a href=\"#3-string\" class=\"headerlink\" title=\"3) string\"></a>3) string</h4><p>js 字符串三种写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">\"hello\"</span>;  <span class=\"comment\">// 双引号</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"string\">\"world\"</span>;  <span class=\"comment\">// 单引号</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"string\">`hello`</span>;  <span class=\"comment\">// 反引号</span></span><br></pre></td></tr></table></figure>\n\n<p>html 代码如下，用 java 和 js 中的字符串如何表示？</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"1.html\"</span>&gt;</span>超链接<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>java 显得比较繁琐</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = <span class=\"string\">\"&lt;a href=\\\"1.html\\\"&gt;超链接&lt;/a&gt;\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">String s2 = <span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">    &lt;a href=\"</span><span class=\"number\">1</span>.html<span class=\"string\">\"&gt;超链接&lt;/a&gt;\"</span><span class=\"string\">\"\"</span>;</span><br></pre></td></tr></table></figure>\n\n<p>js 就比较灵活</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"string\">'&lt;a href=\"1.html\"&gt;超链接&lt;/a&gt;'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> s2 = <span class=\"string\">`&lt;a href=\"1.html\"&gt;超链接&lt;/a&gt;`</span>;</span><br></pre></td></tr></table></figure>\n\n<p>模板字符串（Template strings）</p>\n<p>需求：拼接 URI 的请求参数，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/test?name=zhang&amp;age=18</span><br><span class=\"line\">/test?name=li&amp;age=20</span><br></pre></td></tr></table></figure>\n\n<p>传统方法拼接</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = ; <span class=\"comment\">// zhang li ...</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = ; <span class=\"comment\">// 18 20 ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> uri = <span class=\"string\">\"/test?name=\"</span> + name + <span class=\"string\">\"&amp;age=\"</span> + age;</span><br></pre></td></tr></table></figure>\n\n<p>模板字符串方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = ; <span class=\"comment\">// zhang li ...</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = ; <span class=\"comment\">// 18 20 ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> uri = <span class=\"string\">`/test?name=<span class=\"subst\">$&#123;name&#125;</span>&amp;age=<span class=\"subst\">$&#123;age&#125;</span>`</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-5-number-和-bigint\"><a href=\"#4-5-number-和-bigint\" class=\"headerlink\" title=\"4,5) number 和 bigint\"></a>4,5) number 和 bigint</h4><p>number 类型标识的是双精度浮动小数，例如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span> / <span class=\"number\">3</span>;   <span class=\"comment\">// 结果 3.3333333333333335</span></span><br></pre></td></tr></table></figure>\n\n<p>既然是浮点小数，那么可以除零</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span> / <span class=\"number\">0</span>;\t  <span class=\"comment\">// 结果 Infinity 正无穷大</span></span><br><span class=\"line\"><span class=\"number\">-10</span> / <span class=\"number\">0</span>;  <span class=\"comment\">// 结果 -Infinity 负无穷大</span></span><br></pre></td></tr></table></figure>\n\n<p>浮点小数都有运算精度问题，例如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2.0</span> - <span class=\"number\">1.1</span>; <span class=\"comment\">// 结果 0.8999999999999999</span></span><br></pre></td></tr></table></figure>\n\n<p>字符串转数字</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>); \t<span class=\"comment\">// 结果是数字 10 </span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10.5\"</span>);\t<span class=\"comment\">// 结果是数字 10, 去除了小数部分</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>) / <span class=\"number\">3</span>; <span class=\"comment\">// 结果仍视为 number 浮点数, 因此结果为 3.3333333333333335</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">\"abc\"</span>);\t<span class=\"comment\">// 转换失败，结果是特殊值 NaN (Not a Number)</span></span><br></pre></td></tr></table></figure>\n\n<p>要表示真正的整数，需要用 bigint，数字的结尾用 n 表示它是一个 bigint 类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span>n / <span class=\"number\">3</span>n;\t\t\t<span class=\"comment\">// 结果 3n, 按整数除法处理</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-boolean\"><a href=\"#6-boolean\" class=\"headerlink\" title=\"6) boolean\"></a>6) boolean</h4><ul>\n<li>Truthy</li>\n<li>Falsy</li>\n</ul>\n<p>在 js 中，并不是 boolean 才能用于条件判断，你可以在 if 语句中使用【数字】、【字符串】… 作为判断条件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(b) &#123; <span class=\"comment\">// true</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"进入了\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时就有一个规则，当需要条件判断时，这个值被当作 true 还是 false，当作 true 的值归类为 truthy，当作 false 的值归类为 falsy</p>\n<p>下面值都是 falsy</p>\n<ul>\n<li><code>false</code></li>\n<li><code>Nullish (null, undefined)</code></li>\n<li><code>0, 0n, NaN</code></li>\n<li>长度为零的字符串</li>\n</ul>\n<p>剩余的值绝大部分都是 truthy</p>\n<p>有几个容易被当作 falsy 实际是 truthy 的</p>\n<ul>\n<li><code>&quot;false&quot;, &quot;0&quot;</code> 即字符串的 false 和 字符串的零</li>\n<li><code>[]</code> 空数组</li>\n<li><code>{}</code> 空对象</li>\n</ul>\n<h4 id=\"7-symbol\"><a href=\"#7-symbol\" class=\"headerlink\" title=\"7) symbol\"></a>7) symbol</h4><ul>\n<li>很少使用</li>\n</ul>\n<h3 id=\"对象类型\"><a href=\"#对象类型\" class=\"headerlink\" title=\"对象类型\"></a>对象类型</h3><h4 id=\"1-Function\"><a href=\"#1-Function\" class=\"headerlink\" title=\"1) Function\"></a>1) Function</h4><h5 id=\"定义函数\"><a href=\"#定义函数\" class=\"headerlink\" title=\"定义函数\"></a>定义函数</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> 函数名(<span class=\"params\">参数</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 函数体</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> 结果;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"调用函数\"><a href=\"#调用函数\" class=\"headerlink\" title=\"调用函数\"></a>调用函数</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">函数名(实参);</span><br></pre></td></tr></table></figure>\n\n<p>例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">1</span>, <span class=\"number\">2</span>);     <span class=\"comment\">// 返回 3</span></span><br></pre></td></tr></table></figure>\n\n<p>js 中的函数调用特点：对参数的<strong>类型</strong>和<strong>个数</strong>都没有限制，例如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>);  <span class=\"comment\">// 返回 ab</span></span><br><span class=\"line\">add(<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>);   <span class=\"comment\">// 返回 9, 第三个参数没有被用到, 不会报错</span></span><br><span class=\"line\">add(<span class=\"number\">1</span>);\t\t\t<span class=\"comment\">// 返回 NaN, 这时 b 没有定义是 undefined, undefined 做数学运算结果就是 NaN</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h5><p>java 中（spring）要实现默认参数的效果得这么做：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyController</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/page\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">page</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        @RequestParam(defaultValue=<span class=\"string\">\"1\"</span>)</span> <span class=\"keyword\">int</span> page, </span></span><br><span class=\"line\"><span class=\"function\">        @<span class=\"title\">RequestParam</span><span class=\"params\">(defaultValue=<span class=\"string\">\"10\"</span>)</span> <span class=\"keyword\">int</span> size</span></span><br><span class=\"line\"><span class=\"function\">    )</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pagination</span>(<span class=\"params\">page = <span class=\"number\">1</span>, size = <span class=\"number\">10</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(page, size);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h5><p>语法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">参数</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 函数体</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> 结果;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>第一种场景：定义完毕后立刻调用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;)(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<p>第二种场景：作为其它对象的方法，例如</p>\n<p>页面有元素</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"p1\"</span>&gt;</span>点我啊<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>此元素有一个 onclick 方法，会在鼠标单击这个元素后被执行，onclick 方法刚开始是 null，需要赋值后才能使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"p1\"</span>).onclick = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"鼠标单击了...\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(参数) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 函数体</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> 结果;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果没有参数，() 还是要保留</li>\n<li>如果只有一个参数，() 可以省略</li>\n<li>如果函数体内只有一行代码，{} 可以省略</li>\n<li>如果这一行代码就是结果，return 可以省略</li>\n</ul>\n<p>例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"p1\"</span>).onclick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span>  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"aa\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"函数是对象\"><a href=\"#函数是对象\" class=\"headerlink\" title=\"函数是对象\"></a>函数是对象</h5><p>以下形式在 js 中非常常见！</p>\n<ol>\n<li>可以参与赋值，例，具名函数也能参与赋值</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">abc</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"bb\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"p1\"</span>).onclick = abc;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>有属性、有方法，执行 <code>console.dir(abc)</code>，输出结果如下</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ƒ abc()</span><br><span class=\"line\">    arguments: null</span><br><span class=\"line\">    caller: null</span><br><span class=\"line\">    length: 0</span><br><span class=\"line\">    name: &quot;abc&quot;</span><br><span class=\"line\">    ➡prototype: &#123;constructor: ƒ&#125;</span><br><span class=\"line\">    [[FunctionLocation]]: VM1962:1</span><br><span class=\"line\">    ➡[[Prototype]]: ƒ ()</span><br><span class=\"line\">    ➡[[Scopes]]: Scopes[1]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>其中带有 f 标记的是方法，不带的是属性</p>\n</li>\n<li><p>带有 ➡ 符号的可以继续展开，限于篇幅省略了</p>\n</li>\n<li><p>带有 <code>[[ ]]</code> 的是内置属性，不能访问，只能查看</p>\n</li>\n<li><p>相对重要的是 <code>[[Prototype]]</code> 和 <code>[[Scopes]]</code> 会在后面继承和作用域时讲到</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>可以作为方法参数</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">fn</span>) </span>&#123;          <span class=\"comment\">// fn 将来可以是一个函数对象</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'b'</span>)</span><br><span class=\"line\">    fn();                 <span class=\"comment\">// 调用函数对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">b(a)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>可以作为方法返回值</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"d\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">c()()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"函数作用域\"><a href=\"#函数作用域\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h5><p>函数可以嵌套（js 代码中很常见，只是嵌套的形式更多是匿名函数，箭头函数）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看下面的例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> z = <span class=\"number\">30</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 看这里</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(x, y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>以函数为分界线划定作用域，所有函数之外是全局作用域</li>\n<li>查找变量时，由内向外查找<ul>\n<li>在内层作用域找到变量，就会停止查找，不会再找外层</li>\n<li>所有作用域都找不到变量，报错</li>\n</ul>\n</li>\n<li>作用域本质上是函数对象的属性，可以通过 console.dir 来查看调试</li>\n</ul>\n<h5 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(x,y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a()();  <span class=\"comment\">// 在外面执行了 b</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>函数定义时，它的作用域已经确定好了，因此无论函数将来去了哪，都能从它的作用域中找到当时那些变量</li>\n<li>别被概念忽悠了，闭包就是指<strong>函数能够访问自己的作用域中变量</strong></li>\n</ul>\n<h5 id=\"let、var-与作用域\"><a href=\"#let、var-与作用域\" class=\"headerlink\" title=\"let、var 与作用域\"></a>let、var 与作用域</h5><p>如果函数外层引用的是 let 变量，那么外层普通的 {} 也会作为作用域边界，最外层的 let 也占一个 script 作用域</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">10</span>; </span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> y = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(x,y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.dir(b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果函数外层引用的是 var 变量，外层普通的 {} 不会视为边界</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>; </span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(x,y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.dir(b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果 var 变量出现了重名，则他俩会被视为同一作用域中的同一个变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"number\">10</span>; </span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> e = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e);\t<span class=\"comment\">// 打印 20</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e);\t\t<span class=\"comment\">// 因为是同一个变量，还是打印 20</span></span><br></pre></td></tr></table></figure>\n\n<p>如果是 let，则视为两个作用域中的两个变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> e = <span class=\"number\">10</span>; </span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> e = <span class=\"number\">20</span>;\t</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e);\t<span class=\"comment\">// 打印 20</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e);\t\t<span class=\"comment\">// 打印 10</span></span><br></pre></td></tr></table></figure>\n\n<p>要想里面的 e 和外面的 e 能区分开来，最简单的办法是改成 let，或者用函数来界定作用域范围</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"number\">10</span>; </span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e = <span class=\"number\">20</span>;</span><br><span class=\"line\">    \t<span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Array-star\"><a href=\"#2-Array-star\" class=\"headerlink\" title=\"2) Array :star:\"></a>2) Array :star:</h4><p>语法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取数组元素</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr[<span class=\"number\">0</span>]); <span class=\"comment\">// 输出 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改数组元素</span></span><br><span class=\"line\">array[<span class=\"number\">0</span>] = <span class=\"number\">5</span>;\t\t <span class=\"comment\">// 数组元素变成了 [5,2,3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历数组元素，其中 length 是数组属性，代表数组长度</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>API</p>\n<ul>\n<li>push、shift、splice</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]; </span><br><span class=\"line\"></span><br><span class=\"line\">arr.push(<span class=\"number\">4</span>);    \t<span class=\"comment\">// 向数组尾部(右侧)添加元素, 结果 [1,2,3,4]</span></span><br><span class=\"line\">arr.shift();\t\t<span class=\"comment\">// 从数组头部(左侧)移除元素, 结果 [2,3,4]</span></span><br><span class=\"line\">arr.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>);\t<span class=\"comment\">// 删除【参数1】索引位置的【参数2】个元素，结果 [2,4]</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>join</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">arr.join(); \t\t<span class=\"comment\">// 默认使用【,】作为连接符，结果 'a,b,c'</span></span><br><span class=\"line\">arr.join(<span class=\"string\">''</span>);\t\t<span class=\"comment\">// 结果 'abc'</span></span><br><span class=\"line\">arr.join(<span class=\"string\">'-'</span>);\t\t<span class=\"comment\">// 结果 'a-b-c'</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>map、filter、forEach</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">i</span>) </span>&#123;   <span class=\"comment\">// 代表的新旧元素之间的变换规则</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> i * <span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// arr.map(a) // 具名函数，结果 [10,20,30,60]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// arr.map( (i) =&gt; &#123;return i * 10&#125; ); // 箭头函数</span></span><br><span class=\"line\">arr.map( <span class=\"function\"><span class=\"params\">i</span> =&gt;</span> i * <span class=\"number\">10</span> ); <span class=\"comment\">// 箭头函数</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>传给 map 的函数，参数代表旧元素，返回值代表新元素</li>\n</ul>\n<p>map 的内部实现（伪代码）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">map</span>(<span class=\"params\">a</span>) </span>&#123; <span class=\"comment\">// 参数是一个函数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> narr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> o = arr[i]; <span class=\"comment\">// 旧元素</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> n = a(o);   <span class=\"comment\">// 新元素</span></span><br><span class=\"line\">        narr.push(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> narr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>filter 例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\">arr.filter( <span class=\"function\">(<span class=\"params\">i</span>)=&gt;</span> i % <span class=\"number\">2</span> == <span class=\"number\">1</span> ); <span class=\"comment\">// 结果 [1,3]</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>传给 filter 的函数，参数代表旧元素，返回 true 表示要留下的元素</li>\n</ul>\n<p>forEach 例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*for(let i = 0; i &lt; arr.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    console.log(arr[i]);</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr.forEach( <span class=\"function\">(<span class=\"params\">i</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(i) );</span><br></pre></td></tr></table></figure>\n\n<p>两个称呼</p>\n<ul>\n<li>高阶函数，map，filter，forEach</li>\n<li>回调函数，例如作为参数传入的函数</li>\n</ul>\n<h4 id=\"3-Object-star-star\"><a href=\"#3-Object-star-star\" class=\"headerlink\" title=\"3) Object :star::star:\"></a>3) Object :star::star:</h4><h5 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    属性名: 值,</span><br><span class=\"line\">    方法名: 函数,</span><br><span class=\"line\">    <span class=\"keyword\">get</span> 属性名() &#123;&#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span> 属性名(新值) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例1</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stu1 = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"小明\"</span>,</span><br><span class=\"line\">    age: <span class=\"number\">18</span>,</span><br><span class=\"line\">    study: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"爱学习\"</span>);</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例2</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">\"小黑\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> study = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"爱学习\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> stu2 = &#123; name, age, study &#125;</span><br></pre></td></tr></table></figure>\n\n<p>例3（重点）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stu3 = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"小白\"</span>,</span><br><span class=\"line\">    age: <span class=\"number\">18</span>,</span><br><span class=\"line\">    study()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"爱学习\"</span>);</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>注意</strong>：对象方法这么写，仅限于对象内部</li>\n</ul>\n<p>例4</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stu4 = &#123;</span><br><span class=\"line\">    _name: <span class=\"literal\">null</span>, <span class=\"comment\">/*类似于java中私有成员变量*/</span></span><br><span class=\"line\">    <span class=\"keyword\">get</span> name() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"进入了get\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._name;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span> name(name) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"进入了set\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用 get，set</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stu4.name = <span class=\"string\">\"小白\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stu4.name)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"特色：属性增删\"><a href=\"#特色：属性增删\" class=\"headerlink\" title=\"特色：属性增删\"></a>特色：属性增删</h5><p>对比一下 Java 中的 Object</p>\n<ul>\n<li>Java 的 Object 是以类作为模板来创建，对象不能脱离类模板的范围，一个对象的属性、能用的方法都是确定好的</li>\n<li>js 的对象，不需要什么模板，它的属性和方法可以随时加减</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stu = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'张三'</span>&#125;;</span><br><span class=\"line\">stu.age = <span class=\"number\">18</span>;\t\t\t\t\t<span class=\"comment\">// 添加属性</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> stu.age;\t\t\t\t\t<span class=\"comment\">// 删除属性</span></span><br><span class=\"line\"></span><br><span class=\"line\">stu.study = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;\t\t<span class=\"comment\">// 添加方法</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"在学习\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>添加 get，set，需要借助 Object.definePropery</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stu = &#123;<span class=\"attr\">_name</span>:<span class=\"literal\">null</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(stu, <span class=\"string\">\"name\"</span>, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._name;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>(name)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>参数1：目标对象</li>\n<li>参数2：属性名</li>\n<li>参数3：get，set 的定义</li>\n</ul>\n<h5 id=\"特色：this\"><a href=\"#特色：this\" class=\"headerlink\" title=\"特色：this\"></a>特色：this</h5><p>先来对 Java 中的 this 有个理解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestMethod</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">(Student <span class=\"keyword\">this</span>, String subject)</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"在学习 \"</span> + subject);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Student stu = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"小明\"</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 下面的代码，本质上是执行 study(stu, \"java\")，因此 this 就是 stu</span></span><br><span class=\"line\">        stu.study(<span class=\"string\">\"java\"</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Java 中的 this 是个隐式参数</li>\n<li>Java 中，我们说 this 代表的就是调用方法的那个对象</li>\n</ul>\n<p>js 中的 this 也是隐式参数，但它与函数运行时上下文相关</p>\n<p>例如，一个“落单”的函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">study</span>(<span class=\"params\">subject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"在学习 \"</span> + subject)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">study(<span class=\"string\">\"js\"</span>);  <span class=\"comment\">// 输出 在学习 js</span></span><br></pre></td></tr></table></figure>\n\n<p>这是因为此时函数执行，全局对象 window 被当作了 this，window 对象的 name 属性是空串</p>\n<p>同样的函数，如果作为对象的方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stu = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"小白\"</span>,</span><br><span class=\"line\">    study</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种情况下，会将当前对象作为 this</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stu.study(<span class=\"string\">'js'</span>); \t<span class=\"comment\">// 输出 小白在学习 js</span></span><br></pre></td></tr></table></figure>\n\n<p>还可以动态改变 this</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stu = &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"小黑\"</span>&#125;;</span><br><span class=\"line\">study.call(stu, <span class=\"string\">\"js\"</span>);\t<span class=\"comment\">// 输出 小黑在学习 js</span></span><br></pre></td></tr></table></figure>\n\n<p>这回 study 执行时，就把 call 的第一个参数 stu 作为 this</p>\n<p>一个例外是，在<strong>箭头函数</strong>内出现的 this，以外层 this 理解 </p>\n<p>用匿名函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stu = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"小花\"</span>,</span><br><span class=\"line\">    friends: [<span class=\"string\">\"小白\"</span>,<span class=\"string\">\"小黑\"</span>,<span class=\"string\">\"小明\"</span>],</span><br><span class=\"line\">    play() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.friends.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"与\"</span> + e + <span class=\"string\">\"在玩耍\"</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">stu.play()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>this.name 所在的函数是【落单】的函数，因此 this 代表 window</li>\n</ul>\n<p>输出结果为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">与小白在玩耍</span><br><span class=\"line\">与小黑在玩耍</span><br><span class=\"line\">与小明在玩耍</span><br></pre></td></tr></table></figure>\n\n<p>用箭头函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stu = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"小花\"</span>,</span><br><span class=\"line\">    friends: [<span class=\"string\">\"小白\"</span>,<span class=\"string\">\"小黑\"</span>,<span class=\"string\">\"小明\"</span>],</span><br><span class=\"line\">    play() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.friends.forEach(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"与\"</span> + e + <span class=\"string\">\"在玩耍\"</span>);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>this.name 所在的函数是箭头函数，因此 this 要看它外层的 play 函数，play 又是属于 stu 的方法，因此 this 代表 stu 对象</li>\n</ul>\n<p>输出结果为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小花与小白在玩耍</span><br><span class=\"line\">小花与小黑在玩耍</span><br><span class=\"line\">小花与小明在玩耍</span><br></pre></td></tr></table></figure>\n\n<p>不用箭头函数的做法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stu = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"小花\"</span>,</span><br><span class=\"line\">    friends: [<span class=\"string\">\"小白\"</span>,<span class=\"string\">\"小黑\"</span>,<span class=\"string\">\"小明\"</span>],</span><br><span class=\"line\">    play() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.friends.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(me.name + <span class=\"string\">\"与\"</span> + e + <span class=\"string\">\"在玩耍\"</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"特色：原型继承\"><a href=\"#特色：原型继承\" class=\"headerlink\" title=\"特色：原型继承\"></a>特色：原型继承</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> father = &#123;</span><br><span class=\"line\">    f1: <span class=\"string\">'父属性'</span>,</span><br><span class=\"line\">    m1: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"父方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> son = <span class=\"built_in\">Object</span>.create(father);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(son.f1);  <span class=\"comment\">// 打印 父属性</span></span><br><span class=\"line\">son.m1();\t\t\t  <span class=\"comment\">// 打印 父方法</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>father 是父对象，son 去调用 .m1 或 .f1 时，自身对象没有，就到父对象找</li>\n<li>son 自己可以添加自己的属性和方法</li>\n<li>son 里有特殊属性 <code>__proto__</code> 代表它的父对象，js 术语： son 的原型对象</li>\n<li>不同浏览器对打印 son 的 <code>__proto__</code> 属性时显示不同<ul>\n<li>Edge 打印 console.dir(son) 显示 <code>[[Prototype]]</code></li>\n<li>Firefox 打印 console.dir(son) 显示 <code>&lt;prototype&gt;</code></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"特色：基于函数的原型继承\"><a href=\"#特色：基于函数的原型继承\" class=\"headerlink\" title=\"特色：基于函数的原型继承\"></a>特色：基于函数的原型继承</h5><p>出于方便的原因，js 又提供了一种基于函数的原型继承</p>\n<blockquote>\n<p><strong>函数职责</strong></p>\n<ol>\n<li><p>负责创建子对象，给子对象提供属性、方法，功能上相当于构造方法</p>\n</li>\n<li><p>函数有个特殊的属性 prototype，它就是函数创建的子对象的父对象</p>\n<p><strong>注意！</strong>名字有差异，这个属性的作用就是为新对象提供原型</p>\n</li>\n</ol>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cons</span>(<span class=\"params\">f2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建子对象(this), 给子对象提供属性和方法</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.f2 = f2;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.m2 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"子方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// cons.prototype 就是父对象</span></span><br><span class=\"line\">cons.prototype.f1 = <span class=\"string\">\"父属性\"</span>;</span><br><span class=\"line\">cons.prototype.m1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"父方法\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配合 new 关键字，创建子对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> son = <span class=\"keyword\">new</span> cons(<span class=\"string\">\"子属性\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>子对象的 <code>__proto__</code> 就是函数的 <code>prototype</code> 属性</p>\n<h5 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h5><p>之前我们讲 http 请求格式时，讲过 json 这种数据格式，它的语法看起来与 js 对象非常相似，例如：</p>\n<p>一个 json 对象可以长这样：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>:<span class=\"string\">\"张三\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"age\"</span>:<span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一个 js 对象长这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"张三\"</span>,</span><br><span class=\"line\">    age:<span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么他们的区别在哪儿呢？我总结了这么几点</p>\n<ol>\n<li>本质不同<ul>\n<li>json 对象本质上是个字符串，它的职责是作为客户端和服务器之间传递数据的一种格式，它的属性只是样子货</li>\n<li>js 对象是切切实实的对象，可以有属性方法</li>\n</ul>\n</li>\n<li>语法细节不同<ul>\n<li>json 中只能有 null、true|false、数字、字符串（只有双引号）、对象、数组</li>\n<li>json 中不能有除以上的其它 js 对象的特性，如方法等</li>\n<li>json 中的属性必须用双引号引起来</li>\n</ul>\n</li>\n</ol>\n<p>json 字符串与 js 对象的转换</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">JSON</span>.parse(json字符串);  <span class=\"comment\">// 返回js对象</span></span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(js对象);  <span class=\"comment\">// 返回json字符串</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态类型\"><a href=\"#动态类型\" class=\"headerlink\" title=\"动态类型\"></a>动态类型</h3><p>静态类型语言，如 Java，值有类型，变量也有类型、赋值给变量时，类型要相符</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">String b = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> c = <span class=\"string\">\"abc\"</span>;  <span class=\"comment\">// 错误</span></span><br></pre></td></tr></table></figure>\n\n<p>而 js 属于动态类型语言，值有类型，但变量没有类型，赋值给变量时，没要求</p>\n<p>例如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">100</span>;</span><br><span class=\"line\">b = <span class=\"string\">'abc'</span>;</span><br><span class=\"line\">b = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p>动态类型看起来比较灵活，但变量没有类型，会给后期维护带来困难，例如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// obj 的类型未知，必须根据不同类型做出相应的容错处理</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-运算符与表达式\"><a href=\"#2-运算符与表达式\" class=\"headerlink\" title=\"2. 运算符与表达式\"></a>2. 运算符与表达式</h2><ul>\n<li><code>+ - * / % **</code></li>\n<li><code>+= -= *= /= %= **=</code></li>\n<li><code>++ --</code></li>\n<li>位运算、移位运算</li>\n<li><code>== != &gt; &gt;= &lt; &lt;=</code></li>\n<li><code>=== !==</code> :star:</li>\n<li><code>&amp;&amp; || !</code> :star:</li>\n<li><code>?? ?.</code> :star:</li>\n<li><code>...</code> :star:</li>\n<li>解构赋值 :star:</li>\n</ul>\n<h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1) ===\"></a>1) ===</h3><p>严格相等运算符，用作逻辑判等</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> == <span class=\"number\">1</span>    \t<span class=\"comment\">// 返回 true </span></span><br><span class=\"line\"><span class=\"number\">1</span> == <span class=\"string\">'1'</span>\t<span class=\"comment\">// 返回 true，会先将右侧的字符串转为数字，再做比较</span></span><br><span class=\"line\"><span class=\"number\">1</span> === <span class=\"string\">'1'</span>\t<span class=\"comment\">// 返回 false，类型不等，直接返回 false</span></span><br></pre></td></tr></table></figure>\n\n<p>typeof 查看某个值的类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">1</span>\t<span class=\"comment\">// 返回 'number'</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">'1'</span>\t<span class=\"comment\">// 返回 'string'</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2) ||\"></a>2) ||</h3><p>需求，如果参数 n 没有传递，给它一个【男】</p>\n<p><strong>推荐</strong>做法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">n = <span class=\"string\">'男'</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可能的做法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        n = <span class=\"string\">'男'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还可能是这样</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    n = (n === <span class=\"literal\">undefined</span>) ? <span class=\"string\">'男'</span> : n;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一些老旧代码中可能的做法（不推荐）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    n = n || <span class=\"string\">'男'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它的语法是</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">值<span class=\"number\">1</span> || 值<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<p>如果值1 是 Truthy，返回值1，如果值1 是 Falsy 返回值 2</p>\n<h3 id=\"3-与\"><a href=\"#3-与\" class=\"headerlink\" title=\"3) ?? 与 ?.\"></a>3) ?? 与 ?.</h3><h4 id><a href=\"#\" class=\"headerlink\" title=\"??\"></a>??</h4><p>需求，如果参数 n 没有传递或是 null，给它一个【男】</p>\n<p>如果用传统办法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n === <span class=\"literal\">undefined</span> || n === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        n = <span class=\"string\">'男'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用 ??</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    n = n ?? <span class=\"string\">'男'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>语法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">值1 ?? 值2</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>值1 是 nullish，返回值2</li>\n<li>值1 不是 nullish，返回值1</li>\n</ul>\n<h4 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"?.\"></a>?.</h4><p>需求，函数参数是一个对象，可能包含有子属性</p>\n<p>例如，参数可能是</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stu1 = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"张三\"</span>,</span><br><span class=\"line\">    address: &#123;</span><br><span class=\"line\">        city: <span class=\"string\">'北京'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> stu2 = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"李四\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> stu3 = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"李四\"</span>,</span><br><span class=\"line\">    address: <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在要访问子属性（有问题）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">stu</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(stu.address.city)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在希望当某个属性是 nullish 时，短路并返回 undefined，可以用 ?.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">stu</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(stu.address?.city)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用传统办法 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">stu</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(stu.address === <span class=\"literal\">undefined</span> || stu.address === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"literal\">undefined</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(stu.address.city)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-…\"><a href=\"#4-…\" class=\"headerlink\" title=\"4) …\"></a>4) …</h3><p>展开运算符</p>\n<p>作用1：打散数组，把元素传递给多个参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a,b,c</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a,b,c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需求，把数组元素依次传递给函数参数</p>\n<p>传统写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(arr[<span class=\"number\">0</span>],arr[<span class=\"number\">1</span>],arr[<span class=\"number\">2</span>]);\t\t<span class=\"comment\">// 输出 1,2,3</span></span><br></pre></td></tr></table></figure>\n\n<p>展开运算符写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(...arr);\t\t\t\t\t<span class=\"comment\">// 输出 1,2,3</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>打散可以理解为【去掉了】数组外侧的中括号，只剩下数组元素</li>\n</ul>\n<p>作用2：复制数组或对象</p>\n<p>数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [...arr1];\t\t<span class=\"comment\">// 复制数组</span></span><br></pre></td></tr></table></figure>\n\n<p>对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'张三'</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;...obj1&#125;;\t\t<span class=\"comment\">// 复制对象</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：展开运算符复制属于浅拷贝，例如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> o1 = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'张三'</span>, <span class=\"attr\">address</span>: &#123;<span class=\"attr\">city</span>: <span class=\"string\">'北京'</span>&#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> o2 = &#123;...o1&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>作用3：合并数组或对象</p>\n<p>合并数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> a2 = [<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b1 = [...a1,...a2];\t\t<span class=\"comment\">// 结果 [1,2,3,4]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b2 = [...a2,<span class=\"number\">5</span>,...a1]\t<span class=\"comment\">// 结果 [3,4,5,1,2]</span></span><br></pre></td></tr></table></figure>\n\n<p>合并对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> o1 = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'张三'</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> o2 = &#123;<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> o3 = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'李四'</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> n1 = &#123;...o1, ...o2&#125;;\t<span class=\"comment\">// 结果 &#123;name:'张三',age:18&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> n2 = &#123;...o3, ...o2, ...o1&#125;; <span class=\"comment\">// 结果&#123;name:'李四',age:18&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>复制对象时出现同名属性，后面的会覆盖前面的</li>\n</ul>\n<h3 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5) [] {}\"></a>5) [] {}</h3><p>解构赋值</p>\n<h4 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"[]\"></a>[]</h4><p>用在声明变量时</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = arr;\t<span class=\"comment\">// 结果 a=1, b=2, c=3</span></span><br></pre></td></tr></table></figure>\n\n<p>用在声明参数时</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">[a,b,c]</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a,b,c) \t<span class=\"comment\">// 结果 a=1, b=2, c=3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(arr);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"{}\"></a>{}</h4><p>用在声明变量时</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"张三\"</span>, <span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;name,age&#125; = obj;\t<span class=\"comment\">// 结果 name=张三, age=18</span></span><br></pre></td></tr></table></figure>\n\n<p>用在声明参数时</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"张三\"</span>, <span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">&#123;name, age&#125;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name, age); <span class=\"comment\">// 结果 name=张三, age=18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(obj)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-控制语句\"><a href=\"#3-控制语句\" class=\"headerlink\" title=\"3. 控制语句\"></a>3. 控制语句</h2><ul>\n<li><code>if ... else</code></li>\n<li><code>switch</code></li>\n<li><code>while</code></li>\n<li><code>do ... while</code></li>\n<li><code>for</code> </li>\n<li><code>for ... in</code> :star:</li>\n<li><code>for ... of</code> :star:</li>\n<li><code>try ... catch</code> :star:</li>\n</ul>\n<h3 id=\"1-for-in\"><a href=\"#1-for-in\" class=\"headerlink\" title=\"1) for in\"></a>1) for in</h3><p>主要用来遍历对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> father = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'张三'</span>, <span class=\"attr\">age</span>:<span class=\"number\">18</span>, <span class=\"attr\">study</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> n <span class=\"keyword\">in</span> father) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其中 const n 代表遍历出来的属性名</li>\n<li>注意1：方法名也能被遍历出来（它其实也算一种特殊属性）</li>\n<li>注意2：遍历子对象时，父对象的属性会跟着遍历出来</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> son = <span class=\"built_in\">Object</span>.create(father);</span><br><span class=\"line\">son.sex = <span class=\"string\">\"男\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> n <span class=\"keyword\">in</span> son) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意3：在 for in 内获取属性值，要使用 [] 语法，而不能用 . 语法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> n <span class=\"keyword\">in</span> son) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n, son[n]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-for-of\"><a href=\"#2-for-of\" class=\"headerlink\" title=\"2) for of\"></a>2) for of</h3><p>主要用来遍历数组，也可以是其它可迭代对象，如 Map，Set 等</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> i <span class=\"keyword\">of</span> a1) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a2 = [</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'张三'</span>, <span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'李四'</span>, <span class=\"attr\">age</span>:<span class=\"number\">20</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'王五'</span>, <span class=\"attr\">age</span>:<span class=\"number\">22</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> obj <span class=\"keyword\">of</span> a2) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(obj.name, obj.age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> &#123;name,age&#125; <span class=\"keyword\">of</span> a2) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name, age);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-try-catch\"><a href=\"#3-try-catch\" class=\"headerlink\" title=\"3) try catch\"></a>3) try catch</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stu1 = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'张三'</span>, <span class=\"attr\">age</span>:<span class=\"number\">18</span>, <span class=\"attr\">address</span>: &#123;<span class=\"attr\">city</span>:<span class=\"string\">'北京'</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> stu2 = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'张三'</span>, <span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">stu</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(stu.address.city)   </span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'出现了异常'</span>, e.message)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'finally'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-API\"><a href=\"#4-API\" class=\"headerlink\" title=\"4. API\"></a>4. API</h2><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><h4 id=\"1-安装-nvm\"><a href=\"#1-安装-nvm\" class=\"headerlink\" title=\"1) 安装 nvm\"></a>1) 安装 nvm</h4><p>nvm 即 (node version manager)，好处是方便切换 node.js 版本</p>\n<p>安装注意事项</p>\n<ol>\n<li>要卸载掉现有的 nodejs</li>\n<li>提示选择 nvm 和 nodejs 目录时，一定要避免目录中出现空格</li>\n<li>选用【以管理员身份运行】cmd 程序来执行 nvm 命令</li>\n<li>首次运行前设置好国内镜像地址</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm node_mirror http://npm.taobao.org/mirrors/node/</span><br><span class=\"line\">nvm npm_mirror https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure>\n\n<p>首先查看有哪些可用版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm list available</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">|   CURRENT    |     LTS      |  OLD STABLE  | OLD UNSTABLE |</span><br><span class=\"line\">|--------------|--------------|--------------|--------------|</span><br><span class=\"line\">|    18.7.0    |   16.16.0    |   0.12.18    |   0.11.16    |</span><br><span class=\"line\">|    18.6.0    |   16.15.1    |   0.12.17    |   0.11.15    |</span><br><span class=\"line\">|    18.5.0    |   16.15.0    |   0.12.16    |   0.11.14    |</span><br><span class=\"line\">|    18.4.0    |   16.14.2    |   0.12.15    |   0.11.13    |</span><br><span class=\"line\">|    18.3.0    |   16.14.1    |   0.12.14    |   0.11.12    |</span><br><span class=\"line\">|    18.2.0    |   16.14.0    |   0.12.13    |   0.11.11    |</span><br><span class=\"line\">|    18.1.0    |   16.13.2    |   0.12.12    |   0.11.10    |</span><br><span class=\"line\">|    18.0.0    |   16.13.1    |   0.12.11    |    0.11.9    |</span><br><span class=\"line\">|    17.9.1    |   16.13.0    |   0.12.10    |    0.11.8    |</span><br><span class=\"line\">|    17.9.0    |   14.20.0    |    0.12.9    |    0.11.7    |</span><br><span class=\"line\">|    17.8.0    |   14.19.3    |    0.12.8    |    0.11.6    |</span><br><span class=\"line\">|    17.7.2    |   14.19.2    |    0.12.7    |    0.11.5    |</span><br><span class=\"line\">|    17.7.1    |   14.19.1    |    0.12.6    |    0.11.4    |</span><br><span class=\"line\">|    17.7.0    |   14.19.0    |    0.12.5    |    0.11.3    |</span><br><span class=\"line\">|    17.6.0    |   14.18.3    |    0.12.4    |    0.11.2    |</span><br><span class=\"line\">|    17.5.0    |   14.18.2    |    0.12.3    |    0.11.1    |</span><br><span class=\"line\">|    17.4.0    |   14.18.1    |    0.12.2    |    0.11.0    |</span><br><span class=\"line\">|    17.3.1    |   14.18.0    |    0.12.1    |    0.9.12    |</span><br><span class=\"line\">|    17.3.0    |   14.17.6    |    0.12.0    |    0.9.11    |</span><br><span class=\"line\">|    17.2.0    |   14.17.5    |   0.10.48    |    0.9.10    |</span><br></pre></td></tr></table></figure>\n\n<p>建议安装 LTS（长期支持版）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install 16.16.0</span><br><span class=\"line\">nvm install 14.20.0</span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>nvm list</code> 会列出已安装版本</p>\n<p>切换到 16.16.0</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use 16.16.0</span><br></pre></td></tr></table></figure>\n\n<p>切换到 14.20.0</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use 14.20.0</span><br></pre></td></tr></table></figure>\n\n<p>安装后 nvm 自己的环境变量会自动添加，但可能需要手工添加 nodejs 的 PATH 环境变量</p>\n<h4 id=\"2-检查-npm\"><a href=\"#2-检查-npm\" class=\"headerlink\" title=\"2) 检查 npm\"></a>2) 检查 npm</h4><p>npm 是 js 的包管理器，就类似于 java 界的 maven，要确保它使用的是国内镜像</p>\n<p>检查镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm get registry</span><br></pre></td></tr></table></figure>\n\n<p>如果返回的不是 <code>https://registry.npm.taobao.org/</code>，需要做如下设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-搭建前端服务器\"><a href=\"#3-搭建前端服务器\" class=\"headerlink\" title=\"3) 搭建前端服务器\"></a>3) 搭建前端服务器</h4><p>新建一个保存项目的 client 文件夹，进入文件夹执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install express --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>修改 package.json 文件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"module\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"express\"</span>: <span class=\"string\">\"^4.18.1\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其中 devDependencies 是 npm install –save-dev 添加的</li>\n</ul>\n<p>编写 main.js 代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> express <span class=\"keyword\">from</span> <span class=\"string\">'express'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express()</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(express.static(<span class=\"string\">'./'</span>))</span><br><span class=\"line\">app.listen(<span class=\"number\">7070</span>)</span><br></pre></td></tr></table></figure>\n\n<p>执行 js 代码（运行前端服务器）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node main.js</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"前端案例\"><a href=\"#前端案例\" class=\"headerlink\" title=\"前端案例\"></a>前端案例</h3><p>初步效果</p>\n<p><img src=\"https://s1.ax1x.com/2022/10/21/xcKwEF.png\" alt=\"image-20220812103323220\"></p>\n<p>架构</p>\n<p><img src=\"https://s1.ax1x.com/2022/10/21/xcKNuV.png\" alt=\"image-20220812103219916\"></p>\n<ul>\n<li>前端只有静态页面，使用 Express 服务器</li>\n<li>后端使用 Tomcat 服务器，通过 SpringBoot、MyBatis 等框架获取数据库数据</li>\n</ul>\n<h4 id=\"1-查找元素\"><a href=\"#1-查找元素\" class=\"headerlink\" title=\"1) 查找元素\"></a>1) 查找元素</h4><ul>\n<li>document.getElementById - 根据 id 值查找一个元素</li>\n<li>[document|元素].querySelector - 根据选择器查找第一个匹配元素</li>\n<li>[document|元素].querySelectorAll - 根据选择器查找所有匹配元素</li>\n</ul>\n<p>例如，有下面的 html 代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span>学生列表<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"thead\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row bold\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>编号<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>姓名<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>性别<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>年龄<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tbody\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>张三<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>男<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>18<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.title'</span>); <span class=\"comment\">// 找到 &lt;div class=\"title\"&gt;学生列表&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.col'</span>); <span class=\"comment\">// 找到 &lt;div class=\"col\"&gt;编号&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.col'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  找到的是一个集合</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;div class=\"col\"&gt;编号&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;div class=\"col\"&gt;姓名&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;div class=\"col\"&gt;性别&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;div class=\"col\"&gt;年龄&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;div class=\"col\"&gt;1&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;div class=\"col\"&gt;张三&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;div class=\"col\"&gt;男&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;div class=\"col\"&gt;18&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> thead = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.thead'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 只在 thead 元素范围内找</span></span><br><span class=\"line\">thead.querySelectorAll(<span class=\"string\">'.col'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  找到的是一个集合</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;div class=\"col\"&gt;编号&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;div class=\"col\"&gt;姓名&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;div class=\"col\"&gt;性别&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;div class=\"col\"&gt;年龄&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>根据 id 属性查找既可以用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"id值\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>也可以用 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#id值\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-修改元素内容\"><a href=\"#2-修改元素内容\" class=\"headerlink\" title=\"2) 修改元素内容\"></a>2) 修改元素内容</h4><ul>\n<li>元素.innerHTML</li>\n<li>元素.textContent</li>\n</ul>\n<p>例如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.title'</span>).innerHTML = <span class=\"string\">'侠客列表'</span></span><br></pre></td></tr></table></figure>\n\n<p>效果</p>\n<p><img src=\"https://s1.ax1x.com/2022/10/21/xcKUBT.png\" alt=\"image-20220812161003958\"></p>\n<p>innerHTML  会解析内容中的标签，例如</p>\n<p><img src=\"https://s1.ax1x.com/2022/10/21/xcK0N4.png\" alt=\"image-20220812161137912\"></p>\n<p>textContext 不会解析内容中的标签</p>\n<p><img src=\"https://s1.ax1x.com/2022/10/21/xcKaHU.png\" alt=\"image-20220812161341825\"></p>\n<p>给 innerHTML 或 textContent 赋值空串，可以实现清空标签内容的效果</p>\n<h4 id=\"3-利用模板\"><a href=\"#3-利用模板\" class=\"headerlink\" title=\"3) 利用模板\"></a>3) 利用模板</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span>学生列表<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"thead\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row bold\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>编号<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>姓名<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>性别<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>年龄<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tbody\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">\"tp\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>xx<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>xx<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>xx<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>xx<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 将来这些数据从 java 端返回</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> array = [</span></span><br><span class=\"line\"><span class=\"javascript\">        &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张三'</span>, <span class=\"attr\">sex</span>: <span class=\"string\">'男'</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span> &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'李四'</span>, <span class=\"attr\">sex</span>: <span class=\"string\">'女'</span>, <span class=\"attr\">age</span>: <span class=\"number\">17</span> &#125;</span></span><br><span class=\"line\">    ];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> tp = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"tp\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> row = tp.content;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> [c1,c2,c3,c4] = row.querySelectorAll(<span class=\"string\">\".col\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> tbody = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.tbody'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> &#123;id,name,sex,age&#125; <span class=\"keyword\">of</span> array) &#123;</span></span><br><span class=\"line\">        c1.textContent = id;</span><br><span class=\"line\">        c2.textContent = name;</span><br><span class=\"line\">        c3.textContent = sex;</span><br><span class=\"line\">        c4.textContent = age;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 复制元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> newRow = <span class=\"built_in\">document</span>.importNode(row, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 建立父子关系，左边父，右边子</span></span></span><br><span class=\"line\">        tbody.appendChild(newRow);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-Fetch-API\"><a href=\"#4-Fetch-API\" class=\"headerlink\" title=\"4) Fetch API\"></a>4) Fetch API</h4><p>Fetch API 可以用来获取远程数据，它有两种方式接收结果，同步方式与异步方式</p>\n<p>格式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url, options) <span class=\"comment\">// 返回 Promise</span></span><br></pre></td></tr></table></figure>\n\n<p>同步方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> 结果 = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span></span><br><span class=\"line\"><span class=\"comment\">// 后续代码</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>await 关键字必须在一个标记了 async 的 function 内来使用</li>\n<li>后续代码不会在结果返回前执行</li>\n</ul>\n<p>异步方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span></span><br><span class=\"line\">\t.then(结果 =&gt; &#123; ... &#125;)</span><br><span class=\"line\"><span class=\"comment\">// 后续代码</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>后续代码不必等待结果返回就可以执行</li>\n</ul>\n<p>例：</p>\n<p>在 express 服务器上有 students.json 文件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123; <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>, <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"张三\"</span>, <span class=\"attr\">\"sex\"</span>: <span class=\"string\">\"男\"</span>, <span class=\"attr\">\"age\"</span>: <span class=\"number\">18</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span>, <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"李四\"</span>, <span class=\"attr\">\"sex\"</span>: <span class=\"string\">\"女\"</span>, <span class=\"attr\">\"age\"</span>: <span class=\"number\">17</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>现在用 fetch api 获取这些数据，并展示</p>\n<p>同步方式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findStudents</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">try</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 获取响应对象</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> resp = <span class=\"keyword\">await</span> fetch(<span class=\"string\">'students.json'</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 获取响应体, 按json格式转换为js数组</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> array = <span class=\"keyword\">await</span> resp.json();</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 显示数据</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> tp = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"tp\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> row = tp.content;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> [c1,c2,c3,c4] = row.querySelectorAll(<span class=\"string\">\".col\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> tbody = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.tbody'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> &#123;id,name,sex,age&#125; <span class=\"keyword\">of</span> array) &#123;</span></span><br><span class=\"line\">                c1.textContent = id;</span><br><span class=\"line\">                c2.textContent = name;</span><br><span class=\"line\">                c3.textContent = sex;</span><br><span class=\"line\">                c4.textContent = age;</span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">// 复制元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">const</span> newRow = <span class=\"built_in\">document</span>.importNode(row, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">// 建立父子关系</span></span></span><br><span class=\"line\">                tbody.appendChild(newRow);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"><span class=\"javascript\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(e);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    findStudents()</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>fetch(‘students.json’) 内部会发送请求，但响应结果不能立刻返回，因此 await 就是等待响应结果返回</li>\n<li>其中 resp.json() 也不是立刻能返回结果，它返回的也是 Promise 对象，也要配合 await 取结果</li>\n</ul>\n<p>异步方式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    fetch(<span class=\"string\">'students.json'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">        .then( <span class=\"function\"><span class=\"params\">resp</span> =&gt;</span> resp.json() )</span></span><br><span class=\"line\"><span class=\"javascript\">        .then( <span class=\"function\"><span class=\"params\">array</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        \t<span class=\"comment\">// 显示数据</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> tp = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"tp\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> row = tp.content;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> [c1,c2,c3,c4] = row.querySelectorAll(<span class=\"string\">\".col\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> tbody = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.tbody'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> &#123;id,name,sex,age&#125; <span class=\"keyword\">of</span> array) &#123;</span></span><br><span class=\"line\">                c1.textContent = id;</span><br><span class=\"line\">                c2.textContent = name;</span><br><span class=\"line\">                c3.textContent = sex;</span><br><span class=\"line\">                c4.textContent = age;</span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">// 复制元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">const</span> newRow = <span class=\"built_in\">document</span>.importNode(row, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">// 建立父子关系</span></span></span><br><span class=\"line\">                tbody.appendChild(newRow);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"javascript\">        .catch( <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(e) )</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第一个 then 是在响应返回后，才会调用它里面的箭头函数，箭头函数参数即 resp  响应对象</li>\n<li>第二个 then 是在 json 解析完成后，才会调用它里面的箭头函数，箭头函数参数即解析结果（本例是 array 数组）</li>\n<li>上一个 then 返回的是 Promise 对象时，才能链式调用下一个 then</li>\n</ul>\n<h5 id=\"跨域问题\"><a href=\"#跨域问题\" class=\"headerlink\" title=\"跨域问题\"></a>跨域问题</h5><p><img src=\"https://s1.ax1x.com/2022/10/21/xcKB4J.png\" alt=\"image-20220814105448882\"></p>\n<ul>\n<li>只要协议、主机、端口之一不同，就不同源，例如<ul>\n<li><a href=\"http://localhost:7070/a\" target=\"_blank\" rel=\"noopener\">http://localhost:7070/a</a> 和 <a href=\"https://localhost:7070/b\" target=\"_blank\" rel=\"noopener\">https://localhost:7070/b</a> 就不同源</li>\n</ul>\n</li>\n<li>同源检查是浏览器的行为，而且只针对 fetch、xhr 请求<ul>\n<li>如果是其它客户端，例如 java http client，postman，它们是不做同源检查的</li>\n<li>通过表单提交、浏览器直接输入 url 地址这些方式发送的请求，也不会做同源检查</li>\n</ul>\n</li>\n<li>更多相关知识请参考<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS\" target=\"_blank\" rel=\"noopener\">跨源资源共享（CORS） - HTTP | MDN (mozilla.org)</a></li>\n</ul>\n</li>\n</ul>\n<p>请求响应头解决</p>\n<p><img src=\"https://s1.ax1x.com/2022/10/21/xcKrC9.png\" alt=\"image-20220814144040703\"></p>\n<ul>\n<li>fetch 请求跨域，会携带一个 Origin 头，代表【发请求的资源源自何处】，目标通过它就能辨别是否发生跨域<ul>\n<li>我们的例子中：student.html 发送 fetch 请求，告诉 tomcat，我源自 localhost:7070</li>\n</ul>\n</li>\n<li>目标资源通过返回 Access-Control-Allow-Origin 头，告诉浏览器【允许哪些源使用此响应】<ul>\n<li>我们的例子中：tomcat 返回 fetch 响应，告诉浏览器，这个响应允许源自 localhost:7070 的资源使用</li>\n</ul>\n</li>\n</ul>\n<p>代理解决</p>\n<p><img src=\"https://s1.ax1x.com/2022/10/21/xcKTgI.png\" alt=\"image-20220814161532141\"></p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install http-proxy-middleware --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>在 express 服务器启动代码中加入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;createProxyMiddleware&#125; <span class=\"keyword\">from</span> <span class=\"string\">'http-proxy-middleware'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">'/api'</span>, createProxyMiddleware(&#123; <span class=\"attr\">target</span>: <span class=\"string\">'http://localhost:8080'</span>, <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span> &#125;));</span><br></pre></td></tr></table></figure>\n\n<p>fetch 代码改为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resp = <span class=\"keyword\">await</span> fetch(<span class=\"string\">'http://localhost:7070/api/students'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>或</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resp = <span class=\"keyword\">await</span> fetch(<span class=\"string\">'/api/students'</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-模块化\"><a href=\"#5-模块化\" class=\"headerlink\" title=\"5) 模块化\"></a>5) 模块化</h4><p>单个导出 const、let、function</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'c'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一齐导出</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'c'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;a,b,c&#125;</span><br></pre></td></tr></table></figure>\n\n<p>导出 default，只能有一个</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'c'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> b;</span><br></pre></td></tr></table></figure>\n\n<p>import 语法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">import</span> 语句</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>import 需要遵循同源策略</li>\n</ul>\n<p>整个导入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"built_in\">module</span> <span class=\"keyword\">from</span> <span class=\"string\">'/1.js'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">module</span>.a)\t\t<span class=\"comment\">// 输出10</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">module</span>.b)\t\t<span class=\"comment\">// 输出20</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.c()\t\t\t\t\t<span class=\"comment\">// 输出c</span></span><br></pre></td></tr></table></figure>\n\n<p>单个导入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;a,c&#125; <span class=\"keyword\">from</span> <span class=\"string\">'/1.js'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)\t\t\t\t<span class=\"comment\">// 输出10</span></span><br><span class=\"line\">c()\t\t\t\t\t\t\t<span class=\"comment\">// 输出c</span></span><br></pre></td></tr></table></figure>\n\n<p>导入默认</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> x <span class=\"keyword\">from</span> <span class=\"string\">'/1.js'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x)\t\t\t\t<span class=\"comment\">// 输出20</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h1><p>它是一种脚本语言，可以用来更改页面内容，控制多媒体，制作图像、动画等等</p>\n<p>例子</p>\n<ul>\n<li>修改页面内容</li>\n</ul>\n<p>js 代码位置</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t// js 代码</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>引入 js 脚本</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js脚本路径\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意，到了框架之后，引入方式会有不同</li>\n</ul>\n<h2 id=\"1-变量与数据类型\"><a href=\"#1-变量与数据类型\" class=\"headerlink\" title=\"1. 变量与数据类型\"></a>1. 变量与数据类型</h2><h3 id=\"声明变量\"><a href=\"#声明变量\" class=\"headerlink\" title=\"声明变量\"></a>声明变量</h3><h4 id=\"1-let\"><a href=\"#1-let\" class=\"headerlink\" title=\"1) let\"></a>1) let</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> 变量名 = 值;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>let 声明的变量可以被多次赋值，例如</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">100</span>;  <span class=\"comment\">// 初始值是 100</span></span><br><span class=\"line\">a = <span class=\"number\">200</span>;\t  <span class=\"comment\">// ok, 被重新赋值为 200</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-const\"><a href=\"#2-const\" class=\"headerlink\" title=\"2) const\"></a>2) const</h4><ul>\n<li>const 修饰的叫常量，只能赋值一次</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"number\">300</span>; <span class=\"comment\">// 初始值是 300</span></span><br><span class=\"line\">b = <span class=\"number\">400</span>;\t   <span class=\"comment\">// error, 不能再次赋值</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>const 并不意味着它引用的内容不可修改，例如</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> c = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">c[<span class=\"number\">2</span>] = <span class=\"number\">4</span>; \t        <span class=\"comment\">// ok, 数组内容被修改成 [1,2,4]</span></span><br><span class=\"line\">c = [<span class=\"number\">5</span>,<span class=\"number\">6</span>];\t\t\t<span class=\"comment\">// error, 不能再次赋值</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-var\"><a href=\"#3-var\" class=\"headerlink\" title=\"3) var\"></a>3) var</h4><p>var 声明的变量可以被多次赋值，例如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"number\">100</span>;</span><br><span class=\"line\">f = <span class=\"number\">200</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"基本类型\"><a href=\"#基本类型\" class=\"headerlink\" title=\"基本类型\"></a>基本类型</h3><h4 id=\"1-2-undefined-和-null\"><a href=\"#1-2-undefined-和-null\" class=\"headerlink\" title=\"1,2) undefined 和 null\"></a>1,2) undefined 和 null</h4><ul>\n<li>执行表达式或函数，没有返回结果，出现 undefined</li>\n<li>访问数组不存在的元素，访问对象不存在的属性，出现 undefined</li>\n<li>定义变量，没有初始化，出现 undefined</li>\n</ul>\n<p>例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);  \t<span class=\"comment\">// 函数没有返回值, 结果是  undefined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">10</span>;\t\t \t<span class=\"comment\">// 表达式没有返回值, 结果是 undefined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b[<span class=\"number\">10</span>]); <span class=\"comment\">// 数组未定义元素是 undefined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = &#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"张三\"</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c.age); <span class=\"comment\">// 对象未定义属性是 undefined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> d;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d);\t\t<span class=\"comment\">// 变量未初始化是 undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>二者共同点</p>\n<ul>\n<li>都没有属性、方法</li>\n<li>二者合称 Nullish</li>\n</ul>\n<p>二者区别</p>\n<ul>\n<li>undefined 由 js 产生</li>\n<li>null 由程序员提供</li>\n</ul>\n<h4 id=\"3-string\"><a href=\"#3-string\" class=\"headerlink\" title=\"3) string\"></a>3) string</h4><p>js 字符串三种写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">\"hello\"</span>;  <span class=\"comment\">// 双引号</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"string\">\"world\"</span>;  <span class=\"comment\">// 单引号</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"string\">`hello`</span>;  <span class=\"comment\">// 反引号</span></span><br></pre></td></tr></table></figure>\n\n<p>html 代码如下，用 java 和 js 中的字符串如何表示？</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"1.html\"</span>&gt;</span>超链接<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>java 显得比较繁琐</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s1 = <span class=\"string\">\"&lt;a href=\\\"1.html\\\"&gt;超链接&lt;/a&gt;\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">String s2 = <span class=\"string\">\"\"</span><span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">    &lt;a href=\"</span><span class=\"number\">1</span>.html<span class=\"string\">\"&gt;超链接&lt;/a&gt;\"</span><span class=\"string\">\"\"</span>;</span><br></pre></td></tr></table></figure>\n\n<p>js 就比较灵活</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s1 = <span class=\"string\">'&lt;a href=\"1.html\"&gt;超链接&lt;/a&gt;'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> s2 = <span class=\"string\">`&lt;a href=\"1.html\"&gt;超链接&lt;/a&gt;`</span>;</span><br></pre></td></tr></table></figure>\n\n<p>模板字符串（Template strings）</p>\n<p>需求：拼接 URI 的请求参数，如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/test?name=zhang&amp;age=18</span><br><span class=\"line\">/test?name=li&amp;age=20</span><br></pre></td></tr></table></figure>\n\n<p>传统方法拼接</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = ; <span class=\"comment\">// zhang li ...</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = ; <span class=\"comment\">// 18 20 ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> uri = <span class=\"string\">\"/test?name=\"</span> + name + <span class=\"string\">\"&amp;age=\"</span> + age;</span><br></pre></td></tr></table></figure>\n\n<p>模板字符串方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = ; <span class=\"comment\">// zhang li ...</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = ; <span class=\"comment\">// 18 20 ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> uri = <span class=\"string\">`/test?name=<span class=\"subst\">$&#123;name&#125;</span>&amp;age=<span class=\"subst\">$&#123;age&#125;</span>`</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-5-number-和-bigint\"><a href=\"#4-5-number-和-bigint\" class=\"headerlink\" title=\"4,5) number 和 bigint\"></a>4,5) number 和 bigint</h4><p>number 类型标识的是双精度浮动小数，例如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span> / <span class=\"number\">3</span>;   <span class=\"comment\">// 结果 3.3333333333333335</span></span><br></pre></td></tr></table></figure>\n\n<p>既然是浮点小数，那么可以除零</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span> / <span class=\"number\">0</span>;\t  <span class=\"comment\">// 结果 Infinity 正无穷大</span></span><br><span class=\"line\"><span class=\"number\">-10</span> / <span class=\"number\">0</span>;  <span class=\"comment\">// 结果 -Infinity 负无穷大</span></span><br></pre></td></tr></table></figure>\n\n<p>浮点小数都有运算精度问题，例如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2.0</span> - <span class=\"number\">1.1</span>; <span class=\"comment\">// 结果 0.8999999999999999</span></span><br></pre></td></tr></table></figure>\n\n<p>字符串转数字</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>); \t<span class=\"comment\">// 结果是数字 10 </span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10.5\"</span>);\t<span class=\"comment\">// 结果是数字 10, 去除了小数部分</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">\"10\"</span>) / <span class=\"number\">3</span>; <span class=\"comment\">// 结果仍视为 number 浮点数, 因此结果为 3.3333333333333335</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">\"abc\"</span>);\t<span class=\"comment\">// 转换失败，结果是特殊值 NaN (Not a Number)</span></span><br></pre></td></tr></table></figure>\n\n<p>要表示真正的整数，需要用 bigint，数字的结尾用 n 表示它是一个 bigint 类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span>n / <span class=\"number\">3</span>n;\t\t\t<span class=\"comment\">// 结果 3n, 按整数除法处理</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-boolean\"><a href=\"#6-boolean\" class=\"headerlink\" title=\"6) boolean\"></a>6) boolean</h4><ul>\n<li>Truthy</li>\n<li>Falsy</li>\n</ul>\n<p>在 js 中，并不是 boolean 才能用于条件判断，你可以在 if 语句中使用【数字】、【字符串】… 作为判断条件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(b) &#123; <span class=\"comment\">// true</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"进入了\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时就有一个规则，当需要条件判断时，这个值被当作 true 还是 false，当作 true 的值归类为 truthy，当作 false 的值归类为 falsy</p>\n<p>下面值都是 falsy</p>\n<ul>\n<li><code>false</code></li>\n<li><code>Nullish (null, undefined)</code></li>\n<li><code>0, 0n, NaN</code></li>\n<li>长度为零的字符串</li>\n</ul>\n<p>剩余的值绝大部分都是 truthy</p>\n<p>有几个容易被当作 falsy 实际是 truthy 的</p>\n<ul>\n<li><code>&quot;false&quot;, &quot;0&quot;</code> 即字符串的 false 和 字符串的零</li>\n<li><code>[]</code> 空数组</li>\n<li><code>{}</code> 空对象</li>\n</ul>\n<h4 id=\"7-symbol\"><a href=\"#7-symbol\" class=\"headerlink\" title=\"7) symbol\"></a>7) symbol</h4><ul>\n<li>很少使用</li>\n</ul>\n<h3 id=\"对象类型\"><a href=\"#对象类型\" class=\"headerlink\" title=\"对象类型\"></a>对象类型</h3><h4 id=\"1-Function\"><a href=\"#1-Function\" class=\"headerlink\" title=\"1) Function\"></a>1) Function</h4><h5 id=\"定义函数\"><a href=\"#定义函数\" class=\"headerlink\" title=\"定义函数\"></a>定义函数</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> 函数名(<span class=\"params\">参数</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 函数体</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> 结果;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"调用函数\"><a href=\"#调用函数\" class=\"headerlink\" title=\"调用函数\"></a>调用函数</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">函数名(实参);</span><br></pre></td></tr></table></figure>\n\n<p>例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">1</span>, <span class=\"number\">2</span>);     <span class=\"comment\">// 返回 3</span></span><br></pre></td></tr></table></figure>\n\n<p>js 中的函数调用特点：对参数的<strong>类型</strong>和<strong>个数</strong>都没有限制，例如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add(<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>);  <span class=\"comment\">// 返回 ab</span></span><br><span class=\"line\">add(<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>);   <span class=\"comment\">// 返回 9, 第三个参数没有被用到, 不会报错</span></span><br><span class=\"line\">add(<span class=\"number\">1</span>);\t\t\t<span class=\"comment\">// 返回 NaN, 这时 b 没有定义是 undefined, undefined 做数学运算结果就是 NaN</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h5><p>java 中（spring）要实现默认参数的效果得这么做：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyController</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/page\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">page</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        @RequestParam(defaultValue=<span class=\"string\">\"1\"</span>)</span> <span class=\"keyword\">int</span> page, </span></span><br><span class=\"line\"><span class=\"function\">        @<span class=\"title\">RequestParam</span><span class=\"params\">(defaultValue=<span class=\"string\">\"10\"</span>)</span> <span class=\"keyword\">int</span> size</span></span><br><span class=\"line\"><span class=\"function\">    )</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pagination</span>(<span class=\"params\">page = <span class=\"number\">1</span>, size = <span class=\"number\">10</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(page, size);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h5><p>语法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">参数</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 函数体</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> 结果;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>第一种场景：定义完毕后立刻调用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;)(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<p>第二种场景：作为其它对象的方法，例如</p>\n<p>页面有元素</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">id</span>=<span class=\"string\">\"p1\"</span>&gt;</span>点我啊<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>此元素有一个 onclick 方法，会在鼠标单击这个元素后被执行，onclick 方法刚开始是 null，需要赋值后才能使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"p1\"</span>).onclick = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"鼠标单击了...\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(参数) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 函数体</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> 结果;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>如果没有参数，() 还是要保留</li>\n<li>如果只有一个参数，() 可以省略</li>\n<li>如果函数体内只有一行代码，{} 可以省略</li>\n<li>如果这一行代码就是结果，return 可以省略</li>\n</ul>\n<p>例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"p1\"</span>).onclick = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span>  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"aa\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"函数是对象\"><a href=\"#函数是对象\" class=\"headerlink\" title=\"函数是对象\"></a>函数是对象</h5><p>以下形式在 js 中非常常见！</p>\n<ol>\n<li>可以参与赋值，例，具名函数也能参与赋值</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">abc</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"bb\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"p1\"</span>).onclick = abc;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>有属性、有方法，执行 <code>console.dir(abc)</code>，输出结果如下</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ƒ abc()</span><br><span class=\"line\">    arguments: null</span><br><span class=\"line\">    caller: null</span><br><span class=\"line\">    length: 0</span><br><span class=\"line\">    name: &quot;abc&quot;</span><br><span class=\"line\">    ➡prototype: &#123;constructor: ƒ&#125;</span><br><span class=\"line\">    [[FunctionLocation]]: VM1962:1</span><br><span class=\"line\">    ➡[[Prototype]]: ƒ ()</span><br><span class=\"line\">    ➡[[Scopes]]: Scopes[1]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>其中带有 f 标记的是方法，不带的是属性</p>\n</li>\n<li><p>带有 ➡ 符号的可以继续展开，限于篇幅省略了</p>\n</li>\n<li><p>带有 <code>[[ ]]</code> 的是内置属性，不能访问，只能查看</p>\n</li>\n<li><p>相对重要的是 <code>[[Prototype]]</code> 和 <code>[[Scopes]]</code> 会在后面继承和作用域时讲到</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>可以作为方法参数</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">fn</span>) </span>&#123;          <span class=\"comment\">// fn 将来可以是一个函数对象</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'b'</span>)</span><br><span class=\"line\">    fn();                 <span class=\"comment\">// 调用函数对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">b(a)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>可以作为方法返回值</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">d</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"d\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">c()()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"函数作用域\"><a href=\"#函数作用域\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h5><p>函数可以嵌套（js 代码中很常见，只是嵌套的形式更多是匿名函数，箭头函数）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看下面的例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> z = <span class=\"number\">30</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 看这里</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(x, y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>以函数为分界线划定作用域，所有函数之外是全局作用域</li>\n<li>查找变量时，由内向外查找<ul>\n<li>在内层作用域找到变量，就会停止查找，不会再找外层</li>\n<li>所有作用域都找不到变量，报错</li>\n</ul>\n</li>\n<li>作用域本质上是函数对象的属性，可以通过 console.dir 来查看调试</li>\n</ul>\n<h5 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(x,y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a()();  <span class=\"comment\">// 在外面执行了 b</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>函数定义时，它的作用域已经确定好了，因此无论函数将来去了哪，都能从它的作用域中找到当时那些变量</li>\n<li>别被概念忽悠了，闭包就是指<strong>函数能够访问自己的作用域中变量</strong></li>\n</ul>\n<h5 id=\"let、var-与作用域\"><a href=\"#let、var-与作用域\" class=\"headerlink\" title=\"let、var 与作用域\"></a>let、var 与作用域</h5><p>如果函数外层引用的是 let 变量，那么外层普通的 {} 也会作为作用域边界，最外层的 let 也占一个 script 作用域</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">10</span>; </span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> y = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(x,y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.dir(b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果函数外层引用的是 var 变量，外层普通的 {} 不会视为边界</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>; </span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> y = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(x,y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.dir(b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果 var 变量出现了重名，则他俩会被视为同一作用域中的同一个变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"number\">10</span>; </span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> e = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e);\t<span class=\"comment\">// 打印 20</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e);\t\t<span class=\"comment\">// 因为是同一个变量，还是打印 20</span></span><br></pre></td></tr></table></figure>\n\n<p>如果是 let，则视为两个作用域中的两个变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> e = <span class=\"number\">10</span>; </span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> e = <span class=\"number\">20</span>;\t</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e);\t<span class=\"comment\">// 打印 20</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e);\t\t<span class=\"comment\">// 打印 10</span></span><br></pre></td></tr></table></figure>\n\n<p>要想里面的 e 和外面的 e 能区分开来，最简单的办法是改成 let，或者用函数来界定作用域范围</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"number\">10</span>; </span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> e = <span class=\"number\">20</span>;</span><br><span class=\"line\">    \t<span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    b();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Array-star\"><a href=\"#2-Array-star\" class=\"headerlink\" title=\"2) Array :star:\"></a>2) Array :star:</h4><p>语法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取数组元素</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr[<span class=\"number\">0</span>]); <span class=\"comment\">// 输出 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改数组元素</span></span><br><span class=\"line\">array[<span class=\"number\">0</span>] = <span class=\"number\">5</span>;\t\t <span class=\"comment\">// 数组元素变成了 [5,2,3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历数组元素，其中 length 是数组属性，代表数组长度</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>API</p>\n<ul>\n<li>push、shift、splice</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]; </span><br><span class=\"line\"></span><br><span class=\"line\">arr.push(<span class=\"number\">4</span>);    \t<span class=\"comment\">// 向数组尾部(右侧)添加元素, 结果 [1,2,3,4]</span></span><br><span class=\"line\">arr.shift();\t\t<span class=\"comment\">// 从数组头部(左侧)移除元素, 结果 [2,3,4]</span></span><br><span class=\"line\">arr.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>);\t<span class=\"comment\">// 删除【参数1】索引位置的【参数2】个元素，结果 [2,4]</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>join</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">arr.join(); \t\t<span class=\"comment\">// 默认使用【,】作为连接符，结果 'a,b,c'</span></span><br><span class=\"line\">arr.join(<span class=\"string\">''</span>);\t\t<span class=\"comment\">// 结果 'abc'</span></span><br><span class=\"line\">arr.join(<span class=\"string\">'-'</span>);\t\t<span class=\"comment\">// 结果 'a-b-c'</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>map、filter、forEach</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">i</span>) </span>&#123;   <span class=\"comment\">// 代表的新旧元素之间的变换规则</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> i * <span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// arr.map(a) // 具名函数，结果 [10,20,30,60]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// arr.map( (i) =&gt; &#123;return i * 10&#125; ); // 箭头函数</span></span><br><span class=\"line\">arr.map( <span class=\"function\"><span class=\"params\">i</span> =&gt;</span> i * <span class=\"number\">10</span> ); <span class=\"comment\">// 箭头函数</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>传给 map 的函数，参数代表旧元素，返回值代表新元素</li>\n</ul>\n<p>map 的内部实现（伪代码）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">map</span>(<span class=\"params\">a</span>) </span>&#123; <span class=\"comment\">// 参数是一个函数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> narr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> o = arr[i]; <span class=\"comment\">// 旧元素</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> n = a(o);   <span class=\"comment\">// 新元素</span></span><br><span class=\"line\">        narr.push(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> narr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>filter 例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\">arr.filter( <span class=\"function\">(<span class=\"params\">i</span>)=&gt;</span> i % <span class=\"number\">2</span> == <span class=\"number\">1</span> ); <span class=\"comment\">// 结果 [1,3]</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>传给 filter 的函数，参数代表旧元素，返回 true 表示要留下的元素</li>\n</ul>\n<p>forEach 例子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*for(let i = 0; i &lt; arr.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    console.log(arr[i]);</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">arr.forEach( <span class=\"function\">(<span class=\"params\">i</span>) =&gt;</span> <span class=\"built_in\">console</span>.log(i) );</span><br></pre></td></tr></table></figure>\n\n<p>两个称呼</p>\n<ul>\n<li>高阶函数，map，filter，forEach</li>\n<li>回调函数，例如作为参数传入的函数</li>\n</ul>\n<h4 id=\"3-Object-star-star\"><a href=\"#3-Object-star-star\" class=\"headerlink\" title=\"3) Object :star::star:\"></a>3) Object :star::star:</h4><h5 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    属性名: 值,</span><br><span class=\"line\">    方法名: 函数,</span><br><span class=\"line\">    <span class=\"keyword\">get</span> 属性名() &#123;&#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span> 属性名(新值) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例1</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stu1 = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"小明\"</span>,</span><br><span class=\"line\">    age: <span class=\"number\">18</span>,</span><br><span class=\"line\">    study: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"爱学习\"</span>);</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例2</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">\"小黑\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> study = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"爱学习\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> stu2 = &#123; name, age, study &#125;</span><br></pre></td></tr></table></figure>\n\n<p>例3（重点）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stu3 = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"小白\"</span>,</span><br><span class=\"line\">    age: <span class=\"number\">18</span>,</span><br><span class=\"line\">    study()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"爱学习\"</span>);</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>注意</strong>：对象方法这么写，仅限于对象内部</li>\n</ul>\n<p>例4</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stu4 = &#123;</span><br><span class=\"line\">    _name: <span class=\"literal\">null</span>, <span class=\"comment\">/*类似于java中私有成员变量*/</span></span><br><span class=\"line\">    <span class=\"keyword\">get</span> name() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"进入了get\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._name;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span> name(name) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"进入了set\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用 get，set</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stu4.name = <span class=\"string\">\"小白\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stu4.name)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"特色：属性增删\"><a href=\"#特色：属性增删\" class=\"headerlink\" title=\"特色：属性增删\"></a>特色：属性增删</h5><p>对比一下 Java 中的 Object</p>\n<ul>\n<li>Java 的 Object 是以类作为模板来创建，对象不能脱离类模板的范围，一个对象的属性、能用的方法都是确定好的</li>\n<li>js 的对象，不需要什么模板，它的属性和方法可以随时加减</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stu = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'张三'</span>&#125;;</span><br><span class=\"line\">stu.age = <span class=\"number\">18</span>;\t\t\t\t\t<span class=\"comment\">// 添加属性</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> stu.age;\t\t\t\t\t<span class=\"comment\">// 删除属性</span></span><br><span class=\"line\"></span><br><span class=\"line\">stu.study = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;\t\t<span class=\"comment\">// 添加方法</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"在学习\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>添加 get，set，需要借助 Object.definePropery</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stu = &#123;<span class=\"attr\">_name</span>:<span class=\"literal\">null</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(stu, <span class=\"string\">\"name\"</span>, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._name;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>(name)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>参数1：目标对象</li>\n<li>参数2：属性名</li>\n<li>参数3：get，set 的定义</li>\n</ul>\n<h5 id=\"特色：this\"><a href=\"#特色：this\" class=\"headerlink\" title=\"特色：this\"></a>特色：this</h5><p>先来对 Java 中的 this 有个理解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestMethod</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">(Student <span class=\"keyword\">this</span>, String subject)</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"在学习 \"</span> + subject);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Student stu = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"小明\"</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 下面的代码，本质上是执行 study(stu, \"java\")，因此 this 就是 stu</span></span><br><span class=\"line\">        stu.study(<span class=\"string\">\"java\"</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Java 中的 this 是个隐式参数</li>\n<li>Java 中，我们说 this 代表的就是调用方法的那个对象</li>\n</ul>\n<p>js 中的 this 也是隐式参数，但它与函数运行时上下文相关</p>\n<p>例如，一个“落单”的函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">study</span>(<span class=\"params\">subject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"在学习 \"</span> + subject)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">study(<span class=\"string\">\"js\"</span>);  <span class=\"comment\">// 输出 在学习 js</span></span><br></pre></td></tr></table></figure>\n\n<p>这是因为此时函数执行，全局对象 window 被当作了 this，window 对象的 name 属性是空串</p>\n<p>同样的函数，如果作为对象的方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stu = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"小白\"</span>,</span><br><span class=\"line\">    study</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种情况下，会将当前对象作为 this</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stu.study(<span class=\"string\">'js'</span>); \t<span class=\"comment\">// 输出 小白在学习 js</span></span><br></pre></td></tr></table></figure>\n\n<p>还可以动态改变 this</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stu = &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"小黑\"</span>&#125;;</span><br><span class=\"line\">study.call(stu, <span class=\"string\">\"js\"</span>);\t<span class=\"comment\">// 输出 小黑在学习 js</span></span><br></pre></td></tr></table></figure>\n\n<p>这回 study 执行时，就把 call 的第一个参数 stu 作为 this</p>\n<p>一个例外是，在<strong>箭头函数</strong>内出现的 this，以外层 this 理解 </p>\n<p>用匿名函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stu = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"小花\"</span>,</span><br><span class=\"line\">    friends: [<span class=\"string\">\"小白\"</span>,<span class=\"string\">\"小黑\"</span>,<span class=\"string\">\"小明\"</span>],</span><br><span class=\"line\">    play() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.friends.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"与\"</span> + e + <span class=\"string\">\"在玩耍\"</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">stu.play()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>this.name 所在的函数是【落单】的函数，因此 this 代表 window</li>\n</ul>\n<p>输出结果为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">与小白在玩耍</span><br><span class=\"line\">与小黑在玩耍</span><br><span class=\"line\">与小明在玩耍</span><br></pre></td></tr></table></figure>\n\n<p>用箭头函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stu = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"小花\"</span>,</span><br><span class=\"line\">    friends: [<span class=\"string\">\"小白\"</span>,<span class=\"string\">\"小黑\"</span>,<span class=\"string\">\"小明\"</span>],</span><br><span class=\"line\">    play() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.friends.forEach(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name + <span class=\"string\">\"与\"</span> + e + <span class=\"string\">\"在玩耍\"</span>);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>this.name 所在的函数是箭头函数，因此 this 要看它外层的 play 函数，play 又是属于 stu 的方法，因此 this 代表 stu 对象</li>\n</ul>\n<p>输出结果为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小花与小白在玩耍</span><br><span class=\"line\">小花与小黑在玩耍</span><br><span class=\"line\">小花与小明在玩耍</span><br></pre></td></tr></table></figure>\n\n<p>不用箭头函数的做法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stu = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"小花\"</span>,</span><br><span class=\"line\">    friends: [<span class=\"string\">\"小白\"</span>,<span class=\"string\">\"小黑\"</span>,<span class=\"string\">\"小明\"</span>],</span><br><span class=\"line\">    play() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> me = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.friends.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(me.name + <span class=\"string\">\"与\"</span> + e + <span class=\"string\">\"在玩耍\"</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"特色：原型继承\"><a href=\"#特色：原型继承\" class=\"headerlink\" title=\"特色：原型继承\"></a>特色：原型继承</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> father = &#123;</span><br><span class=\"line\">    f1: <span class=\"string\">'父属性'</span>,</span><br><span class=\"line\">    m1: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"父方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> son = <span class=\"built_in\">Object</span>.create(father);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(son.f1);  <span class=\"comment\">// 打印 父属性</span></span><br><span class=\"line\">son.m1();\t\t\t  <span class=\"comment\">// 打印 父方法</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>father 是父对象，son 去调用 .m1 或 .f1 时，自身对象没有，就到父对象找</li>\n<li>son 自己可以添加自己的属性和方法</li>\n<li>son 里有特殊属性 <code>__proto__</code> 代表它的父对象，js 术语： son 的原型对象</li>\n<li>不同浏览器对打印 son 的 <code>__proto__</code> 属性时显示不同<ul>\n<li>Edge 打印 console.dir(son) 显示 <code>[[Prototype]]</code></li>\n<li>Firefox 打印 console.dir(son) 显示 <code>&lt;prototype&gt;</code></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"特色：基于函数的原型继承\"><a href=\"#特色：基于函数的原型继承\" class=\"headerlink\" title=\"特色：基于函数的原型继承\"></a>特色：基于函数的原型继承</h5><p>出于方便的原因，js 又提供了一种基于函数的原型继承</p>\n<blockquote>\n<p><strong>函数职责</strong></p>\n<ol>\n<li><p>负责创建子对象，给子对象提供属性、方法，功能上相当于构造方法</p>\n</li>\n<li><p>函数有个特殊的属性 prototype，它就是函数创建的子对象的父对象</p>\n<p><strong>注意！</strong>名字有差异，这个属性的作用就是为新对象提供原型</p>\n</li>\n</ol>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cons</span>(<span class=\"params\">f2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建子对象(this), 给子对象提供属性和方法</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.f2 = f2;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.m2 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"子方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// cons.prototype 就是父对象</span></span><br><span class=\"line\">cons.prototype.f1 = <span class=\"string\">\"父属性\"</span>;</span><br><span class=\"line\">cons.prototype.m1 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"父方法\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配合 new 关键字，创建子对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> son = <span class=\"keyword\">new</span> cons(<span class=\"string\">\"子属性\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>子对象的 <code>__proto__</code> 就是函数的 <code>prototype</code> 属性</p>\n<h5 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h5><p>之前我们讲 http 请求格式时，讲过 json 这种数据格式，它的语法看起来与 js 对象非常相似，例如：</p>\n<p>一个 json 对象可以长这样：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>:<span class=\"string\">\"张三\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"age\"</span>:<span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一个 js 对象长这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"张三\"</span>,</span><br><span class=\"line\">    age:<span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么他们的区别在哪儿呢？我总结了这么几点</p>\n<ol>\n<li>本质不同<ul>\n<li>json 对象本质上是个字符串，它的职责是作为客户端和服务器之间传递数据的一种格式，它的属性只是样子货</li>\n<li>js 对象是切切实实的对象，可以有属性方法</li>\n</ul>\n</li>\n<li>语法细节不同<ul>\n<li>json 中只能有 null、true|false、数字、字符串（只有双引号）、对象、数组</li>\n<li>json 中不能有除以上的其它 js 对象的特性，如方法等</li>\n<li>json 中的属性必须用双引号引起来</li>\n</ul>\n</li>\n</ol>\n<p>json 字符串与 js 对象的转换</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">JSON</span>.parse(json字符串);  <span class=\"comment\">// 返回js对象</span></span><br><span class=\"line\"><span class=\"built_in\">JSON</span>.stringify(js对象);  <span class=\"comment\">// 返回json字符串</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态类型\"><a href=\"#动态类型\" class=\"headerlink\" title=\"动态类型\"></a>动态类型</h3><p>静态类型语言，如 Java，值有类型，变量也有类型、赋值给变量时，类型要相符</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">String b = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> c = <span class=\"string\">\"abc\"</span>;  <span class=\"comment\">// 错误</span></span><br></pre></td></tr></table></figure>\n\n<p>而 js 属于动态类型语言，值有类型，但变量没有类型，赋值给变量时，没要求</p>\n<p>例如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">100</span>;</span><br><span class=\"line\">b = <span class=\"string\">'abc'</span>;</span><br><span class=\"line\">b = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p>动态类型看起来比较灵活，但变量没有类型，会给后期维护带来困难，例如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// obj 的类型未知，必须根据不同类型做出相应的容错处理</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-运算符与表达式\"><a href=\"#2-运算符与表达式\" class=\"headerlink\" title=\"2. 运算符与表达式\"></a>2. 运算符与表达式</h2><ul>\n<li><code>+ - * / % **</code></li>\n<li><code>+= -= *= /= %= **=</code></li>\n<li><code>++ --</code></li>\n<li>位运算、移位运算</li>\n<li><code>== != &gt; &gt;= &lt; &lt;=</code></li>\n<li><code>=== !==</code> :star:</li>\n<li><code>&amp;&amp; || !</code> :star:</li>\n<li><code>?? ?.</code> :star:</li>\n<li><code>...</code> :star:</li>\n<li>解构赋值 :star:</li>\n</ul>\n<h3 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1) ===\"></a>1) ===</h3><p>严格相等运算符，用作逻辑判等</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> == <span class=\"number\">1</span>    \t<span class=\"comment\">// 返回 true </span></span><br><span class=\"line\"><span class=\"number\">1</span> == <span class=\"string\">'1'</span>\t<span class=\"comment\">// 返回 true，会先将右侧的字符串转为数字，再做比较</span></span><br><span class=\"line\"><span class=\"number\">1</span> === <span class=\"string\">'1'</span>\t<span class=\"comment\">// 返回 false，类型不等，直接返回 false</span></span><br></pre></td></tr></table></figure>\n\n<p>typeof 查看某个值的类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">1</span>\t<span class=\"comment\">// 返回 'number'</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">'1'</span>\t<span class=\"comment\">// 返回 'string'</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2) ||\"></a>2) ||</h3><p>需求，如果参数 n 没有传递，给它一个【男】</p>\n<p><strong>推荐</strong>做法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">n = <span class=\"string\">'男'</span></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可能的做法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        n = <span class=\"string\">'男'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还可能是这样</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    n = (n === <span class=\"literal\">undefined</span>) ? <span class=\"string\">'男'</span> : n;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一些老旧代码中可能的做法（不推荐）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    n = n || <span class=\"string\">'男'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>它的语法是</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">值<span class=\"number\">1</span> || 值<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<p>如果值1 是 Truthy，返回值1，如果值1 是 Falsy 返回值 2</p>\n<h3 id=\"3-与\"><a href=\"#3-与\" class=\"headerlink\" title=\"3) ?? 与 ?.\"></a>3) ?? 与 ?.</h3><h4 id><a href=\"#\" class=\"headerlink\" title=\"??\"></a>??</h4><p>需求，如果参数 n 没有传递或是 null，给它一个【男】</p>\n<p>如果用传统办法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n === <span class=\"literal\">undefined</span> || n === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        n = <span class=\"string\">'男'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用 ??</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    n = n ?? <span class=\"string\">'男'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>语法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">值1 ?? 值2</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>值1 是 nullish，返回值2</li>\n<li>值1 不是 nullish，返回值1</li>\n</ul>\n<h4 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"?.\"></a>?.</h4><p>需求，函数参数是一个对象，可能包含有子属性</p>\n<p>例如，参数可能是</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stu1 = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"张三\"</span>,</span><br><span class=\"line\">    address: &#123;</span><br><span class=\"line\">        city: <span class=\"string\">'北京'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> stu2 = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"李四\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> stu3 = &#123;</span><br><span class=\"line\">    name:<span class=\"string\">\"李四\"</span>,</span><br><span class=\"line\">    address: <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在要访问子属性（有问题）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">stu</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(stu.address.city)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在希望当某个属性是 nullish 时，短路并返回 undefined，可以用 ?.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">stu</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(stu.address?.city)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用传统办法 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">stu</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(stu.address === <span class=\"literal\">undefined</span> || stu.address === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"literal\">undefined</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(stu.address.city)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-…\"><a href=\"#4-…\" class=\"headerlink\" title=\"4) …\"></a>4) …</h3><p>展开运算符</p>\n<p>作用1：打散数组，把元素传递给多个参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a,b,c</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a,b,c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需求，把数组元素依次传递给函数参数</p>\n<p>传统写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(arr[<span class=\"number\">0</span>],arr[<span class=\"number\">1</span>],arr[<span class=\"number\">2</span>]);\t\t<span class=\"comment\">// 输出 1,2,3</span></span><br></pre></td></tr></table></figure>\n\n<p>展开运算符写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(...arr);\t\t\t\t\t<span class=\"comment\">// 输出 1,2,3</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>打散可以理解为【去掉了】数组外侧的中括号，只剩下数组元素</li>\n</ul>\n<p>作用2：复制数组或对象</p>\n<p>数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [...arr1];\t\t<span class=\"comment\">// 复制数组</span></span><br></pre></td></tr></table></figure>\n\n<p>对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'张三'</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;...obj1&#125;;\t\t<span class=\"comment\">// 复制对象</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：展开运算符复制属于浅拷贝，例如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> o1 = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'张三'</span>, <span class=\"attr\">address</span>: &#123;<span class=\"attr\">city</span>: <span class=\"string\">'北京'</span>&#125; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> o2 = &#123;...o1&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>作用3：合并数组或对象</p>\n<p>合并数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> a2 = [<span class=\"number\">3</span>,<span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b1 = [...a1,...a2];\t\t<span class=\"comment\">// 结果 [1,2,3,4]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b2 = [...a2,<span class=\"number\">5</span>,...a1]\t<span class=\"comment\">// 结果 [3,4,5,1,2]</span></span><br></pre></td></tr></table></figure>\n\n<p>合并对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> o1 = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'张三'</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> o2 = &#123;<span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> o3 = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'李四'</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> n1 = &#123;...o1, ...o2&#125;;\t<span class=\"comment\">// 结果 &#123;name:'张三',age:18&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> n2 = &#123;...o3, ...o2, ...o1&#125;; <span class=\"comment\">// 结果&#123;name:'李四',age:18&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>复制对象时出现同名属性，后面的会覆盖前面的</li>\n</ul>\n<h3 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5) [] {}\"></a>5) [] {}</h3><p>解构赋值</p>\n<h4 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"[]\"></a>[]</h4><p>用在声明变量时</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = arr;\t<span class=\"comment\">// 结果 a=1, b=2, c=3</span></span><br></pre></td></tr></table></figure>\n\n<p>用在声明参数时</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">[a,b,c]</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a,b,c) \t<span class=\"comment\">// 结果 a=1, b=2, c=3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(arr);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"{}\"></a>{}</h4><p>用在声明变量时</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"张三\"</span>, <span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;name,age&#125; = obj;\t<span class=\"comment\">// 结果 name=张三, age=18</span></span><br></pre></td></tr></table></figure>\n\n<p>用在声明参数时</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>:<span class=\"string\">\"张三\"</span>, <span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">&#123;name, age&#125;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name, age); <span class=\"comment\">// 结果 name=张三, age=18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(obj)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-控制语句\"><a href=\"#3-控制语句\" class=\"headerlink\" title=\"3. 控制语句\"></a>3. 控制语句</h2><ul>\n<li><code>if ... else</code></li>\n<li><code>switch</code></li>\n<li><code>while</code></li>\n<li><code>do ... while</code></li>\n<li><code>for</code> </li>\n<li><code>for ... in</code> :star:</li>\n<li><code>for ... of</code> :star:</li>\n<li><code>try ... catch</code> :star:</li>\n</ul>\n<h3 id=\"1-for-in\"><a href=\"#1-for-in\" class=\"headerlink\" title=\"1) for in\"></a>1) for in</h3><p>主要用来遍历对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> father = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'张三'</span>, <span class=\"attr\">age</span>:<span class=\"number\">18</span>, <span class=\"attr\">study</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> n <span class=\"keyword\">in</span> father) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其中 const n 代表遍历出来的属性名</li>\n<li>注意1：方法名也能被遍历出来（它其实也算一种特殊属性）</li>\n<li>注意2：遍历子对象时，父对象的属性会跟着遍历出来</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> son = <span class=\"built_in\">Object</span>.create(father);</span><br><span class=\"line\">son.sex = <span class=\"string\">\"男\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> n <span class=\"keyword\">in</span> son) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意3：在 for in 内获取属性值，要使用 [] 语法，而不能用 . 语法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> n <span class=\"keyword\">in</span> son) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n, son[n]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-for-of\"><a href=\"#2-for-of\" class=\"headerlink\" title=\"2) for of\"></a>2) for of</h3><p>主要用来遍历数组，也可以是其它可迭代对象，如 Map，Set 等</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> i <span class=\"keyword\">of</span> a1) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a2 = [</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'张三'</span>, <span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'李四'</span>, <span class=\"attr\">age</span>:<span class=\"number\">20</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">name</span>:<span class=\"string\">'王五'</span>, <span class=\"attr\">age</span>:<span class=\"number\">22</span>&#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> obj <span class=\"keyword\">of</span> a2) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(obj.name, obj.age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> &#123;name,age&#125; <span class=\"keyword\">of</span> a2) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name, age);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-try-catch\"><a href=\"#3-try-catch\" class=\"headerlink\" title=\"3) try catch\"></a>3) try catch</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stu1 = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'张三'</span>, <span class=\"attr\">age</span>:<span class=\"number\">18</span>, <span class=\"attr\">address</span>: &#123;<span class=\"attr\">city</span>:<span class=\"string\">'北京'</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> stu2 = &#123;<span class=\"attr\">name</span>:<span class=\"string\">'张三'</span>, <span class=\"attr\">age</span>:<span class=\"number\">18</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">stu</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(stu.address.city)   </span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'出现了异常'</span>, e.message)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'finally'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-API\"><a href=\"#4-API\" class=\"headerlink\" title=\"4. API\"></a>4. API</h2><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><h4 id=\"1-安装-nvm\"><a href=\"#1-安装-nvm\" class=\"headerlink\" title=\"1) 安装 nvm\"></a>1) 安装 nvm</h4><p>nvm 即 (node version manager)，好处是方便切换 node.js 版本</p>\n<p>安装注意事项</p>\n<ol>\n<li>要卸载掉现有的 nodejs</li>\n<li>提示选择 nvm 和 nodejs 目录时，一定要避免目录中出现空格</li>\n<li>选用【以管理员身份运行】cmd 程序来执行 nvm 命令</li>\n<li>首次运行前设置好国内镜像地址</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm node_mirror http://npm.taobao.org/mirrors/node/</span><br><span class=\"line\">nvm npm_mirror https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure>\n\n<p>首先查看有哪些可用版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm list available</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">|   CURRENT    |     LTS      |  OLD STABLE  | OLD UNSTABLE |</span><br><span class=\"line\">|--------------|--------------|--------------|--------------|</span><br><span class=\"line\">|    18.7.0    |   16.16.0    |   0.12.18    |   0.11.16    |</span><br><span class=\"line\">|    18.6.0    |   16.15.1    |   0.12.17    |   0.11.15    |</span><br><span class=\"line\">|    18.5.0    |   16.15.0    |   0.12.16    |   0.11.14    |</span><br><span class=\"line\">|    18.4.0    |   16.14.2    |   0.12.15    |   0.11.13    |</span><br><span class=\"line\">|    18.3.0    |   16.14.1    |   0.12.14    |   0.11.12    |</span><br><span class=\"line\">|    18.2.0    |   16.14.0    |   0.12.13    |   0.11.11    |</span><br><span class=\"line\">|    18.1.0    |   16.13.2    |   0.12.12    |   0.11.10    |</span><br><span class=\"line\">|    18.0.0    |   16.13.1    |   0.12.11    |    0.11.9    |</span><br><span class=\"line\">|    17.9.1    |   16.13.0    |   0.12.10    |    0.11.8    |</span><br><span class=\"line\">|    17.9.0    |   14.20.0    |    0.12.9    |    0.11.7    |</span><br><span class=\"line\">|    17.8.0    |   14.19.3    |    0.12.8    |    0.11.6    |</span><br><span class=\"line\">|    17.7.2    |   14.19.2    |    0.12.7    |    0.11.5    |</span><br><span class=\"line\">|    17.7.1    |   14.19.1    |    0.12.6    |    0.11.4    |</span><br><span class=\"line\">|    17.7.0    |   14.19.0    |    0.12.5    |    0.11.3    |</span><br><span class=\"line\">|    17.6.0    |   14.18.3    |    0.12.4    |    0.11.2    |</span><br><span class=\"line\">|    17.5.0    |   14.18.2    |    0.12.3    |    0.11.1    |</span><br><span class=\"line\">|    17.4.0    |   14.18.1    |    0.12.2    |    0.11.0    |</span><br><span class=\"line\">|    17.3.1    |   14.18.0    |    0.12.1    |    0.9.12    |</span><br><span class=\"line\">|    17.3.0    |   14.17.6    |    0.12.0    |    0.9.11    |</span><br><span class=\"line\">|    17.2.0    |   14.17.5    |   0.10.48    |    0.9.10    |</span><br></pre></td></tr></table></figure>\n\n<p>建议安装 LTS（长期支持版）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install 16.16.0</span><br><span class=\"line\">nvm install 14.20.0</span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>nvm list</code> 会列出已安装版本</p>\n<p>切换到 16.16.0</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use 16.16.0</span><br></pre></td></tr></table></figure>\n\n<p>切换到 14.20.0</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use 14.20.0</span><br></pre></td></tr></table></figure>\n\n<p>安装后 nvm 自己的环境变量会自动添加，但可能需要手工添加 nodejs 的 PATH 环境变量</p>\n<h4 id=\"2-检查-npm\"><a href=\"#2-检查-npm\" class=\"headerlink\" title=\"2) 检查 npm\"></a>2) 检查 npm</h4><p>npm 是 js 的包管理器，就类似于 java 界的 maven，要确保它使用的是国内镜像</p>\n<p>检查镜像</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm get registry</span><br></pre></td></tr></table></figure>\n\n<p>如果返回的不是 <code>https://registry.npm.taobao.org/</code>，需要做如下设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-搭建前端服务器\"><a href=\"#3-搭建前端服务器\" class=\"headerlink\" title=\"3) 搭建前端服务器\"></a>3) 搭建前端服务器</h4><p>新建一个保存项目的 client 文件夹，进入文件夹执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install express --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>修改 package.json 文件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"module\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"express\"</span>: <span class=\"string\">\"^4.18.1\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其中 devDependencies 是 npm install –save-dev 添加的</li>\n</ul>\n<p>编写 main.js 代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> express <span class=\"keyword\">from</span> <span class=\"string\">'express'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express()</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(express.static(<span class=\"string\">'./'</span>))</span><br><span class=\"line\">app.listen(<span class=\"number\">7070</span>)</span><br></pre></td></tr></table></figure>\n\n<p>执行 js 代码（运行前端服务器）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node main.js</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"前端案例\"><a href=\"#前端案例\" class=\"headerlink\" title=\"前端案例\"></a>前端案例</h3><p>初步效果</p>\n<p><img src=\"https://s1.ax1x.com/2022/10/21/xcKwEF.png\" alt=\"image-20220812103323220\"></p>\n<p>架构</p>\n<p><img src=\"https://s1.ax1x.com/2022/10/21/xcKNuV.png\" alt=\"image-20220812103219916\"></p>\n<ul>\n<li>前端只有静态页面，使用 Express 服务器</li>\n<li>后端使用 Tomcat 服务器，通过 SpringBoot、MyBatis 等框架获取数据库数据</li>\n</ul>\n<h4 id=\"1-查找元素\"><a href=\"#1-查找元素\" class=\"headerlink\" title=\"1) 查找元素\"></a>1) 查找元素</h4><ul>\n<li>document.getElementById - 根据 id 值查找一个元素</li>\n<li>[document|元素].querySelector - 根据选择器查找第一个匹配元素</li>\n<li>[document|元素].querySelectorAll - 根据选择器查找所有匹配元素</li>\n</ul>\n<p>例如，有下面的 html 代码</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span>学生列表<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"thead\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row bold\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>编号<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>姓名<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>性别<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>年龄<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tbody\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>张三<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>男<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>18<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.title'</span>); <span class=\"comment\">// 找到 &lt;div class=\"title\"&gt;学生列表&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.col'</span>); <span class=\"comment\">// 找到 &lt;div class=\"col\"&gt;编号&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'.col'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  找到的是一个集合</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;div class=\"col\"&gt;编号&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;div class=\"col\"&gt;姓名&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;div class=\"col\"&gt;性别&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;div class=\"col\"&gt;年龄&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;div class=\"col\"&gt;1&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;div class=\"col\"&gt;张三&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;div class=\"col\"&gt;男&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;div class=\"col\"&gt;18&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> thead = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.thead'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 只在 thead 元素范围内找</span></span><br><span class=\"line\">thead.querySelectorAll(<span class=\"string\">'.col'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  找到的是一个集合</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;div class=\"col\"&gt;编号&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;div class=\"col\"&gt;姓名&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;div class=\"col\"&gt;性别&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  &lt;div class=\"col\"&gt;年龄&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p>根据 id 属性查找既可以用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"id值\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>也可以用 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#id值\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-修改元素内容\"><a href=\"#2-修改元素内容\" class=\"headerlink\" title=\"2) 修改元素内容\"></a>2) 修改元素内容</h4><ul>\n<li>元素.innerHTML</li>\n<li>元素.textContent</li>\n</ul>\n<p>例如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.title'</span>).innerHTML = <span class=\"string\">'侠客列表'</span></span><br></pre></td></tr></table></figure>\n\n<p>效果</p>\n<p><img src=\"https://s1.ax1x.com/2022/10/21/xcKUBT.png\" alt=\"image-20220812161003958\"></p>\n<p>innerHTML  会解析内容中的标签，例如</p>\n<p><img src=\"https://s1.ax1x.com/2022/10/21/xcK0N4.png\" alt=\"image-20220812161137912\"></p>\n<p>textContext 不会解析内容中的标签</p>\n<p><img src=\"https://s1.ax1x.com/2022/10/21/xcKaHU.png\" alt=\"image-20220812161341825\"></p>\n<p>给 innerHTML 或 textContent 赋值空串，可以实现清空标签内容的效果</p>\n<h4 id=\"3-利用模板\"><a href=\"#3-利用模板\" class=\"headerlink\" title=\"3) 利用模板\"></a>3) 利用模板</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span>学生列表<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"thead\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row bold\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>编号<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>姓名<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>性别<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>年龄<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tbody\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">\"tp\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>xx<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>xx<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>xx<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col\"</span>&gt;</span>xx<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 将来这些数据从 java 端返回</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> array = [</span></span><br><span class=\"line\"><span class=\"javascript\">        &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">name</span>: <span class=\"string\">'张三'</span>, <span class=\"attr\">sex</span>: <span class=\"string\">'男'</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span> &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">name</span>: <span class=\"string\">'李四'</span>, <span class=\"attr\">sex</span>: <span class=\"string\">'女'</span>, <span class=\"attr\">age</span>: <span class=\"number\">17</span> &#125;</span></span><br><span class=\"line\">    ];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> tp = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"tp\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> row = tp.content;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> [c1,c2,c3,c4] = row.querySelectorAll(<span class=\"string\">\".col\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> tbody = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.tbody'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> &#123;id,name,sex,age&#125; <span class=\"keyword\">of</span> array) &#123;</span></span><br><span class=\"line\">        c1.textContent = id;</span><br><span class=\"line\">        c2.textContent = name;</span><br><span class=\"line\">        c3.textContent = sex;</span><br><span class=\"line\">        c4.textContent = age;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 复制元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">const</span> newRow = <span class=\"built_in\">document</span>.importNode(row, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 建立父子关系，左边父，右边子</span></span></span><br><span class=\"line\">        tbody.appendChild(newRow);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-Fetch-API\"><a href=\"#4-Fetch-API\" class=\"headerlink\" title=\"4) Fetch API\"></a>4) Fetch API</h4><p>Fetch API 可以用来获取远程数据，它有两种方式接收结果，同步方式与异步方式</p>\n<p>格式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(url, options) <span class=\"comment\">// 返回 Promise</span></span><br></pre></td></tr></table></figure>\n\n<p>同步方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> 结果 = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span></span><br><span class=\"line\"><span class=\"comment\">// 后续代码</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>await 关键字必须在一个标记了 async 的 function 内来使用</li>\n<li>后续代码不会在结果返回前执行</li>\n</ul>\n<p>异步方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span></span><br><span class=\"line\">\t.then(结果 =&gt; &#123; ... &#125;)</span><br><span class=\"line\"><span class=\"comment\">// 后续代码</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>后续代码不必等待结果返回就可以执行</li>\n</ul>\n<p>例：</p>\n<p>在 express 服务器上有 students.json 文件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123; <span class=\"attr\">\"id\"</span>: <span class=\"number\">1</span>, <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"张三\"</span>, <span class=\"attr\">\"sex\"</span>: <span class=\"string\">\"男\"</span>, <span class=\"attr\">\"age\"</span>: <span class=\"number\">18</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">\"id\"</span>: <span class=\"number\">2</span>, <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"李四\"</span>, <span class=\"attr\">\"sex\"</span>: <span class=\"string\">\"女\"</span>, <span class=\"attr\">\"age\"</span>: <span class=\"number\">17</span> &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>现在用 fetch api 获取这些数据，并展示</p>\n<p>同步方式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findStudents</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">try</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 获取响应对象</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> resp = <span class=\"keyword\">await</span> fetch(<span class=\"string\">'students.json'</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 获取响应体, 按json格式转换为js数组</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> array = <span class=\"keyword\">await</span> resp.json();</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 显示数据</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> tp = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"tp\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> row = tp.content;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> [c1,c2,c3,c4] = row.querySelectorAll(<span class=\"string\">\".col\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> tbody = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.tbody'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> &#123;id,name,sex,age&#125; <span class=\"keyword\">of</span> array) &#123;</span></span><br><span class=\"line\">                c1.textContent = id;</span><br><span class=\"line\">                c2.textContent = name;</span><br><span class=\"line\">                c3.textContent = sex;</span><br><span class=\"line\">                c4.textContent = age;</span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">// 复制元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">const</span> newRow = <span class=\"built_in\">document</span>.importNode(row, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">// 建立父子关系</span></span></span><br><span class=\"line\">                tbody.appendChild(newRow);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"><span class=\"javascript\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">console</span>.log(e);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    findStudents()</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>fetch(‘students.json’) 内部会发送请求，但响应结果不能立刻返回，因此 await 就是等待响应结果返回</li>\n<li>其中 resp.json() 也不是立刻能返回结果，它返回的也是 Promise 对象，也要配合 await 取结果</li>\n</ul>\n<p>异步方式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    fetch(<span class=\"string\">'students.json'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">        .then( <span class=\"function\"><span class=\"params\">resp</span> =&gt;</span> resp.json() )</span></span><br><span class=\"line\"><span class=\"javascript\">        .then( <span class=\"function\"><span class=\"params\">array</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        \t<span class=\"comment\">// 显示数据</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> tp = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"tp\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> row = tp.content;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> [c1,c2,c3,c4] = row.querySelectorAll(<span class=\"string\">\".col\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">const</span> tbody = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.tbody'</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">const</span> &#123;id,name,sex,age&#125; <span class=\"keyword\">of</span> array) &#123;</span></span><br><span class=\"line\">                c1.textContent = id;</span><br><span class=\"line\">                c2.textContent = name;</span><br><span class=\"line\">                c3.textContent = sex;</span><br><span class=\"line\">                c4.textContent = age;</span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">// 复制元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">const</span> newRow = <span class=\"built_in\">document</span>.importNode(row, <span class=\"literal\">true</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">// 建立父子关系</span></span></span><br><span class=\"line\">                tbody.appendChild(newRow);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"><span class=\"javascript\">        .catch( <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"built_in\">console</span>.log(e) )</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第一个 then 是在响应返回后，才会调用它里面的箭头函数，箭头函数参数即 resp  响应对象</li>\n<li>第二个 then 是在 json 解析完成后，才会调用它里面的箭头函数，箭头函数参数即解析结果（本例是 array 数组）</li>\n<li>上一个 then 返回的是 Promise 对象时，才能链式调用下一个 then</li>\n</ul>\n<h5 id=\"跨域问题\"><a href=\"#跨域问题\" class=\"headerlink\" title=\"跨域问题\"></a>跨域问题</h5><p><img src=\"https://s1.ax1x.com/2022/10/21/xcKB4J.png\" alt=\"image-20220814105448882\"></p>\n<ul>\n<li>只要协议、主机、端口之一不同，就不同源，例如<ul>\n<li><a href=\"http://localhost:7070/a\" target=\"_blank\" rel=\"noopener\">http://localhost:7070/a</a> 和 <a href=\"https://localhost:7070/b\" target=\"_blank\" rel=\"noopener\">https://localhost:7070/b</a> 就不同源</li>\n</ul>\n</li>\n<li>同源检查是浏览器的行为，而且只针对 fetch、xhr 请求<ul>\n<li>如果是其它客户端，例如 java http client，postman，它们是不做同源检查的</li>\n<li>通过表单提交、浏览器直接输入 url 地址这些方式发送的请求，也不会做同源检查</li>\n</ul>\n</li>\n<li>更多相关知识请参考<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS\" target=\"_blank\" rel=\"noopener\">跨源资源共享（CORS） - HTTP | MDN (mozilla.org)</a></li>\n</ul>\n</li>\n</ul>\n<p>请求响应头解决</p>\n<p><img src=\"https://s1.ax1x.com/2022/10/21/xcKrC9.png\" alt=\"image-20220814144040703\"></p>\n<ul>\n<li>fetch 请求跨域，会携带一个 Origin 头，代表【发请求的资源源自何处】，目标通过它就能辨别是否发生跨域<ul>\n<li>我们的例子中：student.html 发送 fetch 请求，告诉 tomcat，我源自 localhost:7070</li>\n</ul>\n</li>\n<li>目标资源通过返回 Access-Control-Allow-Origin 头，告诉浏览器【允许哪些源使用此响应】<ul>\n<li>我们的例子中：tomcat 返回 fetch 响应，告诉浏览器，这个响应允许源自 localhost:7070 的资源使用</li>\n</ul>\n</li>\n</ul>\n<p>代理解决</p>\n<p><img src=\"https://s1.ax1x.com/2022/10/21/xcKTgI.png\" alt=\"image-20220814161532141\"></p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install http-proxy-middleware --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>在 express 服务器启动代码中加入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;createProxyMiddleware&#125; <span class=\"keyword\">from</span> <span class=\"string\">'http-proxy-middleware'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">'/api'</span>, createProxyMiddleware(&#123; <span class=\"attr\">target</span>: <span class=\"string\">'http://localhost:8080'</span>, <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span> &#125;));</span><br></pre></td></tr></table></figure>\n\n<p>fetch 代码改为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resp = <span class=\"keyword\">await</span> fetch(<span class=\"string\">'http://localhost:7070/api/students'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>或</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resp = <span class=\"keyword\">await</span> fetch(<span class=\"string\">'/api/students'</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-模块化\"><a href=\"#5-模块化\" class=\"headerlink\" title=\"5) 模块化\"></a>5) 模块化</h4><p>单个导出 const、let、function</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'c'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一齐导出</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'c'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;a,b,c&#125;</span><br></pre></td></tr></table></figure>\n\n<p>导出 default，只能有一个</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'c'</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> b;</span><br></pre></td></tr></table></figure>\n\n<p>import 语法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">import</span> 语句</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>import 需要遵循同源策略</li>\n</ul>\n<p>整个导入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"built_in\">module</span> <span class=\"keyword\">from</span> <span class=\"string\">'/1.js'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">module</span>.a)\t\t<span class=\"comment\">// 输出10</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">module</span>.b)\t\t<span class=\"comment\">// 输出20</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.c()\t\t\t\t\t<span class=\"comment\">// 输出c</span></span><br></pre></td></tr></table></figure>\n\n<p>单个导入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;a,c&#125; <span class=\"keyword\">from</span> <span class=\"string\">'/1.js'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)\t\t\t\t<span class=\"comment\">// 输出10</span></span><br><span class=\"line\">c()\t\t\t\t\t\t\t<span class=\"comment\">// 输出c</span></span><br></pre></td></tr></table></figure>\n\n<p>导入默认</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> x <span class=\"keyword\">from</span> <span class=\"string\">'/1.js'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x)\t\t\t\t<span class=\"comment\">// 输出20</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"TS知识点总结","date":"2022-11-02T16:00:00.000Z","_content":"\n# TypeScript\n\n### 1) 动态类型的问题\n\n前面讲过 js 属于动态类型语言，例如\n\n```js\nfunction test(obj) {    \n}\n```\n\nobj 可能只是个字符串\n\n```js\ntest('hello, world')\n```\n\nobj 也有可能是个函数\n\n```js\ntest(()=>console.log('hello, world'))\n```\n\nobj 类型不确定，就给后期使用者带来了麻烦，一旦参数传不对，代码就崩溃了\n\n\n\n动态类型意味着\n\n* 运行代码时才知道发生什么 (running the code to see what happens)\n\n静态类型意味着\n\n* 在代码运行前，就对它的行为做出预测 (make predications about what code is expected before it runs)\n\n\n\n下面的 typescript 代码，就在代码运行前对参数加入了约束限制\n\n```typescript\nfunction test(msg : string) {\n}\n```\n\n* 限制了参数只能做 string 那些事\n\n```typescript\nfunction test(msg : Function) {\n  msg()\n}\n```\n\n* 限制了参数只能做函数那些事\n\n\n\n### 2) 入门\n\n安装 typescript 编译器\n\n```cmd\nnpm install -g typescript\n```\n\n编写 ts 代码\n\n```typescript\nfunction hello(msg: string) {\n  console.log(msg)\n}\n\nhello('hello,world')\n```\n\n执行 tsc 编译命令\n\n```cmd\ntsc xxx.ts\n```\n\n编译生成 js 代码，编译后进行了类型擦除\n\n```js\nfunction hello(msg) {\n    console.log(msg);\n}\nhello('hello,world');\n```\n\n\n\n再来一个例子，用 interface 定义用户类型\n\n```ts\ninterface User {\n  name: string,\n  age: number\n}\n\nfunction test(u: User): void {\n  console.log(u.name)\n  console.log(u.age)\n}\n\ntest({ name: 'zhangs', age: 18 })\n```\n\n编译后\n\n```js\nfunction test(u) {\n    console.log(u.name);\n    console.log(u.age);\n}\ntest({ name: 'zhangs', age: 18 });\n```\n\n\n\n可见，typescript 属于编译时实施类型检查（静态类型）的技术\n\n\n\n### 3) 类型\n\n| 类型        | 例                                    | 备注                         |\n| ----------- | ------------------------------------- | ---------------------------- |\n| 字符串类型  | string                                |                              |\n| 数字类型    | number                                |                              |\n| 布尔类型    | boolean                               |                              |\n| 数组类型    | number[],string[], boolean[] 依此类推 |                              |\n| 任意类型    | any                                   | 相当于又回到了没有类型的时代 |\n| 复杂类型    | type 与 interface                     |                              |\n| 函数类型    | () => void                            | 对函数的参数和返回值进行说明 |\n| 字面量类型  | \"a\"\\|\"b\"\\|\"c\"                         | 限制变量或参数的取值         |\n| nullish类型 | null 与 undefined                     |                              |\n| 泛型        | `<T>`，`<T extends 父类型>`           |                              |\n\n\n\n#### 标注位置\n\n##### 标注变量\n\n```typescript\nlet message: string = 'hello,world'\n```\n\n* 一般可以省略，因为可以根据后面的字面量推断出前面变量类型\n\n```typescript\nlet message = 'hello,world'\n```\n\n\n\n##### 标注参数\n\n```typescript\nfunction greet(name: string) {\n    \n}\n```\n\n很多时候，都能够推断出参数类型\n\n```typescript\nconst names = ['Alice', 'Bob', 'Eve']\nconst lowercaseNames = names.map((e: string) => e.toLowerCase())\n```\n\n* 可以用类型推断，推断出 e 是 string 类型\n\n\n\n##### 标注返回值\n\n```typescript\nfunction add(a: number, b: number) : number {\n    return a + b\n}\n```\n\n* 一般也可以省略，因为可以根据返回值做类型推断\n\n\n\n#### 复杂类型\n\n##### type\n\n```typescript\ntype Cat = {\n  name: string,\n  age: number\n}\n\nconst c1: Cat = { name: '小白', age: 1 }\nconst c2: Cat = { name: '小花' }\t\t\t\t\t  // 错误: 缺少 age 属性\nconst c3: Cat = { name: '小黑', age: 1, sex: '公' } // 错误: 多出 sex 属性\n```\n\n\n\n##### interface\n\n```typescript\ninterface Cat {\n  name: string,\n  age: number\n}\n\nconst c1: Cat = { name: '小白', age: 1 }\nconst c2: Cat = { name: '小花' }\t\t\t\t\t  // 错误: 缺少 age 属性\nconst c3: Cat = { name: '小黑', age: 1, sex: '公' } // 错误: 多出 sex 属性\n```\n\n\n\n##### 可选属性\n\n如果需要某个属性可选，可以用下面的语法\n\n```typescript\ninterface Cat {\n  name: string,\n  age?: number\n}\n\nconst c1: Cat = { name: '小白', age: 1 }\nconst c2: Cat = { name: '小花' }\t\t\t\t\t  // 正确: age 属性可选\n```\n\n* 可选属性要注意处理 undefined 值\n\n\n\n##### 鸭子类型\n\n```typescript\ninterface Cat {\n  name: string\n}\n\nfunction test(cat: Cat) {\n  console.log(cat.name)\n}\n\nconst c1 = { name: '小白', age: 1 } \ntest(c1)\n```\n\n* const c1 并没有声明类型为 Cat，但它与 Cat 类型有一样的属性，也可以被当作是 Cat 类型\n\n\n\n#### 方法类型\n\n```typescript\ninterface Api {\n  foo(): void,\n  bar(str: string): string\n}\n\nfunction test(api: Api) {\n  api.foo()\n  console.log(api.bar('hello'))\n}\n\ntest({\n  foo() { console.log('ok') },\n  bar(str: string) { return str.toUpperCase() }\n})\n```\n\n\n\n#### 字面量类型\n\n```typescript\nfunction printText(s: string, alignment: \"left\" | \"right\" | \"center\") {\n  console.log(s, alignment)\n}\n\nprintText('hello', 'left')\nprintText('hello', 'aaa') // 错误: 取值只能是 left | right | center\n```\n\n\n\n#### nullish 类型\n\n```typescript\nfunction test(x?: string | null) {\n  console.log(x?.toUpperCase())\n}\n\ntest('aaa')\ntest(null)\ntest()\n```\n\n* x?: string | null 表示可能是 undefined 或者是 string 或者是 null\n\n\n\n#### 泛型\n\n下面的几个类型声明显然有一定的相似性\n\n```typescript\ninterface RefString {\n  value: string\n}\n\ninterface RefNumber {\n  value: number\n}\n\ninterface RefBoolean {\n  value: boolean\n}\n\nconst r1: RefString = { value: 'hello' }\nconst r2: RefNumber = { value: 123 }\nconst r3: RefBoolean = { value: true }\n```\n\n可以改进为\n\n```typescript\ninterface Ref<T> {\n  value: T\n}\n\nconst r1: Ref<string> = { value: 'hello' }\nconst r2: Ref<number> = { value: 123 }\nconst r3: Ref<boolean> = { value: true }\n```\n\n* 泛型的要点就是 `<类型参数>`，把【类型】也当作一个变化的要素，像参数一样传递过来，这样就可以派生出结构相似的新类型\n\n\n\n函数定义也支持泛型\n\n```typescript\nfunction ref<T>(n: T): Ref<T> {\n  return { value: n }\n}\n\nconst v1 = ref(\"hello\"); \t// Ref<string>\nconst v2 = ref(123.3333);\t// Ref<number>\n\nv1.value.toLocaleLowerCase()\nv2.value.toFixed(2)\n```\n\n\n\n### 4) 意义\n\n#### 更好理解框架\n\n现在越来越多的前端框架采用 typescript，如果懂 typescript 语法，可以更好地阅读框架代码\n\n以 Map 为例\n\n```typescript\nconst map = new Map<string, string>()\nmap\n  .set(\"a\", \"b\")\n  .set(\"c\", \"d\")\n\nmap.forEach((value,key,m)=>{\n  console.log(value, key)\n})\n```\n\n* 注意编译需要 `tsc --target es6 .\\xxx.ts`\n\n\n\n#### 更好的提示\n\n例如，从服务器返回的一段 json，如果不用 typescript，则编辑器也不能给出准确的提示\n\n```typescript\ninterface User {\n  name: string,\n  age: number\n}\n\nconst user: User = JSON.parse(`{ \"name\":\"张三\", \"age\":18 }`)\n```\n\n\n\n### 5) 类\n\n> 关于 TypeScript 与 JavaScript 中的类语法不是重点，class 相关语法只是起到辅助作用，更重要的是前面讲的 interface\n\n#### 基本语法\n\n```typescript\nclass User {\n    name: string;\n    \n    constructor(name: string) {\n        this.name = name\n    }\n}\n\nconst u = new User('张三')\n```\n\n其实会被编译成这个样子（默认 --target=es3）\n\n```js\nvar User = /** @class */ (function () {\n    function User(name) {\n        this.name = name;\n    }\n    return User;\n}());\nvar u = new User('张三');\n```\n\n所以 js 中的 class，并不等价于 java 中的 class，它还是基于原型实现的，原理参考第二章（036、037）\n\n\n\n#### 只读属性\n\n```typescript\nclass User {\n  readonly name: string;\n  \n  constructor(name: string) {\n      this.name = name\n  }\n}\n\nconst u = new User('张三')\nu.name = '李四'\t\t\t\t// 编译错误\n```\n\n* readonly 是 typescript 特有的，表示该属性只读\n\n\n\n#### 方法\n\n```typescript\nclass User {\n  readonly name: string;\n  \n  constructor(name: string) {\n      this.name = name\n  }\n\n  study() {\n    console.log(`[${this.name}]正在学习`)\n  }\n}\n\nconst u = new User('张三')\nu.study()\n```\n\n\n\n#### get，set\n\n```typescript\nclass User {\n  _name: string;\n\n  constructor(name: string) {\n    this._name = name\n  }\n\n  get name() {\n    return this._name\n  }\n\n  set name(name: string) {\n    this._name = name\n  }\n}\n\nconst u = new User('张三')\nconsole.log(u.name)\nu.name = '李四'\nconsole.log(u.name)\n```\n\n* 注意，需要在编译时加上 `tsc --target es6 .\\xxx.ts` 选项\n* es6 等价于 es2015，再此之上还有 es2016 ... es2022\n\n\n\n#### 类与接口\n\n```typescript\ninterface User {\n  name: string\n  study(course: string): void\n}\n\nclass UserImpl implements User {\n  name: string;\n  constructor(name: string) {\n    this.name = name\n  }\n  study(course: string) {\n    console.log(`[${this.name}]正在学习[${course}]`)\n  }\n  foo() { }\n}\n\nconst user: User = new UserImpl('张三')\nuser.study('Typescript')\nuser.foo() // 错误，必须是接口中定义的方法\n```\n\n\n\n#### 继承与接口\n\n```typescript\ninterface Flyable {\n  fly(): void\n}\n\nclass Animal {\n  name: string;\n  constructor(name: string) {\n    this.name = name\n  }\n}\n\nclass Bird extends Animal implements Flyable {\n  fly() {\n    console.log(`${this.name}在飞翔`)\n  }\n}\n\nconst b: Flyable & Animal = new Bird(\"小花\")\nb.fly()\n```\n\n* Flyable & Animal 表示变量是 flyable 类型，同时也是 Animal 类型\n\n\n\n#### 方法重写\n\n```typescript\nclass Father {\n  study(): void {\n    console.log(`father study`)\n  }\n}\n\nclass Son extends Father {  \n  study(): void {\n    super.study()\n    console.log(`son study`)\n  }\n}\n\nconst f: Father = new Son()\nf.study()\n```","source":"_posts/09_Java程序员要掌握的前端-ts.md","raw":"---\ntitle:  TS知识点总结\ntags: [编程,学习,Typescript,前端]\ncategories: [Typescript]\ndate: 2022-11-3\n\n---\n\n# TypeScript\n\n### 1) 动态类型的问题\n\n前面讲过 js 属于动态类型语言，例如\n\n```js\nfunction test(obj) {    \n}\n```\n\nobj 可能只是个字符串\n\n```js\ntest('hello, world')\n```\n\nobj 也有可能是个函数\n\n```js\ntest(()=>console.log('hello, world'))\n```\n\nobj 类型不确定，就给后期使用者带来了麻烦，一旦参数传不对，代码就崩溃了\n\n\n\n动态类型意味着\n\n* 运行代码时才知道发生什么 (running the code to see what happens)\n\n静态类型意味着\n\n* 在代码运行前，就对它的行为做出预测 (make predications about what code is expected before it runs)\n\n\n\n下面的 typescript 代码，就在代码运行前对参数加入了约束限制\n\n```typescript\nfunction test(msg : string) {\n}\n```\n\n* 限制了参数只能做 string 那些事\n\n```typescript\nfunction test(msg : Function) {\n  msg()\n}\n```\n\n* 限制了参数只能做函数那些事\n\n\n\n### 2) 入门\n\n安装 typescript 编译器\n\n```cmd\nnpm install -g typescript\n```\n\n编写 ts 代码\n\n```typescript\nfunction hello(msg: string) {\n  console.log(msg)\n}\n\nhello('hello,world')\n```\n\n执行 tsc 编译命令\n\n```cmd\ntsc xxx.ts\n```\n\n编译生成 js 代码，编译后进行了类型擦除\n\n```js\nfunction hello(msg) {\n    console.log(msg);\n}\nhello('hello,world');\n```\n\n\n\n再来一个例子，用 interface 定义用户类型\n\n```ts\ninterface User {\n  name: string,\n  age: number\n}\n\nfunction test(u: User): void {\n  console.log(u.name)\n  console.log(u.age)\n}\n\ntest({ name: 'zhangs', age: 18 })\n```\n\n编译后\n\n```js\nfunction test(u) {\n    console.log(u.name);\n    console.log(u.age);\n}\ntest({ name: 'zhangs', age: 18 });\n```\n\n\n\n可见，typescript 属于编译时实施类型检查（静态类型）的技术\n\n\n\n### 3) 类型\n\n| 类型        | 例                                    | 备注                         |\n| ----------- | ------------------------------------- | ---------------------------- |\n| 字符串类型  | string                                |                              |\n| 数字类型    | number                                |                              |\n| 布尔类型    | boolean                               |                              |\n| 数组类型    | number[],string[], boolean[] 依此类推 |                              |\n| 任意类型    | any                                   | 相当于又回到了没有类型的时代 |\n| 复杂类型    | type 与 interface                     |                              |\n| 函数类型    | () => void                            | 对函数的参数和返回值进行说明 |\n| 字面量类型  | \"a\"\\|\"b\"\\|\"c\"                         | 限制变量或参数的取值         |\n| nullish类型 | null 与 undefined                     |                              |\n| 泛型        | `<T>`，`<T extends 父类型>`           |                              |\n\n\n\n#### 标注位置\n\n##### 标注变量\n\n```typescript\nlet message: string = 'hello,world'\n```\n\n* 一般可以省略，因为可以根据后面的字面量推断出前面变量类型\n\n```typescript\nlet message = 'hello,world'\n```\n\n\n\n##### 标注参数\n\n```typescript\nfunction greet(name: string) {\n    \n}\n```\n\n很多时候，都能够推断出参数类型\n\n```typescript\nconst names = ['Alice', 'Bob', 'Eve']\nconst lowercaseNames = names.map((e: string) => e.toLowerCase())\n```\n\n* 可以用类型推断，推断出 e 是 string 类型\n\n\n\n##### 标注返回值\n\n```typescript\nfunction add(a: number, b: number) : number {\n    return a + b\n}\n```\n\n* 一般也可以省略，因为可以根据返回值做类型推断\n\n\n\n#### 复杂类型\n\n##### type\n\n```typescript\ntype Cat = {\n  name: string,\n  age: number\n}\n\nconst c1: Cat = { name: '小白', age: 1 }\nconst c2: Cat = { name: '小花' }\t\t\t\t\t  // 错误: 缺少 age 属性\nconst c3: Cat = { name: '小黑', age: 1, sex: '公' } // 错误: 多出 sex 属性\n```\n\n\n\n##### interface\n\n```typescript\ninterface Cat {\n  name: string,\n  age: number\n}\n\nconst c1: Cat = { name: '小白', age: 1 }\nconst c2: Cat = { name: '小花' }\t\t\t\t\t  // 错误: 缺少 age 属性\nconst c3: Cat = { name: '小黑', age: 1, sex: '公' } // 错误: 多出 sex 属性\n```\n\n\n\n##### 可选属性\n\n如果需要某个属性可选，可以用下面的语法\n\n```typescript\ninterface Cat {\n  name: string,\n  age?: number\n}\n\nconst c1: Cat = { name: '小白', age: 1 }\nconst c2: Cat = { name: '小花' }\t\t\t\t\t  // 正确: age 属性可选\n```\n\n* 可选属性要注意处理 undefined 值\n\n\n\n##### 鸭子类型\n\n```typescript\ninterface Cat {\n  name: string\n}\n\nfunction test(cat: Cat) {\n  console.log(cat.name)\n}\n\nconst c1 = { name: '小白', age: 1 } \ntest(c1)\n```\n\n* const c1 并没有声明类型为 Cat，但它与 Cat 类型有一样的属性，也可以被当作是 Cat 类型\n\n\n\n#### 方法类型\n\n```typescript\ninterface Api {\n  foo(): void,\n  bar(str: string): string\n}\n\nfunction test(api: Api) {\n  api.foo()\n  console.log(api.bar('hello'))\n}\n\ntest({\n  foo() { console.log('ok') },\n  bar(str: string) { return str.toUpperCase() }\n})\n```\n\n\n\n#### 字面量类型\n\n```typescript\nfunction printText(s: string, alignment: \"left\" | \"right\" | \"center\") {\n  console.log(s, alignment)\n}\n\nprintText('hello', 'left')\nprintText('hello', 'aaa') // 错误: 取值只能是 left | right | center\n```\n\n\n\n#### nullish 类型\n\n```typescript\nfunction test(x?: string | null) {\n  console.log(x?.toUpperCase())\n}\n\ntest('aaa')\ntest(null)\ntest()\n```\n\n* x?: string | null 表示可能是 undefined 或者是 string 或者是 null\n\n\n\n#### 泛型\n\n下面的几个类型声明显然有一定的相似性\n\n```typescript\ninterface RefString {\n  value: string\n}\n\ninterface RefNumber {\n  value: number\n}\n\ninterface RefBoolean {\n  value: boolean\n}\n\nconst r1: RefString = { value: 'hello' }\nconst r2: RefNumber = { value: 123 }\nconst r3: RefBoolean = { value: true }\n```\n\n可以改进为\n\n```typescript\ninterface Ref<T> {\n  value: T\n}\n\nconst r1: Ref<string> = { value: 'hello' }\nconst r2: Ref<number> = { value: 123 }\nconst r3: Ref<boolean> = { value: true }\n```\n\n* 泛型的要点就是 `<类型参数>`，把【类型】也当作一个变化的要素，像参数一样传递过来，这样就可以派生出结构相似的新类型\n\n\n\n函数定义也支持泛型\n\n```typescript\nfunction ref<T>(n: T): Ref<T> {\n  return { value: n }\n}\n\nconst v1 = ref(\"hello\"); \t// Ref<string>\nconst v2 = ref(123.3333);\t// Ref<number>\n\nv1.value.toLocaleLowerCase()\nv2.value.toFixed(2)\n```\n\n\n\n### 4) 意义\n\n#### 更好理解框架\n\n现在越来越多的前端框架采用 typescript，如果懂 typescript 语法，可以更好地阅读框架代码\n\n以 Map 为例\n\n```typescript\nconst map = new Map<string, string>()\nmap\n  .set(\"a\", \"b\")\n  .set(\"c\", \"d\")\n\nmap.forEach((value,key,m)=>{\n  console.log(value, key)\n})\n```\n\n* 注意编译需要 `tsc --target es6 .\\xxx.ts`\n\n\n\n#### 更好的提示\n\n例如，从服务器返回的一段 json，如果不用 typescript，则编辑器也不能给出准确的提示\n\n```typescript\ninterface User {\n  name: string,\n  age: number\n}\n\nconst user: User = JSON.parse(`{ \"name\":\"张三\", \"age\":18 }`)\n```\n\n\n\n### 5) 类\n\n> 关于 TypeScript 与 JavaScript 中的类语法不是重点，class 相关语法只是起到辅助作用，更重要的是前面讲的 interface\n\n#### 基本语法\n\n```typescript\nclass User {\n    name: string;\n    \n    constructor(name: string) {\n        this.name = name\n    }\n}\n\nconst u = new User('张三')\n```\n\n其实会被编译成这个样子（默认 --target=es3）\n\n```js\nvar User = /** @class */ (function () {\n    function User(name) {\n        this.name = name;\n    }\n    return User;\n}());\nvar u = new User('张三');\n```\n\n所以 js 中的 class，并不等价于 java 中的 class，它还是基于原型实现的，原理参考第二章（036、037）\n\n\n\n#### 只读属性\n\n```typescript\nclass User {\n  readonly name: string;\n  \n  constructor(name: string) {\n      this.name = name\n  }\n}\n\nconst u = new User('张三')\nu.name = '李四'\t\t\t\t// 编译错误\n```\n\n* readonly 是 typescript 特有的，表示该属性只读\n\n\n\n#### 方法\n\n```typescript\nclass User {\n  readonly name: string;\n  \n  constructor(name: string) {\n      this.name = name\n  }\n\n  study() {\n    console.log(`[${this.name}]正在学习`)\n  }\n}\n\nconst u = new User('张三')\nu.study()\n```\n\n\n\n#### get，set\n\n```typescript\nclass User {\n  _name: string;\n\n  constructor(name: string) {\n    this._name = name\n  }\n\n  get name() {\n    return this._name\n  }\n\n  set name(name: string) {\n    this._name = name\n  }\n}\n\nconst u = new User('张三')\nconsole.log(u.name)\nu.name = '李四'\nconsole.log(u.name)\n```\n\n* 注意，需要在编译时加上 `tsc --target es6 .\\xxx.ts` 选项\n* es6 等价于 es2015，再此之上还有 es2016 ... es2022\n\n\n\n#### 类与接口\n\n```typescript\ninterface User {\n  name: string\n  study(course: string): void\n}\n\nclass UserImpl implements User {\n  name: string;\n  constructor(name: string) {\n    this.name = name\n  }\n  study(course: string) {\n    console.log(`[${this.name}]正在学习[${course}]`)\n  }\n  foo() { }\n}\n\nconst user: User = new UserImpl('张三')\nuser.study('Typescript')\nuser.foo() // 错误，必须是接口中定义的方法\n```\n\n\n\n#### 继承与接口\n\n```typescript\ninterface Flyable {\n  fly(): void\n}\n\nclass Animal {\n  name: string;\n  constructor(name: string) {\n    this.name = name\n  }\n}\n\nclass Bird extends Animal implements Flyable {\n  fly() {\n    console.log(`${this.name}在飞翔`)\n  }\n}\n\nconst b: Flyable & Animal = new Bird(\"小花\")\nb.fly()\n```\n\n* Flyable & Animal 表示变量是 flyable 类型，同时也是 Animal 类型\n\n\n\n#### 方法重写\n\n```typescript\nclass Father {\n  study(): void {\n    console.log(`father study`)\n  }\n}\n\nclass Son extends Father {  \n  study(): void {\n    super.study()\n    console.log(`son study`)\n  }\n}\n\nconst f: Father = new Son()\nf.study()\n```","slug":"09_Java程序员要掌握的前端-ts","published":1,"updated":"2022-11-03T05:24:18.136Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb3z0004a8vwxcvqngf3","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h1><h3 id=\"1-动态类型的问题\"><a href=\"#1-动态类型的问题\" class=\"headerlink\" title=\"1) 动态类型的问题\"></a>1) 动态类型的问题</h3><p>前面讲过 js 属于动态类型语言，例如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">obj</span>) </span>&#123;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>obj 可能只是个字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'hello, world'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>obj 也有可能是个函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">'hello, world'</span>))</span><br></pre></td></tr></table></figure>\n\n<p>obj 类型不确定，就给后期使用者带来了麻烦，一旦参数传不对，代码就崩溃了</p>\n<p>动态类型意味着</p>\n<ul>\n<li>运行代码时才知道发生什么 (running the code to see what happens)</li>\n</ul>\n<p>静态类型意味着</p>\n<ul>\n<li>在代码运行前，就对它的行为做出预测 (make predications about what code is expected before it runs)</li>\n</ul>\n<p>下面的 typescript 代码，就在代码运行前对参数加入了约束限制</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">msg : <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>限制了参数只能做 string 那些事</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">msg : <span class=\"built_in\">Function</span></span>) </span>&#123;</span><br><span class=\"line\">  msg()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>限制了参数只能做函数那些事</li>\n</ul>\n<h3 id=\"2-入门\"><a href=\"#2-入门\" class=\"headerlink\" title=\"2) 入门\"></a>2) 入门</h3><p>安装 typescript 编译器</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g typescript</span><br></pre></td></tr></table></figure>\n\n<p>编写 ts 代码</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">msg: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(msg)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">hello(<span class=\"string\">'hello,world'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>执行 tsc 编译命令</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc xxx.ts</span><br></pre></td></tr></table></figure>\n\n<p>编译生成 js 代码，编译后进行了类型擦除</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">msg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(msg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">hello(<span class=\"string\">'hello,world'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>再来一个例子，用 interface 定义用户类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> User &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  age: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">u: User</span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(u.name)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(u.age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(&#123; name: <span class=\"string\">'zhangs'</span>, age: <span class=\"number\">18</span> &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>编译后</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">u</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(u.name);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(u.age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'zhangs'</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>可见，typescript 属于编译时实施类型检查（静态类型）的技术</p>\n<h3 id=\"3-类型\"><a href=\"#3-类型\" class=\"headerlink\" title=\"3) 类型\"></a>3) 类型</h3><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>例</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>字符串类型</td>\n<td>string</td>\n<td></td>\n</tr>\n<tr>\n<td>数字类型</td>\n<td>number</td>\n<td></td>\n</tr>\n<tr>\n<td>布尔类型</td>\n<td>boolean</td>\n<td></td>\n</tr>\n<tr>\n<td>数组类型</td>\n<td>number[],string[], boolean[] 依此类推</td>\n<td></td>\n</tr>\n<tr>\n<td>任意类型</td>\n<td>any</td>\n<td>相当于又回到了没有类型的时代</td>\n</tr>\n<tr>\n<td>复杂类型</td>\n<td>type 与 interface</td>\n<td></td>\n</tr>\n<tr>\n<td>函数类型</td>\n<td>() =&gt; void</td>\n<td>对函数的参数和返回值进行说明</td>\n</tr>\n<tr>\n<td>字面量类型</td>\n<td>“a”|”b”|”c”</td>\n<td>限制变量或参数的取值</td>\n</tr>\n<tr>\n<td>nullish类型</td>\n<td>null 与 undefined</td>\n<td></td>\n</tr>\n<tr>\n<td>泛型</td>\n<td><code>&lt;T&gt;</code>，<code>&lt;T extends 父类型&gt;</code></td>\n<td></td>\n</tr>\n</tbody></table>\n<h4 id=\"标注位置\"><a href=\"#标注位置\" class=\"headerlink\" title=\"标注位置\"></a>标注位置</h4><h5 id=\"标注变量\"><a href=\"#标注变量\" class=\"headerlink\" title=\"标注变量\"></a>标注变量</h5><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> message: <span class=\"built_in\">string</span> = <span class=\"string\">'hello,world'</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>一般可以省略，因为可以根据后面的字面量推断出前面变量类型</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> message = <span class=\"string\">'hello,world'</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"标注参数\"><a href=\"#标注参数\" class=\"headerlink\" title=\"标注参数\"></a>标注参数</h5><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greet</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>很多时候，都能够推断出参数类型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> names = [<span class=\"string\">'Alice'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Eve'</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> lowercaseNames = names.map(<span class=\"function\">(<span class=\"params\">e: <span class=\"built_in\">string</span></span>) =&gt;</span> e.toLowerCase())</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以用类型推断，推断出 e 是 string 类型</li>\n</ul>\n<h5 id=\"标注返回值\"><a href=\"#标注返回值\" class=\"headerlink\" title=\"标注返回值\"></a>标注返回值</h5><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a: <span class=\"built_in\">number</span>, b: <span class=\"built_in\">number</span></span>) : <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>一般也可以省略，因为可以根据返回值做类型推断</li>\n</ul>\n<h4 id=\"复杂类型\"><a href=\"#复杂类型\" class=\"headerlink\" title=\"复杂类型\"></a>复杂类型</h4><h5 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h5><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Cat = &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  age: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> c1: Cat = &#123; name: <span class=\"string\">'小白'</span>, age: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> c2: Cat = &#123; name: <span class=\"string\">'小花'</span> &#125;\t\t\t\t\t  <span class=\"comment\">// 错误: 缺少 age 属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> c3: Cat = &#123; name: <span class=\"string\">'小黑'</span>, age: <span class=\"number\">1</span>, sex: <span class=\"string\">'公'</span> &#125; <span class=\"comment\">// 错误: 多出 sex 属性</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"interface\"><a href=\"#interface\" class=\"headerlink\" title=\"interface\"></a>interface</h5><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Cat &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  age: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> c1: Cat = &#123; name: <span class=\"string\">'小白'</span>, age: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> c2: Cat = &#123; name: <span class=\"string\">'小花'</span> &#125;\t\t\t\t\t  <span class=\"comment\">// 错误: 缺少 age 属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> c3: Cat = &#123; name: <span class=\"string\">'小黑'</span>, age: <span class=\"number\">1</span>, sex: <span class=\"string\">'公'</span> &#125; <span class=\"comment\">// 错误: 多出 sex 属性</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"可选属性\"><a href=\"#可选属性\" class=\"headerlink\" title=\"可选属性\"></a>可选属性</h5><p>如果需要某个属性可选，可以用下面的语法</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Cat &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  age?: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> c1: Cat = &#123; name: <span class=\"string\">'小白'</span>, age: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> c2: Cat = &#123; name: <span class=\"string\">'小花'</span> &#125;\t\t\t\t\t  <span class=\"comment\">// 正确: age 属性可选</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可选属性要注意处理 undefined 值</li>\n</ul>\n<h5 id=\"鸭子类型\"><a href=\"#鸭子类型\" class=\"headerlink\" title=\"鸭子类型\"></a>鸭子类型</h5><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Cat &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">cat: Cat</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(cat.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> c1 = &#123; name: <span class=\"string\">'小白'</span>, age: <span class=\"number\">1</span> &#125; </span><br><span class=\"line\">test(c1)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>const c1 并没有声明类型为 Cat，但它与 Cat 类型有一样的属性，也可以被当作是 Cat 类型</li>\n</ul>\n<h4 id=\"方法类型\"><a href=\"#方法类型\" class=\"headerlink\" title=\"方法类型\"></a>方法类型</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Api &#123;</span><br><span class=\"line\">  foo(): <span class=\"built_in\">void</span>,</span><br><span class=\"line\">  bar(str: <span class=\"built_in\">string</span>): <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">api: Api</span>) </span>&#123;</span><br><span class=\"line\">  api.foo()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(api.bar(<span class=\"string\">'hello'</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(&#123;</span><br><span class=\"line\">  foo() &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'ok'</span>) &#125;,</span><br><span class=\"line\">  bar(str: <span class=\"built_in\">string</span>) &#123; <span class=\"keyword\">return</span> str.toUpperCase() &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"字面量类型\"><a href=\"#字面量类型\" class=\"headerlink\" title=\"字面量类型\"></a>字面量类型</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printText</span>(<span class=\"params\">s: <span class=\"built_in\">string</span>, alignment: \"left\" | \"right\" | \"center\"</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(s, alignment)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">printText(<span class=\"string\">'hello'</span>, <span class=\"string\">'left'</span>)</span><br><span class=\"line\">printText(<span class=\"string\">'hello'</span>, <span class=\"string\">'aaa'</span>) <span class=\"comment\">// 错误: 取值只能是 left | right | center</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"nullish-类型\"><a href=\"#nullish-类型\" class=\"headerlink\" title=\"nullish 类型\"></a>nullish 类型</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">x?: <span class=\"built_in\">string</span> | <span class=\"literal\">null</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x?.toUpperCase())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'aaa'</span>)</span><br><span class=\"line\">test(<span class=\"literal\">null</span>)</span><br><span class=\"line\">test()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>x?: string | null 表示可能是 undefined 或者是 string 或者是 null</li>\n</ul>\n<h4 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h4><p>下面的几个类型声明显然有一定的相似性</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> RefString &#123;</span><br><span class=\"line\">  value: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> RefNumber &#123;</span><br><span class=\"line\">  value: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> RefBoolean &#123;</span><br><span class=\"line\">  value: <span class=\"built_in\">boolean</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> r1: RefString = &#123; value: <span class=\"string\">'hello'</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> r2: RefNumber = &#123; value: <span class=\"number\">123</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> r3: RefBoolean = &#123; value: <span class=\"literal\">true</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以改进为</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Ref&lt;T&gt; &#123;</span><br><span class=\"line\">  value: T</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> r1: Ref&lt;<span class=\"built_in\">string</span>&gt; = &#123; value: <span class=\"string\">'hello'</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> r2: Ref&lt;<span class=\"built_in\">number</span>&gt; = &#123; value: <span class=\"number\">123</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> r3: Ref&lt;<span class=\"built_in\">boolean</span>&gt; = &#123; value: <span class=\"literal\">true</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>泛型的要点就是 <code>&lt;类型参数&gt;</code>，把【类型】也当作一个变化的要素，像参数一样传递过来，这样就可以派生出结构相似的新类型</li>\n</ul>\n<p>函数定义也支持泛型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ref</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">n: T</span>): <span class=\"title\">Ref</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; value: n &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> v1 = ref(<span class=\"string\">\"hello\"</span>); \t<span class=\"comment\">// Ref&lt;string&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> v2 = ref(<span class=\"number\">123.3333</span>);\t<span class=\"comment\">// Ref&lt;number&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">v1.value.toLocaleLowerCase()</span><br><span class=\"line\">v2.value.toFixed(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-意义\"><a href=\"#4-意义\" class=\"headerlink\" title=\"4) 意义\"></a>4) 意义</h3><h4 id=\"更好理解框架\"><a href=\"#更好理解框架\" class=\"headerlink\" title=\"更好理解框架\"></a>更好理解框架</h4><p>现在越来越多的前端框架采用 typescript，如果懂 typescript 语法，可以更好地阅读框架代码</p>\n<p>以 Map 为例</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> Map&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt;()</span><br><span class=\"line\">map</span><br><span class=\"line\">  .set(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>)</span><br><span class=\"line\">  .set(<span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">map.forEach(<span class=\"function\">(<span class=\"params\">value,key,m</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value, key)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意编译需要 <code>tsc --target es6 .\\xxx.ts</code></li>\n</ul>\n<h4 id=\"更好的提示\"><a href=\"#更好的提示\" class=\"headerlink\" title=\"更好的提示\"></a>更好的提示</h4><p>例如，从服务器返回的一段 json，如果不用 typescript，则编辑器也不能给出准确的提示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> User &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  age: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user: User = <span class=\"built_in\">JSON</span>.parse(<span class=\"string\">`&#123; \"name\":\"张三\", \"age\":18 &#125;`</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-类\"><a href=\"#5-类\" class=\"headerlink\" title=\"5) 类\"></a>5) 类</h3><blockquote>\n<p>关于 TypeScript 与 JavaScript 中的类语法不是重点，class 相关语法只是起到辅助作用，更重要的是前面讲的 interface</p>\n</blockquote>\n<h4 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> User &#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> u = <span class=\"keyword\">new</span> User(<span class=\"string\">'张三'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>其实会被编译成这个样子（默认 –target=es3）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> User = <span class=\"comment\">/** @class */</span> (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">User</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> User;</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"><span class=\"keyword\">var</span> u = <span class=\"keyword\">new</span> User(<span class=\"string\">'张三'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>所以 js 中的 class，并不等价于 java 中的 class，它还是基于原型实现的，原理参考第二章（036、037）</p>\n<h4 id=\"只读属性\"><a href=\"#只读属性\" class=\"headerlink\" title=\"只读属性\"></a>只读属性</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> User &#123;</span><br><span class=\"line\">  readonly name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> u = <span class=\"keyword\">new</span> User(<span class=\"string\">'张三'</span>)</span><br><span class=\"line\">u.name = <span class=\"string\">'李四'</span>\t\t\t\t<span class=\"comment\">// 编译错误</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>readonly 是 typescript 特有的，表示该属性只读</li>\n</ul>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> User &#123;</span><br><span class=\"line\">  readonly name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  study() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`[<span class=\"subst\">$&#123;this.name&#125;</span>]正在学习`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> u = <span class=\"keyword\">new</span> User(<span class=\"string\">'张三'</span>)</span><br><span class=\"line\">u.study()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"get，set\"><a href=\"#get，set\" class=\"headerlink\" title=\"get，set\"></a>get，set</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> User &#123;</span><br><span class=\"line\">  _name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> name() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">set</span> name(name: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> u = <span class=\"keyword\">new</span> User(<span class=\"string\">'张三'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(u.name)</span><br><span class=\"line\">u.name = <span class=\"string\">'李四'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(u.name)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意，需要在编译时加上 <code>tsc --target es6 .\\xxx.ts</code> 选项</li>\n<li>es6 等价于 es2015，再此之上还有 es2016 … es2022</li>\n</ul>\n<h4 id=\"类与接口\"><a href=\"#类与接口\" class=\"headerlink\" title=\"类与接口\"></a>类与接口</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> User &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span></span><br><span class=\"line\">  study(course: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> UserImpl <span class=\"keyword\">implements</span> User &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  study(course: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`[<span class=\"subst\">$&#123;this.name&#125;</span>]正在学习[<span class=\"subst\">$&#123;course&#125;</span>]`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  foo() &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user: User = <span class=\"keyword\">new</span> UserImpl(<span class=\"string\">'张三'</span>)</span><br><span class=\"line\">user.study(<span class=\"string\">'Typescript'</span>)</span><br><span class=\"line\">user.foo() <span class=\"comment\">// 错误，必须是接口中定义的方法</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"继承与接口\"><a href=\"#继承与接口\" class=\"headerlink\" title=\"继承与接口\"></a>继承与接口</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Flyable &#123;</span><br><span class=\"line\">  fly(): <span class=\"built_in\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Animal &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Bird <span class=\"keyword\">extends</span> Animal <span class=\"keyword\">implements</span> Flyable &#123;</span><br><span class=\"line\">  fly() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;this.name&#125;</span>在飞翔`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> b: Flyable &amp; Animal = <span class=\"keyword\">new</span> Bird(<span class=\"string\">\"小花\"</span>)</span><br><span class=\"line\">b.fly()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Flyable &amp; Animal 表示变量是 flyable 类型，同时也是 Animal 类型</li>\n</ul>\n<h4 id=\"方法重写\"><a href=\"#方法重写\" class=\"headerlink\" title=\"方法重写\"></a>方法重写</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Father &#123;</span><br><span class=\"line\">  study(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`father study`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Son <span class=\"keyword\">extends</span> Father &#123;  </span><br><span class=\"line\">  study(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.study()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`son study`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> f: Father = <span class=\"keyword\">new</span> Son()</span><br><span class=\"line\">f.study()</span><br></pre></td></tr></table></figure>","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h1><h3 id=\"1-动态类型的问题\"><a href=\"#1-动态类型的问题\" class=\"headerlink\" title=\"1) 动态类型的问题\"></a>1) 动态类型的问题</h3><p>前面讲过 js 属于动态类型语言，例如</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">obj</span>) </span>&#123;    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>obj 可能只是个字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">'hello, world'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>obj 也有可能是个函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">'hello, world'</span>))</span><br></pre></td></tr></table></figure>\n\n<p>obj 类型不确定，就给后期使用者带来了麻烦，一旦参数传不对，代码就崩溃了</p>\n<p>动态类型意味着</p>\n<ul>\n<li>运行代码时才知道发生什么 (running the code to see what happens)</li>\n</ul>\n<p>静态类型意味着</p>\n<ul>\n<li>在代码运行前，就对它的行为做出预测 (make predications about what code is expected before it runs)</li>\n</ul>\n<p>下面的 typescript 代码，就在代码运行前对参数加入了约束限制</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">msg : <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>限制了参数只能做 string 那些事</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">msg : <span class=\"built_in\">Function</span></span>) </span>&#123;</span><br><span class=\"line\">  msg()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>限制了参数只能做函数那些事</li>\n</ul>\n<h3 id=\"2-入门\"><a href=\"#2-入门\" class=\"headerlink\" title=\"2) 入门\"></a>2) 入门</h3><p>安装 typescript 编译器</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g typescript</span><br></pre></td></tr></table></figure>\n\n<p>编写 ts 代码</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">msg: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(msg)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">hello(<span class=\"string\">'hello,world'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>执行 tsc 编译命令</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc xxx.ts</span><br></pre></td></tr></table></figure>\n\n<p>编译生成 js 代码，编译后进行了类型擦除</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">msg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(msg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">hello(<span class=\"string\">'hello,world'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>再来一个例子，用 interface 定义用户类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> User &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  age: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">u: User</span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(u.name)</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(u.age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(&#123; name: <span class=\"string\">'zhangs'</span>, age: <span class=\"number\">18</span> &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>编译后</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">u</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(u.name);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(u.age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(&#123; <span class=\"attr\">name</span>: <span class=\"string\">'zhangs'</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>可见，typescript 属于编译时实施类型检查（静态类型）的技术</p>\n<h3 id=\"3-类型\"><a href=\"#3-类型\" class=\"headerlink\" title=\"3) 类型\"></a>3) 类型</h3><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>例</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>字符串类型</td>\n<td>string</td>\n<td></td>\n</tr>\n<tr>\n<td>数字类型</td>\n<td>number</td>\n<td></td>\n</tr>\n<tr>\n<td>布尔类型</td>\n<td>boolean</td>\n<td></td>\n</tr>\n<tr>\n<td>数组类型</td>\n<td>number[],string[], boolean[] 依此类推</td>\n<td></td>\n</tr>\n<tr>\n<td>任意类型</td>\n<td>any</td>\n<td>相当于又回到了没有类型的时代</td>\n</tr>\n<tr>\n<td>复杂类型</td>\n<td>type 与 interface</td>\n<td></td>\n</tr>\n<tr>\n<td>函数类型</td>\n<td>() =&gt; void</td>\n<td>对函数的参数和返回值进行说明</td>\n</tr>\n<tr>\n<td>字面量类型</td>\n<td>“a”|”b”|”c”</td>\n<td>限制变量或参数的取值</td>\n</tr>\n<tr>\n<td>nullish类型</td>\n<td>null 与 undefined</td>\n<td></td>\n</tr>\n<tr>\n<td>泛型</td>\n<td><code>&lt;T&gt;</code>，<code>&lt;T extends 父类型&gt;</code></td>\n<td></td>\n</tr>\n</tbody></table>\n<h4 id=\"标注位置\"><a href=\"#标注位置\" class=\"headerlink\" title=\"标注位置\"></a>标注位置</h4><h5 id=\"标注变量\"><a href=\"#标注变量\" class=\"headerlink\" title=\"标注变量\"></a>标注变量</h5><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> message: <span class=\"built_in\">string</span> = <span class=\"string\">'hello,world'</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>一般可以省略，因为可以根据后面的字面量推断出前面变量类型</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> message = <span class=\"string\">'hello,world'</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"标注参数\"><a href=\"#标注参数\" class=\"headerlink\" title=\"标注参数\"></a>标注参数</h5><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">greet</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>很多时候，都能够推断出参数类型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> names = [<span class=\"string\">'Alice'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Eve'</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> lowercaseNames = names.map(<span class=\"function\">(<span class=\"params\">e: <span class=\"built_in\">string</span></span>) =&gt;</span> e.toLowerCase())</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以用类型推断，推断出 e 是 string 类型</li>\n</ul>\n<h5 id=\"标注返回值\"><a href=\"#标注返回值\" class=\"headerlink\" title=\"标注返回值\"></a>标注返回值</h5><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a: <span class=\"built_in\">number</span>, b: <span class=\"built_in\">number</span></span>) : <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>一般也可以省略，因为可以根据返回值做类型推断</li>\n</ul>\n<h4 id=\"复杂类型\"><a href=\"#复杂类型\" class=\"headerlink\" title=\"复杂类型\"></a>复杂类型</h4><h5 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h5><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Cat = &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  age: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> c1: Cat = &#123; name: <span class=\"string\">'小白'</span>, age: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> c2: Cat = &#123; name: <span class=\"string\">'小花'</span> &#125;\t\t\t\t\t  <span class=\"comment\">// 错误: 缺少 age 属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> c3: Cat = &#123; name: <span class=\"string\">'小黑'</span>, age: <span class=\"number\">1</span>, sex: <span class=\"string\">'公'</span> &#125; <span class=\"comment\">// 错误: 多出 sex 属性</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"interface\"><a href=\"#interface\" class=\"headerlink\" title=\"interface\"></a>interface</h5><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Cat &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  age: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> c1: Cat = &#123; name: <span class=\"string\">'小白'</span>, age: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> c2: Cat = &#123; name: <span class=\"string\">'小花'</span> &#125;\t\t\t\t\t  <span class=\"comment\">// 错误: 缺少 age 属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> c3: Cat = &#123; name: <span class=\"string\">'小黑'</span>, age: <span class=\"number\">1</span>, sex: <span class=\"string\">'公'</span> &#125; <span class=\"comment\">// 错误: 多出 sex 属性</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"可选属性\"><a href=\"#可选属性\" class=\"headerlink\" title=\"可选属性\"></a>可选属性</h5><p>如果需要某个属性可选，可以用下面的语法</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Cat &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  age?: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> c1: Cat = &#123; name: <span class=\"string\">'小白'</span>, age: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> c2: Cat = &#123; name: <span class=\"string\">'小花'</span> &#125;\t\t\t\t\t  <span class=\"comment\">// 正确: age 属性可选</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可选属性要注意处理 undefined 值</li>\n</ul>\n<h5 id=\"鸭子类型\"><a href=\"#鸭子类型\" class=\"headerlink\" title=\"鸭子类型\"></a>鸭子类型</h5><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Cat &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">cat: Cat</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(cat.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> c1 = &#123; name: <span class=\"string\">'小白'</span>, age: <span class=\"number\">1</span> &#125; </span><br><span class=\"line\">test(c1)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>const c1 并没有声明类型为 Cat，但它与 Cat 类型有一样的属性，也可以被当作是 Cat 类型</li>\n</ul>\n<h4 id=\"方法类型\"><a href=\"#方法类型\" class=\"headerlink\" title=\"方法类型\"></a>方法类型</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Api &#123;</span><br><span class=\"line\">  foo(): <span class=\"built_in\">void</span>,</span><br><span class=\"line\">  bar(str: <span class=\"built_in\">string</span>): <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">api: Api</span>) </span>&#123;</span><br><span class=\"line\">  api.foo()</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(api.bar(<span class=\"string\">'hello'</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(&#123;</span><br><span class=\"line\">  foo() &#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'ok'</span>) &#125;,</span><br><span class=\"line\">  bar(str: <span class=\"built_in\">string</span>) &#123; <span class=\"keyword\">return</span> str.toUpperCase() &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"字面量类型\"><a href=\"#字面量类型\" class=\"headerlink\" title=\"字面量类型\"></a>字面量类型</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printText</span>(<span class=\"params\">s: <span class=\"built_in\">string</span>, alignment: \"left\" | \"right\" | \"center\"</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(s, alignment)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">printText(<span class=\"string\">'hello'</span>, <span class=\"string\">'left'</span>)</span><br><span class=\"line\">printText(<span class=\"string\">'hello'</span>, <span class=\"string\">'aaa'</span>) <span class=\"comment\">// 错误: 取值只能是 left | right | center</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"nullish-类型\"><a href=\"#nullish-类型\" class=\"headerlink\" title=\"nullish 类型\"></a>nullish 类型</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">x?: <span class=\"built_in\">string</span> | <span class=\"literal\">null</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x?.toUpperCase())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">'aaa'</span>)</span><br><span class=\"line\">test(<span class=\"literal\">null</span>)</span><br><span class=\"line\">test()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>x?: string | null 表示可能是 undefined 或者是 string 或者是 null</li>\n</ul>\n<h4 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h4><p>下面的几个类型声明显然有一定的相似性</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> RefString &#123;</span><br><span class=\"line\">  value: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> RefNumber &#123;</span><br><span class=\"line\">  value: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> RefBoolean &#123;</span><br><span class=\"line\">  value: <span class=\"built_in\">boolean</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> r1: RefString = &#123; value: <span class=\"string\">'hello'</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> r2: RefNumber = &#123; value: <span class=\"number\">123</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> r3: RefBoolean = &#123; value: <span class=\"literal\">true</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以改进为</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Ref&lt;T&gt; &#123;</span><br><span class=\"line\">  value: T</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> r1: Ref&lt;<span class=\"built_in\">string</span>&gt; = &#123; value: <span class=\"string\">'hello'</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> r2: Ref&lt;<span class=\"built_in\">number</span>&gt; = &#123; value: <span class=\"number\">123</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> r3: Ref&lt;<span class=\"built_in\">boolean</span>&gt; = &#123; value: <span class=\"literal\">true</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>泛型的要点就是 <code>&lt;类型参数&gt;</code>，把【类型】也当作一个变化的要素，像参数一样传递过来，这样就可以派生出结构相似的新类型</li>\n</ul>\n<p>函数定义也支持泛型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ref</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">n: T</span>): <span class=\"title\">Ref</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; value: n &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> v1 = ref(<span class=\"string\">\"hello\"</span>); \t<span class=\"comment\">// Ref&lt;string&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> v2 = ref(<span class=\"number\">123.3333</span>);\t<span class=\"comment\">// Ref&lt;number&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">v1.value.toLocaleLowerCase()</span><br><span class=\"line\">v2.value.toFixed(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-意义\"><a href=\"#4-意义\" class=\"headerlink\" title=\"4) 意义\"></a>4) 意义</h3><h4 id=\"更好理解框架\"><a href=\"#更好理解框架\" class=\"headerlink\" title=\"更好理解框架\"></a>更好理解框架</h4><p>现在越来越多的前端框架采用 typescript，如果懂 typescript 语法，可以更好地阅读框架代码</p>\n<p>以 Map 为例</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> Map&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt;()</span><br><span class=\"line\">map</span><br><span class=\"line\">  .set(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>)</span><br><span class=\"line\">  .set(<span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">map.forEach(<span class=\"function\">(<span class=\"params\">value,key,m</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value, key)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意编译需要 <code>tsc --target es6 .\\xxx.ts</code></li>\n</ul>\n<h4 id=\"更好的提示\"><a href=\"#更好的提示\" class=\"headerlink\" title=\"更好的提示\"></a>更好的提示</h4><p>例如，从服务器返回的一段 json，如果不用 typescript，则编辑器也不能给出准确的提示</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> User &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">  age: <span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user: User = <span class=\"built_in\">JSON</span>.parse(<span class=\"string\">`&#123; \"name\":\"张三\", \"age\":18 &#125;`</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-类\"><a href=\"#5-类\" class=\"headerlink\" title=\"5) 类\"></a>5) 类</h3><blockquote>\n<p>关于 TypeScript 与 JavaScript 中的类语法不是重点，class 相关语法只是起到辅助作用，更重要的是前面讲的 interface</p>\n</blockquote>\n<h4 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> User &#123;</span><br><span class=\"line\">    name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> u = <span class=\"keyword\">new</span> User(<span class=\"string\">'张三'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>其实会被编译成这个样子（默认 –target=es3）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> User = <span class=\"comment\">/** @class */</span> (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">User</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> User;</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"><span class=\"keyword\">var</span> u = <span class=\"keyword\">new</span> User(<span class=\"string\">'张三'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>所以 js 中的 class，并不等价于 java 中的 class，它还是基于原型实现的，原理参考第二章（036、037）</p>\n<h4 id=\"只读属性\"><a href=\"#只读属性\" class=\"headerlink\" title=\"只读属性\"></a>只读属性</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> User &#123;</span><br><span class=\"line\">  readonly name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> u = <span class=\"keyword\">new</span> User(<span class=\"string\">'张三'</span>)</span><br><span class=\"line\">u.name = <span class=\"string\">'李四'</span>\t\t\t\t<span class=\"comment\">// 编译错误</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>readonly 是 typescript 特有的，表示该属性只读</li>\n</ul>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> User &#123;</span><br><span class=\"line\">  readonly name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  study() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`[<span class=\"subst\">$&#123;this.name&#125;</span>]正在学习`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> u = <span class=\"keyword\">new</span> User(<span class=\"string\">'张三'</span>)</span><br><span class=\"line\">u.study()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"get，set\"><a href=\"#get，set\" class=\"headerlink\" title=\"get，set\"></a>get，set</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> User &#123;</span><br><span class=\"line\">  _name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> name() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">set</span> name(name: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> u = <span class=\"keyword\">new</span> User(<span class=\"string\">'张三'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(u.name)</span><br><span class=\"line\">u.name = <span class=\"string\">'李四'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(u.name)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意，需要在编译时加上 <code>tsc --target es6 .\\xxx.ts</code> 选项</li>\n<li>es6 等价于 es2015，再此之上还有 es2016 … es2022</li>\n</ul>\n<h4 id=\"类与接口\"><a href=\"#类与接口\" class=\"headerlink\" title=\"类与接口\"></a>类与接口</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> User &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span></span><br><span class=\"line\">  study(course: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> UserImpl <span class=\"keyword\">implements</span> User &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  study(course: <span class=\"built_in\">string</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`[<span class=\"subst\">$&#123;this.name&#125;</span>]正在学习[<span class=\"subst\">$&#123;course&#125;</span>]`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  foo() &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user: User = <span class=\"keyword\">new</span> UserImpl(<span class=\"string\">'张三'</span>)</span><br><span class=\"line\">user.study(<span class=\"string\">'Typescript'</span>)</span><br><span class=\"line\">user.foo() <span class=\"comment\">// 错误，必须是接口中定义的方法</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"继承与接口\"><a href=\"#继承与接口\" class=\"headerlink\" title=\"继承与接口\"></a>继承与接口</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Flyable &#123;</span><br><span class=\"line\">  fly(): <span class=\"built_in\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Animal &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Bird <span class=\"keyword\">extends</span> Animal <span class=\"keyword\">implements</span> Flyable &#123;</span><br><span class=\"line\">  fly() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;this.name&#125;</span>在飞翔`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> b: Flyable &amp; Animal = <span class=\"keyword\">new</span> Bird(<span class=\"string\">\"小花\"</span>)</span><br><span class=\"line\">b.fly()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Flyable &amp; Animal 表示变量是 flyable 类型，同时也是 Animal 类型</li>\n</ul>\n<h4 id=\"方法重写\"><a href=\"#方法重写\" class=\"headerlink\" title=\"方法重写\"></a>方法重写</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Father &#123;</span><br><span class=\"line\">  study(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`father study`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Son <span class=\"keyword\">extends</span> Father &#123;  </span><br><span class=\"line\">  study(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.study()</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`son study`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> f: Father = <span class=\"keyword\">new</span> Son()</span><br><span class=\"line\">f.study()</span><br></pre></td></tr></table></figure>"},{"title":"Vue2知识点总结","date":"2022-11-02T16:00:00.000Z","_content":"\n# Vue 2\n\n## 1. Vue 基础\n\n### 1) 环境准备\n\n#### 安装脚手架\n\n```\nnpm install -g @vue/cli\n```\n\n* -g 参数表示全局安装，这样在任意目录都可以使用 vue 脚本创建项目\n\n#### 创建项目\n\n```cmd\nvue ui\n```\n\n#### 安装 devtools\n\n* devtools 插件网址：https://devtools.vuejs.org/guide/installation.html\n\n\n#### 运行项目\n\n进入项目目录，执行\n\n```cmd\nnpm run serve\n```\n\n#### 修改端口\n\n前端服务器默认占用了 8080 端口，需要修改一下\n\n* 文档地址：[DevServer | webpack](https://webpack.js.org/configuration/dev-server/#devserverport)\n\n* 打开 vue.config.js 添加\n\n  ```js\n  const { defineConfig } = require('@vue/cli-service')\n  module.exports = defineConfig({\n    \n    // ...\n      \n    devServer: {\n      port: 7070\n    }\n    \n  })\n  ```\n\n#### 添加代理\n\n为了避免前后端服务器联调时， fetch、xhr 请求产生跨域问题，需要配置代理\n\n* 文档地址同上\n\n* 打开 vue.config.js 添加\n\n  ```js\n  const { defineConfig } = require('@vue/cli-service')\n  module.exports = defineConfig({\n      \n    // ...\n      \n    devServer: {\n      port: 7070,\n      proxy: {\n        '/api': {\n          target: 'http://localhost:8080',\n          changeOrigin: true\n        }\n      }\n    }\n      \n  })\n  ```\n\n  \n\n#### Vue 项目结构\n\n```\nPS D:\\2022.js\\代码\\第3章\\client> tree src\nD:\\2022.JS\\代码\\第3章\\CLIENT\\SRC\n├─assets\n├─components\n├─router\n├─store\n└─views\n```\n\n* assets - 静态资源\n* components - 可重用组件\n* router - 路由\n* store - 数据共享\n* views - 视图组件\n\n以后还会添加\n\n* api - 跟后台交互，发送 fetch、xhr 请求，接收响应\n* plugins - 插件\n\n\n\n### 2) Vue 组件\n\nVue 的组件文件以 .vue 结尾，每个组件由三部分组成\n\n```vue\n<template></template>\n\n<script></script>\n\n<style></style>\n```\n\n* template 模板部分，由它生成 html 代码\n* script 代码部分，控制模板的数据来源和行为\n* style 样式部分，一般不咋关心\n\n\n\n入口组件是 App.vue\n\n先删除原有代码，来个 Hello, World 例子\n\n```vue\n<template>\n  <h1>{{msg}}</h1>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      msg: \"Hello, Vue!\"\n    }\n  }\n}\n</script>\n```\n\n解释\n\n* export default 导出组件对象，供 main.js 导入使用\n* 这个对象有一个 data 方法，返回一个**对象**，给 template 提供数据\n* 双括号 在 Vue 里称之为插值表达式，用来**绑定** data 方法返回的**对象**属性，**绑定**的含义是数据发生变化时，页面显示会同步变化\n\n\n\n#### 文本插值\n\n```vue\n<template>\n    <div>\n        <h1>{{ name }}</h1>\n        <h1>{{ age > 60 ? '老年' : '青年' }}</h1>\n    </div>\n</template>\n<script>\nconst options = {\n    data: function () {\n        return { name: '张三', age: 70 };\n    }\n};\nexport default options;\n</script>\n```\n\n* 双括号 里只能绑定一个属性，绑定多个属性需要用多个 双括号 分别绑定\n* template 内只能有一个根元素\n* 插值内可以进行简单的表达式计算\n\n\n\n#### 属性绑定\n\n```vue\n<template>\n    <div>\n        <div><input type=\"text\" v-bind:value=\"name\"></div>\n        <div><input type=\"date\" v-bind:value=\"birthday\"></div>\n        <div><input type=\"text\" :value=\"age\"></div>\n    </div>\n</template>\n<script>\nconst options = {\n    data: function () {\n        return { name: '王五', birthday: '1995-05-01', age: 20 };\n    }\n};\nexport default options;\n</script>\n```\n\n* 简写方式：可以省略 v-bind 只保留冒号\n\n\n\n#### 事件绑定\n\n```vue\n<!-- 事件绑定 -->\n<template>\n    <div>\n        <div><input type=\"button\" value=\"点我执行m1\" v-on:click=\"m1\"></div>\n        <div><input type=\"button\" value=\"点我执行m2\" @click=\"m2\"></div>\n        <div>{{count}}</div>\n    </div>\n</template>\n<script>\nconst options = {\n    data: function () {\n        return { count: 0 };\n    },\n    methods: {\n        m1() {\n            this.count ++;\n            console.log(\"m1\")\n        },\n        m2() {\n            this.count --;\n            console.log(\"m2\")\n        }\n    }\n};\nexport default options;\n</script>\n```\n\n* 简写方式：可以把 v-on: 替换为 @\n* 在 methods 方法中的 this 代表的是 data 函数返回的数据对象\n\n\n\n#### 双向绑定\n\n```vue\n<template>\n    <div>\n        <div>\n            <label for=\"\">请输入姓名</label>\n            <input type=\"text\" v-model=\"name\">\n        </div>\n        <div>\n            <label for=\"\">请输入年龄</label>\n            <input type=\"text\" v-model=\"age\">\n        </div>\n        <div>\n            <label for=\"\">请选择性别</label>\n            男 <input type=\"radio\" value=\"男\" v-model=\"sex\">\n            女 <input type=\"radio\" value=\"女\" v-model=\"sex\">\n        </div>\n        <div>\n            <label for=\"\">请选择爱好</label>\n            游泳 <input type=\"checkbox\" value=\"游泳\" v-model=\"fav\">\n            打球 <input type=\"checkbox\" value=\"打球\" v-model=\"fav\">\n            健身 <input type=\"checkbox\" value=\"健身\" v-model=\"fav\">\n        </div>\n    </div>\n</template>\n<script>\nconst options = {\n    data: function () {\n        return { name: '', age: null, sex:'男' , fav:['打球']};\n    },\n    methods: {\n    }\n};\nexport default options;\n</script>\n```\n\n* 用 v-model 实现双向绑定，即 \n  * javascript 数据可以同步到表单标签\n  * 反过来用户在表单标签输入的新值也会同步到 javascript 这边\n* 双向绑定只适用于表单这种带【输入】功能的标签，其它标签的数据绑定，单向就足够了\n* 复选框这种标签，双向绑定的 javascript 数据类型一般用数组\n\n\n\n#### 计算属性\n\n```vue\n<!-- 计算属性 -->\n<template>\n    <div>\n        <h2>{{fullName}}</h2>\n        <h2>{{fullName}}</h2>\n        <h2>{{fullName}}</h2>\n    </div>\n</template>\n<script>\nconst options = {\n    data: function () {\n        return { firstName: '三', lastName: '张' };\n    },\n    /* methods: {\n        fullName() {\n            console.log('进入了 fullName')\n            return this.lastName + this.firstName;\n        }\n    },*/\n    computed: {\n        fullName() {\n            console.log('进入了 fullName')\n            return this.lastName + this.firstName;\n        }\n    }\n};\nexport default options;\n```\n\n* 普通方法调用必须加 ()，没有缓存功能\n* 计算属性使用时就把它当属性来用，不加 ()，有缓存功能：\n  * 一次计算后，会将结果缓存，下次再计算时，只要数据没有变化，不会重新计算，直接返回缓存结果\n\n\n\n#### axios\n\naxios 它的底层是用了 XMLHttpRequest（xhr）方式发送请求和接收响应，xhr 相对于之前讲过的 fetch api 来说，功能更强大，但由于是比较老的 api，不支持 Promise，axios 对 xhr 进行了封装，使之支持 Promise，并提供了对请求、响应的统一拦截功能\n\n安装\n\n```cmd\nnpm install axios -S\n```\n\n导入\n\n```js\nimport axios from 'axios'\n```\n\n* axios 默认导出一个对象，这里的 import 导入的就是它默认导出的对象\n\n方法\n\n| 请求                               | 备注   |\n| ---------------------------------- | ------ |\n| axios.get(url[, config])           | :star: |\n| axios.delete(url[, config])        |        |\n| axios.head(url[, config])          |        |\n| axios.options(url[, config])       |        |\n| axios.post(url[, data[, config]])  | :star: |\n| axios.put(url[, data[, config]])   |        |\n| axios.patch(url[, data[, config]]) |        |\n\n* config - 选项对象、例如查询参数、请求头...\n* data - 请求体数据、最常见的是 json 格式数据\n* get、head 请求无法携带请求体，这应当是浏览器的限制所致（xhr、fetch api 均有限制）\n* options、delete 请求可以通过 config 中的 data 携带请求体\n\n\n\n例子\n\n```vue\n<template>\n    <div>\n        <input type=\"button\" value=\"获取远程数据\" @click=\"sendReq()\">\n    </div>\n</template>\n<script>\nimport axios from 'axios'\nconst options = {\n    methods: {\n        async sendReq() {\n            // 1. 演示 get, post\n            // const resp = await axios.post('/api/a2');\n\n            // 2. 发送请求头\n            // const resp = await axios.post('/api/a3',{},{\n            //     headers:{\n            //         Authorization:'abc'\n            //     }\n            // });\n\n            // 3. 发送请求时携带查询参数 ?name=xxx&age=xxx\n            // const name = encodeURIComponent('&&&');\n            // const age = 18;\n            // const resp = await axios.post(`/api/a4?name=${name}&age=${age}`);\n\n            // 不想自己拼串、处理特殊字符、就用下面的办法\n            // const resp = await axios.post('/api/a4', {}, {\n            //     params: {\n            //         name:'&&&&',\n            //         age: 20\n            //     }\n            // });\n\n            // 4. 用请求体发数据，格式为 urlencoded\n            // const params = new URLSearchParams();\n            // params.append(\"name\", \"张三\");\n            // params.append(\"age\", 24)\n\n            // const resp = await axios.post('/api/a4', params);\n\n            // 5. 用请求体发数据，格式为 multipart\n            // const params = new FormData();\n            // params.append(\"name\", \"李四\");\n            // params.append(\"age\", 30);\n            // const resp = await axios.post('/api/a5', params);\n\n            // 6. 用请求体发数据，格式为 json\n            const resp = await axios.post('/api/a5json', {\n                name: '王五',\n                age: 50\n            });\n\n            console.log(resp);\n        }\n    }\n};\nexport default options;\n</script>\n```\n\n\n\n创建实例\n\n```js\nconst _axios = axios.create(config);\n```\n\n* axios 对象可以直接使用，但使用的是默认的设置\n* 用 axios.create 创建的对象，可以覆盖默认设置，config 见下面说明\n\n\n\n常见的 config 项有\n\n| 名称            | 含义                                                       |\n| --------------- | ---------------------------------------------------------- |\n| baseURL         | 将自动加在 url 前面                                        |\n| headers         | 请求头，类型为简单对象                                     |\n| params          | 跟在 URL 后的请求参数，类型为简单对象或 URLSearchParams    |\n| data            | 请求体，类型有简单对象、FormData、URLSearchParams、File 等 |\n| withCredentials | 跨域时是否携带 Cookie 等凭证，默认为 false                 |\n| responseType    | 响应类型，默认为 json                                      |\n\n例\n\n```js\nconst _axios = axios.create({\n    baseURL: 'http://localhost:8080',\n    withCredentials: true\n});\nawait _axios.post('/api/a6set')\nawait _axios.post('/api/a6get')\n```\n\n* 生产环境希望 xhr 请求不走代理，可以用 baseURL 统一修改\n* 希望跨域请求携带 cookie，需要配置 withCredentials: true，服务器也要配置 allowCredentials = true，否则浏览器获取跨域返回的 cookie 时会报错\n\n\n\n响应格式\n\n| 名称    | 含义              |\n| ------- | ----------------- |\n| data    | 响应体数据 :star: |\n| status  | 状态码 :star:     |\n| headers | 响应头            |\n\n* 200 表示响应成功\n* 400 请求数据不正确 age=abc\n* 401 身份验证没通过\n* 403 没有权限\n* 404 资源不存在\n* 405 不支持请求方式 post\n* 500 服务器内部错误\n\n\n\n请求拦截器\n\n```js\n_axios.interceptors.request.use(\n  function(config) {\n    // 比如在这里添加统一的 headers\n    return config;\n  },\n  function(error) {\n    return Promise.reject(error);\n  }\n);\n```\n\n响应拦截器\n\n```js\n_axios.interceptors.response.use(\n  function(response) {\n    // 2xx 范围内走这里\n    return response;\n  },\n  function(error) {\n    // 超出 2xx, 比如 4xx, 5xx 走这里\n    return Promise.reject(error);\n  }\n);\n```\n\n\n\n#### 条件渲染\n\n```vue\n<template>\n    <div>\n        <input type=\"button\" value=\"获取远程数据\" @click=\"sendReq()\">\n        <div class=\"title\">学生列表</div>\n        <div class=\"thead\">\n            <div class=\"row bold\">\n                <div class=\"col\">编号</div>\n                <div class=\"col\">姓名</div>\n                <div class=\"col\">性别</div>\n                <div class=\"col\">年龄</div>\n            </div>\n        </div>\n        <div class=\"tbody\">\n            <div class=\"row\" v-if=\"students.length > 0\">显示学生数据</div>\n            <div class=\"row\" v-else>暂无学生数据</div>\n        </div>\n    </div>\n</template>\n<script>\nimport axios from '../util/myaxios'\nconst options = {\n    data: function() {\n        return {\n            students: []\n        };\n    },\n    methods : {\n        async sendReq() {\n            const resp = await axios.get(\"/api/students\");\n            console.log(resp.data.data)\n            this.students = resp.data.data;\n        }\n    }\n};\nexport default options;\n</script>\n<style scoped>\n    div {\n        font-family: 华文行楷;\n        font-size: 20px;\n    }\n\n    .title {\n        margin-bottom: 10px;\n        font-size: 30px;\n        color: #333;\n        text-align: center;\n    }\n\n    .row {\n        background-color: #fff;\n        display: flex;\n        justify-content: center;\n    }\n\n    .col {\n        border: 1px solid #f0f0f0;\n        width: 15%;\n        height: 35px;\n        text-align: center;\n        line-height: 35px;\n    }\n\n    .bold .col {\n        background-color: #f1f1f1;\n    }\n</style>\n```\n\n\n\n#### 列表渲染\n\n```vue\n<template>\n    <div>\n        <!-- <input type=\"button\" value=\"获取远程数据\" @click=\"sendReq()\"> -->\n        <div class=\"title\">学生列表</div>\n        <div class=\"thead\">\n            <div class=\"row bold\">\n                <div class=\"col\">编号</div>\n                <div class=\"col\">姓名</div>\n                <div class=\"col\">性别</div>\n                <div class=\"col\">年龄</div>\n            </div>\n        </div>\n        <div class=\"tbody\">\n            <div v-if=\"students.length > 0\">\n                <div class=\"row\" v-for=\"s of students\" :key=\"s.id\">\n                    <div class=\"col\">{{s.id}}</div>\n                    <div class=\"col\">{{s.name}}</div>\n                    <div class=\"col\">{{s.sex}}</div>\n                    <div class=\"col\">{{s.age}}</div>\n                </div>\n            </div>\n            <div class=\"row\" v-else>暂无学生数据</div>\n        </div>\n    </div>\n</template>\n<script>\nimport axios from '../util/myaxios'\nconst options = {\n    mounted: function(){\n        this.sendReq()\n    },\n    data: function() {\n        return {\n            students: []\n        };\n    },\n    methods : {\n        async sendReq() {\n            const resp = await axios.get(\"/api/students\");\n            console.log(resp.data.data)\n            this.students = resp.data.data;\n        }\n    }\n};\nexport default options;\n</script>\n<style scoped>\n    div {\n        font-family: 华文行楷;\n        font-size: 20px;\n    }\n\n    .title {\n        margin-bottom: 10px;\n        font-size: 30px;\n        color: #333;\n        text-align: center;\n    }\n\n    .row {\n        background-color: #fff;\n        display: flex;\n        justify-content: center;\n    }\n\n    .col {\n        border: 1px solid #f0f0f0;\n        width: 15%;\n        height: 35px;\n        text-align: center;\n        line-height: 35px;\n    }\n\n    .bold .col {\n        background-color: #f1f1f1;\n    }\n</style>\n```\n\n* v-if 和 v-for 不能用于同一个标签\n* v-for 需要配合特殊的标签属性 key 一起使用，并且 key 属性要绑定到一个能起到唯一标识作用的数据上，本例绑定到了学生编号上\n* options 的 mounted 属性对应一个函数，此函数会在组件挂载后（准备就绪）被调用，可以在它内部发起请求，去获取学生数据\n\n\n\n#### 重用组件\n\n按钮组件\n\n```vue\n<template>\n    <div class=\"button\" :class=\"[type,size]\">\n        a<slot></slot>b\n    </div>\n</template>\n<script>\nconst options = {\n    props: [\"type\", \"size\"]\n};\nexport default options;\n</script>\n```\n\n* 注意，省略了样式部分\n\n使用组件\n\n```vue\n<template>\n    <div>\n        <h1>父组件</h1>\n        <my-button type=\"primary\" size=\"small\">1</my-button>\n        <my-button type=\"danger\" size=\"middle\">2</my-button>\n        <my-button type=\"success\" size=\"large\">3</my-button>\n    </div>\n</template>\n<script>\nimport MyButton from '../components/MyButton.vue'\nconst options = {\n    components: {\n        MyButton\n    }\n};\nexport default options;\n</script>\n```\n\n\n\n## 2. Vue 进阶\n\n### 1) ElementUI\n\n安装\n\n```cmd\nnpm install element-ui -S\n```\n\n\n\n引入组件\n\n```js\nimport Element from 'element-ui'\nimport 'element-ui/lib/theme-chalk/index.css'\n\nVue.use(Element)\n```\n\n\n\n测试，在自己的组件中使用 ElementUI 的组件\n\n```vue\n<el-button>按钮</el-button>\n```\n\n\n\n#### 表格组件\n\n```vue\n<template>\n    <div>\n        <el-table :data=\"students\">\n            <el-table-column label=\"编号\" prop=\"id\"></el-table-column>\n            <el-table-column label=\"姓名\" prop=\"name\"></el-table-column>\n            <el-table-column label=\"性别\" prop=\"sex\"></el-table-column>\n            <el-table-column label=\"年龄\" prop=\"age\"></el-table-column>\n        </el-table>\n    </div>\n</template>\n<script>\nimport axios from '../util/myaxios'\nconst options = {\n    async mounted() {\n        const resp = await axios.get('/api/students');\n        this.students = resp.data.data\n    },\n    data() {\n        return {\n            students: []\n        }\n    }\n}\nexport default options;\n</script>\n```\n\n\n\n#### 分页组件\n\n```vue\n<template>\n    <div>\n        <el-table v-bind:data=\"students\">\n            <el-table-column label=\"编号\" prop=\"id\"></el-table-column>\n            <el-table-column label=\"姓名\" prop=\"name\"></el-table-column>\n            <el-table-column label=\"性别\" prop=\"sex\"></el-table-column>\n            <el-table-column label=\"年龄\" prop=\"age\"></el-table-column>\n        </el-table>\n        <el-pagination \n            :total=\"total\"\n            :page-size=\"queryDto.size\"\n            :current-page=\"queryDto.page\"\n            layout=\"prev,pager,next,sizes,->,total\"\n            :page-sizes=\"[5,10,15,20]\"\n            @current-change=\"currentChange\"\n            @size-change=\"sizeChange\"\n        ></el-pagination>\n    </div>\n</template>\n<script>\nimport axios from '../util/myaxios'\nconst options = {\n    mounted() {\n        this.query();\n    },\n    methods: {\n        currentChange(page) {\n            this.queryDto.page = page;\n            this.query();\n        },\n        sizeChange(size){\n            this.queryDto.size = size;\n            this.query();\n        },\n        async query() {\n            const resp = await axios.get('/api/students/q', {\n                params: this.queryDto\n            });\n            this.students = resp.data.data.list;\n            this.total = resp.data.data.total;\n        }\n    },\n    data() {\n        return {\n            students: [],\n            total: 0,\n            queryDto: {\n                page: 1,\n                size: 5\n            }\n        }\n    }\n}\nexport default options;\n</script>\n```\n\n* 三种情况都应该触发查询\n  * mounted 组件挂载完成后\n  * 页号变化时\n  * 页大小变化时\n* 查询传参应该根据后台需求，灵活采用不同方式\n  * 本例中因为是 get 请求，无法采用请求体，只能用 params 方式传参\n* 返回响应的格式也许会很复杂，需要掌握【根据返回的响应结构，获取数据】的能力\n\n\n\n#### 分页搜索\n\n```vue\n<template>\n    <div>\n        <el-input placeholder=\"请输入姓名\" size=\"mini\" v-model=\"queryDto.name\"></el-input>\n        <el-select placeholder=\"请选择性别\" size=\"mini\" v-model=\"queryDto.sex\" clearable>\n            <el-option value=\"男\"></el-option>\n            <el-option value=\"女\"></el-option>\n        </el-select>\n        <el-select placeholder=\"请选择年龄\" size=\"mini\" v-model=\"queryDto.age\" clearable>\n            <el-option value=\"0,20\" label=\"0到20岁\"></el-option>\n            <el-option value=\"21,30\" label=\"21到30岁\"></el-option>\n            <el-option value=\"31,40\" label=\"31到40岁\"></el-option>\n            <el-option value=\"41,120\" label=\"41到120岁\"></el-option>\n        </el-select>\n        <el-button type=\"primary\" size=\"mini\" @click=\"search()\">搜索</el-button>\n        <el-divider></el-divider>\n        <el-table v-bind:data=\"students\">\n            <el-table-column label=\"编号\" prop=\"id\"></el-table-column>\n            <el-table-column label=\"姓名\" prop=\"name\"></el-table-column>\n            <el-table-column label=\"性别\" prop=\"sex\"></el-table-column>\n            <el-table-column label=\"年龄\" prop=\"age\"></el-table-column>\n        </el-table>\n        <el-pagination :total=\"total\" :page-size=\"queryDto.size\" :current-page=\"queryDto.page\"\n            layout=\"prev,pager,next,sizes,->,total\" :page-sizes=\"[5, 10, 15, 20]\" @current-change=\"currentChange\"\n            @size-change=\"sizeChange\"></el-pagination>\n    </div>\n</template>\n<script>\nimport axios from '../util/myaxios'\nconst options = {\n    mounted() {\n        this.query();\n    },\n    methods: {\n        currentChange(page) {\n            this.queryDto.page = page;\n            this.query();\n        },\n        sizeChange(size) {\n            this.queryDto.size = size;\n            this.query();\n        },\n        async query() {\n            const resp = await axios.get('/api/students/q', {\n                params: this.queryDto\n            });\n            this.students = resp.data.data.list;\n            this.total = resp.data.data.total;\n        },\n        search() {\n            this.query();\n        }\n    },\n    data() {\n        return {\n            students: [],\n            total: 0,\n            queryDto: {\n                name: '',\n                sex: '',\n                age: '',  \n                page: 1,\n                size: 5\n            }\n        }\n    }\n}\nexport default options;\n</script>\n```\n\n* sex 与  age 均用 `''` 表示用户没有选择的情况\n* age 取值 `0,20` 会被 spring 转换为 `new int[]{0, 20}`\n* age 取值 `''` 会被 spring 转换为 `new int[0]`\n\n\n\n#### 级联选择\n\n级联选择器中选项的数据结构为\n\n```js\n[\n    {value:100, label:'主页',children:[\n        {value:101, label:'菜单1', children:[\n            {value:105, label:'子项1'},\n            {value:106, label:'子项2'}\n        ]},\n        {value:102, label:'菜单2', children:[\n            {value:107, label:'子项3'},\n            {value:108, label:'子项4'},\n            {value:109, label:'子项5'}\n        ]},\n        {value:103, label:'菜单3', children:[\n            {value:110, label:'子项6'},\n            {value:111, label:'子项7'}\n        ]},\n        {value:104, label:'菜单4'}\n    ]}\n]\n```\n\n下面的例子是将后端返回的一维数组【树化】\n\n```vue\n<template>\n    <el-cascader :options=\"ops\"></el-cascader>\n</template>\n<script>\nimport axios from '../util/myaxios'\nconst options = {\n    async mounted() {\n        const resp = await axios.get('/api/menu')\n        console.log(resp.data.data)\n        const array = resp.data.data;\n\n        const map = new Map(); \n\n        // 1. 将所有数据存入 map 集合(为了接下来查找效率)\n        for(const {id,name,pid} of array) {\n            map.set(id, {value:id, label:name, pid:pid})\n        }\n        // 2. 建立父子关系\n        // 3. 找到顶层对象\n        const top = [];\n        for(const obj of map.values()) {\n            const parent = map.get(obj.pid);\n            if(parent !== undefined) {\n                parent.children ??= [];\n                parent.children.push(obj);\n            } else {\n                top.push(obj)\n            }\n        }\n        this.ops = top;\n    },\n    data(){\n        return {\n            ops: []\n        }\n    }\n};\nexport default options;\n</script>\n```\n\n\n\n### 2) Vue-Router\n\nvue 属于单页面应用，所谓的路由，就是根据浏览器路径不同，用不同的**视图组件**替换这个页面内容展示\n\n\n\n#### 配置路由\n\n新建一个路由 js 文件，例如 src/router/example14.js，内容如下\n\n```js\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport ContainerView from '@/views/example14/ContainerView.vue'\nimport LoginView from '@/views/example14/LoginView.vue'\nimport NotFoundView from '@/views/example14/NotFoundView.vue'\n\nVue.use(VueRouter)\n\nconst routes = [\n  {\n    path:'/',\n    component: ContainerView\n  },\n  {\n    path:'/login',\n    component: LoginView\n  },\n  {\n    path:'/404',\n    component: NotFoundView\n  }\n]\n\nconst router = new VueRouter({\n  routes\n})\n\nexport default router\n```\n\n* 最重要的就是建立了【路径】与【视图组件】之间的映射关系\n* 本例中映射了 3 个路径与对应的视图组件\n\n在 main.js 中采用我们的路由 js\n\n```js\nimport Vue from 'vue'\nimport e14 from './views/Example14View.vue'\nimport router from './router/example14'  // 修改这里\nimport store from './store'\nimport Element from 'element-ui'\nimport 'element-ui/lib/theme-chalk/index.css'\n\nVue.config.productionTip = false\n\nVue.use(Element)\nnew Vue({\n  router,\n  store,\n  render: h => h(e14)\n}).$mount('#app')\n```\n\n根组件是 Example14View.vue，内容为：\n\n```vue\n<template>\n    <div class=\"all\">\n        <router-view></router-view>\n    </div>\n</template>\n```\n\n* 样式略\n* 其中 `<router-view>` 起到占位作用，改变路径后，这个路径对应的视图组件就会占据 `<router-view>` 的位置，替换掉它之前的内容\n\n\n\n#### 动态导入\n\n```js\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\n\nVue.use(VueRouter)\n\nconst routes = [\n  {\n    path:'/',\n    component: () => import('@/views/example14/ContainerView.vue')\n  },\n  {\n    path:'/login',\n    component: () => import('@/views/example14/LoginView.vue')\n  },\n  {\n    path:'/404',\n    component: () => import('@/views/example14/NotFoundView.vue')\n  }\n]\n\nconst router = new VueRouter({\n  routes\n})\n\nexport default router\n```\n\n* 静态导入是将所有组件的 js 代码打包到一起，如果组件非常多，打包后的 js 文件会很大，影响页面加载速度\n* 动态导入是将组件的 js 代码放入独立的文件，用到时才加载\n\n\n\n#### 嵌套路由\n\n组件内再要切换内容，就需要用到嵌套路由（子路由），下面的例子是在【ContainerView 组件】内定义了 3 个子路由\n\n```js\nconst routes = [\n  {\n    path:'/',\n    component: () => import('@/views/example14/ContainerView.vue'),\n    redirect: '/c/p1',\n    children: [\n      { \n        path:'c/p1',\n        component: () => import('@/views/example14/container/P1View.vue')\n      },\n      { \n        path:'c/p2',\n        component: () => import('@/views/example14/container/P2View.vue')\n      },\n      { \n        path:'c/p3',\n        component: () => import('@/views/example14/container/P3View.vue')\n      }\n    ]\n  },\n  {\n    path:'/login',\n    component: () => import('@/views/example14/LoginView.vue')\n  },\n  {\n    path:'/404',\n    component: () => import('@/views/example14/NotFoundView.vue')\n  },\n  {\n    path:'*',\n    redirect: '/404'\n  }\n]\n```\n\n子路由变化，切换的是【ContainerView 组件】中 `<router-view></router-view>` 部分的内容\n\n```java\n<template>\n    <div class=\"container\">\n        <router-view></router-view>\n    </div>\n</template>\n```\n\n* redirect 可以用来重定向（跳转）到一个新的地址\n* path 的取值为 * 表示匹配不到其它 path 时，就会匹配它\n\n\n\n#### ElementUI 布局\n\n通常主页要做布局，下面的代码是 ElementUI 提供的【上-【左-右】】布局\n\n```vue\n<template>\n    <div class=\"container\">\n        <el-container>\n            <el-header></el-header>\n            <el-container>\n                <el-aside width=\"200px\"></el-aside>\n                <el-main>\n                    <router-view></router-view>\n                </el-main>\n            </el-container>\n        </el-container>\n    </div>\n</template>\n```\n\n\n\n#### 路由跳转\n\n##### 标签式\n\n```vue\n<el-aside width=\"200px\">\n    <router-link to=\"/c1/p1\">P1</router-link>\n    <router-link to=\"/c1/p2\">P2</router-link>\n    <router-link to=\"/c1/p3\">P3</router-link>\n</el-aside>\n```\n\n\n\n##### 编程式\n\n```vue\n<el-header>\n    <el-button type=\"primary\" icon=\"el-icon-edit\" \n               circle size=\"mini\" @click=\"jump('/c1/p1')\"></el-button>\n    <el-button type=\"success\" icon=\"el-icon-check\" \n               circle size=\"mini\" @click=\"jump('/c1/p2')\"></el-button>\n    <el-button type=\"warning\" icon=\"el-icon-star-off\" \n               circle size=\"mini\" @click=\"jump('/c1/p3')\"></el-button>\n</el-header>\n```\n\njump 方法\n\n```vue\n<script>\nconst options = {\n    methods : {\n        jump(url) {\n            this.$router.push(url);\n        }\n    }\n}\nexport default options;\n</script>\n```\n\n* 其中 this.$router 是拿到路由对象\n* push 方法根据 url 进行跳转\n\n\n\n##### 导航菜单\n\n```vue\n<el-menu router background-color=\"#545c64\" text-color=\"#fff\" active-text-color=\"#ffd04b\">\n    <el-submenu index=\"/c1\">\n        <span slot=\"title\">\n            <i class=\"el-icon-platform-eleme\"></i>\n            菜单1\n        </span>\n        <el-menu-item index=\"/c1/p1\">子项1</el-menu-item>\n        <el-menu-item index=\"/c1/p2\">子项2</el-menu-item>\n        <el-menu-item index=\"/c1/p3\">子项3</el-menu-item>\n    </el-submenu>\n    <el-menu-item index=\"/c2\">\n        <span slot=\"title\">\n            <i class=\"el-icon-phone\"></i>\n            菜单2\n        </span>\n    </el-menu-item>\n    <el-menu-item index=\"/c3\">\n        <span slot=\"title\">\n            <i class=\"el-icon-star-on\"></i>\n            菜单3\n        </span>\n    </el-menu-item>\n</el-menu>\n```\n\n* 图标和菜单项文字建议用 `<span slot='title'></span>` 包裹起来\n* `el-menu` 标签上加上 `router` 属性，表示结合导航菜单与路由对象，此时，就可以利用菜单项的 `index` 属性来路由跳转\n\n\n\n#### 动态路由与菜单\n\n将菜单、路由信息（仅主页的）存入数据库中\n\n```sql\ninsert into menu(id, name, pid, path, component, icon) values\n    (101, '菜单1', 0,   '/m1',    null,         'el-icon-platform-eleme'),\n    (102, '菜单2', 0,   '/m2',    null,         'el-icon-delete-solid'),\n    (103, '菜单3', 0,   '/m3',    null,         'el-icon-s-tools'),\n    (104, '菜单4', 0,   '/m4',    'M4View.vue', 'el-icon-user-solid'),\n    (105, '子项1', 101, '/m1/c1', 'C1View.vue', 'el-icon-s-goods'),\n    (106, '子项2', 101, '/m1/c2', 'C2View.vue', 'el-icon-menu'),\n    (107, '子项3', 102, '/m2/c3', 'C3View.vue', 'el-icon-s-marketing'),\n    (108, '子项4', 102, '/m2/c4', 'C4View.vue', 'el-icon-s-platform'),\n    (109, '子项5', 102, '/m2/c5', 'C5View.vue', 'el-icon-picture'),\n    (110, '子项6', 103, '/m3/c6', 'C6View.vue', 'el-icon-upload'),\n    (111, '子项7', 103, '/m3/c7', 'C7View.vue', 'el-icon-s-promotion');\n```\n\n不同的用户查询的的菜单、路由信息是不一样的\n\n例如：访问 `/api/menu/admin` 返回所有的数据\n\n```json\n[\n    {\n        \"id\": 102,\n        \"name\": \"菜单2\",\n        \"icon\": \"el-icon-delete-solid\",\n        \"path\": \"/m2\",\n        \"pid\": 0,\n        \"component\": null\n    },\n    {\n        \"id\": 107,\n        \"name\": \"子项3\",\n        \"icon\": \"el-icon-s-marketing\",\n        \"path\": \"/m2/c3\",\n        \"pid\": 102,\n        \"component\": \"C3View.vue\"\n    },\n    {\n        \"id\": 108,\n        \"name\": \"子项4\",\n        \"icon\": \"el-icon-s-platform\",\n        \"path\": \"/m2/c4\",\n        \"pid\": 102,\n        \"component\": \"C4View.vue\"\n    },\n    {\n        \"id\": 109,\n        \"name\": \"子项5\",\n        \"icon\": \"el-icon-picture\",\n        \"path\": \"/m2/c5\",\n        \"pid\": 102,\n        \"component\": \"C5View.vue\"\n    }\n]\n```\n\n访问 `/api/menu/wang` 返回\n\n```json\n[\n    {\n        \"id\": 103,\n        \"name\": \"菜单3\",\n        \"icon\": \"el-icon-s-tools\",\n        \"path\": \"/m3\",\n        \"pid\": 0,\n        \"component\": null\n    },\n    {\n        \"id\": 110,\n        \"name\": \"子项6\",\n        \"icon\": \"el-icon-upload\",\n        \"path\": \"/m3/c6\",\n        \"pid\": 103,\n        \"component\": \"C6View.vue\"\n    },\n    {\n        \"id\": 111,\n        \"name\": \"子项7\",\n        \"icon\": \"el-icon-s-promotion\",\n        \"path\": \"/m3/c7\",\n        \"pid\": 103,\n        \"component\": \"C7View.vue\"\n    }\n]\n```\n\n前端根据他们身份不同，动态添加路由和显示菜单\n\n##### 动态路由\n\n```js\nexport function addServerRoutes(array) {\n  for (const { id, path, component } of array) {\n    if (component !== null) {\n      // 动态添加路由\n      // 参数1：父路由名称\n      // 参数2：路由信息对象\n      router.addRoute('c', {\n        path: path,\n        name: id,\n        component: () => import(`@/views/example15/container/${component}`)\n      });\n    }\n  }\n}\n```\n\n* js 这边只保留几个固定路由，如主页、404 和 login\n* 以上方法执行时，将服务器返回的路由信息加入到名为 c 的父路由中去\n* 这里要注意组件路径，前面 @/views 是必须在 js 这边完成拼接的，否则 import 函数会失效\n\n##### 重置路由\n\n在用户注销时应当重置路由\n\n```js\nexport function resetRouter() {\n  router.matcher = new VueRouter({ routes }).matcher\n}\n```\n\n##### 页面刷新\n\n页面刷新后，会导致动态添加的路由失效，解决方法是将路由数据存入 sessionStorage\n\n```vue\n<script>\nimport axios from '@/util/myaxios'\nimport {resetRouter, addServerRoutes} from '@/router/example15'\nconst options = {\n    data() {\n        return {\n            username: 'admin'\n        }\n    },\n    methods: {\n        async login() {       \n            resetRouter(); // 重置路由     \n            const resp = await axios.get(`/api/menu/${this.username}`)\n            const array = resp.data.data;\n            // localStorage     即使浏览器关闭，存储的数据仍在\n            // sessionStorage   以标签页为单位，关闭标签页时，数据被清除\n            sessionStorage.setItem('serverRoutes', JSON.stringify(array))\n            addServerRoutes(array); // 动态添加路由\n            this.$router.push('/');\n        }\n    }\n}\nexport default options;\n</script>\n```\n\n页面刷新，重新创建路由对象时，从 sessionStorage 里恢复路由数据\n\n```js\nconst router = new VueRouter({\n  routes\n})\n\n// 从 sessionStorage 中恢复路由数据\nconst serverRoutes = sessionStorage.getItem('serverRoutes');\nif(serverRoutes) {\n  const array = JSON.parse(serverRoutes);\n  addServerRoutes(array) // 动态添加路由\n}\n```\n\n##### 动态菜单\n\n代码部分\n\n```vue\n<script>\nconst options = {\n    mounted() {\n        const serverRoutes = sessionStorage.getItem('serverRoutes');\n        const array = JSON.parse(serverRoutes);\n        const map = new Map();\n        for(const obj of array) {\n            map.set(obj.id, obj);\n        }\n        const top = [];\n        for(const obj of array) {\n            const parent = map.get(obj.pid);\n            if(parent) {\n                parent.children ??= [];\n                parent.children.push(obj);\n            } else {\n                top.push(obj);\n            }\n        }\n        this.top = top;\n    },\n    data() {\n        return {\n            top: []\n        }\n    }\n}\nexport default options;\n</script>\n```\n\n菜单部分\n\n```vue\n<el-menu router background-color=\"#545c64\" text-color=\"#fff\" active-text-color=\"#ffd04b\" :unique-opened=\"true\">\n    <template v-for=\"m1 of top\">\n<el-submenu v-if=\"m1.children\" :key=\"m1.id\" :index=\"m1.path\">\n    <span slot=\"title\">\n        <i :class=\"m1.icon\"></i> {{m1.name}}\n        </span>\n    <el-menu-item v-for=\"m2 of m1.children\" :key=\"m2.id\" :index=\"m2.path\">\n        <span slot=\"title\">\n            <i :class=\"m2.icon\"></i> {{m2.name}}\n        </span>\n        </el-menu-item>\n        </el-submenu>\n<el-menu-item v-else :key=\"m1.id\" :index=\"m1.path\">\n    <span slot=\"title\">\n        <i :class=\"m1.icon\"></i> {{m1.name}}\n        </span>\n        </el-menu-item>\n    </template>\n</el-menu>\n```\n\n* 没有考虑递归菜单问题，认为菜单只有两级\n\n\n\n### 3) Vuex\n\n#### 入门\n\nvuex 可以在多个组件之间共享数据，并且共享的数据是【响应式】的，即数据的变更能及时渲染到模板\n\n* 与之对比 localStorage 与 sessionStorage 也能共享数据，但缺点是数据并非【响应式】\n\n首先需要定义 state 与 mutations 他们一个用来读取共享数据，一个用来修改共享数据\n\nsrc/store/index.js\n\n```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\n/*\n  读取数据，走 state, getters\n  修改数据，走 mutations, actions\n*/\nexport default new Vuex.Store({\n  state: {\n    name: '',\n    age: 18\n  },\n  getters: {\n  },\n  mutations: {\n    updateName(state, name) {\n      state.name = name;\n    }\n  },\n  actions: {\n  },\n  modules: {\n  }\n})\n```\n\n修改共享数据\n\n```vue\n<template>\n    <div class=\"p\">\n        <el-input placeholder=\"请修改用户姓名\" \n            size=\"mini\" v-model=\"name\"></el-input>\n        <el-button type=\"primary\" size=\"mini\" @click=\"update()\">修改</el-button>\n    </div>\n</template>\n<script>\nconst options = {\n    methods: {\n        update(){\n            this.$store.commit('updateName', this.name);\n        }\n    },\n    data () {\n        return {\n            name:''\n        }\n    }\n}\nexport default options;\n</script>\n```\n\n* mutations 方法不能直接调用，只能通过 `store.commit(mutation方法名, 参数)` 来间接调用\n\n读取共享数据\n\n```vue\n<template>\n    <div class=\"container\">\n        <el-container>\n            <el-header>\n                <div class=\"t\">\n                    欢迎您：{{ $store.state.name }}, {{ $store.state.age }}\n    \t\t\t</div>\n            </el-header>\n            <el-container>\n                <el-aside width=\"200px\">\n                </el-aside>\n                <el-main>\n                    <router-view></router-view>\n                </el-main>\n            </el-container>\n        </el-container>\n    </div>\n</template>\n```\n\n\n\n#### mapState\n\n每次去写 `$store.state.name` 这样的代码显得非常繁琐，可以用 vuex 帮我们生成计算属性\n\n```vue\n<template>\n    <div class=\"container\">\n        <el-container>\n            <el-header>\n                <div class=\"t\">欢迎您：{{ name }}, {{ age }}</div>\n            </el-header>\n            <el-container>\n                <el-aside width=\"200px\">\n                </el-aside>\n                <el-main>\n                    <router-view></router-view>\n                </el-main>\n            </el-container>\n        </el-container>\n    </div>\n</template>\n<script>\nimport { mapState } from 'vuex'\nconst options = {\n    computed: {\n        ...mapState(['name', 'age'])\n    }\n}\nexport default options;\n</script>\n```\n\n* mapState 返回的是一个对象，对象内包含了 name() 和 age() 的这两个方法作为计算属性\n* 此对象配合 `...` 展开运算符，填充入 computed 即可使用\n\n\n\n#### mapMutations\n\n```vue\n<template>\n    <div class=\"p\">\n        <el-input placeholder=\"请修改用户姓名\" \n            size=\"mini\" v-model=\"name\"></el-input>\n        <el-button type=\"primary\" size=\"mini\" @click=\"updateName(name)\">修改</el-button>\n    </div>\n</template>\n<script>\nimport {mapMutations} from 'vuex'\nconst options = {\n    methods: {\n        ...mapMutations(['updateName'])\n    },\n    data () {\n        return {\n            name:''\n        }\n    }\n}\nexport default options;\n</script>\n```\n\n* 类似的，调用 mutation 修改共享数据也可以简化\n* mapMutations 返回的对象中包含的方法，就会调用 store.commit() 来执行 mutation 方法\n* 注意参数传递略有不同\n\n\n\n#### actions\n\nmutations 方法内不能包括修改不能立刻生效的代码，否则会造成 Vuex 调试工具工作不准确，必须把这些代码写在 actions 方法中\n\n```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\n/*\n  读取数据，走 state, getters\n  修改数据，走 mutations, actions\n*/\nimport axios from '@/util/myaxios'\nexport default new Vuex.Store({\n  state: {\n    name: '',\n    age: 18\n  },\n  getters: {\n  },\n  mutations: {\n    updateName(state, name) {\n      state.name = name;\n    },\n    // 错误的用法，如果在mutations方法中包含了异步操作，会造成开发工具不准确\n    /* async updateServerName(state) {\n      const resp = await axios.get('/api/user');\n      const {name, age} = resp.data.data;\n      state.name = name;\n      state.age = age;\n    } */\n    updateServerName(state, user) {\n      const { name, age } = user;\n      state.name = name;\n      state.age = age;\n    }\n  },\n  actions: {\n    async updateServerName(context) {\n      const resp = await axios.get('/api/user');\n      context.commit('updateServerName', resp.data.data)\n    }\n  },\n  modules: {\n  }\n})\n```\n\n* 首先应当调用 actions 的 updateServerName 获取数据\n* 然后再由它间接调用 mutations 的 updateServerName 更新共享数据\n\n页面使用 actions 的方法可以这么写\n\n```vue\n<template>\n    <div class=\"p\">\n        <el-button type=\"primary\" size=\"mini\"\n            @click=\"updateServerName()\">从服务器获取数据,存入store</el-button>\n    </div>\n</template>\n<script>\nimport { mapActions } from 'vuex'\nconst options = {\n    methods: {\n        ...mapActions(['updateServerName'])\n    }\n}\nexport default options;\n</script>\n```\n\n* mapActions 会生成调用 actions 中方法的代码\n\n* 调用 actions 的代码内部等价于，它返回的是 Promise 对象，可以用同步或异步方式接收结果\n\n  ```js\n  this.$store.dispatch('action名称', 参数)\n  ```","source":"_posts/09_Java程序员要掌握的前端-vue2.md","raw":"---\ntitle:  Vue2知识点总结\ntags: [编程,学习,Vue2,前端]\ncategories: [Vue2]\ndate: 2022-11-3\n\n---\n\n# Vue 2\n\n## 1. Vue 基础\n\n### 1) 环境准备\n\n#### 安装脚手架\n\n```\nnpm install -g @vue/cli\n```\n\n* -g 参数表示全局安装，这样在任意目录都可以使用 vue 脚本创建项目\n\n#### 创建项目\n\n```cmd\nvue ui\n```\n\n#### 安装 devtools\n\n* devtools 插件网址：https://devtools.vuejs.org/guide/installation.html\n\n\n#### 运行项目\n\n进入项目目录，执行\n\n```cmd\nnpm run serve\n```\n\n#### 修改端口\n\n前端服务器默认占用了 8080 端口，需要修改一下\n\n* 文档地址：[DevServer | webpack](https://webpack.js.org/configuration/dev-server/#devserverport)\n\n* 打开 vue.config.js 添加\n\n  ```js\n  const { defineConfig } = require('@vue/cli-service')\n  module.exports = defineConfig({\n    \n    // ...\n      \n    devServer: {\n      port: 7070\n    }\n    \n  })\n  ```\n\n#### 添加代理\n\n为了避免前后端服务器联调时， fetch、xhr 请求产生跨域问题，需要配置代理\n\n* 文档地址同上\n\n* 打开 vue.config.js 添加\n\n  ```js\n  const { defineConfig } = require('@vue/cli-service')\n  module.exports = defineConfig({\n      \n    // ...\n      \n    devServer: {\n      port: 7070,\n      proxy: {\n        '/api': {\n          target: 'http://localhost:8080',\n          changeOrigin: true\n        }\n      }\n    }\n      \n  })\n  ```\n\n  \n\n#### Vue 项目结构\n\n```\nPS D:\\2022.js\\代码\\第3章\\client> tree src\nD:\\2022.JS\\代码\\第3章\\CLIENT\\SRC\n├─assets\n├─components\n├─router\n├─store\n└─views\n```\n\n* assets - 静态资源\n* components - 可重用组件\n* router - 路由\n* store - 数据共享\n* views - 视图组件\n\n以后还会添加\n\n* api - 跟后台交互，发送 fetch、xhr 请求，接收响应\n* plugins - 插件\n\n\n\n### 2) Vue 组件\n\nVue 的组件文件以 .vue 结尾，每个组件由三部分组成\n\n```vue\n<template></template>\n\n<script></script>\n\n<style></style>\n```\n\n* template 模板部分，由它生成 html 代码\n* script 代码部分，控制模板的数据来源和行为\n* style 样式部分，一般不咋关心\n\n\n\n入口组件是 App.vue\n\n先删除原有代码，来个 Hello, World 例子\n\n```vue\n<template>\n  <h1>{{msg}}</h1>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      msg: \"Hello, Vue!\"\n    }\n  }\n}\n</script>\n```\n\n解释\n\n* export default 导出组件对象，供 main.js 导入使用\n* 这个对象有一个 data 方法，返回一个**对象**，给 template 提供数据\n* 双括号 在 Vue 里称之为插值表达式，用来**绑定** data 方法返回的**对象**属性，**绑定**的含义是数据发生变化时，页面显示会同步变化\n\n\n\n#### 文本插值\n\n```vue\n<template>\n    <div>\n        <h1>{{ name }}</h1>\n        <h1>{{ age > 60 ? '老年' : '青年' }}</h1>\n    </div>\n</template>\n<script>\nconst options = {\n    data: function () {\n        return { name: '张三', age: 70 };\n    }\n};\nexport default options;\n</script>\n```\n\n* 双括号 里只能绑定一个属性，绑定多个属性需要用多个 双括号 分别绑定\n* template 内只能有一个根元素\n* 插值内可以进行简单的表达式计算\n\n\n\n#### 属性绑定\n\n```vue\n<template>\n    <div>\n        <div><input type=\"text\" v-bind:value=\"name\"></div>\n        <div><input type=\"date\" v-bind:value=\"birthday\"></div>\n        <div><input type=\"text\" :value=\"age\"></div>\n    </div>\n</template>\n<script>\nconst options = {\n    data: function () {\n        return { name: '王五', birthday: '1995-05-01', age: 20 };\n    }\n};\nexport default options;\n</script>\n```\n\n* 简写方式：可以省略 v-bind 只保留冒号\n\n\n\n#### 事件绑定\n\n```vue\n<!-- 事件绑定 -->\n<template>\n    <div>\n        <div><input type=\"button\" value=\"点我执行m1\" v-on:click=\"m1\"></div>\n        <div><input type=\"button\" value=\"点我执行m2\" @click=\"m2\"></div>\n        <div>{{count}}</div>\n    </div>\n</template>\n<script>\nconst options = {\n    data: function () {\n        return { count: 0 };\n    },\n    methods: {\n        m1() {\n            this.count ++;\n            console.log(\"m1\")\n        },\n        m2() {\n            this.count --;\n            console.log(\"m2\")\n        }\n    }\n};\nexport default options;\n</script>\n```\n\n* 简写方式：可以把 v-on: 替换为 @\n* 在 methods 方法中的 this 代表的是 data 函数返回的数据对象\n\n\n\n#### 双向绑定\n\n```vue\n<template>\n    <div>\n        <div>\n            <label for=\"\">请输入姓名</label>\n            <input type=\"text\" v-model=\"name\">\n        </div>\n        <div>\n            <label for=\"\">请输入年龄</label>\n            <input type=\"text\" v-model=\"age\">\n        </div>\n        <div>\n            <label for=\"\">请选择性别</label>\n            男 <input type=\"radio\" value=\"男\" v-model=\"sex\">\n            女 <input type=\"radio\" value=\"女\" v-model=\"sex\">\n        </div>\n        <div>\n            <label for=\"\">请选择爱好</label>\n            游泳 <input type=\"checkbox\" value=\"游泳\" v-model=\"fav\">\n            打球 <input type=\"checkbox\" value=\"打球\" v-model=\"fav\">\n            健身 <input type=\"checkbox\" value=\"健身\" v-model=\"fav\">\n        </div>\n    </div>\n</template>\n<script>\nconst options = {\n    data: function () {\n        return { name: '', age: null, sex:'男' , fav:['打球']};\n    },\n    methods: {\n    }\n};\nexport default options;\n</script>\n```\n\n* 用 v-model 实现双向绑定，即 \n  * javascript 数据可以同步到表单标签\n  * 反过来用户在表单标签输入的新值也会同步到 javascript 这边\n* 双向绑定只适用于表单这种带【输入】功能的标签，其它标签的数据绑定，单向就足够了\n* 复选框这种标签，双向绑定的 javascript 数据类型一般用数组\n\n\n\n#### 计算属性\n\n```vue\n<!-- 计算属性 -->\n<template>\n    <div>\n        <h2>{{fullName}}</h2>\n        <h2>{{fullName}}</h2>\n        <h2>{{fullName}}</h2>\n    </div>\n</template>\n<script>\nconst options = {\n    data: function () {\n        return { firstName: '三', lastName: '张' };\n    },\n    /* methods: {\n        fullName() {\n            console.log('进入了 fullName')\n            return this.lastName + this.firstName;\n        }\n    },*/\n    computed: {\n        fullName() {\n            console.log('进入了 fullName')\n            return this.lastName + this.firstName;\n        }\n    }\n};\nexport default options;\n```\n\n* 普通方法调用必须加 ()，没有缓存功能\n* 计算属性使用时就把它当属性来用，不加 ()，有缓存功能：\n  * 一次计算后，会将结果缓存，下次再计算时，只要数据没有变化，不会重新计算，直接返回缓存结果\n\n\n\n#### axios\n\naxios 它的底层是用了 XMLHttpRequest（xhr）方式发送请求和接收响应，xhr 相对于之前讲过的 fetch api 来说，功能更强大，但由于是比较老的 api，不支持 Promise，axios 对 xhr 进行了封装，使之支持 Promise，并提供了对请求、响应的统一拦截功能\n\n安装\n\n```cmd\nnpm install axios -S\n```\n\n导入\n\n```js\nimport axios from 'axios'\n```\n\n* axios 默认导出一个对象，这里的 import 导入的就是它默认导出的对象\n\n方法\n\n| 请求                               | 备注   |\n| ---------------------------------- | ------ |\n| axios.get(url[, config])           | :star: |\n| axios.delete(url[, config])        |        |\n| axios.head(url[, config])          |        |\n| axios.options(url[, config])       |        |\n| axios.post(url[, data[, config]])  | :star: |\n| axios.put(url[, data[, config]])   |        |\n| axios.patch(url[, data[, config]]) |        |\n\n* config - 选项对象、例如查询参数、请求头...\n* data - 请求体数据、最常见的是 json 格式数据\n* get、head 请求无法携带请求体，这应当是浏览器的限制所致（xhr、fetch api 均有限制）\n* options、delete 请求可以通过 config 中的 data 携带请求体\n\n\n\n例子\n\n```vue\n<template>\n    <div>\n        <input type=\"button\" value=\"获取远程数据\" @click=\"sendReq()\">\n    </div>\n</template>\n<script>\nimport axios from 'axios'\nconst options = {\n    methods: {\n        async sendReq() {\n            // 1. 演示 get, post\n            // const resp = await axios.post('/api/a2');\n\n            // 2. 发送请求头\n            // const resp = await axios.post('/api/a3',{},{\n            //     headers:{\n            //         Authorization:'abc'\n            //     }\n            // });\n\n            // 3. 发送请求时携带查询参数 ?name=xxx&age=xxx\n            // const name = encodeURIComponent('&&&');\n            // const age = 18;\n            // const resp = await axios.post(`/api/a4?name=${name}&age=${age}`);\n\n            // 不想自己拼串、处理特殊字符、就用下面的办法\n            // const resp = await axios.post('/api/a4', {}, {\n            //     params: {\n            //         name:'&&&&',\n            //         age: 20\n            //     }\n            // });\n\n            // 4. 用请求体发数据，格式为 urlencoded\n            // const params = new URLSearchParams();\n            // params.append(\"name\", \"张三\");\n            // params.append(\"age\", 24)\n\n            // const resp = await axios.post('/api/a4', params);\n\n            // 5. 用请求体发数据，格式为 multipart\n            // const params = new FormData();\n            // params.append(\"name\", \"李四\");\n            // params.append(\"age\", 30);\n            // const resp = await axios.post('/api/a5', params);\n\n            // 6. 用请求体发数据，格式为 json\n            const resp = await axios.post('/api/a5json', {\n                name: '王五',\n                age: 50\n            });\n\n            console.log(resp);\n        }\n    }\n};\nexport default options;\n</script>\n```\n\n\n\n创建实例\n\n```js\nconst _axios = axios.create(config);\n```\n\n* axios 对象可以直接使用，但使用的是默认的设置\n* 用 axios.create 创建的对象，可以覆盖默认设置，config 见下面说明\n\n\n\n常见的 config 项有\n\n| 名称            | 含义                                                       |\n| --------------- | ---------------------------------------------------------- |\n| baseURL         | 将自动加在 url 前面                                        |\n| headers         | 请求头，类型为简单对象                                     |\n| params          | 跟在 URL 后的请求参数，类型为简单对象或 URLSearchParams    |\n| data            | 请求体，类型有简单对象、FormData、URLSearchParams、File 等 |\n| withCredentials | 跨域时是否携带 Cookie 等凭证，默认为 false                 |\n| responseType    | 响应类型，默认为 json                                      |\n\n例\n\n```js\nconst _axios = axios.create({\n    baseURL: 'http://localhost:8080',\n    withCredentials: true\n});\nawait _axios.post('/api/a6set')\nawait _axios.post('/api/a6get')\n```\n\n* 生产环境希望 xhr 请求不走代理，可以用 baseURL 统一修改\n* 希望跨域请求携带 cookie，需要配置 withCredentials: true，服务器也要配置 allowCredentials = true，否则浏览器获取跨域返回的 cookie 时会报错\n\n\n\n响应格式\n\n| 名称    | 含义              |\n| ------- | ----------------- |\n| data    | 响应体数据 :star: |\n| status  | 状态码 :star:     |\n| headers | 响应头            |\n\n* 200 表示响应成功\n* 400 请求数据不正确 age=abc\n* 401 身份验证没通过\n* 403 没有权限\n* 404 资源不存在\n* 405 不支持请求方式 post\n* 500 服务器内部错误\n\n\n\n请求拦截器\n\n```js\n_axios.interceptors.request.use(\n  function(config) {\n    // 比如在这里添加统一的 headers\n    return config;\n  },\n  function(error) {\n    return Promise.reject(error);\n  }\n);\n```\n\n响应拦截器\n\n```js\n_axios.interceptors.response.use(\n  function(response) {\n    // 2xx 范围内走这里\n    return response;\n  },\n  function(error) {\n    // 超出 2xx, 比如 4xx, 5xx 走这里\n    return Promise.reject(error);\n  }\n);\n```\n\n\n\n#### 条件渲染\n\n```vue\n<template>\n    <div>\n        <input type=\"button\" value=\"获取远程数据\" @click=\"sendReq()\">\n        <div class=\"title\">学生列表</div>\n        <div class=\"thead\">\n            <div class=\"row bold\">\n                <div class=\"col\">编号</div>\n                <div class=\"col\">姓名</div>\n                <div class=\"col\">性别</div>\n                <div class=\"col\">年龄</div>\n            </div>\n        </div>\n        <div class=\"tbody\">\n            <div class=\"row\" v-if=\"students.length > 0\">显示学生数据</div>\n            <div class=\"row\" v-else>暂无学生数据</div>\n        </div>\n    </div>\n</template>\n<script>\nimport axios from '../util/myaxios'\nconst options = {\n    data: function() {\n        return {\n            students: []\n        };\n    },\n    methods : {\n        async sendReq() {\n            const resp = await axios.get(\"/api/students\");\n            console.log(resp.data.data)\n            this.students = resp.data.data;\n        }\n    }\n};\nexport default options;\n</script>\n<style scoped>\n    div {\n        font-family: 华文行楷;\n        font-size: 20px;\n    }\n\n    .title {\n        margin-bottom: 10px;\n        font-size: 30px;\n        color: #333;\n        text-align: center;\n    }\n\n    .row {\n        background-color: #fff;\n        display: flex;\n        justify-content: center;\n    }\n\n    .col {\n        border: 1px solid #f0f0f0;\n        width: 15%;\n        height: 35px;\n        text-align: center;\n        line-height: 35px;\n    }\n\n    .bold .col {\n        background-color: #f1f1f1;\n    }\n</style>\n```\n\n\n\n#### 列表渲染\n\n```vue\n<template>\n    <div>\n        <!-- <input type=\"button\" value=\"获取远程数据\" @click=\"sendReq()\"> -->\n        <div class=\"title\">学生列表</div>\n        <div class=\"thead\">\n            <div class=\"row bold\">\n                <div class=\"col\">编号</div>\n                <div class=\"col\">姓名</div>\n                <div class=\"col\">性别</div>\n                <div class=\"col\">年龄</div>\n            </div>\n        </div>\n        <div class=\"tbody\">\n            <div v-if=\"students.length > 0\">\n                <div class=\"row\" v-for=\"s of students\" :key=\"s.id\">\n                    <div class=\"col\">{{s.id}}</div>\n                    <div class=\"col\">{{s.name}}</div>\n                    <div class=\"col\">{{s.sex}}</div>\n                    <div class=\"col\">{{s.age}}</div>\n                </div>\n            </div>\n            <div class=\"row\" v-else>暂无学生数据</div>\n        </div>\n    </div>\n</template>\n<script>\nimport axios from '../util/myaxios'\nconst options = {\n    mounted: function(){\n        this.sendReq()\n    },\n    data: function() {\n        return {\n            students: []\n        };\n    },\n    methods : {\n        async sendReq() {\n            const resp = await axios.get(\"/api/students\");\n            console.log(resp.data.data)\n            this.students = resp.data.data;\n        }\n    }\n};\nexport default options;\n</script>\n<style scoped>\n    div {\n        font-family: 华文行楷;\n        font-size: 20px;\n    }\n\n    .title {\n        margin-bottom: 10px;\n        font-size: 30px;\n        color: #333;\n        text-align: center;\n    }\n\n    .row {\n        background-color: #fff;\n        display: flex;\n        justify-content: center;\n    }\n\n    .col {\n        border: 1px solid #f0f0f0;\n        width: 15%;\n        height: 35px;\n        text-align: center;\n        line-height: 35px;\n    }\n\n    .bold .col {\n        background-color: #f1f1f1;\n    }\n</style>\n```\n\n* v-if 和 v-for 不能用于同一个标签\n* v-for 需要配合特殊的标签属性 key 一起使用，并且 key 属性要绑定到一个能起到唯一标识作用的数据上，本例绑定到了学生编号上\n* options 的 mounted 属性对应一个函数，此函数会在组件挂载后（准备就绪）被调用，可以在它内部发起请求，去获取学生数据\n\n\n\n#### 重用组件\n\n按钮组件\n\n```vue\n<template>\n    <div class=\"button\" :class=\"[type,size]\">\n        a<slot></slot>b\n    </div>\n</template>\n<script>\nconst options = {\n    props: [\"type\", \"size\"]\n};\nexport default options;\n</script>\n```\n\n* 注意，省略了样式部分\n\n使用组件\n\n```vue\n<template>\n    <div>\n        <h1>父组件</h1>\n        <my-button type=\"primary\" size=\"small\">1</my-button>\n        <my-button type=\"danger\" size=\"middle\">2</my-button>\n        <my-button type=\"success\" size=\"large\">3</my-button>\n    </div>\n</template>\n<script>\nimport MyButton from '../components/MyButton.vue'\nconst options = {\n    components: {\n        MyButton\n    }\n};\nexport default options;\n</script>\n```\n\n\n\n## 2. Vue 进阶\n\n### 1) ElementUI\n\n安装\n\n```cmd\nnpm install element-ui -S\n```\n\n\n\n引入组件\n\n```js\nimport Element from 'element-ui'\nimport 'element-ui/lib/theme-chalk/index.css'\n\nVue.use(Element)\n```\n\n\n\n测试，在自己的组件中使用 ElementUI 的组件\n\n```vue\n<el-button>按钮</el-button>\n```\n\n\n\n#### 表格组件\n\n```vue\n<template>\n    <div>\n        <el-table :data=\"students\">\n            <el-table-column label=\"编号\" prop=\"id\"></el-table-column>\n            <el-table-column label=\"姓名\" prop=\"name\"></el-table-column>\n            <el-table-column label=\"性别\" prop=\"sex\"></el-table-column>\n            <el-table-column label=\"年龄\" prop=\"age\"></el-table-column>\n        </el-table>\n    </div>\n</template>\n<script>\nimport axios from '../util/myaxios'\nconst options = {\n    async mounted() {\n        const resp = await axios.get('/api/students');\n        this.students = resp.data.data\n    },\n    data() {\n        return {\n            students: []\n        }\n    }\n}\nexport default options;\n</script>\n```\n\n\n\n#### 分页组件\n\n```vue\n<template>\n    <div>\n        <el-table v-bind:data=\"students\">\n            <el-table-column label=\"编号\" prop=\"id\"></el-table-column>\n            <el-table-column label=\"姓名\" prop=\"name\"></el-table-column>\n            <el-table-column label=\"性别\" prop=\"sex\"></el-table-column>\n            <el-table-column label=\"年龄\" prop=\"age\"></el-table-column>\n        </el-table>\n        <el-pagination \n            :total=\"total\"\n            :page-size=\"queryDto.size\"\n            :current-page=\"queryDto.page\"\n            layout=\"prev,pager,next,sizes,->,total\"\n            :page-sizes=\"[5,10,15,20]\"\n            @current-change=\"currentChange\"\n            @size-change=\"sizeChange\"\n        ></el-pagination>\n    </div>\n</template>\n<script>\nimport axios from '../util/myaxios'\nconst options = {\n    mounted() {\n        this.query();\n    },\n    methods: {\n        currentChange(page) {\n            this.queryDto.page = page;\n            this.query();\n        },\n        sizeChange(size){\n            this.queryDto.size = size;\n            this.query();\n        },\n        async query() {\n            const resp = await axios.get('/api/students/q', {\n                params: this.queryDto\n            });\n            this.students = resp.data.data.list;\n            this.total = resp.data.data.total;\n        }\n    },\n    data() {\n        return {\n            students: [],\n            total: 0,\n            queryDto: {\n                page: 1,\n                size: 5\n            }\n        }\n    }\n}\nexport default options;\n</script>\n```\n\n* 三种情况都应该触发查询\n  * mounted 组件挂载完成后\n  * 页号变化时\n  * 页大小变化时\n* 查询传参应该根据后台需求，灵活采用不同方式\n  * 本例中因为是 get 请求，无法采用请求体，只能用 params 方式传参\n* 返回响应的格式也许会很复杂，需要掌握【根据返回的响应结构，获取数据】的能力\n\n\n\n#### 分页搜索\n\n```vue\n<template>\n    <div>\n        <el-input placeholder=\"请输入姓名\" size=\"mini\" v-model=\"queryDto.name\"></el-input>\n        <el-select placeholder=\"请选择性别\" size=\"mini\" v-model=\"queryDto.sex\" clearable>\n            <el-option value=\"男\"></el-option>\n            <el-option value=\"女\"></el-option>\n        </el-select>\n        <el-select placeholder=\"请选择年龄\" size=\"mini\" v-model=\"queryDto.age\" clearable>\n            <el-option value=\"0,20\" label=\"0到20岁\"></el-option>\n            <el-option value=\"21,30\" label=\"21到30岁\"></el-option>\n            <el-option value=\"31,40\" label=\"31到40岁\"></el-option>\n            <el-option value=\"41,120\" label=\"41到120岁\"></el-option>\n        </el-select>\n        <el-button type=\"primary\" size=\"mini\" @click=\"search()\">搜索</el-button>\n        <el-divider></el-divider>\n        <el-table v-bind:data=\"students\">\n            <el-table-column label=\"编号\" prop=\"id\"></el-table-column>\n            <el-table-column label=\"姓名\" prop=\"name\"></el-table-column>\n            <el-table-column label=\"性别\" prop=\"sex\"></el-table-column>\n            <el-table-column label=\"年龄\" prop=\"age\"></el-table-column>\n        </el-table>\n        <el-pagination :total=\"total\" :page-size=\"queryDto.size\" :current-page=\"queryDto.page\"\n            layout=\"prev,pager,next,sizes,->,total\" :page-sizes=\"[5, 10, 15, 20]\" @current-change=\"currentChange\"\n            @size-change=\"sizeChange\"></el-pagination>\n    </div>\n</template>\n<script>\nimport axios from '../util/myaxios'\nconst options = {\n    mounted() {\n        this.query();\n    },\n    methods: {\n        currentChange(page) {\n            this.queryDto.page = page;\n            this.query();\n        },\n        sizeChange(size) {\n            this.queryDto.size = size;\n            this.query();\n        },\n        async query() {\n            const resp = await axios.get('/api/students/q', {\n                params: this.queryDto\n            });\n            this.students = resp.data.data.list;\n            this.total = resp.data.data.total;\n        },\n        search() {\n            this.query();\n        }\n    },\n    data() {\n        return {\n            students: [],\n            total: 0,\n            queryDto: {\n                name: '',\n                sex: '',\n                age: '',  \n                page: 1,\n                size: 5\n            }\n        }\n    }\n}\nexport default options;\n</script>\n```\n\n* sex 与  age 均用 `''` 表示用户没有选择的情况\n* age 取值 `0,20` 会被 spring 转换为 `new int[]{0, 20}`\n* age 取值 `''` 会被 spring 转换为 `new int[0]`\n\n\n\n#### 级联选择\n\n级联选择器中选项的数据结构为\n\n```js\n[\n    {value:100, label:'主页',children:[\n        {value:101, label:'菜单1', children:[\n            {value:105, label:'子项1'},\n            {value:106, label:'子项2'}\n        ]},\n        {value:102, label:'菜单2', children:[\n            {value:107, label:'子项3'},\n            {value:108, label:'子项4'},\n            {value:109, label:'子项5'}\n        ]},\n        {value:103, label:'菜单3', children:[\n            {value:110, label:'子项6'},\n            {value:111, label:'子项7'}\n        ]},\n        {value:104, label:'菜单4'}\n    ]}\n]\n```\n\n下面的例子是将后端返回的一维数组【树化】\n\n```vue\n<template>\n    <el-cascader :options=\"ops\"></el-cascader>\n</template>\n<script>\nimport axios from '../util/myaxios'\nconst options = {\n    async mounted() {\n        const resp = await axios.get('/api/menu')\n        console.log(resp.data.data)\n        const array = resp.data.data;\n\n        const map = new Map(); \n\n        // 1. 将所有数据存入 map 集合(为了接下来查找效率)\n        for(const {id,name,pid} of array) {\n            map.set(id, {value:id, label:name, pid:pid})\n        }\n        // 2. 建立父子关系\n        // 3. 找到顶层对象\n        const top = [];\n        for(const obj of map.values()) {\n            const parent = map.get(obj.pid);\n            if(parent !== undefined) {\n                parent.children ??= [];\n                parent.children.push(obj);\n            } else {\n                top.push(obj)\n            }\n        }\n        this.ops = top;\n    },\n    data(){\n        return {\n            ops: []\n        }\n    }\n};\nexport default options;\n</script>\n```\n\n\n\n### 2) Vue-Router\n\nvue 属于单页面应用，所谓的路由，就是根据浏览器路径不同，用不同的**视图组件**替换这个页面内容展示\n\n\n\n#### 配置路由\n\n新建一个路由 js 文件，例如 src/router/example14.js，内容如下\n\n```js\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport ContainerView from '@/views/example14/ContainerView.vue'\nimport LoginView from '@/views/example14/LoginView.vue'\nimport NotFoundView from '@/views/example14/NotFoundView.vue'\n\nVue.use(VueRouter)\n\nconst routes = [\n  {\n    path:'/',\n    component: ContainerView\n  },\n  {\n    path:'/login',\n    component: LoginView\n  },\n  {\n    path:'/404',\n    component: NotFoundView\n  }\n]\n\nconst router = new VueRouter({\n  routes\n})\n\nexport default router\n```\n\n* 最重要的就是建立了【路径】与【视图组件】之间的映射关系\n* 本例中映射了 3 个路径与对应的视图组件\n\n在 main.js 中采用我们的路由 js\n\n```js\nimport Vue from 'vue'\nimport e14 from './views/Example14View.vue'\nimport router from './router/example14'  // 修改这里\nimport store from './store'\nimport Element from 'element-ui'\nimport 'element-ui/lib/theme-chalk/index.css'\n\nVue.config.productionTip = false\n\nVue.use(Element)\nnew Vue({\n  router,\n  store,\n  render: h => h(e14)\n}).$mount('#app')\n```\n\n根组件是 Example14View.vue，内容为：\n\n```vue\n<template>\n    <div class=\"all\">\n        <router-view></router-view>\n    </div>\n</template>\n```\n\n* 样式略\n* 其中 `<router-view>` 起到占位作用，改变路径后，这个路径对应的视图组件就会占据 `<router-view>` 的位置，替换掉它之前的内容\n\n\n\n#### 动态导入\n\n```js\nimport Vue from 'vue'\nimport VueRouter from 'vue-router'\n\nVue.use(VueRouter)\n\nconst routes = [\n  {\n    path:'/',\n    component: () => import('@/views/example14/ContainerView.vue')\n  },\n  {\n    path:'/login',\n    component: () => import('@/views/example14/LoginView.vue')\n  },\n  {\n    path:'/404',\n    component: () => import('@/views/example14/NotFoundView.vue')\n  }\n]\n\nconst router = new VueRouter({\n  routes\n})\n\nexport default router\n```\n\n* 静态导入是将所有组件的 js 代码打包到一起，如果组件非常多，打包后的 js 文件会很大，影响页面加载速度\n* 动态导入是将组件的 js 代码放入独立的文件，用到时才加载\n\n\n\n#### 嵌套路由\n\n组件内再要切换内容，就需要用到嵌套路由（子路由），下面的例子是在【ContainerView 组件】内定义了 3 个子路由\n\n```js\nconst routes = [\n  {\n    path:'/',\n    component: () => import('@/views/example14/ContainerView.vue'),\n    redirect: '/c/p1',\n    children: [\n      { \n        path:'c/p1',\n        component: () => import('@/views/example14/container/P1View.vue')\n      },\n      { \n        path:'c/p2',\n        component: () => import('@/views/example14/container/P2View.vue')\n      },\n      { \n        path:'c/p3',\n        component: () => import('@/views/example14/container/P3View.vue')\n      }\n    ]\n  },\n  {\n    path:'/login',\n    component: () => import('@/views/example14/LoginView.vue')\n  },\n  {\n    path:'/404',\n    component: () => import('@/views/example14/NotFoundView.vue')\n  },\n  {\n    path:'*',\n    redirect: '/404'\n  }\n]\n```\n\n子路由变化，切换的是【ContainerView 组件】中 `<router-view></router-view>` 部分的内容\n\n```java\n<template>\n    <div class=\"container\">\n        <router-view></router-view>\n    </div>\n</template>\n```\n\n* redirect 可以用来重定向（跳转）到一个新的地址\n* path 的取值为 * 表示匹配不到其它 path 时，就会匹配它\n\n\n\n#### ElementUI 布局\n\n通常主页要做布局，下面的代码是 ElementUI 提供的【上-【左-右】】布局\n\n```vue\n<template>\n    <div class=\"container\">\n        <el-container>\n            <el-header></el-header>\n            <el-container>\n                <el-aside width=\"200px\"></el-aside>\n                <el-main>\n                    <router-view></router-view>\n                </el-main>\n            </el-container>\n        </el-container>\n    </div>\n</template>\n```\n\n\n\n#### 路由跳转\n\n##### 标签式\n\n```vue\n<el-aside width=\"200px\">\n    <router-link to=\"/c1/p1\">P1</router-link>\n    <router-link to=\"/c1/p2\">P2</router-link>\n    <router-link to=\"/c1/p3\">P3</router-link>\n</el-aside>\n```\n\n\n\n##### 编程式\n\n```vue\n<el-header>\n    <el-button type=\"primary\" icon=\"el-icon-edit\" \n               circle size=\"mini\" @click=\"jump('/c1/p1')\"></el-button>\n    <el-button type=\"success\" icon=\"el-icon-check\" \n               circle size=\"mini\" @click=\"jump('/c1/p2')\"></el-button>\n    <el-button type=\"warning\" icon=\"el-icon-star-off\" \n               circle size=\"mini\" @click=\"jump('/c1/p3')\"></el-button>\n</el-header>\n```\n\njump 方法\n\n```vue\n<script>\nconst options = {\n    methods : {\n        jump(url) {\n            this.$router.push(url);\n        }\n    }\n}\nexport default options;\n</script>\n```\n\n* 其中 this.$router 是拿到路由对象\n* push 方法根据 url 进行跳转\n\n\n\n##### 导航菜单\n\n```vue\n<el-menu router background-color=\"#545c64\" text-color=\"#fff\" active-text-color=\"#ffd04b\">\n    <el-submenu index=\"/c1\">\n        <span slot=\"title\">\n            <i class=\"el-icon-platform-eleme\"></i>\n            菜单1\n        </span>\n        <el-menu-item index=\"/c1/p1\">子项1</el-menu-item>\n        <el-menu-item index=\"/c1/p2\">子项2</el-menu-item>\n        <el-menu-item index=\"/c1/p3\">子项3</el-menu-item>\n    </el-submenu>\n    <el-menu-item index=\"/c2\">\n        <span slot=\"title\">\n            <i class=\"el-icon-phone\"></i>\n            菜单2\n        </span>\n    </el-menu-item>\n    <el-menu-item index=\"/c3\">\n        <span slot=\"title\">\n            <i class=\"el-icon-star-on\"></i>\n            菜单3\n        </span>\n    </el-menu-item>\n</el-menu>\n```\n\n* 图标和菜单项文字建议用 `<span slot='title'></span>` 包裹起来\n* `el-menu` 标签上加上 `router` 属性，表示结合导航菜单与路由对象，此时，就可以利用菜单项的 `index` 属性来路由跳转\n\n\n\n#### 动态路由与菜单\n\n将菜单、路由信息（仅主页的）存入数据库中\n\n```sql\ninsert into menu(id, name, pid, path, component, icon) values\n    (101, '菜单1', 0,   '/m1',    null,         'el-icon-platform-eleme'),\n    (102, '菜单2', 0,   '/m2',    null,         'el-icon-delete-solid'),\n    (103, '菜单3', 0,   '/m3',    null,         'el-icon-s-tools'),\n    (104, '菜单4', 0,   '/m4',    'M4View.vue', 'el-icon-user-solid'),\n    (105, '子项1', 101, '/m1/c1', 'C1View.vue', 'el-icon-s-goods'),\n    (106, '子项2', 101, '/m1/c2', 'C2View.vue', 'el-icon-menu'),\n    (107, '子项3', 102, '/m2/c3', 'C3View.vue', 'el-icon-s-marketing'),\n    (108, '子项4', 102, '/m2/c4', 'C4View.vue', 'el-icon-s-platform'),\n    (109, '子项5', 102, '/m2/c5', 'C5View.vue', 'el-icon-picture'),\n    (110, '子项6', 103, '/m3/c6', 'C6View.vue', 'el-icon-upload'),\n    (111, '子项7', 103, '/m3/c7', 'C7View.vue', 'el-icon-s-promotion');\n```\n\n不同的用户查询的的菜单、路由信息是不一样的\n\n例如：访问 `/api/menu/admin` 返回所有的数据\n\n```json\n[\n    {\n        \"id\": 102,\n        \"name\": \"菜单2\",\n        \"icon\": \"el-icon-delete-solid\",\n        \"path\": \"/m2\",\n        \"pid\": 0,\n        \"component\": null\n    },\n    {\n        \"id\": 107,\n        \"name\": \"子项3\",\n        \"icon\": \"el-icon-s-marketing\",\n        \"path\": \"/m2/c3\",\n        \"pid\": 102,\n        \"component\": \"C3View.vue\"\n    },\n    {\n        \"id\": 108,\n        \"name\": \"子项4\",\n        \"icon\": \"el-icon-s-platform\",\n        \"path\": \"/m2/c4\",\n        \"pid\": 102,\n        \"component\": \"C4View.vue\"\n    },\n    {\n        \"id\": 109,\n        \"name\": \"子项5\",\n        \"icon\": \"el-icon-picture\",\n        \"path\": \"/m2/c5\",\n        \"pid\": 102,\n        \"component\": \"C5View.vue\"\n    }\n]\n```\n\n访问 `/api/menu/wang` 返回\n\n```json\n[\n    {\n        \"id\": 103,\n        \"name\": \"菜单3\",\n        \"icon\": \"el-icon-s-tools\",\n        \"path\": \"/m3\",\n        \"pid\": 0,\n        \"component\": null\n    },\n    {\n        \"id\": 110,\n        \"name\": \"子项6\",\n        \"icon\": \"el-icon-upload\",\n        \"path\": \"/m3/c6\",\n        \"pid\": 103,\n        \"component\": \"C6View.vue\"\n    },\n    {\n        \"id\": 111,\n        \"name\": \"子项7\",\n        \"icon\": \"el-icon-s-promotion\",\n        \"path\": \"/m3/c7\",\n        \"pid\": 103,\n        \"component\": \"C7View.vue\"\n    }\n]\n```\n\n前端根据他们身份不同，动态添加路由和显示菜单\n\n##### 动态路由\n\n```js\nexport function addServerRoutes(array) {\n  for (const { id, path, component } of array) {\n    if (component !== null) {\n      // 动态添加路由\n      // 参数1：父路由名称\n      // 参数2：路由信息对象\n      router.addRoute('c', {\n        path: path,\n        name: id,\n        component: () => import(`@/views/example15/container/${component}`)\n      });\n    }\n  }\n}\n```\n\n* js 这边只保留几个固定路由，如主页、404 和 login\n* 以上方法执行时，将服务器返回的路由信息加入到名为 c 的父路由中去\n* 这里要注意组件路径，前面 @/views 是必须在 js 这边完成拼接的，否则 import 函数会失效\n\n##### 重置路由\n\n在用户注销时应当重置路由\n\n```js\nexport function resetRouter() {\n  router.matcher = new VueRouter({ routes }).matcher\n}\n```\n\n##### 页面刷新\n\n页面刷新后，会导致动态添加的路由失效，解决方法是将路由数据存入 sessionStorage\n\n```vue\n<script>\nimport axios from '@/util/myaxios'\nimport {resetRouter, addServerRoutes} from '@/router/example15'\nconst options = {\n    data() {\n        return {\n            username: 'admin'\n        }\n    },\n    methods: {\n        async login() {       \n            resetRouter(); // 重置路由     \n            const resp = await axios.get(`/api/menu/${this.username}`)\n            const array = resp.data.data;\n            // localStorage     即使浏览器关闭，存储的数据仍在\n            // sessionStorage   以标签页为单位，关闭标签页时，数据被清除\n            sessionStorage.setItem('serverRoutes', JSON.stringify(array))\n            addServerRoutes(array); // 动态添加路由\n            this.$router.push('/');\n        }\n    }\n}\nexport default options;\n</script>\n```\n\n页面刷新，重新创建路由对象时，从 sessionStorage 里恢复路由数据\n\n```js\nconst router = new VueRouter({\n  routes\n})\n\n// 从 sessionStorage 中恢复路由数据\nconst serverRoutes = sessionStorage.getItem('serverRoutes');\nif(serverRoutes) {\n  const array = JSON.parse(serverRoutes);\n  addServerRoutes(array) // 动态添加路由\n}\n```\n\n##### 动态菜单\n\n代码部分\n\n```vue\n<script>\nconst options = {\n    mounted() {\n        const serverRoutes = sessionStorage.getItem('serverRoutes');\n        const array = JSON.parse(serverRoutes);\n        const map = new Map();\n        for(const obj of array) {\n            map.set(obj.id, obj);\n        }\n        const top = [];\n        for(const obj of array) {\n            const parent = map.get(obj.pid);\n            if(parent) {\n                parent.children ??= [];\n                parent.children.push(obj);\n            } else {\n                top.push(obj);\n            }\n        }\n        this.top = top;\n    },\n    data() {\n        return {\n            top: []\n        }\n    }\n}\nexport default options;\n</script>\n```\n\n菜单部分\n\n```vue\n<el-menu router background-color=\"#545c64\" text-color=\"#fff\" active-text-color=\"#ffd04b\" :unique-opened=\"true\">\n    <template v-for=\"m1 of top\">\n<el-submenu v-if=\"m1.children\" :key=\"m1.id\" :index=\"m1.path\">\n    <span slot=\"title\">\n        <i :class=\"m1.icon\"></i> {{m1.name}}\n        </span>\n    <el-menu-item v-for=\"m2 of m1.children\" :key=\"m2.id\" :index=\"m2.path\">\n        <span slot=\"title\">\n            <i :class=\"m2.icon\"></i> {{m2.name}}\n        </span>\n        </el-menu-item>\n        </el-submenu>\n<el-menu-item v-else :key=\"m1.id\" :index=\"m1.path\">\n    <span slot=\"title\">\n        <i :class=\"m1.icon\"></i> {{m1.name}}\n        </span>\n        </el-menu-item>\n    </template>\n</el-menu>\n```\n\n* 没有考虑递归菜单问题，认为菜单只有两级\n\n\n\n### 3) Vuex\n\n#### 入门\n\nvuex 可以在多个组件之间共享数据，并且共享的数据是【响应式】的，即数据的变更能及时渲染到模板\n\n* 与之对比 localStorage 与 sessionStorage 也能共享数据，但缺点是数据并非【响应式】\n\n首先需要定义 state 与 mutations 他们一个用来读取共享数据，一个用来修改共享数据\n\nsrc/store/index.js\n\n```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\n/*\n  读取数据，走 state, getters\n  修改数据，走 mutations, actions\n*/\nexport default new Vuex.Store({\n  state: {\n    name: '',\n    age: 18\n  },\n  getters: {\n  },\n  mutations: {\n    updateName(state, name) {\n      state.name = name;\n    }\n  },\n  actions: {\n  },\n  modules: {\n  }\n})\n```\n\n修改共享数据\n\n```vue\n<template>\n    <div class=\"p\">\n        <el-input placeholder=\"请修改用户姓名\" \n            size=\"mini\" v-model=\"name\"></el-input>\n        <el-button type=\"primary\" size=\"mini\" @click=\"update()\">修改</el-button>\n    </div>\n</template>\n<script>\nconst options = {\n    methods: {\n        update(){\n            this.$store.commit('updateName', this.name);\n        }\n    },\n    data () {\n        return {\n            name:''\n        }\n    }\n}\nexport default options;\n</script>\n```\n\n* mutations 方法不能直接调用，只能通过 `store.commit(mutation方法名, 参数)` 来间接调用\n\n读取共享数据\n\n```vue\n<template>\n    <div class=\"container\">\n        <el-container>\n            <el-header>\n                <div class=\"t\">\n                    欢迎您：{{ $store.state.name }}, {{ $store.state.age }}\n    \t\t\t</div>\n            </el-header>\n            <el-container>\n                <el-aside width=\"200px\">\n                </el-aside>\n                <el-main>\n                    <router-view></router-view>\n                </el-main>\n            </el-container>\n        </el-container>\n    </div>\n</template>\n```\n\n\n\n#### mapState\n\n每次去写 `$store.state.name` 这样的代码显得非常繁琐，可以用 vuex 帮我们生成计算属性\n\n```vue\n<template>\n    <div class=\"container\">\n        <el-container>\n            <el-header>\n                <div class=\"t\">欢迎您：{{ name }}, {{ age }}</div>\n            </el-header>\n            <el-container>\n                <el-aside width=\"200px\">\n                </el-aside>\n                <el-main>\n                    <router-view></router-view>\n                </el-main>\n            </el-container>\n        </el-container>\n    </div>\n</template>\n<script>\nimport { mapState } from 'vuex'\nconst options = {\n    computed: {\n        ...mapState(['name', 'age'])\n    }\n}\nexport default options;\n</script>\n```\n\n* mapState 返回的是一个对象，对象内包含了 name() 和 age() 的这两个方法作为计算属性\n* 此对象配合 `...` 展开运算符，填充入 computed 即可使用\n\n\n\n#### mapMutations\n\n```vue\n<template>\n    <div class=\"p\">\n        <el-input placeholder=\"请修改用户姓名\" \n            size=\"mini\" v-model=\"name\"></el-input>\n        <el-button type=\"primary\" size=\"mini\" @click=\"updateName(name)\">修改</el-button>\n    </div>\n</template>\n<script>\nimport {mapMutations} from 'vuex'\nconst options = {\n    methods: {\n        ...mapMutations(['updateName'])\n    },\n    data () {\n        return {\n            name:''\n        }\n    }\n}\nexport default options;\n</script>\n```\n\n* 类似的，调用 mutation 修改共享数据也可以简化\n* mapMutations 返回的对象中包含的方法，就会调用 store.commit() 来执行 mutation 方法\n* 注意参数传递略有不同\n\n\n\n#### actions\n\nmutations 方法内不能包括修改不能立刻生效的代码，否则会造成 Vuex 调试工具工作不准确，必须把这些代码写在 actions 方法中\n\n```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\n/*\n  读取数据，走 state, getters\n  修改数据，走 mutations, actions\n*/\nimport axios from '@/util/myaxios'\nexport default new Vuex.Store({\n  state: {\n    name: '',\n    age: 18\n  },\n  getters: {\n  },\n  mutations: {\n    updateName(state, name) {\n      state.name = name;\n    },\n    // 错误的用法，如果在mutations方法中包含了异步操作，会造成开发工具不准确\n    /* async updateServerName(state) {\n      const resp = await axios.get('/api/user');\n      const {name, age} = resp.data.data;\n      state.name = name;\n      state.age = age;\n    } */\n    updateServerName(state, user) {\n      const { name, age } = user;\n      state.name = name;\n      state.age = age;\n    }\n  },\n  actions: {\n    async updateServerName(context) {\n      const resp = await axios.get('/api/user');\n      context.commit('updateServerName', resp.data.data)\n    }\n  },\n  modules: {\n  }\n})\n```\n\n* 首先应当调用 actions 的 updateServerName 获取数据\n* 然后再由它间接调用 mutations 的 updateServerName 更新共享数据\n\n页面使用 actions 的方法可以这么写\n\n```vue\n<template>\n    <div class=\"p\">\n        <el-button type=\"primary\" size=\"mini\"\n            @click=\"updateServerName()\">从服务器获取数据,存入store</el-button>\n    </div>\n</template>\n<script>\nimport { mapActions } from 'vuex'\nconst options = {\n    methods: {\n        ...mapActions(['updateServerName'])\n    }\n}\nexport default options;\n</script>\n```\n\n* mapActions 会生成调用 actions 中方法的代码\n\n* 调用 actions 的代码内部等价于，它返回的是 Promise 对象，可以用同步或异步方式接收结果\n\n  ```js\n  this.$store.dispatch('action名称', 参数)\n  ```","slug":"09_Java程序员要掌握的前端-vue2","published":1,"updated":"2022-11-03T05:36:16.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb400005a8vwtgltts7i","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"Vue-2\"><a href=\"#Vue-2\" class=\"headerlink\" title=\"Vue 2\"></a>Vue 2</h1><h2 id=\"1-Vue-基础\"><a href=\"#1-Vue-基础\" class=\"headerlink\" title=\"1. Vue 基础\"></a>1. Vue 基础</h2><h3 id=\"1-环境准备\"><a href=\"#1-环境准备\" class=\"headerlink\" title=\"1) 环境准备\"></a>1) 环境准备</h3><h4 id=\"安装脚手架\"><a href=\"#安装脚手架\" class=\"headerlink\" title=\"安装脚手架\"></a>安装脚手架</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-g 参数表示全局安装，这样在任意目录都可以使用 vue 脚本创建项目</li>\n</ul>\n<h4 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h4><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue ui</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装-devtools\"><a href=\"#安装-devtools\" class=\"headerlink\" title=\"安装 devtools\"></a>安装 devtools</h4><ul>\n<li>devtools 插件网址：<a href=\"https://devtools.vuejs.org/guide/installation.html\" target=\"_blank\" rel=\"noopener\">https://devtools.vuejs.org/guide/installation.html</a></li>\n</ul>\n<h4 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h4><p>进入项目目录，执行</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run serve</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改端口\"><a href=\"#修改端口\" class=\"headerlink\" title=\"修改端口\"></a>修改端口</h4><p>前端服务器默认占用了 8080 端口，需要修改一下</p>\n<ul>\n<li><p>文档地址：<a href=\"https://webpack.js.org/configuration/dev-server/#devserverport\" target=\"_blank\" rel=\"noopener\">DevServer | webpack</a></p>\n</li>\n<li><p>打开 vue.config.js 添加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; defineConfig &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'@vue/cli-service'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = defineConfig(&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    port: <span class=\"number\">7070</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"添加代理\"><a href=\"#添加代理\" class=\"headerlink\" title=\"添加代理\"></a>添加代理</h4><p>为了避免前后端服务器联调时， fetch、xhr 请求产生跨域问题，需要配置代理</p>\n<ul>\n<li><p>文档地址同上</p>\n</li>\n<li><p>打开 vue.config.js 添加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; defineConfig &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'@vue/cli-service'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = defineConfig(&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    port: <span class=\"number\">7070</span>,</span><br><span class=\"line\">    proxy: &#123;</span><br><span class=\"line\">      <span class=\"string\">'/api'</span>: &#123;</span><br><span class=\"line\">        target: <span class=\"string\">'http://localhost:8080'</span>,</span><br><span class=\"line\">        changeOrigin: <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h4 id=\"Vue-项目结构\"><a href=\"#Vue-项目结构\" class=\"headerlink\" title=\"Vue 项目结构\"></a>Vue 项目结构</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS D:\\2022.js\\代码\\第3章\\client&gt; tree src</span><br><span class=\"line\">D:\\2022.JS\\代码\\第3章\\CLIENT\\SRC</span><br><span class=\"line\">├─assets</span><br><span class=\"line\">├─components</span><br><span class=\"line\">├─router</span><br><span class=\"line\">├─store</span><br><span class=\"line\">└─views</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>assets - 静态资源</li>\n<li>components - 可重用组件</li>\n<li>router - 路由</li>\n<li>store - 数据共享</li>\n<li>views - 视图组件</li>\n</ul>\n<p>以后还会添加</p>\n<ul>\n<li>api - 跟后台交互，发送 fetch、xhr 请求，接收响应</li>\n<li>plugins - 插件</li>\n</ul>\n<h3 id=\"2-Vue-组件\"><a href=\"#2-Vue-组件\" class=\"headerlink\" title=\"2) Vue 组件\"></a>2) Vue 组件</h3><p>Vue 的组件文件以 .vue 结尾，每个组件由三部分组成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>template 模板部分，由它生成 html 代码</li>\n<li>script 代码部分，控制模板的数据来源和行为</li>\n<li>style 样式部分，一般不咋关心</li>\n</ul>\n<p>入口组件是 App.vue</p>\n<p>先删除原有代码，来个 Hello, World 例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      msg: &quot;Hello, Vue!&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>解释</p>\n<ul>\n<li>export default 导出组件对象，供 main.js 导入使用</li>\n<li>这个对象有一个 data 方法，返回一个<strong>对象</strong>，给 template 提供数据</li>\n<li>双括号 在 Vue 里称之为插值表达式，用来<strong>绑定</strong> data 方法返回的<strong>对象</strong>属性，<strong>绑定</strong>的含义是数据发生变化时，页面显示会同步变化</li>\n</ul>\n<h4 id=\"文本插值\"><a href=\"#文本插值\" class=\"headerlink\" title=\"文本插值\"></a>文本插值</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;&#123;&#123; name &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">        &lt;h1&gt;&#123;&#123; age &gt; 60 ? &apos;老年&apos; : &apos;青年&apos; &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    data: function () &#123;</span><br><span class=\"line\">        return &#123; name: &apos;张三&apos;, age: 70 &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>双括号 里只能绑定一个属性，绑定多个属性需要用多个 双括号 分别绑定</li>\n<li>template 内只能有一个根元素</li>\n<li>插值内可以进行简单的表达式计算</li>\n</ul>\n<h4 id=\"属性绑定\"><a href=\"#属性绑定\" class=\"headerlink\" title=\"属性绑定\"></a>属性绑定</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;div&gt;&lt;input type=&quot;text&quot; v-bind:value=&quot;name&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;&lt;input type=&quot;date&quot; v-bind:value=&quot;birthday&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;&lt;input type=&quot;text&quot; :value=&quot;age&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    data: function () &#123;</span><br><span class=\"line\">        return &#123; name: &apos;王五&apos;, birthday: &apos;1995-05-01&apos;, age: 20 &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>简写方式：可以省略 v-bind 只保留冒号</li>\n</ul>\n<h4 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 事件绑定 --&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;div&gt;&lt;input type=&quot;button&quot; value=&quot;点我执行m1&quot; v-on:click=&quot;m1&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;&lt;input type=&quot;button&quot; value=&quot;点我执行m2&quot; @click=&quot;m2&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    data: function () &#123;</span><br><span class=\"line\">        return &#123; count: 0 &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        m1() &#123;</span><br><span class=\"line\">            this.count ++;</span><br><span class=\"line\">            console.log(&quot;m1&quot;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        m2() &#123;</span><br><span class=\"line\">            this.count --;</span><br><span class=\"line\">            console.log(&quot;m2&quot;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>简写方式：可以把 v-on: 替换为 @</li>\n<li>在 methods 方法中的 this 代表的是 data 函数返回的数据对象</li>\n</ul>\n<h4 id=\"双向绑定\"><a href=\"#双向绑定\" class=\"headerlink\" title=\"双向绑定\"></a>双向绑定</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;label for=&quot;&quot;&gt;请输入姓名&lt;/label&gt;</span><br><span class=\"line\">            &lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;label for=&quot;&quot;&gt;请输入年龄&lt;/label&gt;</span><br><span class=\"line\">            &lt;input type=&quot;text&quot; v-model=&quot;age&quot;&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;label for=&quot;&quot;&gt;请选择性别&lt;/label&gt;</span><br><span class=\"line\">            男 &lt;input type=&quot;radio&quot; value=&quot;男&quot; v-model=&quot;sex&quot;&gt;</span><br><span class=\"line\">            女 &lt;input type=&quot;radio&quot; value=&quot;女&quot; v-model=&quot;sex&quot;&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;label for=&quot;&quot;&gt;请选择爱好&lt;/label&gt;</span><br><span class=\"line\">            游泳 &lt;input type=&quot;checkbox&quot; value=&quot;游泳&quot; v-model=&quot;fav&quot;&gt;</span><br><span class=\"line\">            打球 &lt;input type=&quot;checkbox&quot; value=&quot;打球&quot; v-model=&quot;fav&quot;&gt;</span><br><span class=\"line\">            健身 &lt;input type=&quot;checkbox&quot; value=&quot;健身&quot; v-model=&quot;fav&quot;&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    data: function () &#123;</span><br><span class=\"line\">        return &#123; name: &apos;&apos;, age: null, sex:&apos;男&apos; , fav:[&apos;打球&apos;]&#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>用 v-model 实现双向绑定，即 <ul>\n<li>javascript 数据可以同步到表单标签</li>\n<li>反过来用户在表单标签输入的新值也会同步到 javascript 这边</li>\n</ul>\n</li>\n<li>双向绑定只适用于表单这种带【输入】功能的标签，其它标签的数据绑定，单向就足够了</li>\n<li>复选框这种标签，双向绑定的 javascript 数据类型一般用数组</li>\n</ul>\n<h4 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 计算属性 --&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;h2&gt;&#123;&#123;fullName&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">        &lt;h2&gt;&#123;&#123;fullName&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">        &lt;h2&gt;&#123;&#123;fullName&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    data: function () &#123;</span><br><span class=\"line\">        return &#123; firstName: &apos;三&apos;, lastName: &apos;张&apos; &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    /* methods: &#123;</span><br><span class=\"line\">        fullName() &#123;</span><br><span class=\"line\">            console.log(&apos;进入了 fullName&apos;)</span><br><span class=\"line\">            return this.lastName + this.firstName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,*/</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">        fullName() &#123;</span><br><span class=\"line\">            console.log(&apos;进入了 fullName&apos;)</span><br><span class=\"line\">            return this.lastName + this.firstName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default options;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>普通方法调用必须加 ()，没有缓存功能</li>\n<li>计算属性使用时就把它当属性来用，不加 ()，有缓存功能：<ul>\n<li>一次计算后，会将结果缓存，下次再计算时，只要数据没有变化，不会重新计算，直接返回缓存结果</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"axios\"><a href=\"#axios\" class=\"headerlink\" title=\"axios\"></a>axios</h4><p>axios 它的底层是用了 XMLHttpRequest（xhr）方式发送请求和接收响应，xhr 相对于之前讲过的 fetch api 来说，功能更强大，但由于是比较老的 api，不支持 Promise，axios 对 xhr 进行了封装，使之支持 Promise，并提供了对请求、响应的统一拦截功能</p>\n<p>安装</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install axios -S</span><br></pre></td></tr></table></figure>\n\n<p>导入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>axios 默认导出一个对象，这里的 import 导入的就是它默认导出的对象</li>\n</ul>\n<p>方法</p>\n<table>\n<thead>\n<tr>\n<th>请求</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>axios.get(url[, config])</td>\n<td>:star:</td>\n</tr>\n<tr>\n<td>axios.delete(url[, config])</td>\n<td></td>\n</tr>\n<tr>\n<td>axios.head(url[, config])</td>\n<td></td>\n</tr>\n<tr>\n<td>axios.options(url[, config])</td>\n<td></td>\n</tr>\n<tr>\n<td>axios.post(url[, data[, config]])</td>\n<td>:star:</td>\n</tr>\n<tr>\n<td>axios.put(url[, data[, config]])</td>\n<td></td>\n</tr>\n<tr>\n<td>axios.patch(url[, data[, config]])</td>\n<td></td>\n</tr>\n</tbody></table>\n<ul>\n<li>config - 选项对象、例如查询参数、请求头…</li>\n<li>data - 请求体数据、最常见的是 json 格式数据</li>\n<li>get、head 请求无法携带请求体，这应当是浏览器的限制所致（xhr、fetch api 均有限制）</li>\n<li>options、delete 请求可以通过 config 中的 data 携带请求体</li>\n</ul>\n<p>例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;input type=&quot;button&quot; value=&quot;获取远程数据&quot; @click=&quot;sendReq()&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import axios from &apos;axios&apos;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        async sendReq() &#123;</span><br><span class=\"line\">            // 1. 演示 get, post</span><br><span class=\"line\">            // const resp = await axios.post(&apos;/api/a2&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">            // 2. 发送请求头</span><br><span class=\"line\">            // const resp = await axios.post(&apos;/api/a3&apos;,&#123;&#125;,&#123;</span><br><span class=\"line\">            //     headers:&#123;</span><br><span class=\"line\">            //         Authorization:&apos;abc&apos;</span><br><span class=\"line\">            //     &#125;</span><br><span class=\"line\">            // &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            // 3. 发送请求时携带查询参数 ?name=xxx&amp;age=xxx</span><br><span class=\"line\">            // const name = encodeURIComponent(&apos;&amp;&amp;&amp;&apos;);</span><br><span class=\"line\">            // const age = 18;</span><br><span class=\"line\">            // const resp = await axios.post(`/api/a4?name=$&#123;name&#125;&amp;age=$&#123;age&#125;`);</span><br><span class=\"line\"></span><br><span class=\"line\">            // 不想自己拼串、处理特殊字符、就用下面的办法</span><br><span class=\"line\">            // const resp = await axios.post(&apos;/api/a4&apos;, &#123;&#125;, &#123;</span><br><span class=\"line\">            //     params: &#123;</span><br><span class=\"line\">            //         name:&apos;&amp;&amp;&amp;&amp;&apos;,</span><br><span class=\"line\">            //         age: 20</span><br><span class=\"line\">            //     &#125;</span><br><span class=\"line\">            // &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            // 4. 用请求体发数据，格式为 urlencoded</span><br><span class=\"line\">            // const params = new URLSearchParams();</span><br><span class=\"line\">            // params.append(&quot;name&quot;, &quot;张三&quot;);</span><br><span class=\"line\">            // params.append(&quot;age&quot;, 24)</span><br><span class=\"line\"></span><br><span class=\"line\">            // const resp = await axios.post(&apos;/api/a4&apos;, params);</span><br><span class=\"line\"></span><br><span class=\"line\">            // 5. 用请求体发数据，格式为 multipart</span><br><span class=\"line\">            // const params = new FormData();</span><br><span class=\"line\">            // params.append(&quot;name&quot;, &quot;李四&quot;);</span><br><span class=\"line\">            // params.append(&quot;age&quot;, 30);</span><br><span class=\"line\">            // const resp = await axios.post(&apos;/api/a5&apos;, params);</span><br><span class=\"line\"></span><br><span class=\"line\">            // 6. 用请求体发数据，格式为 json</span><br><span class=\"line\">            const resp = await axios.post(&apos;/api/a5json&apos;, &#123;</span><br><span class=\"line\">                name: &apos;王五&apos;,</span><br><span class=\"line\">                age: 50</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            console.log(resp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>创建实例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> _axios = axios.create(config);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>axios 对象可以直接使用，但使用的是默认的设置</li>\n<li>用 axios.create 创建的对象，可以覆盖默认设置，config 见下面说明</li>\n</ul>\n<p>常见的 config 项有</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>baseURL</td>\n<td>将自动加在 url 前面</td>\n</tr>\n<tr>\n<td>headers</td>\n<td>请求头，类型为简单对象</td>\n</tr>\n<tr>\n<td>params</td>\n<td>跟在 URL 后的请求参数，类型为简单对象或 URLSearchParams</td>\n</tr>\n<tr>\n<td>data</td>\n<td>请求体，类型有简单对象、FormData、URLSearchParams、File 等</td>\n</tr>\n<tr>\n<td>withCredentials</td>\n<td>跨域时是否携带 Cookie 等凭证，默认为 false</td>\n</tr>\n<tr>\n<td>responseType</td>\n<td>响应类型，默认为 json</td>\n</tr>\n</tbody></table>\n<p>例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> _axios = axios.create(&#123;</span><br><span class=\"line\">    baseURL: <span class=\"string\">'http://localhost:8080'</span>,</span><br><span class=\"line\">    withCredentials: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">await</span> _axios.post(<span class=\"string\">'/api/a6set'</span>)</span><br><span class=\"line\"><span class=\"keyword\">await</span> _axios.post(<span class=\"string\">'/api/a6get'</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>生产环境希望 xhr 请求不走代理，可以用 baseURL 统一修改</li>\n<li>希望跨域请求携带 cookie，需要配置 withCredentials: true，服务器也要配置 allowCredentials = true，否则浏览器获取跨域返回的 cookie 时会报错</li>\n</ul>\n<p>响应格式</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>data</td>\n<td>响应体数据 :star:</td>\n</tr>\n<tr>\n<td>status</td>\n<td>状态码 :star:</td>\n</tr>\n<tr>\n<td>headers</td>\n<td>响应头</td>\n</tr>\n</tbody></table>\n<ul>\n<li>200 表示响应成功</li>\n<li>400 请求数据不正确 age=abc</li>\n<li>401 身份验证没通过</li>\n<li>403 没有权限</li>\n<li>404 资源不存在</li>\n<li>405 不支持请求方式 post</li>\n<li>500 服务器内部错误</li>\n</ul>\n<p>请求拦截器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_axios.interceptors.request.use(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 比如在这里添加统一的 headers</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>响应拦截器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_axios.interceptors.response.use(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 2xx 范围内走这里</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 超出 2xx, 比如 4xx, 5xx 走这里</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"条件渲染\"><a href=\"#条件渲染\" class=\"headerlink\" title=\"条件渲染\"></a>条件渲染</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;input type=&quot;button&quot; value=&quot;获取远程数据&quot; @click=&quot;sendReq()&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;title&quot;&gt;学生列表&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;thead&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;row bold&quot;&gt;</span><br><span class=\"line\">                &lt;div class=&quot;col&quot;&gt;编号&lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;col&quot;&gt;姓名&lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;col&quot;&gt;性别&lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;col&quot;&gt;年龄&lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;tbody&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;row&quot; v-if=&quot;students.length &gt; 0&quot;&gt;显示学生数据&lt;/div&gt;</span><br><span class=\"line\">            &lt;div class=&quot;row&quot; v-else&gt;暂无学生数据&lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import axios from &apos;../util/myaxios&apos;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    data: function() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            students: []</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods : &#123;</span><br><span class=\"line\">        async sendReq() &#123;</span><br><span class=\"line\">            const resp = await axios.get(&quot;/api/students&quot;);</span><br><span class=\"line\">            console.log(resp.data.data)</span><br><span class=\"line\">            this.students = resp.data.data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">    div &#123;</span><br><span class=\"line\">        font-family: 华文行楷;</span><br><span class=\"line\">        font-size: 20px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .title &#123;</span><br><span class=\"line\">        margin-bottom: 10px;</span><br><span class=\"line\">        font-size: 30px;</span><br><span class=\"line\">        color: #333;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .row &#123;</span><br><span class=\"line\">        background-color: #fff;</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        justify-content: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .col &#123;</span><br><span class=\"line\">        border: 1px solid #f0f0f0;</span><br><span class=\"line\">        width: 15%;</span><br><span class=\"line\">        height: 35px;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">        line-height: 35px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .bold .col &#123;</span><br><span class=\"line\">        background-color: #f1f1f1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"列表渲染\"><a href=\"#列表渲染\" class=\"headerlink\" title=\"列表渲染\"></a>列表渲染</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;!-- &lt;input type=&quot;button&quot; value=&quot;获取远程数据&quot; @click=&quot;sendReq()&quot;&gt; --&gt;</span><br><span class=\"line\">        &lt;div class=&quot;title&quot;&gt;学生列表&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;thead&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;row bold&quot;&gt;</span><br><span class=\"line\">                &lt;div class=&quot;col&quot;&gt;编号&lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;col&quot;&gt;姓名&lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;col&quot;&gt;性别&lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;col&quot;&gt;年龄&lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;tbody&quot;&gt;</span><br><span class=\"line\">            &lt;div v-if=&quot;students.length &gt; 0&quot;&gt;</span><br><span class=\"line\">                &lt;div class=&quot;row&quot; v-for=&quot;s of students&quot; :key=&quot;s.id&quot;&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;col&quot;&gt;&#123;&#123;s.id&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;col&quot;&gt;&#123;&#123;s.name&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;col&quot;&gt;&#123;&#123;s.sex&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;col&quot;&gt;&#123;&#123;s.age&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;div class=&quot;row&quot; v-else&gt;暂无学生数据&lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import axios from &apos;../util/myaxios&apos;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    mounted: function()&#123;</span><br><span class=\"line\">        this.sendReq()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data: function() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            students: []</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods : &#123;</span><br><span class=\"line\">        async sendReq() &#123;</span><br><span class=\"line\">            const resp = await axios.get(&quot;/api/students&quot;);</span><br><span class=\"line\">            console.log(resp.data.data)</span><br><span class=\"line\">            this.students = resp.data.data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">    div &#123;</span><br><span class=\"line\">        font-family: 华文行楷;</span><br><span class=\"line\">        font-size: 20px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .title &#123;</span><br><span class=\"line\">        margin-bottom: 10px;</span><br><span class=\"line\">        font-size: 30px;</span><br><span class=\"line\">        color: #333;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .row &#123;</span><br><span class=\"line\">        background-color: #fff;</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        justify-content: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .col &#123;</span><br><span class=\"line\">        border: 1px solid #f0f0f0;</span><br><span class=\"line\">        width: 15%;</span><br><span class=\"line\">        height: 35px;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">        line-height: 35px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .bold .col &#123;</span><br><span class=\"line\">        background-color: #f1f1f1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>v-if 和 v-for 不能用于同一个标签</li>\n<li>v-for 需要配合特殊的标签属性 key 一起使用，并且 key 属性要绑定到一个能起到唯一标识作用的数据上，本例绑定到了学生编号上</li>\n<li>options 的 mounted 属性对应一个函数，此函数会在组件挂载后（准备就绪）被调用，可以在它内部发起请求，去获取学生数据</li>\n</ul>\n<h4 id=\"重用组件\"><a href=\"#重用组件\" class=\"headerlink\" title=\"重用组件\"></a>重用组件</h4><p>按钮组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;button&quot; :class=&quot;[type,size]&quot;&gt;</span><br><span class=\"line\">        a&lt;slot&gt;&lt;/slot&gt;b</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    props: [&quot;type&quot;, &quot;size&quot;]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意，省略了样式部分</li>\n</ul>\n<p>使用组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;父组件&lt;/h1&gt;</span><br><span class=\"line\">        &lt;my-button type=&quot;primary&quot; size=&quot;small&quot;&gt;1&lt;/my-button&gt;</span><br><span class=\"line\">        &lt;my-button type=&quot;danger&quot; size=&quot;middle&quot;&gt;2&lt;/my-button&gt;</span><br><span class=\"line\">        &lt;my-button type=&quot;success&quot; size=&quot;large&quot;&gt;3&lt;/my-button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import MyButton from &apos;../components/MyButton.vue&apos;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        MyButton</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-Vue-进阶\"><a href=\"#2-Vue-进阶\" class=\"headerlink\" title=\"2. Vue 进阶\"></a>2. Vue 进阶</h2><h3 id=\"1-ElementUI\"><a href=\"#1-ElementUI\" class=\"headerlink\" title=\"1) ElementUI\"></a>1) ElementUI</h3><p>安装</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install element-ui -S</span><br></pre></td></tr></table></figure>\n\n<p>引入组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Element <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Element)</span><br></pre></td></tr></table></figure>\n\n<p>测试，在自己的组件中使用 ElementUI 的组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-button&gt;按钮&lt;/el-button&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"表格组件\"><a href=\"#表格组件\" class=\"headerlink\" title=\"表格组件\"></a>表格组件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;el-table :data=&quot;students&quot;&gt;</span><br><span class=\"line\">            &lt;el-table-column label=&quot;编号&quot; prop=&quot;id&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\">            &lt;el-table-column label=&quot;姓名&quot; prop=&quot;name&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\">            &lt;el-table-column label=&quot;性别&quot; prop=&quot;sex&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\">            &lt;el-table-column label=&quot;年龄&quot; prop=&quot;age&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\">        &lt;/el-table&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import axios from &apos;../util/myaxios&apos;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    async mounted() &#123;</span><br><span class=\"line\">        const resp = await axios.get(&apos;/api/students&apos;);</span><br><span class=\"line\">        this.students = resp.data.data</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            students: []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"分页组件\"><a href=\"#分页组件\" class=\"headerlink\" title=\"分页组件\"></a>分页组件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;el-table v-bind:data=&quot;students&quot;&gt;</span><br><span class=\"line\">            &lt;el-table-column label=&quot;编号&quot; prop=&quot;id&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\">            &lt;el-table-column label=&quot;姓名&quot; prop=&quot;name&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\">            &lt;el-table-column label=&quot;性别&quot; prop=&quot;sex&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\">            &lt;el-table-column label=&quot;年龄&quot; prop=&quot;age&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\">        &lt;/el-table&gt;</span><br><span class=\"line\">        &lt;el-pagination </span><br><span class=\"line\">            :total=&quot;total&quot;</span><br><span class=\"line\">            :page-size=&quot;queryDto.size&quot;</span><br><span class=\"line\">            :current-page=&quot;queryDto.page&quot;</span><br><span class=\"line\">            layout=&quot;prev,pager,next,sizes,-&gt;,total&quot;</span><br><span class=\"line\">            :page-sizes=&quot;[5,10,15,20]&quot;</span><br><span class=\"line\">            @current-change=&quot;currentChange&quot;</span><br><span class=\"line\">            @size-change=&quot;sizeChange&quot;</span><br><span class=\"line\">        &gt;&lt;/el-pagination&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import axios from &apos;../util/myaxios&apos;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    mounted() &#123;</span><br><span class=\"line\">        this.query();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        currentChange(page) &#123;</span><br><span class=\"line\">            this.queryDto.page = page;</span><br><span class=\"line\">            this.query();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        sizeChange(size)&#123;</span><br><span class=\"line\">            this.queryDto.size = size;</span><br><span class=\"line\">            this.query();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        async query() &#123;</span><br><span class=\"line\">            const resp = await axios.get(&apos;/api/students/q&apos;, &#123;</span><br><span class=\"line\">                params: this.queryDto</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            this.students = resp.data.data.list;</span><br><span class=\"line\">            this.total = resp.data.data.total;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            students: [],</span><br><span class=\"line\">            total: 0,</span><br><span class=\"line\">            queryDto: &#123;</span><br><span class=\"line\">                page: 1,</span><br><span class=\"line\">                size: 5</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>三种情况都应该触发查询<ul>\n<li>mounted 组件挂载完成后</li>\n<li>页号变化时</li>\n<li>页大小变化时</li>\n</ul>\n</li>\n<li>查询传参应该根据后台需求，灵活采用不同方式<ul>\n<li>本例中因为是 get 请求，无法采用请求体，只能用 params 方式传参</li>\n</ul>\n</li>\n<li>返回响应的格式也许会很复杂，需要掌握【根据返回的响应结构，获取数据】的能力</li>\n</ul>\n<h4 id=\"分页搜索\"><a href=\"#分页搜索\" class=\"headerlink\" title=\"分页搜索\"></a>分页搜索</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;el-input placeholder=&quot;请输入姓名&quot; size=&quot;mini&quot; v-model=&quot;queryDto.name&quot;&gt;&lt;/el-input&gt;</span><br><span class=\"line\">        &lt;el-select placeholder=&quot;请选择性别&quot; size=&quot;mini&quot; v-model=&quot;queryDto.sex&quot; clearable&gt;</span><br><span class=\"line\">            &lt;el-option value=&quot;男&quot;&gt;&lt;/el-option&gt;</span><br><span class=\"line\">            &lt;el-option value=&quot;女&quot;&gt;&lt;/el-option&gt;</span><br><span class=\"line\">        &lt;/el-select&gt;</span><br><span class=\"line\">        &lt;el-select placeholder=&quot;请选择年龄&quot; size=&quot;mini&quot; v-model=&quot;queryDto.age&quot; clearable&gt;</span><br><span class=\"line\">            &lt;el-option value=&quot;0,20&quot; label=&quot;0到20岁&quot;&gt;&lt;/el-option&gt;</span><br><span class=\"line\">            &lt;el-option value=&quot;21,30&quot; label=&quot;21到30岁&quot;&gt;&lt;/el-option&gt;</span><br><span class=\"line\">            &lt;el-option value=&quot;31,40&quot; label=&quot;31到40岁&quot;&gt;&lt;/el-option&gt;</span><br><span class=\"line\">            &lt;el-option value=&quot;41,120&quot; label=&quot;41到120岁&quot;&gt;&lt;/el-option&gt;</span><br><span class=\"line\">        &lt;/el-select&gt;</span><br><span class=\"line\">        &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot; @click=&quot;search()&quot;&gt;搜索&lt;/el-button&gt;</span><br><span class=\"line\">        &lt;el-divider&gt;&lt;/el-divider&gt;</span><br><span class=\"line\">        &lt;el-table v-bind:data=&quot;students&quot;&gt;</span><br><span class=\"line\">            &lt;el-table-column label=&quot;编号&quot; prop=&quot;id&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\">            &lt;el-table-column label=&quot;姓名&quot; prop=&quot;name&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\">            &lt;el-table-column label=&quot;性别&quot; prop=&quot;sex&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\">            &lt;el-table-column label=&quot;年龄&quot; prop=&quot;age&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\">        &lt;/el-table&gt;</span><br><span class=\"line\">        &lt;el-pagination :total=&quot;total&quot; :page-size=&quot;queryDto.size&quot; :current-page=&quot;queryDto.page&quot;</span><br><span class=\"line\">            layout=&quot;prev,pager,next,sizes,-&gt;,total&quot; :page-sizes=&quot;[5, 10, 15, 20]&quot; @current-change=&quot;currentChange&quot;</span><br><span class=\"line\">            @size-change=&quot;sizeChange&quot;&gt;&lt;/el-pagination&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import axios from &apos;../util/myaxios&apos;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    mounted() &#123;</span><br><span class=\"line\">        this.query();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        currentChange(page) &#123;</span><br><span class=\"line\">            this.queryDto.page = page;</span><br><span class=\"line\">            this.query();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        sizeChange(size) &#123;</span><br><span class=\"line\">            this.queryDto.size = size;</span><br><span class=\"line\">            this.query();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        async query() &#123;</span><br><span class=\"line\">            const resp = await axios.get(&apos;/api/students/q&apos;, &#123;</span><br><span class=\"line\">                params: this.queryDto</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            this.students = resp.data.data.list;</span><br><span class=\"line\">            this.total = resp.data.data.total;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        search() &#123;</span><br><span class=\"line\">            this.query();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            students: [],</span><br><span class=\"line\">            total: 0,</span><br><span class=\"line\">            queryDto: &#123;</span><br><span class=\"line\">                name: &apos;&apos;,</span><br><span class=\"line\">                sex: &apos;&apos;,</span><br><span class=\"line\">                age: &apos;&apos;,  </span><br><span class=\"line\">                page: 1,</span><br><span class=\"line\">                size: 5</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>sex 与  age 均用 <code>&#39;&#39;</code> 表示用户没有选择的情况</li>\n<li>age 取值 <code>0,20</code> 会被 spring 转换为 <code>new int[]{0, 20}</code></li>\n<li>age 取值 <code>&#39;&#39;</code> 会被 spring 转换为 <code>new int[0]</code></li>\n</ul>\n<h4 id=\"级联选择\"><a href=\"#级联选择\" class=\"headerlink\" title=\"级联选择\"></a>级联选择</h4><p>级联选择器中选项的数据结构为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;<span class=\"attr\">value</span>:<span class=\"number\">100</span>, <span class=\"attr\">label</span>:<span class=\"string\">'主页'</span>,<span class=\"attr\">children</span>:[</span><br><span class=\"line\">        &#123;<span class=\"attr\">value</span>:<span class=\"number\">101</span>, <span class=\"attr\">label</span>:<span class=\"string\">'菜单1'</span>, <span class=\"attr\">children</span>:[</span><br><span class=\"line\">            &#123;<span class=\"attr\">value</span>:<span class=\"number\">105</span>, <span class=\"attr\">label</span>:<span class=\"string\">'子项1'</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">value</span>:<span class=\"number\">106</span>, <span class=\"attr\">label</span>:<span class=\"string\">'子项2'</span>&#125;</span><br><span class=\"line\">        ]&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">value</span>:<span class=\"number\">102</span>, <span class=\"attr\">label</span>:<span class=\"string\">'菜单2'</span>, <span class=\"attr\">children</span>:[</span><br><span class=\"line\">            &#123;<span class=\"attr\">value</span>:<span class=\"number\">107</span>, <span class=\"attr\">label</span>:<span class=\"string\">'子项3'</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">value</span>:<span class=\"number\">108</span>, <span class=\"attr\">label</span>:<span class=\"string\">'子项4'</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">value</span>:<span class=\"number\">109</span>, <span class=\"attr\">label</span>:<span class=\"string\">'子项5'</span>&#125;</span><br><span class=\"line\">        ]&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">value</span>:<span class=\"number\">103</span>, <span class=\"attr\">label</span>:<span class=\"string\">'菜单3'</span>, <span class=\"attr\">children</span>:[</span><br><span class=\"line\">            &#123;<span class=\"attr\">value</span>:<span class=\"number\">110</span>, <span class=\"attr\">label</span>:<span class=\"string\">'子项6'</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">value</span>:<span class=\"number\">111</span>, <span class=\"attr\">label</span>:<span class=\"string\">'子项7'</span>&#125;</span><br><span class=\"line\">        ]&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">value</span>:<span class=\"number\">104</span>, <span class=\"attr\">label</span>:<span class=\"string\">'菜单4'</span>&#125;</span><br><span class=\"line\">    ]&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>下面的例子是将后端返回的一维数组【树化】</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;el-cascader :options=&quot;ops&quot;&gt;&lt;/el-cascader&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import axios from &apos;../util/myaxios&apos;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    async mounted() &#123;</span><br><span class=\"line\">        const resp = await axios.get(&apos;/api/menu&apos;)</span><br><span class=\"line\">        console.log(resp.data.data)</span><br><span class=\"line\">        const array = resp.data.data;</span><br><span class=\"line\"></span><br><span class=\"line\">        const map = new Map(); </span><br><span class=\"line\"></span><br><span class=\"line\">        // 1. 将所有数据存入 map 集合(为了接下来查找效率)</span><br><span class=\"line\">        for(const &#123;id,name,pid&#125; of array) &#123;</span><br><span class=\"line\">            map.set(id, &#123;value:id, label:name, pid:pid&#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 2. 建立父子关系</span><br><span class=\"line\">        // 3. 找到顶层对象</span><br><span class=\"line\">        const top = [];</span><br><span class=\"line\">        for(const obj of map.values()) &#123;</span><br><span class=\"line\">            const parent = map.get(obj.pid);</span><br><span class=\"line\">            if(parent !== undefined) &#123;</span><br><span class=\"line\">                parent.children ??= [];</span><br><span class=\"line\">                parent.children.push(obj);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                top.push(obj)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.ops = top;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            ops: []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-Vue-Router\"><a href=\"#2-Vue-Router\" class=\"headerlink\" title=\"2) Vue-Router\"></a>2) Vue-Router</h3><p>vue 属于单页面应用，所谓的路由，就是根据浏览器路径不同，用不同的<strong>视图组件</strong>替换这个页面内容展示</p>\n<h4 id=\"配置路由\"><a href=\"#配置路由\" class=\"headerlink\" title=\"配置路由\"></a>配置路由</h4><p>新建一个路由 js 文件，例如 src/router/example14.js，内容如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ContainerView <span class=\"keyword\">from</span> <span class=\"string\">'@/views/example14/ContainerView.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> LoginView <span class=\"keyword\">from</span> <span class=\"string\">'@/views/example14/LoginView.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> NotFoundView <span class=\"keyword\">from</span> <span class=\"string\">'@/views/example14/NotFoundView.vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueRouter)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path:<span class=\"string\">'/'</span>,</span><br><span class=\"line\">    component: ContainerView</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path:<span class=\"string\">'/login'</span>,</span><br><span class=\"line\">    component: LoginView</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path:<span class=\"string\">'/404'</span>,</span><br><span class=\"line\">    component: NotFoundView</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  routes</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>最重要的就是建立了【路径】与【视图组件】之间的映射关系</li>\n<li>本例中映射了 3 个路径与对应的视图组件</li>\n</ul>\n<p>在 main.js 中采用我们的路由 js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> e14 <span class=\"keyword\">from</span> <span class=\"string\">'./views/Example14View.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router/example14'</span>  <span class=\"comment\">// 修改这里</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Element <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Element)</span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(e14)</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>根组件是 Example14View.vue，内容为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;all&quot;&gt;</span><br><span class=\"line\">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>样式略</li>\n<li>其中 <code>&lt;router-view&gt;</code> 起到占位作用，改变路径后，这个路径对应的视图组件就会占据 <code>&lt;router-view&gt;</code> 的位置，替换掉它之前的内容</li>\n</ul>\n<h4 id=\"动态导入\"><a href=\"#动态导入\" class=\"headerlink\" title=\"动态导入\"></a>动态导入</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueRouter)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path:<span class=\"string\">'/'</span>,</span><br><span class=\"line\">    component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/views/example14/ContainerView.vue'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path:<span class=\"string\">'/login'</span>,</span><br><span class=\"line\">    component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/views/example14/LoginView.vue'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path:<span class=\"string\">'/404'</span>,</span><br><span class=\"line\">    component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/views/example14/NotFoundView.vue'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  routes</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>静态导入是将所有组件的 js 代码打包到一起，如果组件非常多，打包后的 js 文件会很大，影响页面加载速度</li>\n<li>动态导入是将组件的 js 代码放入独立的文件，用到时才加载</li>\n</ul>\n<h4 id=\"嵌套路由\"><a href=\"#嵌套路由\" class=\"headerlink\" title=\"嵌套路由\"></a>嵌套路由</h4><p>组件内再要切换内容，就需要用到嵌套路由（子路由），下面的例子是在【ContainerView 组件】内定义了 3 个子路由</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path:<span class=\"string\">'/'</span>,</span><br><span class=\"line\">    component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/views/example14/ContainerView.vue'</span>),</span><br><span class=\"line\">    redirect: <span class=\"string\">'/c/p1'</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123; </span><br><span class=\"line\">        path:<span class=\"string\">'c/p1'</span>,</span><br><span class=\"line\">        component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/views/example14/container/P1View.vue'</span>)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123; </span><br><span class=\"line\">        path:<span class=\"string\">'c/p2'</span>,</span><br><span class=\"line\">        component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/views/example14/container/P2View.vue'</span>)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123; </span><br><span class=\"line\">        path:<span class=\"string\">'c/p3'</span>,</span><br><span class=\"line\">        component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/views/example14/container/P3View.vue'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path:<span class=\"string\">'/login'</span>,</span><br><span class=\"line\">    component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/views/example14/LoginView.vue'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path:<span class=\"string\">'/404'</span>,</span><br><span class=\"line\">    component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/views/example14/NotFoundView.vue'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path:<span class=\"string\">'*'</span>,</span><br><span class=\"line\">    redirect: <span class=\"string\">'/404'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>子路由变化，切换的是【ContainerView 组件】中 <code>&lt;router-view&gt;&lt;/router-view&gt;</code> 部分的内容</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"container\"</span>&gt;</span><br><span class=\"line\">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>redirect 可以用来重定向（跳转）到一个新的地址</li>\n<li>path 的取值为 * 表示匹配不到其它 path 时，就会匹配它</li>\n</ul>\n<h4 id=\"ElementUI-布局\"><a href=\"#ElementUI-布局\" class=\"headerlink\" title=\"ElementUI 布局\"></a>ElementUI 布局</h4><p>通常主页要做布局，下面的代码是 ElementUI 提供的【上-【左-右】】布局</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">        &lt;el-container&gt;</span><br><span class=\"line\">            &lt;el-header&gt;&lt;/el-header&gt;</span><br><span class=\"line\">            &lt;el-container&gt;</span><br><span class=\"line\">                &lt;el-aside width=&quot;200px&quot;&gt;&lt;/el-aside&gt;</span><br><span class=\"line\">                &lt;el-main&gt;</span><br><span class=\"line\">                    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class=\"line\">                &lt;/el-main&gt;</span><br><span class=\"line\">            &lt;/el-container&gt;</span><br><span class=\"line\">        &lt;/el-container&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"路由跳转\"><a href=\"#路由跳转\" class=\"headerlink\" title=\"路由跳转\"></a>路由跳转</h4><h5 id=\"标签式\"><a href=\"#标签式\" class=\"headerlink\" title=\"标签式\"></a>标签式</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-aside width=&quot;200px&quot;&gt;</span><br><span class=\"line\">    &lt;router-link to=&quot;/c1/p1&quot;&gt;P1&lt;/router-link&gt;</span><br><span class=\"line\">    &lt;router-link to=&quot;/c1/p2&quot;&gt;P2&lt;/router-link&gt;</span><br><span class=\"line\">    &lt;router-link to=&quot;/c1/p3&quot;&gt;P3&lt;/router-link&gt;</span><br><span class=\"line\">&lt;/el-aside&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"编程式\"><a href=\"#编程式\" class=\"headerlink\" title=\"编程式\"></a>编程式</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-header&gt;</span><br><span class=\"line\">    &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-edit&quot; </span><br><span class=\"line\">               circle size=&quot;mini&quot; @click=&quot;jump(&apos;/c1/p1&apos;)&quot;&gt;&lt;/el-button&gt;</span><br><span class=\"line\">    &lt;el-button type=&quot;success&quot; icon=&quot;el-icon-check&quot; </span><br><span class=\"line\">               circle size=&quot;mini&quot; @click=&quot;jump(&apos;/c1/p2&apos;)&quot;&gt;&lt;/el-button&gt;</span><br><span class=\"line\">    &lt;el-button type=&quot;warning&quot; icon=&quot;el-icon-star-off&quot; </span><br><span class=\"line\">               circle size=&quot;mini&quot; @click=&quot;jump(&apos;/c1/p3&apos;)&quot;&gt;&lt;/el-button&gt;</span><br><span class=\"line\">&lt;/el-header&gt;</span><br></pre></td></tr></table></figure>\n\n<p>jump 方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    methods : &#123;</span><br><span class=\"line\">        jump(url) &#123;</span><br><span class=\"line\">            this.$router.push(url);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其中 this.$router 是拿到路由对象</li>\n<li>push 方法根据 url 进行跳转</li>\n</ul>\n<h5 id=\"导航菜单\"><a href=\"#导航菜单\" class=\"headerlink\" title=\"导航菜单\"></a>导航菜单</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-menu router background-color=&quot;#545c64&quot; text-color=&quot;#fff&quot; active-text-color=&quot;#ffd04b&quot;&gt;</span><br><span class=\"line\">    &lt;el-submenu index=&quot;/c1&quot;&gt;</span><br><span class=\"line\">        &lt;span slot=&quot;title&quot;&gt;</span><br><span class=\"line\">            &lt;i class=&quot;el-icon-platform-eleme&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">            菜单1</span><br><span class=\"line\">        &lt;/span&gt;</span><br><span class=\"line\">        &lt;el-menu-item index=&quot;/c1/p1&quot;&gt;子项1&lt;/el-menu-item&gt;</span><br><span class=\"line\">        &lt;el-menu-item index=&quot;/c1/p2&quot;&gt;子项2&lt;/el-menu-item&gt;</span><br><span class=\"line\">        &lt;el-menu-item index=&quot;/c1/p3&quot;&gt;子项3&lt;/el-menu-item&gt;</span><br><span class=\"line\">    &lt;/el-submenu&gt;</span><br><span class=\"line\">    &lt;el-menu-item index=&quot;/c2&quot;&gt;</span><br><span class=\"line\">        &lt;span slot=&quot;title&quot;&gt;</span><br><span class=\"line\">            &lt;i class=&quot;el-icon-phone&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">            菜单2</span><br><span class=\"line\">        &lt;/span&gt;</span><br><span class=\"line\">    &lt;/el-menu-item&gt;</span><br><span class=\"line\">    &lt;el-menu-item index=&quot;/c3&quot;&gt;</span><br><span class=\"line\">        &lt;span slot=&quot;title&quot;&gt;</span><br><span class=\"line\">            &lt;i class=&quot;el-icon-star-on&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">            菜单3</span><br><span class=\"line\">        &lt;/span&gt;</span><br><span class=\"line\">    &lt;/el-menu-item&gt;</span><br><span class=\"line\">&lt;/el-menu&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>图标和菜单项文字建议用 <code>&lt;span slot=&#39;title&#39;&gt;&lt;/span&gt;</code> 包裹起来</li>\n<li><code>el-menu</code> 标签上加上 <code>router</code> 属性，表示结合导航菜单与路由对象，此时，就可以利用菜单项的 <code>index</code> 属性来路由跳转</li>\n</ul>\n<h4 id=\"动态路由与菜单\"><a href=\"#动态路由与菜单\" class=\"headerlink\" title=\"动态路由与菜单\"></a>动态路由与菜单</h4><p>将菜单、路由信息（仅主页的）存入数据库中</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> menu(<span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>, pid, <span class=\"keyword\">path</span>, component, icon) <span class=\"keyword\">values</span></span><br><span class=\"line\">    (<span class=\"number\">101</span>, <span class=\"string\">'菜单1'</span>, <span class=\"number\">0</span>,   <span class=\"string\">'/m1'</span>,    <span class=\"literal\">null</span>,         <span class=\"string\">'el-icon-platform-eleme'</span>),</span><br><span class=\"line\">    (<span class=\"number\">102</span>, <span class=\"string\">'菜单2'</span>, <span class=\"number\">0</span>,   <span class=\"string\">'/m2'</span>,    <span class=\"literal\">null</span>,         <span class=\"string\">'el-icon-delete-solid'</span>),</span><br><span class=\"line\">    (<span class=\"number\">103</span>, <span class=\"string\">'菜单3'</span>, <span class=\"number\">0</span>,   <span class=\"string\">'/m3'</span>,    <span class=\"literal\">null</span>,         <span class=\"string\">'el-icon-s-tools'</span>),</span><br><span class=\"line\">    (<span class=\"number\">104</span>, <span class=\"string\">'菜单4'</span>, <span class=\"number\">0</span>,   <span class=\"string\">'/m4'</span>,    <span class=\"string\">'M4View.vue'</span>, <span class=\"string\">'el-icon-user-solid'</span>),</span><br><span class=\"line\">    (<span class=\"number\">105</span>, <span class=\"string\">'子项1'</span>, <span class=\"number\">101</span>, <span class=\"string\">'/m1/c1'</span>, <span class=\"string\">'C1View.vue'</span>, <span class=\"string\">'el-icon-s-goods'</span>),</span><br><span class=\"line\">    (<span class=\"number\">106</span>, <span class=\"string\">'子项2'</span>, <span class=\"number\">101</span>, <span class=\"string\">'/m1/c2'</span>, <span class=\"string\">'C2View.vue'</span>, <span class=\"string\">'el-icon-menu'</span>),</span><br><span class=\"line\">    (<span class=\"number\">107</span>, <span class=\"string\">'子项3'</span>, <span class=\"number\">102</span>, <span class=\"string\">'/m2/c3'</span>, <span class=\"string\">'C3View.vue'</span>, <span class=\"string\">'el-icon-s-marketing'</span>),</span><br><span class=\"line\">    (<span class=\"number\">108</span>, <span class=\"string\">'子项4'</span>, <span class=\"number\">102</span>, <span class=\"string\">'/m2/c4'</span>, <span class=\"string\">'C4View.vue'</span>, <span class=\"string\">'el-icon-s-platform'</span>),</span><br><span class=\"line\">    (<span class=\"number\">109</span>, <span class=\"string\">'子项5'</span>, <span class=\"number\">102</span>, <span class=\"string\">'/m2/c5'</span>, <span class=\"string\">'C5View.vue'</span>, <span class=\"string\">'el-icon-picture'</span>),</span><br><span class=\"line\">    (<span class=\"number\">110</span>, <span class=\"string\">'子项6'</span>, <span class=\"number\">103</span>, <span class=\"string\">'/m3/c6'</span>, <span class=\"string\">'C6View.vue'</span>, <span class=\"string\">'el-icon-upload'</span>),</span><br><span class=\"line\">    (<span class=\"number\">111</span>, <span class=\"string\">'子项7'</span>, <span class=\"number\">103</span>, <span class=\"string\">'/m3/c7'</span>, <span class=\"string\">'C7View.vue'</span>, <span class=\"string\">'el-icon-s-promotion'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>不同的用户查询的的菜单、路由信息是不一样的</p>\n<p>例如：访问 <code>/api/menu/admin</code> 返回所有的数据</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">102</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"菜单2\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"icon\"</span>: <span class=\"string\">\"el-icon-delete-solid\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"path\"</span>: <span class=\"string\">\"/m2\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"pid\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"component\"</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">107</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"子项3\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"icon\"</span>: <span class=\"string\">\"el-icon-s-marketing\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"path\"</span>: <span class=\"string\">\"/m2/c3\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"pid\"</span>: <span class=\"number\">102</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"component\"</span>: <span class=\"string\">\"C3View.vue\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">108</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"子项4\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"icon\"</span>: <span class=\"string\">\"el-icon-s-platform\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"path\"</span>: <span class=\"string\">\"/m2/c4\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"pid\"</span>: <span class=\"number\">102</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"component\"</span>: <span class=\"string\">\"C4View.vue\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">109</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"子项5\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"icon\"</span>: <span class=\"string\">\"el-icon-picture\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"path\"</span>: <span class=\"string\">\"/m2/c5\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"pid\"</span>: <span class=\"number\">102</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"component\"</span>: <span class=\"string\">\"C5View.vue\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>访问 <code>/api/menu/wang</code> 返回</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">103</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"菜单3\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"icon\"</span>: <span class=\"string\">\"el-icon-s-tools\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"path\"</span>: <span class=\"string\">\"/m3\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"pid\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"component\"</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">110</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"子项6\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"icon\"</span>: <span class=\"string\">\"el-icon-upload\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"path\"</span>: <span class=\"string\">\"/m3/c6\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"pid\"</span>: <span class=\"number\">103</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"component\"</span>: <span class=\"string\">\"C6View.vue\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">111</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"子项7\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"icon\"</span>: <span class=\"string\">\"el-icon-s-promotion\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"path\"</span>: <span class=\"string\">\"/m3/c7\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"pid\"</span>: <span class=\"number\">103</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"component\"</span>: <span class=\"string\">\"C7View.vue\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>前端根据他们身份不同，动态添加路由和显示菜单</p>\n<h5 id=\"动态路由\"><a href=\"#动态路由\" class=\"headerlink\" title=\"动态路由\"></a>动态路由</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addServerRoutes</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> &#123; id, path, component &#125; <span class=\"keyword\">of</span> array) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (component !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 动态添加路由</span></span><br><span class=\"line\">      <span class=\"comment\">// 参数1：父路由名称</span></span><br><span class=\"line\">      <span class=\"comment\">// 参数2：路由信息对象</span></span><br><span class=\"line\">      router.addRoute(<span class=\"string\">'c'</span>, &#123;</span><br><span class=\"line\">        path: path,</span><br><span class=\"line\">        name: id,</span><br><span class=\"line\">        component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">`@/views/example15/container/<span class=\"subst\">$&#123;component&#125;</span>`</span>)</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>js 这边只保留几个固定路由，如主页、404 和 login</li>\n<li>以上方法执行时，将服务器返回的路由信息加入到名为 c 的父路由中去</li>\n<li>这里要注意组件路径，前面 @/views 是必须在 js 这边完成拼接的，否则 import 函数会失效</li>\n</ul>\n<h5 id=\"重置路由\"><a href=\"#重置路由\" class=\"headerlink\" title=\"重置路由\"></a>重置路由</h5><p>在用户注销时应当重置路由</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resetRouter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  router.matcher = <span class=\"keyword\">new</span> VueRouter(&#123; routes &#125;).matcher</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"页面刷新\"><a href=\"#页面刷新\" class=\"headerlink\" title=\"页面刷新\"></a>页面刷新</h5><p>页面刷新后，会导致动态添加的路由失效，解决方法是将路由数据存入 sessionStorage</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import axios from &apos;@/util/myaxios&apos;</span><br><span class=\"line\">import &#123;resetRouter, addServerRoutes&#125; from &apos;@/router/example15&apos;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            username: &apos;admin&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        async login() &#123;       </span><br><span class=\"line\">            resetRouter(); // 重置路由     </span><br><span class=\"line\">            const resp = await axios.get(`/api/menu/$&#123;this.username&#125;`)</span><br><span class=\"line\">            const array = resp.data.data;</span><br><span class=\"line\">            // localStorage     即使浏览器关闭，存储的数据仍在</span><br><span class=\"line\">            // sessionStorage   以标签页为单位，关闭标签页时，数据被清除</span><br><span class=\"line\">            sessionStorage.setItem(&apos;serverRoutes&apos;, JSON.stringify(array))</span><br><span class=\"line\">            addServerRoutes(array); // 动态添加路由</span><br><span class=\"line\">            this.$router.push(&apos;/&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>页面刷新，重新创建路由对象时，从 sessionStorage 里恢复路由数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  routes</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从 sessionStorage 中恢复路由数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> serverRoutes = sessionStorage.getItem(<span class=\"string\">'serverRoutes'</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(serverRoutes) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> array = <span class=\"built_in\">JSON</span>.parse(serverRoutes);</span><br><span class=\"line\">  addServerRoutes(array) <span class=\"comment\">// 动态添加路由</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"动态菜单\"><a href=\"#动态菜单\" class=\"headerlink\" title=\"动态菜单\"></a>动态菜单</h5><p>代码部分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    mounted() &#123;</span><br><span class=\"line\">        const serverRoutes = sessionStorage.getItem(&apos;serverRoutes&apos;);</span><br><span class=\"line\">        const array = JSON.parse(serverRoutes);</span><br><span class=\"line\">        const map = new Map();</span><br><span class=\"line\">        for(const obj of array) &#123;</span><br><span class=\"line\">            map.set(obj.id, obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        const top = [];</span><br><span class=\"line\">        for(const obj of array) &#123;</span><br><span class=\"line\">            const parent = map.get(obj.pid);</span><br><span class=\"line\">            if(parent) &#123;</span><br><span class=\"line\">                parent.children ??= [];</span><br><span class=\"line\">                parent.children.push(obj);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                top.push(obj);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.top = top;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            top: []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>菜单部分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-menu router background-color=&quot;#545c64&quot; text-color=&quot;#fff&quot; active-text-color=&quot;#ffd04b&quot; :unique-opened=&quot;true&quot;&gt;</span><br><span class=\"line\">    &lt;template v-for=&quot;m1 of top&quot;&gt;</span><br><span class=\"line\">&lt;el-submenu v-if=&quot;m1.children&quot; :key=&quot;m1.id&quot; :index=&quot;m1.path&quot;&gt;</span><br><span class=\"line\">    &lt;span slot=&quot;title&quot;&gt;</span><br><span class=\"line\">        &lt;i :class=&quot;m1.icon&quot;&gt;&lt;/i&gt; &#123;&#123;m1.name&#125;&#125;</span><br><span class=\"line\">        &lt;/span&gt;</span><br><span class=\"line\">    &lt;el-menu-item v-for=&quot;m2 of m1.children&quot; :key=&quot;m2.id&quot; :index=&quot;m2.path&quot;&gt;</span><br><span class=\"line\">        &lt;span slot=&quot;title&quot;&gt;</span><br><span class=\"line\">            &lt;i :class=&quot;m2.icon&quot;&gt;&lt;/i&gt; &#123;&#123;m2.name&#125;&#125;</span><br><span class=\"line\">        &lt;/span&gt;</span><br><span class=\"line\">        &lt;/el-menu-item&gt;</span><br><span class=\"line\">        &lt;/el-submenu&gt;</span><br><span class=\"line\">&lt;el-menu-item v-else :key=&quot;m1.id&quot; :index=&quot;m1.path&quot;&gt;</span><br><span class=\"line\">    &lt;span slot=&quot;title&quot;&gt;</span><br><span class=\"line\">        &lt;i :class=&quot;m1.icon&quot;&gt;&lt;/i&gt; &#123;&#123;m1.name&#125;&#125;</span><br><span class=\"line\">        &lt;/span&gt;</span><br><span class=\"line\">        &lt;/el-menu-item&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\">&lt;/el-menu&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>没有考虑递归菜单问题，认为菜单只有两级</li>\n</ul>\n<h3 id=\"3-Vuex\"><a href=\"#3-Vuex\" class=\"headerlink\" title=\"3) Vuex\"></a>3) Vuex</h3><h4 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h4><p>vuex 可以在多个组件之间共享数据，并且共享的数据是【响应式】的，即数据的变更能及时渲染到模板</p>\n<ul>\n<li>与之对比 localStorage 与 sessionStorage 也能共享数据，但缺点是数据并非【响应式】</li>\n</ul>\n<p>首先需要定义 state 与 mutations 他们一个用来读取共享数据，一个用来修改共享数据</p>\n<p>src/store/index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  读取数据，走 state, getters</span></span><br><span class=\"line\"><span class=\"comment\">  修改数据，走 mutations, actions</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">''</span>,</span><br><span class=\"line\">    age: <span class=\"number\">18</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    updateName(state, name) &#123;</span><br><span class=\"line\">      state.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>修改共享数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;p&quot;&gt;</span><br><span class=\"line\">        &lt;el-input placeholder=&quot;请修改用户姓名&quot; </span><br><span class=\"line\">            size=&quot;mini&quot; v-model=&quot;name&quot;&gt;&lt;/el-input&gt;</span><br><span class=\"line\">        &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot; @click=&quot;update()&quot;&gt;修改&lt;/el-button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        update()&#123;</span><br><span class=\"line\">            this.$store.commit(&apos;updateName&apos;, this.name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            name:&apos;&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mutations 方法不能直接调用，只能通过 <code>store.commit(mutation方法名, 参数)</code> 来间接调用</li>\n</ul>\n<p>读取共享数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">        &lt;el-container&gt;</span><br><span class=\"line\">            &lt;el-header&gt;</span><br><span class=\"line\">                &lt;div class=&quot;t&quot;&gt;</span><br><span class=\"line\">                    欢迎您：&#123;&#123; $store.state.name &#125;&#125;, &#123;&#123; $store.state.age &#125;&#125;</span><br><span class=\"line\">    \t\t\t&lt;/div&gt;</span><br><span class=\"line\">            &lt;/el-header&gt;</span><br><span class=\"line\">            &lt;el-container&gt;</span><br><span class=\"line\">                &lt;el-aside width=&quot;200px&quot;&gt;</span><br><span class=\"line\">                &lt;/el-aside&gt;</span><br><span class=\"line\">                &lt;el-main&gt;</span><br><span class=\"line\">                    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class=\"line\">                &lt;/el-main&gt;</span><br><span class=\"line\">            &lt;/el-container&gt;</span><br><span class=\"line\">        &lt;/el-container&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"mapState\"><a href=\"#mapState\" class=\"headerlink\" title=\"mapState\"></a>mapState</h4><p>每次去写 <code>$store.state.name</code> 这样的代码显得非常繁琐，可以用 vuex 帮我们生成计算属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">        &lt;el-container&gt;</span><br><span class=\"line\">            &lt;el-header&gt;</span><br><span class=\"line\">                &lt;div class=&quot;t&quot;&gt;欢迎您：&#123;&#123; name &#125;&#125;, &#123;&#123; age &#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">            &lt;/el-header&gt;</span><br><span class=\"line\">            &lt;el-container&gt;</span><br><span class=\"line\">                &lt;el-aside width=&quot;200px&quot;&gt;</span><br><span class=\"line\">                &lt;/el-aside&gt;</span><br><span class=\"line\">                &lt;el-main&gt;</span><br><span class=\"line\">                    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class=\"line\">                &lt;/el-main&gt;</span><br><span class=\"line\">            &lt;/el-container&gt;</span><br><span class=\"line\">        &lt;/el-container&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import &#123; mapState &#125; from &apos;vuex&apos;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">        ...mapState([&apos;name&apos;, &apos;age&apos;])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mapState 返回的是一个对象，对象内包含了 name() 和 age() 的这两个方法作为计算属性</li>\n<li>此对象配合 <code>...</code> 展开运算符，填充入 computed 即可使用</li>\n</ul>\n<h4 id=\"mapMutations\"><a href=\"#mapMutations\" class=\"headerlink\" title=\"mapMutations\"></a>mapMutations</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;p&quot;&gt;</span><br><span class=\"line\">        &lt;el-input placeholder=&quot;请修改用户姓名&quot; </span><br><span class=\"line\">            size=&quot;mini&quot; v-model=&quot;name&quot;&gt;&lt;/el-input&gt;</span><br><span class=\"line\">        &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot; @click=&quot;updateName(name)&quot;&gt;修改&lt;/el-button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import &#123;mapMutations&#125; from &apos;vuex&apos;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        ...mapMutations([&apos;updateName&apos;])</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            name:&apos;&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>类似的，调用 mutation 修改共享数据也可以简化</li>\n<li>mapMutations 返回的对象中包含的方法，就会调用 store.commit() 来执行 mutation 方法</li>\n<li>注意参数传递略有不同</li>\n</ul>\n<h4 id=\"actions\"><a href=\"#actions\" class=\"headerlink\" title=\"actions\"></a>actions</h4><p>mutations 方法内不能包括修改不能立刻生效的代码，否则会造成 Vuex 调试工具工作不准确，必须把这些代码写在 actions 方法中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  读取数据，走 state, getters</span></span><br><span class=\"line\"><span class=\"comment\">  修改数据，走 mutations, actions</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'@/util/myaxios'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">''</span>,</span><br><span class=\"line\">    age: <span class=\"number\">18</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    updateName(state, name) &#123;</span><br><span class=\"line\">      state.name = name;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 错误的用法，如果在mutations方法中包含了异步操作，会造成开发工具不准确</span></span><br><span class=\"line\">    <span class=\"comment\">/* async updateServerName(state) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">      const resp = await axios.get('/api/user');</span></span><br><span class=\"line\"><span class=\"comment\">      const &#123;name, age&#125; = resp.data.data;</span></span><br><span class=\"line\"><span class=\"comment\">      state.name = name;</span></span><br><span class=\"line\"><span class=\"comment\">      state.age = age;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125; */</span></span><br><span class=\"line\">    updateServerName(state, user) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; name, age &#125; = user;</span><br><span class=\"line\">      state.name = name;</span><br><span class=\"line\">      state.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> updateServerName(context) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> resp = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">'/api/user'</span>);</span><br><span class=\"line\">      context.commit(<span class=\"string\">'updateServerName'</span>, resp.data.data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先应当调用 actions 的 updateServerName 获取数据</li>\n<li>然后再由它间接调用 mutations 的 updateServerName 更新共享数据</li>\n</ul>\n<p>页面使用 actions 的方法可以这么写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;p&quot;&gt;</span><br><span class=\"line\">        &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot;</span><br><span class=\"line\">            @click=&quot;updateServerName()&quot;&gt;从服务器获取数据,存入store&lt;/el-button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import &#123; mapActions &#125; from &apos;vuex&apos;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        ...mapActions([&apos;updateServerName&apos;])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>mapActions 会生成调用 actions 中方法的代码</p>\n</li>\n<li><p>调用 actions 的代码内部等价于，它返回的是 Promise 对象，可以用同步或异步方式接收结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$store.dispatch(<span class=\"string\">'action名称'</span>, 参数)</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"Vue-2\"><a href=\"#Vue-2\" class=\"headerlink\" title=\"Vue 2\"></a>Vue 2</h1><h2 id=\"1-Vue-基础\"><a href=\"#1-Vue-基础\" class=\"headerlink\" title=\"1. Vue 基础\"></a>1. Vue 基础</h2><h3 id=\"1-环境准备\"><a href=\"#1-环境准备\" class=\"headerlink\" title=\"1) 环境准备\"></a>1) 环境准备</h3><h4 id=\"安装脚手架\"><a href=\"#安装脚手架\" class=\"headerlink\" title=\"安装脚手架\"></a>安装脚手架</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-g 参数表示全局安装，这样在任意目录都可以使用 vue 脚本创建项目</li>\n</ul>\n<h4 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h4><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue ui</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装-devtools\"><a href=\"#安装-devtools\" class=\"headerlink\" title=\"安装 devtools\"></a>安装 devtools</h4><ul>\n<li>devtools 插件网址：<a href=\"https://devtools.vuejs.org/guide/installation.html\" target=\"_blank\" rel=\"noopener\">https://devtools.vuejs.org/guide/installation.html</a></li>\n</ul>\n<h4 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h4><p>进入项目目录，执行</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run serve</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"修改端口\"><a href=\"#修改端口\" class=\"headerlink\" title=\"修改端口\"></a>修改端口</h4><p>前端服务器默认占用了 8080 端口，需要修改一下</p>\n<ul>\n<li><p>文档地址：<a href=\"https://webpack.js.org/configuration/dev-server/#devserverport\" target=\"_blank\" rel=\"noopener\">DevServer | webpack</a></p>\n</li>\n<li><p>打开 vue.config.js 添加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; defineConfig &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'@vue/cli-service'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = defineConfig(&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    port: <span class=\"number\">7070</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"添加代理\"><a href=\"#添加代理\" class=\"headerlink\" title=\"添加代理\"></a>添加代理</h4><p>为了避免前后端服务器联调时， fetch、xhr 请求产生跨域问题，需要配置代理</p>\n<ul>\n<li><p>文档地址同上</p>\n</li>\n<li><p>打开 vue.config.js 添加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; defineConfig &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'@vue/cli-service'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = defineConfig(&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">    </span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    port: <span class=\"number\">7070</span>,</span><br><span class=\"line\">    proxy: &#123;</span><br><span class=\"line\">      <span class=\"string\">'/api'</span>: &#123;</span><br><span class=\"line\">        target: <span class=\"string\">'http://localhost:8080'</span>,</span><br><span class=\"line\">        changeOrigin: <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h4 id=\"Vue-项目结构\"><a href=\"#Vue-项目结构\" class=\"headerlink\" title=\"Vue 项目结构\"></a>Vue 项目结构</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PS D:\\2022.js\\代码\\第3章\\client&gt; tree src</span><br><span class=\"line\">D:\\2022.JS\\代码\\第3章\\CLIENT\\SRC</span><br><span class=\"line\">├─assets</span><br><span class=\"line\">├─components</span><br><span class=\"line\">├─router</span><br><span class=\"line\">├─store</span><br><span class=\"line\">└─views</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>assets - 静态资源</li>\n<li>components - 可重用组件</li>\n<li>router - 路由</li>\n<li>store - 数据共享</li>\n<li>views - 视图组件</li>\n</ul>\n<p>以后还会添加</p>\n<ul>\n<li>api - 跟后台交互，发送 fetch、xhr 请求，接收响应</li>\n<li>plugins - 插件</li>\n</ul>\n<h3 id=\"2-Vue-组件\"><a href=\"#2-Vue-组件\" class=\"headerlink\" title=\"2) Vue 组件\"></a>2) Vue 组件</h3><p>Vue 的组件文件以 .vue 结尾，每个组件由三部分组成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>template 模板部分，由它生成 html 代码</li>\n<li>script 代码部分，控制模板的数据来源和行为</li>\n<li>style 样式部分，一般不咋关心</li>\n</ul>\n<p>入口组件是 App.vue</p>\n<p>先删除原有代码，来个 Hello, World 例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      msg: &quot;Hello, Vue!&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>解释</p>\n<ul>\n<li>export default 导出组件对象，供 main.js 导入使用</li>\n<li>这个对象有一个 data 方法，返回一个<strong>对象</strong>，给 template 提供数据</li>\n<li>双括号 在 Vue 里称之为插值表达式，用来<strong>绑定</strong> data 方法返回的<strong>对象</strong>属性，<strong>绑定</strong>的含义是数据发生变化时，页面显示会同步变化</li>\n</ul>\n<h4 id=\"文本插值\"><a href=\"#文本插值\" class=\"headerlink\" title=\"文本插值\"></a>文本插值</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;&#123;&#123; name &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">        &lt;h1&gt;&#123;&#123; age &gt; 60 ? &apos;老年&apos; : &apos;青年&apos; &#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    data: function () &#123;</span><br><span class=\"line\">        return &#123; name: &apos;张三&apos;, age: 70 &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>双括号 里只能绑定一个属性，绑定多个属性需要用多个 双括号 分别绑定</li>\n<li>template 内只能有一个根元素</li>\n<li>插值内可以进行简单的表达式计算</li>\n</ul>\n<h4 id=\"属性绑定\"><a href=\"#属性绑定\" class=\"headerlink\" title=\"属性绑定\"></a>属性绑定</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;div&gt;&lt;input type=&quot;text&quot; v-bind:value=&quot;name&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;&lt;input type=&quot;date&quot; v-bind:value=&quot;birthday&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;&lt;input type=&quot;text&quot; :value=&quot;age&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    data: function () &#123;</span><br><span class=\"line\">        return &#123; name: &apos;王五&apos;, birthday: &apos;1995-05-01&apos;, age: 20 &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>简写方式：可以省略 v-bind 只保留冒号</li>\n</ul>\n<h4 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 事件绑定 --&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;div&gt;&lt;input type=&quot;button&quot; value=&quot;点我执行m1&quot; v-on:click=&quot;m1&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;&lt;input type=&quot;button&quot; value=&quot;点我执行m2&quot; @click=&quot;m2&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    data: function () &#123;</span><br><span class=\"line\">        return &#123; count: 0 &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        m1() &#123;</span><br><span class=\"line\">            this.count ++;</span><br><span class=\"line\">            console.log(&quot;m1&quot;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        m2() &#123;</span><br><span class=\"line\">            this.count --;</span><br><span class=\"line\">            console.log(&quot;m2&quot;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>简写方式：可以把 v-on: 替换为 @</li>\n<li>在 methods 方法中的 this 代表的是 data 函数返回的数据对象</li>\n</ul>\n<h4 id=\"双向绑定\"><a href=\"#双向绑定\" class=\"headerlink\" title=\"双向绑定\"></a>双向绑定</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;label for=&quot;&quot;&gt;请输入姓名&lt;/label&gt;</span><br><span class=\"line\">            &lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;label for=&quot;&quot;&gt;请输入年龄&lt;/label&gt;</span><br><span class=\"line\">            &lt;input type=&quot;text&quot; v-model=&quot;age&quot;&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;label for=&quot;&quot;&gt;请选择性别&lt;/label&gt;</span><br><span class=\"line\">            男 &lt;input type=&quot;radio&quot; value=&quot;男&quot; v-model=&quot;sex&quot;&gt;</span><br><span class=\"line\">            女 &lt;input type=&quot;radio&quot; value=&quot;女&quot; v-model=&quot;sex&quot;&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &lt;label for=&quot;&quot;&gt;请选择爱好&lt;/label&gt;</span><br><span class=\"line\">            游泳 &lt;input type=&quot;checkbox&quot; value=&quot;游泳&quot; v-model=&quot;fav&quot;&gt;</span><br><span class=\"line\">            打球 &lt;input type=&quot;checkbox&quot; value=&quot;打球&quot; v-model=&quot;fav&quot;&gt;</span><br><span class=\"line\">            健身 &lt;input type=&quot;checkbox&quot; value=&quot;健身&quot; v-model=&quot;fav&quot;&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    data: function () &#123;</span><br><span class=\"line\">        return &#123; name: &apos;&apos;, age: null, sex:&apos;男&apos; , fav:[&apos;打球&apos;]&#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>用 v-model 实现双向绑定，即 <ul>\n<li>javascript 数据可以同步到表单标签</li>\n<li>反过来用户在表单标签输入的新值也会同步到 javascript 这边</li>\n</ul>\n</li>\n<li>双向绑定只适用于表单这种带【输入】功能的标签，其它标签的数据绑定，单向就足够了</li>\n<li>复选框这种标签，双向绑定的 javascript 数据类型一般用数组</li>\n</ul>\n<h4 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 计算属性 --&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;h2&gt;&#123;&#123;fullName&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">        &lt;h2&gt;&#123;&#123;fullName&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">        &lt;h2&gt;&#123;&#123;fullName&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    data: function () &#123;</span><br><span class=\"line\">        return &#123; firstName: &apos;三&apos;, lastName: &apos;张&apos; &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    /* methods: &#123;</span><br><span class=\"line\">        fullName() &#123;</span><br><span class=\"line\">            console.log(&apos;进入了 fullName&apos;)</span><br><span class=\"line\">            return this.lastName + this.firstName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,*/</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">        fullName() &#123;</span><br><span class=\"line\">            console.log(&apos;进入了 fullName&apos;)</span><br><span class=\"line\">            return this.lastName + this.firstName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default options;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>普通方法调用必须加 ()，没有缓存功能</li>\n<li>计算属性使用时就把它当属性来用，不加 ()，有缓存功能：<ul>\n<li>一次计算后，会将结果缓存，下次再计算时，只要数据没有变化，不会重新计算，直接返回缓存结果</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"axios\"><a href=\"#axios\" class=\"headerlink\" title=\"axios\"></a>axios</h4><p>axios 它的底层是用了 XMLHttpRequest（xhr）方式发送请求和接收响应，xhr 相对于之前讲过的 fetch api 来说，功能更强大，但由于是比较老的 api，不支持 Promise，axios 对 xhr 进行了封装，使之支持 Promise，并提供了对请求、响应的统一拦截功能</p>\n<p>安装</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install axios -S</span><br></pre></td></tr></table></figure>\n\n<p>导入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>axios 默认导出一个对象，这里的 import 导入的就是它默认导出的对象</li>\n</ul>\n<p>方法</p>\n<table>\n<thead>\n<tr>\n<th>请求</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>axios.get(url[, config])</td>\n<td>:star:</td>\n</tr>\n<tr>\n<td>axios.delete(url[, config])</td>\n<td></td>\n</tr>\n<tr>\n<td>axios.head(url[, config])</td>\n<td></td>\n</tr>\n<tr>\n<td>axios.options(url[, config])</td>\n<td></td>\n</tr>\n<tr>\n<td>axios.post(url[, data[, config]])</td>\n<td>:star:</td>\n</tr>\n<tr>\n<td>axios.put(url[, data[, config]])</td>\n<td></td>\n</tr>\n<tr>\n<td>axios.patch(url[, data[, config]])</td>\n<td></td>\n</tr>\n</tbody></table>\n<ul>\n<li>config - 选项对象、例如查询参数、请求头…</li>\n<li>data - 请求体数据、最常见的是 json 格式数据</li>\n<li>get、head 请求无法携带请求体，这应当是浏览器的限制所致（xhr、fetch api 均有限制）</li>\n<li>options、delete 请求可以通过 config 中的 data 携带请求体</li>\n</ul>\n<p>例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;input type=&quot;button&quot; value=&quot;获取远程数据&quot; @click=&quot;sendReq()&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import axios from &apos;axios&apos;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        async sendReq() &#123;</span><br><span class=\"line\">            // 1. 演示 get, post</span><br><span class=\"line\">            // const resp = await axios.post(&apos;/api/a2&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">            // 2. 发送请求头</span><br><span class=\"line\">            // const resp = await axios.post(&apos;/api/a3&apos;,&#123;&#125;,&#123;</span><br><span class=\"line\">            //     headers:&#123;</span><br><span class=\"line\">            //         Authorization:&apos;abc&apos;</span><br><span class=\"line\">            //     &#125;</span><br><span class=\"line\">            // &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            // 3. 发送请求时携带查询参数 ?name=xxx&amp;age=xxx</span><br><span class=\"line\">            // const name = encodeURIComponent(&apos;&amp;&amp;&amp;&apos;);</span><br><span class=\"line\">            // const age = 18;</span><br><span class=\"line\">            // const resp = await axios.post(`/api/a4?name=$&#123;name&#125;&amp;age=$&#123;age&#125;`);</span><br><span class=\"line\"></span><br><span class=\"line\">            // 不想自己拼串、处理特殊字符、就用下面的办法</span><br><span class=\"line\">            // const resp = await axios.post(&apos;/api/a4&apos;, &#123;&#125;, &#123;</span><br><span class=\"line\">            //     params: &#123;</span><br><span class=\"line\">            //         name:&apos;&amp;&amp;&amp;&amp;&apos;,</span><br><span class=\"line\">            //         age: 20</span><br><span class=\"line\">            //     &#125;</span><br><span class=\"line\">            // &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            // 4. 用请求体发数据，格式为 urlencoded</span><br><span class=\"line\">            // const params = new URLSearchParams();</span><br><span class=\"line\">            // params.append(&quot;name&quot;, &quot;张三&quot;);</span><br><span class=\"line\">            // params.append(&quot;age&quot;, 24)</span><br><span class=\"line\"></span><br><span class=\"line\">            // const resp = await axios.post(&apos;/api/a4&apos;, params);</span><br><span class=\"line\"></span><br><span class=\"line\">            // 5. 用请求体发数据，格式为 multipart</span><br><span class=\"line\">            // const params = new FormData();</span><br><span class=\"line\">            // params.append(&quot;name&quot;, &quot;李四&quot;);</span><br><span class=\"line\">            // params.append(&quot;age&quot;, 30);</span><br><span class=\"line\">            // const resp = await axios.post(&apos;/api/a5&apos;, params);</span><br><span class=\"line\"></span><br><span class=\"line\">            // 6. 用请求体发数据，格式为 json</span><br><span class=\"line\">            const resp = await axios.post(&apos;/api/a5json&apos;, &#123;</span><br><span class=\"line\">                name: &apos;王五&apos;,</span><br><span class=\"line\">                age: 50</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            console.log(resp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>创建实例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> _axios = axios.create(config);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>axios 对象可以直接使用，但使用的是默认的设置</li>\n<li>用 axios.create 创建的对象，可以覆盖默认设置，config 见下面说明</li>\n</ul>\n<p>常见的 config 项有</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>baseURL</td>\n<td>将自动加在 url 前面</td>\n</tr>\n<tr>\n<td>headers</td>\n<td>请求头，类型为简单对象</td>\n</tr>\n<tr>\n<td>params</td>\n<td>跟在 URL 后的请求参数，类型为简单对象或 URLSearchParams</td>\n</tr>\n<tr>\n<td>data</td>\n<td>请求体，类型有简单对象、FormData、URLSearchParams、File 等</td>\n</tr>\n<tr>\n<td>withCredentials</td>\n<td>跨域时是否携带 Cookie 等凭证，默认为 false</td>\n</tr>\n<tr>\n<td>responseType</td>\n<td>响应类型，默认为 json</td>\n</tr>\n</tbody></table>\n<p>例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> _axios = axios.create(&#123;</span><br><span class=\"line\">    baseURL: <span class=\"string\">'http://localhost:8080'</span>,</span><br><span class=\"line\">    withCredentials: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">await</span> _axios.post(<span class=\"string\">'/api/a6set'</span>)</span><br><span class=\"line\"><span class=\"keyword\">await</span> _axios.post(<span class=\"string\">'/api/a6get'</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>生产环境希望 xhr 请求不走代理，可以用 baseURL 统一修改</li>\n<li>希望跨域请求携带 cookie，需要配置 withCredentials: true，服务器也要配置 allowCredentials = true，否则浏览器获取跨域返回的 cookie 时会报错</li>\n</ul>\n<p>响应格式</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>data</td>\n<td>响应体数据 :star:</td>\n</tr>\n<tr>\n<td>status</td>\n<td>状态码 :star:</td>\n</tr>\n<tr>\n<td>headers</td>\n<td>响应头</td>\n</tr>\n</tbody></table>\n<ul>\n<li>200 表示响应成功</li>\n<li>400 请求数据不正确 age=abc</li>\n<li>401 身份验证没通过</li>\n<li>403 没有权限</li>\n<li>404 资源不存在</li>\n<li>405 不支持请求方式 post</li>\n<li>500 服务器内部错误</li>\n</ul>\n<p>请求拦截器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_axios.interceptors.request.use(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 比如在这里添加统一的 headers</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>响应拦截器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_axios.interceptors.response.use(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 2xx 范围内走这里</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 超出 2xx, 比如 4xx, 5xx 走这里</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"条件渲染\"><a href=\"#条件渲染\" class=\"headerlink\" title=\"条件渲染\"></a>条件渲染</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;input type=&quot;button&quot; value=&quot;获取远程数据&quot; @click=&quot;sendReq()&quot;&gt;</span><br><span class=\"line\">        &lt;div class=&quot;title&quot;&gt;学生列表&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;thead&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;row bold&quot;&gt;</span><br><span class=\"line\">                &lt;div class=&quot;col&quot;&gt;编号&lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;col&quot;&gt;姓名&lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;col&quot;&gt;性别&lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;col&quot;&gt;年龄&lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;tbody&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;row&quot; v-if=&quot;students.length &gt; 0&quot;&gt;显示学生数据&lt;/div&gt;</span><br><span class=\"line\">            &lt;div class=&quot;row&quot; v-else&gt;暂无学生数据&lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import axios from &apos;../util/myaxios&apos;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    data: function() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            students: []</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods : &#123;</span><br><span class=\"line\">        async sendReq() &#123;</span><br><span class=\"line\">            const resp = await axios.get(&quot;/api/students&quot;);</span><br><span class=\"line\">            console.log(resp.data.data)</span><br><span class=\"line\">            this.students = resp.data.data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">    div &#123;</span><br><span class=\"line\">        font-family: 华文行楷;</span><br><span class=\"line\">        font-size: 20px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .title &#123;</span><br><span class=\"line\">        margin-bottom: 10px;</span><br><span class=\"line\">        font-size: 30px;</span><br><span class=\"line\">        color: #333;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .row &#123;</span><br><span class=\"line\">        background-color: #fff;</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        justify-content: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .col &#123;</span><br><span class=\"line\">        border: 1px solid #f0f0f0;</span><br><span class=\"line\">        width: 15%;</span><br><span class=\"line\">        height: 35px;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">        line-height: 35px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .bold .col &#123;</span><br><span class=\"line\">        background-color: #f1f1f1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"列表渲染\"><a href=\"#列表渲染\" class=\"headerlink\" title=\"列表渲染\"></a>列表渲染</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;!-- &lt;input type=&quot;button&quot; value=&quot;获取远程数据&quot; @click=&quot;sendReq()&quot;&gt; --&gt;</span><br><span class=\"line\">        &lt;div class=&quot;title&quot;&gt;学生列表&lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;thead&quot;&gt;</span><br><span class=\"line\">            &lt;div class=&quot;row bold&quot;&gt;</span><br><span class=\"line\">                &lt;div class=&quot;col&quot;&gt;编号&lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;col&quot;&gt;姓名&lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;col&quot;&gt;性别&lt;/div&gt;</span><br><span class=\"line\">                &lt;div class=&quot;col&quot;&gt;年龄&lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;div class=&quot;tbody&quot;&gt;</span><br><span class=\"line\">            &lt;div v-if=&quot;students.length &gt; 0&quot;&gt;</span><br><span class=\"line\">                &lt;div class=&quot;row&quot; v-for=&quot;s of students&quot; :key=&quot;s.id&quot;&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;col&quot;&gt;&#123;&#123;s.id&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;col&quot;&gt;&#123;&#123;s.name&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;col&quot;&gt;&#123;&#123;s.sex&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">                    &lt;div class=&quot;col&quot;&gt;&#123;&#123;s.age&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">                &lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;div class=&quot;row&quot; v-else&gt;暂无学生数据&lt;/div&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import axios from &apos;../util/myaxios&apos;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    mounted: function()&#123;</span><br><span class=\"line\">        this.sendReq()</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data: function() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            students: []</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods : &#123;</span><br><span class=\"line\">        async sendReq() &#123;</span><br><span class=\"line\">            const resp = await axios.get(&quot;/api/students&quot;);</span><br><span class=\"line\">            console.log(resp.data.data)</span><br><span class=\"line\">            this.students = resp.data.data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style scoped&gt;</span><br><span class=\"line\">    div &#123;</span><br><span class=\"line\">        font-family: 华文行楷;</span><br><span class=\"line\">        font-size: 20px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .title &#123;</span><br><span class=\"line\">        margin-bottom: 10px;</span><br><span class=\"line\">        font-size: 30px;</span><br><span class=\"line\">        color: #333;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .row &#123;</span><br><span class=\"line\">        background-color: #fff;</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        justify-content: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .col &#123;</span><br><span class=\"line\">        border: 1px solid #f0f0f0;</span><br><span class=\"line\">        width: 15%;</span><br><span class=\"line\">        height: 35px;</span><br><span class=\"line\">        text-align: center;</span><br><span class=\"line\">        line-height: 35px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .bold .col &#123;</span><br><span class=\"line\">        background-color: #f1f1f1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>v-if 和 v-for 不能用于同一个标签</li>\n<li>v-for 需要配合特殊的标签属性 key 一起使用，并且 key 属性要绑定到一个能起到唯一标识作用的数据上，本例绑定到了学生编号上</li>\n<li>options 的 mounted 属性对应一个函数，此函数会在组件挂载后（准备就绪）被调用，可以在它内部发起请求，去获取学生数据</li>\n</ul>\n<h4 id=\"重用组件\"><a href=\"#重用组件\" class=\"headerlink\" title=\"重用组件\"></a>重用组件</h4><p>按钮组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;button&quot; :class=&quot;[type,size]&quot;&gt;</span><br><span class=\"line\">        a&lt;slot&gt;&lt;/slot&gt;b</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    props: [&quot;type&quot;, &quot;size&quot;]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意，省略了样式部分</li>\n</ul>\n<p>使用组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;父组件&lt;/h1&gt;</span><br><span class=\"line\">        &lt;my-button type=&quot;primary&quot; size=&quot;small&quot;&gt;1&lt;/my-button&gt;</span><br><span class=\"line\">        &lt;my-button type=&quot;danger&quot; size=&quot;middle&quot;&gt;2&lt;/my-button&gt;</span><br><span class=\"line\">        &lt;my-button type=&quot;success&quot; size=&quot;large&quot;&gt;3&lt;/my-button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import MyButton from &apos;../components/MyButton.vue&apos;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">        MyButton</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-Vue-进阶\"><a href=\"#2-Vue-进阶\" class=\"headerlink\" title=\"2. Vue 进阶\"></a>2. Vue 进阶</h2><h3 id=\"1-ElementUI\"><a href=\"#1-ElementUI\" class=\"headerlink\" title=\"1) ElementUI\"></a>1) ElementUI</h3><p>安装</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install element-ui -S</span><br></pre></td></tr></table></figure>\n\n<p>引入组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Element <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Element)</span><br></pre></td></tr></table></figure>\n\n<p>测试，在自己的组件中使用 ElementUI 的组件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-button&gt;按钮&lt;/el-button&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"表格组件\"><a href=\"#表格组件\" class=\"headerlink\" title=\"表格组件\"></a>表格组件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;el-table :data=&quot;students&quot;&gt;</span><br><span class=\"line\">            &lt;el-table-column label=&quot;编号&quot; prop=&quot;id&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\">            &lt;el-table-column label=&quot;姓名&quot; prop=&quot;name&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\">            &lt;el-table-column label=&quot;性别&quot; prop=&quot;sex&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\">            &lt;el-table-column label=&quot;年龄&quot; prop=&quot;age&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\">        &lt;/el-table&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import axios from &apos;../util/myaxios&apos;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    async mounted() &#123;</span><br><span class=\"line\">        const resp = await axios.get(&apos;/api/students&apos;);</span><br><span class=\"line\">        this.students = resp.data.data</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            students: []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"分页组件\"><a href=\"#分页组件\" class=\"headerlink\" title=\"分页组件\"></a>分页组件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;el-table v-bind:data=&quot;students&quot;&gt;</span><br><span class=\"line\">            &lt;el-table-column label=&quot;编号&quot; prop=&quot;id&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\">            &lt;el-table-column label=&quot;姓名&quot; prop=&quot;name&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\">            &lt;el-table-column label=&quot;性别&quot; prop=&quot;sex&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\">            &lt;el-table-column label=&quot;年龄&quot; prop=&quot;age&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\">        &lt;/el-table&gt;</span><br><span class=\"line\">        &lt;el-pagination </span><br><span class=\"line\">            :total=&quot;total&quot;</span><br><span class=\"line\">            :page-size=&quot;queryDto.size&quot;</span><br><span class=\"line\">            :current-page=&quot;queryDto.page&quot;</span><br><span class=\"line\">            layout=&quot;prev,pager,next,sizes,-&gt;,total&quot;</span><br><span class=\"line\">            :page-sizes=&quot;[5,10,15,20]&quot;</span><br><span class=\"line\">            @current-change=&quot;currentChange&quot;</span><br><span class=\"line\">            @size-change=&quot;sizeChange&quot;</span><br><span class=\"line\">        &gt;&lt;/el-pagination&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import axios from &apos;../util/myaxios&apos;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    mounted() &#123;</span><br><span class=\"line\">        this.query();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        currentChange(page) &#123;</span><br><span class=\"line\">            this.queryDto.page = page;</span><br><span class=\"line\">            this.query();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        sizeChange(size)&#123;</span><br><span class=\"line\">            this.queryDto.size = size;</span><br><span class=\"line\">            this.query();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        async query() &#123;</span><br><span class=\"line\">            const resp = await axios.get(&apos;/api/students/q&apos;, &#123;</span><br><span class=\"line\">                params: this.queryDto</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            this.students = resp.data.data.list;</span><br><span class=\"line\">            this.total = resp.data.data.total;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            students: [],</span><br><span class=\"line\">            total: 0,</span><br><span class=\"line\">            queryDto: &#123;</span><br><span class=\"line\">                page: 1,</span><br><span class=\"line\">                size: 5</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>三种情况都应该触发查询<ul>\n<li>mounted 组件挂载完成后</li>\n<li>页号变化时</li>\n<li>页大小变化时</li>\n</ul>\n</li>\n<li>查询传参应该根据后台需求，灵活采用不同方式<ul>\n<li>本例中因为是 get 请求，无法采用请求体，只能用 params 方式传参</li>\n</ul>\n</li>\n<li>返回响应的格式也许会很复杂，需要掌握【根据返回的响应结构，获取数据】的能力</li>\n</ul>\n<h4 id=\"分页搜索\"><a href=\"#分页搜索\" class=\"headerlink\" title=\"分页搜索\"></a>分页搜索</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;el-input placeholder=&quot;请输入姓名&quot; size=&quot;mini&quot; v-model=&quot;queryDto.name&quot;&gt;&lt;/el-input&gt;</span><br><span class=\"line\">        &lt;el-select placeholder=&quot;请选择性别&quot; size=&quot;mini&quot; v-model=&quot;queryDto.sex&quot; clearable&gt;</span><br><span class=\"line\">            &lt;el-option value=&quot;男&quot;&gt;&lt;/el-option&gt;</span><br><span class=\"line\">            &lt;el-option value=&quot;女&quot;&gt;&lt;/el-option&gt;</span><br><span class=\"line\">        &lt;/el-select&gt;</span><br><span class=\"line\">        &lt;el-select placeholder=&quot;请选择年龄&quot; size=&quot;mini&quot; v-model=&quot;queryDto.age&quot; clearable&gt;</span><br><span class=\"line\">            &lt;el-option value=&quot;0,20&quot; label=&quot;0到20岁&quot;&gt;&lt;/el-option&gt;</span><br><span class=\"line\">            &lt;el-option value=&quot;21,30&quot; label=&quot;21到30岁&quot;&gt;&lt;/el-option&gt;</span><br><span class=\"line\">            &lt;el-option value=&quot;31,40&quot; label=&quot;31到40岁&quot;&gt;&lt;/el-option&gt;</span><br><span class=\"line\">            &lt;el-option value=&quot;41,120&quot; label=&quot;41到120岁&quot;&gt;&lt;/el-option&gt;</span><br><span class=\"line\">        &lt;/el-select&gt;</span><br><span class=\"line\">        &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot; @click=&quot;search()&quot;&gt;搜索&lt;/el-button&gt;</span><br><span class=\"line\">        &lt;el-divider&gt;&lt;/el-divider&gt;</span><br><span class=\"line\">        &lt;el-table v-bind:data=&quot;students&quot;&gt;</span><br><span class=\"line\">            &lt;el-table-column label=&quot;编号&quot; prop=&quot;id&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\">            &lt;el-table-column label=&quot;姓名&quot; prop=&quot;name&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\">            &lt;el-table-column label=&quot;性别&quot; prop=&quot;sex&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\">            &lt;el-table-column label=&quot;年龄&quot; prop=&quot;age&quot;&gt;&lt;/el-table-column&gt;</span><br><span class=\"line\">        &lt;/el-table&gt;</span><br><span class=\"line\">        &lt;el-pagination :total=&quot;total&quot; :page-size=&quot;queryDto.size&quot; :current-page=&quot;queryDto.page&quot;</span><br><span class=\"line\">            layout=&quot;prev,pager,next,sizes,-&gt;,total&quot; :page-sizes=&quot;[5, 10, 15, 20]&quot; @current-change=&quot;currentChange&quot;</span><br><span class=\"line\">            @size-change=&quot;sizeChange&quot;&gt;&lt;/el-pagination&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import axios from &apos;../util/myaxios&apos;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    mounted() &#123;</span><br><span class=\"line\">        this.query();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        currentChange(page) &#123;</span><br><span class=\"line\">            this.queryDto.page = page;</span><br><span class=\"line\">            this.query();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        sizeChange(size) &#123;</span><br><span class=\"line\">            this.queryDto.size = size;</span><br><span class=\"line\">            this.query();</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        async query() &#123;</span><br><span class=\"line\">            const resp = await axios.get(&apos;/api/students/q&apos;, &#123;</span><br><span class=\"line\">                params: this.queryDto</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            this.students = resp.data.data.list;</span><br><span class=\"line\">            this.total = resp.data.data.total;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        search() &#123;</span><br><span class=\"line\">            this.query();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            students: [],</span><br><span class=\"line\">            total: 0,</span><br><span class=\"line\">            queryDto: &#123;</span><br><span class=\"line\">                name: &apos;&apos;,</span><br><span class=\"line\">                sex: &apos;&apos;,</span><br><span class=\"line\">                age: &apos;&apos;,  </span><br><span class=\"line\">                page: 1,</span><br><span class=\"line\">                size: 5</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>sex 与  age 均用 <code>&#39;&#39;</code> 表示用户没有选择的情况</li>\n<li>age 取值 <code>0,20</code> 会被 spring 转换为 <code>new int[]{0, 20}</code></li>\n<li>age 取值 <code>&#39;&#39;</code> 会被 spring 转换为 <code>new int[0]</code></li>\n</ul>\n<h4 id=\"级联选择\"><a href=\"#级联选择\" class=\"headerlink\" title=\"级联选择\"></a>级联选择</h4><p>级联选择器中选项的数据结构为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;<span class=\"attr\">value</span>:<span class=\"number\">100</span>, <span class=\"attr\">label</span>:<span class=\"string\">'主页'</span>,<span class=\"attr\">children</span>:[</span><br><span class=\"line\">        &#123;<span class=\"attr\">value</span>:<span class=\"number\">101</span>, <span class=\"attr\">label</span>:<span class=\"string\">'菜单1'</span>, <span class=\"attr\">children</span>:[</span><br><span class=\"line\">            &#123;<span class=\"attr\">value</span>:<span class=\"number\">105</span>, <span class=\"attr\">label</span>:<span class=\"string\">'子项1'</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">value</span>:<span class=\"number\">106</span>, <span class=\"attr\">label</span>:<span class=\"string\">'子项2'</span>&#125;</span><br><span class=\"line\">        ]&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">value</span>:<span class=\"number\">102</span>, <span class=\"attr\">label</span>:<span class=\"string\">'菜单2'</span>, <span class=\"attr\">children</span>:[</span><br><span class=\"line\">            &#123;<span class=\"attr\">value</span>:<span class=\"number\">107</span>, <span class=\"attr\">label</span>:<span class=\"string\">'子项3'</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">value</span>:<span class=\"number\">108</span>, <span class=\"attr\">label</span>:<span class=\"string\">'子项4'</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">value</span>:<span class=\"number\">109</span>, <span class=\"attr\">label</span>:<span class=\"string\">'子项5'</span>&#125;</span><br><span class=\"line\">        ]&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">value</span>:<span class=\"number\">103</span>, <span class=\"attr\">label</span>:<span class=\"string\">'菜单3'</span>, <span class=\"attr\">children</span>:[</span><br><span class=\"line\">            &#123;<span class=\"attr\">value</span>:<span class=\"number\">110</span>, <span class=\"attr\">label</span>:<span class=\"string\">'子项6'</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">value</span>:<span class=\"number\">111</span>, <span class=\"attr\">label</span>:<span class=\"string\">'子项7'</span>&#125;</span><br><span class=\"line\">        ]&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">value</span>:<span class=\"number\">104</span>, <span class=\"attr\">label</span>:<span class=\"string\">'菜单4'</span>&#125;</span><br><span class=\"line\">    ]&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>下面的例子是将后端返回的一维数组【树化】</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;el-cascader :options=&quot;ops&quot;&gt;&lt;/el-cascader&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import axios from &apos;../util/myaxios&apos;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    async mounted() &#123;</span><br><span class=\"line\">        const resp = await axios.get(&apos;/api/menu&apos;)</span><br><span class=\"line\">        console.log(resp.data.data)</span><br><span class=\"line\">        const array = resp.data.data;</span><br><span class=\"line\"></span><br><span class=\"line\">        const map = new Map(); </span><br><span class=\"line\"></span><br><span class=\"line\">        // 1. 将所有数据存入 map 集合(为了接下来查找效率)</span><br><span class=\"line\">        for(const &#123;id,name,pid&#125; of array) &#123;</span><br><span class=\"line\">            map.set(id, &#123;value:id, label:name, pid:pid&#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 2. 建立父子关系</span><br><span class=\"line\">        // 3. 找到顶层对象</span><br><span class=\"line\">        const top = [];</span><br><span class=\"line\">        for(const obj of map.values()) &#123;</span><br><span class=\"line\">            const parent = map.get(obj.pid);</span><br><span class=\"line\">            if(parent !== undefined) &#123;</span><br><span class=\"line\">                parent.children ??= [];</span><br><span class=\"line\">                parent.children.push(obj);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                top.push(obj)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.ops = top;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data()&#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            ops: []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-Vue-Router\"><a href=\"#2-Vue-Router\" class=\"headerlink\" title=\"2) Vue-Router\"></a>2) Vue-Router</h3><p>vue 属于单页面应用，所谓的路由，就是根据浏览器路径不同，用不同的<strong>视图组件</strong>替换这个页面内容展示</p>\n<h4 id=\"配置路由\"><a href=\"#配置路由\" class=\"headerlink\" title=\"配置路由\"></a>配置路由</h4><p>新建一个路由 js 文件，例如 src/router/example14.js，内容如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ContainerView <span class=\"keyword\">from</span> <span class=\"string\">'@/views/example14/ContainerView.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> LoginView <span class=\"keyword\">from</span> <span class=\"string\">'@/views/example14/LoginView.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> NotFoundView <span class=\"keyword\">from</span> <span class=\"string\">'@/views/example14/NotFoundView.vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueRouter)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path:<span class=\"string\">'/'</span>,</span><br><span class=\"line\">    component: ContainerView</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path:<span class=\"string\">'/login'</span>,</span><br><span class=\"line\">    component: LoginView</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path:<span class=\"string\">'/404'</span>,</span><br><span class=\"line\">    component: NotFoundView</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  routes</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>最重要的就是建立了【路径】与【视图组件】之间的映射关系</li>\n<li>本例中映射了 3 个路径与对应的视图组件</li>\n</ul>\n<p>在 main.js 中采用我们的路由 js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> e14 <span class=\"keyword\">from</span> <span class=\"string\">'./views/Example14View.vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router/example14'</span>  <span class=\"comment\">// 修改这里</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Element <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Element)</span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(e14)</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>根组件是 Example14View.vue，内容为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;all&quot;&gt;</span><br><span class=\"line\">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>样式略</li>\n<li>其中 <code>&lt;router-view&gt;</code> 起到占位作用，改变路径后，这个路径对应的视图组件就会占据 <code>&lt;router-view&gt;</code> 的位置，替换掉它之前的内容</li>\n</ul>\n<h4 id=\"动态导入\"><a href=\"#动态导入\" class=\"headerlink\" title=\"动态导入\"></a>动态导入</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueRouter)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path:<span class=\"string\">'/'</span>,</span><br><span class=\"line\">    component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/views/example14/ContainerView.vue'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path:<span class=\"string\">'/login'</span>,</span><br><span class=\"line\">    component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/views/example14/LoginView.vue'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path:<span class=\"string\">'/404'</span>,</span><br><span class=\"line\">    component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/views/example14/NotFoundView.vue'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  routes</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>静态导入是将所有组件的 js 代码打包到一起，如果组件非常多，打包后的 js 文件会很大，影响页面加载速度</li>\n<li>动态导入是将组件的 js 代码放入独立的文件，用到时才加载</li>\n</ul>\n<h4 id=\"嵌套路由\"><a href=\"#嵌套路由\" class=\"headerlink\" title=\"嵌套路由\"></a>嵌套路由</h4><p>组件内再要切换内容，就需要用到嵌套路由（子路由），下面的例子是在【ContainerView 组件】内定义了 3 个子路由</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path:<span class=\"string\">'/'</span>,</span><br><span class=\"line\">    component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/views/example14/ContainerView.vue'</span>),</span><br><span class=\"line\">    redirect: <span class=\"string\">'/c/p1'</span>,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123; </span><br><span class=\"line\">        path:<span class=\"string\">'c/p1'</span>,</span><br><span class=\"line\">        component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/views/example14/container/P1View.vue'</span>)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123; </span><br><span class=\"line\">        path:<span class=\"string\">'c/p2'</span>,</span><br><span class=\"line\">        component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/views/example14/container/P2View.vue'</span>)</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123; </span><br><span class=\"line\">        path:<span class=\"string\">'c/p3'</span>,</span><br><span class=\"line\">        component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/views/example14/container/P3View.vue'</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path:<span class=\"string\">'/login'</span>,</span><br><span class=\"line\">    component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/views/example14/LoginView.vue'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path:<span class=\"string\">'/404'</span>,</span><br><span class=\"line\">    component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/views/example14/NotFoundView.vue'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path:<span class=\"string\">'*'</span>,</span><br><span class=\"line\">    redirect: <span class=\"string\">'/404'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>子路由变化，切换的是【ContainerView 组件】中 <code>&lt;router-view&gt;&lt;/router-view&gt;</code> 部分的内容</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"container\"</span>&gt;</span><br><span class=\"line\">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>redirect 可以用来重定向（跳转）到一个新的地址</li>\n<li>path 的取值为 * 表示匹配不到其它 path 时，就会匹配它</li>\n</ul>\n<h4 id=\"ElementUI-布局\"><a href=\"#ElementUI-布局\" class=\"headerlink\" title=\"ElementUI 布局\"></a>ElementUI 布局</h4><p>通常主页要做布局，下面的代码是 ElementUI 提供的【上-【左-右】】布局</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">        &lt;el-container&gt;</span><br><span class=\"line\">            &lt;el-header&gt;&lt;/el-header&gt;</span><br><span class=\"line\">            &lt;el-container&gt;</span><br><span class=\"line\">                &lt;el-aside width=&quot;200px&quot;&gt;&lt;/el-aside&gt;</span><br><span class=\"line\">                &lt;el-main&gt;</span><br><span class=\"line\">                    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class=\"line\">                &lt;/el-main&gt;</span><br><span class=\"line\">            &lt;/el-container&gt;</span><br><span class=\"line\">        &lt;/el-container&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"路由跳转\"><a href=\"#路由跳转\" class=\"headerlink\" title=\"路由跳转\"></a>路由跳转</h4><h5 id=\"标签式\"><a href=\"#标签式\" class=\"headerlink\" title=\"标签式\"></a>标签式</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-aside width=&quot;200px&quot;&gt;</span><br><span class=\"line\">    &lt;router-link to=&quot;/c1/p1&quot;&gt;P1&lt;/router-link&gt;</span><br><span class=\"line\">    &lt;router-link to=&quot;/c1/p2&quot;&gt;P2&lt;/router-link&gt;</span><br><span class=\"line\">    &lt;router-link to=&quot;/c1/p3&quot;&gt;P3&lt;/router-link&gt;</span><br><span class=\"line\">&lt;/el-aside&gt;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"编程式\"><a href=\"#编程式\" class=\"headerlink\" title=\"编程式\"></a>编程式</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-header&gt;</span><br><span class=\"line\">    &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-edit&quot; </span><br><span class=\"line\">               circle size=&quot;mini&quot; @click=&quot;jump(&apos;/c1/p1&apos;)&quot;&gt;&lt;/el-button&gt;</span><br><span class=\"line\">    &lt;el-button type=&quot;success&quot; icon=&quot;el-icon-check&quot; </span><br><span class=\"line\">               circle size=&quot;mini&quot; @click=&quot;jump(&apos;/c1/p2&apos;)&quot;&gt;&lt;/el-button&gt;</span><br><span class=\"line\">    &lt;el-button type=&quot;warning&quot; icon=&quot;el-icon-star-off&quot; </span><br><span class=\"line\">               circle size=&quot;mini&quot; @click=&quot;jump(&apos;/c1/p3&apos;)&quot;&gt;&lt;/el-button&gt;</span><br><span class=\"line\">&lt;/el-header&gt;</span><br></pre></td></tr></table></figure>\n\n<p>jump 方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    methods : &#123;</span><br><span class=\"line\">        jump(url) &#123;</span><br><span class=\"line\">            this.$router.push(url);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其中 this.$router 是拿到路由对象</li>\n<li>push 方法根据 url 进行跳转</li>\n</ul>\n<h5 id=\"导航菜单\"><a href=\"#导航菜单\" class=\"headerlink\" title=\"导航菜单\"></a>导航菜单</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-menu router background-color=&quot;#545c64&quot; text-color=&quot;#fff&quot; active-text-color=&quot;#ffd04b&quot;&gt;</span><br><span class=\"line\">    &lt;el-submenu index=&quot;/c1&quot;&gt;</span><br><span class=\"line\">        &lt;span slot=&quot;title&quot;&gt;</span><br><span class=\"line\">            &lt;i class=&quot;el-icon-platform-eleme&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">            菜单1</span><br><span class=\"line\">        &lt;/span&gt;</span><br><span class=\"line\">        &lt;el-menu-item index=&quot;/c1/p1&quot;&gt;子项1&lt;/el-menu-item&gt;</span><br><span class=\"line\">        &lt;el-menu-item index=&quot;/c1/p2&quot;&gt;子项2&lt;/el-menu-item&gt;</span><br><span class=\"line\">        &lt;el-menu-item index=&quot;/c1/p3&quot;&gt;子项3&lt;/el-menu-item&gt;</span><br><span class=\"line\">    &lt;/el-submenu&gt;</span><br><span class=\"line\">    &lt;el-menu-item index=&quot;/c2&quot;&gt;</span><br><span class=\"line\">        &lt;span slot=&quot;title&quot;&gt;</span><br><span class=\"line\">            &lt;i class=&quot;el-icon-phone&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">            菜单2</span><br><span class=\"line\">        &lt;/span&gt;</span><br><span class=\"line\">    &lt;/el-menu-item&gt;</span><br><span class=\"line\">    &lt;el-menu-item index=&quot;/c3&quot;&gt;</span><br><span class=\"line\">        &lt;span slot=&quot;title&quot;&gt;</span><br><span class=\"line\">            &lt;i class=&quot;el-icon-star-on&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">            菜单3</span><br><span class=\"line\">        &lt;/span&gt;</span><br><span class=\"line\">    &lt;/el-menu-item&gt;</span><br><span class=\"line\">&lt;/el-menu&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>图标和菜单项文字建议用 <code>&lt;span slot=&#39;title&#39;&gt;&lt;/span&gt;</code> 包裹起来</li>\n<li><code>el-menu</code> 标签上加上 <code>router</code> 属性，表示结合导航菜单与路由对象，此时，就可以利用菜单项的 <code>index</code> 属性来路由跳转</li>\n</ul>\n<h4 id=\"动态路由与菜单\"><a href=\"#动态路由与菜单\" class=\"headerlink\" title=\"动态路由与菜单\"></a>动态路由与菜单</h4><p>将菜单、路由信息（仅主页的）存入数据库中</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> menu(<span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>, pid, <span class=\"keyword\">path</span>, component, icon) <span class=\"keyword\">values</span></span><br><span class=\"line\">    (<span class=\"number\">101</span>, <span class=\"string\">'菜单1'</span>, <span class=\"number\">0</span>,   <span class=\"string\">'/m1'</span>,    <span class=\"literal\">null</span>,         <span class=\"string\">'el-icon-platform-eleme'</span>),</span><br><span class=\"line\">    (<span class=\"number\">102</span>, <span class=\"string\">'菜单2'</span>, <span class=\"number\">0</span>,   <span class=\"string\">'/m2'</span>,    <span class=\"literal\">null</span>,         <span class=\"string\">'el-icon-delete-solid'</span>),</span><br><span class=\"line\">    (<span class=\"number\">103</span>, <span class=\"string\">'菜单3'</span>, <span class=\"number\">0</span>,   <span class=\"string\">'/m3'</span>,    <span class=\"literal\">null</span>,         <span class=\"string\">'el-icon-s-tools'</span>),</span><br><span class=\"line\">    (<span class=\"number\">104</span>, <span class=\"string\">'菜单4'</span>, <span class=\"number\">0</span>,   <span class=\"string\">'/m4'</span>,    <span class=\"string\">'M4View.vue'</span>, <span class=\"string\">'el-icon-user-solid'</span>),</span><br><span class=\"line\">    (<span class=\"number\">105</span>, <span class=\"string\">'子项1'</span>, <span class=\"number\">101</span>, <span class=\"string\">'/m1/c1'</span>, <span class=\"string\">'C1View.vue'</span>, <span class=\"string\">'el-icon-s-goods'</span>),</span><br><span class=\"line\">    (<span class=\"number\">106</span>, <span class=\"string\">'子项2'</span>, <span class=\"number\">101</span>, <span class=\"string\">'/m1/c2'</span>, <span class=\"string\">'C2View.vue'</span>, <span class=\"string\">'el-icon-menu'</span>),</span><br><span class=\"line\">    (<span class=\"number\">107</span>, <span class=\"string\">'子项3'</span>, <span class=\"number\">102</span>, <span class=\"string\">'/m2/c3'</span>, <span class=\"string\">'C3View.vue'</span>, <span class=\"string\">'el-icon-s-marketing'</span>),</span><br><span class=\"line\">    (<span class=\"number\">108</span>, <span class=\"string\">'子项4'</span>, <span class=\"number\">102</span>, <span class=\"string\">'/m2/c4'</span>, <span class=\"string\">'C4View.vue'</span>, <span class=\"string\">'el-icon-s-platform'</span>),</span><br><span class=\"line\">    (<span class=\"number\">109</span>, <span class=\"string\">'子项5'</span>, <span class=\"number\">102</span>, <span class=\"string\">'/m2/c5'</span>, <span class=\"string\">'C5View.vue'</span>, <span class=\"string\">'el-icon-picture'</span>),</span><br><span class=\"line\">    (<span class=\"number\">110</span>, <span class=\"string\">'子项6'</span>, <span class=\"number\">103</span>, <span class=\"string\">'/m3/c6'</span>, <span class=\"string\">'C6View.vue'</span>, <span class=\"string\">'el-icon-upload'</span>),</span><br><span class=\"line\">    (<span class=\"number\">111</span>, <span class=\"string\">'子项7'</span>, <span class=\"number\">103</span>, <span class=\"string\">'/m3/c7'</span>, <span class=\"string\">'C7View.vue'</span>, <span class=\"string\">'el-icon-s-promotion'</span>);</span><br></pre></td></tr></table></figure>\n\n<p>不同的用户查询的的菜单、路由信息是不一样的</p>\n<p>例如：访问 <code>/api/menu/admin</code> 返回所有的数据</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">102</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"菜单2\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"icon\"</span>: <span class=\"string\">\"el-icon-delete-solid\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"path\"</span>: <span class=\"string\">\"/m2\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"pid\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"component\"</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">107</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"子项3\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"icon\"</span>: <span class=\"string\">\"el-icon-s-marketing\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"path\"</span>: <span class=\"string\">\"/m2/c3\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"pid\"</span>: <span class=\"number\">102</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"component\"</span>: <span class=\"string\">\"C3View.vue\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">108</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"子项4\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"icon\"</span>: <span class=\"string\">\"el-icon-s-platform\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"path\"</span>: <span class=\"string\">\"/m2/c4\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"pid\"</span>: <span class=\"number\">102</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"component\"</span>: <span class=\"string\">\"C4View.vue\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">109</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"子项5\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"icon\"</span>: <span class=\"string\">\"el-icon-picture\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"path\"</span>: <span class=\"string\">\"/m2/c5\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"pid\"</span>: <span class=\"number\">102</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"component\"</span>: <span class=\"string\">\"C5View.vue\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>访问 <code>/api/menu/wang</code> 返回</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">103</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"菜单3\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"icon\"</span>: <span class=\"string\">\"el-icon-s-tools\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"path\"</span>: <span class=\"string\">\"/m3\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"pid\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"component\"</span>: <span class=\"literal\">null</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">110</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"子项6\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"icon\"</span>: <span class=\"string\">\"el-icon-upload\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"path\"</span>: <span class=\"string\">\"/m3/c6\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"pid\"</span>: <span class=\"number\">103</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"component\"</span>: <span class=\"string\">\"C6View.vue\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"id\"</span>: <span class=\"number\">111</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"子项7\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"icon\"</span>: <span class=\"string\">\"el-icon-s-promotion\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"path\"</span>: <span class=\"string\">\"/m3/c7\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"pid\"</span>: <span class=\"number\">103</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"component\"</span>: <span class=\"string\">\"C7View.vue\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>前端根据他们身份不同，动态添加路由和显示菜单</p>\n<h5 id=\"动态路由\"><a href=\"#动态路由\" class=\"headerlink\" title=\"动态路由\"></a>动态路由</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addServerRoutes</span>(<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> &#123; id, path, component &#125; <span class=\"keyword\">of</span> array) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (component !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 动态添加路由</span></span><br><span class=\"line\">      <span class=\"comment\">// 参数1：父路由名称</span></span><br><span class=\"line\">      <span class=\"comment\">// 参数2：路由信息对象</span></span><br><span class=\"line\">      router.addRoute(<span class=\"string\">'c'</span>, &#123;</span><br><span class=\"line\">        path: path,</span><br><span class=\"line\">        name: id,</span><br><span class=\"line\">        component: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">`@/views/example15/container/<span class=\"subst\">$&#123;component&#125;</span>`</span>)</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>js 这边只保留几个固定路由，如主页、404 和 login</li>\n<li>以上方法执行时，将服务器返回的路由信息加入到名为 c 的父路由中去</li>\n<li>这里要注意组件路径，前面 @/views 是必须在 js 这边完成拼接的，否则 import 函数会失效</li>\n</ul>\n<h5 id=\"重置路由\"><a href=\"#重置路由\" class=\"headerlink\" title=\"重置路由\"></a>重置路由</h5><p>在用户注销时应当重置路由</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resetRouter</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  router.matcher = <span class=\"keyword\">new</span> VueRouter(&#123; routes &#125;).matcher</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"页面刷新\"><a href=\"#页面刷新\" class=\"headerlink\" title=\"页面刷新\"></a>页面刷新</h5><p>页面刷新后，会导致动态添加的路由失效，解决方法是将路由数据存入 sessionStorage</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import axios from &apos;@/util/myaxios&apos;</span><br><span class=\"line\">import &#123;resetRouter, addServerRoutes&#125; from &apos;@/router/example15&apos;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            username: &apos;admin&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        async login() &#123;       </span><br><span class=\"line\">            resetRouter(); // 重置路由     </span><br><span class=\"line\">            const resp = await axios.get(`/api/menu/$&#123;this.username&#125;`)</span><br><span class=\"line\">            const array = resp.data.data;</span><br><span class=\"line\">            // localStorage     即使浏览器关闭，存储的数据仍在</span><br><span class=\"line\">            // sessionStorage   以标签页为单位，关闭标签页时，数据被清除</span><br><span class=\"line\">            sessionStorage.setItem(&apos;serverRoutes&apos;, JSON.stringify(array))</span><br><span class=\"line\">            addServerRoutes(array); // 动态添加路由</span><br><span class=\"line\">            this.$router.push(&apos;/&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>页面刷新，重新创建路由对象时，从 sessionStorage 里恢复路由数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  routes</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从 sessionStorage 中恢复路由数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> serverRoutes = sessionStorage.getItem(<span class=\"string\">'serverRoutes'</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(serverRoutes) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> array = <span class=\"built_in\">JSON</span>.parse(serverRoutes);</span><br><span class=\"line\">  addServerRoutes(array) <span class=\"comment\">// 动态添加路由</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"动态菜单\"><a href=\"#动态菜单\" class=\"headerlink\" title=\"动态菜单\"></a>动态菜单</h5><p>代码部分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    mounted() &#123;</span><br><span class=\"line\">        const serverRoutes = sessionStorage.getItem(&apos;serverRoutes&apos;);</span><br><span class=\"line\">        const array = JSON.parse(serverRoutes);</span><br><span class=\"line\">        const map = new Map();</span><br><span class=\"line\">        for(const obj of array) &#123;</span><br><span class=\"line\">            map.set(obj.id, obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        const top = [];</span><br><span class=\"line\">        for(const obj of array) &#123;</span><br><span class=\"line\">            const parent = map.get(obj.pid);</span><br><span class=\"line\">            if(parent) &#123;</span><br><span class=\"line\">                parent.children ??= [];</span><br><span class=\"line\">                parent.children.push(obj);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                top.push(obj);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.top = top;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            top: []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>菜单部分</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-menu router background-color=&quot;#545c64&quot; text-color=&quot;#fff&quot; active-text-color=&quot;#ffd04b&quot; :unique-opened=&quot;true&quot;&gt;</span><br><span class=\"line\">    &lt;template v-for=&quot;m1 of top&quot;&gt;</span><br><span class=\"line\">&lt;el-submenu v-if=&quot;m1.children&quot; :key=&quot;m1.id&quot; :index=&quot;m1.path&quot;&gt;</span><br><span class=\"line\">    &lt;span slot=&quot;title&quot;&gt;</span><br><span class=\"line\">        &lt;i :class=&quot;m1.icon&quot;&gt;&lt;/i&gt; &#123;&#123;m1.name&#125;&#125;</span><br><span class=\"line\">        &lt;/span&gt;</span><br><span class=\"line\">    &lt;el-menu-item v-for=&quot;m2 of m1.children&quot; :key=&quot;m2.id&quot; :index=&quot;m2.path&quot;&gt;</span><br><span class=\"line\">        &lt;span slot=&quot;title&quot;&gt;</span><br><span class=\"line\">            &lt;i :class=&quot;m2.icon&quot;&gt;&lt;/i&gt; &#123;&#123;m2.name&#125;&#125;</span><br><span class=\"line\">        &lt;/span&gt;</span><br><span class=\"line\">        &lt;/el-menu-item&gt;</span><br><span class=\"line\">        &lt;/el-submenu&gt;</span><br><span class=\"line\">&lt;el-menu-item v-else :key=&quot;m1.id&quot; :index=&quot;m1.path&quot;&gt;</span><br><span class=\"line\">    &lt;span slot=&quot;title&quot;&gt;</span><br><span class=\"line\">        &lt;i :class=&quot;m1.icon&quot;&gt;&lt;/i&gt; &#123;&#123;m1.name&#125;&#125;</span><br><span class=\"line\">        &lt;/span&gt;</span><br><span class=\"line\">        &lt;/el-menu-item&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\">&lt;/el-menu&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>没有考虑递归菜单问题，认为菜单只有两级</li>\n</ul>\n<h3 id=\"3-Vuex\"><a href=\"#3-Vuex\" class=\"headerlink\" title=\"3) Vuex\"></a>3) Vuex</h3><h4 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h4><p>vuex 可以在多个组件之间共享数据，并且共享的数据是【响应式】的，即数据的变更能及时渲染到模板</p>\n<ul>\n<li>与之对比 localStorage 与 sessionStorage 也能共享数据，但缺点是数据并非【响应式】</li>\n</ul>\n<p>首先需要定义 state 与 mutations 他们一个用来读取共享数据，一个用来修改共享数据</p>\n<p>src/store/index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  读取数据，走 state, getters</span></span><br><span class=\"line\"><span class=\"comment\">  修改数据，走 mutations, actions</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">''</span>,</span><br><span class=\"line\">    age: <span class=\"number\">18</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    updateName(state, name) &#123;</span><br><span class=\"line\">      state.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>修改共享数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;p&quot;&gt;</span><br><span class=\"line\">        &lt;el-input placeholder=&quot;请修改用户姓名&quot; </span><br><span class=\"line\">            size=&quot;mini&quot; v-model=&quot;name&quot;&gt;&lt;/el-input&gt;</span><br><span class=\"line\">        &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot; @click=&quot;update()&quot;&gt;修改&lt;/el-button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        update()&#123;</span><br><span class=\"line\">            this.$store.commit(&apos;updateName&apos;, this.name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            name:&apos;&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mutations 方法不能直接调用，只能通过 <code>store.commit(mutation方法名, 参数)</code> 来间接调用</li>\n</ul>\n<p>读取共享数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">        &lt;el-container&gt;</span><br><span class=\"line\">            &lt;el-header&gt;</span><br><span class=\"line\">                &lt;div class=&quot;t&quot;&gt;</span><br><span class=\"line\">                    欢迎您：&#123;&#123; $store.state.name &#125;&#125;, &#123;&#123; $store.state.age &#125;&#125;</span><br><span class=\"line\">    \t\t\t&lt;/div&gt;</span><br><span class=\"line\">            &lt;/el-header&gt;</span><br><span class=\"line\">            &lt;el-container&gt;</span><br><span class=\"line\">                &lt;el-aside width=&quot;200px&quot;&gt;</span><br><span class=\"line\">                &lt;/el-aside&gt;</span><br><span class=\"line\">                &lt;el-main&gt;</span><br><span class=\"line\">                    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class=\"line\">                &lt;/el-main&gt;</span><br><span class=\"line\">            &lt;/el-container&gt;</span><br><span class=\"line\">        &lt;/el-container&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"mapState\"><a href=\"#mapState\" class=\"headerlink\" title=\"mapState\"></a>mapState</h4><p>每次去写 <code>$store.state.name</code> 这样的代码显得非常繁琐，可以用 vuex 帮我们生成计算属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">        &lt;el-container&gt;</span><br><span class=\"line\">            &lt;el-header&gt;</span><br><span class=\"line\">                &lt;div class=&quot;t&quot;&gt;欢迎您：&#123;&#123; name &#125;&#125;, &#123;&#123; age &#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">            &lt;/el-header&gt;</span><br><span class=\"line\">            &lt;el-container&gt;</span><br><span class=\"line\">                &lt;el-aside width=&quot;200px&quot;&gt;</span><br><span class=\"line\">                &lt;/el-aside&gt;</span><br><span class=\"line\">                &lt;el-main&gt;</span><br><span class=\"line\">                    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class=\"line\">                &lt;/el-main&gt;</span><br><span class=\"line\">            &lt;/el-container&gt;</span><br><span class=\"line\">        &lt;/el-container&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import &#123; mapState &#125; from &apos;vuex&apos;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    computed: &#123;</span><br><span class=\"line\">        ...mapState([&apos;name&apos;, &apos;age&apos;])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mapState 返回的是一个对象，对象内包含了 name() 和 age() 的这两个方法作为计算属性</li>\n<li>此对象配合 <code>...</code> 展开运算符，填充入 computed 即可使用</li>\n</ul>\n<h4 id=\"mapMutations\"><a href=\"#mapMutations\" class=\"headerlink\" title=\"mapMutations\"></a>mapMutations</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;p&quot;&gt;</span><br><span class=\"line\">        &lt;el-input placeholder=&quot;请修改用户姓名&quot; </span><br><span class=\"line\">            size=&quot;mini&quot; v-model=&quot;name&quot;&gt;&lt;/el-input&gt;</span><br><span class=\"line\">        &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot; @click=&quot;updateName(name)&quot;&gt;修改&lt;/el-button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import &#123;mapMutations&#125; from &apos;vuex&apos;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        ...mapMutations([&apos;updateName&apos;])</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    data () &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            name:&apos;&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>类似的，调用 mutation 修改共享数据也可以简化</li>\n<li>mapMutations 返回的对象中包含的方法，就会调用 store.commit() 来执行 mutation 方法</li>\n<li>注意参数传递略有不同</li>\n</ul>\n<h4 id=\"actions\"><a href=\"#actions\" class=\"headerlink\" title=\"actions\"></a>actions</h4><p>mutations 方法内不能包括修改不能立刻生效的代码，否则会造成 Vuex 调试工具工作不准确，必须把这些代码写在 actions 方法中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  读取数据，走 state, getters</span></span><br><span class=\"line\"><span class=\"comment\">  修改数据，走 mutations, actions</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'@/util/myaxios'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  state: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">''</span>,</span><br><span class=\"line\">    age: <span class=\"number\">18</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  getters: &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mutations: &#123;</span><br><span class=\"line\">    updateName(state, name) &#123;</span><br><span class=\"line\">      state.name = name;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 错误的用法，如果在mutations方法中包含了异步操作，会造成开发工具不准确</span></span><br><span class=\"line\">    <span class=\"comment\">/* async updateServerName(state) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">      const resp = await axios.get('/api/user');</span></span><br><span class=\"line\"><span class=\"comment\">      const &#123;name, age&#125; = resp.data.data;</span></span><br><span class=\"line\"><span class=\"comment\">      state.name = name;</span></span><br><span class=\"line\"><span class=\"comment\">      state.age = age;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125; */</span></span><br><span class=\"line\">    updateServerName(state, user) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; name, age &#125; = user;</span><br><span class=\"line\">      state.name = name;</span><br><span class=\"line\">      state.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  actions: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">async</span> updateServerName(context) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> resp = <span class=\"keyword\">await</span> axios.get(<span class=\"string\">'/api/user'</span>);</span><br><span class=\"line\">      context.commit(<span class=\"string\">'updateServerName'</span>, resp.data.data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  modules: &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先应当调用 actions 的 updateServerName 获取数据</li>\n<li>然后再由它间接调用 mutations 的 updateServerName 更新共享数据</li>\n</ul>\n<p>页面使用 actions 的方法可以这么写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    &lt;div class=&quot;p&quot;&gt;</span><br><span class=\"line\">        &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot;</span><br><span class=\"line\">            @click=&quot;updateServerName()&quot;&gt;从服务器获取数据,存入store&lt;/el-button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import &#123; mapActions &#125; from &apos;vuex&apos;</span><br><span class=\"line\">const options = &#123;</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        ...mapActions([&apos;updateServerName&apos;])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default options;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>mapActions 会生成调用 actions 中方法的代码</p>\n</li>\n<li><p>调用 actions 的代码内部等价于，它返回的是 Promise 对象，可以用同步或异步方式接收结果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$store.dispatch(<span class=\"string\">'action名称'</span>, 参数)</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Docker中的Redis部署","date":"2022-09-17T16:00:00.000Z","_content":"\n## 创建Redis的Docker容器\n\n<center>👇直奔主题👇</center>\n\n### shell脚本\n\n```shell\ndocker run \\\n--name myredis \\\n-v /root/redis_docker/mydata/redis/conf/redis.conf:/etc/redis/redis.conf \\\n-v /root/redis_docker/mydata/redis/data:/data \\\n-p 6379:6379 \\\n-d --restart=always redis:5.0 redis-server /etc/redis/redis.conf \\\n--appendonly yes  \\\n--requirepass ******\n```\n\n### 说明\n- --name redis 【容器名】\n- -p 6379:6379 【映射端口】\n- -v /usr/local/app/redis/redis.conf:/etc/redis/redis.conf 【conf文件挂载目录】\n- -v /usr/local/app/redis/data:/data 【data挂载目录】\n- -d redis:5.0 【后台运行镜像】\n- --restart=always 【docker重启后自动启动镜像】\n- redis-server /etc/redis/redis.conf 【在容器执行redis-server启动命令，执行conf文件】\n- --appendonly yes 【持久化】\n- --requirepass \"root\" 【设置密码】\n\n### 补充\n\n- docker exec -it redis bash 【进入容器】\n- redis-cli 【连接】\n- auth root 【登录】\n- set hello world\n- get hello","source":"_posts/Docker中的Redis部署.md","raw":"---\ntitle:  Docker中的Redis部署\ntags: [Redis, Docker]\ncategories: [Docker]\ndate: 2022-9-18\n\n---\n\n## 创建Redis的Docker容器\n\n<center>👇直奔主题👇</center>\n\n### shell脚本\n\n```shell\ndocker run \\\n--name myredis \\\n-v /root/redis_docker/mydata/redis/conf/redis.conf:/etc/redis/redis.conf \\\n-v /root/redis_docker/mydata/redis/data:/data \\\n-p 6379:6379 \\\n-d --restart=always redis:5.0 redis-server /etc/redis/redis.conf \\\n--appendonly yes  \\\n--requirepass ******\n```\n\n### 说明\n- --name redis 【容器名】\n- -p 6379:6379 【映射端口】\n- -v /usr/local/app/redis/redis.conf:/etc/redis/redis.conf 【conf文件挂载目录】\n- -v /usr/local/app/redis/data:/data 【data挂载目录】\n- -d redis:5.0 【后台运行镜像】\n- --restart=always 【docker重启后自动启动镜像】\n- redis-server /etc/redis/redis.conf 【在容器执行redis-server启动命令，执行conf文件】\n- --appendonly yes 【持久化】\n- --requirepass \"root\" 【设置密码】\n\n### 补充\n\n- docker exec -it redis bash 【进入容器】\n- redis-cli 【连接】\n- auth root 【登录】\n- set hello world\n- get hello","slug":"Docker中的Redis部署","published":1,"updated":"2022-11-03T05:38:47.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb410006a8vw62iboym2","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"创建Redis的Docker容器\"><a href=\"#创建Redis的Docker容器\" class=\"headerlink\" title=\"创建Redis的Docker容器\"></a>创建Redis的Docker容器</h2><center>👇直奔主题👇</center>\n\n<h3 id=\"shell脚本\"><a href=\"#shell脚本\" class=\"headerlink\" title=\"shell脚本\"></a>shell脚本</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">--name myredis \\</span><br><span class=\"line\">-v /root/redis_docker/mydata/redis/conf/redis.conf:/etc/redis/redis.conf \\</span><br><span class=\"line\">-v /root/redis_docker/mydata/redis/data:/data \\</span><br><span class=\"line\">-p 6379:6379 \\</span><br><span class=\"line\">-d --restart=always redis:5.0 redis-server /etc/redis/redis.conf \\</span><br><span class=\"line\">--appendonly yes  \\</span><br><span class=\"line\">--requirepass ******</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li>–name redis 【容器名】</li>\n<li>-p 6379:6379 【映射端口】</li>\n<li>-v /usr/local/app/redis/redis.conf:/etc/redis/redis.conf 【conf文件挂载目录】</li>\n<li>-v /usr/local/app/redis/data:/data 【data挂载目录】</li>\n<li>-d redis:5.0 【后台运行镜像】</li>\n<li>–restart=always 【docker重启后自动启动镜像】</li>\n<li>redis-server /etc/redis/redis.conf 【在容器执行redis-server启动命令，执行conf文件】</li>\n<li>–appendonly yes 【持久化】</li>\n<li>–requirepass “root” 【设置密码】</li>\n</ul>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><ul>\n<li>docker exec -it redis bash 【进入容器】</li>\n<li>redis-cli 【连接】</li>\n<li>auth root 【登录】</li>\n<li>set hello world</li>\n<li>get hello</li>\n</ul>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h2 id=\"创建Redis的Docker容器\"><a href=\"#创建Redis的Docker容器\" class=\"headerlink\" title=\"创建Redis的Docker容器\"></a>创建Redis的Docker容器</h2><center>👇直奔主题👇</center>\n\n<h3 id=\"shell脚本\"><a href=\"#shell脚本\" class=\"headerlink\" title=\"shell脚本\"></a>shell脚本</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run \\</span><br><span class=\"line\">--name myredis \\</span><br><span class=\"line\">-v /root/redis_docker/mydata/redis/conf/redis.conf:/etc/redis/redis.conf \\</span><br><span class=\"line\">-v /root/redis_docker/mydata/redis/data:/data \\</span><br><span class=\"line\">-p 6379:6379 \\</span><br><span class=\"line\">-d --restart=always redis:5.0 redis-server /etc/redis/redis.conf \\</span><br><span class=\"line\">--appendonly yes  \\</span><br><span class=\"line\">--requirepass ******</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li>–name redis 【容器名】</li>\n<li>-p 6379:6379 【映射端口】</li>\n<li>-v /usr/local/app/redis/redis.conf:/etc/redis/redis.conf 【conf文件挂载目录】</li>\n<li>-v /usr/local/app/redis/data:/data 【data挂载目录】</li>\n<li>-d redis:5.0 【后台运行镜像】</li>\n<li>–restart=always 【docker重启后自动启动镜像】</li>\n<li>redis-server /etc/redis/redis.conf 【在容器执行redis-server启动命令，执行conf文件】</li>\n<li>–appendonly yes 【持久化】</li>\n<li>–requirepass “root” 【设置密码】</li>\n</ul>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><ul>\n<li>docker exec -it redis bash 【进入容器】</li>\n<li>redis-cli 【连接】</li>\n<li>auth root 【登录】</li>\n<li>set hello world</li>\n<li>get hello</li>\n</ul>\n"},{"title":"Java学习之路--注释","date":"2020-01-19T16:00:00.000Z","_content":"```java\n/**\n * Java注释\n * @author 葛宇\n */\npackage 数据类型和运算符; //这是单行注释\n\npublic class TestComment {\n\tpublic static void main(String[] args /*多行注释也可用作行内注释*/) {\n\t\tSystem.out.println(\"Hello World !\"); \n\t}\n\t/*\n\t * 多行注释\n\t * 多行注释\n\t * 多行注释\n\t */\n}\n```\n","source":"_posts/Java学习之路(1).md","raw":"---\ntitle:  Java学习之路--注释\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-20\n\n---\n```java\n/**\n * Java注释\n * @author 葛宇\n */\npackage 数据类型和运算符; //这是单行注释\n\npublic class TestComment {\n\tpublic static void main(String[] args /*多行注释也可用作行内注释*/) {\n\t\tSystem.out.println(\"Hello World !\"); \n\t}\n\t/*\n\t * 多行注释\n\t * 多行注释\n\t * 多行注释\n\t */\n}\n```\n","slug":"Java学习之路(1)","published":1,"updated":"2020-02-28T05:53:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb430009a8vwwwuxuncy","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Java注释</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符; <span class=\"comment\">//这是单行注释</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestComment</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args <span class=\"comment\">/*多行注释也可用作行内注释*/</span>)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Hello World !\"</span>); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * 多行注释</span></span><br><span class=\"line\"><span class=\"comment\">\t * 多行注释</span></span><br><span class=\"line\"><span class=\"comment\">\t * 多行注释</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Java注释</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符; <span class=\"comment\">//这是单行注释</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestComment</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args <span class=\"comment\">/*多行注释也可用作行内注释*/</span>)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Hello World !\"</span>); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * 多行注释</span></span><br><span class=\"line\"><span class=\"comment\">\t * 多行注释</span></span><br><span class=\"line\"><span class=\"comment\">\t * 多行注释</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--字符串连接符","date":"2020-01-22T16:00:00.000Z","_content":"```java\n/**\n * 测试字符串连接符\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestOperator_4 {\n\tpublic static void main(String[] args) {\n\t\tint a = 1;\n\t\tint b = 2;\n\t\tString c = \"3\";\n\t\tSystem.out.println(a+b);\t\t//输出整数3\n\t\tSystem.out.println(a+c);\t\t//输出整数1和字符串3的组合\n\t\tSystem.out.println(c+a);\t\t//输出字符串3和整数1的组合\n\t\tSystem.out.println(a+b+c);\t\t//输出整数3和字符串3的组合\n\t\tSystem.out.println(c+b+a);\t\t//输出字符串32和整数1的组合\n\t\n\t\tchar d = '4';\t\t\t\t\t//字符型变量d对应的4的Unicode编码为U+0034(十六进制)\n\t\tSystem.out.println(d);\t\t\t//输出字符4\n\t\tSystem.out.println(a+d);\t\t//输出字符4转化为整数后的数值与1的和\n\t\tSystem.out.println(c+d);\t\t//将字符4纳入字符串c,输出字符串34\n\t\t\n\t}\n}\n\n```\n","source":"_posts/Java学习之路(10).md","raw":"---\ntitle:  Java学习之路--字符串连接符\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-23\n\n---\n```java\n/**\n * 测试字符串连接符\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestOperator_4 {\n\tpublic static void main(String[] args) {\n\t\tint a = 1;\n\t\tint b = 2;\n\t\tString c = \"3\";\n\t\tSystem.out.println(a+b);\t\t//输出整数3\n\t\tSystem.out.println(a+c);\t\t//输出整数1和字符串3的组合\n\t\tSystem.out.println(c+a);\t\t//输出字符串3和整数1的组合\n\t\tSystem.out.println(a+b+c);\t\t//输出整数3和字符串3的组合\n\t\tSystem.out.println(c+b+a);\t\t//输出字符串32和整数1的组合\n\t\n\t\tchar d = '4';\t\t\t\t\t//字符型变量d对应的4的Unicode编码为U+0034(十六进制)\n\t\tSystem.out.println(d);\t\t\t//输出字符4\n\t\tSystem.out.println(a+d);\t\t//输出字符4转化为整数后的数值与1的和\n\t\tSystem.out.println(c+d);\t\t//将字符4纳入字符串c,输出字符串34\n\t\t\n\t}\n}\n\n```\n","slug":"Java学习之路(10)","published":1,"updated":"2020-02-28T05:52:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb55001na8vw7ymsmg7c","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试字符串连接符</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestOperator_4</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tString c = <span class=\"string\">\"3\"</span>;</span><br><span class=\"line\">\t\tSystem.out.println(a+b);\t\t<span class=\"comment\">//输出整数3</span></span><br><span class=\"line\">\t\tSystem.out.println(a+c);\t\t<span class=\"comment\">//输出整数1和字符串3的组合</span></span><br><span class=\"line\">\t\tSystem.out.println(c+a);\t\t<span class=\"comment\">//输出字符串3和整数1的组合</span></span><br><span class=\"line\">\t\tSystem.out.println(a+b+c);\t\t<span class=\"comment\">//输出整数3和字符串3的组合</span></span><br><span class=\"line\">\t\tSystem.out.println(c+b+a);\t\t<span class=\"comment\">//输出字符串32和整数1的组合</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> d = <span class=\"string\">'4'</span>;\t\t\t\t\t<span class=\"comment\">//字符型变量d对应的4的Unicode编码为U+0034(十六进制)</span></span><br><span class=\"line\">\t\tSystem.out.println(d);\t\t\t<span class=\"comment\">//输出字符4</span></span><br><span class=\"line\">\t\tSystem.out.println(a+d);\t\t<span class=\"comment\">//输出字符4转化为整数后的数值与1的和</span></span><br><span class=\"line\">\t\tSystem.out.println(c+d);\t\t<span class=\"comment\">//将字符4纳入字符串c,输出字符串34</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试字符串连接符</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestOperator_4</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tString c = <span class=\"string\">\"3\"</span>;</span><br><span class=\"line\">\t\tSystem.out.println(a+b);\t\t<span class=\"comment\">//输出整数3</span></span><br><span class=\"line\">\t\tSystem.out.println(a+c);\t\t<span class=\"comment\">//输出整数1和字符串3的组合</span></span><br><span class=\"line\">\t\tSystem.out.println(c+a);\t\t<span class=\"comment\">//输出字符串3和整数1的组合</span></span><br><span class=\"line\">\t\tSystem.out.println(a+b+c);\t\t<span class=\"comment\">//输出整数3和字符串3的组合</span></span><br><span class=\"line\">\t\tSystem.out.println(c+b+a);\t\t<span class=\"comment\">//输出字符串32和整数1的组合</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> d = <span class=\"string\">'4'</span>;\t\t\t\t\t<span class=\"comment\">//字符型变量d对应的4的Unicode编码为U+0034(十六进制)</span></span><br><span class=\"line\">\t\tSystem.out.println(d);\t\t\t<span class=\"comment\">//输出字符4</span></span><br><span class=\"line\">\t\tSystem.out.println(a+d);\t\t<span class=\"comment\">//输出字符4转化为整数后的数值与1的和</span></span><br><span class=\"line\">\t\tSystem.out.println(c+d);\t\t<span class=\"comment\">//将字符4纳入字符串c,输出字符串34</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--从键盘读入数据","date":"2020-01-22T16:00:00.000Z","_content":"```java\n/**\n * 测试从键盘读入数据\n * @author 葛宇\n */\npackage 数据类型和运算符;\nimport java.util.Scanner;\n\npublic class TestScanner {\n\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\t//创建IO流对象\n\t\tSystem.out.println(\"请输入姓名：\");\n\t\tString name = scanner.nextLine();\n\t\tSystem.out.println(\"请输入性别：\");\n\t\tString sex = scanner.nextLine();\n\t\tSystem.out.println(\"请输入ID：\");\n\t\tint age = scanner.nextInt();\n\t\t\n\t\tSystem.out.println(name);\n\t\tSystem.out.println(sex);\n\t\tSystem.out.println(age);\n\t}\n}\n\n\n```\n","source":"_posts/Java学习之路(11).md","raw":"---\ntitle:  Java学习之路--从键盘读入数据\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-23\n\n---\n```java\n/**\n * 测试从键盘读入数据\n * @author 葛宇\n */\npackage 数据类型和运算符;\nimport java.util.Scanner;\n\npublic class TestScanner {\n\tpublic static void main(String[] args) {\n\t\tScanner scanner = new Scanner(System.in);\t//创建IO流对象\n\t\tSystem.out.println(\"请输入姓名：\");\n\t\tString name = scanner.nextLine();\n\t\tSystem.out.println(\"请输入性别：\");\n\t\tString sex = scanner.nextLine();\n\t\tSystem.out.println(\"请输入ID：\");\n\t\tint age = scanner.nextInt();\n\t\t\n\t\tSystem.out.println(name);\n\t\tSystem.out.println(sex);\n\t\tSystem.out.println(age);\n\t}\n}\n\n\n```\n","slug":"Java学习之路(11)","published":1,"updated":"2020-02-28T05:52:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb5e001oa8vw5e8cfy7m","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试从键盘读入数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestScanner</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tScanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);\t<span class=\"comment\">//创建IO流对象</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"请输入姓名：\"</span>);</span><br><span class=\"line\">\t\tString name = scanner.nextLine();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"请输入性别：\"</span>);</span><br><span class=\"line\">\t\tString sex = scanner.nextLine();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"请输入ID：\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> age = scanner.nextInt();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(name);</span><br><span class=\"line\">\t\tSystem.out.println(sex);</span><br><span class=\"line\">\t\tSystem.out.println(age);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试从键盘读入数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestScanner</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tScanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);\t<span class=\"comment\">//创建IO流对象</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"请输入姓名：\"</span>);</span><br><span class=\"line\">\t\tString name = scanner.nextLine();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"请输入性别：\"</span>);</span><br><span class=\"line\">\t\tString sex = scanner.nextLine();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"请输入ID：\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> age = scanner.nextInt();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(name);</span><br><span class=\"line\">\t\tSystem.out.println(sex);</span><br><span class=\"line\">\t\tSystem.out.println(age);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--方法","date":"2020-01-22T16:00:00.000Z","_content":"```java\n/**\n * 测试Java方法\n * @author 葛宇\n */\npackage 控制语句;\n\npublic class TestMethod {\n\tpublic static void main(String[] args) {\n\t\t//通过对象调用普通方法\n\t\tTestMethod obj = new TestMethod();\n\t\tobj.Method_1();\n\t\tobj.Method_2(1, 2);\n\t\tint total = obj.Method_3(1, 2);\n\t\tSystem.out.println(total);\t\t\n\t}\n\t\n\tvoid Method_1() {\n\t\tSystem.out.println(\"This is Method_1\");\n\t}\n\t\n\tvoid Method_2(int a,int b) {\n\t\tint sum = a+b;\n\t\tSystem.out.println(sum);\n\t}\n\t\n\tint Method_3(int a,int b) {\n\t\tint sum = a+b;\n\t\treturn sum;\n\t\t//return两个作用：结束方法的运行；返回值\n\t}\n}\n\n/*\n * 要点：\n * 实参的数目，数据类型，次序必须和对应方法的形参列表匹配\n * Java中的普通参数传递均为值传递 \n */\n\n\n\n```\n","source":"_posts/Java学习之路(12).md","raw":"---\ntitle:  Java学习之路--方法\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-23\n\n---\n```java\n/**\n * 测试Java方法\n * @author 葛宇\n */\npackage 控制语句;\n\npublic class TestMethod {\n\tpublic static void main(String[] args) {\n\t\t//通过对象调用普通方法\n\t\tTestMethod obj = new TestMethod();\n\t\tobj.Method_1();\n\t\tobj.Method_2(1, 2);\n\t\tint total = obj.Method_3(1, 2);\n\t\tSystem.out.println(total);\t\t\n\t}\n\t\n\tvoid Method_1() {\n\t\tSystem.out.println(\"This is Method_1\");\n\t}\n\t\n\tvoid Method_2(int a,int b) {\n\t\tint sum = a+b;\n\t\tSystem.out.println(sum);\n\t}\n\t\n\tint Method_3(int a,int b) {\n\t\tint sum = a+b;\n\t\treturn sum;\n\t\t//return两个作用：结束方法的运行；返回值\n\t}\n}\n\n/*\n * 要点：\n * 实参的数目，数据类型，次序必须和对应方法的形参列表匹配\n * Java中的普通参数传递均为值传递 \n */\n\n\n\n```\n","slug":"Java学习之路(12)","published":1,"updated":"2020-02-28T05:52:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb5g001qa8vw3x2ugae1","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试Java方法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestMethod</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//通过对象调用普通方法</span></span><br><span class=\"line\">\t\tTestMethod obj = <span class=\"keyword\">new</span> TestMethod();</span><br><span class=\"line\">\t\tobj.Method_1();</span><br><span class=\"line\">\t\tobj.Method_2(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> total = obj.Method_3(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tSystem.out.println(total);\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Method_1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"This is Method_1\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Method_2</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = a+b;</span><br><span class=\"line\">\t\tSystem.out.println(sum);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Method_3</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = a+b;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">\t\t<span class=\"comment\">//return两个作用：结束方法的运行；返回值</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 要点：</span></span><br><span class=\"line\"><span class=\"comment\"> * 实参的数目，数据类型，次序必须和对应方法的形参列表匹配</span></span><br><span class=\"line\"><span class=\"comment\"> * Java中的普通参数传递均为值传递 </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试Java方法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestMethod</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//通过对象调用普通方法</span></span><br><span class=\"line\">\t\tTestMethod obj = <span class=\"keyword\">new</span> TestMethod();</span><br><span class=\"line\">\t\tobj.Method_1();</span><br><span class=\"line\">\t\tobj.Method_2(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> total = obj.Method_3(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tSystem.out.println(total);\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Method_1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"This is Method_1\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Method_2</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = a+b;</span><br><span class=\"line\">\t\tSystem.out.println(sum);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Method_3</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = a+b;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">\t\t<span class=\"comment\">//return两个作用：结束方法的运行；返回值</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * 要点：</span></span><br><span class=\"line\"><span class=\"comment\"> * 实参的数目，数据类型，次序必须和对应方法的形参列表匹配</span></span><br><span class=\"line\"><span class=\"comment\"> * Java中的普通参数传递均为值传递 </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--方法的重载","date":"2020-01-22T16:00:00.000Z","_content":"```java\n/**\n * 测试方法的重载\n * @author 葛宇\n */\npackage 控制语句;\n\npublic class TestOverload {\n\tpublic static void main(String[] args) {\n\t\t\n\t}\n\t\n\t/*求和的方法，static修饰，调用时无需创建对象*/\n\tpublic static int add(int n1,int n2) {\n\t\tint sum = n1+n2;\n\t\treturn sum;\n\t}\n\t//方法名相同，参数个数不同，构成重载\n\tpublic static int add(int n1,int n2,int n3) {\n\t\tint sum = n1+n2+n3;\n\t\treturn sum;\n\t}\n\t//方法名相同，参数类型不同，构成重载\n\tpublic static double add(double n1,int n2) {\n\t\tdouble sum = n1+n2;\n\t\treturn sum;\n\t}\n\t//方法名相同，参数顺序不同，构成重载\n\tpublic static double add(int n1,double n2) {\n\t\tdouble sum = n1+n2;\n\t\treturn sum;\n\t}\n\t\n\t/**方法名相同，返回值类型不同，无法构成重载，报错！！！\n\t \tpublic static double add(int n1,int n2) {\n\t\tdouble sum = n1+n2;\n\t\treturn sum;\n\t}\n\t */\n\t\n\t/**方法名相同，形参名不同，无法构成重载，报错！！！\n \t\tpublic static double add(int n2,int n1) {\n\t\tdouble sum = n1+n2;\n\t\treturn sum;\n\t}\n\t */\n}\n\n\n```\n","source":"_posts/Java学习之路(13).md","raw":"---\ntitle:  Java学习之路--方法的重载\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-23\n\n---\n```java\n/**\n * 测试方法的重载\n * @author 葛宇\n */\npackage 控制语句;\n\npublic class TestOverload {\n\tpublic static void main(String[] args) {\n\t\t\n\t}\n\t\n\t/*求和的方法，static修饰，调用时无需创建对象*/\n\tpublic static int add(int n1,int n2) {\n\t\tint sum = n1+n2;\n\t\treturn sum;\n\t}\n\t//方法名相同，参数个数不同，构成重载\n\tpublic static int add(int n1,int n2,int n3) {\n\t\tint sum = n1+n2+n3;\n\t\treturn sum;\n\t}\n\t//方法名相同，参数类型不同，构成重载\n\tpublic static double add(double n1,int n2) {\n\t\tdouble sum = n1+n2;\n\t\treturn sum;\n\t}\n\t//方法名相同，参数顺序不同，构成重载\n\tpublic static double add(int n1,double n2) {\n\t\tdouble sum = n1+n2;\n\t\treturn sum;\n\t}\n\t\n\t/**方法名相同，返回值类型不同，无法构成重载，报错！！！\n\t \tpublic static double add(int n1,int n2) {\n\t\tdouble sum = n1+n2;\n\t\treturn sum;\n\t}\n\t */\n\t\n\t/**方法名相同，形参名不同，无法构成重载，报错！！！\n \t\tpublic static double add(int n2,int n1) {\n\t\tdouble sum = n1+n2;\n\t\treturn sum;\n\t}\n\t */\n}\n\n\n```\n","slug":"Java学习之路(13)","published":1,"updated":"2020-02-28T05:52:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb5o001sa8vw6x63qeqf","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试方法的重载</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestOverload</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/*求和的方法，static修饰，调用时无需创建对象*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> n1,<span class=\"keyword\">int</span> n2)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = n1+n2;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//方法名相同，参数个数不同，构成重载</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> n1,<span class=\"keyword\">int</span> n2,<span class=\"keyword\">int</span> n3)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = n1+n2+n3;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//方法名相同，参数类型不同，构成重载</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">double</span> n1,<span class=\"keyword\">int</span> n2)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> sum = n1+n2;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//方法名相同，参数顺序不同，构成重载</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> n1,<span class=\"keyword\">double</span> n2)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> sum = n1+n2;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**方法名相同，返回值类型不同，无法构成重载，报错！！！</span></span><br><span class=\"line\"><span class=\"comment\">\t \tpublic static double add(int n1,int n2) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tdouble sum = n1+n2;</span></span><br><span class=\"line\"><span class=\"comment\">\t\treturn sum;</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**方法名相同，形参名不同，无法构成重载，报错！！！</span></span><br><span class=\"line\"><span class=\"comment\"> \t\tpublic static double add(int n2,int n1) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tdouble sum = n1+n2;</span></span><br><span class=\"line\"><span class=\"comment\">\t\treturn sum;</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试方法的重载</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestOverload</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/*求和的方法，static修饰，调用时无需创建对象*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> n1,<span class=\"keyword\">int</span> n2)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = n1+n2;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//方法名相同，参数个数不同，构成重载</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> n1,<span class=\"keyword\">int</span> n2,<span class=\"keyword\">int</span> n3)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = n1+n2+n3;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//方法名相同，参数类型不同，构成重载</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">double</span> n1,<span class=\"keyword\">int</span> n2)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> sum = n1+n2;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//方法名相同，参数顺序不同，构成重载</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> n1,<span class=\"keyword\">double</span> n2)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> sum = n1+n2;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**方法名相同，返回值类型不同，无法构成重载，报错！！！</span></span><br><span class=\"line\"><span class=\"comment\">\t \tpublic static double add(int n1,int n2) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tdouble sum = n1+n2;</span></span><br><span class=\"line\"><span class=\"comment\">\t\treturn sum;</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**方法名相同，形参名不同，无法构成重载，报错！！！</span></span><br><span class=\"line\"><span class=\"comment\"> \t\tpublic static double add(int n2,int n1) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tdouble sum = n1+n2;</span></span><br><span class=\"line\"><span class=\"comment\">\t\treturn sum;</span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--If选择语句","date":"2020-01-24T16:00:00.000Z","_content":"```java\n/**\n * If选择语句\n * @author 葛宇\n */\npackage 控制语句;\n\npublic class TestIf {\n\tpublic static void main(String[] args) {\n\t\tdouble x = 6*Math.random();\n\t\tint age = (int)(80*Math.random());\t\t\n\t\tSystem.out.println(x);\n\t\tSystem.out.println(age);\n\t\t\n\t\t////////////if///////////\n\t\t\n\t\tif(x <= 2) {\n\t\t\tSystem.out.println(\"Small\");\n\t\t}\n\t\tif(x >= 2) {\n\t\t\tSystem.out.println(\"Large\");\n\t\t}\n\t\t\n\t\t//////////if-else/////////\n\t\t\n\t\tif(x <= 2) {\n\t\t\tSystem.out.println(\"Small\");\n\t\t}else {\n\t\t\tSystem.out.println(\"Large\");\n\t\t}\n\t\t\n\t\t///////Multi-if-else///////\n\t\t\n\t\tif(age <= 15) {\n\t\t\tSystem.out.println(\"儿童\");\n\t\t}else if(age <= 25) {\n\t\t\tSystem.out.println(\"青年\");\n\t\t}else if(age <= 45) {\n\t\t\tSystem.out.println(\"中年\");\n\t\t}else if(age <= 80) {\n\t\t\tSystem.out.println(\"老年\");\n\t\t}\n\t}\n}\n\n\n```\n","source":"_posts/Java学习之路(14).md","raw":"---\ntitle:  Java学习之路--If选择语句\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-25\n\n---\n```java\n/**\n * If选择语句\n * @author 葛宇\n */\npackage 控制语句;\n\npublic class TestIf {\n\tpublic static void main(String[] args) {\n\t\tdouble x = 6*Math.random();\n\t\tint age = (int)(80*Math.random());\t\t\n\t\tSystem.out.println(x);\n\t\tSystem.out.println(age);\n\t\t\n\t\t////////////if///////////\n\t\t\n\t\tif(x <= 2) {\n\t\t\tSystem.out.println(\"Small\");\n\t\t}\n\t\tif(x >= 2) {\n\t\t\tSystem.out.println(\"Large\");\n\t\t}\n\t\t\n\t\t//////////if-else/////////\n\t\t\n\t\tif(x <= 2) {\n\t\t\tSystem.out.println(\"Small\");\n\t\t}else {\n\t\t\tSystem.out.println(\"Large\");\n\t\t}\n\t\t\n\t\t///////Multi-if-else///////\n\t\t\n\t\tif(age <= 15) {\n\t\t\tSystem.out.println(\"儿童\");\n\t\t}else if(age <= 25) {\n\t\t\tSystem.out.println(\"青年\");\n\t\t}else if(age <= 45) {\n\t\t\tSystem.out.println(\"中年\");\n\t\t}else if(age <= 80) {\n\t\t\tSystem.out.println(\"老年\");\n\t\t}\n\t}\n}\n\n\n```\n","slug":"Java学习之路(14)","published":1,"updated":"2020-02-28T05:51:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb5q001va8vwjnmqf911","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * If选择语句</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestIf</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> x = <span class=\"number\">6</span>*Math.random();</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> age = (<span class=\"keyword\">int</span>)(<span class=\"number\">80</span>*Math.random());\t\t</span><br><span class=\"line\">\t\tSystem.out.println(x);</span><br><span class=\"line\">\t\tSystem.out.println(age);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">////////////if///////////</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Small\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Large\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//////////if-else/////////</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Small\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Large\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">///////Multi-if-else///////</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(age &lt;= <span class=\"number\">15</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"儿童\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(age &lt;= <span class=\"number\">25</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"青年\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(age &lt;= <span class=\"number\">45</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"中年\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(age &lt;= <span class=\"number\">80</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"老年\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * If选择语句</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestIf</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> x = <span class=\"number\">6</span>*Math.random();</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> age = (<span class=\"keyword\">int</span>)(<span class=\"number\">80</span>*Math.random());\t\t</span><br><span class=\"line\">\t\tSystem.out.println(x);</span><br><span class=\"line\">\t\tSystem.out.println(age);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">////////////if///////////</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Small\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Large\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//////////if-else/////////</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Small\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Large\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">///////Multi-if-else///////</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(age &lt;= <span class=\"number\">15</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"儿童\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(age &lt;= <span class=\"number\">25</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"青年\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(age &lt;= <span class=\"number\">45</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"中年\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(age &lt;= <span class=\"number\">80</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"老年\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--switch多选择","date":"2020-01-24T16:00:00.000Z","_content":"```java\n/**\n * 测试switch多选择\n * @author 葛宇\n */\npackage 控制语句;\n\npublic class TestSwitch {\n\tpublic static void main(String[] args) {\n\t\tint a = (int)(6*Math.random())+1;\n\t\tSystem.out.println(\"骰点：\"+a);\n\t\t\n\t\tswitch(a) {\n\t\tcase 1:\n\t\t\tSystem.out.println(\"1点\");\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tSystem.out.println(\"2点\");\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tSystem.out.println(\"3点\");\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tSystem.out.println(\"4点\");\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tSystem.out.println(\"5点\");\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tSystem.out.println(\"6点\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t\n\t\t//若省略break则会往下一条case穿透执行\t\n\t\t}\n\t}\n}\n\n\n```\n","source":"_posts/Java学习之路(15).md","raw":"---\ntitle:  Java学习之路--switch多选择\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-25\n\n---\n```java\n/**\n * 测试switch多选择\n * @author 葛宇\n */\npackage 控制语句;\n\npublic class TestSwitch {\n\tpublic static void main(String[] args) {\n\t\tint a = (int)(6*Math.random())+1;\n\t\tSystem.out.println(\"骰点：\"+a);\n\t\t\n\t\tswitch(a) {\n\t\tcase 1:\n\t\t\tSystem.out.println(\"1点\");\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tSystem.out.println(\"2点\");\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tSystem.out.println(\"3点\");\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\tSystem.out.println(\"4点\");\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\tSystem.out.println(\"5点\");\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\tSystem.out.println(\"6点\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t\n\t\t//若省略break则会往下一条case穿透执行\t\n\t\t}\n\t}\n}\n\n\n```\n","slug":"Java学习之路(15)","published":1,"updated":"2020-02-28T05:51:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb5r001ya8vwj1jlf9ia","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试switch多选择</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSwitch</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a = (<span class=\"keyword\">int</span>)(<span class=\"number\">6</span>*Math.random())+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"骰点：\"</span>+a);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span>(a) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"1点\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"2点\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"3点\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"4点\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"5点\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"6点\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//若省略break则会往下一条case穿透执行\t</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试switch多选择</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSwitch</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a = (<span class=\"keyword\">int</span>)(<span class=\"number\">6</span>*Math.random())+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"骰点：\"</span>+a);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span>(a) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"1点\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"2点\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"3点\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"4点\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"5点\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"6点\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//若省略break则会往下一条case穿透执行\t</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--while循环","date":"2020-01-24T16:00:00.000Z","_content":"```java\n/**\n * 测试while\n * @author 葛宇\n */\npackage 控制语句;\n\npublic class TestWhile {\n\tpublic static void main(String[] args) {\n\t\t/////////////////while/////////////////\n\t\t\n\t\tint i = 1;\n\t\tint sum = 0;\n\t\t//while的循环条件必须是布尔型，0或1无效\n\t\twhile(i <= 100) {\n\t\t\tsum += i;\n\t\t\ti++;\n\t\t}\n\t\tSystem.out.println(sum);\n\n\t\t////////////////do-while////////////////\n\t\t\n\t\ti = 0;\n\t\tsum = 0;\n\t\tdo {\n\t\t\tsum += i;\n\t\t\ti++;\n\t\t}while(i <= 100);\n\t\tSystem.out.println(sum);\n\t}\n}\n\n\n```\n","source":"_posts/Java学习之路(16).md","raw":"---\ntitle:  Java学习之路--while循环\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-25\n\n---\n```java\n/**\n * 测试while\n * @author 葛宇\n */\npackage 控制语句;\n\npublic class TestWhile {\n\tpublic static void main(String[] args) {\n\t\t/////////////////while/////////////////\n\t\t\n\t\tint i = 1;\n\t\tint sum = 0;\n\t\t//while的循环条件必须是布尔型，0或1无效\n\t\twhile(i <= 100) {\n\t\t\tsum += i;\n\t\t\ti++;\n\t\t}\n\t\tSystem.out.println(sum);\n\n\t\t////////////////do-while////////////////\n\t\t\n\t\ti = 0;\n\t\tsum = 0;\n\t\tdo {\n\t\t\tsum += i;\n\t\t\ti++;\n\t\t}while(i <= 100);\n\t\tSystem.out.println(sum);\n\t}\n}\n\n\n```\n","slug":"Java学习之路(16)","published":1,"updated":"2020-02-28T05:51:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb5t0021a8vw2bfu0olr","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试while</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestWhile</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/////////////////while/////////////////</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//while的循环条件必须是布尔型，0或1无效</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(i &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">\t\t\tsum += i;</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(sum);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">////////////////do-while////////////////</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\ti = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tsum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">\t\t\tsum += i;</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">while</span>(i &lt;= <span class=\"number\">100</span>);</span><br><span class=\"line\">\t\tSystem.out.println(sum);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试while</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestWhile</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/////////////////while/////////////////</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//while的循环条件必须是布尔型，0或1无效</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(i &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">\t\t\tsum += i;</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(sum);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">////////////////do-while////////////////</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\ti = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tsum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">\t\t\tsum += i;</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">while</span>(i &lt;= <span class=\"number\">100</span>);</span><br><span class=\"line\">\t\tSystem.out.println(sum);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--for循环","date":"2020-01-24T16:00:00.000Z","_content":"```java\n/**\n *测试for循环\n *@author 葛宇\n */\npackage 控制语句;\n\npublic class TestFor {\n\tpublic static void main(String[] args) {\n\t\tint sum = 0;\n\t\tfor(int i=1;i<=100;i++) {\n\t\t\tsum+=i;\n\t\t}\n\t\tSystem.out.println(sum);\n\t\t\n\t\t/*\n\t\t * 1. 执行初始化语句：i=1\n\t\t * 2. 执行判断：i<=100\n\t\t * 3. 执行循环体：sum+=i\n\t\t * 4. 执行步进：i++\n\t\t * 5. 返回第2步\n\t\t */\n\t}\n}\n\n\n```\n","source":"_posts/Java学习之路(17).md","raw":"---\ntitle:  Java学习之路--for循环\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-25\n\n---\n```java\n/**\n *测试for循环\n *@author 葛宇\n */\npackage 控制语句;\n\npublic class TestFor {\n\tpublic static void main(String[] args) {\n\t\tint sum = 0;\n\t\tfor(int i=1;i<=100;i++) {\n\t\t\tsum+=i;\n\t\t}\n\t\tSystem.out.println(sum);\n\t\t\n\t\t/*\n\t\t * 1. 执行初始化语句：i=1\n\t\t * 2. 执行判断：i<=100\n\t\t * 3. 执行循环体：sum+=i\n\t\t * 4. 执行步进：i++\n\t\t * 5. 返回第2步\n\t\t */\n\t}\n}\n\n\n```\n","slug":"Java学习之路(17)","published":1,"updated":"2020-02-28T05:53:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb5u0024a8vwiktht57o","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *测试for循环</span></span><br><span class=\"line\"><span class=\"comment\"> *<span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestFor</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">100</span>;i++) &#123;</span><br><span class=\"line\">\t\t\tsum+=i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(sum);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 1. 执行初始化语句：i=1</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 2. 执行判断：i&lt;=100</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 3. 执行循环体：sum+=i</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 4. 执行步进：i++</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 5. 返回第2步</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *测试for循环</span></span><br><span class=\"line\"><span class=\"comment\"> *<span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestFor</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">100</span>;i++) &#123;</span><br><span class=\"line\">\t\t\tsum+=i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(sum);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 1. 执行初始化语句：i=1</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 2. 执行判断：i&lt;=100</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 3. 执行循环体：sum+=i</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 4. 执行步进：i++</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 5. 返回第2步</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--循环语句中的break","date":"2020-01-25T16:00:00.000Z","_content":"```java\n/**\n * 测试循环语句中的break\n * @author 葛宇\n */\npackage 控制语句;\n\npublic class TestBreak {\n\tpublic static void main(String[] args) {\n\t\tint total = 0;\n\t\twhile(true) {\n\t\t\tint i = (int)Math.round(100*Math.random());\n\t\t\tSystem.out.println(i);\n\t\t\tif(i==50) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttotal++;\n\t\t}\n\t\tSystem.out.println(\"循环次数为：\"+total);\n\t}\n}\n//输出循环次数为30\n\n```\n","source":"_posts/Java学习之路(18).md","raw":"---\ntitle:  Java学习之路--循环语句中的break\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-26\n\n---\n```java\n/**\n * 测试循环语句中的break\n * @author 葛宇\n */\npackage 控制语句;\n\npublic class TestBreak {\n\tpublic static void main(String[] args) {\n\t\tint total = 0;\n\t\twhile(true) {\n\t\t\tint i = (int)Math.round(100*Math.random());\n\t\t\tSystem.out.println(i);\n\t\t\tif(i==50) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttotal++;\n\t\t}\n\t\tSystem.out.println(\"循环次数为：\"+total);\n\t}\n}\n//输出循环次数为30\n\n```\n","slug":"Java学习之路(18)","published":1,"updated":"2020-02-28T06:00:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb5w0027a8vwm7bnfuca","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试循环语句中的break</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBreak</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> i = (<span class=\"keyword\">int</span>)Math.round(<span class=\"number\">100</span>*Math.random());</span><br><span class=\"line\">\t\t\tSystem.out.println(i);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i==<span class=\"number\">50</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ttotal++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"循环次数为：\"</span>+total);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出循环次数为30</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试循环语句中的break</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBreak</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> i = (<span class=\"keyword\">int</span>)Math.round(<span class=\"number\">100</span>*Math.random());</span><br><span class=\"line\">\t\t\tSystem.out.println(i);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i==<span class=\"number\">50</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ttotal++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"循环次数为：\"</span>+total);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出循环次数为30</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--循环语句中的continue","date":"2020-01-25T16:00:00.000Z","_content":"```java\n/**\n * 测试循环中的continue\n * @author 葛宇\n */\npackage 控制语句;\n\npublic class TestContinue {\n\tpublic static void main(String[] args) {\n\t\tint count = 0;\n\t\tfor(int i=1;i<=100;i++) {\n\t\t\tif(i%3==0) {\n\t\t\t\t//能被3整除则跳过这次循环\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t//否则输出不能被3整除的数\n\t\t\tSystem.out.print(i+\"  \");\n\t\t\tcount++;\n\t\t\tif(count%5==0) {\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n","source":"_posts/Java学习之路(19).md","raw":"---\ntitle:  Java学习之路--循环语句中的continue\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-26\n\n---\n```java\n/**\n * 测试循环中的continue\n * @author 葛宇\n */\npackage 控制语句;\n\npublic class TestContinue {\n\tpublic static void main(String[] args) {\n\t\tint count = 0;\n\t\tfor(int i=1;i<=100;i++) {\n\t\t\tif(i%3==0) {\n\t\t\t\t//能被3整除则跳过这次循环\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t//否则输出不能被3整除的数\n\t\t\tSystem.out.print(i+\"  \");\n\t\t\tcount++;\n\t\t\tif(count%5==0) {\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n","slug":"Java学习之路(19)","published":1,"updated":"2020-02-28T06:00:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb5x002aa8vwod27cgrc","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试循环中的continue</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestContinue</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">100</span>;i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i%<span class=\"number\">3</span>==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//能被3整除则跳过这次循环</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//否则输出不能被3整除的数</span></span><br><span class=\"line\">\t\t\tSystem.out.print(i+<span class=\"string\">\"  \"</span>);</span><br><span class=\"line\">\t\t\tcount++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(count%<span class=\"number\">5</span>==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试循环中的continue</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestContinue</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">100</span>;i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i%<span class=\"number\">3</span>==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//能被3整除则跳过这次循环</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//否则输出不能被3整除的数</span></span><br><span class=\"line\">\t\t\tSystem.out.print(i+<span class=\"string\">\"  \"</span>);</span><br><span class=\"line\">\t\t\tcount++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(count%<span class=\"number\">5</span>==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--java标识符","date":"2020-01-19T16:00:00.000Z","_content":"```java\n/**\n * Java标识符用法\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestIdentifer {\n\tpublic static void main(String[] args) {\n\t\tint a123 = 1;\n                             //int 123a = 2; 数字不能打头\n\t\tint $abc = 3;\n\t\tint _abc = 4; \n\t\tint  年龄 = 18; //Java支持中文变量但不建议使用\n\t             //int public =5;   关键字不能作为变量去使用\n\t}\n}\n\n```\n","source":"_posts/Java学习之路(2).md","raw":"---\ntitle:  Java学习之路--java标识符\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-20\n\n---\n```java\n/**\n * Java标识符用法\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestIdentifer {\n\tpublic static void main(String[] args) {\n\t\tint a123 = 1;\n                             //int 123a = 2; 数字不能打头\n\t\tint $abc = 3;\n\t\tint _abc = 4; \n\t\tint  年龄 = 18; //Java支持中文变量但不建议使用\n\t             //int public =5;   关键字不能作为变量去使用\n\t}\n}\n\n```\n","slug":"Java学习之路(2)","published":1,"updated":"2020-02-28T05:18:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb60002da8vwqhvzps1x","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Java标识符用法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestIdentifer</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a123 = <span class=\"number\">1</span>;</span><br><span class=\"line\">                             <span class=\"comment\">//int 123a = 2; 数字不能打头</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> $abc = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> _abc = <span class=\"number\">4</span>; </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>  年龄 = <span class=\"number\">18</span>; <span class=\"comment\">//Java支持中文变量但不建议使用</span></span><br><span class=\"line\">\t             <span class=\"comment\">//int public =5;   关键字不能作为变量去使用</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Java标识符用法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestIdentifer</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a123 = <span class=\"number\">1</span>;</span><br><span class=\"line\">                             <span class=\"comment\">//int 123a = 2; 数字不能打头</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> $abc = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> _abc = <span class=\"number\">4</span>; </span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>  年龄 = <span class=\"number\">18</span>; <span class=\"comment\">//Java支持中文变量但不建议使用</span></span><br><span class=\"line\">\t             <span class=\"comment\">//int public =5;   关键字不能作为变量去使用</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--循环语句中标签的continue","date":"2020-01-25T16:00:00.000Z","_content":"```java\n/**\n * 测试带标签的continue\n * @author 葛宇\n */\npackage 控制语句;\n\n//Java中保留了goto关键字但并不允许使用goto语句\npublic class TestLableContinue {\n\tpublic static void main(String[] args) {\n\t\t\n\t\t//打印101到150之间所有质数\n\t\touter:for(int i=101;i<=150;i++) {\n\t\t\tfor(int j=2;j<i/2;j++) {\n\t\t\t\tif(i%j==0) {\n\t\t\t\t\tcontinue outer;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(i+\" \");\n\t\t}\n\t\t\n\t}\n}\n\n```\n","source":"_posts/Java学习之路(20).md","raw":"---\ntitle:  Java学习之路--循环语句中标签的continue\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-26\n\n---\n```java\n/**\n * 测试带标签的continue\n * @author 葛宇\n */\npackage 控制语句;\n\n//Java中保留了goto关键字但并不允许使用goto语句\npublic class TestLableContinue {\n\tpublic static void main(String[] args) {\n\t\t\n\t\t//打印101到150之间所有质数\n\t\touter:for(int i=101;i<=150;i++) {\n\t\t\tfor(int j=2;j<i/2;j++) {\n\t\t\t\tif(i%j==0) {\n\t\t\t\t\tcontinue outer;\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(i+\" \");\n\t\t}\n\t\t\n\t}\n}\n\n```\n","slug":"Java学习之路(20)","published":1,"updated":"2020-02-28T06:00:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb62002ga8vwl18n0bzl","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试带标签的continue</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Java中保留了goto关键字但并不允许使用goto语句</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestLableContinue</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//打印101到150之间所有质数</span></span><br><span class=\"line\">\t\touter:<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">101</span>;i&lt;=<span class=\"number\">150</span>;i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">2</span>;j&lt;i/<span class=\"number\">2</span>;j++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(i%j==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">continue</span> outer;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(i+<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试带标签的continue</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 控制语句;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Java中保留了goto关键字但并不允许使用goto语句</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestLableContinue</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//打印101到150之间所有质数</span></span><br><span class=\"line\">\t\touter:<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">101</span>;i&lt;=<span class=\"number\">150</span>;i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">2</span>;j&lt;i/<span class=\"number\">2</span>;j++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(i%j==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">continue</span> outer;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(i+<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--类和对象","date":"2020-01-26T16:00:00.000Z","_content":"```java\n/**\n   *   测试类和对象\n * @author 葛宇\n */\npackage 面向对象;\n\n//一个文件可以有多个类，但是public修饰的类只能有一个\npublic class TestFirstClass {\n\t//开始就以学生为对象做示例\n\t\n\t//属性\n\tint id;\n\tint age;\n\tString name;\n\tSubjects subject;\n\t\n\t//方法\n\tvoid study() {\n\t\tSystem.out.println(\"学习\"+subject.name);\n\t}\n\t\n\tvoid show() {\n\t\tSystem.out.println(\"ID:\"+this.id);\n\t\tSystem.out.println(\"AGE:\"+this.age);\n\t\tSystem.out.println(\"NAME:\"+this.name);\n\t}\n\t\n\tTestFirstClass(){\n\t\t//构造方法，用于创建类对象，方法名与类名保持一致，无返回值，无参构造方法可由系统自动生成\t\n\t}\n\t\n\t\n\t//main（）方法程序执行的入口，必不可少\n\tpublic static void main(String[] args) {\n\t\tTestFirstClass stu = new TestFirstClass();\t\t//调用构造方法在堆区创建对象，返回对象在堆区的地址\n\t\tSubjects sub = new Subjects();\t\t\t\t\t//调用构造方法在堆区创建对象，返回对象在堆区的地址\n\t\t\n\t\t//对象属性的赋值\n\t\tsub.name = \"JAVA课设\";\n\t\t//对象属性的赋值\n\t\tstu.id = 12345;\n\t\tstu.age = 20;\n\t\tstu.name = \"葛宇\";\n\t\tstu.subject = sub;\t\n\t\t\n\t\tstu.study();\t\t//调用类方法\n\t\tstu.show();\t\t\t//调用类方法\n\t\t\n\t\tSystem.out.println(sub);\t\t\t//打印对象地址\n\t\tSystem.out.println(stu.subject);\t//打印对象地址\n\t  //观察发现输出两个对象地址相同，原因是sub放于堆中，44行的赋值实际上是把sub的堆地址赋值给了stu.subject\n\t  //分析可知：sub和stu.subject都位于栈区，都指向堆区的同一个对象地址\n\t}\n}\n\n//学科科目类\nclass Subjects{\n\tString name;\n}\n\n/* JAVA内存分析\n * JAVA中主要把内存分为三部分：栈、堆、方法区（其中堆区包含方法区）\n * \n * \t栈：JVM会为每个线程创建一个栈且栈属于线程私有，无法与其他线程共享；\n * \t        栈的存储特性是“先进后出”；\n * \t        栈是自动分配，内存空间连续，速度快；\n * \t        程序中的每个方法执行时都会在栈中创建一个栈帧，用于存放该方法运行时数据、局部变量、实参、返回值等信息；\n * \n * \t堆：堆区存放创建好的对象和数组（数组也是对象）；\n * \t   JVM只有一个堆区，且被所有线程共享；\n * \t         堆区是一个不连续的内存空间，分配灵活，速度慢；\n * \n * \t方法区（静态区）：方法区也是堆区的一部分，只有一个，被所有线程共享；\n * \t\t\t\t方法区中存放程序中不变或唯一的内容：类代码、静态变量、常量、字符串等；\n */\n\n```\n","source":"_posts/Java学习之路(21).md","raw":"---\ntitle:  Java学习之路--类和对象\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-27\n\n---\n```java\n/**\n   *   测试类和对象\n * @author 葛宇\n */\npackage 面向对象;\n\n//一个文件可以有多个类，但是public修饰的类只能有一个\npublic class TestFirstClass {\n\t//开始就以学生为对象做示例\n\t\n\t//属性\n\tint id;\n\tint age;\n\tString name;\n\tSubjects subject;\n\t\n\t//方法\n\tvoid study() {\n\t\tSystem.out.println(\"学习\"+subject.name);\n\t}\n\t\n\tvoid show() {\n\t\tSystem.out.println(\"ID:\"+this.id);\n\t\tSystem.out.println(\"AGE:\"+this.age);\n\t\tSystem.out.println(\"NAME:\"+this.name);\n\t}\n\t\n\tTestFirstClass(){\n\t\t//构造方法，用于创建类对象，方法名与类名保持一致，无返回值，无参构造方法可由系统自动生成\t\n\t}\n\t\n\t\n\t//main（）方法程序执行的入口，必不可少\n\tpublic static void main(String[] args) {\n\t\tTestFirstClass stu = new TestFirstClass();\t\t//调用构造方法在堆区创建对象，返回对象在堆区的地址\n\t\tSubjects sub = new Subjects();\t\t\t\t\t//调用构造方法在堆区创建对象，返回对象在堆区的地址\n\t\t\n\t\t//对象属性的赋值\n\t\tsub.name = \"JAVA课设\";\n\t\t//对象属性的赋值\n\t\tstu.id = 12345;\n\t\tstu.age = 20;\n\t\tstu.name = \"葛宇\";\n\t\tstu.subject = sub;\t\n\t\t\n\t\tstu.study();\t\t//调用类方法\n\t\tstu.show();\t\t\t//调用类方法\n\t\t\n\t\tSystem.out.println(sub);\t\t\t//打印对象地址\n\t\tSystem.out.println(stu.subject);\t//打印对象地址\n\t  //观察发现输出两个对象地址相同，原因是sub放于堆中，44行的赋值实际上是把sub的堆地址赋值给了stu.subject\n\t  //分析可知：sub和stu.subject都位于栈区，都指向堆区的同一个对象地址\n\t}\n}\n\n//学科科目类\nclass Subjects{\n\tString name;\n}\n\n/* JAVA内存分析\n * JAVA中主要把内存分为三部分：栈、堆、方法区（其中堆区包含方法区）\n * \n * \t栈：JVM会为每个线程创建一个栈且栈属于线程私有，无法与其他线程共享；\n * \t        栈的存储特性是“先进后出”；\n * \t        栈是自动分配，内存空间连续，速度快；\n * \t        程序中的每个方法执行时都会在栈中创建一个栈帧，用于存放该方法运行时数据、局部变量、实参、返回值等信息；\n * \n * \t堆：堆区存放创建好的对象和数组（数组也是对象）；\n * \t   JVM只有一个堆区，且被所有线程共享；\n * \t         堆区是一个不连续的内存空间，分配灵活，速度慢；\n * \n * \t方法区（静态区）：方法区也是堆区的一部分，只有一个，被所有线程共享；\n * \t\t\t\t方法区中存放程序中不变或唯一的内容：类代码、静态变量、常量、字符串等；\n */\n\n```\n","slug":"Java学习之路(21)","published":1,"updated":"2020-03-01T03:32:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb65002ja8vwmkajrowp","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   *   测试类和对象</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//一个文件可以有多个类，但是public修饰的类只能有一个</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestFirstClass</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//开始就以学生为对象做示例</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//属性</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;</span><br><span class=\"line\">\tString name;</span><br><span class=\"line\">\tSubjects subject;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"学习\"</span>+subject.name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"ID:\"</span>+<span class=\"keyword\">this</span>.id);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"AGE:\"</span>+<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"NAME:\"</span>+<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tTestFirstClass()&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//构造方法，用于创建类对象，方法名与类名保持一致，无返回值，无参构造方法可由系统自动生成\t</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//main（）方法程序执行的入口，必不可少</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tTestFirstClass stu = <span class=\"keyword\">new</span> TestFirstClass();\t\t<span class=\"comment\">//调用构造方法在堆区创建对象，返回对象在堆区的地址</span></span><br><span class=\"line\">\t\tSubjects sub = <span class=\"keyword\">new</span> Subjects();\t\t\t\t\t<span class=\"comment\">//调用构造方法在堆区创建对象，返回对象在堆区的地址</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//对象属性的赋值</span></span><br><span class=\"line\">\t\tsub.name = <span class=\"string\">\"JAVA课设\"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//对象属性的赋值</span></span><br><span class=\"line\">\t\tstu.id = <span class=\"number\">12345</span>;</span><br><span class=\"line\">\t\tstu.age = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t\tstu.name = <span class=\"string\">\"葛宇\"</span>;</span><br><span class=\"line\">\t\tstu.subject = sub;\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tstu.study();\t\t<span class=\"comment\">//调用类方法</span></span><br><span class=\"line\">\t\tstu.show();\t\t\t<span class=\"comment\">//调用类方法</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(sub);\t\t\t<span class=\"comment\">//打印对象地址</span></span><br><span class=\"line\">\t\tSystem.out.println(stu.subject);\t<span class=\"comment\">//打印对象地址</span></span><br><span class=\"line\">\t  <span class=\"comment\">//观察发现输出两个对象地址相同，原因是sub放于堆中，44行的赋值实际上是把sub的堆地址赋值给了stu.subject</span></span><br><span class=\"line\">\t  <span class=\"comment\">//分析可知：sub和stu.subject都位于栈区，都指向堆区的同一个对象地址</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//学科科目类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subjects</span></span>&#123;</span><br><span class=\"line\">\tString name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* JAVA内存分析</span></span><br><span class=\"line\"><span class=\"comment\"> * JAVA中主要把内存分为三部分：栈、堆、方法区（其中堆区包含方法区）</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * \t栈：JVM会为每个线程创建一个栈且栈属于线程私有，无法与其他线程共享；</span></span><br><span class=\"line\"><span class=\"comment\"> * \t        栈的存储特性是“先进后出”；</span></span><br><span class=\"line\"><span class=\"comment\"> * \t        栈是自动分配，内存空间连续，速度快；</span></span><br><span class=\"line\"><span class=\"comment\"> * \t        程序中的每个方法执行时都会在栈中创建一个栈帧，用于存放该方法运行时数据、局部变量、实参、返回值等信息；</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * \t堆：堆区存放创建好的对象和数组（数组也是对象）；</span></span><br><span class=\"line\"><span class=\"comment\"> * \t   JVM只有一个堆区，且被所有线程共享；</span></span><br><span class=\"line\"><span class=\"comment\"> * \t         堆区是一个不连续的内存空间，分配灵活，速度慢；</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * \t方法区（静态区）：方法区也是堆区的一部分，只有一个，被所有线程共享；</span></span><br><span class=\"line\"><span class=\"comment\"> * \t\t\t\t方法区中存放程序中不变或唯一的内容：类代码、静态变量、常量、字符串等；</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   *   测试类和对象</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//一个文件可以有多个类，但是public修饰的类只能有一个</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestFirstClass</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//开始就以学生为对象做示例</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//属性</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;</span><br><span class=\"line\">\tString name;</span><br><span class=\"line\">\tSubjects subject;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"学习\"</span>+subject.name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"ID:\"</span>+<span class=\"keyword\">this</span>.id);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"AGE:\"</span>+<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"NAME:\"</span>+<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tTestFirstClass()&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//构造方法，用于创建类对象，方法名与类名保持一致，无返回值，无参构造方法可由系统自动生成\t</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//main（）方法程序执行的入口，必不可少</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tTestFirstClass stu = <span class=\"keyword\">new</span> TestFirstClass();\t\t<span class=\"comment\">//调用构造方法在堆区创建对象，返回对象在堆区的地址</span></span><br><span class=\"line\">\t\tSubjects sub = <span class=\"keyword\">new</span> Subjects();\t\t\t\t\t<span class=\"comment\">//调用构造方法在堆区创建对象，返回对象在堆区的地址</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//对象属性的赋值</span></span><br><span class=\"line\">\t\tsub.name = <span class=\"string\">\"JAVA课设\"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//对象属性的赋值</span></span><br><span class=\"line\">\t\tstu.id = <span class=\"number\">12345</span>;</span><br><span class=\"line\">\t\tstu.age = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t\tstu.name = <span class=\"string\">\"葛宇\"</span>;</span><br><span class=\"line\">\t\tstu.subject = sub;\t</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tstu.study();\t\t<span class=\"comment\">//调用类方法</span></span><br><span class=\"line\">\t\tstu.show();\t\t\t<span class=\"comment\">//调用类方法</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(sub);\t\t\t<span class=\"comment\">//打印对象地址</span></span><br><span class=\"line\">\t\tSystem.out.println(stu.subject);\t<span class=\"comment\">//打印对象地址</span></span><br><span class=\"line\">\t  <span class=\"comment\">//观察发现输出两个对象地址相同，原因是sub放于堆中，44行的赋值实际上是把sub的堆地址赋值给了stu.subject</span></span><br><span class=\"line\">\t  <span class=\"comment\">//分析可知：sub和stu.subject都位于栈区，都指向堆区的同一个对象地址</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//学科科目类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Subjects</span></span>&#123;</span><br><span class=\"line\">\tString name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* JAVA内存分析</span></span><br><span class=\"line\"><span class=\"comment\"> * JAVA中主要把内存分为三部分：栈、堆、方法区（其中堆区包含方法区）</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * \t栈：JVM会为每个线程创建一个栈且栈属于线程私有，无法与其他线程共享；</span></span><br><span class=\"line\"><span class=\"comment\"> * \t        栈的存储特性是“先进后出”；</span></span><br><span class=\"line\"><span class=\"comment\"> * \t        栈是自动分配，内存空间连续，速度快；</span></span><br><span class=\"line\"><span class=\"comment\"> * \t        程序中的每个方法执行时都会在栈中创建一个栈帧，用于存放该方法运行时数据、局部变量、实参、返回值等信息；</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * \t堆：堆区存放创建好的对象和数组（数组也是对象）；</span></span><br><span class=\"line\"><span class=\"comment\"> * \t   JVM只有一个堆区，且被所有线程共享；</span></span><br><span class=\"line\"><span class=\"comment\"> * \t         堆区是一个不连续的内存空间，分配灵活，速度慢；</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * \t方法区（静态区）：方法区也是堆区的一部分，只有一个，被所有线程共享；</span></span><br><span class=\"line\"><span class=\"comment\"> * \t\t\t\t方法区中存放程序中不变或唯一的内容：类代码、静态变量、常量、字符串等；</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--构造器","date":"2020-01-26T16:00:00.000Z","_content":"```java\n/**\n    * 测试构造器\n * @author 葛宇\n */\npackage 面向对象;\n\nclass Point{\n\tdouble x,y;\n\t//构造方法名称和类名必须保持一致\n\t//构造器会返回对象的地址但是无需指定返回值，可以单独使用return表示结束方法体\n\tpublic Point(double x,double y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\treturn; \n\t}\n\t\n\tpublic Point() {\n\t\t//无参构造器，如果有了自己定义的构造器，系统便不再生成，想要无参构造器的话还得自己写上\n\t}\n\t\n\tpublic double getDitance(Point p) {\n\t\tSystem.out.println(\"传入对象的地址：\"+p);\n\t\treturn Math.sqrt((this.x-p.x)*(this.x-p.x)+(this.y-p.y)*(this.y-p.y));\n\t}\n}\n\npublic class TestConstructor {\n\tpublic static void main(String[] args) {\n\t\tPoint a = new Point(3.0,4.0);\n\t\tPoint b = new Point(0.0,0.0);\n\t\tSystem.out.println(\"创建的对象的地址：\"+b);\n\t\tSystem.out.println(a.getDitance(b));\n\t}\n}\n\n\n```\n","source":"_posts/Java学习之路(22).md","raw":"---\ntitle:  Java学习之路--构造器\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-27\n\n---\n```java\n/**\n    * 测试构造器\n * @author 葛宇\n */\npackage 面向对象;\n\nclass Point{\n\tdouble x,y;\n\t//构造方法名称和类名必须保持一致\n\t//构造器会返回对象的地址但是无需指定返回值，可以单独使用return表示结束方法体\n\tpublic Point(double x,double y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\treturn; \n\t}\n\t\n\tpublic Point() {\n\t\t//无参构造器，如果有了自己定义的构造器，系统便不再生成，想要无参构造器的话还得自己写上\n\t}\n\t\n\tpublic double getDitance(Point p) {\n\t\tSystem.out.println(\"传入对象的地址：\"+p);\n\t\treturn Math.sqrt((this.x-p.x)*(this.x-p.x)+(this.y-p.y)*(this.y-p.y));\n\t}\n}\n\npublic class TestConstructor {\n\tpublic static void main(String[] args) {\n\t\tPoint a = new Point(3.0,4.0);\n\t\tPoint b = new Point(0.0,0.0);\n\t\tSystem.out.println(\"创建的对象的地址：\"+b);\n\t\tSystem.out.println(a.getDitance(b));\n\t}\n}\n\n\n```\n","slug":"Java学习之路(22)","published":1,"updated":"2020-03-01T03:33:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb66002ma8vwd400imgv","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 测试构造器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> x,y;</span><br><span class=\"line\">\t<span class=\"comment\">//构造方法名称和类名必须保持一致</span></span><br><span class=\"line\">\t<span class=\"comment\">//构造器会返回对象的地址但是无需指定返回值，可以单独使用return表示结束方法体</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Point</span><span class=\"params\">(<span class=\"keyword\">double</span> x,<span class=\"keyword\">double</span> y)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Point</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//无参构造器，如果有了自己定义的构造器，系统便不再生成，想要无参构造器的话还得自己写上</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getDitance</span><span class=\"params\">(Point p)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"传入对象的地址：\"</span>+p);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Math.sqrt((<span class=\"keyword\">this</span>.x-p.x)*(<span class=\"keyword\">this</span>.x-p.x)+(<span class=\"keyword\">this</span>.y-p.y)*(<span class=\"keyword\">this</span>.y-p.y));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestConstructor</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tPoint a = <span class=\"keyword\">new</span> Point(<span class=\"number\">3.0</span>,<span class=\"number\">4.0</span>);</span><br><span class=\"line\">\t\tPoint b = <span class=\"keyword\">new</span> Point(<span class=\"number\">0.0</span>,<span class=\"number\">0.0</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"创建的对象的地址：\"</span>+b);</span><br><span class=\"line\">\t\tSystem.out.println(a.getDitance(b));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 测试构造器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> x,y;</span><br><span class=\"line\">\t<span class=\"comment\">//构造方法名称和类名必须保持一致</span></span><br><span class=\"line\">\t<span class=\"comment\">//构造器会返回对象的地址但是无需指定返回值，可以单独使用return表示结束方法体</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Point</span><span class=\"params\">(<span class=\"keyword\">double</span> x,<span class=\"keyword\">double</span> y)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Point</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//无参构造器，如果有了自己定义的构造器，系统便不再生成，想要无参构造器的话还得自己写上</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getDitance</span><span class=\"params\">(Point p)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"传入对象的地址：\"</span>+p);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Math.sqrt((<span class=\"keyword\">this</span>.x-p.x)*(<span class=\"keyword\">this</span>.x-p.x)+(<span class=\"keyword\">this</span>.y-p.y)*(<span class=\"keyword\">this</span>.y-p.y));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestConstructor</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tPoint a = <span class=\"keyword\">new</span> Point(<span class=\"number\">3.0</span>,<span class=\"number\">4.0</span>);</span><br><span class=\"line\">\t\tPoint b = <span class=\"keyword\">new</span> Point(<span class=\"number\">0.0</span>,<span class=\"number\">0.0</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"创建的对象的地址：\"</span>+b);</span><br><span class=\"line\">\t\tSystem.out.println(a.getDitance(b));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--this的使用","date":"2020-01-26T16:00:00.000Z","_content":"```java\n/**\n * 测试this的使用\n * @author 葛宇\n */\npackage 面向对象;\n\npublic class TestThis {\n\tint a,b,c;\n\t\n\t//constructor 1\n\tTestThis(int a,int b){\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\t//发生变量二义性时，使用this可以指代创建出来的对象\n\t}\t\n\t//constructor 2\n\tTestThis(int a,int b,int c){\n\t  //TestThis(a,b);会报错，想在类方法中重用构造器得用this，如下\n\t\tthis(a,b);//这里等价于调用了constructor 1，且必须位于构造器的第一句\n\t\tthis.c = c;\n\t}\n\t\n\tvoid func1() {\n\t\tSystem.out.println(\"this is func1 !\");\n\t}\n\t\n\tvoid func2() {\n\t\tthis.func1();\n\t\tSystem.out.println(\"this is func2 !\");\n\t\t//this可以用来指代该类的某个对象自己\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tTestThis obj = new TestThis(1,2,3);\n\t\tobj.func2();\n\t}\n}\n\n//注意，this的使用基本上都是离不开对象的，所以要知道this是不能用于静态的方法的。\n\n\n\n```\n","source":"_posts/Java学习之路(23).md","raw":"---\ntitle:  Java学习之路--this的使用\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-27\n\n---\n```java\n/**\n * 测试this的使用\n * @author 葛宇\n */\npackage 面向对象;\n\npublic class TestThis {\n\tint a,b,c;\n\t\n\t//constructor 1\n\tTestThis(int a,int b){\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\t//发生变量二义性时，使用this可以指代创建出来的对象\n\t}\t\n\t//constructor 2\n\tTestThis(int a,int b,int c){\n\t  //TestThis(a,b);会报错，想在类方法中重用构造器得用this，如下\n\t\tthis(a,b);//这里等价于调用了constructor 1，且必须位于构造器的第一句\n\t\tthis.c = c;\n\t}\n\t\n\tvoid func1() {\n\t\tSystem.out.println(\"this is func1 !\");\n\t}\n\t\n\tvoid func2() {\n\t\tthis.func1();\n\t\tSystem.out.println(\"this is func2 !\");\n\t\t//this可以用来指代该类的某个对象自己\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tTestThis obj = new TestThis(1,2,3);\n\t\tobj.func2();\n\t}\n}\n\n//注意，this的使用基本上都是离不开对象的，所以要知道this是不能用于静态的方法的。\n\n\n\n```\n","slug":"Java学习之路(23)","published":1,"updated":"2020-03-01T03:34:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb68002pa8vwq92rz8m9","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试this的使用</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThis</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a,b,c;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//constructor 1</span></span><br><span class=\"line\">\tTestThis(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.a = a;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.b = b;</span><br><span class=\"line\">\t\t<span class=\"comment\">//发生变量二义性时，使用this可以指代创建出来的对象</span></span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"comment\">//constructor 2</span></span><br><span class=\"line\">\tTestThis(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c)&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//TestThis(a,b);会报错，想在类方法中重用构造器得用this，如下</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>(a,b);<span class=\"comment\">//这里等价于调用了constructor 1，且必须位于构造器的第一句</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.c = c;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"this is func1 !\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.func1();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"this is func2 !\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//this可以用来指代该类的某个对象自己</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tTestThis obj = <span class=\"keyword\">new</span> TestThis(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">\t\tobj.func2();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//注意，this的使用基本上都是离不开对象的，所以要知道this是不能用于静态的方法的。</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试this的使用</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThis</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a,b,c;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//constructor 1</span></span><br><span class=\"line\">\tTestThis(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.a = a;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.b = b;</span><br><span class=\"line\">\t\t<span class=\"comment\">//发生变量二义性时，使用this可以指代创建出来的对象</span></span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"comment\">//constructor 2</span></span><br><span class=\"line\">\tTestThis(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c)&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//TestThis(a,b);会报错，想在类方法中重用构造器得用this，如下</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>(a,b);<span class=\"comment\">//这里等价于调用了constructor 1，且必须位于构造器的第一句</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.c = c;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"this is func1 !\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.func1();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"this is func2 !\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//this可以用来指代该类的某个对象自己</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tTestThis obj = <span class=\"keyword\">new</span> TestThis(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">\t\tobj.func2();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//注意，this的使用基本上都是离不开对象的，所以要知道this是不能用于静态的方法的。</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--参数传递机制","date":"2020-01-26T16:00:00.000Z","_content":"```java\n/**\n * 测试JAVA中的参数传递机制\n * @author 葛宇\n */\npackage 面向对象;\n\npublic class TestValueTransport {\n\t\n\tint a;\n\tint b;\n\t\n\tTestValueTransport (int a,int b){\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t}\n\t\n\tvoid testValueTrap(TestValueTransport x) {\n\t\tSystem.out.println(x);\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tTestValueTransport obj = new TestValueTransport(1,2);\n\t\tTestValueTransport obj_ = obj;\n\t\t\n\t\tSystem.out.println(obj);\n\t\tSystem.out.println(obj_);\n\t\tobj_.testValueTrap(obj_);\n\t\t\n\t\t//输出三个对象变量引用的地址是相同的\n\t\t//要能区分对象变量和对象的区别：对象变量存储在栈中，对象存储在堆中\n\t\t//示例中的obj、obj_、x三者虽是不同的对象变量，但是始终指向同一个对象的地址\n\t\t//总结：Java中参数传值传递的是参数值的副本，但要明确对于对象变量来说，传递的副本就是对象的地址，所以指向还是同一个对象\n\t}\t\n}\n\n\n\n```\n","source":"_posts/Java学习之路(24).md","raw":"---\ntitle:  Java学习之路--参数传递机制\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-27\n\n---\n```java\n/**\n * 测试JAVA中的参数传递机制\n * @author 葛宇\n */\npackage 面向对象;\n\npublic class TestValueTransport {\n\t\n\tint a;\n\tint b;\n\t\n\tTestValueTransport (int a,int b){\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t}\n\t\n\tvoid testValueTrap(TestValueTransport x) {\n\t\tSystem.out.println(x);\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tTestValueTransport obj = new TestValueTransport(1,2);\n\t\tTestValueTransport obj_ = obj;\n\t\t\n\t\tSystem.out.println(obj);\n\t\tSystem.out.println(obj_);\n\t\tobj_.testValueTrap(obj_);\n\t\t\n\t\t//输出三个对象变量引用的地址是相同的\n\t\t//要能区分对象变量和对象的区别：对象变量存储在栈中，对象存储在堆中\n\t\t//示例中的obj、obj_、x三者虽是不同的对象变量，但是始终指向同一个对象的地址\n\t\t//总结：Java中参数传值传递的是参数值的副本，但要明确对于对象变量来说，传递的副本就是对象的地址，所以指向还是同一个对象\n\t}\t\n}\n\n\n\n```\n","slug":"Java学习之路(24)","published":1,"updated":"2020-03-01T03:35:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb6b002sa8vwi12pemer","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试JAVA中的参数传递机制</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestValueTransport</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tTestValueTransport (<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.a = a;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.b = b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testValueTrap</span><span class=\"params\">(TestValueTransport x)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tTestValueTransport obj = <span class=\"keyword\">new</span> TestValueTransport(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tTestValueTransport obj_ = obj;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(obj);</span><br><span class=\"line\">\t\tSystem.out.println(obj_);</span><br><span class=\"line\">\t\tobj_.testValueTrap(obj_);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出三个对象变量引用的地址是相同的</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//要能区分对象变量和对象的区别：对象变量存储在栈中，对象存储在堆中</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//示例中的obj、obj_、x三者虽是不同的对象变量，但是始终指向同一个对象的地址</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//总结：Java中参数传值传递的是参数值的副本，但要明确对于对象变量来说，传递的副本就是对象的地址，所以指向还是同一个对象</span></span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试JAVA中的参数传递机制</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestValueTransport</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tTestValueTransport (<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.a = a;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.b = b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">testValueTrap</span><span class=\"params\">(TestValueTransport x)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tTestValueTransport obj = <span class=\"keyword\">new</span> TestValueTransport(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\tTestValueTransport obj_ = obj;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(obj);</span><br><span class=\"line\">\t\tSystem.out.println(obj_);</span><br><span class=\"line\">\t\tobj_.testValueTrap(obj_);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出三个对象变量引用的地址是相同的</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//要能区分对象变量和对象的区别：对象变量存储在栈中，对象存储在堆中</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//示例中的obj、obj_、x三者虽是不同的对象变量，但是始终指向同一个对象的地址</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//总结：Java中参数传值传递的是参数值的副本，但要明确对于对象变量来说，传递的副本就是对象的地址，所以指向还是同一个对象</span></span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--静态导入","date":"2020-01-26T16:00:00.000Z","_content":"```java\n/**\n   * 测试静态导入\n * @author 葛宇\n */\npackage 面向对象;\nimport static java.lang.Math.PI;\n\npublic class TestStaticImport {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.print(PI);\n\t}\n}\n\n//静态导入关键字：import static xxx;\n//要求导入的东西必须是静态属性如静态成员方法或静态常量等\n\n```\n","source":"_posts/Java学习之路(25).md","raw":"---\ntitle:  Java学习之路--静态导入\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-27\n\n---\n```java\n/**\n   * 测试静态导入\n * @author 葛宇\n */\npackage 面向对象;\nimport static java.lang.Math.PI;\n\npublic class TestStaticImport {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.print(PI);\n\t}\n}\n\n//静态导入关键字：import static xxx;\n//要求导入的东西必须是静态属性如静态成员方法或静态常量等\n\n```\n","slug":"Java学习之路(25)","published":1,"updated":"2020-03-01T03:36:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb6d002va8vw4h5gb72e","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 测试静态导入</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.Math.PI;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestStaticImport</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.print(PI);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//静态导入关键字：import static xxx;</span></span><br><span class=\"line\"><span class=\"comment\">//要求导入的东西必须是静态属性如静态成员方法或静态常量等</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 测试静态导入</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.Math.PI;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestStaticImport</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.print(PI);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//静态导入关键字：import static xxx;</span></span><br><span class=\"line\"><span class=\"comment\">//要求导入的东西必须是静态属性如静态成员方法或静态常量等</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--static关键字","date":"2020-01-27T16:00:00.000Z","_content":"```java\n/**\n * 测试static关键字\n * @author 葛宇\n */\npackage 面向对象;\n\npublic class TestStatic {\n\t\n\tint a;\n\tint b;\n\t\n\tstatic int x;\t//属于类而不属于对象\n\tstatic int y;\t//属于类而不属于对象\n\t\n\tvoid func1() {\n\t\t//普通成员方法可以调用类的普通成员变量和static变量和static方法\n\t\tSystem.out.println(a);\n\t\tSystem.out.println(b);\n\t\tSystem.out.println(x);\n\t\tSystem.out.println(y);\n\t\tSystem.out.println(\"普通成员方法func1\");\n\t\tfunc2();\n\t}\n\t\n\tstatic void func2() {\n\t\t//属于类而不属于对象\n\t\t//不可在static方法调用this.a或this.b或this.func1()\n\t\t//static方法的生命周期与类相同，早于对象的诞生，而普通成员变量是属于对象的，所以static方法无法调用普通成员变量\n\t\tSystem.out.println(\"static成员方法func2\");\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tTestStatic obj = new TestStatic();\n\t\tx = 1;\t\t\t\t\t\t\t\t\t//可以不通过对象直接调用static成员变量\n\t\tSystem.out.println(x);\t\t\t\t\t//可以不通过对象直接调用static成员变量\n\t\tSystem.out.println(TestStatic.x);\t\t//可以通过对象调用static成员变量\n\t\t\n\t\tfunc2();\t\t\t\t\t\t\t\t//可以不通过对象直接调用static成员方法\n\t\tTestStatic.func2();\t\t\t\t\t\t//可以通过对象调用static成员变量\n\t\t\n\t\tTestStatic obj1 = new TestStatic();\n\t\tTestStatic.x ++;\n\t\tSystem.out.println(TestStatic.x);\n\t\t//静态变量的改变相当于是对类模板的改变，会对其他对象产生影响，\n\t}\n}\n\n\n```\n","source":"_posts/Java学习之路(26).md","raw":"---\ntitle:  Java学习之路--static关键字\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-28\n\n---\n```java\n/**\n * 测试static关键字\n * @author 葛宇\n */\npackage 面向对象;\n\npublic class TestStatic {\n\t\n\tint a;\n\tint b;\n\t\n\tstatic int x;\t//属于类而不属于对象\n\tstatic int y;\t//属于类而不属于对象\n\t\n\tvoid func1() {\n\t\t//普通成员方法可以调用类的普通成员变量和static变量和static方法\n\t\tSystem.out.println(a);\n\t\tSystem.out.println(b);\n\t\tSystem.out.println(x);\n\t\tSystem.out.println(y);\n\t\tSystem.out.println(\"普通成员方法func1\");\n\t\tfunc2();\n\t}\n\t\n\tstatic void func2() {\n\t\t//属于类而不属于对象\n\t\t//不可在static方法调用this.a或this.b或this.func1()\n\t\t//static方法的生命周期与类相同，早于对象的诞生，而普通成员变量是属于对象的，所以static方法无法调用普通成员变量\n\t\tSystem.out.println(\"static成员方法func2\");\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\t\n\t\tTestStatic obj = new TestStatic();\n\t\tx = 1;\t\t\t\t\t\t\t\t\t//可以不通过对象直接调用static成员变量\n\t\tSystem.out.println(x);\t\t\t\t\t//可以不通过对象直接调用static成员变量\n\t\tSystem.out.println(TestStatic.x);\t\t//可以通过对象调用static成员变量\n\t\t\n\t\tfunc2();\t\t\t\t\t\t\t\t//可以不通过对象直接调用static成员方法\n\t\tTestStatic.func2();\t\t\t\t\t\t//可以通过对象调用static成员变量\n\t\t\n\t\tTestStatic obj1 = new TestStatic();\n\t\tTestStatic.x ++;\n\t\tSystem.out.println(TestStatic.x);\n\t\t//静态变量的改变相当于是对类模板的改变，会对其他对象产生影响，\n\t}\n}\n\n\n```\n","slug":"Java学习之路(26)","published":1,"updated":"2020-03-01T03:37:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb6f002ya8vwf4h9l35a","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试static关键字</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestStatic</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> x;\t<span class=\"comment\">//属于类而不属于对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> y;\t<span class=\"comment\">//属于类而不属于对象</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//普通成员方法可以调用类的普通成员变量和static变量和static方法</span></span><br><span class=\"line\">\t\tSystem.out.println(a);</span><br><span class=\"line\">\t\tSystem.out.println(b);</span><br><span class=\"line\">\t\tSystem.out.println(x);</span><br><span class=\"line\">\t\tSystem.out.println(y);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"普通成员方法func1\"</span>);</span><br><span class=\"line\">\t\tfunc2();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//属于类而不属于对象</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//不可在static方法调用this.a或this.b或this.func1()</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//static方法的生命周期与类相同，早于对象的诞生，而普通成员变量是属于对象的，所以static方法无法调用普通成员变量</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"static成员方法func2\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tTestStatic obj = <span class=\"keyword\">new</span> TestStatic();</span><br><span class=\"line\">\t\tx = <span class=\"number\">1</span>;\t\t\t\t\t\t\t\t\t<span class=\"comment\">//可以不通过对象直接调用static成员变量</span></span><br><span class=\"line\">\t\tSystem.out.println(x);\t\t\t\t\t<span class=\"comment\">//可以不通过对象直接调用static成员变量</span></span><br><span class=\"line\">\t\tSystem.out.println(TestStatic.x);\t\t<span class=\"comment\">//可以通过对象调用static成员变量</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfunc2();\t\t\t\t\t\t\t\t<span class=\"comment\">//可以不通过对象直接调用static成员方法</span></span><br><span class=\"line\">\t\tTestStatic.func2();\t\t\t\t\t\t<span class=\"comment\">//可以通过对象调用static成员变量</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tTestStatic obj1 = <span class=\"keyword\">new</span> TestStatic();</span><br><span class=\"line\">\t\tTestStatic.x ++;</span><br><span class=\"line\">\t\tSystem.out.println(TestStatic.x);</span><br><span class=\"line\">\t\t<span class=\"comment\">//静态变量的改变相当于是对类模板的改变，会对其他对象产生影响，</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试static关键字</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestStatic</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> x;\t<span class=\"comment\">//属于类而不属于对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> y;\t<span class=\"comment\">//属于类而不属于对象</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//普通成员方法可以调用类的普通成员变量和static变量和static方法</span></span><br><span class=\"line\">\t\tSystem.out.println(a);</span><br><span class=\"line\">\t\tSystem.out.println(b);</span><br><span class=\"line\">\t\tSystem.out.println(x);</span><br><span class=\"line\">\t\tSystem.out.println(y);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"普通成员方法func1\"</span>);</span><br><span class=\"line\">\t\tfunc2();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//属于类而不属于对象</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//不可在static方法调用this.a或this.b或this.func1()</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//static方法的生命周期与类相同，早于对象的诞生，而普通成员变量是属于对象的，所以static方法无法调用普通成员变量</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"static成员方法func2\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tTestStatic obj = <span class=\"keyword\">new</span> TestStatic();</span><br><span class=\"line\">\t\tx = <span class=\"number\">1</span>;\t\t\t\t\t\t\t\t\t<span class=\"comment\">//可以不通过对象直接调用static成员变量</span></span><br><span class=\"line\">\t\tSystem.out.println(x);\t\t\t\t\t<span class=\"comment\">//可以不通过对象直接调用static成员变量</span></span><br><span class=\"line\">\t\tSystem.out.println(TestStatic.x);\t\t<span class=\"comment\">//可以通过对象调用static成员变量</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfunc2();\t\t\t\t\t\t\t\t<span class=\"comment\">//可以不通过对象直接调用static成员方法</span></span><br><span class=\"line\">\t\tTestStatic.func2();\t\t\t\t\t\t<span class=\"comment\">//可以通过对象调用static成员变量</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tTestStatic obj1 = <span class=\"keyword\">new</span> TestStatic();</span><br><span class=\"line\">\t\tTestStatic.x ++;</span><br><span class=\"line\">\t\tSystem.out.println(TestStatic.x);</span><br><span class=\"line\">\t\t<span class=\"comment\">//静态变量的改变相当于是对类模板的改变，会对其他对象产生影响，</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--抽象类","date":"2020-01-27T16:00:00.000Z","_content":"```java\n/**\n * 测试抽象类\n * @author 葛宇\n */\npackage com.github.nuistgy.testabstract;\n\nabstract public class Animal {\n  //有抽象方法必须是抽象类\n\tabstract public void shout();\t\n  //抽象方法没有实现过程\n\t\n\tstatic public void breath() {\n\t\t//抽象类可以包含普通方法或静态方法\n\t\tSystem.out.println(\"呼吸！\");\n\t}\n\t\n\tstatic int a;\n\tint b;\n\t\n\tpublic static void main(String[] args) {\n\t  //Animal a = new Animal();\t抽象类无法实例化\n\t\tAnimal.breath();\t\t  //抽象类的普通静态方法可以直接使用\n\t\tAnimal.a = 1;\t\t\t  //抽象类的普通静态成员变量可以直接使用\n\t}\n}\n\nclass Dog extends Animal{\n\n\t@Override\n\tpublic void shout() {\n\t\tSystem.out.println(\"汪汪！\");\n\t\t//子类必须对父类抽象方法进行实现\n\t}\t\n}\n\n/*总结：\n * 有抽象方法的类必须定义为抽象类\n * 抽象类可以包含属性、方法、构造器，但是不能被实例化\n * 普通属性和方法只能被子类调用，静态方法或属性可以直接使用\n * 抽象方法必须被子类实现\n * 抽象类的意义在于为子类提供统一的、规范的模板\n */\n\n\n\n```\n","source":"_posts/Java学习之路(27).md","raw":"---\ntitle:  Java学习之路--抽象类\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-28\n\n---\n```java\n/**\n * 测试抽象类\n * @author 葛宇\n */\npackage com.github.nuistgy.testabstract;\n\nabstract public class Animal {\n  //有抽象方法必须是抽象类\n\tabstract public void shout();\t\n  //抽象方法没有实现过程\n\t\n\tstatic public void breath() {\n\t\t//抽象类可以包含普通方法或静态方法\n\t\tSystem.out.println(\"呼吸！\");\n\t}\n\t\n\tstatic int a;\n\tint b;\n\t\n\tpublic static void main(String[] args) {\n\t  //Animal a = new Animal();\t抽象类无法实例化\n\t\tAnimal.breath();\t\t  //抽象类的普通静态方法可以直接使用\n\t\tAnimal.a = 1;\t\t\t  //抽象类的普通静态成员变量可以直接使用\n\t}\n}\n\nclass Dog extends Animal{\n\n\t@Override\n\tpublic void shout() {\n\t\tSystem.out.println(\"汪汪！\");\n\t\t//子类必须对父类抽象方法进行实现\n\t}\t\n}\n\n/*总结：\n * 有抽象方法的类必须定义为抽象类\n * 抽象类可以包含属性、方法、构造器，但是不能被实例化\n * 普通属性和方法只能被子类调用，静态方法或属性可以直接使用\n * 抽象方法必须被子类实现\n * 抽象类的意义在于为子类提供统一的、规范的模板\n */\n\n\n\n```\n","slug":"Java学习之路(27)","published":1,"updated":"2020-03-01T03:38:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb6g0031a8vwudshi7xf","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试抽象类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.github.nuistgy.testabstract;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//有抽象方法必须是抽象类</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shout</span><span class=\"params\">()</span></span>;\t</span><br><span class=\"line\">  <span class=\"comment\">//抽象方法没有实现过程</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">breath</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//抽象类可以包含普通方法或静态方法</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"呼吸！\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//Animal a = new Animal();\t抽象类无法实例化</span></span><br><span class=\"line\">\t\tAnimal.breath();\t\t  <span class=\"comment\">//抽象类的普通静态方法可以直接使用</span></span><br><span class=\"line\">\t\tAnimal.a = <span class=\"number\">1</span>;\t\t\t  <span class=\"comment\">//抽象类的普通静态成员变量可以直接使用</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"汪汪！\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//子类必须对父类抽象方法进行实现</span></span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*总结：</span></span><br><span class=\"line\"><span class=\"comment\"> * 有抽象方法的类必须定义为抽象类</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象类可以包含属性、方法、构造器，但是不能被实例化</span></span><br><span class=\"line\"><span class=\"comment\"> * 普通属性和方法只能被子类调用，静态方法或属性可以直接使用</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象方法必须被子类实现</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象类的意义在于为子类提供统一的、规范的模板</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试抽象类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.github.nuistgy.testabstract;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//有抽象方法必须是抽象类</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shout</span><span class=\"params\">()</span></span>;\t</span><br><span class=\"line\">  <span class=\"comment\">//抽象方法没有实现过程</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">breath</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//抽象类可以包含普通方法或静态方法</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"呼吸！\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//Animal a = new Animal();\t抽象类无法实例化</span></span><br><span class=\"line\">\t\tAnimal.breath();\t\t  <span class=\"comment\">//抽象类的普通静态方法可以直接使用</span></span><br><span class=\"line\">\t\tAnimal.a = <span class=\"number\">1</span>;\t\t\t  <span class=\"comment\">//抽象类的普通静态成员变量可以直接使用</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"汪汪！\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//子类必须对父类抽象方法进行实现</span></span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*总结：</span></span><br><span class=\"line\"><span class=\"comment\"> * 有抽象方法的类必须定义为抽象类</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象类可以包含属性、方法、构造器，但是不能被实例化</span></span><br><span class=\"line\"><span class=\"comment\"> * 普通属性和方法只能被子类调用，静态方法或属性可以直接使用</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象方法必须被子类实现</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象类的意义在于为子类提供统一的、规范的模板</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--继承","date":"2020-01-27T16:00:00.000Z","_content":"```java\n/**\n * 测试继承\n * @author 葛宇\n */\npackage 面向对象核心;\n\npublic class TestExtends {\n\tpublic static void main(String[] args) {\n\t\tStudent stu = new Student();\n\t\tStudent stu_ = new Student(\"Max\",170,\"C++\");\n\t  //stu拥有Person类所以属性和方法\n\t\tstu.name = \"Jack\";\n\t\tstu.height = 180;\n\t\tstu.major = \"JAVA\";\n\t\tstu.breath();\n\t\t\n\t\tSystem.out.println(stu instanceof Student);\n\t\tSystem.out.println(stu instanceof Person);\n\t\tSystem.out.println(stu instanceof Object);\n\t}\n}\n\nclass Person{\n\t\n\tint height;\n\tString name;\n\t\n\tpublic void breath() {\n\t\tSystem.out.println(\"呼吸\");\n\t}\n}\n\nclass Student extends Person{\n\t\n\t//int height;\n\t//String name;\n\tString major;\n\t\n\tpublic Student() {\n\t\t\n\t}\n\t\n\tpublic Student(String name,int height,String major) {\n\t\tthis.name = name;\n\t\tthis.height = height;\n\t\tthis.major = major;\n\t}\n\t\n\tpublic void study() {\n\t\tSystem.out.println(\"学习\");\n\t}\n\t\n/*\tpublic void breath() {\n*\t\tSystem.out.println(\"呼吸\");\n*\t}\n*/\t\n}\n\n/*\n*父类也叫超类或基类\n*没有多继承，只有单继承\n*接口技术有多继承\n*java中只有共有继承\n*子类可以得到父类的全部属性和方法（构造方法除外），但不见得都可以使用\n*如果没有使用extends继承则默认是继承了java.lang.Object\n*/\n\n```\n","source":"_posts/Java学习之路(28).md","raw":"---\ntitle:  Java学习之路--继承\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-28\n\n---\n```java\n/**\n * 测试继承\n * @author 葛宇\n */\npackage 面向对象核心;\n\npublic class TestExtends {\n\tpublic static void main(String[] args) {\n\t\tStudent stu = new Student();\n\t\tStudent stu_ = new Student(\"Max\",170,\"C++\");\n\t  //stu拥有Person类所以属性和方法\n\t\tstu.name = \"Jack\";\n\t\tstu.height = 180;\n\t\tstu.major = \"JAVA\";\n\t\tstu.breath();\n\t\t\n\t\tSystem.out.println(stu instanceof Student);\n\t\tSystem.out.println(stu instanceof Person);\n\t\tSystem.out.println(stu instanceof Object);\n\t}\n}\n\nclass Person{\n\t\n\tint height;\n\tString name;\n\t\n\tpublic void breath() {\n\t\tSystem.out.println(\"呼吸\");\n\t}\n}\n\nclass Student extends Person{\n\t\n\t//int height;\n\t//String name;\n\tString major;\n\t\n\tpublic Student() {\n\t\t\n\t}\n\t\n\tpublic Student(String name,int height,String major) {\n\t\tthis.name = name;\n\t\tthis.height = height;\n\t\tthis.major = major;\n\t}\n\t\n\tpublic void study() {\n\t\tSystem.out.println(\"学习\");\n\t}\n\t\n/*\tpublic void breath() {\n*\t\tSystem.out.println(\"呼吸\");\n*\t}\n*/\t\n}\n\n/*\n*父类也叫超类或基类\n*没有多继承，只有单继承\n*接口技术有多继承\n*java中只有共有继承\n*子类可以得到父类的全部属性和方法（构造方法除外），但不见得都可以使用\n*如果没有使用extends继承则默认是继承了java.lang.Object\n*/\n\n```\n","slug":"Java学习之路(28)","published":1,"updated":"2020-03-01T03:39:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb6i0034a8vwlqy2qiqy","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试继承</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestExtends</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tStudent stu = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">\t\tStudent stu_ = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"Max\"</span>,<span class=\"number\">170</span>,<span class=\"string\">\"C++\"</span>);</span><br><span class=\"line\">\t  <span class=\"comment\">//stu拥有Person类所以属性和方法</span></span><br><span class=\"line\">\t\tstu.name = <span class=\"string\">\"Jack\"</span>;</span><br><span class=\"line\">\t\tstu.height = <span class=\"number\">180</span>;</span><br><span class=\"line\">\t\tstu.major = <span class=\"string\">\"JAVA\"</span>;</span><br><span class=\"line\">\t\tstu.breath();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(stu <span class=\"keyword\">instanceof</span> Student);</span><br><span class=\"line\">\t\tSystem.out.println(stu <span class=\"keyword\">instanceof</span> Person);</span><br><span class=\"line\">\t\tSystem.out.println(stu <span class=\"keyword\">instanceof</span> Object);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> height;</span><br><span class=\"line\">\tString name;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">breath</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"呼吸\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//int height;</span></span><br><span class=\"line\">\t<span class=\"comment\">//String name;</span></span><br><span class=\"line\">\tString major;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> height,String major)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.height = height;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.major = major;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"学习\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">/*\tpublic void breath() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">*\t\tSystem.out.println(\"呼吸\");</span></span><br><span class=\"line\"><span class=\"comment\">*\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span>\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">*父类也叫超类或基类</span></span><br><span class=\"line\"><span class=\"comment\">*没有多继承，只有单继承</span></span><br><span class=\"line\"><span class=\"comment\">*接口技术有多继承</span></span><br><span class=\"line\"><span class=\"comment\">*java中只有共有继承</span></span><br><span class=\"line\"><span class=\"comment\">*子类可以得到父类的全部属性和方法（构造方法除外），但不见得都可以使用</span></span><br><span class=\"line\"><span class=\"comment\">*如果没有使用extends继承则默认是继承了java.lang.Object</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试继承</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestExtends</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tStudent stu = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">\t\tStudent stu_ = <span class=\"keyword\">new</span> Student(<span class=\"string\">\"Max\"</span>,<span class=\"number\">170</span>,<span class=\"string\">\"C++\"</span>);</span><br><span class=\"line\">\t  <span class=\"comment\">//stu拥有Person类所以属性和方法</span></span><br><span class=\"line\">\t\tstu.name = <span class=\"string\">\"Jack\"</span>;</span><br><span class=\"line\">\t\tstu.height = <span class=\"number\">180</span>;</span><br><span class=\"line\">\t\tstu.major = <span class=\"string\">\"JAVA\"</span>;</span><br><span class=\"line\">\t\tstu.breath();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(stu <span class=\"keyword\">instanceof</span> Student);</span><br><span class=\"line\">\t\tSystem.out.println(stu <span class=\"keyword\">instanceof</span> Person);</span><br><span class=\"line\">\t\tSystem.out.println(stu <span class=\"keyword\">instanceof</span> Object);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> height;</span><br><span class=\"line\">\tString name;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">breath</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"呼吸\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//int height;</span></span><br><span class=\"line\">\t<span class=\"comment\">//String name;</span></span><br><span class=\"line\">\tString major;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> height,String major)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.height = height;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.major = major;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">study</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"学习\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">/*\tpublic void breath() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">*\t\tSystem.out.println(\"呼吸\");</span></span><br><span class=\"line\"><span class=\"comment\">*\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span>\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">*父类也叫超类或基类</span></span><br><span class=\"line\"><span class=\"comment\">*没有多继承，只有单继承</span></span><br><span class=\"line\"><span class=\"comment\">*接口技术有多继承</span></span><br><span class=\"line\"><span class=\"comment\">*java中只有共有继承</span></span><br><span class=\"line\"><span class=\"comment\">*子类可以得到父类的全部属性和方法（构造方法除外），但不见得都可以使用</span></span><br><span class=\"line\"><span class=\"comment\">*如果没有使用extends继承则默认是继承了java.lang.Object</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--重写","date":"2020-01-27T16:00:00.000Z","_content":"```java\n/**\n * 测试重写\n * @author 葛宇\n */\npackage 面向对象核心;\n\npublic class TestOverride {\n\tpublic static void main(String[] args) {\n\t\tAirplane obj = new Airplane();\n\t\tobj.run();\n\t}\n}\n\nclass Transportation{\n\n\tpublic void run() {\n\t\tSystem.out.println(\"Running\");\n\t}\n\t\n\tpublic Person whoIsPsg() {\n\t\treturn new Person();\n\t}\n}\n\nclass Airplane extends Transportation{\n\t\n\tpublic void run() {\n\t\tSystem.out.println(\"Flying\");\n\t\t//重写了父类的run()\n\t}\t\n\t\n \tpublic Student whoIsPsg() {\n\t\treturn new Student();\n\t\t//重写了父类的whoIsPsg()\n\t}\n\n/*\t\n* \tpublic Student whoIsPsg() {\n*\t\treturn new Student();\n*\t\t//重写了父类的whoIsPsg()\n*\t}\n*/\n/*\t\n * \tpublic Object whoIsPsg() {\n *\t\treturn new Object();\n *\t\t//重写了父类的whoIsPsg()但报错\n *\t}\n */\n \t\n}\n\n/* 构成重写的条件：\n * 子类继承父类\n * 重写的方法名，形参列表要相同\n * 返回值类型和声明异常的类型，子类应<=父类\n * 方法访问权限：子类>=父类\n */\n\n```\n","source":"_posts/Java学习之路(29).md","raw":"---\ntitle:  Java学习之路--重写\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-28\n\n---\n```java\n/**\n * 测试重写\n * @author 葛宇\n */\npackage 面向对象核心;\n\npublic class TestOverride {\n\tpublic static void main(String[] args) {\n\t\tAirplane obj = new Airplane();\n\t\tobj.run();\n\t}\n}\n\nclass Transportation{\n\n\tpublic void run() {\n\t\tSystem.out.println(\"Running\");\n\t}\n\t\n\tpublic Person whoIsPsg() {\n\t\treturn new Person();\n\t}\n}\n\nclass Airplane extends Transportation{\n\t\n\tpublic void run() {\n\t\tSystem.out.println(\"Flying\");\n\t\t//重写了父类的run()\n\t}\t\n\t\n \tpublic Student whoIsPsg() {\n\t\treturn new Student();\n\t\t//重写了父类的whoIsPsg()\n\t}\n\n/*\t\n* \tpublic Student whoIsPsg() {\n*\t\treturn new Student();\n*\t\t//重写了父类的whoIsPsg()\n*\t}\n*/\n/*\t\n * \tpublic Object whoIsPsg() {\n *\t\treturn new Object();\n *\t\t//重写了父类的whoIsPsg()但报错\n *\t}\n */\n \t\n}\n\n/* 构成重写的条件：\n * 子类继承父类\n * 重写的方法名，形参列表要相同\n * 返回值类型和声明异常的类型，子类应<=父类\n * 方法访问权限：子类>=父类\n */\n\n```\n","slug":"Java学习之路(29)","published":1,"updated":"2020-03-01T03:40:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb6j0037a8vwpz10wpv7","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试重写</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestOverride</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tAirplane obj = <span class=\"keyword\">new</span> Airplane();</span><br><span class=\"line\">\t\tobj.run();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Transportation</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Running\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">whoIsPsg</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Airplane</span> <span class=\"keyword\">extends</span> <span class=\"title\">Transportation</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Flying\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//重写了父类的run()</span></span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t</span><br><span class=\"line\"> \t<span class=\"function\"><span class=\"keyword\">public</span> Student <span class=\"title\">whoIsPsg</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">\t\t<span class=\"comment\">//重写了父类的whoIsPsg()</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*\t</span></span><br><span class=\"line\"><span class=\"comment\">* \tpublic Student whoIsPsg() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">*\t\treturn new Student();</span></span><br><span class=\"line\"><span class=\"comment\">*\t\t//重写了父类的whoIsPsg()</span></span><br><span class=\"line\"><span class=\"comment\">*\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">/*\t</span></span><br><span class=\"line\"><span class=\"comment\"> * \tpublic Object whoIsPsg() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\treturn new Object();</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t//重写了父类的whoIsPsg()但报错</span></span><br><span class=\"line\"><span class=\"comment\"> *\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> \t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 构成重写的条件：</span></span><br><span class=\"line\"><span class=\"comment\"> * 子类继承父类</span></span><br><span class=\"line\"><span class=\"comment\"> * 重写的方法名，形参列表要相同</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回值类型和声明异常的类型，子类应&lt;=父类</span></span><br><span class=\"line\"><span class=\"comment\"> * 方法访问权限：子类&gt;=父类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试重写</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestOverride</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tAirplane obj = <span class=\"keyword\">new</span> Airplane();</span><br><span class=\"line\">\t\tobj.run();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Transportation</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Running\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">whoIsPsg</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Airplane</span> <span class=\"keyword\">extends</span> <span class=\"title\">Transportation</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Flying\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//重写了父类的run()</span></span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t</span><br><span class=\"line\"> \t<span class=\"function\"><span class=\"keyword\">public</span> Student <span class=\"title\">whoIsPsg</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">\t\t<span class=\"comment\">//重写了父类的whoIsPsg()</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*\t</span></span><br><span class=\"line\"><span class=\"comment\">* \tpublic Student whoIsPsg() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">*\t\treturn new Student();</span></span><br><span class=\"line\"><span class=\"comment\">*\t\t//重写了父类的whoIsPsg()</span></span><br><span class=\"line\"><span class=\"comment\">*\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">/*\t</span></span><br><span class=\"line\"><span class=\"comment\"> * \tpublic Object whoIsPsg() &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\treturn new Object();</span></span><br><span class=\"line\"><span class=\"comment\"> *\t\t//重写了父类的whoIsPsg()但报错</span></span><br><span class=\"line\"><span class=\"comment\"> *\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> \t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 构成重写的条件：</span></span><br><span class=\"line\"><span class=\"comment\"> * 子类继承父类</span></span><br><span class=\"line\"><span class=\"comment\"> * 重写的方法名，形参列表要相同</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回值类型和声明异常的类型，子类应&lt;=父类</span></span><br><span class=\"line\"><span class=\"comment\"> * 方法访问权限：子类&gt;=父类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--常量","date":"2020-01-19T16:00:00.000Z","_content":"```java\n/**\n * Java常量\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestConstant {\n\tpublic static void main(String[] args) {\n\t  //age和name都是变量，数字18、20和字符串“GeYu”“GEYU”是字面常量\n\t\tint age = 18;\n\t\tage = 20;\n\t\tString name = \"GeYu\";\n\t\tname = \"GEYU\";\n\t\t\n\t\tfinal double PI = 3.14;\n\t             //PI++; 报错，final将PI定义为了符号常量\n\t\t\n\t\t/*\n\t\t * 命名规范\n\t\t * 常量：全部大写，可配合下划线：MAX_VALUE\n\t\t * 类名：首字母大写，驼峰原则：HelloWorld、FatherClass\n\t\t * 类成员变量、类方法：首字母小写，驼峰原则：monthSalary、getSalary()\n\t\t */\n\t}\n}\n\n```\n","source":"_posts/Java学习之路(3).md","raw":"---\ntitle:  Java学习之路--常量\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-20\n\n---\n```java\n/**\n * Java常量\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestConstant {\n\tpublic static void main(String[] args) {\n\t  //age和name都是变量，数字18、20和字符串“GeYu”“GEYU”是字面常量\n\t\tint age = 18;\n\t\tage = 20;\n\t\tString name = \"GeYu\";\n\t\tname = \"GEYU\";\n\t\t\n\t\tfinal double PI = 3.14;\n\t             //PI++; 报错，final将PI定义为了符号常量\n\t\t\n\t\t/*\n\t\t * 命名规范\n\t\t * 常量：全部大写，可配合下划线：MAX_VALUE\n\t\t * 类名：首字母大写，驼峰原则：HelloWorld、FatherClass\n\t\t * 类成员变量、类方法：首字母小写，驼峰原则：monthSalary、getSalary()\n\t\t */\n\t}\n}\n\n```\n","slug":"Java学习之路(3)","published":1,"updated":"2020-02-28T05:52:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb6m003aa8vwpscir2zb","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Java常量</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestConstant</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//age和name都是变量，数字18、20和字符串“GeYu”“GEYU”是字面常量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> age = <span class=\"number\">18</span>;</span><br><span class=\"line\">\t\tage = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t\tString name = <span class=\"string\">\"GeYu\"</span>;</span><br><span class=\"line\">\t\tname = <span class=\"string\">\"GEYU\"</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">double</span> PI = <span class=\"number\">3.14</span>;</span><br><span class=\"line\">\t             <span class=\"comment\">//PI++; 报错，final将PI定义为了符号常量</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 命名规范</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 常量：全部大写，可配合下划线：MAX_VALUE</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 类名：首字母大写，驼峰原则：HelloWorld、FatherClass</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 类成员变量、类方法：首字母小写，驼峰原则：monthSalary、getSalary()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Java常量</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestConstant</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//age和name都是变量，数字18、20和字符串“GeYu”“GEYU”是字面常量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> age = <span class=\"number\">18</span>;</span><br><span class=\"line\">\t\tage = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t\tString name = <span class=\"string\">\"GeYu\"</span>;</span><br><span class=\"line\">\t\tname = <span class=\"string\">\"GEYU\"</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">double</span> PI = <span class=\"number\">3.14</span>;</span><br><span class=\"line\">\t             <span class=\"comment\">//PI++; 报错，final将PI定义为了符号常量</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 命名规范</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 常量：全部大写，可配合下划线：MAX_VALUE</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 类名：首字母大写，驼峰原则：HelloWorld、FatherClass</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 类成员变量、类方法：首字母小写，驼峰原则：monthSalary、getSalary()</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--Object类并重写toString","date":"2020-01-27T16:00:00.000Z","_content":"```java\n/**\n * 测试Object类并重写toString\n * @author 葛宇\n */\npackage 面向对象核心;\n\npublic class TestObject {\n\tpublic static void main(String[] args) {\n\t\tTestObject obj = new TestObject();\n\t\tSystem.out.println(obj.toString());\n\t\t\n\t\tPeople ple = new People(\"Kevin\",18);\n\t\tSystem.out.println(ple);\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn \"测试Overtide Object类的toString方法\";\n\t}\t\n}\n\nclass People{\n\tint age;\n\tString name;\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn name+\" 年龄：\"+age;\n\t}\t\n\t\n\tpublic People(String name,int age) {\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t}\n}\n```\n","source":"_posts/Java学习之路(30).md","raw":"---\ntitle:  Java学习之路--Object类并重写toString\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-28\n\n---\n```java\n/**\n * 测试Object类并重写toString\n * @author 葛宇\n */\npackage 面向对象核心;\n\npublic class TestObject {\n\tpublic static void main(String[] args) {\n\t\tTestObject obj = new TestObject();\n\t\tSystem.out.println(obj.toString());\n\t\t\n\t\tPeople ple = new People(\"Kevin\",18);\n\t\tSystem.out.println(ple);\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn \"测试Overtide Object类的toString方法\";\n\t}\t\n}\n\nclass People{\n\tint age;\n\tString name;\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn name+\" 年龄：\"+age;\n\t}\t\n\t\n\tpublic People(String name,int age) {\n\t\tthis.name = name;\n\t\tthis.age = age;\n\t}\n}\n```\n","slug":"Java学习之路(30)","published":1,"updated":"2020-03-01T03:41:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb6s003da8vwf2pcogk0","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试Object类并重写toString</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestObject</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tTestObject obj = <span class=\"keyword\">new</span> TestObject();</span><br><span class=\"line\">\t\tSystem.out.println(obj.toString());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tPeople ple = <span class=\"keyword\">new</span> People(<span class=\"string\">\"Kevin\"</span>,<span class=\"number\">18</span>);</span><br><span class=\"line\">\t\tSystem.out.println(ple);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"测试Overtide Object类的toString方法\"</span>;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;</span><br><span class=\"line\">\tString name;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name+<span class=\"string\">\" 年龄：\"</span>+age;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">People</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试Object类并重写toString</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestObject</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tTestObject obj = <span class=\"keyword\">new</span> TestObject();</span><br><span class=\"line\">\t\tSystem.out.println(obj.toString());</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tPeople ple = <span class=\"keyword\">new</span> People(<span class=\"string\">\"Kevin\"</span>,<span class=\"number\">18</span>);</span><br><span class=\"line\">\t\tSystem.out.println(ple);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"测试Overtide Object类的toString方法\"</span>;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;</span><br><span class=\"line\">\tString name;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name+<span class=\"string\">\" 年龄：\"</span>+age;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">People</span><span class=\"params\">(String name,<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--final关键字","date":"2020-01-27T16:00:00.000Z","_content":"```java\n/**\n * 测试final关键字\n * @author 葛宇\n */\npackage 面向对象核心;\n\npublic class TestFinal {\n\tpublic static void main(String[] args) {\n\t\tA a = new A();\n\t\tB b = new B();\n\t\t\n\t  //a.a = 2;\t//报错，final修饰变量则不可变\n\t\tb.b = 2;\t//无final修饰，可自行赋值\n\t}\n}\n\nfinal class A{\n\t\n\tfinal int a = 1;\n}\n\nclass B /*extends A*  报错，final修饰的类无法被继承*/{\n\t\n\tint b;\n\t\n\tfinal public void func(int x) {\n\t\t//...\n\t}\n\t\n\tpublic void func(double x) {\n\t\t//final修饰的方法可以在本类中重载\n\t}\n}\n\nclass C extends B{\n\t\n   /*\tpublic void func(int x) {\n\t*\t\t//...\n\t*\t}\n\t*final修饰的方法无法被子类重写\n\t*/\n}\n\n```\n","source":"_posts/Java学习之路(31).md","raw":"---\ntitle:  Java学习之路--final关键字\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-28\n\n---\n```java\n/**\n * 测试final关键字\n * @author 葛宇\n */\npackage 面向对象核心;\n\npublic class TestFinal {\n\tpublic static void main(String[] args) {\n\t\tA a = new A();\n\t\tB b = new B();\n\t\t\n\t  //a.a = 2;\t//报错，final修饰变量则不可变\n\t\tb.b = 2;\t//无final修饰，可自行赋值\n\t}\n}\n\nfinal class A{\n\t\n\tfinal int a = 1;\n}\n\nclass B /*extends A*  报错，final修饰的类无法被继承*/{\n\t\n\tint b;\n\t\n\tfinal public void func(int x) {\n\t\t//...\n\t}\n\t\n\tpublic void func(double x) {\n\t\t//final修饰的方法可以在本类中重载\n\t}\n}\n\nclass C extends B{\n\t\n   /*\tpublic void func(int x) {\n\t*\t\t//...\n\t*\t}\n\t*final修饰的方法无法被子类重写\n\t*/\n}\n\n```\n","slug":"Java学习之路(31)","published":1,"updated":"2020-03-01T03:42:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb6u003ga8vw8t50ewl6","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试final关键字</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestFinal</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tA a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">\t\tB b = <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t  <span class=\"comment\">//a.a = 2;\t//报错，final修饰变量则不可变</span></span><br><span class=\"line\">\t\tb.b = <span class=\"number\">2</span>;\t<span class=\"comment\">//无final修饰，可自行赋值</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> /*<span class=\"keyword\">extends</span> <span class=\"title\">A</span>*  报错，<span class=\"title\">final</span>修饰的类无法被继承*/</span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">double</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//final修饰的方法可以在本类中重载</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">B</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">   <span class=\"comment\">/*\tpublic void func(int x) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t*\t\t//...</span></span><br><span class=\"line\"><span class=\"comment\">\t*\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t*final修饰的方法无法被子类重写</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试final关键字</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestFinal</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tA a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">\t\tB b = <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t  <span class=\"comment\">//a.a = 2;\t//报错，final修饰变量则不可变</span></span><br><span class=\"line\">\t\tb.b = <span class=\"number\">2</span>;\t<span class=\"comment\">//无final修饰，可自行赋值</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> /*<span class=\"keyword\">extends</span> <span class=\"title\">A</span>*  报错，<span class=\"title\">final</span>修饰的类无法被继承*/</span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">double</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//final修饰的方法可以在本类中重载</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">B</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">   <span class=\"comment\">/*\tpublic void func(int x) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t*\t\t//...</span></span><br><span class=\"line\"><span class=\"comment\">\t*\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t*final修饰的方法无法被子类重写</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--多态与对象转型","date":"2020-01-28T16:00:00.000Z","_content":"```java\n/**\n * 测试多态与对象转型\n * @author 葛宇\n * 多态三要素：继承、重写、父类引用指向子类对象\n * 对象转型关键点：子类转向父类是自动转型、父类转向子类是强制转型、直系可转型、兄弟系互转可通过编译但是运行报错、编译阶段按表面类型、运行阶段按本质类型\n */\npackage 面向对象核心;\n\npublic class TestPolyf {\n\tpublic static void main(String[] args) {\n\t\tAnimal a = new Animal();\n\t\tAnimal d_ = new Dog();\t\t//d_本质还是Dog类对象变量（自动转型）,但编译环节暂定为Animal类\n\t\tAnimal c_ = new Cat();\t\t//c_本质还是Cat类对象变量（自动转型）,但编译环节暂定为Animal类\t\n\t\tDog d = new Dog();\n\t\tCat c = new Cat();\n\t\t\n\t\td_.x = 1;\t\t//不报错,编译环节暂定d_是Animal类，拥有Animal类的成员变量\n\t  //d_.y = 1;\t\t//报错,编译环节暂定d_是Animal类，无法拥有Dog类的成员变量\n\t\t\n\t\tDog _d = (Dog)d_;\t\t//使用强制类型转换，将Animal类的d_转为Dog类\n\t\t_d.y = 1;\t\t\t\t//转型后可以使用Dog类的成员变量\n\t\t\n\t\tDog _d_ = (Dog)c_;\t\t//编译通过，JVM运行时报错\n\t\t_d_.y = 1;\t\t\t\t//编译通过，JVM运行时报错\n\t\n\t  //当传入子类对象的引用d,c,d_,c_发生多态：\n\t\tanimalCry(a);\n\t\tanimalCry(d_);\t\t//在运行环节JVM会自动识别出d_本质是Dog类，从而完成多态\n\t\tanimalCry(c_);\t\t//在运行环节JVM会自动识别出c_本质是Cat类，从而完成多态\n\t\tanimalCry(d);\n\t\tanimalCry(c);\n\t}\n\t\n\tstatic void animalCry(Animal a/*这里一定要是父类引用*/) {\n\t  //多态机制实现了代码的重用与精简\t\n\t\ta.shout();\n\t}\n}\n\nclass Animal{\n\tint x;\n\tpublic void shout() {\n\t\tSystem.out.println(\"Animal shout!\");\n\t}\n}\n\nclass Dog extends Animal{\t//继承\n\tint y;\n\tpublic void shout() {\n\t\tSystem.out.println(\"Dog shout!\");\t//重写\n\t}\n}\n\nclass Cat extends Animal{\t//继承\n\tint z;\n\tpublic void shout() {\n\t\tSystem.out.println(\"Cat shout!\");\t//重写\n\t}\n}\n\n```\n","source":"_posts/Java学习之路(32).md","raw":"---\ntitle:  Java学习之路--多态与对象转型\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-29\n\n---\n```java\n/**\n * 测试多态与对象转型\n * @author 葛宇\n * 多态三要素：继承、重写、父类引用指向子类对象\n * 对象转型关键点：子类转向父类是自动转型、父类转向子类是强制转型、直系可转型、兄弟系互转可通过编译但是运行报错、编译阶段按表面类型、运行阶段按本质类型\n */\npackage 面向对象核心;\n\npublic class TestPolyf {\n\tpublic static void main(String[] args) {\n\t\tAnimal a = new Animal();\n\t\tAnimal d_ = new Dog();\t\t//d_本质还是Dog类对象变量（自动转型）,但编译环节暂定为Animal类\n\t\tAnimal c_ = new Cat();\t\t//c_本质还是Cat类对象变量（自动转型）,但编译环节暂定为Animal类\t\n\t\tDog d = new Dog();\n\t\tCat c = new Cat();\n\t\t\n\t\td_.x = 1;\t\t//不报错,编译环节暂定d_是Animal类，拥有Animal类的成员变量\n\t  //d_.y = 1;\t\t//报错,编译环节暂定d_是Animal类，无法拥有Dog类的成员变量\n\t\t\n\t\tDog _d = (Dog)d_;\t\t//使用强制类型转换，将Animal类的d_转为Dog类\n\t\t_d.y = 1;\t\t\t\t//转型后可以使用Dog类的成员变量\n\t\t\n\t\tDog _d_ = (Dog)c_;\t\t//编译通过，JVM运行时报错\n\t\t_d_.y = 1;\t\t\t\t//编译通过，JVM运行时报错\n\t\n\t  //当传入子类对象的引用d,c,d_,c_发生多态：\n\t\tanimalCry(a);\n\t\tanimalCry(d_);\t\t//在运行环节JVM会自动识别出d_本质是Dog类，从而完成多态\n\t\tanimalCry(c_);\t\t//在运行环节JVM会自动识别出c_本质是Cat类，从而完成多态\n\t\tanimalCry(d);\n\t\tanimalCry(c);\n\t}\n\t\n\tstatic void animalCry(Animal a/*这里一定要是父类引用*/) {\n\t  //多态机制实现了代码的重用与精简\t\n\t\ta.shout();\n\t}\n}\n\nclass Animal{\n\tint x;\n\tpublic void shout() {\n\t\tSystem.out.println(\"Animal shout!\");\n\t}\n}\n\nclass Dog extends Animal{\t//继承\n\tint y;\n\tpublic void shout() {\n\t\tSystem.out.println(\"Dog shout!\");\t//重写\n\t}\n}\n\nclass Cat extends Animal{\t//继承\n\tint z;\n\tpublic void shout() {\n\t\tSystem.out.println(\"Cat shout!\");\t//重写\n\t}\n}\n\n```\n","slug":"Java学习之路(32)","published":1,"updated":"2020-03-01T03:43:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb6w003ja8vwv54i46m1","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试多态与对象转型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> * 多态三要素：继承、重写、父类引用指向子类对象</span></span><br><span class=\"line\"><span class=\"comment\"> * 对象转型关键点：子类转向父类是自动转型、父类转向子类是强制转型、直系可转型、兄弟系互转可通过编译但是运行报错、编译阶段按表面类型、运行阶段按本质类型</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPolyf</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tAnimal a = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">\t\tAnimal d_ = <span class=\"keyword\">new</span> Dog();\t\t<span class=\"comment\">//d_本质还是Dog类对象变量（自动转型）,但编译环节暂定为Animal类</span></span><br><span class=\"line\">\t\tAnimal c_ = <span class=\"keyword\">new</span> Cat();\t\t<span class=\"comment\">//c_本质还是Cat类对象变量（自动转型）,但编译环节暂定为Animal类\t</span></span><br><span class=\"line\">\t\tDog d = <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\">\t\tCat c = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\td_.x = <span class=\"number\">1</span>;\t\t<span class=\"comment\">//不报错,编译环节暂定d_是Animal类，拥有Animal类的成员变量</span></span><br><span class=\"line\">\t  <span class=\"comment\">//d_.y = 1;\t\t//报错,编译环节暂定d_是Animal类，无法拥有Dog类的成员变量</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tDog _d = (Dog)d_;\t\t<span class=\"comment\">//使用强制类型转换，将Animal类的d_转为Dog类</span></span><br><span class=\"line\">\t\t_d.y = <span class=\"number\">1</span>;\t\t\t\t<span class=\"comment\">//转型后可以使用Dog类的成员变量</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tDog _d_ = (Dog)c_;\t\t<span class=\"comment\">//编译通过，JVM运行时报错</span></span><br><span class=\"line\">\t\t_d_.y = <span class=\"number\">1</span>;\t\t\t\t<span class=\"comment\">//编译通过，JVM运行时报错</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t  <span class=\"comment\">//当传入子类对象的引用d,c,d_,c_发生多态：</span></span><br><span class=\"line\">\t\tanimalCry(a);</span><br><span class=\"line\">\t\tanimalCry(d_);\t\t<span class=\"comment\">//在运行环节JVM会自动识别出d_本质是Dog类，从而完成多态</span></span><br><span class=\"line\">\t\tanimalCry(c_);\t\t<span class=\"comment\">//在运行环节JVM会自动识别出c_本质是Cat类，从而完成多态</span></span><br><span class=\"line\">\t\tanimalCry(d);</span><br><span class=\"line\">\t\tanimalCry(c);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">animalCry</span><span class=\"params\">(Animal a<span class=\"comment\">/*这里一定要是父类引用*/</span>)</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//多态机制实现了代码的重用与精简\t</span></span><br><span class=\"line\">\t\ta.shout();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Animal shout!\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span>&#123;\t<span class=\"comment\">//继承</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> y;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Dog shout!\"</span>);\t<span class=\"comment\">//重写</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span>&#123;\t<span class=\"comment\">//继承</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> z;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Cat shout!\"</span>);\t<span class=\"comment\">//重写</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试多态与对象转型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> * 多态三要素：继承、重写、父类引用指向子类对象</span></span><br><span class=\"line\"><span class=\"comment\"> * 对象转型关键点：子类转向父类是自动转型、父类转向子类是强制转型、直系可转型、兄弟系互转可通过编译但是运行报错、编译阶段按表面类型、运行阶段按本质类型</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPolyf</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tAnimal a = <span class=\"keyword\">new</span> Animal();</span><br><span class=\"line\">\t\tAnimal d_ = <span class=\"keyword\">new</span> Dog();\t\t<span class=\"comment\">//d_本质还是Dog类对象变量（自动转型）,但编译环节暂定为Animal类</span></span><br><span class=\"line\">\t\tAnimal c_ = <span class=\"keyword\">new</span> Cat();\t\t<span class=\"comment\">//c_本质还是Cat类对象变量（自动转型）,但编译环节暂定为Animal类\t</span></span><br><span class=\"line\">\t\tDog d = <span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\">\t\tCat c = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\td_.x = <span class=\"number\">1</span>;\t\t<span class=\"comment\">//不报错,编译环节暂定d_是Animal类，拥有Animal类的成员变量</span></span><br><span class=\"line\">\t  <span class=\"comment\">//d_.y = 1;\t\t//报错,编译环节暂定d_是Animal类，无法拥有Dog类的成员变量</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tDog _d = (Dog)d_;\t\t<span class=\"comment\">//使用强制类型转换，将Animal类的d_转为Dog类</span></span><br><span class=\"line\">\t\t_d.y = <span class=\"number\">1</span>;\t\t\t\t<span class=\"comment\">//转型后可以使用Dog类的成员变量</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tDog _d_ = (Dog)c_;\t\t<span class=\"comment\">//编译通过，JVM运行时报错</span></span><br><span class=\"line\">\t\t_d_.y = <span class=\"number\">1</span>;\t\t\t\t<span class=\"comment\">//编译通过，JVM运行时报错</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t  <span class=\"comment\">//当传入子类对象的引用d,c,d_,c_发生多态：</span></span><br><span class=\"line\">\t\tanimalCry(a);</span><br><span class=\"line\">\t\tanimalCry(d_);\t\t<span class=\"comment\">//在运行环节JVM会自动识别出d_本质是Dog类，从而完成多态</span></span><br><span class=\"line\">\t\tanimalCry(c_);\t\t<span class=\"comment\">//在运行环节JVM会自动识别出c_本质是Cat类，从而完成多态</span></span><br><span class=\"line\">\t\tanimalCry(d);</span><br><span class=\"line\">\t\tanimalCry(c);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">animalCry</span><span class=\"params\">(Animal a<span class=\"comment\">/*这里一定要是父类引用*/</span>)</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//多态机制实现了代码的重用与精简\t</span></span><br><span class=\"line\">\t\ta.shout();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Animal shout!\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span>&#123;\t<span class=\"comment\">//继承</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> y;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Dog shout!\"</span>);\t<span class=\"comment\">//重写</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span>&#123;\t<span class=\"comment\">//继承</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> z;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Cat shout!\"</span>);\t<span class=\"comment\">//重写</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--super用法(1)","date":"2020-01-29T16:00:00.000Z","_content":"```java\n/**\n * 测试super用法\n * @author 葛宇\n * super是对直接父类的引用，可以通过super来访问被子类覆盖的父类的方法或属性\n */\npackage 面向对象核心;\n\npublic class TestSuper {\n\tpublic static void main(String[] args) {\n\t\tnew ChildClass().func();\n\t}\n}\n\nclass FatherClass{\n\tpublic int value;\n\t\n\tpublic void func() {\n\t\tvalue = 100;\n\t\tSystem.out.println(\"FatherClass.value=\"+value);\n\t}\n}\n\nclass ChildClass extends FatherClass{\n\tpublic int value;\t\t//覆盖了父类的value属性\n\t\n\tpublic void func() {\t//重写了父类func（）方法\n\t\tsuper.func();\t\t//调用父类value\n\t\tvalue = 200;\t\t//指子类的value\n\t\tSystem.out.println(\"ChildClass.value=\"+value);\n\t\tSystem.out.println(super.value);\n\t}\n}\n\n```\n","source":"_posts/Java学习之路(33).md","raw":"---\ntitle:  Java学习之路--super用法(1)\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-30\n\n---\n```java\n/**\n * 测试super用法\n * @author 葛宇\n * super是对直接父类的引用，可以通过super来访问被子类覆盖的父类的方法或属性\n */\npackage 面向对象核心;\n\npublic class TestSuper {\n\tpublic static void main(String[] args) {\n\t\tnew ChildClass().func();\n\t}\n}\n\nclass FatherClass{\n\tpublic int value;\n\t\n\tpublic void func() {\n\t\tvalue = 100;\n\t\tSystem.out.println(\"FatherClass.value=\"+value);\n\t}\n}\n\nclass ChildClass extends FatherClass{\n\tpublic int value;\t\t//覆盖了父类的value属性\n\t\n\tpublic void func() {\t//重写了父类func（）方法\n\t\tsuper.func();\t\t//调用父类value\n\t\tvalue = 200;\t\t//指子类的value\n\t\tSystem.out.println(\"ChildClass.value=\"+value);\n\t\tSystem.out.println(super.value);\n\t}\n}\n\n```\n","slug":"Java学习之路(33)","published":1,"updated":"2020-03-01T03:44:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb6x003ma8vw039ekwj8","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试super用法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> * super是对直接父类的引用，可以通过super来访问被子类覆盖的父类的方法或属性</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSuper</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> ChildClass().func();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FatherClass</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tvalue = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"FatherClass.value=\"</span>+value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">FatherClass</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> value;\t\t<span class=\"comment\">//覆盖了父类的value属性</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;\t<span class=\"comment\">//重写了父类func（）方法</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>.func();\t\t<span class=\"comment\">//调用父类value</span></span><br><span class=\"line\">\t\tvalue = <span class=\"number\">200</span>;\t\t<span class=\"comment\">//指子类的value</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"ChildClass.value=\"</span>+value);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">super</span>.value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试super用法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> * super是对直接父类的引用，可以通过super来访问被子类覆盖的父类的方法或属性</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSuper</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> ChildClass().func();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FatherClass</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tvalue = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"FatherClass.value=\"</span>+value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">FatherClass</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> value;\t\t<span class=\"comment\">//覆盖了父类的value属性</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;\t<span class=\"comment\">//重写了父类func（）方法</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>.func();\t\t<span class=\"comment\">//调用父类value</span></span><br><span class=\"line\">\t\tvalue = <span class=\"number\">200</span>;\t\t<span class=\"comment\">//指子类的value</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"ChildClass.value=\"</span>+value);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"keyword\">super</span>.value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--super用法(2)","date":"2020-01-29T16:00:00.000Z","_content":"```java\n/**\n * 测试super用法\n * @author 葛宇\n */\npackage 面向对象核心;\n\npublic class TestSuper1 {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"创建一个Child对象：\");\n\t\tnew ChildClass_();\n\t}\n}\n\nclass FatherClass_{\n\tpublic FatherClass_() {\n\t  //super();\n\t\tSystem.out.println(\"创建FatherClass_\");\n\t}\n}\n\nclass ChildClass_ extends FatherClass_{\n\tpublic ChildClass_() {\n\t  //super();\n\t  //所有构造方法第一句都是super();不加编译器会自动添加\n\t\tSystem.out.println(\"创建ChildClass_\");\n\t}\n}\n\n//本例继承树为：Object（顶端）-->FatherClass_-->ChildClass_（底端）\n//类的继承都是先一步一步向上追溯到继承树顶端，再从顶端向底端一个一个调用类构造器，完成初始化\n\n```\n","source":"_posts/Java学习之路(34).md","raw":"---\ntitle:  Java学习之路--super用法(2)\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-30\n\n---\n```java\n/**\n * 测试super用法\n * @author 葛宇\n */\npackage 面向对象核心;\n\npublic class TestSuper1 {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"创建一个Child对象：\");\n\t\tnew ChildClass_();\n\t}\n}\n\nclass FatherClass_{\n\tpublic FatherClass_() {\n\t  //super();\n\t\tSystem.out.println(\"创建FatherClass_\");\n\t}\n}\n\nclass ChildClass_ extends FatherClass_{\n\tpublic ChildClass_() {\n\t  //super();\n\t  //所有构造方法第一句都是super();不加编译器会自动添加\n\t\tSystem.out.println(\"创建ChildClass_\");\n\t}\n}\n\n//本例继承树为：Object（顶端）-->FatherClass_-->ChildClass_（底端）\n//类的继承都是先一步一步向上追溯到继承树顶端，再从顶端向底端一个一个调用类构造器，完成初始化\n\n```\n","slug":"Java学习之路(34)","published":1,"updated":"2020-03-01T03:45:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb70003pa8vw2vqgcwit","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试super用法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSuper1</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"创建一个Child对象：\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> ChildClass_();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FatherClass_</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FatherClass_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//super();</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"创建FatherClass_\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildClass_</span> <span class=\"keyword\">extends</span> <span class=\"title\">FatherClass_</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChildClass_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//super();</span></span><br><span class=\"line\">\t  <span class=\"comment\">//所有构造方法第一句都是super();不加编译器会自动添加</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"创建ChildClass_\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//本例继承树为：Object（顶端）--&gt;FatherClass_--&gt;ChildClass_（底端）</span></span><br><span class=\"line\"><span class=\"comment\">//类的继承都是先一步一步向上追溯到继承树顶端，再从顶端向底端一个一个调用类构造器，完成初始化</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试super用法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSuper1</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"创建一个Child对象：\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> ChildClass_();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FatherClass_</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FatherClass_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//super();</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"创建FatherClass_\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildClass_</span> <span class=\"keyword\">extends</span> <span class=\"title\">FatherClass_</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChildClass_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//super();</span></span><br><span class=\"line\">\t  <span class=\"comment\">//所有构造方法第一句都是super();不加编译器会自动添加</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"创建ChildClass_\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//本例继承树为：Object（顶端）--&gt;FatherClass_--&gt;ChildClass_（底端）</span></span><br><span class=\"line\"><span class=\"comment\">//类的继承都是先一步一步向上追溯到继承树顶端，再从顶端向底端一个一个调用类构造器，完成初始化</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--super用法(2)","date":"2020-01-29T16:00:00.000Z","_content":"```java\n/**\n * 测试super用法\n * @author 葛宇\n */\npackage 面向对象核心;\n\npublic class TestSuper1 {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"创建一个Child对象：\");\n\t\tnew ChildClass_();\n\t}\n}\n\nclass FatherClass_{\n\tpublic FatherClass_() {\n\t  //super();\n\t\tSystem.out.println(\"创建FatherClass_\");\n\t}\n}\n\nclass ChildClass_ extends FatherClass_{\n\tpublic ChildClass_() {\n\t  //super();\n\t  //所有构造方法第一句都是super();不加编译器会自动添加\n\t\tSystem.out.println(\"创建ChildClass_\");\n\t}\n}\n\n//本例继承树为：Object（顶端）-->FatherClass_-->ChildClass_（底端）\n//类的继承都是先一步一步向上追溯到继承树顶端，再从顶端向底端一个一个调用类构造器，完成初始化\n\n```\n","source":"_posts/Java学习之路(35).md","raw":"---\ntitle:  Java学习之路--super用法(2)\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-30\n\n---\n```java\n/**\n * 测试super用法\n * @author 葛宇\n */\npackage 面向对象核心;\n\npublic class TestSuper1 {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"创建一个Child对象：\");\n\t\tnew ChildClass_();\n\t}\n}\n\nclass FatherClass_{\n\tpublic FatherClass_() {\n\t  //super();\n\t\tSystem.out.println(\"创建FatherClass_\");\n\t}\n}\n\nclass ChildClass_ extends FatherClass_{\n\tpublic ChildClass_() {\n\t  //super();\n\t  //所有构造方法第一句都是super();不加编译器会自动添加\n\t\tSystem.out.println(\"创建ChildClass_\");\n\t}\n}\n\n//本例继承树为：Object（顶端）-->FatherClass_-->ChildClass_（底端）\n//类的继承都是先一步一步向上追溯到继承树顶端，再从顶端向底端一个一个调用类构造器，完成初始化\n\n```\n","slug":"Java学习之路(35)","published":1,"updated":"2020-03-01T03:51:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb71003sa8vwd8qy2svh","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试super用法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSuper1</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"创建一个Child对象：\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> ChildClass_();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FatherClass_</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FatherClass_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//super();</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"创建FatherClass_\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildClass_</span> <span class=\"keyword\">extends</span> <span class=\"title\">FatherClass_</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChildClass_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//super();</span></span><br><span class=\"line\">\t  <span class=\"comment\">//所有构造方法第一句都是super();不加编译器会自动添加</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"创建ChildClass_\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//本例继承树为：Object（顶端）--&gt;FatherClass_--&gt;ChildClass_（底端）</span></span><br><span class=\"line\"><span class=\"comment\">//类的继承都是先一步一步向上追溯到继承树顶端，再从顶端向底端一个一个调用类构造器，完成初始化</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试super用法</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 面向对象核心;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestSuper1</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"创建一个Child对象：\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> ChildClass_();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FatherClass_</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FatherClass_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//super();</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"创建FatherClass_\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildClass_</span> <span class=\"keyword\">extends</span> <span class=\"title\">FatherClass_</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChildClass_</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//super();</span></span><br><span class=\"line\">\t  <span class=\"comment\">//所有构造方法第一句都是super();不加编译器会自动添加</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"创建ChildClass_\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//本例继承树为：Object（顶端）--&gt;FatherClass_--&gt;ChildClass_（底端）</span></span><br><span class=\"line\"><span class=\"comment\">//类的继承都是先一步一步向上追溯到继承树顶端，再从顶端向底端一个一个调用类构造器，完成初始化</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--数组用法(2)","date":"2020-01-30T16:00:00.000Z","_content":"```java\n/**\n * 测试数组\n * @author 葛宇\n * 测试三种初始化方法和foreach遍历\n */\npackage com.github.nuistgy.testarray;\n\npublic class Test02 {\n\tpublic static void main(String[] args) {\n\t  //静态初始化\n\t\tint a[] = {1,2,3};\n\t\tStudent stu[] = {new Student(1001,\"Mark\"),\n\t\t\t\t\t\t new Student(1002,\"Jhon\"),\n\t\t\t\t\t\t new Student(1003,\"Jack\")\n\t\t\t\t\t\t };\n\t  //默认初始化\t\n\t\tint b[] = new int[3];\t\t\t\t//默认是0\n\t\tboolean bool[] = new boolean[3];\t//默认是false\n\t\tString s[] = new String[3];\t\t\t//默认是null\n\t\tStudent stu_[] = new Student[3]; \t//默认是null\n\t\t\n\t  //动态初始化\n\t\tint c[] = new int[3];\n\t\tc[0] = 1;\n\t\tc[1] = 2;\n\t\tc[2] = 3;\n\t\t\n\t  //foreach遍历.注意：foreach不用于写操作，只用于读操作\n\t\tfor(int m :c) {\n\t\t\tSystem.out.println(m);\n\t\t}\n\t}\n}\n\nclass Student{\n\tprivate int id;\n\tprivate String  name;\n\t\n\tStudent(int id,String name){\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t}\n}\n```\n","source":"_posts/Java学习之路(36).md","raw":"---\ntitle:  Java学习之路--数组用法(2)\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-31\n\n---\n```java\n/**\n * 测试数组\n * @author 葛宇\n * 测试三种初始化方法和foreach遍历\n */\npackage com.github.nuistgy.testarray;\n\npublic class Test02 {\n\tpublic static void main(String[] args) {\n\t  //静态初始化\n\t\tint a[] = {1,2,3};\n\t\tStudent stu[] = {new Student(1001,\"Mark\"),\n\t\t\t\t\t\t new Student(1002,\"Jhon\"),\n\t\t\t\t\t\t new Student(1003,\"Jack\")\n\t\t\t\t\t\t };\n\t  //默认初始化\t\n\t\tint b[] = new int[3];\t\t\t\t//默认是0\n\t\tboolean bool[] = new boolean[3];\t//默认是false\n\t\tString s[] = new String[3];\t\t\t//默认是null\n\t\tStudent stu_[] = new Student[3]; \t//默认是null\n\t\t\n\t  //动态初始化\n\t\tint c[] = new int[3];\n\t\tc[0] = 1;\n\t\tc[1] = 2;\n\t\tc[2] = 3;\n\t\t\n\t  //foreach遍历.注意：foreach不用于写操作，只用于读操作\n\t\tfor(int m :c) {\n\t\t\tSystem.out.println(m);\n\t\t}\n\t}\n}\n\nclass Student{\n\tprivate int id;\n\tprivate String  name;\n\t\n\tStudent(int id,String name){\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t}\n}\n```\n","slug":"Java学习之路(36)","published":1,"updated":"2020-03-01T03:50:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb73003va8vwkger7t2r","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试三种初始化方法和foreach遍历</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.github.nuistgy.testarray;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test02</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//静态初始化</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">\t\tStudent stu[] = &#123;<span class=\"keyword\">new</span> Student(<span class=\"number\">1001</span>,<span class=\"string\">\"Mark\"</span>),</span><br><span class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">new</span> Student(<span class=\"number\">1002</span>,<span class=\"string\">\"Jhon\"</span>),</span><br><span class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">new</span> Student(<span class=\"number\">1003</span>,<span class=\"string\">\"Jack\"</span>)</span><br><span class=\"line\">\t\t\t\t\t\t &#125;;</span><br><span class=\"line\">\t  <span class=\"comment\">//默认初始化\t</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> b[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">3</span>];\t\t\t\t<span class=\"comment\">//默认是0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> bool[] = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[<span class=\"number\">3</span>];\t<span class=\"comment\">//默认是false</span></span><br><span class=\"line\">\t\tString s[] = <span class=\"keyword\">new</span> String[<span class=\"number\">3</span>];\t\t\t<span class=\"comment\">//默认是null</span></span><br><span class=\"line\">\t\tStudent stu_[] = <span class=\"keyword\">new</span> Student[<span class=\"number\">3</span>]; \t<span class=\"comment\">//默认是null</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t  <span class=\"comment\">//动态初始化</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> c[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">\t\tc[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tc[<span class=\"number\">1</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tc[<span class=\"number\">2</span>] = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t  <span class=\"comment\">//foreach遍历.注意：foreach不用于写操作，只用于读操作</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> m :c) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(m);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String  name;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tStudent(<span class=\"keyword\">int</span> id,String name)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试数组</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试三种初始化方法和foreach遍历</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.github.nuistgy.testarray;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test02</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//静态初始化</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">\t\tStudent stu[] = &#123;<span class=\"keyword\">new</span> Student(<span class=\"number\">1001</span>,<span class=\"string\">\"Mark\"</span>),</span><br><span class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">new</span> Student(<span class=\"number\">1002</span>,<span class=\"string\">\"Jhon\"</span>),</span><br><span class=\"line\">\t\t\t\t\t\t <span class=\"keyword\">new</span> Student(<span class=\"number\">1003</span>,<span class=\"string\">\"Jack\"</span>)</span><br><span class=\"line\">\t\t\t\t\t\t &#125;;</span><br><span class=\"line\">\t  <span class=\"comment\">//默认初始化\t</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> b[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">3</span>];\t\t\t\t<span class=\"comment\">//默认是0</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> bool[] = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[<span class=\"number\">3</span>];\t<span class=\"comment\">//默认是false</span></span><br><span class=\"line\">\t\tString s[] = <span class=\"keyword\">new</span> String[<span class=\"number\">3</span>];\t\t\t<span class=\"comment\">//默认是null</span></span><br><span class=\"line\">\t\tStudent stu_[] = <span class=\"keyword\">new</span> Student[<span class=\"number\">3</span>]; \t<span class=\"comment\">//默认是null</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t  <span class=\"comment\">//动态初始化</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> c[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">\t\tc[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tc[<span class=\"number\">1</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tc[<span class=\"number\">2</span>] = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t  <span class=\"comment\">//foreach遍历.注意：foreach不用于写操作，只用于读操作</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> m :c) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(m);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String  name;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tStudent(<span class=\"keyword\">int</span> id,String name)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--java.lang.comparable接口实战","date":"2020-03-15T16:00:00.000Z","_content":"# 代码展示\n```java\n/**\n * @author 葛宇\n * 实现java.lang.comparable接口并测试Array.sort()\n */\nclass Employee implements java.lang.Comparable<Employee>{\n\n\tprivate int id;\n\tprivate int salary;\n\tprivate String name;\n\t\n\tpublic Employee(int id,int salary,String name){\n\t\tthis.id = id;\n\t\tthis.salary = salary;\n\t\tthis.name = name;\n\t}\n\tpublic int getId() {\n\t\treturn id;\n\t}\n\tpublic int getSalary() {\n\t\treturn salary;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\t@Override\n\tpublic int compareTo(Employee o) {\n\t\tif(name.compareTo(o.name)!=0) {\n\t\t\treturn name.compareTo(o.name);\n\t\t}else {\n\t\tif (salary<o.salary) \n\t\t\treturn - 1 ;  \n\t\tif (salary>o.salary)  \n\t\t\treturn 1 ;  \n\t\treturn 0 ;  \t\t\t      \n\t\t}\n\t}\n}\n\nclass TestClass{\n\tpublic static void main(String[] args) {\n\t\t Employee[] staff =  new Employee[ 4 ];  \n\t        staff[ 0 ] =  new Employee(001,5000,\"harry\");  \n\t        staff[ 1 ] =  new Employee(002,3000,\"carl \");  \n\t        staff[ 2 ] =  new Employee(003,4000,\"tony \");  \n\t        staff[ 3 ] =  new Employee(004,6000,\"carl \");  \n\t\t\n\t    java.util.Arrays.sort(staff);\n\t\tfor(Employee e: staff)  \n        System.out.println( \"id=\" +e.getId()+ \"  name=\" +e.getName()+  \"  salary=\" +e.getSalary());  \n\t}  \n}\n```\n**输出结果：**\n![java](https://s3.bmp.ovh/imgs/2022/09/05/8939f59ba6ee01f6.png \"运行结果\")\n\n**上述代码是某次Java作业，题目描述如下：**\n> 编写员工Employee类，包含id、姓名、工资salary等属性。令Employee类实现java.lang.comparable接口，并实现compareTo（）方法，制定比较规则。在测试类中创建几个Employee对象，利用java.util.Array类中的方法对其进行排序并打印输出结果。PS:关于比较的规则，建议分别按照name和salary进行升序排列。\n\n**题目出自接口技术一章，实则难点不在接口技术，Java新手在阅读上述代码往往会感到困惑，搞不懂为何对compareTo的自定义实现会影响sort方法的效果？**\n\n# Array.Sort()\n>即使是小白，在阅读完代码后，也应该会产生这样的猜测：line48的java.util.Arrays.sort(staff);的sort方法内会不会用到了compareTo方法了呢？\n\n很好的猜想，让我们进入sort（）内部看看：\n![java](https://s3.bmp.ovh/imgs/2022/09/05/e82a45de2e7c9fd7.png \"内部实现\")\n进入sort（）内部实现后根据关键信息我们又能很轻易的追溯到mergeSort方法，那就继续进入mergeSort（）的内部实现：\n![java](https://s3.bmp.ovh/imgs/2022/09/05/6e1c7b20b16b9dd9.png \"内部实现\")\n**如果你看到这里：那么，恭喜你花生🥜，你发现的盲点！**\n很显然，mergeSort内部的排序依赖了参与排序的对象的两两比较（dest[]是对象数组）for循环最里层做的事情是将对象转换为Compareble类型并调用其compareTo()方法，所以需要被比较的对象实现Comparable接口。感兴趣的话可以搜一下模板方法设计模式，这算其中一个典型的应用，个人认为并不属于纯接口技术的编程题。\n# Comparable接口compareTo方法的总结\n关于升序还是降序的问题，总结如下：\n* 正序\n\n```java\n    @Override\n    public int compareTo(Test o) {\n        return this.i - o.i;\n```\n* 逆序\n\n```java\n    @Override\n    public int compareTo(Test o) {\n        return  o.i-this.i ;\n\n```\n","source":"_posts/Java学习之路(37).md","raw":"---\ntitle:  Java学习之路--java.lang.comparable接口实战\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-3-16\n\n---\n# 代码展示\n```java\n/**\n * @author 葛宇\n * 实现java.lang.comparable接口并测试Array.sort()\n */\nclass Employee implements java.lang.Comparable<Employee>{\n\n\tprivate int id;\n\tprivate int salary;\n\tprivate String name;\n\t\n\tpublic Employee(int id,int salary,String name){\n\t\tthis.id = id;\n\t\tthis.salary = salary;\n\t\tthis.name = name;\n\t}\n\tpublic int getId() {\n\t\treturn id;\n\t}\n\tpublic int getSalary() {\n\t\treturn salary;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n\t@Override\n\tpublic int compareTo(Employee o) {\n\t\tif(name.compareTo(o.name)!=0) {\n\t\t\treturn name.compareTo(o.name);\n\t\t}else {\n\t\tif (salary<o.salary) \n\t\t\treturn - 1 ;  \n\t\tif (salary>o.salary)  \n\t\t\treturn 1 ;  \n\t\treturn 0 ;  \t\t\t      \n\t\t}\n\t}\n}\n\nclass TestClass{\n\tpublic static void main(String[] args) {\n\t\t Employee[] staff =  new Employee[ 4 ];  \n\t        staff[ 0 ] =  new Employee(001,5000,\"harry\");  \n\t        staff[ 1 ] =  new Employee(002,3000,\"carl \");  \n\t        staff[ 2 ] =  new Employee(003,4000,\"tony \");  \n\t        staff[ 3 ] =  new Employee(004,6000,\"carl \");  \n\t\t\n\t    java.util.Arrays.sort(staff);\n\t\tfor(Employee e: staff)  \n        System.out.println( \"id=\" +e.getId()+ \"  name=\" +e.getName()+  \"  salary=\" +e.getSalary());  \n\t}  \n}\n```\n**输出结果：**\n![java](https://s3.bmp.ovh/imgs/2022/09/05/8939f59ba6ee01f6.png \"运行结果\")\n\n**上述代码是某次Java作业，题目描述如下：**\n> 编写员工Employee类，包含id、姓名、工资salary等属性。令Employee类实现java.lang.comparable接口，并实现compareTo（）方法，制定比较规则。在测试类中创建几个Employee对象，利用java.util.Array类中的方法对其进行排序并打印输出结果。PS:关于比较的规则，建议分别按照name和salary进行升序排列。\n\n**题目出自接口技术一章，实则难点不在接口技术，Java新手在阅读上述代码往往会感到困惑，搞不懂为何对compareTo的自定义实现会影响sort方法的效果？**\n\n# Array.Sort()\n>即使是小白，在阅读完代码后，也应该会产生这样的猜测：line48的java.util.Arrays.sort(staff);的sort方法内会不会用到了compareTo方法了呢？\n\n很好的猜想，让我们进入sort（）内部看看：\n![java](https://s3.bmp.ovh/imgs/2022/09/05/e82a45de2e7c9fd7.png \"内部实现\")\n进入sort（）内部实现后根据关键信息我们又能很轻易的追溯到mergeSort方法，那就继续进入mergeSort（）的内部实现：\n![java](https://s3.bmp.ovh/imgs/2022/09/05/6e1c7b20b16b9dd9.png \"内部实现\")\n**如果你看到这里：那么，恭喜你花生🥜，你发现的盲点！**\n很显然，mergeSort内部的排序依赖了参与排序的对象的两两比较（dest[]是对象数组）for循环最里层做的事情是将对象转换为Compareble类型并调用其compareTo()方法，所以需要被比较的对象实现Comparable接口。感兴趣的话可以搜一下模板方法设计模式，这算其中一个典型的应用，个人认为并不属于纯接口技术的编程题。\n# Comparable接口compareTo方法的总结\n关于升序还是降序的问题，总结如下：\n* 正序\n\n```java\n    @Override\n    public int compareTo(Test o) {\n        return this.i - o.i;\n```\n* 逆序\n\n```java\n    @Override\n    public int compareTo(Test o) {\n        return  o.i-this.i ;\n\n```\n","slug":"Java学习之路(37)","published":1,"updated":"2022-09-05T05:20:55.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb74003ya8vwlndpu9rw","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"代码展示\"><a href=\"#代码展示\" class=\"headerlink\" title=\"代码展示\"></a>代码展示</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现java.lang.comparable接口并测试Array.sort()</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">lang</span>.<span class=\"title\">Comparable</span>&lt;<span class=\"title\">Employee</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> salary;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Employee</span><span class=\"params\">(<span class=\"keyword\">int</span> id,<span class=\"keyword\">int</span> salary,String name)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.salary = salary;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSalary</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> salary;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Employee o)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(name.compareTo(o.name)!=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> name.compareTo(o.name);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (salary&lt;o.salary) </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> - <span class=\"number\">1</span> ;  </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (salary&gt;o.salary)  </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span> ;  </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span> ;  \t\t\t      </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClass</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t Employee[] staff =  <span class=\"keyword\">new</span> Employee[ <span class=\"number\">4</span> ];  </span><br><span class=\"line\">\t        staff[ <span class=\"number\">0</span> ] =  <span class=\"keyword\">new</span> Employee(<span class=\"number\">001</span>,<span class=\"number\">5000</span>,<span class=\"string\">\"harry\"</span>);  </span><br><span class=\"line\">\t        staff[ <span class=\"number\">1</span> ] =  <span class=\"keyword\">new</span> Employee(<span class=\"number\">002</span>,<span class=\"number\">3000</span>,<span class=\"string\">\"carl \"</span>);  </span><br><span class=\"line\">\t        staff[ <span class=\"number\">2</span> ] =  <span class=\"keyword\">new</span> Employee(<span class=\"number\">003</span>,<span class=\"number\">4000</span>,<span class=\"string\">\"tony \"</span>);  </span><br><span class=\"line\">\t        staff[ <span class=\"number\">3</span> ] =  <span class=\"keyword\">new</span> Employee(<span class=\"number\">004</span>,<span class=\"number\">6000</span>,<span class=\"string\">\"carl \"</span>);  </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t    java.util.Arrays.sort(staff);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Employee e: staff)  </span><br><span class=\"line\">        System.out.println( <span class=\"string\">\"id=\"</span> +e.getId()+ <span class=\"string\">\"  name=\"</span> +e.getName()+  <span class=\"string\">\"  salary=\"</span> +e.getSalary());  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出结果：</strong><br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/8939f59ba6ee01f6.png\" alt=\"java\" title=\"运行结果\"></p>\n<p><strong>上述代码是某次Java作业，题目描述如下：</strong></p>\n<blockquote>\n<p>编写员工Employee类，包含id、姓名、工资salary等属性。令Employee类实现java.lang.comparable接口，并实现compareTo（）方法，制定比较规则。在测试类中创建几个Employee对象，利用java.util.Array类中的方法对其进行排序并打印输出结果。PS:关于比较的规则，建议分别按照name和salary进行升序排列。</p>\n</blockquote>\n<p><strong>题目出自接口技术一章，实则难点不在接口技术，Java新手在阅读上述代码往往会感到困惑，搞不懂为何对compareTo的自定义实现会影响sort方法的效果？</strong></p>\n<h1 id=\"Array-Sort\"><a href=\"#Array-Sort\" class=\"headerlink\" title=\"Array.Sort()\"></a>Array.Sort()</h1><blockquote>\n<p>即使是小白，在阅读完代码后，也应该会产生这样的猜测：line48的java.util.Arrays.sort(staff);的sort方法内会不会用到了compareTo方法了呢？</p>\n</blockquote>\n<p>很好的猜想，让我们进入sort（）内部看看：<br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/e82a45de2e7c9fd7.png\" alt=\"java\" title=\"内部实现\"><br>进入sort（）内部实现后根据关键信息我们又能很轻易的追溯到mergeSort方法，那就继续进入mergeSort（）的内部实现：<br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/6e1c7b20b16b9dd9.png\" alt=\"java\" title=\"内部实现\"><br><strong>如果你看到这里：那么，恭喜你花生🥜，你发现的盲点！</strong><br>很显然，mergeSort内部的排序依赖了参与排序的对象的两两比较（dest[]是对象数组）for循环最里层做的事情是将对象转换为Compareble类型并调用其compareTo()方法，所以需要被比较的对象实现Comparable接口。感兴趣的话可以搜一下模板方法设计模式，这算其中一个典型的应用，个人认为并不属于纯接口技术的编程题。</p>\n<h1 id=\"Comparable接口compareTo方法的总结\"><a href=\"#Comparable接口compareTo方法的总结\" class=\"headerlink\" title=\"Comparable接口compareTo方法的总结\"></a>Comparable接口compareTo方法的总结</h1><p>关于升序还是降序的问题，总结如下：</p>\n<ul>\n<li>正序</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Test o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.i - o.i;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>逆序</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Test o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  o.i-<span class=\"keyword\">this</span>.i ;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"代码展示\"><a href=\"#代码展示\" class=\"headerlink\" title=\"代码展示\"></a>代码展示</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现java.lang.comparable接口并测试Array.sort()</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span> <span class=\"keyword\">implements</span> <span class=\"title\">java</span>.<span class=\"title\">lang</span>.<span class=\"title\">Comparable</span>&lt;<span class=\"title\">Employee</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> salary;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Employee</span><span class=\"params\">(<span class=\"keyword\">int</span> id,<span class=\"keyword\">int</span> salary,String name)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.salary = salary;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSalary</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> salary;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Employee o)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(name.compareTo(o.name)!=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> name.compareTo(o.name);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (salary&lt;o.salary) </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> - <span class=\"number\">1</span> ;  </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (salary&gt;o.salary)  </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span> ;  </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span> ;  \t\t\t      </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClass</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t Employee[] staff =  <span class=\"keyword\">new</span> Employee[ <span class=\"number\">4</span> ];  </span><br><span class=\"line\">\t        staff[ <span class=\"number\">0</span> ] =  <span class=\"keyword\">new</span> Employee(<span class=\"number\">001</span>,<span class=\"number\">5000</span>,<span class=\"string\">\"harry\"</span>);  </span><br><span class=\"line\">\t        staff[ <span class=\"number\">1</span> ] =  <span class=\"keyword\">new</span> Employee(<span class=\"number\">002</span>,<span class=\"number\">3000</span>,<span class=\"string\">\"carl \"</span>);  </span><br><span class=\"line\">\t        staff[ <span class=\"number\">2</span> ] =  <span class=\"keyword\">new</span> Employee(<span class=\"number\">003</span>,<span class=\"number\">4000</span>,<span class=\"string\">\"tony \"</span>);  </span><br><span class=\"line\">\t        staff[ <span class=\"number\">3</span> ] =  <span class=\"keyword\">new</span> Employee(<span class=\"number\">004</span>,<span class=\"number\">6000</span>,<span class=\"string\">\"carl \"</span>);  </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t    java.util.Arrays.sort(staff);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(Employee e: staff)  </span><br><span class=\"line\">        System.out.println( <span class=\"string\">\"id=\"</span> +e.getId()+ <span class=\"string\">\"  name=\"</span> +e.getName()+  <span class=\"string\">\"  salary=\"</span> +e.getSalary());  </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出结果：</strong><br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/8939f59ba6ee01f6.png\" alt=\"java\" title=\"运行结果\"></p>\n<p><strong>上述代码是某次Java作业，题目描述如下：</strong></p>\n<blockquote>\n<p>编写员工Employee类，包含id、姓名、工资salary等属性。令Employee类实现java.lang.comparable接口，并实现compareTo（）方法，制定比较规则。在测试类中创建几个Employee对象，利用java.util.Array类中的方法对其进行排序并打印输出结果。PS:关于比较的规则，建议分别按照name和salary进行升序排列。</p>\n</blockquote>\n<p><strong>题目出自接口技术一章，实则难点不在接口技术，Java新手在阅读上述代码往往会感到困惑，搞不懂为何对compareTo的自定义实现会影响sort方法的效果？</strong></p>\n<h1 id=\"Array-Sort\"><a href=\"#Array-Sort\" class=\"headerlink\" title=\"Array.Sort()\"></a>Array.Sort()</h1><blockquote>\n<p>即使是小白，在阅读完代码后，也应该会产生这样的猜测：line48的java.util.Arrays.sort(staff);的sort方法内会不会用到了compareTo方法了呢？</p>\n</blockquote>\n<p>很好的猜想，让我们进入sort（）内部看看：<br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/e82a45de2e7c9fd7.png\" alt=\"java\" title=\"内部实现\"><br>进入sort（）内部实现后根据关键信息我们又能很轻易的追溯到mergeSort方法，那就继续进入mergeSort（）的内部实现：<br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/6e1c7b20b16b9dd9.png\" alt=\"java\" title=\"内部实现\"><br><strong>如果你看到这里：那么，恭喜你花生🥜，你发现的盲点！</strong><br>很显然，mergeSort内部的排序依赖了参与排序的对象的两两比较（dest[]是对象数组）for循环最里层做的事情是将对象转换为Compareble类型并调用其compareTo()方法，所以需要被比较的对象实现Comparable接口。感兴趣的话可以搜一下模板方法设计模式，这算其中一个典型的应用，个人认为并不属于纯接口技术的编程题。</p>\n<h1 id=\"Comparable接口compareTo方法的总结\"><a href=\"#Comparable接口compareTo方法的总结\" class=\"headerlink\" title=\"Comparable接口compareTo方法的总结\"></a>Comparable接口compareTo方法的总结</h1><p>关于升序还是降序的问题，总结如下：</p>\n<ul>\n<li>正序</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Test o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.i - o.i;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>逆序</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Test o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  o.i-<span class=\"keyword\">this</span>.i ;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java自增自减运算符天坑笔试题","date":"2020-02-18T16:00:00.000Z","_content":"**问：下面程序运行的结果是什么？**\n---\n```java\nint count = 0;\nfor(int i = 0; i < 100; i++)\n    count = count++;\nSystem.out.println(\"count = \" + count);\n```\n**答：count = 0**\n---\n首先 count++ 是一个有返回值的表达式，返回值是 count 自加前面的值，java 对自加处理的流程是先把 count 的值（不是引用），拷贝到一个临时变量区，然后对 count 变量加 1，接着返回临时变量区的值。\n\n所以上面代码中第一次循环执行的步骤是 JVM 把 count 的值（0）拷贝到临时变量区，然后 count 值加 1，这时 count 的值是 1，接着返回临时变量区的值（值还是 0），最后赋值给 count，此时 count 值被重置成 0。所以上面代码语句，count = count++可以按照如下代码来理解：\n```java\nint autoAdd(int count) {\n    int temp = count;\n    count = coutn + 1;\n    return temp;\n}\n```\n第一次循环后 count 的值还是 0，其他 99 次的循环也是一样，最终导致 count 的值始终没变，任然保持最初的状态，如果想要打印 100，则把语句count = count++改为count++即可。**不过这个问题在不同的语言环境中是不一样的，在 c++ 中count = count++与count++是等效的，但在 Java 中是不等效的。**\n\n\n","source":"_posts/Java学习之路(38).md","raw":"---\ntitle:  Java自增自减运算符天坑笔试题\ntags: [编程,学习,Java,坑]\ncategories: [Java]\ndate: 2020-2-19\n\n---\n**问：下面程序运行的结果是什么？**\n---\n```java\nint count = 0;\nfor(int i = 0; i < 100; i++)\n    count = count++;\nSystem.out.println(\"count = \" + count);\n```\n**答：count = 0**\n---\n首先 count++ 是一个有返回值的表达式，返回值是 count 自加前面的值，java 对自加处理的流程是先把 count 的值（不是引用），拷贝到一个临时变量区，然后对 count 变量加 1，接着返回临时变量区的值。\n\n所以上面代码中第一次循环执行的步骤是 JVM 把 count 的值（0）拷贝到临时变量区，然后 count 值加 1，这时 count 的值是 1，接着返回临时变量区的值（值还是 0），最后赋值给 count，此时 count 值被重置成 0。所以上面代码语句，count = count++可以按照如下代码来理解：\n```java\nint autoAdd(int count) {\n    int temp = count;\n    count = coutn + 1;\n    return temp;\n}\n```\n第一次循环后 count 的值还是 0，其他 99 次的循环也是一样，最终导致 count 的值始终没变，任然保持最初的状态，如果想要打印 100，则把语句count = count++改为count++即可。**不过这个问题在不同的语言环境中是不一样的，在 c++ 中count = count++与count++是等效的，但在 Java 中是不等效的。**\n\n\n","slug":"Java学习之路(38)","published":1,"updated":"2020-03-16T09:30:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxb770041a8vw5jd8gfhl","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"问：下面程序运行的结果是什么？\"><a href=\"#问：下面程序运行的结果是什么？\" class=\"headerlink\" title=\"问：下面程序运行的结果是什么？\"></a><strong>问：下面程序运行的结果是什么？</strong></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">    count = count++;</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"count = \"</span> + count);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"答：count-0\"><a href=\"#答：count-0\" class=\"headerlink\" title=\"答：count = 0\"></a><strong>答：count = 0</strong></h2><p>首先 count++ 是一个有返回值的表达式，返回值是 count 自加前面的值，java 对自加处理的流程是先把 count 的值（不是引用），拷贝到一个临时变量区，然后对 count 变量加 1，接着返回临时变量区的值。</p>\n<p>所以上面代码中第一次循环执行的步骤是 JVM 把 count 的值（0）拷贝到临时变量区，然后 count 值加 1，这时 count 的值是 1，接着返回临时变量区的值（值还是 0），最后赋值给 count，此时 count 值被重置成 0。所以上面代码语句，count = count++可以按照如下代码来理解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">autoAdd</span><span class=\"params\">(<span class=\"keyword\">int</span> count)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp = count;</span><br><span class=\"line\">    count = coutn + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第一次循环后 count 的值还是 0，其他 99 次的循环也是一样，最终导致 count 的值始终没变，任然保持最初的状态，如果想要打印 100，则把语句count = count++改为count++即可。<strong>不过这个问题在不同的语言环境中是不一样的，在 c++ 中count = count++与count++是等效的，但在 Java 中是不等效的。</strong></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h2 id=\"问：下面程序运行的结果是什么？\"><a href=\"#问：下面程序运行的结果是什么？\" class=\"headerlink\" title=\"问：下面程序运行的结果是什么？\"></a><strong>问：下面程序运行的结果是什么？</strong></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++)</span><br><span class=\"line\">    count = count++;</span><br><span class=\"line\">System.out.println(<span class=\"string\">\"count = \"</span> + count);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"答：count-0\"><a href=\"#答：count-0\" class=\"headerlink\" title=\"答：count = 0\"></a><strong>答：count = 0</strong></h2><p>首先 count++ 是一个有返回值的表达式，返回值是 count 自加前面的值，java 对自加处理的流程是先把 count 的值（不是引用），拷贝到一个临时变量区，然后对 count 变量加 1，接着返回临时变量区的值。</p>\n<p>所以上面代码中第一次循环执行的步骤是 JVM 把 count 的值（0）拷贝到临时变量区，然后 count 值加 1，这时 count 的值是 1，接着返回临时变量区的值（值还是 0），最后赋值给 count，此时 count 值被重置成 0。所以上面代码语句，count = count++可以按照如下代码来理解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">autoAdd</span><span class=\"params\">(<span class=\"keyword\">int</span> count)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> temp = count;</span><br><span class=\"line\">    count = coutn + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第一次循环后 count 的值还是 0，其他 99 次的循环也是一样，最终导致 count 的值始终没变，任然保持最初的状态，如果想要打印 100，则把语句count = count++改为count++即可。<strong>不过这个问题在不同的语言环境中是不一样的，在 c++ 中count = count++与count++是等效的，但在 Java 中是不等效的。</strong></p>\n"},{"title":"Java学习之路--String类初识","date":"2020-02-18T16:00:00.000Z","_content":"```java\npackage com.github.nuistgy.teststring;\n/**\n * 测试字符串类\n * @author 葛宇\n *\n */\npublic class TestString {\n\tpublic static void main(String[] args) {\n\t\tString str = \"abc\";\n\t\tString str1 = new String(\"def\");\n\t\tString str2 = \"abc\"+\"def\";\n\t\tString str3 = \"1\"+1;\n\t\tSystem.out.println(str3);\n\t\t\n\t\t///////////////////////////////////\n\t\t\n\t\tString str4 = \"xyz\";\n\t\tString str5 = \"xyz\";\n\t\tString str6 = new String(\"xyz\");\n\t\tSystem.out.println(str4==str5);\t\t\t\t//输出true\n\t\tSystem.out.println(str5==str6);\t\t\t\t//输出false\n\t\tSystem.out.println(str5.equals(str6));\t\t//输出true\n\t}\n}\n\n```\n> 关于String类既没什么好讲的又有太多东西可讲，因为相关知识点很多、很细小，建议适合配合document使用。博客里仅推送一些必要的以及学习中应值得注意的知识点，后续也会进行补充。\n\n关于上述代码，注意三点：“+”号的作用是充当字符串连接符；str4和str5均指向字符串常量池的同一个字符串“xyz”，但是new String得到的字符串对象是一个全新的，故“==”判别为false；equals用来对字符串内容作比较，==是对地址做比较。\n\n\n","source":"_posts/Java学习之路(39).md","raw":"---\ntitle:  Java学习之路--String类初识\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-2-19\n\n---\n```java\npackage com.github.nuistgy.teststring;\n/**\n * 测试字符串类\n * @author 葛宇\n *\n */\npublic class TestString {\n\tpublic static void main(String[] args) {\n\t\tString str = \"abc\";\n\t\tString str1 = new String(\"def\");\n\t\tString str2 = \"abc\"+\"def\";\n\t\tString str3 = \"1\"+1;\n\t\tSystem.out.println(str3);\n\t\t\n\t\t///////////////////////////////////\n\t\t\n\t\tString str4 = \"xyz\";\n\t\tString str5 = \"xyz\";\n\t\tString str6 = new String(\"xyz\");\n\t\tSystem.out.println(str4==str5);\t\t\t\t//输出true\n\t\tSystem.out.println(str5==str6);\t\t\t\t//输出false\n\t\tSystem.out.println(str5.equals(str6));\t\t//输出true\n\t}\n}\n\n```\n> 关于String类既没什么好讲的又有太多东西可讲，因为相关知识点很多、很细小，建议适合配合document使用。博客里仅推送一些必要的以及学习中应值得注意的知识点，后续也会进行补充。\n\n关于上述代码，注意三点：“+”号的作用是充当字符串连接符；str4和str5均指向字符串常量池的同一个字符串“xyz”，但是new String得到的字符串对象是一个全新的，故“==”判别为false；equals用来对字符串内容作比较，==是对地址做比较。\n\n\n","slug":"Java学习之路(39)","published":1,"updated":"2022-09-23T13:17:45.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdjd0060a8vw77g5t800","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.github.nuistgy.teststring;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试字符串类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestString</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tString str = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">\t\tString str1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"def\"</span>);</span><br><span class=\"line\">\t\tString str2 = <span class=\"string\">\"abc\"</span>+<span class=\"string\">\"def\"</span>;</span><br><span class=\"line\">\t\tString str3 = <span class=\"string\">\"1\"</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tSystem.out.println(str3);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">///////////////////////////////////</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString str4 = <span class=\"string\">\"xyz\"</span>;</span><br><span class=\"line\">\t\tString str5 = <span class=\"string\">\"xyz\"</span>;</span><br><span class=\"line\">\t\tString str6 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"xyz\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(str4==str5);\t\t\t\t<span class=\"comment\">//输出true</span></span><br><span class=\"line\">\t\tSystem.out.println(str5==str6);\t\t\t\t<span class=\"comment\">//输出false</span></span><br><span class=\"line\">\t\tSystem.out.println(str5.equals(str6));\t\t<span class=\"comment\">//输出true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>关于String类既没什么好讲的又有太多东西可讲，因为相关知识点很多、很细小，建议适合配合document使用。博客里仅推送一些必要的以及学习中应值得注意的知识点，后续也会进行补充。</p>\n</blockquote>\n<p>关于上述代码，注意三点：“+”号的作用是充当字符串连接符；str4和str5均指向字符串常量池的同一个字符串“xyz”，但是new String得到的字符串对象是一个全新的，故“==”判别为false；equals用来对字符串内容作比较，==是对地址做比较。</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.github.nuistgy.teststring;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试字符串类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestString</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tString str = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">\t\tString str1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"def\"</span>);</span><br><span class=\"line\">\t\tString str2 = <span class=\"string\">\"abc\"</span>+<span class=\"string\">\"def\"</span>;</span><br><span class=\"line\">\t\tString str3 = <span class=\"string\">\"1\"</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tSystem.out.println(str3);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">///////////////////////////////////</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString str4 = <span class=\"string\">\"xyz\"</span>;</span><br><span class=\"line\">\t\tString str5 = <span class=\"string\">\"xyz\"</span>;</span><br><span class=\"line\">\t\tString str6 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"xyz\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(str4==str5);\t\t\t\t<span class=\"comment\">//输出true</span></span><br><span class=\"line\">\t\tSystem.out.println(str5==str6);\t\t\t\t<span class=\"comment\">//输出false</span></span><br><span class=\"line\">\t\tSystem.out.println(str5.equals(str6));\t\t<span class=\"comment\">//输出true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>关于String类既没什么好讲的又有太多东西可讲，因为相关知识点很多、很细小，建议适合配合document使用。博客里仅推送一些必要的以及学习中应值得注意的知识点，后续也会进行补充。</p>\n</blockquote>\n<p>关于上述代码，注意三点：“+”号的作用是充当字符串连接符；str4和str5均指向字符串常量池的同一个字符串“xyz”，但是new String得到的字符串对象是一个全新的，故“==”判别为false；equals用来对字符串内容作比较，==是对地址做比较。</p>\n"},{"title":"Java学习之路--变量","date":"2020-01-19T16:00:00.000Z","_content":"```java\n/**\n * Java的变量\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestVariable {\n\tpublic static void main(String[] args) {\n\t\tint a;\n\t\tlong b;\n\t\tdouble c;\n\t\ta=1;\n\t\tb=2;\n\t\tc=3;\n\t\n\t\tint i,j,k;\n\t\ti=1;\n\t\tj=2;\n\t\tk=3;\n\t\ti=j=k=4;\n\t    //i=5,j=6,k=7; 这种赋值Java只允许在变量定义时候进行\n\t\t\n\t\tint n=8,m=9;\n\t}\n}\n\n```\n","source":"_posts/Java学习之路(4).md","raw":"---\ntitle:  Java学习之路--变量\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-20\n\n---\n```java\n/**\n * Java的变量\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestVariable {\n\tpublic static void main(String[] args) {\n\t\tint a;\n\t\tlong b;\n\t\tdouble c;\n\t\ta=1;\n\t\tb=2;\n\t\tc=3;\n\t\n\t\tint i,j,k;\n\t\ti=1;\n\t\tj=2;\n\t\tk=3;\n\t\ti=j=k=4;\n\t    //i=5,j=6,k=7; 这种赋值Java只允许在变量定义时候进行\n\t\t\n\t\tint n=8,m=9;\n\t}\n}\n\n```\n","slug":"Java学习之路(4)","published":1,"updated":"2020-02-28T05:52:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdjg0062a8vwbadpkpjt","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Java的变量</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestVariable</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> b;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> c;</span><br><span class=\"line\">\t\ta=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tb=<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tc=<span class=\"number\">3</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i,j,k;</span><br><span class=\"line\">\t\ti=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tj=<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tk=<span class=\"number\">3</span>;</span><br><span class=\"line\">\t\ti=j=k=<span class=\"number\">4</span>;</span><br><span class=\"line\">\t    <span class=\"comment\">//i=5,j=6,k=7; 这种赋值Java只允许在变量定义时候进行</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> n=<span class=\"number\">8</span>,m=<span class=\"number\">9</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Java的变量</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestVariable</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> b;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> c;</span><br><span class=\"line\">\t\ta=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tb=<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tc=<span class=\"number\">3</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i,j,k;</span><br><span class=\"line\">\t\ti=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tj=<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tk=<span class=\"number\">3</span>;</span><br><span class=\"line\">\t\ti=j=k=<span class=\"number\">4</span>;</span><br><span class=\"line\">\t    <span class=\"comment\">//i=5,j=6,k=7; 这种赋值Java只允许在变量定义时候进行</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> n=<span class=\"number\">8</span>,m=<span class=\"number\">9</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--初始化顺序","date":"2022-10-24T16:00:00.000Z","_content":"[![xROaQA.png](https://s1.ax1x.com/2022/10/25/xROaQA.png)](https://imgse.com/i/xROaQA)\n","source":"_posts/Java学习之路(40).md","raw":"---\ntitle:  Java学习之路--初始化顺序\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2022-10-25\n\n---\n[![xROaQA.png](https://s1.ax1x.com/2022/10/25/xROaQA.png)](https://imgse.com/i/xROaQA)\n","slug":"Java学习之路(40)","published":1,"updated":"2022-10-25T11:41:48.892Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdjk0065a8vw7pkds9wd","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p><a href=\"https://imgse.com/i/xROaQA\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2022/10/25/xROaQA.png\" alt=\"xROaQA.png\"></a></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<p><a href=\"https://imgse.com/i/xROaQA\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2022/10/25/xROaQA.png\" alt=\"xROaQA.png\"></a></p>\n"},{"title":"Java学习之路--接口学习","date":"2022-10-29T16:00:00.000Z","_content":"[![xI7rNV.png](https://s1.ax1x.com/2022/10/30/xI7rNV.png)](https://imgse.com/i/xI7rNV)\n\n说明：接口中的字段默认为 **static+final** 修饰\n补充：\n- 关于字段--> only **public, static & final** are permitted Java(33554775)\n- 接口的方法默认为**public**类型且只能为**public**类型\n- 接口可以声明为**public**或者不声明(**包访问**)\n- JDK9中接口的**default方法和static方法**可以为**private**\n\n---\n\n**2022/10/31 更新**\n\n[![xTuYsU.png](https://s1.ax1x.com/2022/10/31/xTuYsU.png)](https://imgse.com/i/xTuYsU)\n\n**2022/11/1 更新**\n\n[![xTWTIS.png](https://s1.ax1x.com/2022/11/01/xTWTIS.png)](https://imgse.com/i/xTWTIS)","source":"_posts/Java学习之路(41).md","raw":"---\ntitle:  Java学习之路--接口学习\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2022-10-30\n\n---\n[![xI7rNV.png](https://s1.ax1x.com/2022/10/30/xI7rNV.png)](https://imgse.com/i/xI7rNV)\n\n说明：接口中的字段默认为 **static+final** 修饰\n补充：\n- 关于字段--> only **public, static & final** are permitted Java(33554775)\n- 接口的方法默认为**public**类型且只能为**public**类型\n- 接口可以声明为**public**或者不声明(**包访问**)\n- JDK9中接口的**default方法和static方法**可以为**private**\n\n---\n\n**2022/10/31 更新**\n\n[![xTuYsU.png](https://s1.ax1x.com/2022/10/31/xTuYsU.png)](https://imgse.com/i/xTuYsU)\n\n**2022/11/1 更新**\n\n[![xTWTIS.png](https://s1.ax1x.com/2022/11/01/xTWTIS.png)](https://imgse.com/i/xTWTIS)","slug":"Java学习之路(41)","published":1,"updated":"2022-11-01T02:27:16.100Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdju0068a8vw6pkm7q7p","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p><a href=\"https://imgse.com/i/xI7rNV\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2022/10/30/xI7rNV.png\" alt=\"xI7rNV.png\"></a></p>\n<p>说明：接口中的字段默认为 <strong>static+final</strong> 修饰<br>补充：</p>\n<ul>\n<li>关于字段–&gt; only <strong>public, static &amp; final</strong> are permitted Java(33554775)</li>\n<li>接口的方法默认为<strong>public</strong>类型且只能为<strong>public</strong>类型</li>\n<li>接口可以声明为<strong>public</strong>或者不声明(<strong>包访问</strong>)</li>\n<li>JDK9中接口的<strong>default方法和static方法</strong>可以为<strong>private</strong></li>\n</ul>\n<hr>\n<p><strong>2022/10/31 更新</strong></p>\n<p><a href=\"https://imgse.com/i/xTuYsU\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2022/10/31/xTuYsU.png\" alt=\"xTuYsU.png\"></a></p>\n<p><strong>2022/11/1 更新</strong></p>\n<p><a href=\"https://imgse.com/i/xTWTIS\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2022/11/01/xTWTIS.png\" alt=\"xTWTIS.png\"></a></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<p><a href=\"https://imgse.com/i/xI7rNV\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2022/10/30/xI7rNV.png\" alt=\"xI7rNV.png\"></a></p>\n<p>说明：接口中的字段默认为 <strong>static+final</strong> 修饰<br>补充：</p>\n<ul>\n<li>关于字段–&gt; only <strong>public, static &amp; final</strong> are permitted Java(33554775)</li>\n<li>接口的方法默认为<strong>public</strong>类型且只能为<strong>public</strong>类型</li>\n<li>接口可以声明为<strong>public</strong>或者不声明(<strong>包访问</strong>)</li>\n<li>JDK9中接口的<strong>default方法和static方法</strong>可以为<strong>private</strong></li>\n</ul>\n<hr>\n<p><strong>2022/10/31 更新</strong></p>\n<p><a href=\"https://imgse.com/i/xTuYsU\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2022/10/31/xTuYsU.png\" alt=\"xTuYsU.png\"></a></p>\n<p><strong>2022/11/1 更新</strong></p>\n<p><a href=\"https://imgse.com/i/xTWTIS\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2022/11/01/xTWTIS.png\" alt=\"xTWTIS.png\"></a></p>\n"},{"title":"Java学习之路--字符类型和布尔类型","date":"2020-01-19T16:00:00.000Z","_content":"```java\n/**\n * Java字符类型和布尔类型\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestPrimitiveDateType {\n\tpublic static void main(String[] args) {\n\t\tchar a = 'A';\n\t\tchar b =  '中';\n\t\tchar c = '1';\n\t\t/*\n\t\t * 对于字符类型数据，Java使用UNICODE编码表示\n\t\t * 每个字符占2字节 \n\t\t * 字符用' '  字符串用\" \"\n\t   */\n\t\t\n\t  //转义字符\n\t\tSystem.out.println('a'+'b');  //输出195\n\t\tSystem.out.println(\"\"+'a'+'b');  //输出ab\n\t\tSystem.out.println(\"\"+'a'+'\\''+'b');  //输出a'b\n\t\t\n\t  //测试布尔类型\n\t  //布尔类型数据占一位而不是一字节，且不可以用'0'或'1'\n\t\tboolean man = true;\n\t\tboolean woman = false;\n\t\tif(man) {\n\t\t\t//...\n\t\t}\n\t}\n}\n\n\n```\n","source":"_posts/Java学习之路(5).md","raw":"---\ntitle:  Java学习之路--字符类型和布尔类型\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-20\n\n---\n```java\n/**\n * Java字符类型和布尔类型\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestPrimitiveDateType {\n\tpublic static void main(String[] args) {\n\t\tchar a = 'A';\n\t\tchar b =  '中';\n\t\tchar c = '1';\n\t\t/*\n\t\t * 对于字符类型数据，Java使用UNICODE编码表示\n\t\t * 每个字符占2字节 \n\t\t * 字符用' '  字符串用\" \"\n\t   */\n\t\t\n\t  //转义字符\n\t\tSystem.out.println('a'+'b');  //输出195\n\t\tSystem.out.println(\"\"+'a'+'b');  //输出ab\n\t\tSystem.out.println(\"\"+'a'+'\\''+'b');  //输出a'b\n\t\t\n\t  //测试布尔类型\n\t  //布尔类型数据占一位而不是一字节，且不可以用'0'或'1'\n\t\tboolean man = true;\n\t\tboolean woman = false;\n\t\tif(man) {\n\t\t\t//...\n\t\t}\n\t}\n}\n\n\n```\n","slug":"Java学习之路(5)","published":1,"updated":"2020-02-28T05:52:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdjw006ba8vwrzzgovwg","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Java字符类型和布尔类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPrimitiveDateType</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> a = <span class=\"string\">'A'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> b =  <span class=\"string\">'中'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> c = <span class=\"string\">'1'</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 对于字符类型数据，Java使用UNICODE编码表示</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 每个字符占2字节 </span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 字符用' '  字符串用\" \"</span></span><br><span class=\"line\"><span class=\"comment\">\t   */</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t  <span class=\"comment\">//转义字符</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">'a'</span>+<span class=\"string\">'b'</span>);  <span class=\"comment\">//输出195</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"\"</span>+<span class=\"string\">'a'</span>+<span class=\"string\">'b'</span>);  <span class=\"comment\">//输出ab</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"\"</span>+<span class=\"string\">'a'</span>+<span class=\"string\">'\\''</span>+<span class=\"string\">'b'</span>);  <span class=\"comment\">//输出a'b</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t  <span class=\"comment\">//测试布尔类型</span></span><br><span class=\"line\">\t  <span class=\"comment\">//布尔类型数据占一位而不是一字节，且不可以用'0'或'1'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> man = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> woman = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(man) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//...</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Java字符类型和布尔类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestPrimitiveDateType</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> a = <span class=\"string\">'A'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> b =  <span class=\"string\">'中'</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> c = <span class=\"string\">'1'</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 对于字符类型数据，Java使用UNICODE编码表示</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 每个字符占2字节 </span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 字符用' '  字符串用\" \"</span></span><br><span class=\"line\"><span class=\"comment\">\t   */</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t  <span class=\"comment\">//转义字符</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">'a'</span>+<span class=\"string\">'b'</span>);  <span class=\"comment\">//输出195</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"\"</span>+<span class=\"string\">'a'</span>+<span class=\"string\">'b'</span>);  <span class=\"comment\">//输出ab</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"\"</span>+<span class=\"string\">'a'</span>+<span class=\"string\">'\\''</span>+<span class=\"string\">'b'</span>);  <span class=\"comment\">//输出a'b</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t  <span class=\"comment\">//测试布尔类型</span></span><br><span class=\"line\">\t  <span class=\"comment\">//布尔类型数据占一位而不是一字节，且不可以用'0'或'1'</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> man = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> woman = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(man) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//...</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--类型转换","date":"2020-01-21T16:00:00.000Z","_content":"```java\n/**\n * 类型转换的误区\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestTypeConvertError {\n\tpublic static void main(String[] args) {\n\t\t\n\t\tint a = 1000000000;\t\t\t//10亿\n\t\tint b = 20;\n\t\t\n\t\tint ans1 = a*b;\n\t\tSystem.out.println(ans1);\t//表达式范围越界\n\t\t\n\t\tlong ans2 = a*b;\n\t\tSystem.out.println(ans2);\t//表达式范围越界\n\t\t\n\t\tlong ans3 = a*((long)b);\n\t\tSystem.out.print(ans3); \t//正确输出\n\t}\n}\n\n```\n","source":"_posts/Java学习之路(6).md","raw":"---\ntitle:  Java学习之路--类型转换\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-22\n\n---\n```java\n/**\n * 类型转换的误区\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestTypeConvertError {\n\tpublic static void main(String[] args) {\n\t\t\n\t\tint a = 1000000000;\t\t\t//10亿\n\t\tint b = 20;\n\t\t\n\t\tint ans1 = a*b;\n\t\tSystem.out.println(ans1);\t//表达式范围越界\n\t\t\n\t\tlong ans2 = a*b;\n\t\tSystem.out.println(ans2);\t//表达式范围越界\n\t\t\n\t\tlong ans3 = a*((long)b);\n\t\tSystem.out.print(ans3); \t//正确输出\n\t}\n}\n\n```\n","slug":"Java学习之路(6)","published":1,"updated":"2020-02-28T05:52:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdjy006ea8vwatvudnto","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 类型转换的误区</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestTypeConvertError</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a = <span class=\"number\">1000000000</span>;\t\t\t<span class=\"comment\">//10亿</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> ans1 = a*b;</span><br><span class=\"line\">\t\tSystem.out.println(ans1);\t<span class=\"comment\">//表达式范围越界</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> ans2 = a*b;</span><br><span class=\"line\">\t\tSystem.out.println(ans2);\t<span class=\"comment\">//表达式范围越界</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> ans3 = a*((<span class=\"keyword\">long</span>)b);</span><br><span class=\"line\">\t\tSystem.out.print(ans3); \t<span class=\"comment\">//正确输出</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 类型转换的误区</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestTypeConvertError</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> a = <span class=\"number\">1000000000</span>;\t\t\t<span class=\"comment\">//10亿</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> ans1 = a*b;</span><br><span class=\"line\">\t\tSystem.out.println(ans1);\t<span class=\"comment\">//表达式范围越界</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> ans2 = a*b;</span><br><span class=\"line\">\t\tSystem.out.println(ans2);\t<span class=\"comment\">//表达式范围越界</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> ans3 = a*((<span class=\"keyword\">long</span>)b);</span><br><span class=\"line\">\t\tSystem.out.print(ans3); \t<span class=\"comment\">//正确输出</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--算数运算符","date":"2020-01-21T16:00:00.000Z","_content":"```java\n/**\n * 测试算数运算符\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TsetOperator_1 {\n\tpublic static void main(String[] args) {\n\t\t/*\n\t\t * 整数运算：\n\t\t * 如果整数操作数里有long，则结果也为long\n\t\t * 没有long时，结果为int。即使操作数全为short、byte，结果也是int\n\t\t */\n\t\tbyte a = 1;\n\t\tint  b = 2;\n\t\tint  ans1 = a+b;\n\t  //byte ans2 = a+b;  报错\n\t\t\n\t\tlong c = 3;\n\t\tlong ans3 = b+c;\n\t  //int  ans4 = b+c;  报错\n\t\t\n\t\t/*\n\t\t * 浮点运算：\n\t\t * 如果操作数涉及浮点数,\n\t\t * 如果两个浮点数有一个为double，则结果为double\n\t\t * 只有两个浮点数数都为float，结果才为float\n\t\t */\n\t\tfloat d = 1;\n\t\tfloat e = 2;\n\t\tdouble f = 3;\n\t\tfloat ans5 = d+e;\n        double ans6 = d+e;\n        double ans7 = e+f;\n      //float ans8 = e+f;  报错\n        \n        /*\n\t\t * 整数与浮点运算：\n\t\t * 只要操作数涉及浮点数，则向浮点数兼容\n\t\t */\n        \n        /*\n                           * 取模运算\n                           *结果（余数）的符号与左操作数相同 \n         */\n        System.out.println(9%5);\n        System.out.println(-9%5);\n        System.out.println(9%-5);\n\t\t\n\t}\n}\n\n```\n","source":"_posts/Java学习之路(7).md","raw":"---\ntitle:  Java学习之路--算数运算符\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-22\n\n---\n```java\n/**\n * 测试算数运算符\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TsetOperator_1 {\n\tpublic static void main(String[] args) {\n\t\t/*\n\t\t * 整数运算：\n\t\t * 如果整数操作数里有long，则结果也为long\n\t\t * 没有long时，结果为int。即使操作数全为short、byte，结果也是int\n\t\t */\n\t\tbyte a = 1;\n\t\tint  b = 2;\n\t\tint  ans1 = a+b;\n\t  //byte ans2 = a+b;  报错\n\t\t\n\t\tlong c = 3;\n\t\tlong ans3 = b+c;\n\t  //int  ans4 = b+c;  报错\n\t\t\n\t\t/*\n\t\t * 浮点运算：\n\t\t * 如果操作数涉及浮点数,\n\t\t * 如果两个浮点数有一个为double，则结果为double\n\t\t * 只有两个浮点数数都为float，结果才为float\n\t\t */\n\t\tfloat d = 1;\n\t\tfloat e = 2;\n\t\tdouble f = 3;\n\t\tfloat ans5 = d+e;\n        double ans6 = d+e;\n        double ans7 = e+f;\n      //float ans8 = e+f;  报错\n        \n        /*\n\t\t * 整数与浮点运算：\n\t\t * 只要操作数涉及浮点数，则向浮点数兼容\n\t\t */\n        \n        /*\n                           * 取模运算\n                           *结果（余数）的符号与左操作数相同 \n         */\n        System.out.println(9%5);\n        System.out.println(-9%5);\n        System.out.println(9%-5);\n\t\t\n\t}\n}\n\n```\n","slug":"Java学习之路(7)","published":1,"updated":"2020-02-28T05:52:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdjz006ha8vw3l61p1xk","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试算数运算符</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TsetOperator_1</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 整数运算：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 如果整数操作数里有long，则结果也为long</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 没有long时，结果为int。即使操作数全为short、byte，结果也是int</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>  b = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>  ans1 = a+b;</span><br><span class=\"line\">\t  <span class=\"comment\">//byte ans2 = a+b;  报错</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> ans3 = b+c;</span><br><span class=\"line\">\t  <span class=\"comment\">//int  ans4 = b+c;  报错</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 浮点运算：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 如果操作数涉及浮点数,</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 如果两个浮点数有一个为double，则结果为double</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 只有两个浮点数数都为float，结果才为float</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">float</span> d = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">float</span> e = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> f = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">float</span> ans5 = d+e;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> ans6 = d+e;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> ans7 = e+f;</span><br><span class=\"line\">      <span class=\"comment\">//float ans8 = e+f;  报错</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 整数与浮点运算：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 只要操作数涉及浮点数，则向浮点数兼容</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                           * 取模运算</span></span><br><span class=\"line\"><span class=\"comment\">                           *结果（余数）的符号与左操作数相同 </span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        System.out.println(<span class=\"number\">9</span>%<span class=\"number\">5</span>);</span><br><span class=\"line\">        System.out.println(-<span class=\"number\">9</span>%<span class=\"number\">5</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"number\">9</span>%-<span class=\"number\">5</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试算数运算符</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TsetOperator_1</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 整数运算：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 如果整数操作数里有long，则结果也为long</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 没有long时，结果为int。即使操作数全为short、byte，结果也是int</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>  b = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>  ans1 = a+b;</span><br><span class=\"line\">\t  <span class=\"comment\">//byte ans2 = a+b;  报错</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> c = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> ans3 = b+c;</span><br><span class=\"line\">\t  <span class=\"comment\">//int  ans4 = b+c;  报错</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 浮点运算：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 如果操作数涉及浮点数,</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 如果两个浮点数有一个为double，则结果为double</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 只有两个浮点数数都为float，结果才为float</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">float</span> d = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">float</span> e = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> f = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">float</span> ans5 = d+e;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> ans6 = d+e;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> ans7 = e+f;</span><br><span class=\"line\">      <span class=\"comment\">//float ans8 = e+f;  报错</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 整数与浮点运算：</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 只要操作数涉及浮点数，则向浮点数兼容</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                           * 取模运算</span></span><br><span class=\"line\"><span class=\"comment\">                           *结果（余数）的符号与左操作数相同 </span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        System.out.println(<span class=\"number\">9</span>%<span class=\"number\">5</span>);</span><br><span class=\"line\">        System.out.println(-<span class=\"number\">9</span>%<span class=\"number\">5</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"number\">9</span>%-<span class=\"number\">5</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--比较运算符","date":"2020-01-21T16:00:00.000Z","_content":"```java\n/**\n * 测试比较运算符\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestOperator_2 {\n\tpublic static void main(String[] args) {\n\t  //比较运算符仅根据变量的数值大小来进行比较\n\t  //可参与比较运算的有：byte/short/int/long,float/double,char\n\t  //比较运算返回值为布尔值：true，false\n\t\tint   a = 1;\n\t\tfloat b = 1;\n\t\t\n\t\tif(a == b) {\n\t\t\tSystem.out.println(\"==\");\n\t\t}\n\t\tif(a != b) {\n\t\t\tSystem.out.println(\"!=\");\n\t\t}\n\t\tif(a < b) {\n\t\t\tSystem.out.println(\"<\");\n\t\t}\n\t\tif(a > b) {\n\t\t\tSystem.out.println(\">\");\n\t\t}\n\t}\n}\n\n\n```\n","source":"_posts/Java学习之路(8).md","raw":"---\ntitle:  Java学习之路--比较运算符\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-22\n\n---\n```java\n/**\n * 测试比较运算符\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestOperator_2 {\n\tpublic static void main(String[] args) {\n\t  //比较运算符仅根据变量的数值大小来进行比较\n\t  //可参与比较运算的有：byte/short/int/long,float/double,char\n\t  //比较运算返回值为布尔值：true，false\n\t\tint   a = 1;\n\t\tfloat b = 1;\n\t\t\n\t\tif(a == b) {\n\t\t\tSystem.out.println(\"==\");\n\t\t}\n\t\tif(a != b) {\n\t\t\tSystem.out.println(\"!=\");\n\t\t}\n\t\tif(a < b) {\n\t\t\tSystem.out.println(\"<\");\n\t\t}\n\t\tif(a > b) {\n\t\t\tSystem.out.println(\">\");\n\t\t}\n\t}\n}\n\n\n```\n","slug":"Java学习之路(8)","published":1,"updated":"2020-02-28T05:52:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdk3006ka8vw2izp8r0w","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试比较运算符</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestOperator_2</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//比较运算符仅根据变量的数值大小来进行比较</span></span><br><span class=\"line\">\t  <span class=\"comment\">//可参与比较运算的有：byte/short/int/long,float/double,char</span></span><br><span class=\"line\">\t  <span class=\"comment\">//比较运算返回值为布尔值：true，false</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>   a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">float</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a == b) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"==\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a != b) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"!=\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a &lt; b) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"&lt;\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a &gt; b) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"&gt;\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试比较运算符</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestOperator_2</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t  <span class=\"comment\">//比较运算符仅根据变量的数值大小来进行比较</span></span><br><span class=\"line\">\t  <span class=\"comment\">//可参与比较运算的有：byte/short/int/long,float/double,char</span></span><br><span class=\"line\">\t  <span class=\"comment\">//比较运算返回值为布尔值：true，false</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span>   a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">float</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a == b) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"==\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a != b) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"!=\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a &lt; b) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"&lt;\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a &gt; b) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"&gt;\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Java学习之路--逻辑运算符和位运算符","date":"2020-01-22T16:00:00.000Z","_content":"```java\n/**\n * 测试逻辑运算符和位运算符\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestOperator_3 {\n\tpublic static void main(String[] args) {\n\t\t/*\n\t\t * 与：&\t\t\t\t同真则真，有假则假\n\t\t * 或：|\t\t\t\t同假则假，有真则真\n\t\t * 非：！\t\t\t\t真假颠倒\n\t\t * 异或：^\t\t\t\t同假异真\n\t\t * 短路与：&&\t\t\t有假则假\n\t\t * 短路或：||\t\t\t\t有真则真\n\t\t * \n\t\t * 短路方式从左向右计算，若左边表达式计算结果足够判断则右边不进行表达式计算\n\t\t */\n\t\t\n\t\t//////////////////////////////////////////////////\n\t\t\n\t\t/*\n\t\t * 取反：~\n\t\t * 按位与：&\n\t\t * 按位或：|\n\t\t * 按位异或：^\n\t\t * 左移：<<\t\t\t\t左移一位相当于乘2\n\t\t * 右移：>>\t\t\t\t右移一位相当于除2取商\n\t\t */\n\t\t\n\t\tSystem.out.println(3<<2);          //相当于11左移两位变成1100，输出12\n\t\tSystem.out.println(3>>1);\t\t   //相当于11右移一位变成1，输出1\n\t}\n}\n\n```\n","source":"_posts/Java学习之路(9).md","raw":"---\ntitle:  Java学习之路--逻辑运算符和位运算符\ntags: [编程,学习,Java]\ncategories: [Java]\ndate: 2020-1-23\n\n---\n```java\n/**\n * 测试逻辑运算符和位运算符\n * @author 葛宇\n */\npackage 数据类型和运算符;\n\npublic class TestOperator_3 {\n\tpublic static void main(String[] args) {\n\t\t/*\n\t\t * 与：&\t\t\t\t同真则真，有假则假\n\t\t * 或：|\t\t\t\t同假则假，有真则真\n\t\t * 非：！\t\t\t\t真假颠倒\n\t\t * 异或：^\t\t\t\t同假异真\n\t\t * 短路与：&&\t\t\t有假则假\n\t\t * 短路或：||\t\t\t\t有真则真\n\t\t * \n\t\t * 短路方式从左向右计算，若左边表达式计算结果足够判断则右边不进行表达式计算\n\t\t */\n\t\t\n\t\t//////////////////////////////////////////////////\n\t\t\n\t\t/*\n\t\t * 取反：~\n\t\t * 按位与：&\n\t\t * 按位或：|\n\t\t * 按位异或：^\n\t\t * 左移：<<\t\t\t\t左移一位相当于乘2\n\t\t * 右移：>>\t\t\t\t右移一位相当于除2取商\n\t\t */\n\t\t\n\t\tSystem.out.println(3<<2);          //相当于11左移两位变成1100，输出12\n\t\tSystem.out.println(3>>1);\t\t   //相当于11右移一位变成1，输出1\n\t}\n}\n\n```\n","slug":"Java学习之路(9)","published":1,"updated":"2020-02-28T05:52:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdk5006na8vwfg88codd","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试逻辑运算符和位运算符</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestOperator_3</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 与：&amp;\t\t\t\t同真则真，有假则假</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 或：|\t\t\t\t同假则假，有真则真</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 非：！\t\t\t\t真假颠倒</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 异或：^\t\t\t\t同假异真</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 短路与：&amp;&amp;\t\t\t有假则假</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 短路或：||\t\t\t\t有真则真</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 短路方式从左向右计算，若左边表达式计算结果足够判断则右边不进行表达式计算</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//////////////////////////////////////////////////</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 取反：~</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 按位与：&amp;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 按位或：|</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 按位异或：^</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 左移：&lt;&lt;\t\t\t\t左移一位相当于乘2</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 右移：&gt;&gt;\t\t\t\t右移一位相当于除2取商</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"number\">3</span>&lt;&lt;<span class=\"number\">2</span>);          <span class=\"comment\">//相当于11左移两位变成1100，输出12</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"number\">3</span>&gt;&gt;<span class=\"number\">1</span>);\t\t   <span class=\"comment\">//相当于11右移一位变成1，输出1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试逻辑运算符和位运算符</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> 葛宇</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> 数据类型和运算符;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestOperator_3</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 与：&amp;\t\t\t\t同真则真，有假则假</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 或：|\t\t\t\t同假则假，有真则真</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 非：！\t\t\t\t真假颠倒</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 异或：^\t\t\t\t同假异真</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 短路与：&amp;&amp;\t\t\t有假则假</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 短路或：||\t\t\t\t有真则真</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 短路方式从左向右计算，若左边表达式计算结果足够判断则右边不进行表达式计算</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//////////////////////////////////////////////////</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 取反：~</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 按位与：&amp;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 按位或：|</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 按位异或：^</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 左移：&lt;&lt;\t\t\t\t左移一位相当于乘2</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * 右移：&gt;&gt;\t\t\t\t右移一位相当于除2取商</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"number\">3</span>&lt;&lt;<span class=\"number\">2</span>);          <span class=\"comment\">//相当于11左移两位变成1100，输出12</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"number\">3</span>&gt;&gt;<span class=\"number\">1</span>);\t\t   <span class=\"comment\">//相当于11右移一位变成1，输出1</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Matlab之ineterp1插值","date":"2020-02-20T16:00:00.000Z","_content":"\n```Matlab\n%一维插值\n\nx = 0 : pi/4 : 2 * pi;     %x的样本值\ny = sin(x);                %y的样本值\nxx = 0 : 0.5 : 2 * pi;     %目标的x值\n%分段线性插值（默认）\ny1 = interp1(x,y,xx);\nsubplot(2,2,1);plot(x,y,'o',xx,y1,'r');\ntitle('分段线性插值')\n\n%临近插值\ny2 = interp1(x,y,xx,'nearnest');\nsubplot(2,2,2);plot(x,y,'o',xx,y2,'r');\ntitle('邻近插值')\n\n%球面线性插值\ny3 = interp1(x,y,xx,'spline');\nsubplot(2,2,3);plot(x,y,'o',xx,y3,'r');\ntitle('球面线性插值')\n\n%三次多项式插值\ny4 = interp1(x,y,xx,'PCHIP');\nsubplot(2,2,4);plot(x,y,'o',xx,y4,'r');\ntitle('三次多项式插值')\n```\n**输出结果**\n\n![ans](https://s3.bmp.ovh/imgs/2022/09/05/7f0cd8ca7c6c30fd.png \"ans\")\n","source":"_posts/Matlab数模(1).md","raw":"---\ntitle: Matlab之ineterp1插值\ntags: [Matlab,数学建模]\n\ncategories: [科学计算]\n\ndate: 2020-2-21\n---\n\n```Matlab\n%一维插值\n\nx = 0 : pi/4 : 2 * pi;     %x的样本值\ny = sin(x);                %y的样本值\nxx = 0 : 0.5 : 2 * pi;     %目标的x值\n%分段线性插值（默认）\ny1 = interp1(x,y,xx);\nsubplot(2,2,1);plot(x,y,'o',xx,y1,'r');\ntitle('分段线性插值')\n\n%临近插值\ny2 = interp1(x,y,xx,'nearnest');\nsubplot(2,2,2);plot(x,y,'o',xx,y2,'r');\ntitle('邻近插值')\n\n%球面线性插值\ny3 = interp1(x,y,xx,'spline');\nsubplot(2,2,3);plot(x,y,'o',xx,y3,'r');\ntitle('球面线性插值')\n\n%三次多项式插值\ny4 = interp1(x,y,xx,'PCHIP');\nsubplot(2,2,4);plot(x,y,'o',xx,y4,'r');\ntitle('三次多项式插值')\n```\n**输出结果**\n\n![ans](https://s3.bmp.ovh/imgs/2022/09/05/7f0cd8ca7c6c30fd.png \"ans\")\n","slug":"Matlab数模(1)","published":1,"updated":"2022-09-05T05:22:08.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdkm006qa8vwnxlukb9v","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">%一维插值</span></span><br><span class=\"line\"></span><br><span class=\"line\">x = <span class=\"number\">0</span> : <span class=\"built_in\">pi</span>/<span class=\"number\">4</span> : <span class=\"number\">2</span> * <span class=\"built_in\">pi</span>;     <span class=\"comment\">%x的样本值</span></span><br><span class=\"line\">y = <span class=\"built_in\">sin</span>(x);                <span class=\"comment\">%y的样本值</span></span><br><span class=\"line\">xx = <span class=\"number\">0</span> : <span class=\"number\">0.5</span> : <span class=\"number\">2</span> * <span class=\"built_in\">pi</span>;     <span class=\"comment\">%目标的x值</span></span><br><span class=\"line\"><span class=\"comment\">%分段线性插值（默认）</span></span><br><span class=\"line\">y1 = interp1(x,y,xx);</span><br><span class=\"line\">subplot(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>);<span class=\"built_in\">plot</span>(x,y,<span class=\"string\">'o'</span>,xx,y1,<span class=\"string\">'r'</span>);</span><br><span class=\"line\">title(<span class=\"string\">'分段线性插值'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">%临近插值</span></span><br><span class=\"line\">y2 = interp1(x,y,xx,<span class=\"string\">'nearnest'</span>);</span><br><span class=\"line\">subplot(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>);<span class=\"built_in\">plot</span>(x,y,<span class=\"string\">'o'</span>,xx,y2,<span class=\"string\">'r'</span>);</span><br><span class=\"line\">title(<span class=\"string\">'邻近插值'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">%球面线性插值</span></span><br><span class=\"line\">y3 = interp1(x,y,xx,<span class=\"string\">'spline'</span>);</span><br><span class=\"line\">subplot(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);<span class=\"built_in\">plot</span>(x,y,<span class=\"string\">'o'</span>,xx,y3,<span class=\"string\">'r'</span>);</span><br><span class=\"line\">title(<span class=\"string\">'球面线性插值'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">%三次多项式插值</span></span><br><span class=\"line\">y4 = interp1(x,y,xx,<span class=\"string\">'PCHIP'</span>);</span><br><span class=\"line\">subplot(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>);<span class=\"built_in\">plot</span>(x,y,<span class=\"string\">'o'</span>,xx,y4,<span class=\"string\">'r'</span>);</span><br><span class=\"line\">title(<span class=\"string\">'三次多项式插值'</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出结果</strong></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/7f0cd8ca7c6c30fd.png\" alt=\"ans\" title=\"ans\"></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">%一维插值</span></span><br><span class=\"line\"></span><br><span class=\"line\">x = <span class=\"number\">0</span> : <span class=\"built_in\">pi</span>/<span class=\"number\">4</span> : <span class=\"number\">2</span> * <span class=\"built_in\">pi</span>;     <span class=\"comment\">%x的样本值</span></span><br><span class=\"line\">y = <span class=\"built_in\">sin</span>(x);                <span class=\"comment\">%y的样本值</span></span><br><span class=\"line\">xx = <span class=\"number\">0</span> : <span class=\"number\">0.5</span> : <span class=\"number\">2</span> * <span class=\"built_in\">pi</span>;     <span class=\"comment\">%目标的x值</span></span><br><span class=\"line\"><span class=\"comment\">%分段线性插值（默认）</span></span><br><span class=\"line\">y1 = interp1(x,y,xx);</span><br><span class=\"line\">subplot(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>);<span class=\"built_in\">plot</span>(x,y,<span class=\"string\">'o'</span>,xx,y1,<span class=\"string\">'r'</span>);</span><br><span class=\"line\">title(<span class=\"string\">'分段线性插值'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">%临近插值</span></span><br><span class=\"line\">y2 = interp1(x,y,xx,<span class=\"string\">'nearnest'</span>);</span><br><span class=\"line\">subplot(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>);<span class=\"built_in\">plot</span>(x,y,<span class=\"string\">'o'</span>,xx,y2,<span class=\"string\">'r'</span>);</span><br><span class=\"line\">title(<span class=\"string\">'邻近插值'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">%球面线性插值</span></span><br><span class=\"line\">y3 = interp1(x,y,xx,<span class=\"string\">'spline'</span>);</span><br><span class=\"line\">subplot(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);<span class=\"built_in\">plot</span>(x,y,<span class=\"string\">'o'</span>,xx,y3,<span class=\"string\">'r'</span>);</span><br><span class=\"line\">title(<span class=\"string\">'球面线性插值'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">%三次多项式插值</span></span><br><span class=\"line\">y4 = interp1(x,y,xx,<span class=\"string\">'PCHIP'</span>);</span><br><span class=\"line\">subplot(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>);<span class=\"built_in\">plot</span>(x,y,<span class=\"string\">'o'</span>,xx,y4,<span class=\"string\">'r'</span>);</span><br><span class=\"line\">title(<span class=\"string\">'三次多项式插值'</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出结果</strong></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/7f0cd8ca7c6c30fd.png\" alt=\"ans\" title=\"ans\"></p>\n"},{"title":"Matlab之二维插值：估测海底某曲面地形","date":"2020-02-20T16:00:00.000Z","_content":"\n```Matlab\n% 2维插值示例：估测海底某曲面地形\nx = [129,140,103.5,88,185.5,195,105,157.5,107.5,77,81,162,162,117.5];\ny = [7.5,141.5,23,147,22.5,137.5,85.5,-6.5,-81,3,56.5,-66.5,84,-33.5];\nz = -[4,8,6,8,6,8,8,9,9,8,8,0,4,9];\nxmm = minmax(x);\nymm = minmax(y);\nxi = xmm(1):2.5:xmm(2);\nyi = ymm(1):2.5:ymm(2);\nz_interp = griddata(x,y,z,xi,yi','V4');     %griddata插值同interp2，但是对数据要求不严格\nsurf(xi,yi,z_interp);\n```\n**输出结果**\n\n![ans](https://s3.bmp.ovh/imgs/2022/09/05/a671546bee229037.png \"ans\")\n\n![ans](https://s3.bmp.ovh/imgs/2022/09/05/b516d0a759d6dc00.png \"ans\")\n> PS:深度大于0的部分应手动舍弃，边值区域的二维插值会遇到问题。\n","source":"_posts/Matlab数模(2).md","raw":"---\ntitle: Matlab之二维插值：估测海底某曲面地形\ntags: [Matlab,数学建模]\ncategories: [科学计算]\ndate: 2020-2-21\n\n---\n\n```Matlab\n% 2维插值示例：估测海底某曲面地形\nx = [129,140,103.5,88,185.5,195,105,157.5,107.5,77,81,162,162,117.5];\ny = [7.5,141.5,23,147,22.5,137.5,85.5,-6.5,-81,3,56.5,-66.5,84,-33.5];\nz = -[4,8,6,8,6,8,8,9,9,8,8,0,4,9];\nxmm = minmax(x);\nymm = minmax(y);\nxi = xmm(1):2.5:xmm(2);\nyi = ymm(1):2.5:ymm(2);\nz_interp = griddata(x,y,z,xi,yi','V4');     %griddata插值同interp2，但是对数据要求不严格\nsurf(xi,yi,z_interp);\n```\n**输出结果**\n\n![ans](https://s3.bmp.ovh/imgs/2022/09/05/a671546bee229037.png \"ans\")\n\n![ans](https://s3.bmp.ovh/imgs/2022/09/05/b516d0a759d6dc00.png \"ans\")\n> PS:深度大于0的部分应手动舍弃，边值区域的二维插值会遇到问题。\n","slug":"Matlab数模(2)","published":1,"updated":"2022-09-05T05:24:03.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdkn006ta8vww7oon8nq","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">% 2维插值示例：估测海底某曲面地形</span></span><br><span class=\"line\">x = [<span class=\"number\">129</span>,<span class=\"number\">140</span>,<span class=\"number\">103.5</span>,<span class=\"number\">88</span>,<span class=\"number\">185.5</span>,<span class=\"number\">195</span>,<span class=\"number\">105</span>,<span class=\"number\">157.5</span>,<span class=\"number\">107.5</span>,<span class=\"number\">77</span>,<span class=\"number\">81</span>,<span class=\"number\">162</span>,<span class=\"number\">162</span>,<span class=\"number\">117.5</span>];</span><br><span class=\"line\">y = [<span class=\"number\">7.5</span>,<span class=\"number\">141.5</span>,<span class=\"number\">23</span>,<span class=\"number\">147</span>,<span class=\"number\">22.5</span>,<span class=\"number\">137.5</span>,<span class=\"number\">85.5</span>,<span class=\"number\">-6.5</span>,<span class=\"number\">-81</span>,<span class=\"number\">3</span>,<span class=\"number\">56.5</span>,<span class=\"number\">-66.5</span>,<span class=\"number\">84</span>,<span class=\"number\">-33.5</span>];</span><br><span class=\"line\">z = -[<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">8</span>,<span class=\"number\">0</span>,<span class=\"number\">4</span>,<span class=\"number\">9</span>];</span><br><span class=\"line\">xmm = minmax(x);</span><br><span class=\"line\">ymm = minmax(y);</span><br><span class=\"line\">xi = xmm(<span class=\"number\">1</span>):<span class=\"number\">2.5</span>:xmm(<span class=\"number\">2</span>);</span><br><span class=\"line\">yi = ymm(<span class=\"number\">1</span>):<span class=\"number\">2.5</span>:ymm(<span class=\"number\">2</span>);</span><br><span class=\"line\">z_interp = griddata(x,y,z,xi,yi',<span class=\"string\">'V4'</span>);     <span class=\"comment\">%griddata插值同interp2，但是对数据要求不严格</span></span><br><span class=\"line\">surf(xi,yi,z_interp);</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出结果</strong></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/a671546bee229037.png\" alt=\"ans\" title=\"ans\"></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/b516d0a759d6dc00.png\" alt=\"ans\" title=\"ans\"></p>\n<blockquote>\n<p>PS:深度大于0的部分应手动舍弃，边值区域的二维插值会遇到问题。</p>\n</blockquote>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">% 2维插值示例：估测海底某曲面地形</span></span><br><span class=\"line\">x = [<span class=\"number\">129</span>,<span class=\"number\">140</span>,<span class=\"number\">103.5</span>,<span class=\"number\">88</span>,<span class=\"number\">185.5</span>,<span class=\"number\">195</span>,<span class=\"number\">105</span>,<span class=\"number\">157.5</span>,<span class=\"number\">107.5</span>,<span class=\"number\">77</span>,<span class=\"number\">81</span>,<span class=\"number\">162</span>,<span class=\"number\">162</span>,<span class=\"number\">117.5</span>];</span><br><span class=\"line\">y = [<span class=\"number\">7.5</span>,<span class=\"number\">141.5</span>,<span class=\"number\">23</span>,<span class=\"number\">147</span>,<span class=\"number\">22.5</span>,<span class=\"number\">137.5</span>,<span class=\"number\">85.5</span>,<span class=\"number\">-6.5</span>,<span class=\"number\">-81</span>,<span class=\"number\">3</span>,<span class=\"number\">56.5</span>,<span class=\"number\">-66.5</span>,<span class=\"number\">84</span>,<span class=\"number\">-33.5</span>];</span><br><span class=\"line\">z = -[<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">9</span>,<span class=\"number\">8</span>,<span class=\"number\">8</span>,<span class=\"number\">0</span>,<span class=\"number\">4</span>,<span class=\"number\">9</span>];</span><br><span class=\"line\">xmm = minmax(x);</span><br><span class=\"line\">ymm = minmax(y);</span><br><span class=\"line\">xi = xmm(<span class=\"number\">1</span>):<span class=\"number\">2.5</span>:xmm(<span class=\"number\">2</span>);</span><br><span class=\"line\">yi = ymm(<span class=\"number\">1</span>):<span class=\"number\">2.5</span>:ymm(<span class=\"number\">2</span>);</span><br><span class=\"line\">z_interp = griddata(x,y,z,xi,yi',<span class=\"string\">'V4'</span>);     <span class=\"comment\">%griddata插值同interp2，但是对数据要求不严格</span></span><br><span class=\"line\">surf(xi,yi,z_interp);</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出结果</strong></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/a671546bee229037.png\" alt=\"ans\" title=\"ans\"></p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/b516d0a759d6dc00.png\" alt=\"ans\" title=\"ans\"></p>\n<blockquote>\n<p>PS:深度大于0的部分应手动舍弃，边值区域的二维插值会遇到问题。</p>\n</blockquote>\n"},{"title":"Maven中的dependencies和dependencyManagement标签","date":"2022-09-05T16:00:00.000Z","_content":"\n本文主要记录学习SSM过程中对于Maven的pom.xml文件内**dependencies**和**dependencyManagement**两个标签的区别和理解。\n\n闲言少叙，直奔主题👇\n\n## 情景一：\n\n```xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.example</groupId>\n    <artifactId>web-demo</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>war</packaging>\n\n    <dependencies>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.25</version>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>mysql</groupId>\n                <artifactId>mysql-connector-java</artifactId>\n                <version>5.1.32</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n</project>\n\n```\n上述pom文件中同时在**dependencies**和**dependencyManagement**中引入了mysql依赖，但是版本不同。\n<center>这里我们查看项目的外部库👇\n\n![](https://img.gejiba.com/images/07d8c055577d9f4a3378869033e9df15.png)\n\n可见同时作用时版本以**dependencies**中指定的为准\n</center>\n\n## 情景二：\n\n```xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.example</groupId>\n    <artifactId>web-demo</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>war</packaging>\n\n    <dependencies>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <!-- <version>8.0.25</version> -->\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>mysql</groupId>\n                <artifactId>mysql-connector-java</artifactId>\n                <version>5.1.32</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n</project>\n\n```\n此处我们将**dependencies**中的**version**标签进行注释，即不指定版本信息再进行观察。\n<center>这里我们查看项目的外部库👇\n\n![](https://img.gejiba.com/images/44c0e5bc68a6c84b0ef1f0d2a5f13fe2.png)\n\n可见不在**dependencies**中指定版本时，外部库版本以**dependencyManagement**中定义的版本为准\n</center>\n\n## 情景三：\n\n```xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.example</groupId>\n    <artifactId>web-demo</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>war</packaging>\n\n    <!-- <dependencies>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.25</version>\n        </dependency>\n    </dependencies> -->\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>mysql</groupId>\n                <artifactId>mysql-connector-java</artifactId>\n                <version>5.1.32</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n</project>\n\n```\n此处我们将**dependencies**标签的全部内容进行注释。\n<center>这里我们查看项目的外部库👇\n\n![](https://img.gejiba.com/images/1c6fd77878b719965c31b7dd0b6fc9bd.png)\n\n可见在**dependencyManagement**中仅仅进行了对外部库的声明而非引用\n</center>\n\n## 总结：\n\n- **dependencyManagement**其实只是一个管理jar的作用的声明标签,是管理jar的版本的,其他他的什么作用都没有,只是定义找到该jar的三维坐标,并不是真正的去执行下载的jar的功能\n- 在**dependencies**中的依赖中如果没有声明jar的版本,就到**dependenciesManagement**中去找,找到就使用,没有就报错\n- 在**dependencies**中声明jar的版本,则使用该版本,不管在**dependenciesManagement**中有没有声明jar的version,都以该jar的版本为主","source":"_posts/Maven中dependence和dependenceManagement.md","raw":"---\ntitle:  Maven中的dependencies和dependencyManagement标签\ntags: [编程,学习,Java,Maven]\ncategories: [Maven]\ndate: 2022-9-6\n\n---\n\n本文主要记录学习SSM过程中对于Maven的pom.xml文件内**dependencies**和**dependencyManagement**两个标签的区别和理解。\n\n闲言少叙，直奔主题👇\n\n## 情景一：\n\n```xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.example</groupId>\n    <artifactId>web-demo</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>war</packaging>\n\n    <dependencies>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.25</version>\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>mysql</groupId>\n                <artifactId>mysql-connector-java</artifactId>\n                <version>5.1.32</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n</project>\n\n```\n上述pom文件中同时在**dependencies**和**dependencyManagement**中引入了mysql依赖，但是版本不同。\n<center>这里我们查看项目的外部库👇\n\n![](https://img.gejiba.com/images/07d8c055577d9f4a3378869033e9df15.png)\n\n可见同时作用时版本以**dependencies**中指定的为准\n</center>\n\n## 情景二：\n\n```xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.example</groupId>\n    <artifactId>web-demo</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>war</packaging>\n\n    <dependencies>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <!-- <version>8.0.25</version> -->\n        </dependency>\n    </dependencies>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>mysql</groupId>\n                <artifactId>mysql-connector-java</artifactId>\n                <version>5.1.32</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n</project>\n\n```\n此处我们将**dependencies**中的**version**标签进行注释，即不指定版本信息再进行观察。\n<center>这里我们查看项目的外部库👇\n\n![](https://img.gejiba.com/images/44c0e5bc68a6c84b0ef1f0d2a5f13fe2.png)\n\n可见不在**dependencies**中指定版本时，外部库版本以**dependencyManagement**中定义的版本为准\n</center>\n\n## 情景三：\n\n```xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.example</groupId>\n    <artifactId>web-demo</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>war</packaging>\n\n    <!-- <dependencies>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.25</version>\n        </dependency>\n    </dependencies> -->\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>mysql</groupId>\n                <artifactId>mysql-connector-java</artifactId>\n                <version>5.1.32</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n</project>\n\n```\n此处我们将**dependencies**标签的全部内容进行注释。\n<center>这里我们查看项目的外部库👇\n\n![](https://img.gejiba.com/images/1c6fd77878b719965c31b7dd0b6fc9bd.png)\n\n可见在**dependencyManagement**中仅仅进行了对外部库的声明而非引用\n</center>\n\n## 总结：\n\n- **dependencyManagement**其实只是一个管理jar的作用的声明标签,是管理jar的版本的,其他他的什么作用都没有,只是定义找到该jar的三维坐标,并不是真正的去执行下载的jar的功能\n- 在**dependencies**中的依赖中如果没有声明jar的版本,就到**dependenciesManagement**中去找,找到就使用,没有就报错\n- 在**dependencies**中声明jar的版本,则使用该版本,不管在**dependenciesManagement**中有没有声明jar的version,都以该jar的版本为主","slug":"Maven中dependence和dependenceManagement","published":1,"updated":"2022-09-07T05:03:35.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdkp006ya8vwvahbphxw","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p>本文主要记录学习SSM过程中对于Maven的pom.xml文件内<strong>dependencies</strong>和<strong>dependencyManagement</strong>两个标签的区别和理解。</p>\n<p>闲言少叙，直奔主题👇</p>\n<h2 id=\"情景一：\"><a href=\"#情景一：\" class=\"headerlink\" title=\"情景一：\"></a>情景一：</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.example<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>web-demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.25<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.32<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上述pom文件中同时在<strong>dependencies</strong>和<strong>dependencyManagement</strong>中引入了mysql依赖，但是版本不同。</p>\n<center>这里我们查看项目的外部库👇\n\n<p><img src=\"https://img.gejiba.com/images/07d8c055577d9f4a3378869033e9df15.png\" alt></p>\n<p>可见同时作用时版本以<strong>dependencies</strong>中指定的为准</p>\n</center>\n\n<h2 id=\"情景二：\"><a href=\"#情景二：\" class=\"headerlink\" title=\"情景二：\"></a>情景二：</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.example<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>web-demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- &lt;version&gt;8.0.25&lt;/version&gt; --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.32<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>此处我们将<strong>dependencies</strong>中的<strong>version</strong>标签进行注释，即不指定版本信息再进行观察。</p>\n<center>这里我们查看项目的外部库👇\n\n<p><img src=\"https://img.gejiba.com/images/44c0e5bc68a6c84b0ef1f0d2a5f13fe2.png\" alt></p>\n<p>可见不在<strong>dependencies</strong>中指定版本时，外部库版本以<strong>dependencyManagement</strong>中定义的版本为准</p>\n</center>\n\n<h2 id=\"情景三：\"><a href=\"#情景三：\" class=\"headerlink\" title=\"情景三：\"></a>情景三：</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.example<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>web-demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;dependencies&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;dependency&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;version&gt;8.0.25&lt;/version&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/dependency&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/dependencies&gt; --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.32<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>此处我们将<strong>dependencies</strong>标签的全部内容进行注释。</p>\n<center>这里我们查看项目的外部库👇\n\n<p><img src=\"https://img.gejiba.com/images/1c6fd77878b719965c31b7dd0b6fc9bd.png\" alt></p>\n<p>可见在<strong>dependencyManagement</strong>中仅仅进行了对外部库的声明而非引用</p>\n</center>\n\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><ul>\n<li><strong>dependencyManagement</strong>其实只是一个管理jar的作用的声明标签,是管理jar的版本的,其他他的什么作用都没有,只是定义找到该jar的三维坐标,并不是真正的去执行下载的jar的功能</li>\n<li>在<strong>dependencies</strong>中的依赖中如果没有声明jar的版本,就到<strong>dependenciesManagement</strong>中去找,找到就使用,没有就报错</li>\n<li>在<strong>dependencies</strong>中声明jar的版本,则使用该版本,不管在<strong>dependenciesManagement</strong>中有没有声明jar的version,都以该jar的版本为主</li>\n</ul>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<p>本文主要记录学习SSM过程中对于Maven的pom.xml文件内<strong>dependencies</strong>和<strong>dependencyManagement</strong>两个标签的区别和理解。</p>\n<p>闲言少叙，直奔主题👇</p>\n<h2 id=\"情景一：\"><a href=\"#情景一：\" class=\"headerlink\" title=\"情景一：\"></a>情景一：</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.example<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>web-demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>8.0.25<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.32<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>上述pom文件中同时在<strong>dependencies</strong>和<strong>dependencyManagement</strong>中引入了mysql依赖，但是版本不同。</p>\n<center>这里我们查看项目的外部库👇\n\n<p><img src=\"https://img.gejiba.com/images/07d8c055577d9f4a3378869033e9df15.png\" alt></p>\n<p>可见同时作用时版本以<strong>dependencies</strong>中指定的为准</p>\n</center>\n\n<h2 id=\"情景二：\"><a href=\"#情景二：\" class=\"headerlink\" title=\"情景二：\"></a>情景二：</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.example<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>web-demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- &lt;version&gt;8.0.25&lt;/version&gt; --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.32<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>此处我们将<strong>dependencies</strong>中的<strong>version</strong>标签进行注释，即不指定版本信息再进行观察。</p>\n<center>这里我们查看项目的外部库👇\n\n<p><img src=\"https://img.gejiba.com/images/44c0e5bc68a6c84b0ef1f0d2a5f13fe2.png\" alt></p>\n<p>可见不在<strong>dependencies</strong>中指定版本时，外部库版本以<strong>dependencyManagement</strong>中定义的版本为准</p>\n</center>\n\n<h2 id=\"情景三：\"><a href=\"#情景三：\" class=\"headerlink\" title=\"情景三：\"></a>情景三：</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.example<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>web-demo<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;dependencies&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;dependency&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"comment\">            &lt;version&gt;8.0.25&lt;/version&gt;</span></span><br><span class=\"line\"><span class=\"comment\">        &lt;/dependency&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;/dependencies&gt; --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.32<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>此处我们将<strong>dependencies</strong>标签的全部内容进行注释。</p>\n<center>这里我们查看项目的外部库👇\n\n<p><img src=\"https://img.gejiba.com/images/1c6fd77878b719965c31b7dd0b6fc9bd.png\" alt></p>\n<p>可见在<strong>dependencyManagement</strong>中仅仅进行了对外部库的声明而非引用</p>\n</center>\n\n<h2 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h2><ul>\n<li><strong>dependencyManagement</strong>其实只是一个管理jar的作用的声明标签,是管理jar的版本的,其他他的什么作用都没有,只是定义找到该jar的三维坐标,并不是真正的去执行下载的jar的功能</li>\n<li>在<strong>dependencies</strong>中的依赖中如果没有声明jar的版本,就到<strong>dependenciesManagement</strong>中去找,找到就使用,没有就报错</li>\n<li>在<strong>dependencies</strong>中声明jar的版本,则使用该版本,不管在<strong>dependenciesManagement</strong>中有没有声明jar的version,都以该jar的版本为主</li>\n</ul>\n"},{"title":"Mysql主从复制————基于Docker的实现","date":"2022-09-20T16:00:00.000Z","_content":"\n## 主库\n\n**主库采用远程服务器中安装的Mysql 8.0.26**\n### Step1 修改配置文件\n\nvi打开/etc/my.cnf写入👇\n\n```\nlog-bin=mysql-bin   #[必须]启用二进制日志\nserver-id=100       #[必须]配置服务器ID，可自定\n```\n\n### Step2 重启Mysql服务\n\n```\nsystemctl restart mysqld\n```\n\n### Step3 创建从库用户并授权\n\n```\ncreate user ‘#userName’@’#host’ identified by ‘#passWord’;\n```\n- **#userName** 代表你要创建的此数据库的新用户账号\n- **#host** 代表访问权限，如下：\n  - **%** 代表通配所有host地址权限(可远程访问)\n  - **localhost** 为本地权限(不可远程访问)\n  - 指定特殊Ip访问权限 如10.138.106.102\n\n```\ngrant all privileges on *.* to '#userName'@'#host';\nflush privileges;\n```\n\n### 查看并记录主库状态\n\n```\nshow master status;\n```\n记录下**File**和**Position**\n\n## 从库\n\n从库使用了Docker\n\n### 创建容器并挂在数据卷\nvi打开/etc/my.cnf写入👇\n```\ndocker run -id \\\n-p 3307:3306 \\\n--name=c_mysql \\\n-v $PWD/conf:/etc/mysql \\\n-v $PWD/logs:/logs \\\n-v $PWD/mysql-files:/var/lib/mysql-files \\\n-e MYSQL_ROOT_PASSWORD=**** \\\nmysql:8.0.26\n```\n\n### 修改从库配置文件\nvi打开$PWD/conf/my.cnf文件添加👇\n```\n[mysqld]\n## 设置serverid,同一个局域网内要唯一\nserver_id=101\n##指定不需要同步的数据库名称\nbinlog-ignore-db=mysql\n##开启二进制日志功能\nlog-bin=mall-mysql-slave1-bin\n##设置二进制日志使用内存大小(事务)\nbinlog_cache_size=1M\n##设置使用的二进制日志格式\nbinlog_format=mixed\n##二进制日志过期清理时间\nexpire_logs_days=7\n##跳过主从复制中所有错误或指定类型的错误，避免slave端复制中断\n###1062主键重复，1032主重数据不一致\nslave_skip_errors=1062\n##配置中继日志\nrelay_log=mall-mysql-relay-bin\n##表示slave将复制事件写进自己的二进制日志\nlog_slave_updates=1\n##slave设置为只读\nread_only=1\n```\n\n### 重启Docker容器\n\n### 开启从库Slave模式\n进入容器Bash后登录数据库，执行👇\n```\nchange master to master_host='****', master_user='slave', master_password='****', master_port=3306, master_log_file='mysql-bin.000004', master_log_pos=156;\n```\n\n- master_log_file 参考主库状态的**File**\n- master_log_pos 参考主库状态的**Position**\n\n```\nstart slave;\n```\n\n查看是否开启\n```\nshow slave status;\n```","source":"_posts/Mysql主从复制基于Docker的实现.md","raw":"---\ntitle:  Mysql主从复制————基于Docker的实现\ntags: [Mysql, Docker, 数据库, 后端]\ncategories: [数据库]\ndate: 2022-9-21\n\n---\n\n## 主库\n\n**主库采用远程服务器中安装的Mysql 8.0.26**\n### Step1 修改配置文件\n\nvi打开/etc/my.cnf写入👇\n\n```\nlog-bin=mysql-bin   #[必须]启用二进制日志\nserver-id=100       #[必须]配置服务器ID，可自定\n```\n\n### Step2 重启Mysql服务\n\n```\nsystemctl restart mysqld\n```\n\n### Step3 创建从库用户并授权\n\n```\ncreate user ‘#userName’@’#host’ identified by ‘#passWord’;\n```\n- **#userName** 代表你要创建的此数据库的新用户账号\n- **#host** 代表访问权限，如下：\n  - **%** 代表通配所有host地址权限(可远程访问)\n  - **localhost** 为本地权限(不可远程访问)\n  - 指定特殊Ip访问权限 如10.138.106.102\n\n```\ngrant all privileges on *.* to '#userName'@'#host';\nflush privileges;\n```\n\n### 查看并记录主库状态\n\n```\nshow master status;\n```\n记录下**File**和**Position**\n\n## 从库\n\n从库使用了Docker\n\n### 创建容器并挂在数据卷\nvi打开/etc/my.cnf写入👇\n```\ndocker run -id \\\n-p 3307:3306 \\\n--name=c_mysql \\\n-v $PWD/conf:/etc/mysql \\\n-v $PWD/logs:/logs \\\n-v $PWD/mysql-files:/var/lib/mysql-files \\\n-e MYSQL_ROOT_PASSWORD=**** \\\nmysql:8.0.26\n```\n\n### 修改从库配置文件\nvi打开$PWD/conf/my.cnf文件添加👇\n```\n[mysqld]\n## 设置serverid,同一个局域网内要唯一\nserver_id=101\n##指定不需要同步的数据库名称\nbinlog-ignore-db=mysql\n##开启二进制日志功能\nlog-bin=mall-mysql-slave1-bin\n##设置二进制日志使用内存大小(事务)\nbinlog_cache_size=1M\n##设置使用的二进制日志格式\nbinlog_format=mixed\n##二进制日志过期清理时间\nexpire_logs_days=7\n##跳过主从复制中所有错误或指定类型的错误，避免slave端复制中断\n###1062主键重复，1032主重数据不一致\nslave_skip_errors=1062\n##配置中继日志\nrelay_log=mall-mysql-relay-bin\n##表示slave将复制事件写进自己的二进制日志\nlog_slave_updates=1\n##slave设置为只读\nread_only=1\n```\n\n### 重启Docker容器\n\n### 开启从库Slave模式\n进入容器Bash后登录数据库，执行👇\n```\nchange master to master_host='****', master_user='slave', master_password='****', master_port=3306, master_log_file='mysql-bin.000004', master_log_pos=156;\n```\n\n- master_log_file 参考主库状态的**File**\n- master_log_pos 参考主库状态的**Position**\n\n```\nstart slave;\n```\n\n查看是否开启\n```\nshow slave status;\n```","slug":"Mysql主从复制基于Docker的实现","published":1,"updated":"2022-09-21T12:08:24.254Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdkx0071a8vw99efd0hq","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"主库\"><a href=\"#主库\" class=\"headerlink\" title=\"主库\"></a>主库</h2><p><strong>主库采用远程服务器中安装的Mysql 8.0.26</strong></p>\n<h3 id=\"Step1-修改配置文件\"><a href=\"#Step1-修改配置文件\" class=\"headerlink\" title=\"Step1 修改配置文件\"></a>Step1 修改配置文件</h3><p>vi打开/etc/my.cnf写入👇</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log-bin=mysql-bin   #[必须]启用二进制日志</span><br><span class=\"line\">server-id=100       #[必须]配置服务器ID，可自定</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Step2-重启Mysql服务\"><a href=\"#Step2-重启Mysql服务\" class=\"headerlink\" title=\"Step2 重启Mysql服务\"></a>Step2 重启Mysql服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart mysqld</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Step3-创建从库用户并授权\"><a href=\"#Step3-创建从库用户并授权\" class=\"headerlink\" title=\"Step3 创建从库用户并授权\"></a>Step3 创建从库用户并授权</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create user ‘#userName’@’#host’ identified by ‘#passWord’;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>#userName</strong> 代表你要创建的此数据库的新用户账号</li>\n<li><strong>#host</strong> 代表访问权限，如下：<ul>\n<li><strong>%</strong> 代表通配所有host地址权限(可远程访问)</li>\n<li><strong>localhost</strong> 为本地权限(不可远程访问)</li>\n<li>指定特殊Ip访问权限 如10.138.106.102</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant all privileges on *.* to &apos;#userName&apos;@&apos;#host&apos;;</span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看并记录主库状态\"><a href=\"#查看并记录主库状态\" class=\"headerlink\" title=\"查看并记录主库状态\"></a>查看并记录主库状态</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show master status;</span><br></pre></td></tr></table></figure>\n\n<p>记录下<strong>File</strong>和<strong>Position</strong></p>\n<h2 id=\"从库\"><a href=\"#从库\" class=\"headerlink\" title=\"从库\"></a>从库</h2><p>从库使用了Docker</p>\n<h3 id=\"创建容器并挂在数据卷\"><a href=\"#创建容器并挂在数据卷\" class=\"headerlink\" title=\"创建容器并挂在数据卷\"></a>创建容器并挂在数据卷</h3><p>vi打开/etc/my.cnf写入👇</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -id \\</span><br><span class=\"line\">-p 3307:3306 \\</span><br><span class=\"line\">--name=c_mysql \\</span><br><span class=\"line\">-v $PWD/conf:/etc/mysql \\</span><br><span class=\"line\">-v $PWD/logs:/logs \\</span><br><span class=\"line\">-v $PWD/mysql-files:/var/lib/mysql-files \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=**** \\</span><br><span class=\"line\">mysql:8.0.26</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改从库配置文件\"><a href=\"#修改从库配置文件\" class=\"headerlink\" title=\"修改从库配置文件\"></a>修改从库配置文件</h3><p>vi打开$PWD/conf/my.cnf文件添加👇</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">## 设置serverid,同一个局域网内要唯一</span><br><span class=\"line\">server_id=101</span><br><span class=\"line\">##指定不需要同步的数据库名称</span><br><span class=\"line\">binlog-ignore-db=mysql</span><br><span class=\"line\">##开启二进制日志功能</span><br><span class=\"line\">log-bin=mall-mysql-slave1-bin</span><br><span class=\"line\">##设置二进制日志使用内存大小(事务)</span><br><span class=\"line\">binlog_cache_size=1M</span><br><span class=\"line\">##设置使用的二进制日志格式</span><br><span class=\"line\">binlog_format=mixed</span><br><span class=\"line\">##二进制日志过期清理时间</span><br><span class=\"line\">expire_logs_days=7</span><br><span class=\"line\">##跳过主从复制中所有错误或指定类型的错误，避免slave端复制中断</span><br><span class=\"line\">###1062主键重复，1032主重数据不一致</span><br><span class=\"line\">slave_skip_errors=1062</span><br><span class=\"line\">##配置中继日志</span><br><span class=\"line\">relay_log=mall-mysql-relay-bin</span><br><span class=\"line\">##表示slave将复制事件写进自己的二进制日志</span><br><span class=\"line\">log_slave_updates=1</span><br><span class=\"line\">##slave设置为只读</span><br><span class=\"line\">read_only=1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重启Docker容器\"><a href=\"#重启Docker容器\" class=\"headerlink\" title=\"重启Docker容器\"></a>重启Docker容器</h3><h3 id=\"开启从库Slave模式\"><a href=\"#开启从库Slave模式\" class=\"headerlink\" title=\"开启从库Slave模式\"></a>开启从库Slave模式</h3><p>进入容器Bash后登录数据库，执行👇</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">change master to master_host=&apos;****&apos;, master_user=&apos;slave&apos;, master_password=&apos;****&apos;, master_port=3306, master_log_file=&apos;mysql-bin.000004&apos;, master_log_pos=156;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>master_log_file 参考主库状态的<strong>File</strong></li>\n<li>master_log_pos 参考主库状态的<strong>Position</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start slave;</span><br></pre></td></tr></table></figure>\n\n<p>查看是否开启</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show slave status;</span><br></pre></td></tr></table></figure>","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h2 id=\"主库\"><a href=\"#主库\" class=\"headerlink\" title=\"主库\"></a>主库</h2><p><strong>主库采用远程服务器中安装的Mysql 8.0.26</strong></p>\n<h3 id=\"Step1-修改配置文件\"><a href=\"#Step1-修改配置文件\" class=\"headerlink\" title=\"Step1 修改配置文件\"></a>Step1 修改配置文件</h3><p>vi打开/etc/my.cnf写入👇</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log-bin=mysql-bin   #[必须]启用二进制日志</span><br><span class=\"line\">server-id=100       #[必须]配置服务器ID，可自定</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Step2-重启Mysql服务\"><a href=\"#Step2-重启Mysql服务\" class=\"headerlink\" title=\"Step2 重启Mysql服务\"></a>Step2 重启Mysql服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart mysqld</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Step3-创建从库用户并授权\"><a href=\"#Step3-创建从库用户并授权\" class=\"headerlink\" title=\"Step3 创建从库用户并授权\"></a>Step3 创建从库用户并授权</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create user ‘#userName’@’#host’ identified by ‘#passWord’;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>#userName</strong> 代表你要创建的此数据库的新用户账号</li>\n<li><strong>#host</strong> 代表访问权限，如下：<ul>\n<li><strong>%</strong> 代表通配所有host地址权限(可远程访问)</li>\n<li><strong>localhost</strong> 为本地权限(不可远程访问)</li>\n<li>指定特殊Ip访问权限 如10.138.106.102</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant all privileges on *.* to &apos;#userName&apos;@&apos;#host&apos;;</span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看并记录主库状态\"><a href=\"#查看并记录主库状态\" class=\"headerlink\" title=\"查看并记录主库状态\"></a>查看并记录主库状态</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show master status;</span><br></pre></td></tr></table></figure>\n\n<p>记录下<strong>File</strong>和<strong>Position</strong></p>\n<h2 id=\"从库\"><a href=\"#从库\" class=\"headerlink\" title=\"从库\"></a>从库</h2><p>从库使用了Docker</p>\n<h3 id=\"创建容器并挂在数据卷\"><a href=\"#创建容器并挂在数据卷\" class=\"headerlink\" title=\"创建容器并挂在数据卷\"></a>创建容器并挂在数据卷</h3><p>vi打开/etc/my.cnf写入👇</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -id \\</span><br><span class=\"line\">-p 3307:3306 \\</span><br><span class=\"line\">--name=c_mysql \\</span><br><span class=\"line\">-v $PWD/conf:/etc/mysql \\</span><br><span class=\"line\">-v $PWD/logs:/logs \\</span><br><span class=\"line\">-v $PWD/mysql-files:/var/lib/mysql-files \\</span><br><span class=\"line\">-e MYSQL_ROOT_PASSWORD=**** \\</span><br><span class=\"line\">mysql:8.0.26</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改从库配置文件\"><a href=\"#修改从库配置文件\" class=\"headerlink\" title=\"修改从库配置文件\"></a>修改从库配置文件</h3><p>vi打开$PWD/conf/my.cnf文件添加👇</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">## 设置serverid,同一个局域网内要唯一</span><br><span class=\"line\">server_id=101</span><br><span class=\"line\">##指定不需要同步的数据库名称</span><br><span class=\"line\">binlog-ignore-db=mysql</span><br><span class=\"line\">##开启二进制日志功能</span><br><span class=\"line\">log-bin=mall-mysql-slave1-bin</span><br><span class=\"line\">##设置二进制日志使用内存大小(事务)</span><br><span class=\"line\">binlog_cache_size=1M</span><br><span class=\"line\">##设置使用的二进制日志格式</span><br><span class=\"line\">binlog_format=mixed</span><br><span class=\"line\">##二进制日志过期清理时间</span><br><span class=\"line\">expire_logs_days=7</span><br><span class=\"line\">##跳过主从复制中所有错误或指定类型的错误，避免slave端复制中断</span><br><span class=\"line\">###1062主键重复，1032主重数据不一致</span><br><span class=\"line\">slave_skip_errors=1062</span><br><span class=\"line\">##配置中继日志</span><br><span class=\"line\">relay_log=mall-mysql-relay-bin</span><br><span class=\"line\">##表示slave将复制事件写进自己的二进制日志</span><br><span class=\"line\">log_slave_updates=1</span><br><span class=\"line\">##slave设置为只读</span><br><span class=\"line\">read_only=1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"重启Docker容器\"><a href=\"#重启Docker容器\" class=\"headerlink\" title=\"重启Docker容器\"></a>重启Docker容器</h3><h3 id=\"开启从库Slave模式\"><a href=\"#开启从库Slave模式\" class=\"headerlink\" title=\"开启从库Slave模式\"></a>开启从库Slave模式</h3><p>进入容器Bash后登录数据库，执行👇</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">change master to master_host=&apos;****&apos;, master_user=&apos;slave&apos;, master_password=&apos;****&apos;, master_port=3306, master_log_file=&apos;mysql-bin.000004&apos;, master_log_pos=156;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>master_log_file 参考主库状态的<strong>File</strong></li>\n<li>master_log_pos 参考主库状态的<strong>Position</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start slave;</span><br></pre></td></tr></table></figure>\n\n<p>查看是否开启</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show slave status;</span><br></pre></td></tr></table></figure>"},{"title":"Nginx基本使用","date":"2022-11-08T16:00:00.000Z","_content":"# Nginx 基本使用\n\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.7e2zl4ci9t40.webp)\n\n## 目录结构\n\n进入Nginx的主目录我们可以看到这些文件夹\n\n```sh\n[root@master /]# cd /usr/local/nginx/\n[root@master nginx]# ll\n总用量 0\ndrwx------ 2 nobody root   6 7月  27 20:35 client_body_temp\ndrwxr-xr-x 2 root   root 333 7月  27 20:31 conf\ndrwx------ 2 nobody root   6 7月  27 20:35 fastcgi_temp\ndrwxr-xr-x 2 root   root  40 7月  27 20:31 html\ndrwxr-xr-x 2 root   root  58 7月  27 20:35 logs\ndrwx------ 2 nobody root   6 7月  27 20:35 proxy_temp\ndrwxr-xr-x 2 root   root  36 7月  27 20:33 sbin\ndrwx------ 2 nobody root   6 7月  27 20:35 scgi_temp\ndrwx------ 2 nobody root   6 7月  27 20:35 uwsgi_temp\n```\n\n其中这几个文件夹在刚安装后是没有的，主要用来存放运行过程中的临时文件\n\n```sh\nclient_body_temp fastcgi_temp proxy_temp scgi_temp\n```\n\n+ 主要目录说明\n\n| 目录 | 说明                                   |\n| ---- | -------------------------------------- |\n| conf | 用来存放配置文件相关                   |\n| html | 用来存放静态文件的默认目录 html、css等 |\n| sbin | nginx的主程序                          |\n\n## 基本运行原理\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.5klrdamfdsg0.webp)\n\n## 启动停止命令\n\n对于 Nginx 的启停在 Linux 系统中也有很多种方式，我们介绍两种方式：\n\n- Nginx 服务的信号控制\n- Nginx 的命令行控制\n\n### 服务信号控制\n\n在了解内容之前，我们首先要考虑一些问题：\n\n- Nginx 中的 master 和 worker 进程?\n\n- Nginx 的工作方式?\n\n- 如何获取进程的 PID?\n\n- 信号有哪些?\n\n- 如何通过信号控制 Nginx 的启停等相关操作?\n\n\n前面在提到 Nginx 的高性能，其实也和它的架构模式有关。Nginx 默认采用的是多进程的方式来工作的，当将 Nginx 启动后，我们通过 `ps -ef | grep nginx` 命令可以查看到如下内容：\n\n```sh\nps -ef | grep nginx\n```\n\n```sh\n[root@master sbin]# ps -ef| grep nginx\nroot       3564      1  0 13:54 ?        00:00:00 nginx: master process ./nginx\nnobody     3565   3564  0 13:54 ?        00:00:00 nginx: worker process\nroot       3567   3483  0 13:54 pts/1    00:00:00 grep --color=auto nginx\n```\n\n从上图中可以看到，Nginx 后台进程中包含一个 master 进程和多个 worker 进程，master 进程主要用来管理 worker 进程，包含接收外界的信息，并将接收到的信号发送给各个 worker 进程，监控 worker 进程的状态。当 worker 进程出现异常退出后，会自动重新启动新的 worker 进程。而 worker 进程则是专门用来处理用户请求的，各个 worker 进程之间是平等的并且相互独立，处理请求的机会也是一样的。\n\nNginx 的进程模型，我们可以通过下图来说明下：\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.2i4zuw23isa0.webp)\n\n我们现在作为管理员，只需要通过给 master 进程发送信号就可以来控制 Nginx，这个时候我们需要有两个前提条件，一个是要操作的 master 进程，一个是 给 master 进程的信号。\n\n1. 要想操作 Nginx 的 master 进程，就需要获取到 master 进程的进程号 PID。获取方式简单介绍两个：\n\n+ 通过 `ps -ef | grep nginx`\n\n```sh\nps -ef | grep nginx\n```\n\n+ 在讲解 Nginx 的 `./configure` 的配置参数的时候，有一个参数 `--pid-path=PATH`，它的默认值是 `/usr/local/nginx/logs/nginx.pid`，所以可以通过查看该文件来获取 Nginx 的 master 进程 PID\n\n```sh\ncat /usr/local/nginx/logs/nginx.pid\n```\n\n2. 信号(signal)\n\n| 信号     | 作用                                                         |\n| -------- | ------------------------------------------------------------ |\n| TERM/INT | 立即关闭整个服务（关闭 Nginx）                               |\n| QUIT     | 「优雅」的关闭整个服务（关闭 Nginx）                         |\n| HUP      | 重读配置文件并使用服务对新配置项生效（重启 Nginx）           |\n| USR1     | 重新打开日志文件，可以用来进行日志切割（重启日志）           |\n| USR2     | 平滑升级到最新版的 Nginx                                     |\n| WINCH    | 所有子进程不在接收处理新连接，相当于给 Work 进程发送 QUIT 指令 |\n\n调用命令为 `kill -signal PID`\n\n> signal：即为信号；PID 即为获取到的 master 进程 PID\n\n```sh\nkill -signal PID\n```\n\n```sh\n# 格式一：\nkill -TERM PID\n\n# 立即关闭当前线程\nkill -TERM `cat /usr/local/nginx/logs/nginx.pid`\n\n# 格式一：\nkill -INT PID\n\n# 立即关闭当前线程\nkill -INT `cat /usr/local/nginx/logs/nginx.pid`\n```\n\n+ 案例\n\n1. 发送 TERM/INT 信号给 master 进程，会将 Nginx 服务立即关闭。\n\n```sh\n[root@master nginx]# cat logs/nginx.pid\n3564\n[root@master nginx]# kill  -TERM 3564\n[root@master nginx]# ps -ef | grep nginx\nroot       8874   8753  0 15:58 pts/2    00:00:00 grep --color=auto nginx\n```\n\n2. 发送 QUIT 信号给 master 进程，master 进程会控制所有的 work 进程不再接收新的请求，等所有请求处理完后，在把进程都关闭掉。\n\n```sh\n# 优雅 关闭线程\nkill -QUIT PID\n\n# 「优雅」关闭当前线程\nkill -QUIT `cat /usr/local/nginx/logs/nginx.pid`\n```\n\n3. 发送 HUP 信号给 master 进程，master 进程会把控制旧的 worker 进程不再接收新的请求，等处理完请求后将旧的 worker 进程关闭掉，然后根据<mark>更改Nginx 的配置文件</mark>重新启动新的 worker 进程\n\n```sh\n# 重启 worker 进程\nkill -HUP PID \n\n# 重启当前 worker 进程\nkill -HUP `cat /usr/local/nginx/logs/nginx.pid`\n```\n\n4. 发送 USR1 信号给 master 进程，告诉 Nginx 重新开启日志文件。如果日志文件被删除了，可以利用此命令重新打开。\n\n```sh\n# 重新打开日志文件\nkill -USR1 PID\n\n# 重新打开当前 Nginx 的日志文件\nkill -USR1 `cat /usr/local/nginx/logs/nginx.pid`\n```\n\n5. 发送 USR2 信号给 master 进程，告诉 master 进程要平滑升级，这个时候，会重新开启对应的 master 进程和 worker 进程，整个系统中将会有两个master 进程，并且新的 master 进程的 PID 会被记录在 `/usr/local/nginx/logs/nginx.pid`，而之前的旧的 master 进程 PID 会被记录在 `/usr/local/nginx/logs/nginx.pid.oldbin` 文件中，接着再次发送 QUIT 信号给旧的 master 进程，让其处理完请求后再进行关闭\n\n```sh\n# 开启新的进程，但是不删除旧的进程\nkill -USR2 PID\n\n# 开启新的进程，但是不删除当前进程\nkill -USR2 `cat /usr/local/nginx/logs/nginx.pid`\n```\n\n当新进程升级后（完全启动后），再关闭旧的进程，旧进程的 PID 在另一个 `nginx.pid.oldbin` 文件里\n\n```sh\n# 关闭旧的线程\nkill -QUIT `cat /usr/local/nginx/logs/nginx.pid.oldbin`\n```\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.5dgklob27do0.webp)\n\n6. 发送 WINCH 信号给 master 进程,让 master 进程控制不让所有的 worker 进程在接收新的请求了，请求处理完后关闭 worker 进程。注意 master 进程不会被关闭掉\n\n```sh\n# 停止 worker 进程，但是不停止 master 进程\nkill -WINCH PID \n\n# 停止当前 worker 进程，但是不停止 master 进程\nkill -WINCH `cat /usr/local/nginx/logs/nginx.pid`\n```\n\n### 命令行控制\n\n此方式是通过 Nginx 安装目录下的 sbin 下的可执行文件 nginx(文件名) 来进行对 Nginx 状态的控制，我们可以通过 `nginx -h` 来查看都有哪些参数可以用\n\n```sh\n[root@master sbin]# ./nginx -h\nnginx version: nginx/1.21.6\nUsage: nginx [-?hvVtTq] [-s signal] [-p prefix]\n             [-e filename] [-c filename] [-g directives]\n\nOptions:\n  -?,-h         : this help\n  -v            : show version and exit\n  -V            : show version and configure options then exit\n  -t            : test configuration and exit\n  -T            : test configuration, dump it and exit\n  -q            : suppress non-error messages during configuration testing\n  -s signal     : send signal to a master process: stop, quit, reopen, reload\n  -p prefix     : set prefix path (default: /usr/local/nginx/)\n  -e filename   : set error log file (default: logs/error.log)\n  -c filename   : set configuration file (default: conf/nginx.conf)\n  -g directives : set global directives out of configuration file\n```\n\n| 选项     | 作用                                                         |\n| -------- | ------------------------------------------------------------ |\n| -? 和 -h | 显示帮助信息                                                 |\n| -v       | 打印版本号信息并退出                                         |\n| -V       | 打印版本号信息和配置信息并退出                               |\n| -t       | 测试 Nginx 的配置文件语法是否正确并退出                      |\n| -T       | 测试 Nginx 的配置文件语法是否正确并列出用到的配置文件信息然后退出 |\n| -q       | 在配置测试期间过滤掉非错误消息                               |\n| -s       | signal 信号，后面的命令和服务信号控制功能类似：  `stop`：快速关闭，类似于 TERM/INT 信号的作用 `quit`：优雅的关闭，类似于 QUIT 信号的作用 `reopen`：重新打开日志文件类似于 USR1 信号的作用 `reload`：重启 Nginx，类似于 HUP 信号的作用 |\n| -p       | prefix，指定 Nginx 的默认安装路径，(默认为：/usr/local/nginx/) |\n| -c       | filename，指定 Nginx 的配置文件路径,(默认为：conf/nginx.conf) |\n| -g       | 用来补充 Nginx 配置文件，向 Nginx 服务指定启动时应用全局的配置 |\n\n+ 案例\n\n如果觉得每次执行 nginx 指令都必须进入 sbin 目录，则将该指令设置为全局使用。\n\n1. 两个查看版本命令\n\n```sh\n# 查看版本指令 1\n[root@master sbin]# nginx -v\n# 返回结果\nnginx version: nginx/1.21.6\n\n# 查看版本指令 2\n[root@master sbin]# nginx -V\n# 返回结果\nnginx version: nginx/1.21.6\nbuilt by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)\nconfigure arguments: --prefix=/usr/local/nginx\n```\n\n2. 测试 Nginx 的配置文件语法\n\n我们首先要知道配置文件的路径在哪，先执行 `-t` 进行测试\n\n```sh \n# 测试 Nginx 的配置文件语法\n[root@master sbin]# nginx -t\n\n#结果 返回 成功\nnginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok\nnginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful\n```\n\n由第 6 行代码可以知道测试成功，第 5 行代码告诉我们配置文件的目录，我们去修改配置文件，然后再进行测试\n\n```sh\n[root@master sbin]# vim /usr/local/nginx/conf/nginx.conf\n\n###add\nHelloWorld\n```\n\n重新进行测试\n\n```sh\n# 测试 Nginx 的配置文件语法\n[root@master sbin]# nginx -t\n\n# 返回结果（失败）\nnginx: [emerg] unknown directive \"HelloWorld\" in /usr/local/nginx/conf/nginx.conf:3\nnginx: configuration file /usr/local/nginx/conf/nginx.conf test failed\n```\n\n由第 6 行代码可以知道，配置文件出错了。验证完了，记得将配置文件改回来。\n\n3. 指定 Nginx 的默认安装路径\n\n```sh\nnginx -p /usr/local/nginx/\n```\n\n4. 指定 Nginx 的配置文件路径\n\n先把配置文件拷贝到另一个目录，然后修改拷贝后的配置文件内容\n\n```sh\n# 拷贝配置文件\ncp /usr/local/nginx/conf/nginx.conf /opt\n\n# 修改拷贝后的配置文件内容\nvim /opt/nginx.conf\n\n# add\nHelloWorld\n```\n\n测试配置文件的时候，指定拷贝后的配置文件进行测试\n\n```sh\n# 指定配置文件进行测试\n[root@master nginx]# nginx -tc /opt/nginx.conf\n\n#返回结果\nnginx: [emerg] unknown directive \"HelloWorld\" in /opt/nginx.conf:3\nnginx: configuration file /opt/nginx.conf test failed\n```\n\n说明指定配置文件目录生效，只是文件内容语法不对。\n\n## 版本升级和新增模块\n\n如果想对 Nginx 的版本进行更新，或者要应用一些新的模块，最简单的做法就是停止当前的 Nginx 服务，然后开启新的 Nginx 服务。但是这样会导致在一段时间内，用户是无法访问服务器。为了解决这个问题，我们就需要用到 Nginx 服务器提供的平滑升级功能。这个也是 Nginx 的一大特点，使用这种方式，就可以使 Nginx 在 7 * 24 小时不间断的提供服务了。接下来我们分析下需求：\n\n> 需求：Nginx 的版本最开始使用的是 Nginx-1.14.2，由于服务升级，需要将 Nginx 的版本升级到 Nginx-1.16.1,要求 Nginx 不能中断提供服务。\n\n为了应对上述的需求，这里我们提供两种解决方案:\n\n- 使用 Nginx 服务信号完成 Nginx 的升级\n- 使用 Nginx 安装目录的 make 命令完成升级\n\n版本升级其实就是替换可执行文件 nginx。\n\n### 环境准备\n\n1. 先准备两个版本的 Nginx 分别是 1.14.2 和 1.16.1\n2. 使用 Nginx 源码安装的方式将 1.14.2 版本安装成功并正确访问\n\n```sh\n# 解压 1.14.2 版本\ntar -xzf nginx-1.14.2.tar.gz\n# 进入解压目录\ncd nginx-1.14.2/\n\n# 执行配置文件\n./configure\n\n# 编译安装\nmake && make install\n```\n\n3. 将 Nginx 1.16.1 版本进行参数配置和编译，不需要进行安装。\n\n```sh\n# 解压 1.16.1 版本\ntar -xzf nginx-1.16.1.tar.gz\n# 进入解压目录\ncd nginx-1.16.1/\n\n# 执行配置文件\n./configure\n\n# 仅仅编译\nmake \n```\n\n### 服务信号进行升级\n\n第一步:将 1.14.2 版本的 sbin 目录下的 nginx 进行备份\n\n> 不是复制一份，是直接修改原来的 nginx。\n\n```sh\n# 进入 sbin 目录下\ncd /usr/local/nginx/sbin\n\n# 备份为 nginxold 文件\nmv nginx nginx.backup\n```\n\n第二步：将 Nginx 1.16.1 安装目录编译后的 objs 目录下的 nginx 文件，拷贝到原来 `/usr/local/nginx/sbin` 目录下\n\n如果第一步没有备份，那么将会覆盖 1.14.2 的 nginx 文件\n\n```sh\n# 进入 objs 目录\ncd ~/nginx/core/nginx-1.16.1/objs\n\n# 拷贝可执行文件到原来的目录\ncp nginx /usr/local/nginx/sbin\n```\n\n第三步：发送信号 USR2 给 Nginx 的 1.14.2 版本对应的 master 进程\n\n```sh\nkill -USR2 `cat /usr/local/logs/nginx.pid`\n```\n\n第四步：发送信号 QUIT 给 Nginx 的 1.14.2 版本对应的 master 进程\n\n```sh\nkill -QUIT `cat /usr/local/logs/nginx.pid.oldbin`\n```\n\n### 安装目录的make命令完成升级\n\n第一步：将 1.14.2 版本的 sbin 目录下的 nginx 进行备份\n\n> 不是复制一份，是直接修改原来的 nginx。\n\n```sh\n# 进入 sbin 目录下\ncd /usr/local/nginx/sbin\n\n# 备份为 nginxold 文件\nmv nginx nginx.backup\n```\n\n第二步：将 Nginx1.16.1 安装目录编译后的 objs 目录下的 nginx 文件，拷贝到原来 `/usr/local/nginx/sbin` 目录下\n\n```sh\n# 进入 objs 目录\ncd ~/nginx/core/nginx-1.16.1/objs\n\n# 拷贝可执行文件到原来的目录\ncp nginx /usr/local/nginx/sbin\n```\n\n第三步：进入到安装目录，执行 `make upgrade`\n\n```sh\nmake upgrade\n```\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.2hpc905f42a0.webp)\n\n第四步：查看是否更新成功\n\n```sh\nnginx -v\n```\n\n在整个过程中，其实 Nginx 是一直对外提供服务的。并且当 Nginx 的服务器启动成功后，我们是可以通过浏览器进行直接访问的，同时我们可以通过更改 html 目录下的页面来修改我们在页面上所看到的内容，那么问题来了，为什么我们要修改 html 目录下的文件，能不能多添加一些页面是 Nginx 的功能更加丰富，还有前面聊到 Nginx 的前端功能又是如何来实现的，这就需要我们对 [Nginx 的核心配置文件](/middleware/Nginx/Nginx_Configuration_file) 进行一个详细的学习。\n\n","source":"_posts/Nginx_Base_Use.md","raw":"---\ntitle:  Nginx基本使用\ntags: [Nginx, 中间件, 后端]\ncategories: [Nginx]\ndate: 2022-11-9\n---\n# Nginx 基本使用\n\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.7e2zl4ci9t40.webp)\n\n## 目录结构\n\n进入Nginx的主目录我们可以看到这些文件夹\n\n```sh\n[root@master /]# cd /usr/local/nginx/\n[root@master nginx]# ll\n总用量 0\ndrwx------ 2 nobody root   6 7月  27 20:35 client_body_temp\ndrwxr-xr-x 2 root   root 333 7月  27 20:31 conf\ndrwx------ 2 nobody root   6 7月  27 20:35 fastcgi_temp\ndrwxr-xr-x 2 root   root  40 7月  27 20:31 html\ndrwxr-xr-x 2 root   root  58 7月  27 20:35 logs\ndrwx------ 2 nobody root   6 7月  27 20:35 proxy_temp\ndrwxr-xr-x 2 root   root  36 7月  27 20:33 sbin\ndrwx------ 2 nobody root   6 7月  27 20:35 scgi_temp\ndrwx------ 2 nobody root   6 7月  27 20:35 uwsgi_temp\n```\n\n其中这几个文件夹在刚安装后是没有的，主要用来存放运行过程中的临时文件\n\n```sh\nclient_body_temp fastcgi_temp proxy_temp scgi_temp\n```\n\n+ 主要目录说明\n\n| 目录 | 说明                                   |\n| ---- | -------------------------------------- |\n| conf | 用来存放配置文件相关                   |\n| html | 用来存放静态文件的默认目录 html、css等 |\n| sbin | nginx的主程序                          |\n\n## 基本运行原理\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.5klrdamfdsg0.webp)\n\n## 启动停止命令\n\n对于 Nginx 的启停在 Linux 系统中也有很多种方式，我们介绍两种方式：\n\n- Nginx 服务的信号控制\n- Nginx 的命令行控制\n\n### 服务信号控制\n\n在了解内容之前，我们首先要考虑一些问题：\n\n- Nginx 中的 master 和 worker 进程?\n\n- Nginx 的工作方式?\n\n- 如何获取进程的 PID?\n\n- 信号有哪些?\n\n- 如何通过信号控制 Nginx 的启停等相关操作?\n\n\n前面在提到 Nginx 的高性能，其实也和它的架构模式有关。Nginx 默认采用的是多进程的方式来工作的，当将 Nginx 启动后，我们通过 `ps -ef | grep nginx` 命令可以查看到如下内容：\n\n```sh\nps -ef | grep nginx\n```\n\n```sh\n[root@master sbin]# ps -ef| grep nginx\nroot       3564      1  0 13:54 ?        00:00:00 nginx: master process ./nginx\nnobody     3565   3564  0 13:54 ?        00:00:00 nginx: worker process\nroot       3567   3483  0 13:54 pts/1    00:00:00 grep --color=auto nginx\n```\n\n从上图中可以看到，Nginx 后台进程中包含一个 master 进程和多个 worker 进程，master 进程主要用来管理 worker 进程，包含接收外界的信息，并将接收到的信号发送给各个 worker 进程，监控 worker 进程的状态。当 worker 进程出现异常退出后，会自动重新启动新的 worker 进程。而 worker 进程则是专门用来处理用户请求的，各个 worker 进程之间是平等的并且相互独立，处理请求的机会也是一样的。\n\nNginx 的进程模型，我们可以通过下图来说明下：\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.2i4zuw23isa0.webp)\n\n我们现在作为管理员，只需要通过给 master 进程发送信号就可以来控制 Nginx，这个时候我们需要有两个前提条件，一个是要操作的 master 进程，一个是 给 master 进程的信号。\n\n1. 要想操作 Nginx 的 master 进程，就需要获取到 master 进程的进程号 PID。获取方式简单介绍两个：\n\n+ 通过 `ps -ef | grep nginx`\n\n```sh\nps -ef | grep nginx\n```\n\n+ 在讲解 Nginx 的 `./configure` 的配置参数的时候，有一个参数 `--pid-path=PATH`，它的默认值是 `/usr/local/nginx/logs/nginx.pid`，所以可以通过查看该文件来获取 Nginx 的 master 进程 PID\n\n```sh\ncat /usr/local/nginx/logs/nginx.pid\n```\n\n2. 信号(signal)\n\n| 信号     | 作用                                                         |\n| -------- | ------------------------------------------------------------ |\n| TERM/INT | 立即关闭整个服务（关闭 Nginx）                               |\n| QUIT     | 「优雅」的关闭整个服务（关闭 Nginx）                         |\n| HUP      | 重读配置文件并使用服务对新配置项生效（重启 Nginx）           |\n| USR1     | 重新打开日志文件，可以用来进行日志切割（重启日志）           |\n| USR2     | 平滑升级到最新版的 Nginx                                     |\n| WINCH    | 所有子进程不在接收处理新连接，相当于给 Work 进程发送 QUIT 指令 |\n\n调用命令为 `kill -signal PID`\n\n> signal：即为信号；PID 即为获取到的 master 进程 PID\n\n```sh\nkill -signal PID\n```\n\n```sh\n# 格式一：\nkill -TERM PID\n\n# 立即关闭当前线程\nkill -TERM `cat /usr/local/nginx/logs/nginx.pid`\n\n# 格式一：\nkill -INT PID\n\n# 立即关闭当前线程\nkill -INT `cat /usr/local/nginx/logs/nginx.pid`\n```\n\n+ 案例\n\n1. 发送 TERM/INT 信号给 master 进程，会将 Nginx 服务立即关闭。\n\n```sh\n[root@master nginx]# cat logs/nginx.pid\n3564\n[root@master nginx]# kill  -TERM 3564\n[root@master nginx]# ps -ef | grep nginx\nroot       8874   8753  0 15:58 pts/2    00:00:00 grep --color=auto nginx\n```\n\n2. 发送 QUIT 信号给 master 进程，master 进程会控制所有的 work 进程不再接收新的请求，等所有请求处理完后，在把进程都关闭掉。\n\n```sh\n# 优雅 关闭线程\nkill -QUIT PID\n\n# 「优雅」关闭当前线程\nkill -QUIT `cat /usr/local/nginx/logs/nginx.pid`\n```\n\n3. 发送 HUP 信号给 master 进程，master 进程会把控制旧的 worker 进程不再接收新的请求，等处理完请求后将旧的 worker 进程关闭掉，然后根据<mark>更改Nginx 的配置文件</mark>重新启动新的 worker 进程\n\n```sh\n# 重启 worker 进程\nkill -HUP PID \n\n# 重启当前 worker 进程\nkill -HUP `cat /usr/local/nginx/logs/nginx.pid`\n```\n\n4. 发送 USR1 信号给 master 进程，告诉 Nginx 重新开启日志文件。如果日志文件被删除了，可以利用此命令重新打开。\n\n```sh\n# 重新打开日志文件\nkill -USR1 PID\n\n# 重新打开当前 Nginx 的日志文件\nkill -USR1 `cat /usr/local/nginx/logs/nginx.pid`\n```\n\n5. 发送 USR2 信号给 master 进程，告诉 master 进程要平滑升级，这个时候，会重新开启对应的 master 进程和 worker 进程，整个系统中将会有两个master 进程，并且新的 master 进程的 PID 会被记录在 `/usr/local/nginx/logs/nginx.pid`，而之前的旧的 master 进程 PID 会被记录在 `/usr/local/nginx/logs/nginx.pid.oldbin` 文件中，接着再次发送 QUIT 信号给旧的 master 进程，让其处理完请求后再进行关闭\n\n```sh\n# 开启新的进程，但是不删除旧的进程\nkill -USR2 PID\n\n# 开启新的进程，但是不删除当前进程\nkill -USR2 `cat /usr/local/nginx/logs/nginx.pid`\n```\n\n当新进程升级后（完全启动后），再关闭旧的进程，旧进程的 PID 在另一个 `nginx.pid.oldbin` 文件里\n\n```sh\n# 关闭旧的线程\nkill -QUIT `cat /usr/local/nginx/logs/nginx.pid.oldbin`\n```\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.5dgklob27do0.webp)\n\n6. 发送 WINCH 信号给 master 进程,让 master 进程控制不让所有的 worker 进程在接收新的请求了，请求处理完后关闭 worker 进程。注意 master 进程不会被关闭掉\n\n```sh\n# 停止 worker 进程，但是不停止 master 进程\nkill -WINCH PID \n\n# 停止当前 worker 进程，但是不停止 master 进程\nkill -WINCH `cat /usr/local/nginx/logs/nginx.pid`\n```\n\n### 命令行控制\n\n此方式是通过 Nginx 安装目录下的 sbin 下的可执行文件 nginx(文件名) 来进行对 Nginx 状态的控制，我们可以通过 `nginx -h` 来查看都有哪些参数可以用\n\n```sh\n[root@master sbin]# ./nginx -h\nnginx version: nginx/1.21.6\nUsage: nginx [-?hvVtTq] [-s signal] [-p prefix]\n             [-e filename] [-c filename] [-g directives]\n\nOptions:\n  -?,-h         : this help\n  -v            : show version and exit\n  -V            : show version and configure options then exit\n  -t            : test configuration and exit\n  -T            : test configuration, dump it and exit\n  -q            : suppress non-error messages during configuration testing\n  -s signal     : send signal to a master process: stop, quit, reopen, reload\n  -p prefix     : set prefix path (default: /usr/local/nginx/)\n  -e filename   : set error log file (default: logs/error.log)\n  -c filename   : set configuration file (default: conf/nginx.conf)\n  -g directives : set global directives out of configuration file\n```\n\n| 选项     | 作用                                                         |\n| -------- | ------------------------------------------------------------ |\n| -? 和 -h | 显示帮助信息                                                 |\n| -v       | 打印版本号信息并退出                                         |\n| -V       | 打印版本号信息和配置信息并退出                               |\n| -t       | 测试 Nginx 的配置文件语法是否正确并退出                      |\n| -T       | 测试 Nginx 的配置文件语法是否正确并列出用到的配置文件信息然后退出 |\n| -q       | 在配置测试期间过滤掉非错误消息                               |\n| -s       | signal 信号，后面的命令和服务信号控制功能类似：  `stop`：快速关闭，类似于 TERM/INT 信号的作用 `quit`：优雅的关闭，类似于 QUIT 信号的作用 `reopen`：重新打开日志文件类似于 USR1 信号的作用 `reload`：重启 Nginx，类似于 HUP 信号的作用 |\n| -p       | prefix，指定 Nginx 的默认安装路径，(默认为：/usr/local/nginx/) |\n| -c       | filename，指定 Nginx 的配置文件路径,(默认为：conf/nginx.conf) |\n| -g       | 用来补充 Nginx 配置文件，向 Nginx 服务指定启动时应用全局的配置 |\n\n+ 案例\n\n如果觉得每次执行 nginx 指令都必须进入 sbin 目录，则将该指令设置为全局使用。\n\n1. 两个查看版本命令\n\n```sh\n# 查看版本指令 1\n[root@master sbin]# nginx -v\n# 返回结果\nnginx version: nginx/1.21.6\n\n# 查看版本指令 2\n[root@master sbin]# nginx -V\n# 返回结果\nnginx version: nginx/1.21.6\nbuilt by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)\nconfigure arguments: --prefix=/usr/local/nginx\n```\n\n2. 测试 Nginx 的配置文件语法\n\n我们首先要知道配置文件的路径在哪，先执行 `-t` 进行测试\n\n```sh \n# 测试 Nginx 的配置文件语法\n[root@master sbin]# nginx -t\n\n#结果 返回 成功\nnginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok\nnginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful\n```\n\n由第 6 行代码可以知道测试成功，第 5 行代码告诉我们配置文件的目录，我们去修改配置文件，然后再进行测试\n\n```sh\n[root@master sbin]# vim /usr/local/nginx/conf/nginx.conf\n\n###add\nHelloWorld\n```\n\n重新进行测试\n\n```sh\n# 测试 Nginx 的配置文件语法\n[root@master sbin]# nginx -t\n\n# 返回结果（失败）\nnginx: [emerg] unknown directive \"HelloWorld\" in /usr/local/nginx/conf/nginx.conf:3\nnginx: configuration file /usr/local/nginx/conf/nginx.conf test failed\n```\n\n由第 6 行代码可以知道，配置文件出错了。验证完了，记得将配置文件改回来。\n\n3. 指定 Nginx 的默认安装路径\n\n```sh\nnginx -p /usr/local/nginx/\n```\n\n4. 指定 Nginx 的配置文件路径\n\n先把配置文件拷贝到另一个目录，然后修改拷贝后的配置文件内容\n\n```sh\n# 拷贝配置文件\ncp /usr/local/nginx/conf/nginx.conf /opt\n\n# 修改拷贝后的配置文件内容\nvim /opt/nginx.conf\n\n# add\nHelloWorld\n```\n\n测试配置文件的时候，指定拷贝后的配置文件进行测试\n\n```sh\n# 指定配置文件进行测试\n[root@master nginx]# nginx -tc /opt/nginx.conf\n\n#返回结果\nnginx: [emerg] unknown directive \"HelloWorld\" in /opt/nginx.conf:3\nnginx: configuration file /opt/nginx.conf test failed\n```\n\n说明指定配置文件目录生效，只是文件内容语法不对。\n\n## 版本升级和新增模块\n\n如果想对 Nginx 的版本进行更新，或者要应用一些新的模块，最简单的做法就是停止当前的 Nginx 服务，然后开启新的 Nginx 服务。但是这样会导致在一段时间内，用户是无法访问服务器。为了解决这个问题，我们就需要用到 Nginx 服务器提供的平滑升级功能。这个也是 Nginx 的一大特点，使用这种方式，就可以使 Nginx 在 7 * 24 小时不间断的提供服务了。接下来我们分析下需求：\n\n> 需求：Nginx 的版本最开始使用的是 Nginx-1.14.2，由于服务升级，需要将 Nginx 的版本升级到 Nginx-1.16.1,要求 Nginx 不能中断提供服务。\n\n为了应对上述的需求，这里我们提供两种解决方案:\n\n- 使用 Nginx 服务信号完成 Nginx 的升级\n- 使用 Nginx 安装目录的 make 命令完成升级\n\n版本升级其实就是替换可执行文件 nginx。\n\n### 环境准备\n\n1. 先准备两个版本的 Nginx 分别是 1.14.2 和 1.16.1\n2. 使用 Nginx 源码安装的方式将 1.14.2 版本安装成功并正确访问\n\n```sh\n# 解压 1.14.2 版本\ntar -xzf nginx-1.14.2.tar.gz\n# 进入解压目录\ncd nginx-1.14.2/\n\n# 执行配置文件\n./configure\n\n# 编译安装\nmake && make install\n```\n\n3. 将 Nginx 1.16.1 版本进行参数配置和编译，不需要进行安装。\n\n```sh\n# 解压 1.16.1 版本\ntar -xzf nginx-1.16.1.tar.gz\n# 进入解压目录\ncd nginx-1.16.1/\n\n# 执行配置文件\n./configure\n\n# 仅仅编译\nmake \n```\n\n### 服务信号进行升级\n\n第一步:将 1.14.2 版本的 sbin 目录下的 nginx 进行备份\n\n> 不是复制一份，是直接修改原来的 nginx。\n\n```sh\n# 进入 sbin 目录下\ncd /usr/local/nginx/sbin\n\n# 备份为 nginxold 文件\nmv nginx nginx.backup\n```\n\n第二步：将 Nginx 1.16.1 安装目录编译后的 objs 目录下的 nginx 文件，拷贝到原来 `/usr/local/nginx/sbin` 目录下\n\n如果第一步没有备份，那么将会覆盖 1.14.2 的 nginx 文件\n\n```sh\n# 进入 objs 目录\ncd ~/nginx/core/nginx-1.16.1/objs\n\n# 拷贝可执行文件到原来的目录\ncp nginx /usr/local/nginx/sbin\n```\n\n第三步：发送信号 USR2 给 Nginx 的 1.14.2 版本对应的 master 进程\n\n```sh\nkill -USR2 `cat /usr/local/logs/nginx.pid`\n```\n\n第四步：发送信号 QUIT 给 Nginx 的 1.14.2 版本对应的 master 进程\n\n```sh\nkill -QUIT `cat /usr/local/logs/nginx.pid.oldbin`\n```\n\n### 安装目录的make命令完成升级\n\n第一步：将 1.14.2 版本的 sbin 目录下的 nginx 进行备份\n\n> 不是复制一份，是直接修改原来的 nginx。\n\n```sh\n# 进入 sbin 目录下\ncd /usr/local/nginx/sbin\n\n# 备份为 nginxold 文件\nmv nginx nginx.backup\n```\n\n第二步：将 Nginx1.16.1 安装目录编译后的 objs 目录下的 nginx 文件，拷贝到原来 `/usr/local/nginx/sbin` 目录下\n\n```sh\n# 进入 objs 目录\ncd ~/nginx/core/nginx-1.16.1/objs\n\n# 拷贝可执行文件到原来的目录\ncp nginx /usr/local/nginx/sbin\n```\n\n第三步：进入到安装目录，执行 `make upgrade`\n\n```sh\nmake upgrade\n```\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.2hpc905f42a0.webp)\n\n第四步：查看是否更新成功\n\n```sh\nnginx -v\n```\n\n在整个过程中，其实 Nginx 是一直对外提供服务的。并且当 Nginx 的服务器启动成功后，我们是可以通过浏览器进行直接访问的，同时我们可以通过更改 html 目录下的页面来修改我们在页面上所看到的内容，那么问题来了，为什么我们要修改 html 目录下的文件，能不能多添加一些页面是 Nginx 的功能更加丰富，还有前面聊到 Nginx 的前端功能又是如何来实现的，这就需要我们对 [Nginx 的核心配置文件](/middleware/Nginx/Nginx_Configuration_file) 进行一个详细的学习。\n\n","slug":"Nginx_Base_Use","published":1,"updated":"2022-11-09T04:08:27.900Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdky0073a8vw9hr2f1dn","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"Nginx-基本使用\"><a href=\"#Nginx-基本使用\" class=\"headerlink\" title=\"Nginx 基本使用\"></a>Nginx 基本使用</h1><p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.7e2zl4ci9t40.webp\" alt=\"image\"></p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>进入Nginx的主目录我们可以看到这些文件夹</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master /]<span class=\"comment\"># cd /usr/local/nginx/</span></span><br><span class=\"line\">[root@master nginx]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">drwx------ 2 nobody root   6 7月  27 20:35 client_body_temp</span><br><span class=\"line\">drwxr-xr-x 2 root   root 333 7月  27 20:31 conf</span><br><span class=\"line\">drwx------ 2 nobody root   6 7月  27 20:35 fastcgi_temp</span><br><span class=\"line\">drwxr-xr-x 2 root   root  40 7月  27 20:31 html</span><br><span class=\"line\">drwxr-xr-x 2 root   root  58 7月  27 20:35 logs</span><br><span class=\"line\">drwx------ 2 nobody root   6 7月  27 20:35 proxy_temp</span><br><span class=\"line\">drwxr-xr-x 2 root   root  36 7月  27 20:33 sbin</span><br><span class=\"line\">drwx------ 2 nobody root   6 7月  27 20:35 scgi_temp</span><br><span class=\"line\">drwx------ 2 nobody root   6 7月  27 20:35 uwsgi_temp</span><br></pre></td></tr></table></figure>\n\n<p>其中这几个文件夹在刚安装后是没有的，主要用来存放运行过程中的临时文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client_body_temp fastcgi_temp proxy_temp scgi_temp</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>主要目录说明</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>目录</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>conf</td>\n<td>用来存放配置文件相关</td>\n</tr>\n<tr>\n<td>html</td>\n<td>用来存放静态文件的默认目录 html、css等</td>\n</tr>\n<tr>\n<td>sbin</td>\n<td>nginx的主程序</td>\n</tr>\n</tbody></table>\n<h2 id=\"基本运行原理\"><a href=\"#基本运行原理\" class=\"headerlink\" title=\"基本运行原理\"></a>基本运行原理</h2><p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.5klrdamfdsg0.webp\" alt=\"image\"></p>\n<h2 id=\"启动停止命令\"><a href=\"#启动停止命令\" class=\"headerlink\" title=\"启动停止命令\"></a>启动停止命令</h2><p>对于 Nginx 的启停在 Linux 系统中也有很多种方式，我们介绍两种方式：</p>\n<ul>\n<li>Nginx 服务的信号控制</li>\n<li>Nginx 的命令行控制</li>\n</ul>\n<h3 id=\"服务信号控制\"><a href=\"#服务信号控制\" class=\"headerlink\" title=\"服务信号控制\"></a>服务信号控制</h3><p>在了解内容之前，我们首先要考虑一些问题：</p>\n<ul>\n<li><p>Nginx 中的 master 和 worker 进程?</p>\n</li>\n<li><p>Nginx 的工作方式?</p>\n</li>\n<li><p>如何获取进程的 PID?</p>\n</li>\n<li><p>信号有哪些?</p>\n</li>\n<li><p>如何通过信号控制 Nginx 的启停等相关操作?</p>\n</li>\n</ul>\n<p>前面在提到 Nginx 的高性能，其实也和它的架构模式有关。Nginx 默认采用的是多进程的方式来工作的，当将 Nginx 启动后，我们通过 <code>ps -ef | grep nginx</code> 命令可以查看到如下内容：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep nginx</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master sbin]<span class=\"comment\"># ps -ef| grep nginx</span></span><br><span class=\"line\">root       3564      1  0 13:54 ?        00:00:00 nginx: master process ./nginx</span><br><span class=\"line\">nobody     3565   3564  0 13:54 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root       3567   3483  0 13:54 pts/1    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure>\n\n<p>从上图中可以看到，Nginx 后台进程中包含一个 master 进程和多个 worker 进程，master 进程主要用来管理 worker 进程，包含接收外界的信息，并将接收到的信号发送给各个 worker 进程，监控 worker 进程的状态。当 worker 进程出现异常退出后，会自动重新启动新的 worker 进程。而 worker 进程则是专门用来处理用户请求的，各个 worker 进程之间是平等的并且相互独立，处理请求的机会也是一样的。</p>\n<p>Nginx 的进程模型，我们可以通过下图来说明下：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.2i4zuw23isa0.webp\" alt=\"image\"></p>\n<p>我们现在作为管理员，只需要通过给 master 进程发送信号就可以来控制 Nginx，这个时候我们需要有两个前提条件，一个是要操作的 master 进程，一个是 给 master 进程的信号。</p>\n<ol>\n<li>要想操作 Nginx 的 master 进程，就需要获取到 master 进程的进程号 PID。获取方式简单介绍两个：</li>\n</ol>\n<ul>\n<li>通过 <code>ps -ef | grep nginx</code></li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep nginx</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在讲解 Nginx 的 <code>./configure</code> 的配置参数的时候，有一个参数 <code>--pid-path=PATH</code>，它的默认值是 <code>/usr/local/nginx/logs/nginx.pid</code>，所以可以通过查看该文件来获取 Nginx 的 master 进程 PID</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>信号(signal)</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>信号</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>TERM/INT</td>\n<td>立即关闭整个服务（关闭 Nginx）</td>\n</tr>\n<tr>\n<td>QUIT</td>\n<td>「优雅」的关闭整个服务（关闭 Nginx）</td>\n</tr>\n<tr>\n<td>HUP</td>\n<td>重读配置文件并使用服务对新配置项生效（重启 Nginx）</td>\n</tr>\n<tr>\n<td>USR1</td>\n<td>重新打开日志文件，可以用来进行日志切割（重启日志）</td>\n</tr>\n<tr>\n<td>USR2</td>\n<td>平滑升级到最新版的 Nginx</td>\n</tr>\n<tr>\n<td>WINCH</td>\n<td>所有子进程不在接收处理新连接，相当于给 Work 进程发送 QUIT 指令</td>\n</tr>\n</tbody></table>\n<p>调用命令为 <code>kill -signal PID</code></p>\n<blockquote>\n<p>signal：即为信号；PID 即为获取到的 master 进程 PID</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> -signal PID</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 格式一：</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -TERM PID</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 立即关闭当前线程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -TERM `cat /usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 格式一：</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -INT PID</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 立即关闭当前线程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -INT `cat /usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>案例</li>\n</ul>\n<ol>\n<li>发送 TERM/INT 信号给 master 进程，会将 Nginx 服务立即关闭。</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master nginx]<span class=\"comment\"># cat logs/nginx.pid</span></span><br><span class=\"line\">3564</span><br><span class=\"line\">[root@master nginx]<span class=\"comment\"># kill  -TERM 3564</span></span><br><span class=\"line\">[root@master nginx]<span class=\"comment\"># ps -ef | grep nginx</span></span><br><span class=\"line\">root       8874   8753  0 15:58 pts/2    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>发送 QUIT 信号给 master 进程，master 进程会控制所有的 work 进程不再接收新的请求，等所有请求处理完后，在把进程都关闭掉。</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 优雅 关闭线程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -QUIT PID</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 「优雅」关闭当前线程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -QUIT `cat /usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>发送 HUP 信号给 master 进程，master 进程会把控制旧的 worker 进程不再接收新的请求，等处理完请求后将旧的 worker 进程关闭掉，然后根据<mark>更改Nginx 的配置文件</mark>重新启动新的 worker 进程</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重启 worker 进程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -HUP PID </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启当前 worker 进程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -HUP `cat /usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>发送 USR1 信号给 master 进程，告诉 Nginx 重新开启日志文件。如果日志文件被删除了，可以利用此命令重新打开。</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重新打开日志文件</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -USR1 PID</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新打开当前 Nginx 的日志文件</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -USR1 `cat /usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>发送 USR2 信号给 master 进程，告诉 master 进程要平滑升级，这个时候，会重新开启对应的 master 进程和 worker 进程，整个系统中将会有两个master 进程，并且新的 master 进程的 PID 会被记录在 <code>/usr/local/nginx/logs/nginx.pid</code>，而之前的旧的 master 进程 PID 会被记录在 <code>/usr/local/nginx/logs/nginx.pid.oldbin</code> 文件中，接着再次发送 QUIT 信号给旧的 master 进程，让其处理完请求后再进行关闭</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开启新的进程，但是不删除旧的进程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -USR2 PID</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启新的进程，但是不删除当前进程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -USR2 `cat /usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n\n<p>当新进程升级后（完全启动后），再关闭旧的进程，旧进程的 PID 在另一个 <code>nginx.pid.oldbin</code> 文件里</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关闭旧的线程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -QUIT `cat /usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid.oldbin`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.5dgklob27do0.webp\" alt=\"image\"></p>\n<ol start=\"6\">\n<li>发送 WINCH 信号给 master 进程,让 master 进程控制不让所有的 worker 进程在接收新的请求了，请求处理完后关闭 worker 进程。注意 master 进程不会被关闭掉</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 停止 worker 进程，但是不停止 master 进程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -WINCH PID </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止当前 worker 进程，但是不停止 master 进程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -WINCH `cat /usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"命令行控制\"><a href=\"#命令行控制\" class=\"headerlink\" title=\"命令行控制\"></a>命令行控制</h3><p>此方式是通过 Nginx 安装目录下的 sbin 下的可执行文件 nginx(文件名) 来进行对 Nginx 状态的控制，我们可以通过 <code>nginx -h</code> 来查看都有哪些参数可以用</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master sbin]<span class=\"comment\"># ./nginx -h</span></span><br><span class=\"line\">nginx version: nginx/1.21.6</span><br><span class=\"line\">Usage: nginx [-?hvVtTq] [-s signal] [-p prefix]</span><br><span class=\"line\">             [-e filename] [-c filename] [-g directives]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -?,-h         : this <span class=\"built_in\">help</span></span><br><span class=\"line\">  -v            : show version and <span class=\"built_in\">exit</span></span><br><span class=\"line\">  -V            : show version and configure options <span class=\"keyword\">then</span> <span class=\"built_in\">exit</span></span><br><span class=\"line\">  -t            : <span class=\"built_in\">test</span> configuration and <span class=\"built_in\">exit</span></span><br><span class=\"line\">  -T            : <span class=\"built_in\">test</span> configuration, dump it and <span class=\"built_in\">exit</span></span><br><span class=\"line\">  -q            : suppress non-error messages during configuration testing</span><br><span class=\"line\">  -s signal     : send signal to a master process: stop, quit, reopen, reload</span><br><span class=\"line\">  -p prefix     : <span class=\"built_in\">set</span> prefix path (default: /usr/<span class=\"built_in\">local</span>/nginx/)</span><br><span class=\"line\">  -e filename   : <span class=\"built_in\">set</span> error <span class=\"built_in\">log</span> file (default: logs/error.log)</span><br><span class=\"line\">  -c filename   : <span class=\"built_in\">set</span> configuration file (default: conf/nginx.conf)</span><br><span class=\"line\">  -g directives : <span class=\"built_in\">set</span> global directives out of configuration file</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-? 和 -h</td>\n<td>显示帮助信息</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>打印版本号信息并退出</td>\n</tr>\n<tr>\n<td>-V</td>\n<td>打印版本号信息和配置信息并退出</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>测试 Nginx 的配置文件语法是否正确并退出</td>\n</tr>\n<tr>\n<td>-T</td>\n<td>测试 Nginx 的配置文件语法是否正确并列出用到的配置文件信息然后退出</td>\n</tr>\n<tr>\n<td>-q</td>\n<td>在配置测试期间过滤掉非错误消息</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>signal 信号，后面的命令和服务信号控制功能类似：  <code>stop</code>：快速关闭，类似于 TERM/INT 信号的作用 <code>quit</code>：优雅的关闭，类似于 QUIT 信号的作用 <code>reopen</code>：重新打开日志文件类似于 USR1 信号的作用 <code>reload</code>：重启 Nginx，类似于 HUP 信号的作用</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>prefix，指定 Nginx 的默认安装路径，(默认为：/usr/local/nginx/)</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>filename，指定 Nginx 的配置文件路径,(默认为：conf/nginx.conf)</td>\n</tr>\n<tr>\n<td>-g</td>\n<td>用来补充 Nginx 配置文件，向 Nginx 服务指定启动时应用全局的配置</td>\n</tr>\n</tbody></table>\n<ul>\n<li>案例</li>\n</ul>\n<p>如果觉得每次执行 nginx 指令都必须进入 sbin 目录，则将该指令设置为全局使用。</p>\n<ol>\n<li>两个查看版本命令</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看版本指令 1</span></span><br><span class=\"line\">[root@master sbin]<span class=\"comment\"># nginx -v</span></span><br><span class=\"line\"><span class=\"comment\"># 返回结果</span></span><br><span class=\"line\">nginx version: nginx/1.21.6</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看版本指令 2</span></span><br><span class=\"line\">[root@master sbin]<span class=\"comment\"># nginx -V</span></span><br><span class=\"line\"><span class=\"comment\"># 返回结果</span></span><br><span class=\"line\">nginx version: nginx/1.21.6</span><br><span class=\"line\">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)</span><br><span class=\"line\">configure arguments: --prefix=/usr/<span class=\"built_in\">local</span>/nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>测试 Nginx 的配置文件语法</li>\n</ol>\n<p>我们首先要知道配置文件的路径在哪，先执行 <code>-t</code> 进行测试</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试 Nginx 的配置文件语法</span></span><br><span class=\"line\">[root@master sbin]<span class=\"comment\"># nginx -t</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#结果 返回 成功</span></span><br><span class=\"line\">nginx: the configuration file /usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf syntax is ok</span><br><span class=\"line\">nginx: configuration file /usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf <span class=\"built_in\">test</span> is successful</span><br></pre></td></tr></table></figure>\n\n<p>由第 6 行代码可以知道测试成功，第 5 行代码告诉我们配置文件的目录，我们去修改配置文件，然后再进行测试</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master sbin]<span class=\"comment\"># vim /usr/local/nginx/conf/nginx.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###add</span></span><br><span class=\"line\">HelloWorld</span><br></pre></td></tr></table></figure>\n\n<p>重新进行测试</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试 Nginx 的配置文件语法</span></span><br><span class=\"line\">[root@master sbin]<span class=\"comment\"># nginx -t</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回结果（失败）</span></span><br><span class=\"line\">nginx: [emerg] unknown directive <span class=\"string\">\"HelloWorld\"</span> <span class=\"keyword\">in</span> /usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf:3</span><br><span class=\"line\">nginx: configuration file /usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf <span class=\"built_in\">test</span> failed</span><br></pre></td></tr></table></figure>\n\n<p>由第 6 行代码可以知道，配置文件出错了。验证完了，记得将配置文件改回来。</p>\n<ol start=\"3\">\n<li>指定 Nginx 的默认安装路径</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -p /usr/<span class=\"built_in\">local</span>/nginx/</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>指定 Nginx 的配置文件路径</li>\n</ol>\n<p>先把配置文件拷贝到另一个目录，然后修改拷贝后的配置文件内容</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拷贝配置文件</span></span><br><span class=\"line\">cp /usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf /opt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改拷贝后的配置文件内容</span></span><br><span class=\"line\">vim /opt/nginx.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add</span></span><br><span class=\"line\">HelloWorld</span><br></pre></td></tr></table></figure>\n\n<p>测试配置文件的时候，指定拷贝后的配置文件进行测试</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定配置文件进行测试</span></span><br><span class=\"line\">[root@master nginx]<span class=\"comment\"># nginx -tc /opt/nginx.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#返回结果</span></span><br><span class=\"line\">nginx: [emerg] unknown directive <span class=\"string\">\"HelloWorld\"</span> <span class=\"keyword\">in</span> /opt/nginx.conf:3</span><br><span class=\"line\">nginx: configuration file /opt/nginx.conf <span class=\"built_in\">test</span> failed</span><br></pre></td></tr></table></figure>\n\n<p>说明指定配置文件目录生效，只是文件内容语法不对。</p>\n<h2 id=\"版本升级和新增模块\"><a href=\"#版本升级和新增模块\" class=\"headerlink\" title=\"版本升级和新增模块\"></a>版本升级和新增模块</h2><p>如果想对 Nginx 的版本进行更新，或者要应用一些新的模块，最简单的做法就是停止当前的 Nginx 服务，然后开启新的 Nginx 服务。但是这样会导致在一段时间内，用户是无法访问服务器。为了解决这个问题，我们就需要用到 Nginx 服务器提供的平滑升级功能。这个也是 Nginx 的一大特点，使用这种方式，就可以使 Nginx 在 7 * 24 小时不间断的提供服务了。接下来我们分析下需求：</p>\n<blockquote>\n<p>需求：Nginx 的版本最开始使用的是 Nginx-1.14.2，由于服务升级，需要将 Nginx 的版本升级到 Nginx-1.16.1,要求 Nginx 不能中断提供服务。</p>\n</blockquote>\n<p>为了应对上述的需求，这里我们提供两种解决方案:</p>\n<ul>\n<li>使用 Nginx 服务信号完成 Nginx 的升级</li>\n<li>使用 Nginx 安装目录的 make 命令完成升级</li>\n</ul>\n<p>版本升级其实就是替换可执行文件 nginx。</p>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><ol>\n<li>先准备两个版本的 Nginx 分别是 1.14.2 和 1.16.1</li>\n<li>使用 Nginx 源码安装的方式将 1.14.2 版本安装成功并正确访问</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解压 1.14.2 版本</span></span><br><span class=\"line\">tar -xzf nginx-1.14.2.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 进入解压目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> nginx-1.14.2/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行配置文件</span></span><br><span class=\"line\">./configure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编译安装</span></span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>将 Nginx 1.16.1 版本进行参数配置和编译，不需要进行安装。</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解压 1.16.1 版本</span></span><br><span class=\"line\">tar -xzf nginx-1.16.1.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 进入解压目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> nginx-1.16.1/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行配置文件</span></span><br><span class=\"line\">./configure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 仅仅编译</span></span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"服务信号进行升级\"><a href=\"#服务信号进行升级\" class=\"headerlink\" title=\"服务信号进行升级\"></a>服务信号进行升级</h3><p>第一步:将 1.14.2 版本的 sbin 目录下的 nginx 进行备份</p>\n<blockquote>\n<p>不是复制一份，是直接修改原来的 nginx。</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入 sbin 目录下</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx/sbin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 备份为 nginxold 文件</span></span><br><span class=\"line\">mv nginx nginx.backup</span><br></pre></td></tr></table></figure>\n\n<p>第二步：将 Nginx 1.16.1 安装目录编译后的 objs 目录下的 nginx 文件，拷贝到原来 <code>/usr/local/nginx/sbin</code> 目录下</p>\n<p>如果第一步没有备份，那么将会覆盖 1.14.2 的 nginx 文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入 objs 目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/nginx/core/nginx-1.16.1/objs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拷贝可执行文件到原来的目录</span></span><br><span class=\"line\">cp nginx /usr/<span class=\"built_in\">local</span>/nginx/sbin</span><br></pre></td></tr></table></figure>\n\n<p>第三步：发送信号 USR2 给 Nginx 的 1.14.2 版本对应的 master 进程</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> -USR2 `cat /usr/<span class=\"built_in\">local</span>/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n\n<p>第四步：发送信号 QUIT 给 Nginx 的 1.14.2 版本对应的 master 进程</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> -QUIT `cat /usr/<span class=\"built_in\">local</span>/logs/nginx.pid.oldbin`</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装目录的make命令完成升级\"><a href=\"#安装目录的make命令完成升级\" class=\"headerlink\" title=\"安装目录的make命令完成升级\"></a>安装目录的make命令完成升级</h3><p>第一步：将 1.14.2 版本的 sbin 目录下的 nginx 进行备份</p>\n<blockquote>\n<p>不是复制一份，是直接修改原来的 nginx。</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入 sbin 目录下</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx/sbin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 备份为 nginxold 文件</span></span><br><span class=\"line\">mv nginx nginx.backup</span><br></pre></td></tr></table></figure>\n\n<p>第二步：将 Nginx1.16.1 安装目录编译后的 objs 目录下的 nginx 文件，拷贝到原来 <code>/usr/local/nginx/sbin</code> 目录下</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入 objs 目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/nginx/core/nginx-1.16.1/objs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拷贝可执行文件到原来的目录</span></span><br><span class=\"line\">cp nginx /usr/<span class=\"built_in\">local</span>/nginx/sbin</span><br></pre></td></tr></table></figure>\n\n<p>第三步：进入到安装目录，执行 <code>make upgrade</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make upgrade</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.2hpc905f42a0.webp\" alt=\"image\"></p>\n<p>第四步：查看是否更新成功</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -v</span><br></pre></td></tr></table></figure>\n\n<p>在整个过程中，其实 Nginx 是一直对外提供服务的。并且当 Nginx 的服务器启动成功后，我们是可以通过浏览器进行直接访问的，同时我们可以通过更改 html 目录下的页面来修改我们在页面上所看到的内容，那么问题来了，为什么我们要修改 html 目录下的文件，能不能多添加一些页面是 Nginx 的功能更加丰富，还有前面聊到 Nginx 的前端功能又是如何来实现的，这就需要我们对 <a href=\"/middleware/Nginx/Nginx_Configuration_file\">Nginx 的核心配置文件</a> 进行一个详细的学习。</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"Nginx-基本使用\"><a href=\"#Nginx-基本使用\" class=\"headerlink\" title=\"Nginx 基本使用\"></a>Nginx 基本使用</h1><p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.7e2zl4ci9t40.webp\" alt=\"image\"></p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>进入Nginx的主目录我们可以看到这些文件夹</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master /]<span class=\"comment\"># cd /usr/local/nginx/</span></span><br><span class=\"line\">[root@master nginx]<span class=\"comment\"># ll</span></span><br><span class=\"line\">总用量 0</span><br><span class=\"line\">drwx------ 2 nobody root   6 7月  27 20:35 client_body_temp</span><br><span class=\"line\">drwxr-xr-x 2 root   root 333 7月  27 20:31 conf</span><br><span class=\"line\">drwx------ 2 nobody root   6 7月  27 20:35 fastcgi_temp</span><br><span class=\"line\">drwxr-xr-x 2 root   root  40 7月  27 20:31 html</span><br><span class=\"line\">drwxr-xr-x 2 root   root  58 7月  27 20:35 logs</span><br><span class=\"line\">drwx------ 2 nobody root   6 7月  27 20:35 proxy_temp</span><br><span class=\"line\">drwxr-xr-x 2 root   root  36 7月  27 20:33 sbin</span><br><span class=\"line\">drwx------ 2 nobody root   6 7月  27 20:35 scgi_temp</span><br><span class=\"line\">drwx------ 2 nobody root   6 7月  27 20:35 uwsgi_temp</span><br></pre></td></tr></table></figure>\n\n<p>其中这几个文件夹在刚安装后是没有的，主要用来存放运行过程中的临时文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client_body_temp fastcgi_temp proxy_temp scgi_temp</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>主要目录说明</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>目录</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>conf</td>\n<td>用来存放配置文件相关</td>\n</tr>\n<tr>\n<td>html</td>\n<td>用来存放静态文件的默认目录 html、css等</td>\n</tr>\n<tr>\n<td>sbin</td>\n<td>nginx的主程序</td>\n</tr>\n</tbody></table>\n<h2 id=\"基本运行原理\"><a href=\"#基本运行原理\" class=\"headerlink\" title=\"基本运行原理\"></a>基本运行原理</h2><p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.5klrdamfdsg0.webp\" alt=\"image\"></p>\n<h2 id=\"启动停止命令\"><a href=\"#启动停止命令\" class=\"headerlink\" title=\"启动停止命令\"></a>启动停止命令</h2><p>对于 Nginx 的启停在 Linux 系统中也有很多种方式，我们介绍两种方式：</p>\n<ul>\n<li>Nginx 服务的信号控制</li>\n<li>Nginx 的命令行控制</li>\n</ul>\n<h3 id=\"服务信号控制\"><a href=\"#服务信号控制\" class=\"headerlink\" title=\"服务信号控制\"></a>服务信号控制</h3><p>在了解内容之前，我们首先要考虑一些问题：</p>\n<ul>\n<li><p>Nginx 中的 master 和 worker 进程?</p>\n</li>\n<li><p>Nginx 的工作方式?</p>\n</li>\n<li><p>如何获取进程的 PID?</p>\n</li>\n<li><p>信号有哪些?</p>\n</li>\n<li><p>如何通过信号控制 Nginx 的启停等相关操作?</p>\n</li>\n</ul>\n<p>前面在提到 Nginx 的高性能，其实也和它的架构模式有关。Nginx 默认采用的是多进程的方式来工作的，当将 Nginx 启动后，我们通过 <code>ps -ef | grep nginx</code> 命令可以查看到如下内容：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep nginx</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master sbin]<span class=\"comment\"># ps -ef| grep nginx</span></span><br><span class=\"line\">root       3564      1  0 13:54 ?        00:00:00 nginx: master process ./nginx</span><br><span class=\"line\">nobody     3565   3564  0 13:54 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root       3567   3483  0 13:54 pts/1    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure>\n\n<p>从上图中可以看到，Nginx 后台进程中包含一个 master 进程和多个 worker 进程，master 进程主要用来管理 worker 进程，包含接收外界的信息，并将接收到的信号发送给各个 worker 进程，监控 worker 进程的状态。当 worker 进程出现异常退出后，会自动重新启动新的 worker 进程。而 worker 进程则是专门用来处理用户请求的，各个 worker 进程之间是平等的并且相互独立，处理请求的机会也是一样的。</p>\n<p>Nginx 的进程模型，我们可以通过下图来说明下：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.2i4zuw23isa0.webp\" alt=\"image\"></p>\n<p>我们现在作为管理员，只需要通过给 master 进程发送信号就可以来控制 Nginx，这个时候我们需要有两个前提条件，一个是要操作的 master 进程，一个是 给 master 进程的信号。</p>\n<ol>\n<li>要想操作 Nginx 的 master 进程，就需要获取到 master 进程的进程号 PID。获取方式简单介绍两个：</li>\n</ol>\n<ul>\n<li>通过 <code>ps -ef | grep nginx</code></li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -ef | grep nginx</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在讲解 Nginx 的 <code>./configure</code> 的配置参数的时候，有一个参数 <code>--pid-path=PATH</code>，它的默认值是 <code>/usr/local/nginx/logs/nginx.pid</code>，所以可以通过查看该文件来获取 Nginx 的 master 进程 PID</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>信号(signal)</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>信号</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>TERM/INT</td>\n<td>立即关闭整个服务（关闭 Nginx）</td>\n</tr>\n<tr>\n<td>QUIT</td>\n<td>「优雅」的关闭整个服务（关闭 Nginx）</td>\n</tr>\n<tr>\n<td>HUP</td>\n<td>重读配置文件并使用服务对新配置项生效（重启 Nginx）</td>\n</tr>\n<tr>\n<td>USR1</td>\n<td>重新打开日志文件，可以用来进行日志切割（重启日志）</td>\n</tr>\n<tr>\n<td>USR2</td>\n<td>平滑升级到最新版的 Nginx</td>\n</tr>\n<tr>\n<td>WINCH</td>\n<td>所有子进程不在接收处理新连接，相当于给 Work 进程发送 QUIT 指令</td>\n</tr>\n</tbody></table>\n<p>调用命令为 <code>kill -signal PID</code></p>\n<blockquote>\n<p>signal：即为信号；PID 即为获取到的 master 进程 PID</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> -signal PID</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 格式一：</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -TERM PID</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 立即关闭当前线程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -TERM `cat /usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 格式一：</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -INT PID</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 立即关闭当前线程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -INT `cat /usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>案例</li>\n</ul>\n<ol>\n<li>发送 TERM/INT 信号给 master 进程，会将 Nginx 服务立即关闭。</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master nginx]<span class=\"comment\"># cat logs/nginx.pid</span></span><br><span class=\"line\">3564</span><br><span class=\"line\">[root@master nginx]<span class=\"comment\"># kill  -TERM 3564</span></span><br><span class=\"line\">[root@master nginx]<span class=\"comment\"># ps -ef | grep nginx</span></span><br><span class=\"line\">root       8874   8753  0 15:58 pts/2    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>发送 QUIT 信号给 master 进程，master 进程会控制所有的 work 进程不再接收新的请求，等所有请求处理完后，在把进程都关闭掉。</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 优雅 关闭线程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -QUIT PID</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 「优雅」关闭当前线程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -QUIT `cat /usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>发送 HUP 信号给 master 进程，master 进程会把控制旧的 worker 进程不再接收新的请求，等处理完请求后将旧的 worker 进程关闭掉，然后根据<mark>更改Nginx 的配置文件</mark>重新启动新的 worker 进程</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重启 worker 进程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -HUP PID </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启当前 worker 进程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -HUP `cat /usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>发送 USR1 信号给 master 进程，告诉 Nginx 重新开启日志文件。如果日志文件被删除了，可以利用此命令重新打开。</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重新打开日志文件</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -USR1 PID</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新打开当前 Nginx 的日志文件</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -USR1 `cat /usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>发送 USR2 信号给 master 进程，告诉 master 进程要平滑升级，这个时候，会重新开启对应的 master 进程和 worker 进程，整个系统中将会有两个master 进程，并且新的 master 进程的 PID 会被记录在 <code>/usr/local/nginx/logs/nginx.pid</code>，而之前的旧的 master 进程 PID 会被记录在 <code>/usr/local/nginx/logs/nginx.pid.oldbin</code> 文件中，接着再次发送 QUIT 信号给旧的 master 进程，让其处理完请求后再进行关闭</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开启新的进程，但是不删除旧的进程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -USR2 PID</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启新的进程，但是不删除当前进程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -USR2 `cat /usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n\n<p>当新进程升级后（完全启动后），再关闭旧的进程，旧进程的 PID 在另一个 <code>nginx.pid.oldbin</code> 文件里</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关闭旧的线程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -QUIT `cat /usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid.oldbin`</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.5dgklob27do0.webp\" alt=\"image\"></p>\n<ol start=\"6\">\n<li>发送 WINCH 信号给 master 进程,让 master 进程控制不让所有的 worker 进程在接收新的请求了，请求处理完后关闭 worker 进程。注意 master 进程不会被关闭掉</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 停止 worker 进程，但是不停止 master 进程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -WINCH PID </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止当前 worker 进程，但是不停止 master 进程</span></span><br><span class=\"line\"><span class=\"built_in\">kill</span> -WINCH `cat /usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"命令行控制\"><a href=\"#命令行控制\" class=\"headerlink\" title=\"命令行控制\"></a>命令行控制</h3><p>此方式是通过 Nginx 安装目录下的 sbin 下的可执行文件 nginx(文件名) 来进行对 Nginx 状态的控制，我们可以通过 <code>nginx -h</code> 来查看都有哪些参数可以用</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master sbin]<span class=\"comment\"># ./nginx -h</span></span><br><span class=\"line\">nginx version: nginx/1.21.6</span><br><span class=\"line\">Usage: nginx [-?hvVtTq] [-s signal] [-p prefix]</span><br><span class=\"line\">             [-e filename] [-c filename] [-g directives]</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -?,-h         : this <span class=\"built_in\">help</span></span><br><span class=\"line\">  -v            : show version and <span class=\"built_in\">exit</span></span><br><span class=\"line\">  -V            : show version and configure options <span class=\"keyword\">then</span> <span class=\"built_in\">exit</span></span><br><span class=\"line\">  -t            : <span class=\"built_in\">test</span> configuration and <span class=\"built_in\">exit</span></span><br><span class=\"line\">  -T            : <span class=\"built_in\">test</span> configuration, dump it and <span class=\"built_in\">exit</span></span><br><span class=\"line\">  -q            : suppress non-error messages during configuration testing</span><br><span class=\"line\">  -s signal     : send signal to a master process: stop, quit, reopen, reload</span><br><span class=\"line\">  -p prefix     : <span class=\"built_in\">set</span> prefix path (default: /usr/<span class=\"built_in\">local</span>/nginx/)</span><br><span class=\"line\">  -e filename   : <span class=\"built_in\">set</span> error <span class=\"built_in\">log</span> file (default: logs/error.log)</span><br><span class=\"line\">  -c filename   : <span class=\"built_in\">set</span> configuration file (default: conf/nginx.conf)</span><br><span class=\"line\">  -g directives : <span class=\"built_in\">set</span> global directives out of configuration file</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-? 和 -h</td>\n<td>显示帮助信息</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>打印版本号信息并退出</td>\n</tr>\n<tr>\n<td>-V</td>\n<td>打印版本号信息和配置信息并退出</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>测试 Nginx 的配置文件语法是否正确并退出</td>\n</tr>\n<tr>\n<td>-T</td>\n<td>测试 Nginx 的配置文件语法是否正确并列出用到的配置文件信息然后退出</td>\n</tr>\n<tr>\n<td>-q</td>\n<td>在配置测试期间过滤掉非错误消息</td>\n</tr>\n<tr>\n<td>-s</td>\n<td>signal 信号，后面的命令和服务信号控制功能类似：  <code>stop</code>：快速关闭，类似于 TERM/INT 信号的作用 <code>quit</code>：优雅的关闭，类似于 QUIT 信号的作用 <code>reopen</code>：重新打开日志文件类似于 USR1 信号的作用 <code>reload</code>：重启 Nginx，类似于 HUP 信号的作用</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>prefix，指定 Nginx 的默认安装路径，(默认为：/usr/local/nginx/)</td>\n</tr>\n<tr>\n<td>-c</td>\n<td>filename，指定 Nginx 的配置文件路径,(默认为：conf/nginx.conf)</td>\n</tr>\n<tr>\n<td>-g</td>\n<td>用来补充 Nginx 配置文件，向 Nginx 服务指定启动时应用全局的配置</td>\n</tr>\n</tbody></table>\n<ul>\n<li>案例</li>\n</ul>\n<p>如果觉得每次执行 nginx 指令都必须进入 sbin 目录，则将该指令设置为全局使用。</p>\n<ol>\n<li>两个查看版本命令</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看版本指令 1</span></span><br><span class=\"line\">[root@master sbin]<span class=\"comment\"># nginx -v</span></span><br><span class=\"line\"><span class=\"comment\"># 返回结果</span></span><br><span class=\"line\">nginx version: nginx/1.21.6</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看版本指令 2</span></span><br><span class=\"line\">[root@master sbin]<span class=\"comment\"># nginx -V</span></span><br><span class=\"line\"><span class=\"comment\"># 返回结果</span></span><br><span class=\"line\">nginx version: nginx/1.21.6</span><br><span class=\"line\">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)</span><br><span class=\"line\">configure arguments: --prefix=/usr/<span class=\"built_in\">local</span>/nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>测试 Nginx 的配置文件语法</li>\n</ol>\n<p>我们首先要知道配置文件的路径在哪，先执行 <code>-t</code> 进行测试</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试 Nginx 的配置文件语法</span></span><br><span class=\"line\">[root@master sbin]<span class=\"comment\"># nginx -t</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#结果 返回 成功</span></span><br><span class=\"line\">nginx: the configuration file /usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf syntax is ok</span><br><span class=\"line\">nginx: configuration file /usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf <span class=\"built_in\">test</span> is successful</span><br></pre></td></tr></table></figure>\n\n<p>由第 6 行代码可以知道测试成功，第 5 行代码告诉我们配置文件的目录，我们去修改配置文件，然后再进行测试</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master sbin]<span class=\"comment\"># vim /usr/local/nginx/conf/nginx.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###add</span></span><br><span class=\"line\">HelloWorld</span><br></pre></td></tr></table></figure>\n\n<p>重新进行测试</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试 Nginx 的配置文件语法</span></span><br><span class=\"line\">[root@master sbin]<span class=\"comment\"># nginx -t</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回结果（失败）</span></span><br><span class=\"line\">nginx: [emerg] unknown directive <span class=\"string\">\"HelloWorld\"</span> <span class=\"keyword\">in</span> /usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf:3</span><br><span class=\"line\">nginx: configuration file /usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf <span class=\"built_in\">test</span> failed</span><br></pre></td></tr></table></figure>\n\n<p>由第 6 行代码可以知道，配置文件出错了。验证完了，记得将配置文件改回来。</p>\n<ol start=\"3\">\n<li>指定 Nginx 的默认安装路径</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -p /usr/<span class=\"built_in\">local</span>/nginx/</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>指定 Nginx 的配置文件路径</li>\n</ol>\n<p>先把配置文件拷贝到另一个目录，然后修改拷贝后的配置文件内容</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 拷贝配置文件</span></span><br><span class=\"line\">cp /usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf /opt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改拷贝后的配置文件内容</span></span><br><span class=\"line\">vim /opt/nginx.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># add</span></span><br><span class=\"line\">HelloWorld</span><br></pre></td></tr></table></figure>\n\n<p>测试配置文件的时候，指定拷贝后的配置文件进行测试</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定配置文件进行测试</span></span><br><span class=\"line\">[root@master nginx]<span class=\"comment\"># nginx -tc /opt/nginx.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#返回结果</span></span><br><span class=\"line\">nginx: [emerg] unknown directive <span class=\"string\">\"HelloWorld\"</span> <span class=\"keyword\">in</span> /opt/nginx.conf:3</span><br><span class=\"line\">nginx: configuration file /opt/nginx.conf <span class=\"built_in\">test</span> failed</span><br></pre></td></tr></table></figure>\n\n<p>说明指定配置文件目录生效，只是文件内容语法不对。</p>\n<h2 id=\"版本升级和新增模块\"><a href=\"#版本升级和新增模块\" class=\"headerlink\" title=\"版本升级和新增模块\"></a>版本升级和新增模块</h2><p>如果想对 Nginx 的版本进行更新，或者要应用一些新的模块，最简单的做法就是停止当前的 Nginx 服务，然后开启新的 Nginx 服务。但是这样会导致在一段时间内，用户是无法访问服务器。为了解决这个问题，我们就需要用到 Nginx 服务器提供的平滑升级功能。这个也是 Nginx 的一大特点，使用这种方式，就可以使 Nginx 在 7 * 24 小时不间断的提供服务了。接下来我们分析下需求：</p>\n<blockquote>\n<p>需求：Nginx 的版本最开始使用的是 Nginx-1.14.2，由于服务升级，需要将 Nginx 的版本升级到 Nginx-1.16.1,要求 Nginx 不能中断提供服务。</p>\n</blockquote>\n<p>为了应对上述的需求，这里我们提供两种解决方案:</p>\n<ul>\n<li>使用 Nginx 服务信号完成 Nginx 的升级</li>\n<li>使用 Nginx 安装目录的 make 命令完成升级</li>\n</ul>\n<p>版本升级其实就是替换可执行文件 nginx。</p>\n<h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><ol>\n<li>先准备两个版本的 Nginx 分别是 1.14.2 和 1.16.1</li>\n<li>使用 Nginx 源码安装的方式将 1.14.2 版本安装成功并正确访问</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解压 1.14.2 版本</span></span><br><span class=\"line\">tar -xzf nginx-1.14.2.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 进入解压目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> nginx-1.14.2/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行配置文件</span></span><br><span class=\"line\">./configure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编译安装</span></span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>将 Nginx 1.16.1 版本进行参数配置和编译，不需要进行安装。</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 解压 1.16.1 版本</span></span><br><span class=\"line\">tar -xzf nginx-1.16.1.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 进入解压目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> nginx-1.16.1/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行配置文件</span></span><br><span class=\"line\">./configure</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 仅仅编译</span></span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"服务信号进行升级\"><a href=\"#服务信号进行升级\" class=\"headerlink\" title=\"服务信号进行升级\"></a>服务信号进行升级</h3><p>第一步:将 1.14.2 版本的 sbin 目录下的 nginx 进行备份</p>\n<blockquote>\n<p>不是复制一份，是直接修改原来的 nginx。</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入 sbin 目录下</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx/sbin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 备份为 nginxold 文件</span></span><br><span class=\"line\">mv nginx nginx.backup</span><br></pre></td></tr></table></figure>\n\n<p>第二步：将 Nginx 1.16.1 安装目录编译后的 objs 目录下的 nginx 文件，拷贝到原来 <code>/usr/local/nginx/sbin</code> 目录下</p>\n<p>如果第一步没有备份，那么将会覆盖 1.14.2 的 nginx 文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入 objs 目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/nginx/core/nginx-1.16.1/objs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拷贝可执行文件到原来的目录</span></span><br><span class=\"line\">cp nginx /usr/<span class=\"built_in\">local</span>/nginx/sbin</span><br></pre></td></tr></table></figure>\n\n<p>第三步：发送信号 USR2 给 Nginx 的 1.14.2 版本对应的 master 进程</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> -USR2 `cat /usr/<span class=\"built_in\">local</span>/logs/nginx.pid`</span><br></pre></td></tr></table></figure>\n\n<p>第四步：发送信号 QUIT 给 Nginx 的 1.14.2 版本对应的 master 进程</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> -QUIT `cat /usr/<span class=\"built_in\">local</span>/logs/nginx.pid.oldbin`</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装目录的make命令完成升级\"><a href=\"#安装目录的make命令完成升级\" class=\"headerlink\" title=\"安装目录的make命令完成升级\"></a>安装目录的make命令完成升级</h3><p>第一步：将 1.14.2 版本的 sbin 目录下的 nginx 进行备份</p>\n<blockquote>\n<p>不是复制一份，是直接修改原来的 nginx。</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入 sbin 目录下</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx/sbin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 备份为 nginxold 文件</span></span><br><span class=\"line\">mv nginx nginx.backup</span><br></pre></td></tr></table></figure>\n\n<p>第二步：将 Nginx1.16.1 安装目录编译后的 objs 目录下的 nginx 文件，拷贝到原来 <code>/usr/local/nginx/sbin</code> 目录下</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入 objs 目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/nginx/core/nginx-1.16.1/objs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拷贝可执行文件到原来的目录</span></span><br><span class=\"line\">cp nginx /usr/<span class=\"built_in\">local</span>/nginx/sbin</span><br></pre></td></tr></table></figure>\n\n<p>第三步：进入到安装目录，执行 <code>make upgrade</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make upgrade</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.2hpc905f42a0.webp\" alt=\"image\"></p>\n<p>第四步：查看是否更新成功</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -v</span><br></pre></td></tr></table></figure>\n\n<p>在整个过程中，其实 Nginx 是一直对外提供服务的。并且当 Nginx 的服务器启动成功后，我们是可以通过浏览器进行直接访问的，同时我们可以通过更改 html 目录下的页面来修改我们在页面上所看到的内容，那么问题来了，为什么我们要修改 html 目录下的文件，能不能多添加一些页面是 Nginx 的功能更加丰富，还有前面聊到 Nginx 的前端功能又是如何来实现的，这就需要我们对 <a href=\"/middleware/Nginx/Nginx_Configuration_file\">Nginx 的核心配置文件</a> 进行一个详细的学习。</p>\n"},{"title":"Nginx 基础配置实例","date":"2022-11-09T16:00:00.000Z","_content":"# Nginx 基础配置实例\n\n**引言**\n\n学习了核心配置文件的内容，也仅仅是学习，没有实际例子来巩固的知识容易流失，本内容带你写一个简单的 demo 实例。\n\n每次开机都手动启动 Nginx 服务？每次使用 Nginx 的指令总是要进入 sbin 目录下？本文带你配置 Naginx 服务自启和全局 nginx 指令。\n\n\n## 基础配置实例\n\n前面我们已经对 Nginx 服务器默认配置文件的结构和涉及的基本指令做了详细的阐述。通过这些指令的合理配置，我们就可以让一台 Nginx 服务器正常工作，并且提供基本的 Web 服务器功能。\n\n接下来我们将通过一个比较完整和最简单的基础配置实例，来巩固下前面所学习的指令及其配置。\n\n### 需求\n\n- 有如下访问：\n\n  `http://192.168.199.27:8081/server1/location1` 访问的是：index_sr1_location1.html `http://192.168.199.27:8081/server1/location2` 访问的是：index_sr1_location2.html `http://192.168.199.27:8082/server2/location1` 访问的是：index_sr2_location1.html `http://192.168.199.27:8082/server2/location2` 访问的是：index_sr2_location2.html\n\n- 如果访问的资源不存在，返回自定义的 404 页面\n\n- 将 /server1 和 /server2 的配置使用不同的配置文件分割，将两个文件文件放到 /home/www/conf.d 目录下，然后在 Nginx 的配置文件使用 include 合并两个文件\n\n- 为 /server1 和 /server2 各自创建一个访问日志文件\n\n### 实现\n\n```sh\n# 创建 404 页面\ntouch /home/www/404.html\n\n# 创建 conf.d 目录\nmkdir /home/www/conf\n\n# 创建两个配置文件\ntouch /home/www/conf/server1.conf\ntouch /home/www/conf/server2.conf\n\n# 创建 myweb 目录\nmkdir /home/www/myweb\n\n# 创建 server1 目录和其子目录以及 index.html 文件\nmkdir -p /home/www/myweb/server1/location1\nmkdir -p /home/www/myweb/server1/location2\n\ntouch /home/www/myweb/server1/location1/index.html\ntouch /home/www/myweb/server1/location2/index.html\n\n# 创建日志目录和日志文件\nmkdir -p /home/www/myweb/server1/logs\ntouch /home/www/myweb/server1/logs/access.log\n\n# 创建 server2 目录和其子目录以及 index.html 文件\n# 和创建 server1 步骤一样，把 1 改为 2 即可\n```\n\n准备相关文件，/homw/www 目录如下：\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.2fjy4216srrw.webp)\n\n因为 Nginx 自带配置文件的备份，即 nginx.conf.default，所以我们可以直接修改配置文件，但是如果你的配置文件曾经修改过，那么请进行备份。\n\n```sh\ncp /usr/local/nginx/conf/nginx.conf /usr/local/nginx/conf/nginx.conf.backup\n```\n\n备份后，进入 `/usr/local/nginx/conf/nginx.conf` 配置文件\n\n```sh\nvim /usr/local/nginx/conf/nginx.conf\n```\n\n先清空文件，然后添加如下内容:\n\n```\ncache-lifetime=\"5\" :options=\"{ useUrlFragment: false }\"\n```\n\n\n**有注释版**\n\n```NGINX\nuser www; # 配置允许运行 Nginx 工作进程的用户和用户组\nworker_processes 2;  # 配置运行 Nginx 进程生成的 worker 进程数\nerror_log logs/error.log;  # 配置 Nginx 服务器运行对错误日志存放的路径\npid logs/nginx.pid;   # 配置 Nginx 服务器允许时记录 Nginx 的 master 进程的 PID 文件路径和名称\ndaemon on;   # 配置 Nginx 服务是否以守护进程方法启动\n\nevents{\n\taccept_mutex on;   # 设置 Nginx 网络连接序列化,解决惊群\n\tmulti_accept on;   # 设置 Nginx 的 worker 进程是否可以同时接收多个请求\n\tworker_connections 1024;   # 设置 Nginx 的 worker 进程最大的连接数\n\tuse epoll;   # 设置 Nginx 使用的事件驱动模型\n}\n\nhttp{\n\n\tinclude mime.types;   # 定义 MIME-Type\n\tdefault_type application/octet-stream;\n\tsendfile on;   # 配置允许使用 sendfile 方式运输\n\tkeepalive_timeout 65;   # 配置连接超时时间\n\t\n\t# 配置请求处理日志格式\n\tlog_format server1 '===>server1 access log';\n\tlog_format server2 '===>server2 access log';\n\t\n\tinclude /home/www/conf/*.conf;  # 引用其他 conf 文件\n}\n```\n**无注释版**\n\n```NGINX\nuser www;\nworker_processes 2;\nerror_log logs/error.log;\npid logs/nginx.pid;\ndaemon on;\n\nevents{\n\taccept_mutex on;\n\tmulti_accept on;\n\tworker_connections 1024;\n\tuse epoll;\n}\n\nhttp{\n\n\tinclude mime.types;\n\tdefault_type application/octet-stream;\n\tsendfile on;\n\tkeepalive_timeout 65;\n\t\n\t\n\tlog_format server1 '===>this is server1 access log';\n\tlog_format server2 '===>this is server2 access log';\n\t\n\tinclude /home/www/conf/*.conf;\n}\n```\n\n第 25 行代码使用 include 将 service1 和service2 的配置文件进行引用。以后无需修改主配置文件，只需要引入子配置文件即可，主配置文件作为默认值，子配置文件的内容会覆盖和主配置文件相同的内容。\n\n进入 server1.conf 文件\n\n```sh\nvim /home/www/conf/server1.conf\n```\n\nserver1.conf 文件内容：\n```\ncache-lifetime=\"5\" :options=\"{ useUrlFragment: false }\"\n```\n\n**有注释版**\n\n```nginx\nserver{\n  listen 8081;   # 配置监听端口和主机名称\n  server_name localhost;\n  access_log /home/www/myweb/server1/logs/access.log server1;   # 配置请求处理日志存放路径\n  error_page 404 /404.html;   # 配置错误页面\n\n  location /server1/location1{   # 配置处理 /server1/location1 请求的 location\n      root /home/www/myweb;\n      index index.html;       # 这是 server1 下的 location1 的 index.html\n  }\n\n  location /server1/location2{   # 配置处理 /server1/location2 请求的 location\n      root /home/www/myweb;\n      index index.html;    # 这是 server1 下的 location2 的 index.html\n  }\n\n  location = /404.html {   # 配置错误页面转向\n      root /home/www;\n      index 404.html;\n  }\n}\n```\n**无注释版**\n\n```nginx\nserver{\n  listen 8081;\n  server_name localhost;\n  access_log /home/www/myweb/server1/logs/access.log server1;\n  error_page 404 /404.html;\n  \n  location /server1/location1{\n      root /home/www/myweb;\n      index index.html;\n  }\n  \n  location /server1/location2{\n      root /home/www/myweb;\n      index index.html;\n  }\n  \n  location = /404.html {\n      root /home/www;\n      index 404.html;\n  }\n}\t\n```\n\nserver2.conf 文件内容：\n\n```\ncache-lifetime=\"5\" :options=\"{ useUrlFragment: false }\"\n```\n\n**有注释版**\n\n```nginx\nserver{\n  listen 8082;   # 配置监听端口和主机名称\n  server_name localhost;\n  access_log /home/www/myweb/server2/logs/access.log server2;   # 配置请求处理日志存放路径\n  error_page 404 /404.html;   # 配置错误页面,对404.html做了定向配置\n  \n  location /server2/location1{   # 配置处理 /server1/location1 请求的 location\n      root /home/www/myweb;\n      index index.html;   # 这是 server2 下的 location1 的 index.html\n  }\n \n  location /server2/location2{   # 配置处理 /server2/location2 请求的 location\n      root /home/www/myweb;\n      index index.html;    # 这是 server2 下的 location2 的 index.html\n  }\n  \n  location = /404.html {   # 配置错误页面转向\n      root /home/www;\n      index 404.html;\n  }\n}\n```\n\n**无注解版**\n\n```nginx\nserver{\n  listen 8082;\n  server_name localhost;\n  access_log /home/www/myweb/server2/logs/access.log server2;\n  error_page 404 /404.html;\n  \n  location /server2/location1{\n      root /home/www/myweb;\n      index index.html;\n  }\n  \n  location /server2/location2{\n      root /home/www/myweb;\n      index index.html;\n  }\n  \n  location = /404.html {\n      root /home/www;\n      index 404.html;\n  }\n}\n```\n\nserver1下面的location1下面的index.html的内容\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n</head>\n<body>\n\t<h1>server1下面的loaction1下面的index.html</h1>\n</body>\n</html>\n```\n\n其他的三个页面把数字改了就可以\n\n404.html内容;\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n</head>\n<body>\n\t<h1>不好意思，程序小哥正在加紧维修中 ...... </h1>\n</body>\n</html>\n```\n\n重启 Nginx ，使得配置文件生效\n\n```sh\nnginx -s reload\n```\n\n### 测试\n\n如果没有关闭防火墙，记得开放 8081 和 8082 端口。\n\n```sh\n# 开放 8081 和 8082 端口\nfirewall-cmd --zone=public --add-port=8081/tcp --permanent\nfirewall-cmd --zone=public --add-port=8082/tcp --permanent\n\n# 重启防火墙\nfirewall-cmd --reload\n```\n\n打开浏览器分别访问，效果如图所示：\n\n8081 的 server1 的 location1：\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.8hg9dg1p4z0.webp)\n\n8081 的 server1 的 location2：\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.2dphfquey6v4.webp)\n\n8082 的 server2 的 location1：\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.rfbc49fqpmo.webp)\n\n8082 的 server2 的 location2：\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.1m80pe5hx1q8.webp)\n\n如果访问一个不存在的 404 请求：\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.3fccke6ob8c0.webp)\n\n日志也会打印，这里演示一个：\n\n```sh\n[root@master www]# tail /home/www/myweb/server1/logs/access.log\n===>this is server1 access log\n===>this is server1 access log\n===>this is server1 access log\n===>this is server1 access log\n===>this is server1 access log\n===>this is server1 access log\n===>this is server1 access log\n===>this is server1 access log\n===>this is server1 access log\n===>this is server1 access log\n```\n\n## 操作的问题\n\n经过前面的操作，我们会发现，如果想要启动、关闭或重新加载 Nginx 配置文件，都需要先进入到 Nginx 的安装目录的 sbin 目录，然后使用 Nginx 的二级制可执行文件 nginx 来操作，相对来说操作比较繁琐，这块该如何优化？另外如果我们想把 Nginx 设置成随着服务器启动就自动完成启动操作，又该如何来实现？\n\n这就需要用到接下来我们要讲解的两个知识点：\n\n- Nginx 服务启停配置\n- Nginx 全局命令配置\n\n## 服务启停配置\n\n把 Nginx 应用服务设置成为系统服务，方便对 Nginx 服务的启动和停止等相关操作，具体实现步骤:\n\n- 在 `/usr/lib/systemd/system` 目录下创建 nginx.service 文件\n\n```sh\nvim /usr/lib/systemd/system/nginx.service\n```\n\n文件添加如下内容：\n\n```sh\n[Unit]\nDescription=nginx web service\nDocumentation=http://nginx.org/en/docs/\nAfter=network.target\n\n[Service]\nType=forking\nPIDFile=/usr/local/nginx/logs/nginx.pid\nExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf\nExecStart=/usr/local/nginx/sbin/nginx\nExecReload=/usr/local/nginx/sbin/nginx -s reload\nExecStop=/usr/local/nginx/sbin/nginx -s stop\nPrivateTmp=true\n\n[Install]\nWantedBy=default.target\n```\n\n注意：可执行文件 nginx 根据自己的路径进行修改，以及 .conf 配置文件和 .pid 文件的路径。这份内容是基于默认安装目录的。\n\n+ 添加完成后，如果权限有问题需要进行权限设置，没有则忽略这一步\n\n```sh\nchmod 755 /usr/lib/systemd/system/nginx.service\n```\n\n+ 使用系统命令来操作 Nginx 服务\n\n```sh\n# 启动 Nginx\nsystemctl start nginx\n\n# 停止 Nginx\nsystemctl stop nginx\n\n# 重启 Nginx\nsystemctl restart nginx\n\n# 重新加载配置文件\nsystemctl reload nginx\n\n# 查看 Nginx 状态\nsystemctl status nginx\n\n# 开机启动\nsystemctl enable nginx\n\n# 关闭开启启动\nsystemctl disable nginx\n```\n\n## 全局命令配置\n\n前面我们介绍过 Nginx 安装目录下的二级制可执行文件 `nginx` 的很多命令，要想使用这些命令前提是需要进入 sbin 目录下才能使用，很不方便，如何去优化，我们可以将该二进制可执行文件加入到系统的环境变量，这样的话在任何目录都可以使用 nginx 对应的相关命令。具体实现步骤如下:\n\n方法一：\n\n+ 修改 `/etc/profile` 文件\n\n```sh\nvim /etc/profile\n\n# 在最后一行添加\nexport PATH=$PATH:/usr/local/nginx/sbin\n```\n\n可执行文件 nginx 的路径根据自己的路径修改，这里是默认路径。\n\n+ 使之立即生效\n\n```sh\nsource /etc/profile\n```\n\n+ 任意位置执行 nginx 命令，测试成功\n\n```sh\n[root@master ~]# nginx -v\nnginx version: nginx/1.21.6\n```\n\n方法二：\n\n- 将可执行文件 nginx 拷贝一份到 /usr/bin 目录下\n\n```sh\ncp /usr/local/nginx/sbin/nginx /usr/bin\n```\n\n+ 任意位置执行 nginx 命令，测试成功\n\n```sh\n[root@master ~]# nginx -v\nnginx version: nginx/1.21.6\n```\n\n","source":"_posts/Nginx_Basic_case_configuration.md","raw":"---\ntitle: Nginx 基础配置实例\ntags: [Nginx, 中间件, 后端]\ncategories: [Nginx]\ndate: 2022-11-10\n---\n# Nginx 基础配置实例\n\n**引言**\n\n学习了核心配置文件的内容，也仅仅是学习，没有实际例子来巩固的知识容易流失，本内容带你写一个简单的 demo 实例。\n\n每次开机都手动启动 Nginx 服务？每次使用 Nginx 的指令总是要进入 sbin 目录下？本文带你配置 Naginx 服务自启和全局 nginx 指令。\n\n\n## 基础配置实例\n\n前面我们已经对 Nginx 服务器默认配置文件的结构和涉及的基本指令做了详细的阐述。通过这些指令的合理配置，我们就可以让一台 Nginx 服务器正常工作，并且提供基本的 Web 服务器功能。\n\n接下来我们将通过一个比较完整和最简单的基础配置实例，来巩固下前面所学习的指令及其配置。\n\n### 需求\n\n- 有如下访问：\n\n  `http://192.168.199.27:8081/server1/location1` 访问的是：index_sr1_location1.html `http://192.168.199.27:8081/server1/location2` 访问的是：index_sr1_location2.html `http://192.168.199.27:8082/server2/location1` 访问的是：index_sr2_location1.html `http://192.168.199.27:8082/server2/location2` 访问的是：index_sr2_location2.html\n\n- 如果访问的资源不存在，返回自定义的 404 页面\n\n- 将 /server1 和 /server2 的配置使用不同的配置文件分割，将两个文件文件放到 /home/www/conf.d 目录下，然后在 Nginx 的配置文件使用 include 合并两个文件\n\n- 为 /server1 和 /server2 各自创建一个访问日志文件\n\n### 实现\n\n```sh\n# 创建 404 页面\ntouch /home/www/404.html\n\n# 创建 conf.d 目录\nmkdir /home/www/conf\n\n# 创建两个配置文件\ntouch /home/www/conf/server1.conf\ntouch /home/www/conf/server2.conf\n\n# 创建 myweb 目录\nmkdir /home/www/myweb\n\n# 创建 server1 目录和其子目录以及 index.html 文件\nmkdir -p /home/www/myweb/server1/location1\nmkdir -p /home/www/myweb/server1/location2\n\ntouch /home/www/myweb/server1/location1/index.html\ntouch /home/www/myweb/server1/location2/index.html\n\n# 创建日志目录和日志文件\nmkdir -p /home/www/myweb/server1/logs\ntouch /home/www/myweb/server1/logs/access.log\n\n# 创建 server2 目录和其子目录以及 index.html 文件\n# 和创建 server1 步骤一样，把 1 改为 2 即可\n```\n\n准备相关文件，/homw/www 目录如下：\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.2fjy4216srrw.webp)\n\n因为 Nginx 自带配置文件的备份，即 nginx.conf.default，所以我们可以直接修改配置文件，但是如果你的配置文件曾经修改过，那么请进行备份。\n\n```sh\ncp /usr/local/nginx/conf/nginx.conf /usr/local/nginx/conf/nginx.conf.backup\n```\n\n备份后，进入 `/usr/local/nginx/conf/nginx.conf` 配置文件\n\n```sh\nvim /usr/local/nginx/conf/nginx.conf\n```\n\n先清空文件，然后添加如下内容:\n\n```\ncache-lifetime=\"5\" :options=\"{ useUrlFragment: false }\"\n```\n\n\n**有注释版**\n\n```NGINX\nuser www; # 配置允许运行 Nginx 工作进程的用户和用户组\nworker_processes 2;  # 配置运行 Nginx 进程生成的 worker 进程数\nerror_log logs/error.log;  # 配置 Nginx 服务器运行对错误日志存放的路径\npid logs/nginx.pid;   # 配置 Nginx 服务器允许时记录 Nginx 的 master 进程的 PID 文件路径和名称\ndaemon on;   # 配置 Nginx 服务是否以守护进程方法启动\n\nevents{\n\taccept_mutex on;   # 设置 Nginx 网络连接序列化,解决惊群\n\tmulti_accept on;   # 设置 Nginx 的 worker 进程是否可以同时接收多个请求\n\tworker_connections 1024;   # 设置 Nginx 的 worker 进程最大的连接数\n\tuse epoll;   # 设置 Nginx 使用的事件驱动模型\n}\n\nhttp{\n\n\tinclude mime.types;   # 定义 MIME-Type\n\tdefault_type application/octet-stream;\n\tsendfile on;   # 配置允许使用 sendfile 方式运输\n\tkeepalive_timeout 65;   # 配置连接超时时间\n\t\n\t# 配置请求处理日志格式\n\tlog_format server1 '===>server1 access log';\n\tlog_format server2 '===>server2 access log';\n\t\n\tinclude /home/www/conf/*.conf;  # 引用其他 conf 文件\n}\n```\n**无注释版**\n\n```NGINX\nuser www;\nworker_processes 2;\nerror_log logs/error.log;\npid logs/nginx.pid;\ndaemon on;\n\nevents{\n\taccept_mutex on;\n\tmulti_accept on;\n\tworker_connections 1024;\n\tuse epoll;\n}\n\nhttp{\n\n\tinclude mime.types;\n\tdefault_type application/octet-stream;\n\tsendfile on;\n\tkeepalive_timeout 65;\n\t\n\t\n\tlog_format server1 '===>this is server1 access log';\n\tlog_format server2 '===>this is server2 access log';\n\t\n\tinclude /home/www/conf/*.conf;\n}\n```\n\n第 25 行代码使用 include 将 service1 和service2 的配置文件进行引用。以后无需修改主配置文件，只需要引入子配置文件即可，主配置文件作为默认值，子配置文件的内容会覆盖和主配置文件相同的内容。\n\n进入 server1.conf 文件\n\n```sh\nvim /home/www/conf/server1.conf\n```\n\nserver1.conf 文件内容：\n```\ncache-lifetime=\"5\" :options=\"{ useUrlFragment: false }\"\n```\n\n**有注释版**\n\n```nginx\nserver{\n  listen 8081;   # 配置监听端口和主机名称\n  server_name localhost;\n  access_log /home/www/myweb/server1/logs/access.log server1;   # 配置请求处理日志存放路径\n  error_page 404 /404.html;   # 配置错误页面\n\n  location /server1/location1{   # 配置处理 /server1/location1 请求的 location\n      root /home/www/myweb;\n      index index.html;       # 这是 server1 下的 location1 的 index.html\n  }\n\n  location /server1/location2{   # 配置处理 /server1/location2 请求的 location\n      root /home/www/myweb;\n      index index.html;    # 这是 server1 下的 location2 的 index.html\n  }\n\n  location = /404.html {   # 配置错误页面转向\n      root /home/www;\n      index 404.html;\n  }\n}\n```\n**无注释版**\n\n```nginx\nserver{\n  listen 8081;\n  server_name localhost;\n  access_log /home/www/myweb/server1/logs/access.log server1;\n  error_page 404 /404.html;\n  \n  location /server1/location1{\n      root /home/www/myweb;\n      index index.html;\n  }\n  \n  location /server1/location2{\n      root /home/www/myweb;\n      index index.html;\n  }\n  \n  location = /404.html {\n      root /home/www;\n      index 404.html;\n  }\n}\t\n```\n\nserver2.conf 文件内容：\n\n```\ncache-lifetime=\"5\" :options=\"{ useUrlFragment: false }\"\n```\n\n**有注释版**\n\n```nginx\nserver{\n  listen 8082;   # 配置监听端口和主机名称\n  server_name localhost;\n  access_log /home/www/myweb/server2/logs/access.log server2;   # 配置请求处理日志存放路径\n  error_page 404 /404.html;   # 配置错误页面,对404.html做了定向配置\n  \n  location /server2/location1{   # 配置处理 /server1/location1 请求的 location\n      root /home/www/myweb;\n      index index.html;   # 这是 server2 下的 location1 的 index.html\n  }\n \n  location /server2/location2{   # 配置处理 /server2/location2 请求的 location\n      root /home/www/myweb;\n      index index.html;    # 这是 server2 下的 location2 的 index.html\n  }\n  \n  location = /404.html {   # 配置错误页面转向\n      root /home/www;\n      index 404.html;\n  }\n}\n```\n\n**无注解版**\n\n```nginx\nserver{\n  listen 8082;\n  server_name localhost;\n  access_log /home/www/myweb/server2/logs/access.log server2;\n  error_page 404 /404.html;\n  \n  location /server2/location1{\n      root /home/www/myweb;\n      index index.html;\n  }\n  \n  location /server2/location2{\n      root /home/www/myweb;\n      index index.html;\n  }\n  \n  location = /404.html {\n      root /home/www;\n      index 404.html;\n  }\n}\n```\n\nserver1下面的location1下面的index.html的内容\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n</head>\n<body>\n\t<h1>server1下面的loaction1下面的index.html</h1>\n</body>\n</html>\n```\n\n其他的三个页面把数字改了就可以\n\n404.html内容;\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n</head>\n<body>\n\t<h1>不好意思，程序小哥正在加紧维修中 ...... </h1>\n</body>\n</html>\n```\n\n重启 Nginx ，使得配置文件生效\n\n```sh\nnginx -s reload\n```\n\n### 测试\n\n如果没有关闭防火墙，记得开放 8081 和 8082 端口。\n\n```sh\n# 开放 8081 和 8082 端口\nfirewall-cmd --zone=public --add-port=8081/tcp --permanent\nfirewall-cmd --zone=public --add-port=8082/tcp --permanent\n\n# 重启防火墙\nfirewall-cmd --reload\n```\n\n打开浏览器分别访问，效果如图所示：\n\n8081 的 server1 的 location1：\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.8hg9dg1p4z0.webp)\n\n8081 的 server1 的 location2：\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.2dphfquey6v4.webp)\n\n8082 的 server2 的 location1：\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.rfbc49fqpmo.webp)\n\n8082 的 server2 的 location2：\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.1m80pe5hx1q8.webp)\n\n如果访问一个不存在的 404 请求：\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.3fccke6ob8c0.webp)\n\n日志也会打印，这里演示一个：\n\n```sh\n[root@master www]# tail /home/www/myweb/server1/logs/access.log\n===>this is server1 access log\n===>this is server1 access log\n===>this is server1 access log\n===>this is server1 access log\n===>this is server1 access log\n===>this is server1 access log\n===>this is server1 access log\n===>this is server1 access log\n===>this is server1 access log\n===>this is server1 access log\n```\n\n## 操作的问题\n\n经过前面的操作，我们会发现，如果想要启动、关闭或重新加载 Nginx 配置文件，都需要先进入到 Nginx 的安装目录的 sbin 目录，然后使用 Nginx 的二级制可执行文件 nginx 来操作，相对来说操作比较繁琐，这块该如何优化？另外如果我们想把 Nginx 设置成随着服务器启动就自动完成启动操作，又该如何来实现？\n\n这就需要用到接下来我们要讲解的两个知识点：\n\n- Nginx 服务启停配置\n- Nginx 全局命令配置\n\n## 服务启停配置\n\n把 Nginx 应用服务设置成为系统服务，方便对 Nginx 服务的启动和停止等相关操作，具体实现步骤:\n\n- 在 `/usr/lib/systemd/system` 目录下创建 nginx.service 文件\n\n```sh\nvim /usr/lib/systemd/system/nginx.service\n```\n\n文件添加如下内容：\n\n```sh\n[Unit]\nDescription=nginx web service\nDocumentation=http://nginx.org/en/docs/\nAfter=network.target\n\n[Service]\nType=forking\nPIDFile=/usr/local/nginx/logs/nginx.pid\nExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf\nExecStart=/usr/local/nginx/sbin/nginx\nExecReload=/usr/local/nginx/sbin/nginx -s reload\nExecStop=/usr/local/nginx/sbin/nginx -s stop\nPrivateTmp=true\n\n[Install]\nWantedBy=default.target\n```\n\n注意：可执行文件 nginx 根据自己的路径进行修改，以及 .conf 配置文件和 .pid 文件的路径。这份内容是基于默认安装目录的。\n\n+ 添加完成后，如果权限有问题需要进行权限设置，没有则忽略这一步\n\n```sh\nchmod 755 /usr/lib/systemd/system/nginx.service\n```\n\n+ 使用系统命令来操作 Nginx 服务\n\n```sh\n# 启动 Nginx\nsystemctl start nginx\n\n# 停止 Nginx\nsystemctl stop nginx\n\n# 重启 Nginx\nsystemctl restart nginx\n\n# 重新加载配置文件\nsystemctl reload nginx\n\n# 查看 Nginx 状态\nsystemctl status nginx\n\n# 开机启动\nsystemctl enable nginx\n\n# 关闭开启启动\nsystemctl disable nginx\n```\n\n## 全局命令配置\n\n前面我们介绍过 Nginx 安装目录下的二级制可执行文件 `nginx` 的很多命令，要想使用这些命令前提是需要进入 sbin 目录下才能使用，很不方便，如何去优化，我们可以将该二进制可执行文件加入到系统的环境变量，这样的话在任何目录都可以使用 nginx 对应的相关命令。具体实现步骤如下:\n\n方法一：\n\n+ 修改 `/etc/profile` 文件\n\n```sh\nvim /etc/profile\n\n# 在最后一行添加\nexport PATH=$PATH:/usr/local/nginx/sbin\n```\n\n可执行文件 nginx 的路径根据自己的路径修改，这里是默认路径。\n\n+ 使之立即生效\n\n```sh\nsource /etc/profile\n```\n\n+ 任意位置执行 nginx 命令，测试成功\n\n```sh\n[root@master ~]# nginx -v\nnginx version: nginx/1.21.6\n```\n\n方法二：\n\n- 将可执行文件 nginx 拷贝一份到 /usr/bin 目录下\n\n```sh\ncp /usr/local/nginx/sbin/nginx /usr/bin\n```\n\n+ 任意位置执行 nginx 命令，测试成功\n\n```sh\n[root@master ~]# nginx -v\nnginx version: nginx/1.21.6\n```\n\n","slug":"Nginx_Basic_case_configuration","published":1,"updated":"2022-11-09T04:10:24.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdl00077a8vw15pvx3tx","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"Nginx-基础配置实例\"><a href=\"#Nginx-基础配置实例\" class=\"headerlink\" title=\"Nginx 基础配置实例\"></a>Nginx 基础配置实例</h1><p><strong>引言</strong></p>\n<p>学习了核心配置文件的内容，也仅仅是学习，没有实际例子来巩固的知识容易流失，本内容带你写一个简单的 demo 实例。</p>\n<p>每次开机都手动启动 Nginx 服务？每次使用 Nginx 的指令总是要进入 sbin 目录下？本文带你配置 Naginx 服务自启和全局 nginx 指令。</p>\n<h2 id=\"基础配置实例\"><a href=\"#基础配置实例\" class=\"headerlink\" title=\"基础配置实例\"></a>基础配置实例</h2><p>前面我们已经对 Nginx 服务器默认配置文件的结构和涉及的基本指令做了详细的阐述。通过这些指令的合理配置，我们就可以让一台 Nginx 服务器正常工作，并且提供基本的 Web 服务器功能。</p>\n<p>接下来我们将通过一个比较完整和最简单的基础配置实例，来巩固下前面所学习的指令及其配置。</p>\n<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><ul>\n<li><p>有如下访问：</p>\n<p><code>http://192.168.199.27:8081/server1/location1</code> 访问的是：index_sr1_location1.html <code>http://192.168.199.27:8081/server1/location2</code> 访问的是：index_sr1_location2.html <code>http://192.168.199.27:8082/server2/location1</code> 访问的是：index_sr2_location1.html <code>http://192.168.199.27:8082/server2/location2</code> 访问的是：index_sr2_location2.html</p>\n</li>\n<li><p>如果访问的资源不存在，返回自定义的 404 页面</p>\n</li>\n<li><p>将 /server1 和 /server2 的配置使用不同的配置文件分割，将两个文件文件放到 /home/www/conf.d 目录下，然后在 Nginx 的配置文件使用 include 合并两个文件</p>\n</li>\n<li><p>为 /server1 和 /server2 各自创建一个访问日志文件</p>\n</li>\n</ul>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建 404 页面</span></span><br><span class=\"line\">touch /home/www/404.html</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建 conf.d 目录</span></span><br><span class=\"line\">mkdir /home/www/conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建两个配置文件</span></span><br><span class=\"line\">touch /home/www/conf/server1.conf</span><br><span class=\"line\">touch /home/www/conf/server2.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建 myweb 目录</span></span><br><span class=\"line\">mkdir /home/www/myweb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建 server1 目录和其子目录以及 index.html 文件</span></span><br><span class=\"line\">mkdir -p /home/www/myweb/server1/location1</span><br><span class=\"line\">mkdir -p /home/www/myweb/server1/location2</span><br><span class=\"line\"></span><br><span class=\"line\">touch /home/www/myweb/server1/location1/index.html</span><br><span class=\"line\">touch /home/www/myweb/server1/location2/index.html</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建日志目录和日志文件</span></span><br><span class=\"line\">mkdir -p /home/www/myweb/server1/logs</span><br><span class=\"line\">touch /home/www/myweb/server1/logs/access.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建 server2 目录和其子目录以及 index.html 文件</span></span><br><span class=\"line\"><span class=\"comment\"># 和创建 server1 步骤一样，把 1 改为 2 即可</span></span><br></pre></td></tr></table></figure>\n\n<p>准备相关文件，/homw/www 目录如下：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.2fjy4216srrw.webp\" alt=\"image\"></p>\n<p>因为 Nginx 自带配置文件的备份，即 nginx.conf.default，所以我们可以直接修改配置文件，但是如果你的配置文件曾经修改过，那么请进行备份。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf /usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf.backup</span><br></pre></td></tr></table></figure>\n\n<p>备份后，进入 <code>/usr/local/nginx/conf/nginx.conf</code> 配置文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>先清空文件，然后添加如下内容:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cache-lifetime=&quot;5&quot; :options=&quot;&#123; useUrlFragment: false &#125;&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>有注释版</strong></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">user</span> www; <span class=\"comment\"># 配置允许运行 Nginx 工作进程的用户和用户组</span></span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span> <span class=\"number\">2</span>;  <span class=\"comment\"># 配置运行 Nginx 进程生成的 worker 进程数</span></span><br><span class=\"line\"><span class=\"attribute\">error_log</span> logs/error.log;  <span class=\"comment\"># 配置 Nginx 服务器运行对错误日志存放的路径</span></span><br><span class=\"line\"><span class=\"attribute\">pid</span> logs/nginx.pid;   <span class=\"comment\"># 配置 Nginx 服务器允许时记录 Nginx 的 master 进程的 PID 文件路径和名称</span></span><br><span class=\"line\"><span class=\"attribute\">daemon</span> <span class=\"literal\">on</span>;   <span class=\"comment\"># 配置 Nginx 服务是否以守护进程方法启动</span></span><br><span class=\"line\"></span><br><span class=\"line\">events&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">accept_mutex</span> <span class=\"literal\">on</span>;   <span class=\"comment\"># 设置 Nginx 网络连接序列化,解决惊群</span></span><br><span class=\"line\">\t<span class=\"attribute\">multi_accept</span> <span class=\"literal\">on</span>;   <span class=\"comment\"># 设置 Nginx 的 worker 进程是否可以同时接收多个请求</span></span><br><span class=\"line\">\t<span class=\"attribute\">worker_connections</span> <span class=\"number\">1024</span>;   <span class=\"comment\"># 设置 Nginx 的 worker 进程最大的连接数</span></span><br><span class=\"line\">\t<span class=\"attribute\">use</span> <span class=\"literal\">epoll</span>;   <span class=\"comment\"># 设置 Nginx 使用的事件驱动模型</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"attribute\">include</span> mime.types;   <span class=\"comment\"># 定义 MIME-Type</span></span><br><span class=\"line\">\t<span class=\"attribute\">default_type</span> application/octet-stream;</span><br><span class=\"line\">\t<span class=\"attribute\">sendfile</span> <span class=\"literal\">on</span>;   <span class=\"comment\"># 配置允许使用 sendfile 方式运输</span></span><br><span class=\"line\">\t<span class=\"attribute\">keepalive_timeout</span> <span class=\"number\">65</span>;   <span class=\"comment\"># 配置连接超时时间</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\"># 配置请求处理日志格式</span></span><br><span class=\"line\">\t<span class=\"attribute\">log_format</span> server1 <span class=\"string\">'===&gt;server1 access log'</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">log_format</span> server2 <span class=\"string\">'===&gt;server2 access log'</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"attribute\">include</span> /home/www/conf/<span class=\"regexp\">*.conf</span>;  <span class=\"comment\"># 引用其他 conf 文件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>无注释版</strong></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">user</span> www;</span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"attribute\">error_log</span> logs/error.log;</span><br><span class=\"line\"><span class=\"attribute\">pid</span> logs/nginx.pid;</span><br><span class=\"line\"><span class=\"attribute\">daemon</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">events&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">accept_mutex</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">multi_accept</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">worker_connections</span> <span class=\"number\">1024</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">use</span> <span class=\"literal\">epoll</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"attribute\">include</span> mime.types;</span><br><span class=\"line\">\t<span class=\"attribute\">default_type</span> application/octet-stream;</span><br><span class=\"line\">\t<span class=\"attribute\">sendfile</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">keepalive_timeout</span> <span class=\"number\">65</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"attribute\">log_format</span> server1 <span class=\"string\">'===&gt;this is server1 access log'</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">log_format</span> server2 <span class=\"string\">'===&gt;this is server2 access log'</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"attribute\">include</span> /home/www/conf/<span class=\"regexp\">*.conf</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第 25 行代码使用 include 将 service1 和service2 的配置文件进行引用。以后无需修改主配置文件，只需要引入子配置文件即可，主配置文件作为默认值，子配置文件的内容会覆盖和主配置文件相同的内容。</p>\n<p>进入 server1.conf 文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /home/www/conf/server1.conf</span><br></pre></td></tr></table></figure>\n\n<p>server1.conf 文件内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cache-lifetime=&quot;5&quot; :options=&quot;&#123; useUrlFragment: false &#125;&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>有注释版</strong></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">8081</span>;   <span class=\"comment\"># 配置监听端口和主机名称</span></span><br><span class=\"line\">  <span class=\"attribute\">server_name</span> localhost;</span><br><span class=\"line\">  <span class=\"attribute\">access_log</span> /home/www/myweb/server1/logs/access.log server1;   <span class=\"comment\"># 配置请求处理日志存放路径</span></span><br><span class=\"line\">  <span class=\"attribute\">error_page</span> <span class=\"number\">404</span> /<span class=\"number\">404</span>.html;   <span class=\"comment\"># 配置错误页面</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">location</span> /server1/location1&#123;   <span class=\"comment\"># 配置处理 /server1/location1 请求的 location</span></span><br><span class=\"line\">      <span class=\"attribute\">root</span> /home/www/myweb;</span><br><span class=\"line\">      <span class=\"attribute\">index</span> index.html;       <span class=\"comment\"># 这是 server1 下的 location1 的 index.html</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">location</span> /server1/location2&#123;   <span class=\"comment\"># 配置处理 /server1/location2 请求的 location</span></span><br><span class=\"line\">      <span class=\"attribute\">root</span> /home/www/myweb;</span><br><span class=\"line\">      <span class=\"attribute\">index</span> index.html;    <span class=\"comment\"># 这是 server1 下的 location2 的 index.html</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">location</span> = /<span class=\"number\">404</span>.html &#123;   <span class=\"comment\"># 配置错误页面转向</span></span><br><span class=\"line\">      <span class=\"attribute\">root</span> /home/www;</span><br><span class=\"line\">      <span class=\"attribute\">index</span> <span class=\"number\">404</span>.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>无注释版</strong></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">8081</span>;</span><br><span class=\"line\">  <span class=\"attribute\">server_name</span> localhost;</span><br><span class=\"line\">  <span class=\"attribute\">access_log</span> /home/www/myweb/server1/logs/access.log server1;</span><br><span class=\"line\">  <span class=\"attribute\">error_page</span> <span class=\"number\">404</span> /<span class=\"number\">404</span>.html;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">location</span> /server1/location1&#123;</span><br><span class=\"line\">      <span class=\"attribute\">root</span> /home/www/myweb;</span><br><span class=\"line\">      <span class=\"attribute\">index</span> index.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">location</span> /server1/location2&#123;</span><br><span class=\"line\">      <span class=\"attribute\">root</span> /home/www/myweb;</span><br><span class=\"line\">      <span class=\"attribute\">index</span> index.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">location</span> = /<span class=\"number\">404</span>.html &#123;</span><br><span class=\"line\">      <span class=\"attribute\">root</span> /home/www;</span><br><span class=\"line\">      <span class=\"attribute\">index</span> <span class=\"number\">404</span>.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>server2.conf 文件内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cache-lifetime=&quot;5&quot; :options=&quot;&#123; useUrlFragment: false &#125;&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>有注释版</strong></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">8082</span>;   <span class=\"comment\"># 配置监听端口和主机名称</span></span><br><span class=\"line\">  <span class=\"attribute\">server_name</span> localhost;</span><br><span class=\"line\">  <span class=\"attribute\">access_log</span> /home/www/myweb/server2/logs/access.log server2;   <span class=\"comment\"># 配置请求处理日志存放路径</span></span><br><span class=\"line\">  <span class=\"attribute\">error_page</span> <span class=\"number\">404</span> /<span class=\"number\">404</span>.html;   <span class=\"comment\"># 配置错误页面,对404.html做了定向配置</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">location</span> /server2/location1&#123;   <span class=\"comment\"># 配置处理 /server1/location1 请求的 location</span></span><br><span class=\"line\">      <span class=\"attribute\">root</span> /home/www/myweb;</span><br><span class=\"line\">      <span class=\"attribute\">index</span> index.html;   <span class=\"comment\"># 这是 server2 下的 location1 的 index.html</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"attribute\">location</span> /server2/location2&#123;   <span class=\"comment\"># 配置处理 /server2/location2 请求的 location</span></span><br><span class=\"line\">      <span class=\"attribute\">root</span> /home/www/myweb;</span><br><span class=\"line\">      <span class=\"attribute\">index</span> index.html;    <span class=\"comment\"># 这是 server2 下的 location2 的 index.html</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">location</span> = /<span class=\"number\">404</span>.html &#123;   <span class=\"comment\"># 配置错误页面转向</span></span><br><span class=\"line\">      <span class=\"attribute\">root</span> /home/www;</span><br><span class=\"line\">      <span class=\"attribute\">index</span> <span class=\"number\">404</span>.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>无注解版</strong></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">8082</span>;</span><br><span class=\"line\">  <span class=\"attribute\">server_name</span> localhost;</span><br><span class=\"line\">  <span class=\"attribute\">access_log</span> /home/www/myweb/server2/logs/access.log server2;</span><br><span class=\"line\">  <span class=\"attribute\">error_page</span> <span class=\"number\">404</span> /<span class=\"number\">404</span>.html;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">location</span> /server2/location1&#123;</span><br><span class=\"line\">      <span class=\"attribute\">root</span> /home/www/myweb;</span><br><span class=\"line\">      <span class=\"attribute\">index</span> index.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">location</span> /server2/location2&#123;</span><br><span class=\"line\">      <span class=\"attribute\">root</span> /home/www/myweb;</span><br><span class=\"line\">      <span class=\"attribute\">index</span> index.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">location</span> = /<span class=\"number\">404</span>.html &#123;</span><br><span class=\"line\">      <span class=\"attribute\">root</span> /home/www;</span><br><span class=\"line\">      <span class=\"attribute\">index</span> <span class=\"number\">404</span>.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>server1下面的location1下面的index.html的内容</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>server1下面的loaction1下面的index.html<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其他的三个页面把数字改了就可以</p>\n<p>404.html内容;</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>不好意思，程序小哥正在加紧维修中 ...... <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>重启 Nginx ，使得配置文件生效</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>如果没有关闭防火墙，记得开放 8081 和 8082 端口。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开放 8081 和 8082 端口</span></span><br><span class=\"line\">firewall-cmd --zone=public --add-port=8081/tcp --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --add-port=8082/tcp --permanent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启防火墙</span></span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n\n<p>打开浏览器分别访问，效果如图所示：</p>\n<p>8081 的 server1 的 location1：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.8hg9dg1p4z0.webp\" alt=\"image\"></p>\n<p>8081 的 server1 的 location2：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.2dphfquey6v4.webp\" alt=\"image\"></p>\n<p>8082 的 server2 的 location1：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.rfbc49fqpmo.webp\" alt=\"image\"></p>\n<p>8082 的 server2 的 location2：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.1m80pe5hx1q8.webp\" alt=\"image\"></p>\n<p>如果访问一个不存在的 404 请求：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.3fccke6ob8c0.webp\" alt=\"image\"></p>\n<p>日志也会打印，这里演示一个：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master www]<span class=\"comment\"># tail /home/www/myweb/server1/logs/access.log</span></span><br><span class=\"line\">===&gt;this is server1 access <span class=\"built_in\">log</span></span><br><span class=\"line\">===&gt;this is server1 access <span class=\"built_in\">log</span></span><br><span class=\"line\">===&gt;this is server1 access <span class=\"built_in\">log</span></span><br><span class=\"line\">===&gt;this is server1 access <span class=\"built_in\">log</span></span><br><span class=\"line\">===&gt;this is server1 access <span class=\"built_in\">log</span></span><br><span class=\"line\">===&gt;this is server1 access <span class=\"built_in\">log</span></span><br><span class=\"line\">===&gt;this is server1 access <span class=\"built_in\">log</span></span><br><span class=\"line\">===&gt;this is server1 access <span class=\"built_in\">log</span></span><br><span class=\"line\">===&gt;this is server1 access <span class=\"built_in\">log</span></span><br><span class=\"line\">===&gt;this is server1 access <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"操作的问题\"><a href=\"#操作的问题\" class=\"headerlink\" title=\"操作的问题\"></a>操作的问题</h2><p>经过前面的操作，我们会发现，如果想要启动、关闭或重新加载 Nginx 配置文件，都需要先进入到 Nginx 的安装目录的 sbin 目录，然后使用 Nginx 的二级制可执行文件 nginx 来操作，相对来说操作比较繁琐，这块该如何优化？另外如果我们想把 Nginx 设置成随着服务器启动就自动完成启动操作，又该如何来实现？</p>\n<p>这就需要用到接下来我们要讲解的两个知识点：</p>\n<ul>\n<li>Nginx 服务启停配置</li>\n<li>Nginx 全局命令配置</li>\n</ul>\n<h2 id=\"服务启停配置\"><a href=\"#服务启停配置\" class=\"headerlink\" title=\"服务启停配置\"></a>服务启停配置</h2><p>把 Nginx 应用服务设置成为系统服务，方便对 Nginx 服务的启动和停止等相关操作，具体实现步骤:</p>\n<ul>\n<li>在 <code>/usr/lib/systemd/system</code> 目录下创建 nginx.service 文件</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/lib/systemd/system/nginx.service</span><br></pre></td></tr></table></figure>\n\n<p>文件添加如下内容：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=nginx web service</span><br><span class=\"line\">Documentation=http://nginx.org/en/docs/</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">PIDFile=/usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid</span><br><span class=\"line\">ExecStartPre=/usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx -t -c /usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf</span><br><span class=\"line\">ExecStart=/usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx</span><br><span class=\"line\">ExecReload=/usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx -s reload</span><br><span class=\"line\">ExecStop=/usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx -s stop</span><br><span class=\"line\">PrivateTmp=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=default.target</span><br></pre></td></tr></table></figure>\n\n<p>注意：可执行文件 nginx 根据自己的路径进行修改，以及 .conf 配置文件和 .pid 文件的路径。这份内容是基于默认安装目录的。</p>\n<ul>\n<li>添加完成后，如果权限有问题需要进行权限设置，没有则忽略这一步</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 755 /usr/lib/systemd/system/nginx.service</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用系统命令来操作 Nginx 服务</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动 Nginx</span></span><br><span class=\"line\">systemctl start nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止 Nginx</span></span><br><span class=\"line\">systemctl stop nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启 Nginx</span></span><br><span class=\"line\">systemctl restart nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新加载配置文件</span></span><br><span class=\"line\">systemctl reload nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看 Nginx 状态</span></span><br><span class=\"line\">systemctl status nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开机启动</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭开启启动</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> nginx</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"全局命令配置\"><a href=\"#全局命令配置\" class=\"headerlink\" title=\"全局命令配置\"></a>全局命令配置</h2><p>前面我们介绍过 Nginx 安装目录下的二级制可执行文件 <code>nginx</code> 的很多命令，要想使用这些命令前提是需要进入 sbin 目录下才能使用，很不方便，如何去优化，我们可以将该二进制可执行文件加入到系统的环境变量，这样的话在任何目录都可以使用 nginx 对应的相关命令。具体实现步骤如下:</p>\n<p>方法一：</p>\n<ul>\n<li>修改 <code>/etc/profile</code> 文件</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在最后一行添加</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/nginx/sbin</span><br></pre></td></tr></table></figure>\n\n<p>可执行文件 nginx 的路径根据自己的路径修改，这里是默认路径。</p>\n<ul>\n<li>使之立即生效</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>任意位置执行 nginx 命令，测试成功</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master ~]<span class=\"comment\"># nginx -v</span></span><br><span class=\"line\">nginx version: nginx/1.21.6</span><br></pre></td></tr></table></figure>\n\n<p>方法二：</p>\n<ul>\n<li>将可执行文件 nginx 拷贝一份到 /usr/bin 目录下</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx /usr/bin</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>任意位置执行 nginx 命令，测试成功</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master ~]<span class=\"comment\"># nginx -v</span></span><br><span class=\"line\">nginx version: nginx/1.21.6</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"Nginx-基础配置实例\"><a href=\"#Nginx-基础配置实例\" class=\"headerlink\" title=\"Nginx 基础配置实例\"></a>Nginx 基础配置实例</h1><p><strong>引言</strong></p>\n<p>学习了核心配置文件的内容，也仅仅是学习，没有实际例子来巩固的知识容易流失，本内容带你写一个简单的 demo 实例。</p>\n<p>每次开机都手动启动 Nginx 服务？每次使用 Nginx 的指令总是要进入 sbin 目录下？本文带你配置 Naginx 服务自启和全局 nginx 指令。</p>\n<h2 id=\"基础配置实例\"><a href=\"#基础配置实例\" class=\"headerlink\" title=\"基础配置实例\"></a>基础配置实例</h2><p>前面我们已经对 Nginx 服务器默认配置文件的结构和涉及的基本指令做了详细的阐述。通过这些指令的合理配置，我们就可以让一台 Nginx 服务器正常工作，并且提供基本的 Web 服务器功能。</p>\n<p>接下来我们将通过一个比较完整和最简单的基础配置实例，来巩固下前面所学习的指令及其配置。</p>\n<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><ul>\n<li><p>有如下访问：</p>\n<p><code>http://192.168.199.27:8081/server1/location1</code> 访问的是：index_sr1_location1.html <code>http://192.168.199.27:8081/server1/location2</code> 访问的是：index_sr1_location2.html <code>http://192.168.199.27:8082/server2/location1</code> 访问的是：index_sr2_location1.html <code>http://192.168.199.27:8082/server2/location2</code> 访问的是：index_sr2_location2.html</p>\n</li>\n<li><p>如果访问的资源不存在，返回自定义的 404 页面</p>\n</li>\n<li><p>将 /server1 和 /server2 的配置使用不同的配置文件分割，将两个文件文件放到 /home/www/conf.d 目录下，然后在 Nginx 的配置文件使用 include 合并两个文件</p>\n</li>\n<li><p>为 /server1 和 /server2 各自创建一个访问日志文件</p>\n</li>\n</ul>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建 404 页面</span></span><br><span class=\"line\">touch /home/www/404.html</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建 conf.d 目录</span></span><br><span class=\"line\">mkdir /home/www/conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建两个配置文件</span></span><br><span class=\"line\">touch /home/www/conf/server1.conf</span><br><span class=\"line\">touch /home/www/conf/server2.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建 myweb 目录</span></span><br><span class=\"line\">mkdir /home/www/myweb</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建 server1 目录和其子目录以及 index.html 文件</span></span><br><span class=\"line\">mkdir -p /home/www/myweb/server1/location1</span><br><span class=\"line\">mkdir -p /home/www/myweb/server1/location2</span><br><span class=\"line\"></span><br><span class=\"line\">touch /home/www/myweb/server1/location1/index.html</span><br><span class=\"line\">touch /home/www/myweb/server1/location2/index.html</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建日志目录和日志文件</span></span><br><span class=\"line\">mkdir -p /home/www/myweb/server1/logs</span><br><span class=\"line\">touch /home/www/myweb/server1/logs/access.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建 server2 目录和其子目录以及 index.html 文件</span></span><br><span class=\"line\"><span class=\"comment\"># 和创建 server1 步骤一样，把 1 改为 2 即可</span></span><br></pre></td></tr></table></figure>\n\n<p>准备相关文件，/homw/www 目录如下：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.2fjy4216srrw.webp\" alt=\"image\"></p>\n<p>因为 Nginx 自带配置文件的备份，即 nginx.conf.default，所以我们可以直接修改配置文件，但是如果你的配置文件曾经修改过，那么请进行备份。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf /usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf.backup</span><br></pre></td></tr></table></figure>\n\n<p>备份后，进入 <code>/usr/local/nginx/conf/nginx.conf</code> 配置文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>先清空文件，然后添加如下内容:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cache-lifetime=&quot;5&quot; :options=&quot;&#123; useUrlFragment: false &#125;&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>有注释版</strong></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">user</span> www; <span class=\"comment\"># 配置允许运行 Nginx 工作进程的用户和用户组</span></span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span> <span class=\"number\">2</span>;  <span class=\"comment\"># 配置运行 Nginx 进程生成的 worker 进程数</span></span><br><span class=\"line\"><span class=\"attribute\">error_log</span> logs/error.log;  <span class=\"comment\"># 配置 Nginx 服务器运行对错误日志存放的路径</span></span><br><span class=\"line\"><span class=\"attribute\">pid</span> logs/nginx.pid;   <span class=\"comment\"># 配置 Nginx 服务器允许时记录 Nginx 的 master 进程的 PID 文件路径和名称</span></span><br><span class=\"line\"><span class=\"attribute\">daemon</span> <span class=\"literal\">on</span>;   <span class=\"comment\"># 配置 Nginx 服务是否以守护进程方法启动</span></span><br><span class=\"line\"></span><br><span class=\"line\">events&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">accept_mutex</span> <span class=\"literal\">on</span>;   <span class=\"comment\"># 设置 Nginx 网络连接序列化,解决惊群</span></span><br><span class=\"line\">\t<span class=\"attribute\">multi_accept</span> <span class=\"literal\">on</span>;   <span class=\"comment\"># 设置 Nginx 的 worker 进程是否可以同时接收多个请求</span></span><br><span class=\"line\">\t<span class=\"attribute\">worker_connections</span> <span class=\"number\">1024</span>;   <span class=\"comment\"># 设置 Nginx 的 worker 进程最大的连接数</span></span><br><span class=\"line\">\t<span class=\"attribute\">use</span> <span class=\"literal\">epoll</span>;   <span class=\"comment\"># 设置 Nginx 使用的事件驱动模型</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"attribute\">include</span> mime.types;   <span class=\"comment\"># 定义 MIME-Type</span></span><br><span class=\"line\">\t<span class=\"attribute\">default_type</span> application/octet-stream;</span><br><span class=\"line\">\t<span class=\"attribute\">sendfile</span> <span class=\"literal\">on</span>;   <span class=\"comment\"># 配置允许使用 sendfile 方式运输</span></span><br><span class=\"line\">\t<span class=\"attribute\">keepalive_timeout</span> <span class=\"number\">65</span>;   <span class=\"comment\"># 配置连接超时时间</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\"># 配置请求处理日志格式</span></span><br><span class=\"line\">\t<span class=\"attribute\">log_format</span> server1 <span class=\"string\">'===&gt;server1 access log'</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">log_format</span> server2 <span class=\"string\">'===&gt;server2 access log'</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"attribute\">include</span> /home/www/conf/<span class=\"regexp\">*.conf</span>;  <span class=\"comment\"># 引用其他 conf 文件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>无注释版</strong></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">user</span> www;</span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"attribute\">error_log</span> logs/error.log;</span><br><span class=\"line\"><span class=\"attribute\">pid</span> logs/nginx.pid;</span><br><span class=\"line\"><span class=\"attribute\">daemon</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">events&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">accept_mutex</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">multi_accept</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">worker_connections</span> <span class=\"number\">1024</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">use</span> <span class=\"literal\">epoll</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"attribute\">include</span> mime.types;</span><br><span class=\"line\">\t<span class=\"attribute\">default_type</span> application/octet-stream;</span><br><span class=\"line\">\t<span class=\"attribute\">sendfile</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">keepalive_timeout</span> <span class=\"number\">65</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"attribute\">log_format</span> server1 <span class=\"string\">'===&gt;this is server1 access log'</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">log_format</span> server2 <span class=\"string\">'===&gt;this is server2 access log'</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"attribute\">include</span> /home/www/conf/<span class=\"regexp\">*.conf</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第 25 行代码使用 include 将 service1 和service2 的配置文件进行引用。以后无需修改主配置文件，只需要引入子配置文件即可，主配置文件作为默认值，子配置文件的内容会覆盖和主配置文件相同的内容。</p>\n<p>进入 server1.conf 文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /home/www/conf/server1.conf</span><br></pre></td></tr></table></figure>\n\n<p>server1.conf 文件内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cache-lifetime=&quot;5&quot; :options=&quot;&#123; useUrlFragment: false &#125;&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>有注释版</strong></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">8081</span>;   <span class=\"comment\"># 配置监听端口和主机名称</span></span><br><span class=\"line\">  <span class=\"attribute\">server_name</span> localhost;</span><br><span class=\"line\">  <span class=\"attribute\">access_log</span> /home/www/myweb/server1/logs/access.log server1;   <span class=\"comment\"># 配置请求处理日志存放路径</span></span><br><span class=\"line\">  <span class=\"attribute\">error_page</span> <span class=\"number\">404</span> /<span class=\"number\">404</span>.html;   <span class=\"comment\"># 配置错误页面</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">location</span> /server1/location1&#123;   <span class=\"comment\"># 配置处理 /server1/location1 请求的 location</span></span><br><span class=\"line\">      <span class=\"attribute\">root</span> /home/www/myweb;</span><br><span class=\"line\">      <span class=\"attribute\">index</span> index.html;       <span class=\"comment\"># 这是 server1 下的 location1 的 index.html</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">location</span> /server1/location2&#123;   <span class=\"comment\"># 配置处理 /server1/location2 请求的 location</span></span><br><span class=\"line\">      <span class=\"attribute\">root</span> /home/www/myweb;</span><br><span class=\"line\">      <span class=\"attribute\">index</span> index.html;    <span class=\"comment\"># 这是 server1 下的 location2 的 index.html</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attribute\">location</span> = /<span class=\"number\">404</span>.html &#123;   <span class=\"comment\"># 配置错误页面转向</span></span><br><span class=\"line\">      <span class=\"attribute\">root</span> /home/www;</span><br><span class=\"line\">      <span class=\"attribute\">index</span> <span class=\"number\">404</span>.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>无注释版</strong></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">8081</span>;</span><br><span class=\"line\">  <span class=\"attribute\">server_name</span> localhost;</span><br><span class=\"line\">  <span class=\"attribute\">access_log</span> /home/www/myweb/server1/logs/access.log server1;</span><br><span class=\"line\">  <span class=\"attribute\">error_page</span> <span class=\"number\">404</span> /<span class=\"number\">404</span>.html;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">location</span> /server1/location1&#123;</span><br><span class=\"line\">      <span class=\"attribute\">root</span> /home/www/myweb;</span><br><span class=\"line\">      <span class=\"attribute\">index</span> index.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">location</span> /server1/location2&#123;</span><br><span class=\"line\">      <span class=\"attribute\">root</span> /home/www/myweb;</span><br><span class=\"line\">      <span class=\"attribute\">index</span> index.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">location</span> = /<span class=\"number\">404</span>.html &#123;</span><br><span class=\"line\">      <span class=\"attribute\">root</span> /home/www;</span><br><span class=\"line\">      <span class=\"attribute\">index</span> <span class=\"number\">404</span>.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>server2.conf 文件内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cache-lifetime=&quot;5&quot; :options=&quot;&#123; useUrlFragment: false &#125;&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>有注释版</strong></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">8082</span>;   <span class=\"comment\"># 配置监听端口和主机名称</span></span><br><span class=\"line\">  <span class=\"attribute\">server_name</span> localhost;</span><br><span class=\"line\">  <span class=\"attribute\">access_log</span> /home/www/myweb/server2/logs/access.log server2;   <span class=\"comment\"># 配置请求处理日志存放路径</span></span><br><span class=\"line\">  <span class=\"attribute\">error_page</span> <span class=\"number\">404</span> /<span class=\"number\">404</span>.html;   <span class=\"comment\"># 配置错误页面,对404.html做了定向配置</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">location</span> /server2/location1&#123;   <span class=\"comment\"># 配置处理 /server1/location1 请求的 location</span></span><br><span class=\"line\">      <span class=\"attribute\">root</span> /home/www/myweb;</span><br><span class=\"line\">      <span class=\"attribute\">index</span> index.html;   <span class=\"comment\"># 这是 server2 下的 location1 的 index.html</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"attribute\">location</span> /server2/location2&#123;   <span class=\"comment\"># 配置处理 /server2/location2 请求的 location</span></span><br><span class=\"line\">      <span class=\"attribute\">root</span> /home/www/myweb;</span><br><span class=\"line\">      <span class=\"attribute\">index</span> index.html;    <span class=\"comment\"># 这是 server2 下的 location2 的 index.html</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">location</span> = /<span class=\"number\">404</span>.html &#123;   <span class=\"comment\"># 配置错误页面转向</span></span><br><span class=\"line\">      <span class=\"attribute\">root</span> /home/www;</span><br><span class=\"line\">      <span class=\"attribute\">index</span> <span class=\"number\">404</span>.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>无注解版</strong></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">8082</span>;</span><br><span class=\"line\">  <span class=\"attribute\">server_name</span> localhost;</span><br><span class=\"line\">  <span class=\"attribute\">access_log</span> /home/www/myweb/server2/logs/access.log server2;</span><br><span class=\"line\">  <span class=\"attribute\">error_page</span> <span class=\"number\">404</span> /<span class=\"number\">404</span>.html;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">location</span> /server2/location1&#123;</span><br><span class=\"line\">      <span class=\"attribute\">root</span> /home/www/myweb;</span><br><span class=\"line\">      <span class=\"attribute\">index</span> index.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">location</span> /server2/location2&#123;</span><br><span class=\"line\">      <span class=\"attribute\">root</span> /home/www/myweb;</span><br><span class=\"line\">      <span class=\"attribute\">index</span> index.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">location</span> = /<span class=\"number\">404</span>.html &#123;</span><br><span class=\"line\">      <span class=\"attribute\">root</span> /home/www;</span><br><span class=\"line\">      <span class=\"attribute\">index</span> <span class=\"number\">404</span>.html;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>server1下面的location1下面的index.html的内容</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>server1下面的loaction1下面的index.html<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其他的三个页面把数字改了就可以</p>\n<p>404.html内容;</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>不好意思，程序小哥正在加紧维修中 ...... <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>重启 Nginx ，使得配置文件生效</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>如果没有关闭防火墙，记得开放 8081 和 8082 端口。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开放 8081 和 8082 端口</span></span><br><span class=\"line\">firewall-cmd --zone=public --add-port=8081/tcp --permanent</span><br><span class=\"line\">firewall-cmd --zone=public --add-port=8082/tcp --permanent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启防火墙</span></span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n\n<p>打开浏览器分别访问，效果如图所示：</p>\n<p>8081 的 server1 的 location1：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.8hg9dg1p4z0.webp\" alt=\"image\"></p>\n<p>8081 的 server1 的 location2：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.2dphfquey6v4.webp\" alt=\"image\"></p>\n<p>8082 的 server2 的 location1：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.rfbc49fqpmo.webp\" alt=\"image\"></p>\n<p>8082 的 server2 的 location2：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.1m80pe5hx1q8.webp\" alt=\"image\"></p>\n<p>如果访问一个不存在的 404 请求：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.3fccke6ob8c0.webp\" alt=\"image\"></p>\n<p>日志也会打印，这里演示一个：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master www]<span class=\"comment\"># tail /home/www/myweb/server1/logs/access.log</span></span><br><span class=\"line\">===&gt;this is server1 access <span class=\"built_in\">log</span></span><br><span class=\"line\">===&gt;this is server1 access <span class=\"built_in\">log</span></span><br><span class=\"line\">===&gt;this is server1 access <span class=\"built_in\">log</span></span><br><span class=\"line\">===&gt;this is server1 access <span class=\"built_in\">log</span></span><br><span class=\"line\">===&gt;this is server1 access <span class=\"built_in\">log</span></span><br><span class=\"line\">===&gt;this is server1 access <span class=\"built_in\">log</span></span><br><span class=\"line\">===&gt;this is server1 access <span class=\"built_in\">log</span></span><br><span class=\"line\">===&gt;this is server1 access <span class=\"built_in\">log</span></span><br><span class=\"line\">===&gt;this is server1 access <span class=\"built_in\">log</span></span><br><span class=\"line\">===&gt;this is server1 access <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"操作的问题\"><a href=\"#操作的问题\" class=\"headerlink\" title=\"操作的问题\"></a>操作的问题</h2><p>经过前面的操作，我们会发现，如果想要启动、关闭或重新加载 Nginx 配置文件，都需要先进入到 Nginx 的安装目录的 sbin 目录，然后使用 Nginx 的二级制可执行文件 nginx 来操作，相对来说操作比较繁琐，这块该如何优化？另外如果我们想把 Nginx 设置成随着服务器启动就自动完成启动操作，又该如何来实现？</p>\n<p>这就需要用到接下来我们要讲解的两个知识点：</p>\n<ul>\n<li>Nginx 服务启停配置</li>\n<li>Nginx 全局命令配置</li>\n</ul>\n<h2 id=\"服务启停配置\"><a href=\"#服务启停配置\" class=\"headerlink\" title=\"服务启停配置\"></a>服务启停配置</h2><p>把 Nginx 应用服务设置成为系统服务，方便对 Nginx 服务的启动和停止等相关操作，具体实现步骤:</p>\n<ul>\n<li>在 <code>/usr/lib/systemd/system</code> 目录下创建 nginx.service 文件</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/lib/systemd/system/nginx.service</span><br></pre></td></tr></table></figure>\n\n<p>文件添加如下内容：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=nginx web service</span><br><span class=\"line\">Documentation=http://nginx.org/en/docs/</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">PIDFile=/usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid</span><br><span class=\"line\">ExecStartPre=/usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx -t -c /usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf</span><br><span class=\"line\">ExecStart=/usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx</span><br><span class=\"line\">ExecReload=/usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx -s reload</span><br><span class=\"line\">ExecStop=/usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx -s stop</span><br><span class=\"line\">PrivateTmp=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=default.target</span><br></pre></td></tr></table></figure>\n\n<p>注意：可执行文件 nginx 根据自己的路径进行修改，以及 .conf 配置文件和 .pid 文件的路径。这份内容是基于默认安装目录的。</p>\n<ul>\n<li>添加完成后，如果权限有问题需要进行权限设置，没有则忽略这一步</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 755 /usr/lib/systemd/system/nginx.service</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用系统命令来操作 Nginx 服务</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动 Nginx</span></span><br><span class=\"line\">systemctl start nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止 Nginx</span></span><br><span class=\"line\">systemctl stop nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启 Nginx</span></span><br><span class=\"line\">systemctl restart nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新加载配置文件</span></span><br><span class=\"line\">systemctl reload nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看 Nginx 状态</span></span><br><span class=\"line\">systemctl status nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开机启动</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭开启启动</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> nginx</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"全局命令配置\"><a href=\"#全局命令配置\" class=\"headerlink\" title=\"全局命令配置\"></a>全局命令配置</h2><p>前面我们介绍过 Nginx 安装目录下的二级制可执行文件 <code>nginx</code> 的很多命令，要想使用这些命令前提是需要进入 sbin 目录下才能使用，很不方便，如何去优化，我们可以将该二进制可执行文件加入到系统的环境变量，这样的话在任何目录都可以使用 nginx 对应的相关命令。具体实现步骤如下:</p>\n<p>方法一：</p>\n<ul>\n<li>修改 <code>/etc/profile</code> 文件</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在最后一行添加</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/usr/<span class=\"built_in\">local</span>/nginx/sbin</span><br></pre></td></tr></table></figure>\n\n<p>可执行文件 nginx 的路径根据自己的路径修改，这里是默认路径。</p>\n<ul>\n<li>使之立即生效</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>任意位置执行 nginx 命令，测试成功</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master ~]<span class=\"comment\"># nginx -v</span></span><br><span class=\"line\">nginx version: nginx/1.21.6</span><br></pre></td></tr></table></figure>\n\n<p>方法二：</p>\n<ul>\n<li>将可执行文件 nginx 拷贝一份到 /usr/bin 目录下</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx /usr/bin</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>任意位置执行 nginx 命令，测试成功</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master ~]<span class=\"comment\"># nginx -v</span></span><br><span class=\"line\">nginx version: nginx/1.21.6</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Nginx 核心配置文件","date":"2022-11-09T16:00:00.000Z","_content":"# Nginx 核心配置文件\n\n从前面的内容学习中，我们知道 Nginx 的核心配置文件默认是放在 `/usr/local/nginx/conf/nginx.conf`，本次我们就来学习下 nginx.conf 的内容和基本配置方法。\n\n---\n\n\n## 配置文件内容\n\n读取 Nginx 自带的 Nginx 配置文件，配置文件内容很多，我们先将其中的注释部分【学习一个技术点就是在 Nginx 的配置文件中可以使用 `#` 来注释】删除掉后，就剩下如下内容：\n\n```nginx\nworker_processes  1;   # 使用指令 1 \n\nevents {    # 这是 events 块\n    worker_connections  1024;\n}\n\nhttp {    # 这是 http 块\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n\n    server {\n        listen       80;   # 监听 80 端口\n        server_name  localhost;   # 监听请求过来的 IP\n        location / {   # 请求的地址是 /，则进入这个配置，访问 idnex.html\n            root   html;      # 进入 html 目录找到访问的页面\n            index  index.html index.htm;\n        }\n        # 如果访问的页面是 500 502 503 504，则发送 /50x.html 请求\n        error_page   500 502 503 504  /50x.html;  \n        location = /50x.html {      # 如果匹配上 /50x.html 请求\n            root   html;     # 则进入 html 目录找到 /50x.html\n        }\n    }\n}\n```\n\n对上面文件内容的解释，一一对应比较解释：\n\n```nginx\n指令名\t指令值;  # 全局块，主要设置 Nginx 服务器整体运行的配置指令\n\n# events 块，主要设置 Nginx 服务器与用户的网络连接,这一部分对 Nginx 服务器的性能影响较大\nevents {\t \n    指令名\t指令值;\n}\n\n# http 块，是 Nginx 服务器配置中的重要部分，代理、缓存、日志记录、第三方模块配置...             \nhttp {\t\t\n    指令名\t指令值;\n\n    server { \t\t# server 块，是 Nginx 配置和虚拟主机相关的内容\n        指令名\t指令值;\n        location / {      # location 块，基于 Nginx 服务器接收请求字符串与 location 后面的值进行匹配，对特定请求进行处理\n            指令名\t指令值;\n        }\n    }\n    ...\n}\n```\n\n### 小结\n\nnginx.conf 配置文件中默认有三大块：全局块、events 块、http 块\n\nhttp 块中可以配置多个 server 块，每个 server 块又可以配置多个 location 块。\n\n\n## 全局块\n\n全局块的配置影响 Nginx 的全局设置。如用户权限，启动的进程数等。\n\n### user指令\n\n1. user：用于配置运行 Nginx 服务器的 worker 进程的用户和用户组。\n\n| 语法                 | 默认值 | 位置   |\n| -------------------- | ------ | ------ |\n| user \\<user> [group] | nobody | 全局块 |\n\n该属性也可以在编译的时候指定，语法如下 `./configure --user=user --group=group`，如果两个地方都进行了设置，最终生效的是配置文件中的配置。\n\n该指令的使用步骤:\n\n1. 进入配置文件添加一个用户信息 『 www 』\n\n```sh\nuser www\n```\n\n测试进行测试配置文件会报错：\n\n```sh\nnginx -t\n```\n\n```sh\n[root@master conf]# nginx -t\nnginx: [emerg] getpwnam(\"www\") failed in /usr/local/nginx/conf/nginx.conf:1\nnginx: configuration file /usr/local/nginx/conf/nginx.conf test failed\n```\n\n原因在于 Linux 系统不存在 www 用户，我们需要创建它。\n\n2. 创建一个用户\n\n```sh\nuseradd www\n```\n\n3. 重启 Nginx 的配置文件\n\n```sh\nnginx -s reload\n\n# 查看重启是否生效\nps -ef | grep nginx\n```\n\n最后返回的结果由 root 用户改为 www 用户，代表配置成功。\n\n```sh\n[root@master conf]# ps -ef | grep nginx\nroot       8960      1  0 16:13 ?        00:00:00 nginx: master process ./nginx\nwww       11975   8960  0 20:44 ?        00:00:00 nginx: worker process\nroot      11978  10615  0 20:44 pts/1    00:00:00 grep --color=auto nginx\n```\n\n4. 在 Linux 的 `/root` 下创建一个 html 目录，并且进入 html 目录，创建 index.html 文件\n\n```sh\nmkdir /root/html\n\ncd /root/html\n\nvim index.html\n```\n\n然后在 `/root/html/index.html` 文件里添加如下内容：\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n<style>\n    body {\n        width: 35em;\n        margin: 0 auto;\n        font-family: Tahoma, Verdana, Arial, sans-serif;\n    }\n</style>\n</head>\n<body>\n<h1>Welcome to nginx!</h1>\n<p>If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.</p>\n\n<p>For online documentation and support please refer to\n<a href=\"http://nginx.org/\">nginx.org</a>.<br/>\nCommercial support is available at\n<a href=\"http://nginx.com/\">nginx.com</a>.</p>\n\n<p><em>Thank you for using nginx.</em></p>\n<p><em>I am WWW</em></p>\n</body>\n</html>\n```\n\n这些内容其实就是在 Nginx 的欢迎页面上多加别 `I am WWW` 内容。\n\n5. 修改 nginx.conf\n\n```nginx\nlocation / {\n\t# root   html;  # 原始的代码注释掉\n\troot   /root/html;    # 不再是 html 目录，而是 root 下的 html 目录\n\tindex  index.html index.htm;  # 就是上方创建的 index.html\n}\n```\n\n6. `nginx -s reload`重新加载后，测试启动访问\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.6dtnfz58zpo0.webp)\n\n 页面会报 403 拒绝访问的错误。\n\n7. 分析原因：因为当前用户（www 用户）没有访问 `/root/html` 目录的权限，这个目录只有 root 才能访问。\n\n那么 www 如何访问我们写的 index.html 页面呢？我们知道，每新建一个用户，`/home` 下都会生成该用户权限的目录。\n\n8. 将文件移动到 `/home/www/html/index.html`\n\n```sh\nmv /root/html /home/www\n```\n\n9. 记得修改配置文件的资源内容\n\n```nginx\nlocation / {\n\t# root   html;  # 原始的代码注释掉\n\t# root   /root/html;   # 这属于 root 权限的页面，注释或者删除掉\n\troot   /home/www/html;  # 这是 www 用户有权限访问的目录\n\tindex  index.html index.htm;   # 访问了 html 目录，然后访问 index.html 文件\n}\n```\n\n10. 再次测试启动访问，可以正常访问。\n\n综上所述，使用 user 指令可以指定启动运行工作进程的用户及用户组，这样对于系统的权限访问控制的更加精细，也更加安全。\n\n我们也能理解了配置文件的 `locaotion` 块的基本使用，root 对应着访问目录，index 对应着访问目录下的默认页面。\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.6igjptnd6eo0.webp)\n\n### work process指令\n\n1. `master_process` 指令用来指定是否开启 worker 工作进程。\n\n如果为 off，则代表关闭了 worker 进程，这时候启动 Nginx，只有 master 进程启动，没有 worker 进程。默认开启 worker 工作进程。(<mark>需要重启nginx服务生效</mark>)\n\n| 语法                        | 默认值             | 位置   |\n| --------------------------- | ------------------ | ------ |\n| master_process <on \\| off>; | master_process on; | 全局块 |\n\n2. `worker_processes` 指令用于配置 Nginx 生成 worker 工作进程的数量，这个是 Nginx 服务器实现并发处理\n\n   服务的关键所在。\n\n理论上来说 `workder process` 的值越大，可以支持的并发处理量也越多，但事实上这个值的设定是需要受到来自服务器自身的限制，建议将该值和服务器 CPU 的内核数保存一致。\n\n| 语法                            | 默认值 | 位置   |\n| ------------------------------- | ------ | ------ |\n| worker_processes <num \\| auto>; | 1      | 全局块 |\n\n如果将 `worker_processes` 设置成 2，则会看到如下内容:\n\n```sh\n[root@master conf]# ps -ef | grep nginx\nroot       8960      1  0 16:13 ?        00:00:00 nginx: master process ./nginx\nwww       12299   8960  0 21:14 ?        00:00:00 nginx: worker process\nwww       12300   8960  0 21:14 ?        00:00:00 nginx: worker process\nroot      12302  10615  0 21:14 pts/1    00:00:00 grep --color=auto nginx\n```\n\n出现两个 worker 工作进程。\n\n### 其他指令\n\n1. `daemon` 指令设置 Nginx 是否以守护进程的方式启动。on 代表开启守护进程，off 代表关闭守护进程，默认开启。(<mark>需要重启nginx生效</mark>)\n\n守护式进程是 Linux 后台执行的一种服务进程，特点是 **独立于控制终端，不会随着终端关闭而停止**，也就是后台启动。\n\n| 语法                | 默认值     | 位置   |\n| ------------------- | ---------- | ------ |\n| daemon <on \\| off>; | daemon on; | 全局块 |\n\n2. `pid` 指令用来配置 Nginx 当前 master 进程的进程号 ID 存储的文件路径。默认路径是 `/usr/local/nginx/logs/nginx.pid`。\n\n| 语法         | 默认值                          | 位置   |\n| ------------ | ------------------------------- | ------ |\n| pid \\<file>; | /usr/local/nginx/logs/nginx.pid | 全局块 |\n\n该属性也可以通过 `./configure --pid-path=PATH` 在编译时来指定。\n\n3. `error_log` 指令用来配置 Nginx 的错误日志存放路径。默认路径是 `/usr/local/nginx/logs/error.log`。\n\n| 语法                          | 默认值                          | 位置                           |\n| ----------------------------- | ------------------------------- | ------------------------------ |\n| error_log \\<file> [日志级别]; | error_log logs/error.log error; | 全局块、http、server、location |\n\n该属性也可以通过 `./configure --error-log-path=PATH` 在编译时来指定。\n\n其中日志级别的值有『 debug | info | notice | warn | error | crit | alert | emerg 』，翻译过来为「调试 | 信息 | 通知 | 警告 | 错误 | 临界 | 警报 | 紧急」，这块建议大家设置的时候不要设置成 info 以下的等级，因为会带来大量的磁盘 I/O 消耗，影响 Nginx 的性能。\n\n4. `include` 指令用来引入其他的配置文件，使 Nginx 的配置更加灵活。\n\n| 语法             | 默认值 | 位置 |\n| ---------------- | ------ | ---- |\n| include \\<file>; | 无     | any  |\n\n## events块\n\n### events指令\n\n1. `accept_mutex` 指令用来设置是否开启 Nginx 网络连接序列化。默认开启。\n\n| 语法                      | 默认值           | 位置   |\n| ------------------------- | ---------------- | ------ |\n| accept_mutex <on \\| off>; | accept_mutex on; | events |\n\n这个配置主要可以用来解决常说的「惊群」问题。大致意思是在某一个时刻，客户端发来一个请求连接，Nginx 后台是以多进程的工作模式，也就是说有多个 worker 进程会被同时唤醒，但是最终只会有一个进程可以获取到连接，如果每次唤醒的进程数目太多，就会影响 Nginx 的整体性能。如果将上述值设置为 on (开启状态)，将会对多个 Nginx 进程接收连接进行序列号，一个个来唤醒接收，就防止了多个进程对连接的争抢。\n\n如图的小狗，如果只是一块「骨头」出现，则只需要唤醒一个小狗即可（开启 on），如果多个「骨头」如三个同时出现，那么唤醒三个小狗效率更高（此时需要设置 off）\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.118zwwf8v268.webp)\n\n2. `multi_accept` 指令用来设置是否开启同时接收多个网络连接。默认开启。\n\n| 语法                      | 默认值            | 位置   |\n| ------------------------- | ----------------- | ------ |\n| multi_accept <on \\| off>; | multi_accept off; | events |\n\n如果 multi_accept 被禁止了，Nginx 的一个工作进程只能同时接受一个新的连接。如果开启，一个工作进程可以同时接受所有的新连接。**建议开启。**\n\n3. `worker_connections` 指令用来配置单个 worker 进程最大的连接数。默认 512 个连接数。\n\n| 语法                          | 默认值                  | 位置   |\n| ----------------------------- | ----------------------- | ------ |\n| worker_connections \\<number>; | worker_commections 512; | events |\n\n这里的连接数不仅仅包括和前端用户建立的连接数，而是包括所有可能的连接数。另外，number 值不能大于操作系统支持打开的最大文件句柄数量。\n\n4. `use` 指令用来设置 Nginx 服务器选择哪种事件驱动来处理网络消息。\n\n| 语法           | 默认值           | 位置   |\n| -------------- | ---------------- | ------ |\n| use \\<method>; | 根据操作系统规定 | events |\n\n注意：此处所选择事件处理模型是 Nginx 优化部分的一个重要内容，method 的可选值有『 select | poll | epoll | kqueue 』等，之前在准备 Centos 环境的时候，我们强调过要使用 Linux 内核在 2.6 以上，就是为了能使用 epoll 函数来优化 Nginx。\n\n另外这些值的选择，我们也可以在编译的时候使用 `--with-select_module`、`--without-select_module`、`--with-poll_module`、`--without-poll_module` 来设置是否需要将对应的事件驱动模块编译到 Nginx 的内核。\n\n### events指令配置模板\n\n打开 Nginx 的配置文件 nginx.conf，添加如下配置\n\n```nginx\nevents{\n\taccept_mutex on;    # 开启 Nginx 网络连接序列化\n\tmulti_accept on;    # 开启同时接收多个网络连接\n\tworker_commections 1024;   # 单个 worker 进程最大的连接数\n\tuse epoll;   # 使用 epoll 函数来优化 Nginx\n}\n```\n\n启动测试\n\n```sh\n# 测试配置是否语法出错\nnginx -t\n\n# 重新加载 Nginx\nnginx -s reload\n```\n\n## http块\n\n### 定义MIME-Type\n\n我们都知道浏览器中可以显示的内容有 HTML、XML、GIF 等种类繁多的文件、媒体等资源，浏览器为了区分这些资源，就需要使用 MIME Type。所以说 MIME Type 是网络资源的媒体类型。Nginx 作为 Web 服务器，也需要能够识别前端请求的资源类型。\n\n在 Nginx 的配置文件中，默认有两行配置：\n\n```sh\ninclude mime.types;      # 引入 mime.types 文件的内容\ndefault_type application/octet-stream;     # 默认的 MIME 类型\n```\n\n1. `default_type` 指令用来配置 Nginx 响应前端请求默认的 MIME 类型。默认是 text 文本。\n\n| 语法                       | 默认值                   | 位置                   |\n| -------------------------- | ------------------------ | ---------------------- |\n| default_type \\<mime-type>; | default_type text/plain; | http、server、location |\n\n在 `default_type` 前面还有一句 `include mime.types`，include 之前我们已经介绍过，相当于把 mime.types 文件中 MIMT 类型与相关类型文件的文件后缀名的对应关系加入到当前的配置文件中。\n\n举例来说明：\n\n有些时候请求某些接口的时候需要返回指定的文本字符串或者 json 字符串，而不是页面，如果逻辑非常简单或者干脆是固定的字符串，那么可以使用 Nginx 快速实现，这样就不用编写程序响应请求了，可以减少服务器资源占用并且响应性能非常快。\n\n如何实现：\n\n```nginx\nlocation /get_text {\n    default_type text/html;      # 等价于 text/plain，返回文本类型\n    return 200 \"<h1>This is nginx's text</h1>\";\n}\nlocation /get_json{\n    default_type application/json;   # 返回 json 字符串类型\n    return 200 '{\"name\": \"xiaoming\", \"age\": 21}';\n}\n```\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.1joqriwre9j4.webp)\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.47ty7dkhzmi0.webp)\n\n### 自定义服务日志\n\nNginx 中日志的类型分 access.log、error.log。\n\n`access.log` 日志用来记录用户所有的访问请求。\n\n`error.log` 日志记录 Nginx 本身运行时的错误信息，不会记录用户的访问请求。\n\nNginx 服务器支持对服务日志的格式、大小、输出等进行设置，需要使用到两个指令，分别是 `access_log` 和 `log_format` 指令。\n\n1. `access_log` 指令用来设置用户访问日志的相关属性。\n\n| 语法                                      | 默认值                               | 位置                   |\n| ----------------------------------------- | ------------------------------------ | ---------------------- |\n| access_log \\<path> [format[buffer=size]]; | access_log logs/access.log combined; | http、server、location |\n\nformat 对应着 `log_format` 的 name，必须保持一致。\n\n2. `log_format` 指令用来指定日志的输出格式。\n\n| 语法                                                         | 默认值                     | 位置 |\n| ------------------------------------------------------------ | -------------------------- | ---- |\n| log_format \\<name> [escape=default \\| json \\| none] \\<string> ...... ; | log_format combined \"...\"; | http |\n\nname 对用 `access_log` 的 format，必须保持一致。\n\n> **例子 1：自定义日志路径和输出格式**\n\n+ 在 `/usr/local/nginx/logs` 下创建 my.log 文件，该文件作为日志。\n\n```sh\nmkdir /usr/local/nginx/logs/my.log\n```\n\n+ 自定义日志输出格式：`==========>This is My format`\n+ 在配置文件配置相关指令\n\n```nginx\nlog_format myformat '=========>This is My format';\naccess_log logs/my.log myformat;\n```\n\n+ 重启服务并进行测试\n\n```sh\n# 重启 Nginx 服务\nnginx -s reload\n\n# 监听日志\ntail -f /usr/local/nginx/logs/my.log\n```\n\n浏览器访问一次 Nginx 的欢迎页面，回来看日志的输出，结果如图：\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.5t1f8j2rclc0.webp)\n\n> **例子 2：输出内容加上访问机器的信息**\n\n- 进入配置文件，在输出格式上加上 Nginx 的内置参数\n\n```nginx\nlog_format myformat '=========>This is My format:$http_user_agent';\naccess_log logs/my.log myformat;\n```\n\n+ 重启测试\n\n```sh\n# 重启 Nginx 服务\nnginx -s reload\n\n# 监听日志\ntail -f /usr/local/nginx/logs/my.log\n```\n\n浏览器访问一次 Nginx 的欢迎页面，回来看日志的输出，结果如图：\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.2rkljjc3tlk0.webp)\n\n### 其他配置指令\n\n1. `sendfile`：用来设置 Nginx 服务器是否使用 sendfile 传输文件，该属性可以大大提高 Nginx 处理静态资源的性能。默认关闭，建议开启。\n\n| 语法                  | 默认值        | 位置                   |\n| --------------------- | ------------- | ---------------------- |\n| sendfile <on \\| off>; | sendfile off; | http、server、location |\n\n2. `keepalive_timeout`：用来设置长连接的超时时间，默认超时时间是 75 秒。\n\n**为什么要使用 keepalive？**\n\n我们都知道 HTTP 是一种无状态协议，客户端向服务端发送一个 TCP 请求，服务端响应完毕后断开连接。\n\n如何客户端向服务端发送多个请求，每个请求都需要重新创建一次连接，效率相对来说比较多，使用 keepalive 模式，可以告诉服务器端在处理完一个请求后保持这个 TCP 连接的打开状态，若接收到来自这个客户端的其他请求，服务端就会利用这个未被关闭的连接，而不需要重新创建一个新连接，提升效率，但是这个连接也不能一直保持，这样的话，连接如果过多，也会是服务端的性能下降，这个时候就需要我们进行设置其的超时时间。\n\n| 语法                       | 默认值                 | 位置                   |\n| -------------------------- | ---------------------- | ---------------------- |\n| keepalive_timeout \\<time>; | keepalive_timeout 75s; | http、server、location |\n\n3. `keepalive_requests`：用来设置一个 keep-alive 连接使用的次数，默认是 100 次。\n\n| 语法                          | 默认值                  | 位置                   |\n| ----------------------------- | ----------------------- | ---------------------- |\n| keepalive_requests \\<number>; | keepalive_requests 100; | http、server、location |\n\n## server块和location块\n\nserver 块和 location 块都是我们要重点学习的内容，因为我们后面会对 Nginx 的功能进行详细讲解，所以该内容在**静态资源部署**和**静态资源访问**进行详细说明。\n\n本次我们这是认识下 Nginx 默认给的 nginx.conf 中的相关内容，以及 server 块与 location 块在使用的时候需要注意的一些内容。\n\n```nginx\nserver {\n\tlisten       80;     # 监听 80 端口，如果更改端口，则外界访问的时候带上对应的端口号，如 8080\n\tserver_name  localhost;  # 指定可以访问 Nginx 的 IP 地址\n\t\n\tlocation / {      \n\t\troot   html;    # 访问资源所对应的目录，这里是 html 目录\n\t\tindex  index.html index.htm;    # 访问资源所对应目录下的默认页面，优先级递增\n\t}\n\n\terror_page   500 502 503 504 404  /50x.html;  # 访问错误，跳转访问 /50x.html 请求\n\tlocation = /50x.html {   # 访问 /50x.html 请求的处理\n\t\troot   html;    # 访问资源所对应的目录，这里是 html 目录的 50x.html\n\t}\n}\n```\n\n- listen 和 server_name 是我们的 `http://server_name:listen`，如 `http://localhost:80`\n- location / 就是访问 `http://server_name:listen/`，里面的配置对应着 `http://server_name:listen/html/index.html`\n- 页面产生 500 502 503 504 404，就会发送 `http://server_name:listen/50x.html`\n- location = /50x.html 就是 `http://server_name:listen/50x.html`，它会自动访问 `http://server_name:listen/html/50x.html`\n- root 代表资源目录指令\n- index 代表默认访问网页指令\n\n","source":"_posts/Nginx_Configuration_file.md","raw":"---\ntitle: Nginx 核心配置文件\ntags: [Nginx, 中间件, 后端]\ncategories: [Nginx]\ndate: 2022-11-10\n---\n# Nginx 核心配置文件\n\n从前面的内容学习中，我们知道 Nginx 的核心配置文件默认是放在 `/usr/local/nginx/conf/nginx.conf`，本次我们就来学习下 nginx.conf 的内容和基本配置方法。\n\n---\n\n\n## 配置文件内容\n\n读取 Nginx 自带的 Nginx 配置文件，配置文件内容很多，我们先将其中的注释部分【学习一个技术点就是在 Nginx 的配置文件中可以使用 `#` 来注释】删除掉后，就剩下如下内容：\n\n```nginx\nworker_processes  1;   # 使用指令 1 \n\nevents {    # 这是 events 块\n    worker_connections  1024;\n}\n\nhttp {    # 这是 http 块\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n\n    server {\n        listen       80;   # 监听 80 端口\n        server_name  localhost;   # 监听请求过来的 IP\n        location / {   # 请求的地址是 /，则进入这个配置，访问 idnex.html\n            root   html;      # 进入 html 目录找到访问的页面\n            index  index.html index.htm;\n        }\n        # 如果访问的页面是 500 502 503 504，则发送 /50x.html 请求\n        error_page   500 502 503 504  /50x.html;  \n        location = /50x.html {      # 如果匹配上 /50x.html 请求\n            root   html;     # 则进入 html 目录找到 /50x.html\n        }\n    }\n}\n```\n\n对上面文件内容的解释，一一对应比较解释：\n\n```nginx\n指令名\t指令值;  # 全局块，主要设置 Nginx 服务器整体运行的配置指令\n\n# events 块，主要设置 Nginx 服务器与用户的网络连接,这一部分对 Nginx 服务器的性能影响较大\nevents {\t \n    指令名\t指令值;\n}\n\n# http 块，是 Nginx 服务器配置中的重要部分，代理、缓存、日志记录、第三方模块配置...             \nhttp {\t\t\n    指令名\t指令值;\n\n    server { \t\t# server 块，是 Nginx 配置和虚拟主机相关的内容\n        指令名\t指令值;\n        location / {      # location 块，基于 Nginx 服务器接收请求字符串与 location 后面的值进行匹配，对特定请求进行处理\n            指令名\t指令值;\n        }\n    }\n    ...\n}\n```\n\n### 小结\n\nnginx.conf 配置文件中默认有三大块：全局块、events 块、http 块\n\nhttp 块中可以配置多个 server 块，每个 server 块又可以配置多个 location 块。\n\n\n## 全局块\n\n全局块的配置影响 Nginx 的全局设置。如用户权限，启动的进程数等。\n\n### user指令\n\n1. user：用于配置运行 Nginx 服务器的 worker 进程的用户和用户组。\n\n| 语法                 | 默认值 | 位置   |\n| -------------------- | ------ | ------ |\n| user \\<user> [group] | nobody | 全局块 |\n\n该属性也可以在编译的时候指定，语法如下 `./configure --user=user --group=group`，如果两个地方都进行了设置，最终生效的是配置文件中的配置。\n\n该指令的使用步骤:\n\n1. 进入配置文件添加一个用户信息 『 www 』\n\n```sh\nuser www\n```\n\n测试进行测试配置文件会报错：\n\n```sh\nnginx -t\n```\n\n```sh\n[root@master conf]# nginx -t\nnginx: [emerg] getpwnam(\"www\") failed in /usr/local/nginx/conf/nginx.conf:1\nnginx: configuration file /usr/local/nginx/conf/nginx.conf test failed\n```\n\n原因在于 Linux 系统不存在 www 用户，我们需要创建它。\n\n2. 创建一个用户\n\n```sh\nuseradd www\n```\n\n3. 重启 Nginx 的配置文件\n\n```sh\nnginx -s reload\n\n# 查看重启是否生效\nps -ef | grep nginx\n```\n\n最后返回的结果由 root 用户改为 www 用户，代表配置成功。\n\n```sh\n[root@master conf]# ps -ef | grep nginx\nroot       8960      1  0 16:13 ?        00:00:00 nginx: master process ./nginx\nwww       11975   8960  0 20:44 ?        00:00:00 nginx: worker process\nroot      11978  10615  0 20:44 pts/1    00:00:00 grep --color=auto nginx\n```\n\n4. 在 Linux 的 `/root` 下创建一个 html 目录，并且进入 html 目录，创建 index.html 文件\n\n```sh\nmkdir /root/html\n\ncd /root/html\n\nvim index.html\n```\n\n然后在 `/root/html/index.html` 文件里添加如下内容：\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n<style>\n    body {\n        width: 35em;\n        margin: 0 auto;\n        font-family: Tahoma, Verdana, Arial, sans-serif;\n    }\n</style>\n</head>\n<body>\n<h1>Welcome to nginx!</h1>\n<p>If you see this page, the nginx web server is successfully installed and\nworking. Further configuration is required.</p>\n\n<p>For online documentation and support please refer to\n<a href=\"http://nginx.org/\">nginx.org</a>.<br/>\nCommercial support is available at\n<a href=\"http://nginx.com/\">nginx.com</a>.</p>\n\n<p><em>Thank you for using nginx.</em></p>\n<p><em>I am WWW</em></p>\n</body>\n</html>\n```\n\n这些内容其实就是在 Nginx 的欢迎页面上多加别 `I am WWW` 内容。\n\n5. 修改 nginx.conf\n\n```nginx\nlocation / {\n\t# root   html;  # 原始的代码注释掉\n\troot   /root/html;    # 不再是 html 目录，而是 root 下的 html 目录\n\tindex  index.html index.htm;  # 就是上方创建的 index.html\n}\n```\n\n6. `nginx -s reload`重新加载后，测试启动访问\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.6dtnfz58zpo0.webp)\n\n 页面会报 403 拒绝访问的错误。\n\n7. 分析原因：因为当前用户（www 用户）没有访问 `/root/html` 目录的权限，这个目录只有 root 才能访问。\n\n那么 www 如何访问我们写的 index.html 页面呢？我们知道，每新建一个用户，`/home` 下都会生成该用户权限的目录。\n\n8. 将文件移动到 `/home/www/html/index.html`\n\n```sh\nmv /root/html /home/www\n```\n\n9. 记得修改配置文件的资源内容\n\n```nginx\nlocation / {\n\t# root   html;  # 原始的代码注释掉\n\t# root   /root/html;   # 这属于 root 权限的页面，注释或者删除掉\n\troot   /home/www/html;  # 这是 www 用户有权限访问的目录\n\tindex  index.html index.htm;   # 访问了 html 目录，然后访问 index.html 文件\n}\n```\n\n10. 再次测试启动访问，可以正常访问。\n\n综上所述，使用 user 指令可以指定启动运行工作进程的用户及用户组，这样对于系统的权限访问控制的更加精细，也更加安全。\n\n我们也能理解了配置文件的 `locaotion` 块的基本使用，root 对应着访问目录，index 对应着访问目录下的默认页面。\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.6igjptnd6eo0.webp)\n\n### work process指令\n\n1. `master_process` 指令用来指定是否开启 worker 工作进程。\n\n如果为 off，则代表关闭了 worker 进程，这时候启动 Nginx，只有 master 进程启动，没有 worker 进程。默认开启 worker 工作进程。(<mark>需要重启nginx服务生效</mark>)\n\n| 语法                        | 默认值             | 位置   |\n| --------------------------- | ------------------ | ------ |\n| master_process <on \\| off>; | master_process on; | 全局块 |\n\n2. `worker_processes` 指令用于配置 Nginx 生成 worker 工作进程的数量，这个是 Nginx 服务器实现并发处理\n\n   服务的关键所在。\n\n理论上来说 `workder process` 的值越大，可以支持的并发处理量也越多，但事实上这个值的设定是需要受到来自服务器自身的限制，建议将该值和服务器 CPU 的内核数保存一致。\n\n| 语法                            | 默认值 | 位置   |\n| ------------------------------- | ------ | ------ |\n| worker_processes <num \\| auto>; | 1      | 全局块 |\n\n如果将 `worker_processes` 设置成 2，则会看到如下内容:\n\n```sh\n[root@master conf]# ps -ef | grep nginx\nroot       8960      1  0 16:13 ?        00:00:00 nginx: master process ./nginx\nwww       12299   8960  0 21:14 ?        00:00:00 nginx: worker process\nwww       12300   8960  0 21:14 ?        00:00:00 nginx: worker process\nroot      12302  10615  0 21:14 pts/1    00:00:00 grep --color=auto nginx\n```\n\n出现两个 worker 工作进程。\n\n### 其他指令\n\n1. `daemon` 指令设置 Nginx 是否以守护进程的方式启动。on 代表开启守护进程，off 代表关闭守护进程，默认开启。(<mark>需要重启nginx生效</mark>)\n\n守护式进程是 Linux 后台执行的一种服务进程，特点是 **独立于控制终端，不会随着终端关闭而停止**，也就是后台启动。\n\n| 语法                | 默认值     | 位置   |\n| ------------------- | ---------- | ------ |\n| daemon <on \\| off>; | daemon on; | 全局块 |\n\n2. `pid` 指令用来配置 Nginx 当前 master 进程的进程号 ID 存储的文件路径。默认路径是 `/usr/local/nginx/logs/nginx.pid`。\n\n| 语法         | 默认值                          | 位置   |\n| ------------ | ------------------------------- | ------ |\n| pid \\<file>; | /usr/local/nginx/logs/nginx.pid | 全局块 |\n\n该属性也可以通过 `./configure --pid-path=PATH` 在编译时来指定。\n\n3. `error_log` 指令用来配置 Nginx 的错误日志存放路径。默认路径是 `/usr/local/nginx/logs/error.log`。\n\n| 语法                          | 默认值                          | 位置                           |\n| ----------------------------- | ------------------------------- | ------------------------------ |\n| error_log \\<file> [日志级别]; | error_log logs/error.log error; | 全局块、http、server、location |\n\n该属性也可以通过 `./configure --error-log-path=PATH` 在编译时来指定。\n\n其中日志级别的值有『 debug | info | notice | warn | error | crit | alert | emerg 』，翻译过来为「调试 | 信息 | 通知 | 警告 | 错误 | 临界 | 警报 | 紧急」，这块建议大家设置的时候不要设置成 info 以下的等级，因为会带来大量的磁盘 I/O 消耗，影响 Nginx 的性能。\n\n4. `include` 指令用来引入其他的配置文件，使 Nginx 的配置更加灵活。\n\n| 语法             | 默认值 | 位置 |\n| ---------------- | ------ | ---- |\n| include \\<file>; | 无     | any  |\n\n## events块\n\n### events指令\n\n1. `accept_mutex` 指令用来设置是否开启 Nginx 网络连接序列化。默认开启。\n\n| 语法                      | 默认值           | 位置   |\n| ------------------------- | ---------------- | ------ |\n| accept_mutex <on \\| off>; | accept_mutex on; | events |\n\n这个配置主要可以用来解决常说的「惊群」问题。大致意思是在某一个时刻，客户端发来一个请求连接，Nginx 后台是以多进程的工作模式，也就是说有多个 worker 进程会被同时唤醒，但是最终只会有一个进程可以获取到连接，如果每次唤醒的进程数目太多，就会影响 Nginx 的整体性能。如果将上述值设置为 on (开启状态)，将会对多个 Nginx 进程接收连接进行序列号，一个个来唤醒接收，就防止了多个进程对连接的争抢。\n\n如图的小狗，如果只是一块「骨头」出现，则只需要唤醒一个小狗即可（开启 on），如果多个「骨头」如三个同时出现，那么唤醒三个小狗效率更高（此时需要设置 off）\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.118zwwf8v268.webp)\n\n2. `multi_accept` 指令用来设置是否开启同时接收多个网络连接。默认开启。\n\n| 语法                      | 默认值            | 位置   |\n| ------------------------- | ----------------- | ------ |\n| multi_accept <on \\| off>; | multi_accept off; | events |\n\n如果 multi_accept 被禁止了，Nginx 的一个工作进程只能同时接受一个新的连接。如果开启，一个工作进程可以同时接受所有的新连接。**建议开启。**\n\n3. `worker_connections` 指令用来配置单个 worker 进程最大的连接数。默认 512 个连接数。\n\n| 语法                          | 默认值                  | 位置   |\n| ----------------------------- | ----------------------- | ------ |\n| worker_connections \\<number>; | worker_commections 512; | events |\n\n这里的连接数不仅仅包括和前端用户建立的连接数，而是包括所有可能的连接数。另外，number 值不能大于操作系统支持打开的最大文件句柄数量。\n\n4. `use` 指令用来设置 Nginx 服务器选择哪种事件驱动来处理网络消息。\n\n| 语法           | 默认值           | 位置   |\n| -------------- | ---------------- | ------ |\n| use \\<method>; | 根据操作系统规定 | events |\n\n注意：此处所选择事件处理模型是 Nginx 优化部分的一个重要内容，method 的可选值有『 select | poll | epoll | kqueue 』等，之前在准备 Centos 环境的时候，我们强调过要使用 Linux 内核在 2.6 以上，就是为了能使用 epoll 函数来优化 Nginx。\n\n另外这些值的选择，我们也可以在编译的时候使用 `--with-select_module`、`--without-select_module`、`--with-poll_module`、`--without-poll_module` 来设置是否需要将对应的事件驱动模块编译到 Nginx 的内核。\n\n### events指令配置模板\n\n打开 Nginx 的配置文件 nginx.conf，添加如下配置\n\n```nginx\nevents{\n\taccept_mutex on;    # 开启 Nginx 网络连接序列化\n\tmulti_accept on;    # 开启同时接收多个网络连接\n\tworker_commections 1024;   # 单个 worker 进程最大的连接数\n\tuse epoll;   # 使用 epoll 函数来优化 Nginx\n}\n```\n\n启动测试\n\n```sh\n# 测试配置是否语法出错\nnginx -t\n\n# 重新加载 Nginx\nnginx -s reload\n```\n\n## http块\n\n### 定义MIME-Type\n\n我们都知道浏览器中可以显示的内容有 HTML、XML、GIF 等种类繁多的文件、媒体等资源，浏览器为了区分这些资源，就需要使用 MIME Type。所以说 MIME Type 是网络资源的媒体类型。Nginx 作为 Web 服务器，也需要能够识别前端请求的资源类型。\n\n在 Nginx 的配置文件中，默认有两行配置：\n\n```sh\ninclude mime.types;      # 引入 mime.types 文件的内容\ndefault_type application/octet-stream;     # 默认的 MIME 类型\n```\n\n1. `default_type` 指令用来配置 Nginx 响应前端请求默认的 MIME 类型。默认是 text 文本。\n\n| 语法                       | 默认值                   | 位置                   |\n| -------------------------- | ------------------------ | ---------------------- |\n| default_type \\<mime-type>; | default_type text/plain; | http、server、location |\n\n在 `default_type` 前面还有一句 `include mime.types`，include 之前我们已经介绍过，相当于把 mime.types 文件中 MIMT 类型与相关类型文件的文件后缀名的对应关系加入到当前的配置文件中。\n\n举例来说明：\n\n有些时候请求某些接口的时候需要返回指定的文本字符串或者 json 字符串，而不是页面，如果逻辑非常简单或者干脆是固定的字符串，那么可以使用 Nginx 快速实现，这样就不用编写程序响应请求了，可以减少服务器资源占用并且响应性能非常快。\n\n如何实现：\n\n```nginx\nlocation /get_text {\n    default_type text/html;      # 等价于 text/plain，返回文本类型\n    return 200 \"<h1>This is nginx's text</h1>\";\n}\nlocation /get_json{\n    default_type application/json;   # 返回 json 字符串类型\n    return 200 '{\"name\": \"xiaoming\", \"age\": 21}';\n}\n```\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.1joqriwre9j4.webp)\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.47ty7dkhzmi0.webp)\n\n### 自定义服务日志\n\nNginx 中日志的类型分 access.log、error.log。\n\n`access.log` 日志用来记录用户所有的访问请求。\n\n`error.log` 日志记录 Nginx 本身运行时的错误信息，不会记录用户的访问请求。\n\nNginx 服务器支持对服务日志的格式、大小、输出等进行设置，需要使用到两个指令，分别是 `access_log` 和 `log_format` 指令。\n\n1. `access_log` 指令用来设置用户访问日志的相关属性。\n\n| 语法                                      | 默认值                               | 位置                   |\n| ----------------------------------------- | ------------------------------------ | ---------------------- |\n| access_log \\<path> [format[buffer=size]]; | access_log logs/access.log combined; | http、server、location |\n\nformat 对应着 `log_format` 的 name，必须保持一致。\n\n2. `log_format` 指令用来指定日志的输出格式。\n\n| 语法                                                         | 默认值                     | 位置 |\n| ------------------------------------------------------------ | -------------------------- | ---- |\n| log_format \\<name> [escape=default \\| json \\| none] \\<string> ...... ; | log_format combined \"...\"; | http |\n\nname 对用 `access_log` 的 format，必须保持一致。\n\n> **例子 1：自定义日志路径和输出格式**\n\n+ 在 `/usr/local/nginx/logs` 下创建 my.log 文件，该文件作为日志。\n\n```sh\nmkdir /usr/local/nginx/logs/my.log\n```\n\n+ 自定义日志输出格式：`==========>This is My format`\n+ 在配置文件配置相关指令\n\n```nginx\nlog_format myformat '=========>This is My format';\naccess_log logs/my.log myformat;\n```\n\n+ 重启服务并进行测试\n\n```sh\n# 重启 Nginx 服务\nnginx -s reload\n\n# 监听日志\ntail -f /usr/local/nginx/logs/my.log\n```\n\n浏览器访问一次 Nginx 的欢迎页面，回来看日志的输出，结果如图：\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.5t1f8j2rclc0.webp)\n\n> **例子 2：输出内容加上访问机器的信息**\n\n- 进入配置文件，在输出格式上加上 Nginx 的内置参数\n\n```nginx\nlog_format myformat '=========>This is My format:$http_user_agent';\naccess_log logs/my.log myformat;\n```\n\n+ 重启测试\n\n```sh\n# 重启 Nginx 服务\nnginx -s reload\n\n# 监听日志\ntail -f /usr/local/nginx/logs/my.log\n```\n\n浏览器访问一次 Nginx 的欢迎页面，回来看日志的输出，结果如图：\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.2rkljjc3tlk0.webp)\n\n### 其他配置指令\n\n1. `sendfile`：用来设置 Nginx 服务器是否使用 sendfile 传输文件，该属性可以大大提高 Nginx 处理静态资源的性能。默认关闭，建议开启。\n\n| 语法                  | 默认值        | 位置                   |\n| --------------------- | ------------- | ---------------------- |\n| sendfile <on \\| off>; | sendfile off; | http、server、location |\n\n2. `keepalive_timeout`：用来设置长连接的超时时间，默认超时时间是 75 秒。\n\n**为什么要使用 keepalive？**\n\n我们都知道 HTTP 是一种无状态协议，客户端向服务端发送一个 TCP 请求，服务端响应完毕后断开连接。\n\n如何客户端向服务端发送多个请求，每个请求都需要重新创建一次连接，效率相对来说比较多，使用 keepalive 模式，可以告诉服务器端在处理完一个请求后保持这个 TCP 连接的打开状态，若接收到来自这个客户端的其他请求，服务端就会利用这个未被关闭的连接，而不需要重新创建一个新连接，提升效率，但是这个连接也不能一直保持，这样的话，连接如果过多，也会是服务端的性能下降，这个时候就需要我们进行设置其的超时时间。\n\n| 语法                       | 默认值                 | 位置                   |\n| -------------------------- | ---------------------- | ---------------------- |\n| keepalive_timeout \\<time>; | keepalive_timeout 75s; | http、server、location |\n\n3. `keepalive_requests`：用来设置一个 keep-alive 连接使用的次数，默认是 100 次。\n\n| 语法                          | 默认值                  | 位置                   |\n| ----------------------------- | ----------------------- | ---------------------- |\n| keepalive_requests \\<number>; | keepalive_requests 100; | http、server、location |\n\n## server块和location块\n\nserver 块和 location 块都是我们要重点学习的内容，因为我们后面会对 Nginx 的功能进行详细讲解，所以该内容在**静态资源部署**和**静态资源访问**进行详细说明。\n\n本次我们这是认识下 Nginx 默认给的 nginx.conf 中的相关内容，以及 server 块与 location 块在使用的时候需要注意的一些内容。\n\n```nginx\nserver {\n\tlisten       80;     # 监听 80 端口，如果更改端口，则外界访问的时候带上对应的端口号，如 8080\n\tserver_name  localhost;  # 指定可以访问 Nginx 的 IP 地址\n\t\n\tlocation / {      \n\t\troot   html;    # 访问资源所对应的目录，这里是 html 目录\n\t\tindex  index.html index.htm;    # 访问资源所对应目录下的默认页面，优先级递增\n\t}\n\n\terror_page   500 502 503 504 404  /50x.html;  # 访问错误，跳转访问 /50x.html 请求\n\tlocation = /50x.html {   # 访问 /50x.html 请求的处理\n\t\troot   html;    # 访问资源所对应的目录，这里是 html 目录的 50x.html\n\t}\n}\n```\n\n- listen 和 server_name 是我们的 `http://server_name:listen`，如 `http://localhost:80`\n- location / 就是访问 `http://server_name:listen/`，里面的配置对应着 `http://server_name:listen/html/index.html`\n- 页面产生 500 502 503 504 404，就会发送 `http://server_name:listen/50x.html`\n- location = /50x.html 就是 `http://server_name:listen/50x.html`，它会自动访问 `http://server_name:listen/html/50x.html`\n- root 代表资源目录指令\n- index 代表默认访问网页指令\n\n","slug":"Nginx_Configuration_file","published":1,"updated":"2022-11-09T04:07:33.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdl10079a8vw0u2y7n3p","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"Nginx-核心配置文件\"><a href=\"#Nginx-核心配置文件\" class=\"headerlink\" title=\"Nginx 核心配置文件\"></a>Nginx 核心配置文件</h1><p>从前面的内容学习中，我们知道 Nginx 的核心配置文件默认是放在 <code>/usr/local/nginx/conf/nginx.conf</code>，本次我们就来学习下 nginx.conf 的内容和基本配置方法。</p>\n<hr>\n<h2 id=\"配置文件内容\"><a href=\"#配置文件内容\" class=\"headerlink\" title=\"配置文件内容\"></a>配置文件内容</h2><p>读取 Nginx 自带的 Nginx 配置文件，配置文件内容很多，我们先将其中的注释部分【学习一个技术点就是在 Nginx 的配置文件中可以使用 <code>#</code> 来注释】删除掉后，就剩下如下内容：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">worker_processes</span>  <span class=\"number\">1</span>;   <span class=\"comment\"># 使用指令 1 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;    <span class=\"comment\"># 这是 events 块</span></span><br><span class=\"line\">    <span class=\"attribute\">worker_connections</span>  <span class=\"number\">1024</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;    <span class=\"comment\"># 这是 http 块</span></span><br><span class=\"line\">    <span class=\"attribute\">include</span>       mime.types;</span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span>        <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;   <span class=\"comment\"># 监听 80 端口</span></span><br><span class=\"line\">        <span class=\"attribute\">server_name</span>  localhost;   <span class=\"comment\"># 监听请求过来的 IP</span></span><br><span class=\"line\">        <span class=\"attribute\">location</span> / &#123;   <span class=\"comment\"># 请求的地址是 /，则进入这个配置，访问 idnex.html</span></span><br><span class=\"line\">            <span class=\"attribute\">root</span>   html;      <span class=\"comment\"># 进入 html 目录找到访问的页面</span></span><br><span class=\"line\">            <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"># 如果访问的页面是 500 502 503 504，则发送 /50x.html 请求</span></span><br><span class=\"line\">        <span class=\"attribute\">error_page</span>   <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span>  /50x.html;  </span><br><span class=\"line\">        <span class=\"attribute\">location</span> = /50x.html &#123;      <span class=\"comment\"># 如果匹配上 /50x.html 请求</span></span><br><span class=\"line\">            <span class=\"attribute\">root</span>   html;     <span class=\"comment\"># 则进入 html 目录找到 /50x.html</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对上面文件内容的解释，一一对应比较解释：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">指令名\t指令值;  # 全局块，主要设置 Nginx 服务器整体运行的配置指令</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># events 块，主要设置 Nginx 服务器与用户的网络连接,这一部分对 Nginx 服务器的性能影响较大</span></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;\t </span><br><span class=\"line\">    指令名\t指令值;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># http 块，是 Nginx 服务器配置中的重要部分，代理、缓存、日志记录、第三方模块配置...             </span></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;\t\t</span><br><span class=\"line\">    指令名\t指令值;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">server</span> &#123; \t\t<span class=\"comment\"># server 块，是 Nginx 配置和虚拟主机相关的内容</span></span><br><span class=\"line\">        指令名\t指令值;</span><br><span class=\"line\">        <span class=\"attribute\">location</span> / &#123;      <span class=\"comment\"># location 块，基于 Nginx 服务器接收请求字符串与 location 后面的值进行匹配，对特定请求进行处理</span></span><br><span class=\"line\">            指令名\t指令值;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>nginx.conf 配置文件中默认有三大块：全局块、events 块、http 块</p>\n<p>http 块中可以配置多个 server 块，每个 server 块又可以配置多个 location 块。</p>\n<h2 id=\"全局块\"><a href=\"#全局块\" class=\"headerlink\" title=\"全局块\"></a>全局块</h2><p>全局块的配置影响 Nginx 的全局设置。如用户权限，启动的进程数等。</p>\n<h3 id=\"user指令\"><a href=\"#user指令\" class=\"headerlink\" title=\"user指令\"></a>user指令</h3><ol>\n<li>user：用于配置运行 Nginx 服务器的 worker 进程的用户和用户组。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>user &lt;user&gt; [group]</td>\n<td>nobody</td>\n<td>全局块</td>\n</tr>\n</tbody></table>\n<p>该属性也可以在编译的时候指定，语法如下 <code>./configure --user=user --group=group</code>，如果两个地方都进行了设置，最终生效的是配置文件中的配置。</p>\n<p>该指令的使用步骤:</p>\n<ol>\n<li>进入配置文件添加一个用户信息 『 www 』</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user www</span><br></pre></td></tr></table></figure>\n\n<p>测试进行测试配置文件会报错：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master conf]<span class=\"comment\"># nginx -t</span></span><br><span class=\"line\">nginx: [emerg] getpwnam(<span class=\"string\">\"www\"</span>) failed <span class=\"keyword\">in</span> /usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf:1</span><br><span class=\"line\">nginx: configuration file /usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf <span class=\"built_in\">test</span> failed</span><br></pre></td></tr></table></figure>\n\n<p>原因在于 Linux 系统不存在 www 用户，我们需要创建它。</p>\n<ol start=\"2\">\n<li>创建一个用户</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd www</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>重启 Nginx 的配置文件</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看重启是否生效</span></span><br><span class=\"line\">ps -ef | grep nginx</span><br></pre></td></tr></table></figure>\n\n<p>最后返回的结果由 root 用户改为 www 用户，代表配置成功。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master conf]<span class=\"comment\"># ps -ef | grep nginx</span></span><br><span class=\"line\">root       8960      1  0 16:13 ?        00:00:00 nginx: master process ./nginx</span><br><span class=\"line\">www       11975   8960  0 20:44 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root      11978  10615  0 20:44 pts/1    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>在 Linux 的 <code>/root</code> 下创建一个 html 目录，并且进入 html 目录，创建 index.html 文件</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /root/html</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /root/html</span><br><span class=\"line\"></span><br><span class=\"line\">vim index.html</span><br></pre></td></tr></table></figure>\n\n<p>然后在 <code>/root/html/index.html</code> 文件里添加如下内容：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Welcome to nginx!<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    body &#123;</span><br><span class=\"line\">        width: 35em;</span><br><span class=\"line\">        margin: 0 auto;</span><br><span class=\"line\">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome to nginx!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>If you see this page, the nginx web server is successfully installed and</span><br><span class=\"line\">working. Further configuration is required.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>For online documentation and support please refer to</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://nginx.org/\"</span>&gt;</span>nginx.org<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">Commercial support is available at</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://nginx.com/\"</span>&gt;</span>nginx.com<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>Thank you for using nginx.<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>I am WWW<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这些内容其实就是在 Nginx 的欢迎页面上多加别 <code>I am WWW</code> 内容。</p>\n<ol start=\"5\">\n<li>修改 nginx.conf</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">\t<span class=\"comment\"># root   html;  # 原始的代码注释掉</span></span><br><span class=\"line\">\t<span class=\"attribute\">root</span>   /root/html;    <span class=\"comment\"># 不再是 html 目录，而是 root 下的 html 目录</span></span><br><span class=\"line\">\t<span class=\"attribute\">index</span>  index.html index.htm;  <span class=\"comment\"># 就是上方创建的 index.html</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li><code>nginx -s reload</code>重新加载后，测试启动访问</li>\n</ol>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.6dtnfz58zpo0.webp\" alt=\"image\"></p>\n<p> 页面会报 403 拒绝访问的错误。</p>\n<ol start=\"7\">\n<li>分析原因：因为当前用户（www 用户）没有访问 <code>/root/html</code> 目录的权限，这个目录只有 root 才能访问。</li>\n</ol>\n<p>那么 www 如何访问我们写的 index.html 页面呢？我们知道，每新建一个用户，<code>/home</code> 下都会生成该用户权限的目录。</p>\n<ol start=\"8\">\n<li>将文件移动到 <code>/home/www/html/index.html</code></li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv /root/html /home/www</span><br></pre></td></tr></table></figure>\n\n<ol start=\"9\">\n<li>记得修改配置文件的资源内容</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">\t<span class=\"comment\"># root   html;  # 原始的代码注释掉</span></span><br><span class=\"line\">\t<span class=\"comment\"># root   /root/html;   # 这属于 root 权限的页面，注释或者删除掉</span></span><br><span class=\"line\">\t<span class=\"attribute\">root</span>   /home/www/html;  <span class=\"comment\"># 这是 www 用户有权限访问的目录</span></span><br><span class=\"line\">\t<span class=\"attribute\">index</span>  index.html index.htm;   <span class=\"comment\"># 访问了 html 目录，然后访问 index.html 文件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"10\">\n<li>再次测试启动访问，可以正常访问。</li>\n</ol>\n<p>综上所述，使用 user 指令可以指定启动运行工作进程的用户及用户组，这样对于系统的权限访问控制的更加精细，也更加安全。</p>\n<p>我们也能理解了配置文件的 <code>locaotion</code> 块的基本使用，root 对应着访问目录，index 对应着访问目录下的默认页面。</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.6igjptnd6eo0.webp\" alt=\"image\"></p>\n<h3 id=\"work-process指令\"><a href=\"#work-process指令\" class=\"headerlink\" title=\"work process指令\"></a>work process指令</h3><ol>\n<li><code>master_process</code> 指令用来指定是否开启 worker 工作进程。</li>\n</ol>\n<p>如果为 off，则代表关闭了 worker 进程，这时候启动 Nginx，只有 master 进程启动，没有 worker 进程。默认开启 worker 工作进程。(<mark>需要重启nginx服务生效</mark>)</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>master_process &lt;on | off&gt;;</td>\n<td>master_process on;</td>\n<td>全局块</td>\n</tr>\n</tbody></table>\n<ol start=\"2\">\n<li><p><code>worker_processes</code> 指令用于配置 Nginx 生成 worker 工作进程的数量，这个是 Nginx 服务器实现并发处理</p>\n<p>服务的关键所在。</p>\n</li>\n</ol>\n<p>理论上来说 <code>workder process</code> 的值越大，可以支持的并发处理量也越多，但事实上这个值的设定是需要受到来自服务器自身的限制，建议将该值和服务器 CPU 的内核数保存一致。</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>worker_processes &lt;num | auto&gt;;</td>\n<td>1</td>\n<td>全局块</td>\n</tr>\n</tbody></table>\n<p>如果将 <code>worker_processes</code> 设置成 2，则会看到如下内容:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master conf]<span class=\"comment\"># ps -ef | grep nginx</span></span><br><span class=\"line\">root       8960      1  0 16:13 ?        00:00:00 nginx: master process ./nginx</span><br><span class=\"line\">www       12299   8960  0 21:14 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">www       12300   8960  0 21:14 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root      12302  10615  0 21:14 pts/1    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure>\n\n<p>出现两个 worker 工作进程。</p>\n<h3 id=\"其他指令\"><a href=\"#其他指令\" class=\"headerlink\" title=\"其他指令\"></a>其他指令</h3><ol>\n<li><code>daemon</code> 指令设置 Nginx 是否以守护进程的方式启动。on 代表开启守护进程，off 代表关闭守护进程，默认开启。(<mark>需要重启nginx生效</mark>)</li>\n</ol>\n<p>守护式进程是 Linux 后台执行的一种服务进程，特点是 <strong>独立于控制终端，不会随着终端关闭而停止</strong>，也就是后台启动。</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>daemon &lt;on | off&gt;;</td>\n<td>daemon on;</td>\n<td>全局块</td>\n</tr>\n</tbody></table>\n<ol start=\"2\">\n<li><code>pid</code> 指令用来配置 Nginx 当前 master 进程的进程号 ID 存储的文件路径。默认路径是 <code>/usr/local/nginx/logs/nginx.pid</code>。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>pid &lt;file&gt;;</td>\n<td>/usr/local/nginx/logs/nginx.pid</td>\n<td>全局块</td>\n</tr>\n</tbody></table>\n<p>该属性也可以通过 <code>./configure --pid-path=PATH</code> 在编译时来指定。</p>\n<ol start=\"3\">\n<li><code>error_log</code> 指令用来配置 Nginx 的错误日志存放路径。默认路径是 <code>/usr/local/nginx/logs/error.log</code>。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>error_log &lt;file&gt; [日志级别];</td>\n<td>error_log logs/error.log error;</td>\n<td>全局块、http、server、location</td>\n</tr>\n</tbody></table>\n<p>该属性也可以通过 <code>./configure --error-log-path=PATH</code> 在编译时来指定。</p>\n<p>其中日志级别的值有『 debug | info | notice | warn | error | crit | alert | emerg 』，翻译过来为「调试 | 信息 | 通知 | 警告 | 错误 | 临界 | 警报 | 紧急」，这块建议大家设置的时候不要设置成 info 以下的等级，因为会带来大量的磁盘 I/O 消耗，影响 Nginx 的性能。</p>\n<ol start=\"4\">\n<li><code>include</code> 指令用来引入其他的配置文件，使 Nginx 的配置更加灵活。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>include &lt;file&gt;;</td>\n<td>无</td>\n<td>any</td>\n</tr>\n</tbody></table>\n<h2 id=\"events块\"><a href=\"#events块\" class=\"headerlink\" title=\"events块\"></a>events块</h2><h3 id=\"events指令\"><a href=\"#events指令\" class=\"headerlink\" title=\"events指令\"></a>events指令</h3><ol>\n<li><code>accept_mutex</code> 指令用来设置是否开启 Nginx 网络连接序列化。默认开启。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>accept_mutex &lt;on | off&gt;;</td>\n<td>accept_mutex on;</td>\n<td>events</td>\n</tr>\n</tbody></table>\n<p>这个配置主要可以用来解决常说的「惊群」问题。大致意思是在某一个时刻，客户端发来一个请求连接，Nginx 后台是以多进程的工作模式，也就是说有多个 worker 进程会被同时唤醒，但是最终只会有一个进程可以获取到连接，如果每次唤醒的进程数目太多，就会影响 Nginx 的整体性能。如果将上述值设置为 on (开启状态)，将会对多个 Nginx 进程接收连接进行序列号，一个个来唤醒接收，就防止了多个进程对连接的争抢。</p>\n<p>如图的小狗，如果只是一块「骨头」出现，则只需要唤醒一个小狗即可（开启 on），如果多个「骨头」如三个同时出现，那么唤醒三个小狗效率更高（此时需要设置 off）</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.118zwwf8v268.webp\" alt=\"image\"></p>\n<ol start=\"2\">\n<li><code>multi_accept</code> 指令用来设置是否开启同时接收多个网络连接。默认开启。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>multi_accept &lt;on | off&gt;;</td>\n<td>multi_accept off;</td>\n<td>events</td>\n</tr>\n</tbody></table>\n<p>如果 multi_accept 被禁止了，Nginx 的一个工作进程只能同时接受一个新的连接。如果开启，一个工作进程可以同时接受所有的新连接。<strong>建议开启。</strong></p>\n<ol start=\"3\">\n<li><code>worker_connections</code> 指令用来配置单个 worker 进程最大的连接数。默认 512 个连接数。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>worker_connections &lt;number&gt;;</td>\n<td>worker_commections 512;</td>\n<td>events</td>\n</tr>\n</tbody></table>\n<p>这里的连接数不仅仅包括和前端用户建立的连接数，而是包括所有可能的连接数。另外，number 值不能大于操作系统支持打开的最大文件句柄数量。</p>\n<ol start=\"4\">\n<li><code>use</code> 指令用来设置 Nginx 服务器选择哪种事件驱动来处理网络消息。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>use &lt;method&gt;;</td>\n<td>根据操作系统规定</td>\n<td>events</td>\n</tr>\n</tbody></table>\n<p>注意：此处所选择事件处理模型是 Nginx 优化部分的一个重要内容，method 的可选值有『 select | poll | epoll | kqueue 』等，之前在准备 Centos 环境的时候，我们强调过要使用 Linux 内核在 2.6 以上，就是为了能使用 epoll 函数来优化 Nginx。</p>\n<p>另外这些值的选择，我们也可以在编译的时候使用 <code>--with-select_module</code>、<code>--without-select_module</code>、<code>--with-poll_module</code>、<code>--without-poll_module</code> 来设置是否需要将对应的事件驱动模块编译到 Nginx 的内核。</p>\n<h3 id=\"events指令配置模板\"><a href=\"#events指令配置模板\" class=\"headerlink\" title=\"events指令配置模板\"></a>events指令配置模板</h3><p>打开 Nginx 的配置文件 nginx.conf，添加如下配置</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">events&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">accept_mutex</span> <span class=\"literal\">on</span>;    <span class=\"comment\"># 开启 Nginx 网络连接序列化</span></span><br><span class=\"line\">\t<span class=\"attribute\">multi_accept</span> <span class=\"literal\">on</span>;    <span class=\"comment\"># 开启同时接收多个网络连接</span></span><br><span class=\"line\">\t<span class=\"attribute\">worker_commections</span> <span class=\"number\">1024</span>;   <span class=\"comment\"># 单个 worker 进程最大的连接数</span></span><br><span class=\"line\">\t<span class=\"attribute\">use</span> <span class=\"literal\">epoll</span>;   <span class=\"comment\"># 使用 epoll 函数来优化 Nginx</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动测试</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试配置是否语法出错</span></span><br><span class=\"line\">nginx -t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新加载 Nginx</span></span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"http块\"><a href=\"#http块\" class=\"headerlink\" title=\"http块\"></a>http块</h2><h3 id=\"定义MIME-Type\"><a href=\"#定义MIME-Type\" class=\"headerlink\" title=\"定义MIME-Type\"></a>定义MIME-Type</h3><p>我们都知道浏览器中可以显示的内容有 HTML、XML、GIF 等种类繁多的文件、媒体等资源，浏览器为了区分这些资源，就需要使用 MIME Type。所以说 MIME Type 是网络资源的媒体类型。Nginx 作为 Web 服务器，也需要能够识别前端请求的资源类型。</p>\n<p>在 Nginx 的配置文件中，默认有两行配置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include mime.types;      <span class=\"comment\"># 引入 mime.types 文件的内容</span></span><br><span class=\"line\">default_type application/octet-stream;     <span class=\"comment\"># 默认的 MIME 类型</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>default_type</code> 指令用来配置 Nginx 响应前端请求默认的 MIME 类型。默认是 text 文本。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>default_type &lt;mime-type&gt;;</td>\n<td>default_type text/plain;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<p>在 <code>default_type</code> 前面还有一句 <code>include mime.types</code>，include 之前我们已经介绍过，相当于把 mime.types 文件中 MIMT 类型与相关类型文件的文件后缀名的对应关系加入到当前的配置文件中。</p>\n<p>举例来说明：</p>\n<p>有些时候请求某些接口的时候需要返回指定的文本字符串或者 json 字符串，而不是页面，如果逻辑非常简单或者干脆是固定的字符串，那么可以使用 Nginx 快速实现，这样就不用编写程序响应请求了，可以减少服务器资源占用并且响应性能非常快。</p>\n<p>如何实现：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> /get_text &#123;</span><br><span class=\"line\">    <span class=\"attribute\">default_type</span> text/html;      <span class=\"comment\"># 等价于 text/plain，返回文本类型</span></span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">\"&lt;h1&gt;This is nginx's text&lt;/h1&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"attribute\">location</span> /get_json&#123;</span><br><span class=\"line\">    <span class=\"attribute\">default_type</span> application/json;   <span class=\"comment\"># 返回 json 字符串类型</span></span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">'&#123;\"name\": \"xiaoming\", \"age\": 21&#125;'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.1joqriwre9j4.webp\" alt=\"image\"></p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.47ty7dkhzmi0.webp\" alt=\"image\"></p>\n<h3 id=\"自定义服务日志\"><a href=\"#自定义服务日志\" class=\"headerlink\" title=\"自定义服务日志\"></a>自定义服务日志</h3><p>Nginx 中日志的类型分 access.log、error.log。</p>\n<p><code>access.log</code> 日志用来记录用户所有的访问请求。</p>\n<p><code>error.log</code> 日志记录 Nginx 本身运行时的错误信息，不会记录用户的访问请求。</p>\n<p>Nginx 服务器支持对服务日志的格式、大小、输出等进行设置，需要使用到两个指令，分别是 <code>access_log</code> 和 <code>log_format</code> 指令。</p>\n<ol>\n<li><code>access_log</code> 指令用来设置用户访问日志的相关属性。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>access_log &lt;path&gt; [format[buffer=size]];</td>\n<td>access_log logs/access.log combined;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<p>format 对应着 <code>log_format</code> 的 name，必须保持一致。</p>\n<ol start=\"2\">\n<li><code>log_format</code> 指令用来指定日志的输出格式。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>log_format &lt;name&gt; [escape=default | json | none] &lt;string&gt; …… ;</td>\n<td>log_format combined “…”;</td>\n<td>http</td>\n</tr>\n</tbody></table>\n<p>name 对用 <code>access_log</code> 的 format，必须保持一致。</p>\n<blockquote>\n<p><strong>例子 1：自定义日志路径和输出格式</strong></p>\n</blockquote>\n<ul>\n<li>在 <code>/usr/local/nginx/logs</code> 下创建 my.log 文件，该文件作为日志。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /usr/<span class=\"built_in\">local</span>/nginx/logs/my.log</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>自定义日志输出格式：<code>==========&gt;This is My format</code></li>\n<li>在配置文件配置相关指令</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">log_format</span> myformat <span class=\"string\">'=========&gt;This is My format'</span>;</span><br><span class=\"line\"><span class=\"attribute\">access_log</span> logs/my.log myformat;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重启服务并进行测试</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重启 Nginx 服务</span></span><br><span class=\"line\">nginx -s reload</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 监听日志</span></span><br><span class=\"line\">tail -f /usr/<span class=\"built_in\">local</span>/nginx/logs/my.log</span><br></pre></td></tr></table></figure>\n\n<p>浏览器访问一次 Nginx 的欢迎页面，回来看日志的输出，结果如图：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.5t1f8j2rclc0.webp\" alt=\"image\"></p>\n<blockquote>\n<p><strong>例子 2：输出内容加上访问机器的信息</strong></p>\n</blockquote>\n<ul>\n<li>进入配置文件，在输出格式上加上 Nginx 的内置参数</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">log_format</span> myformat <span class=\"string\">'=========&gt;This is My format:<span class=\"variable\">$http_user_agent</span>'</span>;</span><br><span class=\"line\"><span class=\"attribute\">access_log</span> logs/my.log myformat;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重启测试</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重启 Nginx 服务</span></span><br><span class=\"line\">nginx -s reload</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 监听日志</span></span><br><span class=\"line\">tail -f /usr/<span class=\"built_in\">local</span>/nginx/logs/my.log</span><br></pre></td></tr></table></figure>\n\n<p>浏览器访问一次 Nginx 的欢迎页面，回来看日志的输出，结果如图：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.2rkljjc3tlk0.webp\" alt=\"image\"></p>\n<h3 id=\"其他配置指令\"><a href=\"#其他配置指令\" class=\"headerlink\" title=\"其他配置指令\"></a>其他配置指令</h3><ol>\n<li><code>sendfile</code>：用来设置 Nginx 服务器是否使用 sendfile 传输文件，该属性可以大大提高 Nginx 处理静态资源的性能。默认关闭，建议开启。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sendfile &lt;on | off&gt;;</td>\n<td>sendfile off;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<ol start=\"2\">\n<li><code>keepalive_timeout</code>：用来设置长连接的超时时间，默认超时时间是 75 秒。</li>\n</ol>\n<p><strong>为什么要使用 keepalive？</strong></p>\n<p>我们都知道 HTTP 是一种无状态协议，客户端向服务端发送一个 TCP 请求，服务端响应完毕后断开连接。</p>\n<p>如何客户端向服务端发送多个请求，每个请求都需要重新创建一次连接，效率相对来说比较多，使用 keepalive 模式，可以告诉服务器端在处理完一个请求后保持这个 TCP 连接的打开状态，若接收到来自这个客户端的其他请求，服务端就会利用这个未被关闭的连接，而不需要重新创建一个新连接，提升效率，但是这个连接也不能一直保持，这样的话，连接如果过多，也会是服务端的性能下降，这个时候就需要我们进行设置其的超时时间。</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>keepalive_timeout &lt;time&gt;;</td>\n<td>keepalive_timeout 75s;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<ol start=\"3\">\n<li><code>keepalive_requests</code>：用来设置一个 keep-alive 连接使用的次数，默认是 100 次。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>keepalive_requests &lt;number&gt;;</td>\n<td>keepalive_requests 100;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<h2 id=\"server块和location块\"><a href=\"#server块和location块\" class=\"headerlink\" title=\"server块和location块\"></a>server块和location块</h2><p>server 块和 location 块都是我们要重点学习的内容，因为我们后面会对 Nginx 的功能进行详细讲解，所以该内容在<strong>静态资源部署</strong>和<strong>静态资源访问</strong>进行详细说明。</p>\n<p>本次我们这是认识下 Nginx 默认给的 nginx.conf 中的相关内容，以及 server 块与 location 块在使用的时候需要注意的一些内容。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;     <span class=\"comment\"># 监听 80 端口，如果更改端口，则外界访问的时候带上对应的端口号，如 8080</span></span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>  localhost;  <span class=\"comment\"># 指定可以访问 Nginx 的 IP 地址</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> / &#123;      </span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span>   html;    <span class=\"comment\"># 访问资源所对应的目录，这里是 html 目录</span></span><br><span class=\"line\">\t\t<span class=\"attribute\">index</span>  index.html index.htm;    <span class=\"comment\"># 访问资源所对应目录下的默认页面，优先级递增</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"attribute\">error_page</span>   <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span> <span class=\"number\">404</span>  /50x.html;  <span class=\"comment\"># 访问错误，跳转访问 /50x.html 请求</span></span><br><span class=\"line\">\t<span class=\"attribute\">location</span> = /50x.html &#123;   <span class=\"comment\"># 访问 /50x.html 请求的处理</span></span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span>   html;    <span class=\"comment\"># 访问资源所对应的目录，这里是 html 目录的 50x.html</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>listen 和 server_name 是我们的 <code>http://server_name:listen</code>，如 <code>http://localhost:80</code></li>\n<li>location / 就是访问 <code>http://server_name:listen/</code>，里面的配置对应着 <code>http://server_name:listen/html/index.html</code></li>\n<li>页面产生 500 502 503 504 404，就会发送 <code>http://server_name:listen/50x.html</code></li>\n<li>location = /50x.html 就是 <code>http://server_name:listen/50x.html</code>，它会自动访问 <code>http://server_name:listen/html/50x.html</code></li>\n<li>root 代表资源目录指令</li>\n<li>index 代表默认访问网页指令</li>\n</ul>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"Nginx-核心配置文件\"><a href=\"#Nginx-核心配置文件\" class=\"headerlink\" title=\"Nginx 核心配置文件\"></a>Nginx 核心配置文件</h1><p>从前面的内容学习中，我们知道 Nginx 的核心配置文件默认是放在 <code>/usr/local/nginx/conf/nginx.conf</code>，本次我们就来学习下 nginx.conf 的内容和基本配置方法。</p>\n<hr>\n<h2 id=\"配置文件内容\"><a href=\"#配置文件内容\" class=\"headerlink\" title=\"配置文件内容\"></a>配置文件内容</h2><p>读取 Nginx 自带的 Nginx 配置文件，配置文件内容很多，我们先将其中的注释部分【学习一个技术点就是在 Nginx 的配置文件中可以使用 <code>#</code> 来注释】删除掉后，就剩下如下内容：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">worker_processes</span>  <span class=\"number\">1</span>;   <span class=\"comment\"># 使用指令 1 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;    <span class=\"comment\"># 这是 events 块</span></span><br><span class=\"line\">    <span class=\"attribute\">worker_connections</span>  <span class=\"number\">1024</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;    <span class=\"comment\"># 这是 http 块</span></span><br><span class=\"line\">    <span class=\"attribute\">include</span>       mime.types;</span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span>        <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;   <span class=\"comment\"># 监听 80 端口</span></span><br><span class=\"line\">        <span class=\"attribute\">server_name</span>  localhost;   <span class=\"comment\"># 监听请求过来的 IP</span></span><br><span class=\"line\">        <span class=\"attribute\">location</span> / &#123;   <span class=\"comment\"># 请求的地址是 /，则进入这个配置，访问 idnex.html</span></span><br><span class=\"line\">            <span class=\"attribute\">root</span>   html;      <span class=\"comment\"># 进入 html 目录找到访问的页面</span></span><br><span class=\"line\">            <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\"># 如果访问的页面是 500 502 503 504，则发送 /50x.html 请求</span></span><br><span class=\"line\">        <span class=\"attribute\">error_page</span>   <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span>  /50x.html;  </span><br><span class=\"line\">        <span class=\"attribute\">location</span> = /50x.html &#123;      <span class=\"comment\"># 如果匹配上 /50x.html 请求</span></span><br><span class=\"line\">            <span class=\"attribute\">root</span>   html;     <span class=\"comment\"># 则进入 html 目录找到 /50x.html</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对上面文件内容的解释，一一对应比较解释：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">指令名\t指令值;  # 全局块，主要设置 Nginx 服务器整体运行的配置指令</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># events 块，主要设置 Nginx 服务器与用户的网络连接,这一部分对 Nginx 服务器的性能影响较大</span></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;\t </span><br><span class=\"line\">    指令名\t指令值;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># http 块，是 Nginx 服务器配置中的重要部分，代理、缓存、日志记录、第三方模块配置...             </span></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;\t\t</span><br><span class=\"line\">    指令名\t指令值;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">server</span> &#123; \t\t<span class=\"comment\"># server 块，是 Nginx 配置和虚拟主机相关的内容</span></span><br><span class=\"line\">        指令名\t指令值;</span><br><span class=\"line\">        <span class=\"attribute\">location</span> / &#123;      <span class=\"comment\"># location 块，基于 Nginx 服务器接收请求字符串与 location 后面的值进行匹配，对特定请求进行处理</span></span><br><span class=\"line\">            指令名\t指令值;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>nginx.conf 配置文件中默认有三大块：全局块、events 块、http 块</p>\n<p>http 块中可以配置多个 server 块，每个 server 块又可以配置多个 location 块。</p>\n<h2 id=\"全局块\"><a href=\"#全局块\" class=\"headerlink\" title=\"全局块\"></a>全局块</h2><p>全局块的配置影响 Nginx 的全局设置。如用户权限，启动的进程数等。</p>\n<h3 id=\"user指令\"><a href=\"#user指令\" class=\"headerlink\" title=\"user指令\"></a>user指令</h3><ol>\n<li>user：用于配置运行 Nginx 服务器的 worker 进程的用户和用户组。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>user &lt;user&gt; [group]</td>\n<td>nobody</td>\n<td>全局块</td>\n</tr>\n</tbody></table>\n<p>该属性也可以在编译的时候指定，语法如下 <code>./configure --user=user --group=group</code>，如果两个地方都进行了设置，最终生效的是配置文件中的配置。</p>\n<p>该指令的使用步骤:</p>\n<ol>\n<li>进入配置文件添加一个用户信息 『 www 』</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user www</span><br></pre></td></tr></table></figure>\n\n<p>测试进行测试配置文件会报错：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master conf]<span class=\"comment\"># nginx -t</span></span><br><span class=\"line\">nginx: [emerg] getpwnam(<span class=\"string\">\"www\"</span>) failed <span class=\"keyword\">in</span> /usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf:1</span><br><span class=\"line\">nginx: configuration file /usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf <span class=\"built_in\">test</span> failed</span><br></pre></td></tr></table></figure>\n\n<p>原因在于 Linux 系统不存在 www 用户，我们需要创建它。</p>\n<ol start=\"2\">\n<li>创建一个用户</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd www</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>重启 Nginx 的配置文件</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看重启是否生效</span></span><br><span class=\"line\">ps -ef | grep nginx</span><br></pre></td></tr></table></figure>\n\n<p>最后返回的结果由 root 用户改为 www 用户，代表配置成功。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master conf]<span class=\"comment\"># ps -ef | grep nginx</span></span><br><span class=\"line\">root       8960      1  0 16:13 ?        00:00:00 nginx: master process ./nginx</span><br><span class=\"line\">www       11975   8960  0 20:44 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root      11978  10615  0 20:44 pts/1    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>在 Linux 的 <code>/root</code> 下创建一个 html 目录，并且进入 html 目录，创建 index.html 文件</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /root/html</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /root/html</span><br><span class=\"line\"></span><br><span class=\"line\">vim index.html</span><br></pre></td></tr></table></figure>\n\n<p>然后在 <code>/root/html/index.html</code> 文件里添加如下内容：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Welcome to nginx!<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    body &#123;</span><br><span class=\"line\">        width: 35em;</span><br><span class=\"line\">        margin: 0 auto;</span><br><span class=\"line\">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Welcome to nginx!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>If you see this page, the nginx web server is successfully installed and</span><br><span class=\"line\">working. Further configuration is required.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>For online documentation and support please refer to</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://nginx.org/\"</span>&gt;</span>nginx.org<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">Commercial support is available at</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://nginx.com/\"</span>&gt;</span>nginx.com<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>Thank you for using nginx.<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">em</span>&gt;</span>I am WWW<span class=\"tag\">&lt;/<span class=\"name\">em</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这些内容其实就是在 Nginx 的欢迎页面上多加别 <code>I am WWW</code> 内容。</p>\n<ol start=\"5\">\n<li>修改 nginx.conf</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">\t<span class=\"comment\"># root   html;  # 原始的代码注释掉</span></span><br><span class=\"line\">\t<span class=\"attribute\">root</span>   /root/html;    <span class=\"comment\"># 不再是 html 目录，而是 root 下的 html 目录</span></span><br><span class=\"line\">\t<span class=\"attribute\">index</span>  index.html index.htm;  <span class=\"comment\"># 就是上方创建的 index.html</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li><code>nginx -s reload</code>重新加载后，测试启动访问</li>\n</ol>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.6dtnfz58zpo0.webp\" alt=\"image\"></p>\n<p> 页面会报 403 拒绝访问的错误。</p>\n<ol start=\"7\">\n<li>分析原因：因为当前用户（www 用户）没有访问 <code>/root/html</code> 目录的权限，这个目录只有 root 才能访问。</li>\n</ol>\n<p>那么 www 如何访问我们写的 index.html 页面呢？我们知道，每新建一个用户，<code>/home</code> 下都会生成该用户权限的目录。</p>\n<ol start=\"8\">\n<li>将文件移动到 <code>/home/www/html/index.html</code></li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv /root/html /home/www</span><br></pre></td></tr></table></figure>\n\n<ol start=\"9\">\n<li>记得修改配置文件的资源内容</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">\t<span class=\"comment\"># root   html;  # 原始的代码注释掉</span></span><br><span class=\"line\">\t<span class=\"comment\"># root   /root/html;   # 这属于 root 权限的页面，注释或者删除掉</span></span><br><span class=\"line\">\t<span class=\"attribute\">root</span>   /home/www/html;  <span class=\"comment\"># 这是 www 用户有权限访问的目录</span></span><br><span class=\"line\">\t<span class=\"attribute\">index</span>  index.html index.htm;   <span class=\"comment\"># 访问了 html 目录，然后访问 index.html 文件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"10\">\n<li>再次测试启动访问，可以正常访问。</li>\n</ol>\n<p>综上所述，使用 user 指令可以指定启动运行工作进程的用户及用户组，这样对于系统的权限访问控制的更加精细，也更加安全。</p>\n<p>我们也能理解了配置文件的 <code>locaotion</code> 块的基本使用，root 对应着访问目录，index 对应着访问目录下的默认页面。</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.6igjptnd6eo0.webp\" alt=\"image\"></p>\n<h3 id=\"work-process指令\"><a href=\"#work-process指令\" class=\"headerlink\" title=\"work process指令\"></a>work process指令</h3><ol>\n<li><code>master_process</code> 指令用来指定是否开启 worker 工作进程。</li>\n</ol>\n<p>如果为 off，则代表关闭了 worker 进程，这时候启动 Nginx，只有 master 进程启动，没有 worker 进程。默认开启 worker 工作进程。(<mark>需要重启nginx服务生效</mark>)</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>master_process &lt;on | off&gt;;</td>\n<td>master_process on;</td>\n<td>全局块</td>\n</tr>\n</tbody></table>\n<ol start=\"2\">\n<li><p><code>worker_processes</code> 指令用于配置 Nginx 生成 worker 工作进程的数量，这个是 Nginx 服务器实现并发处理</p>\n<p>服务的关键所在。</p>\n</li>\n</ol>\n<p>理论上来说 <code>workder process</code> 的值越大，可以支持的并发处理量也越多，但事实上这个值的设定是需要受到来自服务器自身的限制，建议将该值和服务器 CPU 的内核数保存一致。</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>worker_processes &lt;num | auto&gt;;</td>\n<td>1</td>\n<td>全局块</td>\n</tr>\n</tbody></table>\n<p>如果将 <code>worker_processes</code> 设置成 2，则会看到如下内容:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master conf]<span class=\"comment\"># ps -ef | grep nginx</span></span><br><span class=\"line\">root       8960      1  0 16:13 ?        00:00:00 nginx: master process ./nginx</span><br><span class=\"line\">www       12299   8960  0 21:14 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">www       12300   8960  0 21:14 ?        00:00:00 nginx: worker process</span><br><span class=\"line\">root      12302  10615  0 21:14 pts/1    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure>\n\n<p>出现两个 worker 工作进程。</p>\n<h3 id=\"其他指令\"><a href=\"#其他指令\" class=\"headerlink\" title=\"其他指令\"></a>其他指令</h3><ol>\n<li><code>daemon</code> 指令设置 Nginx 是否以守护进程的方式启动。on 代表开启守护进程，off 代表关闭守护进程，默认开启。(<mark>需要重启nginx生效</mark>)</li>\n</ol>\n<p>守护式进程是 Linux 后台执行的一种服务进程，特点是 <strong>独立于控制终端，不会随着终端关闭而停止</strong>，也就是后台启动。</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>daemon &lt;on | off&gt;;</td>\n<td>daemon on;</td>\n<td>全局块</td>\n</tr>\n</tbody></table>\n<ol start=\"2\">\n<li><code>pid</code> 指令用来配置 Nginx 当前 master 进程的进程号 ID 存储的文件路径。默认路径是 <code>/usr/local/nginx/logs/nginx.pid</code>。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>pid &lt;file&gt;;</td>\n<td>/usr/local/nginx/logs/nginx.pid</td>\n<td>全局块</td>\n</tr>\n</tbody></table>\n<p>该属性也可以通过 <code>./configure --pid-path=PATH</code> 在编译时来指定。</p>\n<ol start=\"3\">\n<li><code>error_log</code> 指令用来配置 Nginx 的错误日志存放路径。默认路径是 <code>/usr/local/nginx/logs/error.log</code>。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>error_log &lt;file&gt; [日志级别];</td>\n<td>error_log logs/error.log error;</td>\n<td>全局块、http、server、location</td>\n</tr>\n</tbody></table>\n<p>该属性也可以通过 <code>./configure --error-log-path=PATH</code> 在编译时来指定。</p>\n<p>其中日志级别的值有『 debug | info | notice | warn | error | crit | alert | emerg 』，翻译过来为「调试 | 信息 | 通知 | 警告 | 错误 | 临界 | 警报 | 紧急」，这块建议大家设置的时候不要设置成 info 以下的等级，因为会带来大量的磁盘 I/O 消耗，影响 Nginx 的性能。</p>\n<ol start=\"4\">\n<li><code>include</code> 指令用来引入其他的配置文件，使 Nginx 的配置更加灵活。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>include &lt;file&gt;;</td>\n<td>无</td>\n<td>any</td>\n</tr>\n</tbody></table>\n<h2 id=\"events块\"><a href=\"#events块\" class=\"headerlink\" title=\"events块\"></a>events块</h2><h3 id=\"events指令\"><a href=\"#events指令\" class=\"headerlink\" title=\"events指令\"></a>events指令</h3><ol>\n<li><code>accept_mutex</code> 指令用来设置是否开启 Nginx 网络连接序列化。默认开启。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>accept_mutex &lt;on | off&gt;;</td>\n<td>accept_mutex on;</td>\n<td>events</td>\n</tr>\n</tbody></table>\n<p>这个配置主要可以用来解决常说的「惊群」问题。大致意思是在某一个时刻，客户端发来一个请求连接，Nginx 后台是以多进程的工作模式，也就是说有多个 worker 进程会被同时唤醒，但是最终只会有一个进程可以获取到连接，如果每次唤醒的进程数目太多，就会影响 Nginx 的整体性能。如果将上述值设置为 on (开启状态)，将会对多个 Nginx 进程接收连接进行序列号，一个个来唤醒接收，就防止了多个进程对连接的争抢。</p>\n<p>如图的小狗，如果只是一块「骨头」出现，则只需要唤醒一个小狗即可（开启 on），如果多个「骨头」如三个同时出现，那么唤醒三个小狗效率更高（此时需要设置 off）</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.118zwwf8v268.webp\" alt=\"image\"></p>\n<ol start=\"2\">\n<li><code>multi_accept</code> 指令用来设置是否开启同时接收多个网络连接。默认开启。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>multi_accept &lt;on | off&gt;;</td>\n<td>multi_accept off;</td>\n<td>events</td>\n</tr>\n</tbody></table>\n<p>如果 multi_accept 被禁止了，Nginx 的一个工作进程只能同时接受一个新的连接。如果开启，一个工作进程可以同时接受所有的新连接。<strong>建议开启。</strong></p>\n<ol start=\"3\">\n<li><code>worker_connections</code> 指令用来配置单个 worker 进程最大的连接数。默认 512 个连接数。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>worker_connections &lt;number&gt;;</td>\n<td>worker_commections 512;</td>\n<td>events</td>\n</tr>\n</tbody></table>\n<p>这里的连接数不仅仅包括和前端用户建立的连接数，而是包括所有可能的连接数。另外，number 值不能大于操作系统支持打开的最大文件句柄数量。</p>\n<ol start=\"4\">\n<li><code>use</code> 指令用来设置 Nginx 服务器选择哪种事件驱动来处理网络消息。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>use &lt;method&gt;;</td>\n<td>根据操作系统规定</td>\n<td>events</td>\n</tr>\n</tbody></table>\n<p>注意：此处所选择事件处理模型是 Nginx 优化部分的一个重要内容，method 的可选值有『 select | poll | epoll | kqueue 』等，之前在准备 Centos 环境的时候，我们强调过要使用 Linux 内核在 2.6 以上，就是为了能使用 epoll 函数来优化 Nginx。</p>\n<p>另外这些值的选择，我们也可以在编译的时候使用 <code>--with-select_module</code>、<code>--without-select_module</code>、<code>--with-poll_module</code>、<code>--without-poll_module</code> 来设置是否需要将对应的事件驱动模块编译到 Nginx 的内核。</p>\n<h3 id=\"events指令配置模板\"><a href=\"#events指令配置模板\" class=\"headerlink\" title=\"events指令配置模板\"></a>events指令配置模板</h3><p>打开 Nginx 的配置文件 nginx.conf，添加如下配置</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">events&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">accept_mutex</span> <span class=\"literal\">on</span>;    <span class=\"comment\"># 开启 Nginx 网络连接序列化</span></span><br><span class=\"line\">\t<span class=\"attribute\">multi_accept</span> <span class=\"literal\">on</span>;    <span class=\"comment\"># 开启同时接收多个网络连接</span></span><br><span class=\"line\">\t<span class=\"attribute\">worker_commections</span> <span class=\"number\">1024</span>;   <span class=\"comment\"># 单个 worker 进程最大的连接数</span></span><br><span class=\"line\">\t<span class=\"attribute\">use</span> <span class=\"literal\">epoll</span>;   <span class=\"comment\"># 使用 epoll 函数来优化 Nginx</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动测试</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试配置是否语法出错</span></span><br><span class=\"line\">nginx -t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重新加载 Nginx</span></span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"http块\"><a href=\"#http块\" class=\"headerlink\" title=\"http块\"></a>http块</h2><h3 id=\"定义MIME-Type\"><a href=\"#定义MIME-Type\" class=\"headerlink\" title=\"定义MIME-Type\"></a>定义MIME-Type</h3><p>我们都知道浏览器中可以显示的内容有 HTML、XML、GIF 等种类繁多的文件、媒体等资源，浏览器为了区分这些资源，就需要使用 MIME Type。所以说 MIME Type 是网络资源的媒体类型。Nginx 作为 Web 服务器，也需要能够识别前端请求的资源类型。</p>\n<p>在 Nginx 的配置文件中，默认有两行配置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include mime.types;      <span class=\"comment\"># 引入 mime.types 文件的内容</span></span><br><span class=\"line\">default_type application/octet-stream;     <span class=\"comment\"># 默认的 MIME 类型</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><code>default_type</code> 指令用来配置 Nginx 响应前端请求默认的 MIME 类型。默认是 text 文本。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>default_type &lt;mime-type&gt;;</td>\n<td>default_type text/plain;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<p>在 <code>default_type</code> 前面还有一句 <code>include mime.types</code>，include 之前我们已经介绍过，相当于把 mime.types 文件中 MIMT 类型与相关类型文件的文件后缀名的对应关系加入到当前的配置文件中。</p>\n<p>举例来说明：</p>\n<p>有些时候请求某些接口的时候需要返回指定的文本字符串或者 json 字符串，而不是页面，如果逻辑非常简单或者干脆是固定的字符串，那么可以使用 Nginx 快速实现，这样就不用编写程序响应请求了，可以减少服务器资源占用并且响应性能非常快。</p>\n<p>如何实现：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> /get_text &#123;</span><br><span class=\"line\">    <span class=\"attribute\">default_type</span> text/html;      <span class=\"comment\"># 等价于 text/plain，返回文本类型</span></span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">\"&lt;h1&gt;This is nginx's text&lt;/h1&gt;\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"attribute\">location</span> /get_json&#123;</span><br><span class=\"line\">    <span class=\"attribute\">default_type</span> application/json;   <span class=\"comment\"># 返回 json 字符串类型</span></span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">'&#123;\"name\": \"xiaoming\", \"age\": 21&#125;'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.1joqriwre9j4.webp\" alt=\"image\"></p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.47ty7dkhzmi0.webp\" alt=\"image\"></p>\n<h3 id=\"自定义服务日志\"><a href=\"#自定义服务日志\" class=\"headerlink\" title=\"自定义服务日志\"></a>自定义服务日志</h3><p>Nginx 中日志的类型分 access.log、error.log。</p>\n<p><code>access.log</code> 日志用来记录用户所有的访问请求。</p>\n<p><code>error.log</code> 日志记录 Nginx 本身运行时的错误信息，不会记录用户的访问请求。</p>\n<p>Nginx 服务器支持对服务日志的格式、大小、输出等进行设置，需要使用到两个指令，分别是 <code>access_log</code> 和 <code>log_format</code> 指令。</p>\n<ol>\n<li><code>access_log</code> 指令用来设置用户访问日志的相关属性。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>access_log &lt;path&gt; [format[buffer=size]];</td>\n<td>access_log logs/access.log combined;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<p>format 对应着 <code>log_format</code> 的 name，必须保持一致。</p>\n<ol start=\"2\">\n<li><code>log_format</code> 指令用来指定日志的输出格式。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>log_format &lt;name&gt; [escape=default | json | none] &lt;string&gt; …… ;</td>\n<td>log_format combined “…”;</td>\n<td>http</td>\n</tr>\n</tbody></table>\n<p>name 对用 <code>access_log</code> 的 format，必须保持一致。</p>\n<blockquote>\n<p><strong>例子 1：自定义日志路径和输出格式</strong></p>\n</blockquote>\n<ul>\n<li>在 <code>/usr/local/nginx/logs</code> 下创建 my.log 文件，该文件作为日志。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /usr/<span class=\"built_in\">local</span>/nginx/logs/my.log</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>自定义日志输出格式：<code>==========&gt;This is My format</code></li>\n<li>在配置文件配置相关指令</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">log_format</span> myformat <span class=\"string\">'=========&gt;This is My format'</span>;</span><br><span class=\"line\"><span class=\"attribute\">access_log</span> logs/my.log myformat;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重启服务并进行测试</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重启 Nginx 服务</span></span><br><span class=\"line\">nginx -s reload</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 监听日志</span></span><br><span class=\"line\">tail -f /usr/<span class=\"built_in\">local</span>/nginx/logs/my.log</span><br></pre></td></tr></table></figure>\n\n<p>浏览器访问一次 Nginx 的欢迎页面，回来看日志的输出，结果如图：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.5t1f8j2rclc0.webp\" alt=\"image\"></p>\n<blockquote>\n<p><strong>例子 2：输出内容加上访问机器的信息</strong></p>\n</blockquote>\n<ul>\n<li>进入配置文件，在输出格式上加上 Nginx 的内置参数</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">log_format</span> myformat <span class=\"string\">'=========&gt;This is My format:<span class=\"variable\">$http_user_agent</span>'</span>;</span><br><span class=\"line\"><span class=\"attribute\">access_log</span> logs/my.log myformat;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重启测试</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 重启 Nginx 服务</span></span><br><span class=\"line\">nginx -s reload</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 监听日志</span></span><br><span class=\"line\">tail -f /usr/<span class=\"built_in\">local</span>/nginx/logs/my.log</span><br></pre></td></tr></table></figure>\n\n<p>浏览器访问一次 Nginx 的欢迎页面，回来看日志的输出，结果如图：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.2rkljjc3tlk0.webp\" alt=\"image\"></p>\n<h3 id=\"其他配置指令\"><a href=\"#其他配置指令\" class=\"headerlink\" title=\"其他配置指令\"></a>其他配置指令</h3><ol>\n<li><code>sendfile</code>：用来设置 Nginx 服务器是否使用 sendfile 传输文件，该属性可以大大提高 Nginx 处理静态资源的性能。默认关闭，建议开启。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sendfile &lt;on | off&gt;;</td>\n<td>sendfile off;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<ol start=\"2\">\n<li><code>keepalive_timeout</code>：用来设置长连接的超时时间，默认超时时间是 75 秒。</li>\n</ol>\n<p><strong>为什么要使用 keepalive？</strong></p>\n<p>我们都知道 HTTP 是一种无状态协议，客户端向服务端发送一个 TCP 请求，服务端响应完毕后断开连接。</p>\n<p>如何客户端向服务端发送多个请求，每个请求都需要重新创建一次连接，效率相对来说比较多，使用 keepalive 模式，可以告诉服务器端在处理完一个请求后保持这个 TCP 连接的打开状态，若接收到来自这个客户端的其他请求，服务端就会利用这个未被关闭的连接，而不需要重新创建一个新连接，提升效率，但是这个连接也不能一直保持，这样的话，连接如果过多，也会是服务端的性能下降，这个时候就需要我们进行设置其的超时时间。</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>keepalive_timeout &lt;time&gt;;</td>\n<td>keepalive_timeout 75s;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<ol start=\"3\">\n<li><code>keepalive_requests</code>：用来设置一个 keep-alive 连接使用的次数，默认是 100 次。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>keepalive_requests &lt;number&gt;;</td>\n<td>keepalive_requests 100;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<h2 id=\"server块和location块\"><a href=\"#server块和location块\" class=\"headerlink\" title=\"server块和location块\"></a>server块和location块</h2><p>server 块和 location 块都是我们要重点学习的内容，因为我们后面会对 Nginx 的功能进行详细讲解，所以该内容在<strong>静态资源部署</strong>和<strong>静态资源访问</strong>进行详细说明。</p>\n<p>本次我们这是认识下 Nginx 默认给的 nginx.conf 中的相关内容，以及 server 块与 location 块在使用的时候需要注意的一些内容。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;     <span class=\"comment\"># 监听 80 端口，如果更改端口，则外界访问的时候带上对应的端口号，如 8080</span></span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>  localhost;  <span class=\"comment\"># 指定可以访问 Nginx 的 IP 地址</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> / &#123;      </span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span>   html;    <span class=\"comment\"># 访问资源所对应的目录，这里是 html 目录</span></span><br><span class=\"line\">\t\t<span class=\"attribute\">index</span>  index.html index.htm;    <span class=\"comment\"># 访问资源所对应目录下的默认页面，优先级递增</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"attribute\">error_page</span>   <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span> <span class=\"number\">404</span>  /50x.html;  <span class=\"comment\"># 访问错误，跳转访问 /50x.html 请求</span></span><br><span class=\"line\">\t<span class=\"attribute\">location</span> = /50x.html &#123;   <span class=\"comment\"># 访问 /50x.html 请求的处理</span></span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span>   html;    <span class=\"comment\"># 访问资源所对应的目录，这里是 html 目录的 50x.html</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>listen 和 server_name 是我们的 <code>http://server_name:listen</code>，如 <code>http://localhost:80</code></li>\n<li>location / 就是访问 <code>http://server_name:listen/</code>，里面的配置对应着 <code>http://server_name:listen/html/index.html</code></li>\n<li>页面产生 500 502 503 504 404，就会发送 <code>http://server_name:listen/50x.html</code></li>\n<li>location = /50x.html 就是 <code>http://server_name:listen/50x.html</code>，它会自动访问 <code>http://server_name:listen/html/50x.html</code></li>\n<li>root 代表资源目录指令</li>\n<li>index 代表默认访问网页指令</li>\n</ul>\n"},{"title":"Nginx 静态资源部署","date":"2022-11-09T16:00:00.000Z","_content":"# Nginx 静态资源部署\n\n**引言**\n\n静态资源如何部署？本内容带你了解静态资源相关的操作和内容。\n\n静态资源指令配置、静态资源优化配置、静态资源压缩配置、静态资源缓存配置。\n\n## Nginx静态资源概述\n\n上网去搜索访问资源对于我们来说并不陌生，通过浏览器发送一个 HTTP 请求实现从客户端发送请求到服务器端获取所需要内容后并把内容回显展示在页面的一个过程。这个时候，我们所请求的内容就分为两种类型，一类是静态资源、一类是动态资源。\n\n静态资源即指在服务器端真实存在并且能直接拿来展示的一些文件，比如常见的 html 页面、css 文件、js 文件、图片、视频等资源；\n\n动态资源即指在服务器端真实存在但是要想获取需要经过一定的业务逻辑处理，根据不同的条件展示在页面不同这 一部分内容，比如说报表数据展示、根据当前登录用户展示相关具体数据等资源；\n\nNginx 处理静态资源的内容，我们需要考虑下面这几个问题：\n\n- 静态资源的配置指令\n- 静态资源的配置优化\n- 静态资源的压缩配置指令\n- 静态资源的缓存处理\n- 静态资源的访问控制，包括跨域问题和防盗链问题\n\n## 静态资源指令配置\n\n### listen指令\n\n该指令是用来配置监听端口。默认监听 80（root 启动 Nginx） 和 8000（非 root 启动 Nginx） 端口。\n\n| 语法                                                         | 默认值                | 位置   |\n| ------------------------------------------------------------ | --------------------- | ------ |\n| listen \\<address>[:port] [default_server] ...... ;</br> listen \\<port> [default_server] ...... ; | listen *:80 \\| *:8000 | server |\n\n`listen` 指令的设置比较灵活，我们通过几个例子来把常用的设置方式熟悉下：\n\n```sh\nlisten 127.0.0.1:8000; # listen localhost:8000 监听指定的IP和端口\nlisten 127.0.0.1;\t# 监听指定IP的所有端口\nlisten 8000;\t# 监听指定端口上的连接\nlisten *:8000;\t# 监听指定端口上的连接\n```\n\n`default_server` 属性是标识符，用来将此虚拟主机设置成默认主机。所谓的默认主机指的是如果没有匹配到对应的 `address:port`，则会执行默认的 server。如果不指定该标识符，又没有匹配到对应的 `address:port` 时，默认使用的是第一个 server，所以第一个 server 要好好设置，建议第一个 server 就加上 `default_server`。\n\n```nginx\nserver{\n\tlisten 8080;\n\tserver_name 127.0.0.1;\n\tlocation / {\n\t\troot html;\n\t\tindex index.html;\n\t}\n}\nserver{\n\tlisten 8080 default_server;\n\tserver_name localhost;\n\tdefault_type text/plain;\n\treturn 444 'This is a error request';\n}\n```\n\n此时访问 8080 端口，它会访问第二个 server，如果第二个 server 去掉 `default_server` ，则默认访问第一个 server。\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220730/image.2e5c4uo1ghlw.webp)\n\n### server_name指令\n\n该指令用来设置虚拟主机服务名称。默认为空。\n\n比如 127.0.0.1、localhost、域名[www.baidu.com | www.jd.com]。\n\n| 语法                         | 默认值          | 位置   |\n| ---------------------------- | --------------- | ------ |\n| server_name \\<name> ...... ; | server_name \"\"; | server |\n\n- name 可以提供多个中间用空格分隔。\n\n关于 server_name 的配置方式有三种，分别是：\n\n- 精确匹配\n- 通配符匹配\n- 正则表达式匹配\n\n> **配置方式一：精确匹配**\n\n如：\n\n```nginx\nserver {\n\tlisten 80;\n\tserver_name www.frx.com www.bing.com;\n\t...\n}\n```\n\n此时以 `www.frx.com` 或者 `www.bing.com` 域名进行访问，就会跳转到 Nginx 的欢迎页面，前提是你需要拥有该域名，并且该域名和 Nginx 所在的系统 IP 进行绑定。\n\n所以我可以利用 hosts 文件进行「模拟」域名。\n\n> 补充小知识点\n\nhosts 是一个没有扩展名的系统文件，可以用记事本等工具打开，其作用就是将一些常用的网址域名与其对应的IP地址建立一个关联「数据库」，当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从 hosts 文件中寻找对应的IP地址，一旦找到，系统会立即打开对应网页，如果没有找到，则系统会再将网址提交 DNS 域名解析服务器进行 IP 地址的解析。\n\nhosts 文件不同系统的位置：\n\n- 在 windows 的位置：C:\\Windows\\System32\\drivers\\etc\n- 在 centos 的位置：/etc/hosts\n\n因为域名是要收取一定的费用，所以我们可以使用修改 hosts 文件来制作一些虚拟域名来使用。需要修改 `/etc/hosts` 文件来添加\n\n```sh\n# 进入 hosts 文件\nvim /etc/hosts\n\n# 添加内容\n127.0.0.1 www.frx.com\n127.0.0.1 www.bing.com\n```\n\n+ 访问测试\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220730/image.3nbv3p1703y0.webp)\n\n>  **配置方式二：使用通配符配置**\n\nserver_name 指令支持通配符 *，但需要注意的是通配符不能出现在域名的中间，只能出现在首段或尾段，如：\n\n```nginx\nserver {\n\tlisten 80;\n\tserver_name  *.frx.com\twww.frx.*;\n\t# www.frx.cn abc.frx.cn www.bing.cn www.frx.com\n\t...\n}\n```\n\n下面的配置就会报错，因为 * 不能出现在域名的中间和与其他字符串联使用\n\n```nginx\nserver {\n\tlisten 80;\n\tserver_name  www.*.cn www.frx.c*\n\t...\n}\n```\n\n```nginx\nserver {\n\tlisten 80;\n\tserver_name  .frx.com\n\t...\n}\n```\n\n`.frx.com` 相当于 `*..frx.com` + `frx.com`\n\n> **配置三：使用正则表达式配置**\n\nserver_name 指令可以使用正则表达式，并且使用 `~` 作为正则表达式字符串的开始标记。\n\n常见的正则表达式：\n\n| 代码  | 说明                                                       |\n| ----- | ---------------------------------------------------------- |\n| ^     | 匹配搜索字符串开始位置                                     |\n| $     | 匹配搜索字符串结束位置                                     |\n| .     | 匹配除换行符 \\n 之外的任何单个字符                         |\n| \\     | 转义字符，将下一个字符标记为特殊字符                       |\n| [xyz] | 字符集，与任意一个指定字符匹配                             |\n| [a-z] | 字符范围，匹配指定范围内的任何字符                         |\n| \\w    | 与以下任意字符匹配 A-Z a-z 0-9 和下划线,等效于[A-Za-z0-9_] |\n| \\d    | 数字字符匹配，等效于[0-9]                                  |\n| {n}   | 正好匹配 n 次                                              |\n| {n,}  | 至少匹配 n 次                                              |\n| {n,m} | 匹配至少 n 次至多 m 次                                     |\n| *     | 零次或多次，等效于{0,}                                     |\n| +     | 一次或多次，等效于{1,}                                     |\n| ?     | 零次或一次，等效于{0,1}                                    |\n\n配置如下：\n\n```nginx\nserver{\n\tlisten 80;\n    server_name ~^www\\.(\\w+)\\.com$;\n    default_type text/plain;\n    return 200 $1;\n}\n```\n\n**注意 ~ 后面不能加空格**。括号代表可以在 Ngxin 配置文件内获取其中的值，如上方的 (\\w+) 的内容可以用 $1 获取到参数，如果有多个括号，依次使用 $2 $3 ...... 获取。\n\n比如现在访问 `http://www.frx.com`，则返回 frx 到页面上，因为frx 被放在 $1 处：`return 200 frx`。\n\n⚠ 这里进行说明：server_name 配置了 localhost 和配置 IP 或者域名的区别\n\nlocalhost 是「虚拟 IP」，如果不是本机访问，而是外界访问，那么这个就是无效的，但是为什么学习阶段的时候都不改呢，因为当 Nginx 没有匹配到指定的 `server_name`，默认找到第一个 server 块，而 Nginx 默认的第一个 server 块就是 localhost，哪怕你把 localhost 改为其他的，如 hello，它也能访问。只是因为在匹配不到的情况下，默认是第一个 service 块，哪怕它确实和访问的 IP 不匹配。\n\nIP 如果和域名进行了绑定，那么在 `server_name` 中，两者都可以填写，填了域名，最后也是找到 IP，只是因为域名好记住。\n\n知道了区别，在生产环境上，可以给个指定的错误页面。如果匹配不上，则返回友好的提示，如第一个 server 块：\n\n```nginx\nserver{\n\tlisten 80 default_server;\n    server_name _;    # 匹配不上的时候，也可以填写 localhost\n    return \"<h1>不好意思，匹配不到！\";\n    # return 403;   # 也可以直接返回错误码\n    # \n}\n\nserver{\n\tlisten 80;\n    server_name www.frxcat.fun;    # 匹配域名访问\n    # ......\n}\n```\n\n上面代码块只允许域名访问，而不允许 IP 访问，避免其他人把未备案的域名解析到自己的服务器 IP。\n\n当然你也可以不设置错误页面。因为 Nginx 匹配不上时，直接返回它的欢迎界面。\n\n### 匹配执行顺序\n\n由于 server_name 指令支持通配符和正则表达式，因此在包含多个虚拟主机的配置文件中，可能会出现一个名称被多个虚拟主机的 server_name 匹配成功，当遇到这种情况，当前的请求交给谁来处理呢？如下：\n\n```nginx\nserver{\n\tlisten 80;\n\tserver_name ~^www\\.\\w+\\.com$;\n\tdefault_type text/plain;\n\treturn 200 'regex_success';\n}\n\nserver{\n\tlisten 80;\n\tserver_name www.frx.*;\n\tdefault_type text/plain;\n\treturn 200 'wildcard_after_success';\n}\n\nserver{\n\tlisten 80;\n\tserver_name *.frx.com;\n\tdefault_type text/plain;\n\treturn 200 'wildcard_before_success';\n}\n\nserver{\n\tlisten 80;\n\tserver_name www.frx.com;\n\tdefault_type text/plain;\n\treturn 200 'exact_success';\n}\n\nserver{\n\tlisten 80 default_server;\n\tserver_name _;\n\tdefault_type text/plain;\n\treturn 444 'default_server not found server';\n}\n```\n\n访问 `http://www.kele.com` 的优先级：（访问完后请注释掉处理这个请求的 server）\n\n- exact_success（第一个是精确匹配，然后注释掉该 server）\n- wildcard_before_success（第二个是开始匹配符，然后注释掉该 server）\n- wildcard_after_success（第三个是结尾匹配符，然后注释掉该 server）\n- regex_success（第四个是正则表达式，然后注释掉该 server）\n- default_server not found server!!（第五个是默认 server，因为前四个都注释了，所以只能走默认的 server）\n\n**结论**\n\n- No1：准确匹配 server_name\n\n- No2：通配符在开始时匹配 server_name 成功\n\n- No3：通配符在结束时匹配 server_name 成功\n\n- No4：正则表达式匹配 server_name 成功\n\n- No5：被默认的 default_server 处理，如果没有指定默认找第一个 server\n\n### location指令\n\n`location` 指令是用来设置请求的 URI。\n\n```nginx\nserver{\n\tlisten 80;\n\tserver_name localhost;\n\tlocation / {\n\t\n\t}\n\tlocation /abc {\n\t\n\t}\n\t...\n}\n```\n\n| 语法                                             | 默认值 | 位置             |\n| ------------------------------------------------ | ------ | ---------------- |\n| location [ = \\| ~ \\| ~* \\| ^~ \\| @ ] \\<uri>{...} | —      | server、location |\n\nuri 变量是待匹配的请求字符串，可以不包含正则表达式，也可以包含正则表达式，那么 Nginx 服务器在搜索匹配 location 的时候，是先使用不包含正则表达式进行匹配，找到一个匹配度最高的一个，然后在通过包含正则表达式的进行匹配，**如果能匹配到直接访问正则表达式的，匹配不到，就使用刚才匹配度最高（前缀最长的）的那个 location 来处理请求**。\n\n属性介绍:\n\n不带符号，要求必须以指定模式开头，但是不要求精确匹配\n\n```nginx\nserver {\n\tlisten 80;\n\tserver_name 127.0.0.1;\n\tlocation /abc {\n\t\tdefault_type text/plain;\n\t\treturn 200 \"access success\";\n\t}\n}\n\n# 以下访问都是正确的\nhttp://192.168.91.200/abc\nhttp://192.168.91.200/abc?p1=kele\nhttp://192.168.91.200/abc/\nhttp://192.168.91.200/abcdef\n```\n\n`=` 是用于不包含正则表达式的 uri，必须与指定的模式精确匹配\n\n```nginx\nserver {\n\tlisten 80;\n\tserver_name 127.0.0.1;\n\tlocation =/abc {\n\t\tdefault_type text/plain;\n\t\treturn 200 \"access success\";\n\t}\n}\n# 匹配成功\nhttp://192.168.91.200/abc\nhttp://192.168.91.200/abc?p1=TOM\n# 匹配失败\nhttp://192.168.91.200/abc/\nhttp://192.168.91.200/abcdef\n```\n\n`~` 是用于表示当前 uri 中包含了正则表达式，并且区分大小写\n\n`~*` 是用于表示当前 uri 中包含了正则表达式，但是是不区分大小写\n\n换句话说，**如果 uri 包含了正则表达式，需要用上述两个符号来标识**\n\n```nginx\n# 使用正则表达式，区分大小写\nserver {\n\tlisten 80;\n\tserver_name 127.0.0.1;\n\tlocation ~^/abc\\w$ {\n\t\tdefault_type text/plain;\n\t\treturn 200 \"access success\";\n\t}\n}\n\n# 使用正则表达式，不区分大小写\nserver {\n\tlisten 80;\n\tserver_name 127.0.0.1;\n\tlocation ~*^/abc\\w$ {\n\t\tdefault_type text/plain;\n\t\treturn 200 \"access success\";\n\t}\n}\n```\n\n`^~` 是用于不包含正则表达式的 uri，功能和不加符号的一致，唯一不同的是，如果请求匹配上了，那么就停止搜索其他模式了。\n\n```nginx\nserver {\n\tlisten 80;\n\tserver_name 127.0.0.1;\n\tlocation ^~/abc {\n\t\tdefault_type text/plain;\n\t\treturn 200 \"access success\";\n\t}\n}\n```\n\n`@` 前缀可以用来定义一个命名的 location,该 location 不处理正常的外部请求,一般用来当作标识供内部重定向使用。它们不能嵌套,也不能包含嵌套的 location。\n\n```nginx\nlocation /try {\n    try_files $uri $uri/ @name;\n}\n\nlocation /error {\n    error_page 404 = @name;\n    return 404;\n}\n\nlocation @name {\n    return 200 \"@name\";\n}\n```\n\n这时访问 `/try` 或者 `/error` 都会返回 `@name`。\n\n### root/alias指令\n\n+ `root` 指令是设置请求资源的根目录。默认值是 html。\n\n| 语法          | 默认值     | 位置                   |\n| ------------- | ---------- | ---------------------- |\n| root \\<path>; | root html; | http、server、location |\n\npath 是 Nginx 服务器接收到请求以后查找资源的根目录路径。\n\n+ `alias` 指令是用来更改 location 的 URI。\n\n| 语法           | 默认值 | 位置     |\n| -------------- | ------ | -------- |\n| alias \\<path>; | —      | location |\n\n- path 是修改后的根路径。\n\n**以上两个指令都可以来指定访问资源的路径，那么这两者之间的区别是什么？**\n\n> **举例说明**\n\n1. 在 `/usr/local/nginx/html` 目录下创建一个 images 目录,并在目录下放入一张图片 `mv.png` 图片。\n\n   然后进入配置文件，添加如下内容：\n\n```nginx\nlocation /images {\n    root /usr/local/nginx/html;\n}\n```\n\n访问图片的路径为：`http://192.168.91.200/images/mv.png`\n\n2. 如果把root改为alias\n\n```nginx\nlocation /images {\n    alias /usr/local/nginx/html;\n}\n```\n\n再次访问上述地址，页面会出现 404 的错误，查看错误日志会发现是因为地址不对，所以验证了：\n\n- root 的处理结果是：**root 路径 + location 路径**，location 路径包括匹配后面的请求，即包括 /mv.png\n\n  `/usr/local/nginx/html/images/mv.png`\n\n+ alias 的处理结果是：**使用 alias 路径替换 location 路径**，但是不会替换匹配后面的请求，即不会替换 /mv.png\n\n需要在 alias 后面路径改为：\n\n```nginx\nlocation /images {\n    alias /usr/local/nginx/html/images;\n}\n```\n\n3. 如果 location 路径是以 / 结尾,则 alias 也必须是以 / 结尾，root 没有要求。\n\n将上述配置修改为：\n\n```nginx\nlocation /images/ {\n    alias /usr/local/nginx/html/images;\n}\n```\n\n访问就会出问题，查看错误日志还是路径不对，所以需要把 alias 后面加上 /\n\n小结：\n\n- root 的处理结果是: root 路径 + location 路径\n- alias 的处理结果是:使用 alias 路径替换 location 路径\n- alias 是一个目录别名的定义，root 则是最上层目录的含义\n- 如果 location 路径是以 / 结尾,则 alias 也必须是以 / 结尾，root 没有要求\n  - **alias 不支持 location 的 =**\n\n这里再多言几句，alias 后指定的资源路径，Nginx 就会去这个路径下找资源，「忽略」location 本身的的请求，仅拼接 location 后面的请求。如果你想去拼接 location 本身，就用绝对路径（包括 location）的alias。\n\n### index指令\n\n`index` 指令是设置网站的默认首页。默认是 index.html。\n\n| 语法               | 默认值            | 位置                   |\n| ------------------ | ----------------- | ---------------------- |\n| index \\<file> ...; | index index.html; | http、server、location |\n\n`index` 后面可以跟多个设置，如果访问的时候没有指定具体访问的资源，则会从左往右依次进行查找，找到第一个为止。\n\n举例说明：\n\n```nginx\nlocation / {\n\troot /usr/local/nginx/html;\n\tindex index.html index.htm;\n}\n```\n\n访问该 location 的时候，可以通过 `http://ip:port/` 访问，地址后面如果不添加任何内容，则默认依次访问 index.html 和 index.htm，找到第一个来进行返回。\n\n### error_page指令\n\nerror_page 指令是设置网站的错误页面。\n\n| 语法                                            | 默认值 | 位置                          |\n| ----------------------------------------------- | ------ | ----------------------------- |\n| error_page \\<code> ...... [=[response]] \\<uri>; | —      | http、server、location ...... |\n\ncode 是响应码。\n\n**当出现对应的响应 code 后，如何来处理？**\n\n> **举例说明**\n\n1. 可以指定具体跳转的地址\n\n```nginx\nserver {\n\terror_page 404 http://www.frx.com;\n}\n```\n\n当页面产生 404 时，自动跳转到 `http://www.frx.com`\n\n2. 可以指定重定向地址\n\n```nginx\nserver{\n\terror_page 404 /50x.html;\n\terror_page 500 502 503 504 /50x.html;\n\tlocation =/50x.html {\n\t\troot html;\n\t}\n}\n```\n\n产生错误页面时，重定向到 /50x.html，然后触发 location，最终访问的是 html 目录下的 50x.html 页面\n\n3. 使用 location 的 @ 符合完成错误信息展示\n\n```nginx\nserver{\n\terror_page 404 @jump_to_error;\n\tlocation @jump_to_error {\n\t\tdefault_type text/plain;\n\t\treturn 404 'Not Found Page...';\n\t}\n}\n```\n\n可选项 `=[response]` 的作用是用来将相应代码更改为另外一个，如下：\n\n```nginx\nserver{\n\terror_page 404 =200 /50x.html;\n\tlocation =/50x.html {\n\t\troot html;\n\t}\n}\n```\n\n这样的话，当返回 404 找不到对应的资源的时候，在浏览器上可以看到，最终返回的状态码是 200 而不是 404，这块需要注意下，编写 error_page 后面的内容，404 后面需要加空格，200 前面不能加空格。\n\n## 静态资源优化配置\n\nNginx 对静态资源如何进行优化配置。这里从三个属性配置进行优化：\n\n```nginx\nsendfile on;\ntcp_nopush on;\ntcp_nodeplay on;\n```\n\n建议三个都开启。如果想知道为什么，请往下看。\n\n### sendﬁle\n\n该指令是用来开启高效的文件传输模式。默认关闭，建议开启。\n\n| 语法                 | 默认值      | 位置                          |\n| -------------------- | ----------- | ----------------------------- |\n| sendﬁle <on \\| off>; | sendﬁle oﬀ; | http、server、location ...... |\n\n请求静态资源的过程：客户端通过网络接口向服务端发送请求，操作系统将这些客户端的请求传递给服务器端应用程序，服务器端应用程序会处理这些请求，请求处理完成以后，操作系统还需要将处理得到的结果通过网络适配器传递回去。\n\n如：\n\n```nginx\nserver {\n\tlisten 80;\n\tserver_name localhost；\n\tlocation / {\n\t\troot html;\n\t\tindex index.html;\n\t}\n}\n```\n\n假设在 html 目录下有一个 welcome.html 页面，访问地址：`http://192.168.91.200/welcome.html`。\n\n流程如下：\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.24hrbukvg0lc.webp)\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.5l2efa1uqlo0.webp)\n\n### tcp_nopush\n\n该指令必须在 sendfile 打开的状态下才会生效，主要是用来提升网络包的传输「效率」。默认关闭。\n\n| 语法                    | 默认值         | 位置                   |\n| ----------------------- | -------------- | ---------------------- |\n| tcp_nopush <on \\| off>; | tcp_nopush oﬀ; | http、server、location |\n\n### tcp_nodelay\n\n该指令必须在 keep-alive 连接开启的情况下才生效，来提高网络包传输的「实时性」。默认开启。\n\n| 语法                     | 默认值          | 位置                   |\n| ------------------------ | --------------- | ---------------------- |\n| tcp_nodelay <on \\| off>; | tcp_nodelay on; | http、server、location |\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.1iu7wmocw0ao.webp)\n\n`tcp_nopush` 就像大巴车，等所有旅客占满了座位，才开始发车到景点（客户端），而 `tcp_nodelay`，上来一个旅客，就马上发车到景点客户端）。\n\n### 优化总结\n\n经过分析，『 tcp_nopush 』和『 tcp_nodelay 』看起来是「互斥的」，那么为什么要将这两个值都打开，这个大家需要知道的是在 Linux2.5.9 以后的版本中两者是可以兼容的，三个指令都开启的好处是，sendfile 可以开启高效的文件传输模式，『 tcp_nopush 』开启可以确保在发送到客户端之前数据包已经充分「填满」，这大大减少了网络开销，并加快了文件发送的速度。然后，当它到达最后一个可能因为没有「填满」而暂停的数据包时，Nginx 会忽略『 tcp_nopush 』参数， 然后，『 tcp_nodelay 』强制套接字发送数据。由此可知，『 tcp_nopush 』可以与『 tcp_nodelay 』一起设置，它比单独配置『 tcp_nodelay 』具有更强的性能。\n\n所以回归开头，我们可以使用如下配置来优化 Nginx 静态资源的处理：\n\n```nginx\n# 三个都开启\nsendfile on;\ntcp_nopush on;\ntcp_nodelay on;\n```\n\n## 静态资源压缩配置\n\n经过上述内容的优化，我们再次思考一个问题，假如在满足上述优化的前提下，我们传送一个 1M 的数据和一个 10M 的数据那个效率高？答案显而易见，**传输内容小，速度就会快**。那么问题又来了，同样的内容，如果把大小降下来，我们脑袋里面要蹦出一个词就是「压缩」，接下来，我们来学习 Nginx 的静态资源压缩模块。\n\n在 Nginx 的配置文件中可以通过配置 gzip 来对静态资源进行压缩，相关的指令可以配置在 http 块、server 块和 location 块中，Nginx 可以通过对这些指令进行解析和处理：\n\n- `ngx_http_gzip_module` 模块\n- `ngx_http_gzip_static_module` 模块\n- `ngx_http_gunzip_module` 模块\n\n接下来我们从以下内容进行学习：\n\n- Gzip 各模块支持的配置指令\n- Gzip 压缩功能的配置\n- Gzip 和 sendfile 的冲突解决\n- 浏览器不支持 Gzip 的解决方案\n\n### Gzip模块配置指令\n\n接下来所学习的指令都来自 `ngx_http_gzip_module` 模块，该模块会在 Nginx 安装的时候内置到 Nginx 的安装环境中，也就是说我们可以直接使用这些指令。\n\n- `gzip` 指令是用于开启或者关闭 Gzip 功能。默认关闭\n\n| 语法              | 默认值    | 位置                          |\n| ----------------- | --------- | ----------------------------- |\n| gzip <on \\| off>; | gzip off; | http、server、location ...... |\n\n注意：只有该指令为打开状态，下面的指令才有效果\n\n```nginx\nhttp{\n\tgzip on;\n}\n```\n\n+ `gzip_types` 指令可以根据响应页的 MIME 类型选择性地开启 Gzip 压缩功能。默认是 text/html\n\n| 语法                             | 默认值                | 位置                   |\n| -------------------------------- | --------------------- | ---------------------- |\n| gzip_types \\<mime-type> ...... ; | gzip_types text/html; | http、server、location |\n\n所选择的值可以从 mime.types 文件中进行查找，也可以使用 * 代表所有。\n\n```nginx\nhttp{\n\tgzip_types application/javascript;\n\t# * 代表所有\n\tgzip_types *\n}\n```\n\n+ `gzip_comp_level` 指令是用于设置 Gzip 压缩程度，级别从 1-9，1 表示要是程度最低，要是效率最高，9 刚好相反，压缩程度最高，但是效率最低、最费时间。默认值是 1\n\n| 语法                      | 默认值             | 位置                   |\n| ------------------------- | ------------------ | ---------------------- |\n| gzip_comp_level \\<level>; | gzip_comp_level 1; | http、server、location |\n\n```nginx\nhttp{\n\tgzip_comp_level 6;\n}\n```\n\n+ `gzip_vary` 指令是用于设置使用 Gzip 进行压缩发送是否携带『Vary:Accept-Encoding』头域的响应头部。主要是告诉接收方，所发送的数据经过了 Gzip 压缩处理。默认关闭\n\n| 语法                   | 默认值         | 位置                   |\n| ---------------------- | -------------- | ---------------------- |\n| gzip_vary <on \\| off>; | gzip_vary off; | http、server、location |\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.4bsq0xpu9s20.webp)\n\n+ `gzip_buffers` 指令是用于处理请求压缩的缓冲区数量和大小\n\n| 语法                            | 默认值                       | 位置                   |\n| ------------------------------- | ---------------------------- | ---------------------- |\n| gzip_buffers \\<number> \\<size>; | gzip_buffers 32 4k \\| 16 8k; | http、server、location |\n\n其中 number 是指定 Nginx 服务器向系统申请缓存空间个数，size 指的是每个缓存空间的大小。主要实现的是申请 number 个每个大小为 size 的内存空间。这个值的设定一般会和服务器的操作系统有关，所以建议此项不设置，使用默认值即可。\n\n```nginx\ngzip_buffers 4 16K;\t  # 缓存空间大小\n```\n\n+ `gzip_disable` 指令是针对不同种类客户端发起的请求，可以选择性地开启和关闭 Gzip 功能\n\n| 语法                           | 默认值 | 位置                   |\n| ------------------------------ | ------ | ---------------------- |\n| gzip_disable \\<regex> ...... ; | —      | http、server、location |\n\nregex 是根据客户端的浏览器标志(user-agent)来设置，支持使用正则表达式。指定的浏览器标志不使用 Gzip.该指令一般是用来排除一些明显不支持 Gzip 的浏览器。\n\n```nginx\ngzip_disable \"MSIE [1-6]\\.\";\n```\n\n`gzip_http_version` 指令是针对不同的 HTTP 协议版本，可以选择性地开启和关闭 Gzip 功能。默认是 1.1 版本\n\n| 语法                            | 默认值                 | 位置                   |\n| ------------------------------- | ---------------------- | ---------------------- |\n| gzip_http_version <1.0 \\| 1.1>; | gzip_http_version 1.1; | http、server、location |\n\n该指令是指定使用 Gzip 的 HTTP 最低版本，该指令一般采用默认值即可。\n\n- `gzip_min_length` 指令是针对传输数据的大小，可以选择性地开启和关闭 Gzip 功能\n\n| 语法                       | 默认值              | 位置                   |\n| -------------------------- | ------------------- | ---------------------- |\n| gzip_min_length \\<length>; | gzip_min_length 20; | http、server、location |\n\nNignx 计量大小的单位：bytes [字节] / kb [千字节] / M [兆]\n\n例如: 1024 / 10k | K / 10m | M\n\nGzip 压缩功能对大数据的压缩效果明显，但是如果要压缩的数据比较小的话，可能出现越压缩数据量越大的情况，因此我们需要根据响应内容的大小来决定是否使用 Gzip 功能，响应页面的大小可以通过头信息中的 `Content-Length` 来获取。但是如何使用了 Chunk 编码动态压缩，该指令将被忽略。建议设置为 1K 或以上。\n\n- `gzip_proxied` 指令设置是否对服务端返回的结果进行 Gzip 压缩\n\n| 语法                                                         | 默认值            | 位置                   |\n| ------------------------------------------------------------ | ----------------- | ---------------------- |\n| gzip_proxied <off \\| expired \\| no-cache \\| no-store \\| private \\| no_last_modified \\| no_etag \\| auth \\| any>; | gzip_proxied off; | http、server、location |\n\n- off：关闭 Nginx 服务器对后台服务器返回结果的 Gzip 压缩\n- expired：如果 header 头中包含 『Expires』头信息，启用压缩\n- no-cache：如果 header 头中包含 『Cache-Control:no-cache』头信息，启用压缩\n- no-store：如果 header 头中包含 『Cache-Control:no-store』头信息，启用压缩\n- private：如果 header 头中包含 『Cache-Control:private』头信息，启用压缩\n- no_last_modified：如果 header 头中不包含 『Last-Modified』头信息，启用压缩\n- no_etag：如果 header 头中不包含 『ETag』 头信息，启用压缩\n- auth：如果 header 头中包含 『Authorization』 头信息，启用压缩\n- any：无条件启用压缩\n\n### Gzip压缩功能配置模板\n\n```nginx\ngzip on;  \t\t\t   \t\t # 开启 Gzip 功能\ngzip_types *;\t\t   \t \t # 压缩源文件类型,根据具体的访问资源类型设定\ngzip_comp_level 6;\t   \t\t # Gzip 压缩级别\ngzip_min_length 1k;          # 进行压缩响应页面的最小长度，content-length\ngzip_buffers 4 16K;\t         # 缓存空间大小\ngzip_http_version 1.1;       # 指定压缩响应所需要的最低 HTTP 请求版本\ngzip_vary  on;\t\t         # 往头信息中添加压缩标识\ngzip_disable \"MSIE [1-6]\\.\"; # 对 IE6 以下的版本都不进行压缩\ngzip_proxied  off;           # Nginx 作为反向代理压缩服务端返回数据的条件\n```\n\n这些配置在很多地方可能都会用到，所以我们可以将这些内容抽取到一个配置文件中，然后通过 include 指令把配置文件再次加载到 nginx.conf 配置文件中，方法使用。\n\n创建压缩配置文件：`nginx_gzip.conf`，添加如下内容：\n\n```nginx\ngzip on;\ngzip_types *;\ngzip_comp_level 6;\ngzip_min_length 1k;\ngzip_buffers 4 16K;\ngzip_http_version 1.1;\ngzip_vary  on;\ngzip_disable \"MSIE [1-6]\\.\";\ngzip_proxied  off;\n```\n\n在 Nginx 核心配置文件 `nginx.conf` 进行引入，添加如下内容：\n\n```nginx\ninclude nginx_gzip.conf\n```\n\n### Gzip和sendfile共存问题\n\n前面在讲解 sendfile 的时候，提到过，开启 sendfile 以后，在读取磁盘上的静态资源文件的时候，可以减少拷贝的次数，可以不经过用户进程将静态文件通过网络设备发送出去，但是 Gzip 要想对资源压缩，是需要经过用户进程进行操作的。Nginx 设置了Gzip 之后，静态文件的 sendfile 就不起作用了。所以要考虑如何解决两个设置的共存问题。\n\n可以使用 `ngx_http_gzip_static_module` 模块的 `gzip_static` 指令来解决。\n\n### gzip_static指令\n\n`gzip_static` 指令用于在检查与访问资源同名的 .gz 文件时，response 中以 Gzip 相关的 header 返回 .gz 文件的内容。默认关闭。\n\n| 语法                               | 默认值           | 位置                   |\n| ---------------------------------- | ---------------- | ---------------------- |\n| gzip_static <on \\| off \\| always>; | gzip_static off; | http、server、location |\n\n```nginx\ngzip_static on;\n```\n\n在配置文件添加上述命令后，会报一个错误：`unknown directive \"gzip_static\"`，主要的原因是 Nginx 默认是没有添加 ngx_http_gzip_static_module 模块。如何来添加？\n\n### Nginx模块添加\n\n1. 查询当前 Nginx 的配置参数，即查看 `configure arguments` 的配置信息，拷贝出来\n\n```sh\nnginx -V\n\n# 拷贝 configure arguments 后面的数据\n```\n\n```nginx\n--prefix=/usr/local/nginx\n```\n\n2. 将 Nginx 安装目录下 sbin 目录中的 nginx 二进制文件进行更名备份\n\n```sh\ncd /usr/local/nginx/sbin\nmv nginx nginx.backup\n```\n\n3. 进入 Nginx 的安装目录\n\n```sh\ncd /root/nginx/core/nginx-1.21.6\n```\n\n4. 执行 make clean 清空之前编译的内容\n\n```sh\nmake clean\n```\n\n5. 使用 configure 来配置参数，添加 `ngx_http_gzip_static_module` 模块，记得加上第1步拷贝的配置信息\n\n```sh\n./configure --with-http_gzip_static_module  # 记得添加 configure arguments 后的数据\n```\n\n6. 使用 make 命令进行编译\n\n```sh\nmake\n```\n\n7. 将 objs 目录下的 nginx 二进制执行文件移动到 nginx 安装目录下的 sbin 目录中\n\n```sh\nmv /opt/nginx/core/nginx-1.21.6/objs/nginx /usr/local/nginx/sbin\n```\n\n如果不执行第（2）步进行备份，则该步骤会覆盖原来的 nginx 可执行文件\n\n8. 在源码目录下执行更新命令\n\n```sh\ncd /opt/nginx/core/nginx-1.21.6\nmake upgrade\n```\n\n### gzip_static测试\n\n准备好一个 jquery.js 文件，放在 html 目录下\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.576ef03x00c0.webp)\n\n1. 直接访问 `http://192.168.91.200/jquery.js`\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.2b8dhabn0cbo.webp)\n\n2. 使用 Gzip 命令进行压缩\n\n```sh\n# 进入 html 目录\ncd /usr/local/nginx/html\n\n# 压缩 js 文件\ngzip jquery.js\n```\n\n3. 再次访问 `http://192.168.91.200/jquery.js`\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.4ivj1d091pg.webp)\n\n可以看出 `Content-Length` 的大小已经变得非常小。\n\n## 静态资源缓存配置\n\n当浏览器请求 Nginx 服务器的资源后，我们可以让这些资源缓存在浏览器里，这样再一次请求相同的资源时，无需请求 Nginx 服务器，直接从浏览器的缓存里获取，减少 Nginx 服务器的压力。\n\n### 什么是缓存和Web缓存\n\n缓存（cache），原始意义是指访问速度比一般随机存取存储器（RAM）快的一种高速存储器，通常它不像系统主存那样使用 DRAM 技术，而使用昂贵但较快速的 SRAM 技术。缓存的设置是所有现代计算机系统发挥高性能的重要因素之一。\n\nWeb 缓存是指一个 Web 资源（如 html 页面，图片，js，数据等）存在于 Web 服务器和客户端（浏览器）之间的副本。缓存会根据进来的请求保存输出内容的副本；当下一个请求来到的时候，如果是相同的 URL，缓存会根据缓存机制决定是直接使用副本响应访问请求，还是向源服务器再次发送请求。比较常见的就是浏览器会缓存访问过网站的网页，当再次访问这个 URL 地址的时候，如果网页没有更新，就不会再次下载网页，而是直接使用本地缓存的网页。只有当网站明确标识资源已经更新，浏览器才会再次下载网页。\n\n### Web缓存的种类\n\n客户端缓存\n\n- 浏览器缓存\n\n服务端缓存\n\n- Nginx\n- Redis\n- Memcached 等\n\n### 为什么要用浏览器缓存\n\n- 成本最低的一种缓存实现\n- 减少网络带宽消耗\n- 降低服务器压力\n- 减少网络延迟，加快页面打开速度\n\n### 浏览器缓存执行流程\n\nHTTP 协议中和页面缓存相关的字段，我们先来认识下：\n\n| header        | 说明                                          |\n| ------------- | --------------------------------------------- |\n| Expires       | 缓存过期的日期和时间                          |\n| Cache-Control | 设置和缓存相关的配置信息                      |\n| Last-Modified | 请求资源最后修改时间                          |\n| ETag          | 请求变量的实体标签的当前值，比如文件的 MD5 值 |\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.209c4krjzgf4.webp)\n\n1. 用户首次通过浏览器发送请求到服务端获取数据，客户端是没有对应的缓存，所以需要发送 request 请求来获取数据；\n2. 服务端接收到请求后，获取服务端的数据及服务端缓存的允许后，返回 200 的成功状态码并且在响应头上附上对应资源以及缓存信息；\n3. 当用户再次访问相同资源的时候，客户端会在浏览器的缓存目录中查找是否存在响应的缓存文件；\n4. 如果没有找到对应的缓存文件，则走第2步；\n5. 如果有缓存文件，接下来对缓存文件是否过期进行判断，过期的判断标准是(Expires)；\n6. 如果没有过期，则直接从本地缓存中返回数据进行展示（强缓存）；\n7. 如果 Expires 过期，接下来需要判断缓存文件是否发生过变化；\n8. 判断的标准有两个（都要判断），一个是 ETag(Entity Tag)，一个是 Last-Modified；\n9. 判断结果是未发生变化，则服务端返回 304，直接从缓存文件中获取数据（弱缓存）；\n10. 如果判断是发生了变化，重新从服务端获取数据，并根据缓存协商(服务端所设置的是否需要进行缓存数据的设置)来进行数据缓存。\n\n### 浏览器缓存相关指令\n\nNginx 需要进行缓存相关设置，就需要用到如下的指令。\n\n#### expires指令\n\n该指令用来控制页面缓存的作用。可以通过该指令控制 HTTP 应答中的『Expires』和『Cache-Control』\n\n| 语法                                                       | 默认值       | 位置                   |\n| ---------------------------------------------------------- | ------------ | ---------------------- |\n| expires [modified] \\<time>; expires <epoch \\| max \\| off>; | expires off; | http、server、location |\n\n- time：可以整数也可以是负数，指定过期时间，单位为 s（秒）。如果是负数，Cache-Control 则为 no-cache，如果为整数或 0，则 Cache-Control 的值为 max-age=time\n\n- epoch：指定 Expires 的值为『'1 January,1970,00:00:01 GMT'』，即 1970-01-01 00:00:00 ，Cache-Control 的值 no-cache\n\n  因为 Expires（缓存过期时间）是 1970 年，所以不缓存。\n\n- max：指定 Expires 的值为『'31 December2037 23:59:59GMT' 』，即(2037-12-31 23:59:59，Cache-Control 的值为 10 年\n\n  因为 Expires（缓存过期时间）是 2037 年，虽然还有 16 年过期，但是最大只能缓存 10 年。\n\n- off：默认不缓存\n\n> **例子 1**\n\n在配置文件添加如下内容：\n\n```nginx\nlocation ~ .*\\.(html|js|css|png|jpg|jpeg|gif)$ {\n    # ...\n    expires max\n    # ...\n}\n```\n\n发送请求：`http://192.168.91.200/jquery.js`\n\n查看开发者工具(F12)的 NetWork，如图：\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.4x3yczk58lk0.webp)\n\n315360000 折算下来正好是 10 年。\n\n> **其他格式**\n\n```nginx\nexpires 30s;  # 表示把数据缓存 30 秒\n\nexpires 30m;  # 表示把数据缓存 30 分\n\nexpires 10h;  # 表示把数据缓存 10 小时\n\nexpires 1d;   # 表示把数据缓存 1 天\n```\n\n#### add_header指令\n\nadd_header 指令是用来添加指定的响应头和响应值。\n\nadd_header 是响应体的指令，不是请求时的指令（比如 expires ），并且 add_header 也有和 expires 一样的功能。\n\n如果 expires 和 add_header 同时开启的情况下，则 add_header 优于 expires 生效。\n\n| 语法                                  | 默认值 | 位置                              |\n| ------------------------------------- | ------ | --------------------------------- |\n| add_header \\<name> \\<value> [always]; | —      | location > server > http > ...... |\n\nalways 可选，代表总是添加。\n\nCache-Control 作为响应头信息，可以在 Nginx 配置文件设置如下缓存响应指令：\n\n```nginx\nadd_header Cache-control must-revalidate;\nadd_header Cache-control no-cache;\nadd_header Cache-control no-store;\nadd_header Cache-control no-transform;\nadd_header Cache-control public;\nadd_header Cache-control private;\nadd_header Cache-control proxy-revalidate;\nadd_header Cache-Control max-age=<seconds>;  # 秒\nadd_header Cache-control s-maxage=<seconds>; # 秒\n```\n\n描述：\n\n| 指令             | 说明                                                         |\n| ---------------- | ------------------------------------------------------------ |\n| must-revalidate  | 可缓存但必须再向源服务器进行确认                             |\n| no-cache         | 数据内容不能被缓存，每次请求都重新访问服务器，若有 max-age，则缓存期间不访问服务器 |\n| no-store         | 不缓存请求或响应的任何内容，暂存也不可以(临时文件夹中不能暂存该资源) |\n| no-transform     | 代理不可更改媒体类型                                         |\n| public           | 可以被任何缓存区缓存，如: 浏览器、服务器、代理服务器等       |\n| private（默认）  | 只能在浏览器中缓存，只有在第一次请求的时候才访问服务器，若有 max-age，则缓存期间不访问服务器 |\n| proxy-revalidate | 要求中间缓存服务器对缓存的响应有效性再进行确认               |\n| max-age=<秒>     | 过期时间，即以秒为单位的缓存时间                             |\n| s-maxage=<秒>    | 公共缓存服务器响应的最大 Age 值                              |\n\n值得注意的是：\n\n- 设置了 no-cache 或者 private 后，打开新窗口时会重新访问服务器。若设置 max-age，则缓存期间不访问服务器\n- 设置 private 和正数的 max-age 时，后退时候不会访问服务器\n- 设置 no-cache 和正数的 max-age 时，后退时会访问服务器\n\n### Nginx服务端缓存\n\n在 Web 缓存的种类，我们提到了 Ngixn 服务端缓存，而上面仅仅介绍了在浏览器进行缓存，而因为 Ngixn 服务端缓存的内容比较多，所以前往 **Nginx - 缓存集成** 进行学习。\n\n","source":"_posts/Nginx_Static_resource_deployment.md","raw":"---\ntitle: Nginx 静态资源部署\ntags: [Nginx, 中间件, 后端]\ncategories: [Nginx]\ndate: 2022-11-10\n---\n# Nginx 静态资源部署\n\n**引言**\n\n静态资源如何部署？本内容带你了解静态资源相关的操作和内容。\n\n静态资源指令配置、静态资源优化配置、静态资源压缩配置、静态资源缓存配置。\n\n## Nginx静态资源概述\n\n上网去搜索访问资源对于我们来说并不陌生，通过浏览器发送一个 HTTP 请求实现从客户端发送请求到服务器端获取所需要内容后并把内容回显展示在页面的一个过程。这个时候，我们所请求的内容就分为两种类型，一类是静态资源、一类是动态资源。\n\n静态资源即指在服务器端真实存在并且能直接拿来展示的一些文件，比如常见的 html 页面、css 文件、js 文件、图片、视频等资源；\n\n动态资源即指在服务器端真实存在但是要想获取需要经过一定的业务逻辑处理，根据不同的条件展示在页面不同这 一部分内容，比如说报表数据展示、根据当前登录用户展示相关具体数据等资源；\n\nNginx 处理静态资源的内容，我们需要考虑下面这几个问题：\n\n- 静态资源的配置指令\n- 静态资源的配置优化\n- 静态资源的压缩配置指令\n- 静态资源的缓存处理\n- 静态资源的访问控制，包括跨域问题和防盗链问题\n\n## 静态资源指令配置\n\n### listen指令\n\n该指令是用来配置监听端口。默认监听 80（root 启动 Nginx） 和 8000（非 root 启动 Nginx） 端口。\n\n| 语法                                                         | 默认值                | 位置   |\n| ------------------------------------------------------------ | --------------------- | ------ |\n| listen \\<address>[:port] [default_server] ...... ;</br> listen \\<port> [default_server] ...... ; | listen *:80 \\| *:8000 | server |\n\n`listen` 指令的设置比较灵活，我们通过几个例子来把常用的设置方式熟悉下：\n\n```sh\nlisten 127.0.0.1:8000; # listen localhost:8000 监听指定的IP和端口\nlisten 127.0.0.1;\t# 监听指定IP的所有端口\nlisten 8000;\t# 监听指定端口上的连接\nlisten *:8000;\t# 监听指定端口上的连接\n```\n\n`default_server` 属性是标识符，用来将此虚拟主机设置成默认主机。所谓的默认主机指的是如果没有匹配到对应的 `address:port`，则会执行默认的 server。如果不指定该标识符，又没有匹配到对应的 `address:port` 时，默认使用的是第一个 server，所以第一个 server 要好好设置，建议第一个 server 就加上 `default_server`。\n\n```nginx\nserver{\n\tlisten 8080;\n\tserver_name 127.0.0.1;\n\tlocation / {\n\t\troot html;\n\t\tindex index.html;\n\t}\n}\nserver{\n\tlisten 8080 default_server;\n\tserver_name localhost;\n\tdefault_type text/plain;\n\treturn 444 'This is a error request';\n}\n```\n\n此时访问 8080 端口，它会访问第二个 server，如果第二个 server 去掉 `default_server` ，则默认访问第一个 server。\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220730/image.2e5c4uo1ghlw.webp)\n\n### server_name指令\n\n该指令用来设置虚拟主机服务名称。默认为空。\n\n比如 127.0.0.1、localhost、域名[www.baidu.com | www.jd.com]。\n\n| 语法                         | 默认值          | 位置   |\n| ---------------------------- | --------------- | ------ |\n| server_name \\<name> ...... ; | server_name \"\"; | server |\n\n- name 可以提供多个中间用空格分隔。\n\n关于 server_name 的配置方式有三种，分别是：\n\n- 精确匹配\n- 通配符匹配\n- 正则表达式匹配\n\n> **配置方式一：精确匹配**\n\n如：\n\n```nginx\nserver {\n\tlisten 80;\n\tserver_name www.frx.com www.bing.com;\n\t...\n}\n```\n\n此时以 `www.frx.com` 或者 `www.bing.com` 域名进行访问，就会跳转到 Nginx 的欢迎页面，前提是你需要拥有该域名，并且该域名和 Nginx 所在的系统 IP 进行绑定。\n\n所以我可以利用 hosts 文件进行「模拟」域名。\n\n> 补充小知识点\n\nhosts 是一个没有扩展名的系统文件，可以用记事本等工具打开，其作用就是将一些常用的网址域名与其对应的IP地址建立一个关联「数据库」，当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从 hosts 文件中寻找对应的IP地址，一旦找到，系统会立即打开对应网页，如果没有找到，则系统会再将网址提交 DNS 域名解析服务器进行 IP 地址的解析。\n\nhosts 文件不同系统的位置：\n\n- 在 windows 的位置：C:\\Windows\\System32\\drivers\\etc\n- 在 centos 的位置：/etc/hosts\n\n因为域名是要收取一定的费用，所以我们可以使用修改 hosts 文件来制作一些虚拟域名来使用。需要修改 `/etc/hosts` 文件来添加\n\n```sh\n# 进入 hosts 文件\nvim /etc/hosts\n\n# 添加内容\n127.0.0.1 www.frx.com\n127.0.0.1 www.bing.com\n```\n\n+ 访问测试\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220730/image.3nbv3p1703y0.webp)\n\n>  **配置方式二：使用通配符配置**\n\nserver_name 指令支持通配符 *，但需要注意的是通配符不能出现在域名的中间，只能出现在首段或尾段，如：\n\n```nginx\nserver {\n\tlisten 80;\n\tserver_name  *.frx.com\twww.frx.*;\n\t# www.frx.cn abc.frx.cn www.bing.cn www.frx.com\n\t...\n}\n```\n\n下面的配置就会报错，因为 * 不能出现在域名的中间和与其他字符串联使用\n\n```nginx\nserver {\n\tlisten 80;\n\tserver_name  www.*.cn www.frx.c*\n\t...\n}\n```\n\n```nginx\nserver {\n\tlisten 80;\n\tserver_name  .frx.com\n\t...\n}\n```\n\n`.frx.com` 相当于 `*..frx.com` + `frx.com`\n\n> **配置三：使用正则表达式配置**\n\nserver_name 指令可以使用正则表达式，并且使用 `~` 作为正则表达式字符串的开始标记。\n\n常见的正则表达式：\n\n| 代码  | 说明                                                       |\n| ----- | ---------------------------------------------------------- |\n| ^     | 匹配搜索字符串开始位置                                     |\n| $     | 匹配搜索字符串结束位置                                     |\n| .     | 匹配除换行符 \\n 之外的任何单个字符                         |\n| \\     | 转义字符，将下一个字符标记为特殊字符                       |\n| [xyz] | 字符集，与任意一个指定字符匹配                             |\n| [a-z] | 字符范围，匹配指定范围内的任何字符                         |\n| \\w    | 与以下任意字符匹配 A-Z a-z 0-9 和下划线,等效于[A-Za-z0-9_] |\n| \\d    | 数字字符匹配，等效于[0-9]                                  |\n| {n}   | 正好匹配 n 次                                              |\n| {n,}  | 至少匹配 n 次                                              |\n| {n,m} | 匹配至少 n 次至多 m 次                                     |\n| *     | 零次或多次，等效于{0,}                                     |\n| +     | 一次或多次，等效于{1,}                                     |\n| ?     | 零次或一次，等效于{0,1}                                    |\n\n配置如下：\n\n```nginx\nserver{\n\tlisten 80;\n    server_name ~^www\\.(\\w+)\\.com$;\n    default_type text/plain;\n    return 200 $1;\n}\n```\n\n**注意 ~ 后面不能加空格**。括号代表可以在 Ngxin 配置文件内获取其中的值，如上方的 (\\w+) 的内容可以用 $1 获取到参数，如果有多个括号，依次使用 $2 $3 ...... 获取。\n\n比如现在访问 `http://www.frx.com`，则返回 frx 到页面上，因为frx 被放在 $1 处：`return 200 frx`。\n\n⚠ 这里进行说明：server_name 配置了 localhost 和配置 IP 或者域名的区别\n\nlocalhost 是「虚拟 IP」，如果不是本机访问，而是外界访问，那么这个就是无效的，但是为什么学习阶段的时候都不改呢，因为当 Nginx 没有匹配到指定的 `server_name`，默认找到第一个 server 块，而 Nginx 默认的第一个 server 块就是 localhost，哪怕你把 localhost 改为其他的，如 hello，它也能访问。只是因为在匹配不到的情况下，默认是第一个 service 块，哪怕它确实和访问的 IP 不匹配。\n\nIP 如果和域名进行了绑定，那么在 `server_name` 中，两者都可以填写，填了域名，最后也是找到 IP，只是因为域名好记住。\n\n知道了区别，在生产环境上，可以给个指定的错误页面。如果匹配不上，则返回友好的提示，如第一个 server 块：\n\n```nginx\nserver{\n\tlisten 80 default_server;\n    server_name _;    # 匹配不上的时候，也可以填写 localhost\n    return \"<h1>不好意思，匹配不到！\";\n    # return 403;   # 也可以直接返回错误码\n    # \n}\n\nserver{\n\tlisten 80;\n    server_name www.frxcat.fun;    # 匹配域名访问\n    # ......\n}\n```\n\n上面代码块只允许域名访问，而不允许 IP 访问，避免其他人把未备案的域名解析到自己的服务器 IP。\n\n当然你也可以不设置错误页面。因为 Nginx 匹配不上时，直接返回它的欢迎界面。\n\n### 匹配执行顺序\n\n由于 server_name 指令支持通配符和正则表达式，因此在包含多个虚拟主机的配置文件中，可能会出现一个名称被多个虚拟主机的 server_name 匹配成功，当遇到这种情况，当前的请求交给谁来处理呢？如下：\n\n```nginx\nserver{\n\tlisten 80;\n\tserver_name ~^www\\.\\w+\\.com$;\n\tdefault_type text/plain;\n\treturn 200 'regex_success';\n}\n\nserver{\n\tlisten 80;\n\tserver_name www.frx.*;\n\tdefault_type text/plain;\n\treturn 200 'wildcard_after_success';\n}\n\nserver{\n\tlisten 80;\n\tserver_name *.frx.com;\n\tdefault_type text/plain;\n\treturn 200 'wildcard_before_success';\n}\n\nserver{\n\tlisten 80;\n\tserver_name www.frx.com;\n\tdefault_type text/plain;\n\treturn 200 'exact_success';\n}\n\nserver{\n\tlisten 80 default_server;\n\tserver_name _;\n\tdefault_type text/plain;\n\treturn 444 'default_server not found server';\n}\n```\n\n访问 `http://www.kele.com` 的优先级：（访问完后请注释掉处理这个请求的 server）\n\n- exact_success（第一个是精确匹配，然后注释掉该 server）\n- wildcard_before_success（第二个是开始匹配符，然后注释掉该 server）\n- wildcard_after_success（第三个是结尾匹配符，然后注释掉该 server）\n- regex_success（第四个是正则表达式，然后注释掉该 server）\n- default_server not found server!!（第五个是默认 server，因为前四个都注释了，所以只能走默认的 server）\n\n**结论**\n\n- No1：准确匹配 server_name\n\n- No2：通配符在开始时匹配 server_name 成功\n\n- No3：通配符在结束时匹配 server_name 成功\n\n- No4：正则表达式匹配 server_name 成功\n\n- No5：被默认的 default_server 处理，如果没有指定默认找第一个 server\n\n### location指令\n\n`location` 指令是用来设置请求的 URI。\n\n```nginx\nserver{\n\tlisten 80;\n\tserver_name localhost;\n\tlocation / {\n\t\n\t}\n\tlocation /abc {\n\t\n\t}\n\t...\n}\n```\n\n| 语法                                             | 默认值 | 位置             |\n| ------------------------------------------------ | ------ | ---------------- |\n| location [ = \\| ~ \\| ~* \\| ^~ \\| @ ] \\<uri>{...} | —      | server、location |\n\nuri 变量是待匹配的请求字符串，可以不包含正则表达式，也可以包含正则表达式，那么 Nginx 服务器在搜索匹配 location 的时候，是先使用不包含正则表达式进行匹配，找到一个匹配度最高的一个，然后在通过包含正则表达式的进行匹配，**如果能匹配到直接访问正则表达式的，匹配不到，就使用刚才匹配度最高（前缀最长的）的那个 location 来处理请求**。\n\n属性介绍:\n\n不带符号，要求必须以指定模式开头，但是不要求精确匹配\n\n```nginx\nserver {\n\tlisten 80;\n\tserver_name 127.0.0.1;\n\tlocation /abc {\n\t\tdefault_type text/plain;\n\t\treturn 200 \"access success\";\n\t}\n}\n\n# 以下访问都是正确的\nhttp://192.168.91.200/abc\nhttp://192.168.91.200/abc?p1=kele\nhttp://192.168.91.200/abc/\nhttp://192.168.91.200/abcdef\n```\n\n`=` 是用于不包含正则表达式的 uri，必须与指定的模式精确匹配\n\n```nginx\nserver {\n\tlisten 80;\n\tserver_name 127.0.0.1;\n\tlocation =/abc {\n\t\tdefault_type text/plain;\n\t\treturn 200 \"access success\";\n\t}\n}\n# 匹配成功\nhttp://192.168.91.200/abc\nhttp://192.168.91.200/abc?p1=TOM\n# 匹配失败\nhttp://192.168.91.200/abc/\nhttp://192.168.91.200/abcdef\n```\n\n`~` 是用于表示当前 uri 中包含了正则表达式，并且区分大小写\n\n`~*` 是用于表示当前 uri 中包含了正则表达式，但是是不区分大小写\n\n换句话说，**如果 uri 包含了正则表达式，需要用上述两个符号来标识**\n\n```nginx\n# 使用正则表达式，区分大小写\nserver {\n\tlisten 80;\n\tserver_name 127.0.0.1;\n\tlocation ~^/abc\\w$ {\n\t\tdefault_type text/plain;\n\t\treturn 200 \"access success\";\n\t}\n}\n\n# 使用正则表达式，不区分大小写\nserver {\n\tlisten 80;\n\tserver_name 127.0.0.1;\n\tlocation ~*^/abc\\w$ {\n\t\tdefault_type text/plain;\n\t\treturn 200 \"access success\";\n\t}\n}\n```\n\n`^~` 是用于不包含正则表达式的 uri，功能和不加符号的一致，唯一不同的是，如果请求匹配上了，那么就停止搜索其他模式了。\n\n```nginx\nserver {\n\tlisten 80;\n\tserver_name 127.0.0.1;\n\tlocation ^~/abc {\n\t\tdefault_type text/plain;\n\t\treturn 200 \"access success\";\n\t}\n}\n```\n\n`@` 前缀可以用来定义一个命名的 location,该 location 不处理正常的外部请求,一般用来当作标识供内部重定向使用。它们不能嵌套,也不能包含嵌套的 location。\n\n```nginx\nlocation /try {\n    try_files $uri $uri/ @name;\n}\n\nlocation /error {\n    error_page 404 = @name;\n    return 404;\n}\n\nlocation @name {\n    return 200 \"@name\";\n}\n```\n\n这时访问 `/try` 或者 `/error` 都会返回 `@name`。\n\n### root/alias指令\n\n+ `root` 指令是设置请求资源的根目录。默认值是 html。\n\n| 语法          | 默认值     | 位置                   |\n| ------------- | ---------- | ---------------------- |\n| root \\<path>; | root html; | http、server、location |\n\npath 是 Nginx 服务器接收到请求以后查找资源的根目录路径。\n\n+ `alias` 指令是用来更改 location 的 URI。\n\n| 语法           | 默认值 | 位置     |\n| -------------- | ------ | -------- |\n| alias \\<path>; | —      | location |\n\n- path 是修改后的根路径。\n\n**以上两个指令都可以来指定访问资源的路径，那么这两者之间的区别是什么？**\n\n> **举例说明**\n\n1. 在 `/usr/local/nginx/html` 目录下创建一个 images 目录,并在目录下放入一张图片 `mv.png` 图片。\n\n   然后进入配置文件，添加如下内容：\n\n```nginx\nlocation /images {\n    root /usr/local/nginx/html;\n}\n```\n\n访问图片的路径为：`http://192.168.91.200/images/mv.png`\n\n2. 如果把root改为alias\n\n```nginx\nlocation /images {\n    alias /usr/local/nginx/html;\n}\n```\n\n再次访问上述地址，页面会出现 404 的错误，查看错误日志会发现是因为地址不对，所以验证了：\n\n- root 的处理结果是：**root 路径 + location 路径**，location 路径包括匹配后面的请求，即包括 /mv.png\n\n  `/usr/local/nginx/html/images/mv.png`\n\n+ alias 的处理结果是：**使用 alias 路径替换 location 路径**，但是不会替换匹配后面的请求，即不会替换 /mv.png\n\n需要在 alias 后面路径改为：\n\n```nginx\nlocation /images {\n    alias /usr/local/nginx/html/images;\n}\n```\n\n3. 如果 location 路径是以 / 结尾,则 alias 也必须是以 / 结尾，root 没有要求。\n\n将上述配置修改为：\n\n```nginx\nlocation /images/ {\n    alias /usr/local/nginx/html/images;\n}\n```\n\n访问就会出问题，查看错误日志还是路径不对，所以需要把 alias 后面加上 /\n\n小结：\n\n- root 的处理结果是: root 路径 + location 路径\n- alias 的处理结果是:使用 alias 路径替换 location 路径\n- alias 是一个目录别名的定义，root 则是最上层目录的含义\n- 如果 location 路径是以 / 结尾,则 alias 也必须是以 / 结尾，root 没有要求\n  - **alias 不支持 location 的 =**\n\n这里再多言几句，alias 后指定的资源路径，Nginx 就会去这个路径下找资源，「忽略」location 本身的的请求，仅拼接 location 后面的请求。如果你想去拼接 location 本身，就用绝对路径（包括 location）的alias。\n\n### index指令\n\n`index` 指令是设置网站的默认首页。默认是 index.html。\n\n| 语法               | 默认值            | 位置                   |\n| ------------------ | ----------------- | ---------------------- |\n| index \\<file> ...; | index index.html; | http、server、location |\n\n`index` 后面可以跟多个设置，如果访问的时候没有指定具体访问的资源，则会从左往右依次进行查找，找到第一个为止。\n\n举例说明：\n\n```nginx\nlocation / {\n\troot /usr/local/nginx/html;\n\tindex index.html index.htm;\n}\n```\n\n访问该 location 的时候，可以通过 `http://ip:port/` 访问，地址后面如果不添加任何内容，则默认依次访问 index.html 和 index.htm，找到第一个来进行返回。\n\n### error_page指令\n\nerror_page 指令是设置网站的错误页面。\n\n| 语法                                            | 默认值 | 位置                          |\n| ----------------------------------------------- | ------ | ----------------------------- |\n| error_page \\<code> ...... [=[response]] \\<uri>; | —      | http、server、location ...... |\n\ncode 是响应码。\n\n**当出现对应的响应 code 后，如何来处理？**\n\n> **举例说明**\n\n1. 可以指定具体跳转的地址\n\n```nginx\nserver {\n\terror_page 404 http://www.frx.com;\n}\n```\n\n当页面产生 404 时，自动跳转到 `http://www.frx.com`\n\n2. 可以指定重定向地址\n\n```nginx\nserver{\n\terror_page 404 /50x.html;\n\terror_page 500 502 503 504 /50x.html;\n\tlocation =/50x.html {\n\t\troot html;\n\t}\n}\n```\n\n产生错误页面时，重定向到 /50x.html，然后触发 location，最终访问的是 html 目录下的 50x.html 页面\n\n3. 使用 location 的 @ 符合完成错误信息展示\n\n```nginx\nserver{\n\terror_page 404 @jump_to_error;\n\tlocation @jump_to_error {\n\t\tdefault_type text/plain;\n\t\treturn 404 'Not Found Page...';\n\t}\n}\n```\n\n可选项 `=[response]` 的作用是用来将相应代码更改为另外一个，如下：\n\n```nginx\nserver{\n\terror_page 404 =200 /50x.html;\n\tlocation =/50x.html {\n\t\troot html;\n\t}\n}\n```\n\n这样的话，当返回 404 找不到对应的资源的时候，在浏览器上可以看到，最终返回的状态码是 200 而不是 404，这块需要注意下，编写 error_page 后面的内容，404 后面需要加空格，200 前面不能加空格。\n\n## 静态资源优化配置\n\nNginx 对静态资源如何进行优化配置。这里从三个属性配置进行优化：\n\n```nginx\nsendfile on;\ntcp_nopush on;\ntcp_nodeplay on;\n```\n\n建议三个都开启。如果想知道为什么，请往下看。\n\n### sendﬁle\n\n该指令是用来开启高效的文件传输模式。默认关闭，建议开启。\n\n| 语法                 | 默认值      | 位置                          |\n| -------------------- | ----------- | ----------------------------- |\n| sendﬁle <on \\| off>; | sendﬁle oﬀ; | http、server、location ...... |\n\n请求静态资源的过程：客户端通过网络接口向服务端发送请求，操作系统将这些客户端的请求传递给服务器端应用程序，服务器端应用程序会处理这些请求，请求处理完成以后，操作系统还需要将处理得到的结果通过网络适配器传递回去。\n\n如：\n\n```nginx\nserver {\n\tlisten 80;\n\tserver_name localhost；\n\tlocation / {\n\t\troot html;\n\t\tindex index.html;\n\t}\n}\n```\n\n假设在 html 目录下有一个 welcome.html 页面，访问地址：`http://192.168.91.200/welcome.html`。\n\n流程如下：\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.24hrbukvg0lc.webp)\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.5l2efa1uqlo0.webp)\n\n### tcp_nopush\n\n该指令必须在 sendfile 打开的状态下才会生效，主要是用来提升网络包的传输「效率」。默认关闭。\n\n| 语法                    | 默认值         | 位置                   |\n| ----------------------- | -------------- | ---------------------- |\n| tcp_nopush <on \\| off>; | tcp_nopush oﬀ; | http、server、location |\n\n### tcp_nodelay\n\n该指令必须在 keep-alive 连接开启的情况下才生效，来提高网络包传输的「实时性」。默认开启。\n\n| 语法                     | 默认值          | 位置                   |\n| ------------------------ | --------------- | ---------------------- |\n| tcp_nodelay <on \\| off>; | tcp_nodelay on; | http、server、location |\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.1iu7wmocw0ao.webp)\n\n`tcp_nopush` 就像大巴车，等所有旅客占满了座位，才开始发车到景点（客户端），而 `tcp_nodelay`，上来一个旅客，就马上发车到景点客户端）。\n\n### 优化总结\n\n经过分析，『 tcp_nopush 』和『 tcp_nodelay 』看起来是「互斥的」，那么为什么要将这两个值都打开，这个大家需要知道的是在 Linux2.5.9 以后的版本中两者是可以兼容的，三个指令都开启的好处是，sendfile 可以开启高效的文件传输模式，『 tcp_nopush 』开启可以确保在发送到客户端之前数据包已经充分「填满」，这大大减少了网络开销，并加快了文件发送的速度。然后，当它到达最后一个可能因为没有「填满」而暂停的数据包时，Nginx 会忽略『 tcp_nopush 』参数， 然后，『 tcp_nodelay 』强制套接字发送数据。由此可知，『 tcp_nopush 』可以与『 tcp_nodelay 』一起设置，它比单独配置『 tcp_nodelay 』具有更强的性能。\n\n所以回归开头，我们可以使用如下配置来优化 Nginx 静态资源的处理：\n\n```nginx\n# 三个都开启\nsendfile on;\ntcp_nopush on;\ntcp_nodelay on;\n```\n\n## 静态资源压缩配置\n\n经过上述内容的优化，我们再次思考一个问题，假如在满足上述优化的前提下，我们传送一个 1M 的数据和一个 10M 的数据那个效率高？答案显而易见，**传输内容小，速度就会快**。那么问题又来了，同样的内容，如果把大小降下来，我们脑袋里面要蹦出一个词就是「压缩」，接下来，我们来学习 Nginx 的静态资源压缩模块。\n\n在 Nginx 的配置文件中可以通过配置 gzip 来对静态资源进行压缩，相关的指令可以配置在 http 块、server 块和 location 块中，Nginx 可以通过对这些指令进行解析和处理：\n\n- `ngx_http_gzip_module` 模块\n- `ngx_http_gzip_static_module` 模块\n- `ngx_http_gunzip_module` 模块\n\n接下来我们从以下内容进行学习：\n\n- Gzip 各模块支持的配置指令\n- Gzip 压缩功能的配置\n- Gzip 和 sendfile 的冲突解决\n- 浏览器不支持 Gzip 的解决方案\n\n### Gzip模块配置指令\n\n接下来所学习的指令都来自 `ngx_http_gzip_module` 模块，该模块会在 Nginx 安装的时候内置到 Nginx 的安装环境中，也就是说我们可以直接使用这些指令。\n\n- `gzip` 指令是用于开启或者关闭 Gzip 功能。默认关闭\n\n| 语法              | 默认值    | 位置                          |\n| ----------------- | --------- | ----------------------------- |\n| gzip <on \\| off>; | gzip off; | http、server、location ...... |\n\n注意：只有该指令为打开状态，下面的指令才有效果\n\n```nginx\nhttp{\n\tgzip on;\n}\n```\n\n+ `gzip_types` 指令可以根据响应页的 MIME 类型选择性地开启 Gzip 压缩功能。默认是 text/html\n\n| 语法                             | 默认值                | 位置                   |\n| -------------------------------- | --------------------- | ---------------------- |\n| gzip_types \\<mime-type> ...... ; | gzip_types text/html; | http、server、location |\n\n所选择的值可以从 mime.types 文件中进行查找，也可以使用 * 代表所有。\n\n```nginx\nhttp{\n\tgzip_types application/javascript;\n\t# * 代表所有\n\tgzip_types *\n}\n```\n\n+ `gzip_comp_level` 指令是用于设置 Gzip 压缩程度，级别从 1-9，1 表示要是程度最低，要是效率最高，9 刚好相反，压缩程度最高，但是效率最低、最费时间。默认值是 1\n\n| 语法                      | 默认值             | 位置                   |\n| ------------------------- | ------------------ | ---------------------- |\n| gzip_comp_level \\<level>; | gzip_comp_level 1; | http、server、location |\n\n```nginx\nhttp{\n\tgzip_comp_level 6;\n}\n```\n\n+ `gzip_vary` 指令是用于设置使用 Gzip 进行压缩发送是否携带『Vary:Accept-Encoding』头域的响应头部。主要是告诉接收方，所发送的数据经过了 Gzip 压缩处理。默认关闭\n\n| 语法                   | 默认值         | 位置                   |\n| ---------------------- | -------------- | ---------------------- |\n| gzip_vary <on \\| off>; | gzip_vary off; | http、server、location |\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.4bsq0xpu9s20.webp)\n\n+ `gzip_buffers` 指令是用于处理请求压缩的缓冲区数量和大小\n\n| 语法                            | 默认值                       | 位置                   |\n| ------------------------------- | ---------------------------- | ---------------------- |\n| gzip_buffers \\<number> \\<size>; | gzip_buffers 32 4k \\| 16 8k; | http、server、location |\n\n其中 number 是指定 Nginx 服务器向系统申请缓存空间个数，size 指的是每个缓存空间的大小。主要实现的是申请 number 个每个大小为 size 的内存空间。这个值的设定一般会和服务器的操作系统有关，所以建议此项不设置，使用默认值即可。\n\n```nginx\ngzip_buffers 4 16K;\t  # 缓存空间大小\n```\n\n+ `gzip_disable` 指令是针对不同种类客户端发起的请求，可以选择性地开启和关闭 Gzip 功能\n\n| 语法                           | 默认值 | 位置                   |\n| ------------------------------ | ------ | ---------------------- |\n| gzip_disable \\<regex> ...... ; | —      | http、server、location |\n\nregex 是根据客户端的浏览器标志(user-agent)来设置，支持使用正则表达式。指定的浏览器标志不使用 Gzip.该指令一般是用来排除一些明显不支持 Gzip 的浏览器。\n\n```nginx\ngzip_disable \"MSIE [1-6]\\.\";\n```\n\n`gzip_http_version` 指令是针对不同的 HTTP 协议版本，可以选择性地开启和关闭 Gzip 功能。默认是 1.1 版本\n\n| 语法                            | 默认值                 | 位置                   |\n| ------------------------------- | ---------------------- | ---------------------- |\n| gzip_http_version <1.0 \\| 1.1>; | gzip_http_version 1.1; | http、server、location |\n\n该指令是指定使用 Gzip 的 HTTP 最低版本，该指令一般采用默认值即可。\n\n- `gzip_min_length` 指令是针对传输数据的大小，可以选择性地开启和关闭 Gzip 功能\n\n| 语法                       | 默认值              | 位置                   |\n| -------------------------- | ------------------- | ---------------------- |\n| gzip_min_length \\<length>; | gzip_min_length 20; | http、server、location |\n\nNignx 计量大小的单位：bytes [字节] / kb [千字节] / M [兆]\n\n例如: 1024 / 10k | K / 10m | M\n\nGzip 压缩功能对大数据的压缩效果明显，但是如果要压缩的数据比较小的话，可能出现越压缩数据量越大的情况，因此我们需要根据响应内容的大小来决定是否使用 Gzip 功能，响应页面的大小可以通过头信息中的 `Content-Length` 来获取。但是如何使用了 Chunk 编码动态压缩，该指令将被忽略。建议设置为 1K 或以上。\n\n- `gzip_proxied` 指令设置是否对服务端返回的结果进行 Gzip 压缩\n\n| 语法                                                         | 默认值            | 位置                   |\n| ------------------------------------------------------------ | ----------------- | ---------------------- |\n| gzip_proxied <off \\| expired \\| no-cache \\| no-store \\| private \\| no_last_modified \\| no_etag \\| auth \\| any>; | gzip_proxied off; | http、server、location |\n\n- off：关闭 Nginx 服务器对后台服务器返回结果的 Gzip 压缩\n- expired：如果 header 头中包含 『Expires』头信息，启用压缩\n- no-cache：如果 header 头中包含 『Cache-Control:no-cache』头信息，启用压缩\n- no-store：如果 header 头中包含 『Cache-Control:no-store』头信息，启用压缩\n- private：如果 header 头中包含 『Cache-Control:private』头信息，启用压缩\n- no_last_modified：如果 header 头中不包含 『Last-Modified』头信息，启用压缩\n- no_etag：如果 header 头中不包含 『ETag』 头信息，启用压缩\n- auth：如果 header 头中包含 『Authorization』 头信息，启用压缩\n- any：无条件启用压缩\n\n### Gzip压缩功能配置模板\n\n```nginx\ngzip on;  \t\t\t   \t\t # 开启 Gzip 功能\ngzip_types *;\t\t   \t \t # 压缩源文件类型,根据具体的访问资源类型设定\ngzip_comp_level 6;\t   \t\t # Gzip 压缩级别\ngzip_min_length 1k;          # 进行压缩响应页面的最小长度，content-length\ngzip_buffers 4 16K;\t         # 缓存空间大小\ngzip_http_version 1.1;       # 指定压缩响应所需要的最低 HTTP 请求版本\ngzip_vary  on;\t\t         # 往头信息中添加压缩标识\ngzip_disable \"MSIE [1-6]\\.\"; # 对 IE6 以下的版本都不进行压缩\ngzip_proxied  off;           # Nginx 作为反向代理压缩服务端返回数据的条件\n```\n\n这些配置在很多地方可能都会用到，所以我们可以将这些内容抽取到一个配置文件中，然后通过 include 指令把配置文件再次加载到 nginx.conf 配置文件中，方法使用。\n\n创建压缩配置文件：`nginx_gzip.conf`，添加如下内容：\n\n```nginx\ngzip on;\ngzip_types *;\ngzip_comp_level 6;\ngzip_min_length 1k;\ngzip_buffers 4 16K;\ngzip_http_version 1.1;\ngzip_vary  on;\ngzip_disable \"MSIE [1-6]\\.\";\ngzip_proxied  off;\n```\n\n在 Nginx 核心配置文件 `nginx.conf` 进行引入，添加如下内容：\n\n```nginx\ninclude nginx_gzip.conf\n```\n\n### Gzip和sendfile共存问题\n\n前面在讲解 sendfile 的时候，提到过，开启 sendfile 以后，在读取磁盘上的静态资源文件的时候，可以减少拷贝的次数，可以不经过用户进程将静态文件通过网络设备发送出去，但是 Gzip 要想对资源压缩，是需要经过用户进程进行操作的。Nginx 设置了Gzip 之后，静态文件的 sendfile 就不起作用了。所以要考虑如何解决两个设置的共存问题。\n\n可以使用 `ngx_http_gzip_static_module` 模块的 `gzip_static` 指令来解决。\n\n### gzip_static指令\n\n`gzip_static` 指令用于在检查与访问资源同名的 .gz 文件时，response 中以 Gzip 相关的 header 返回 .gz 文件的内容。默认关闭。\n\n| 语法                               | 默认值           | 位置                   |\n| ---------------------------------- | ---------------- | ---------------------- |\n| gzip_static <on \\| off \\| always>; | gzip_static off; | http、server、location |\n\n```nginx\ngzip_static on;\n```\n\n在配置文件添加上述命令后，会报一个错误：`unknown directive \"gzip_static\"`，主要的原因是 Nginx 默认是没有添加 ngx_http_gzip_static_module 模块。如何来添加？\n\n### Nginx模块添加\n\n1. 查询当前 Nginx 的配置参数，即查看 `configure arguments` 的配置信息，拷贝出来\n\n```sh\nnginx -V\n\n# 拷贝 configure arguments 后面的数据\n```\n\n```nginx\n--prefix=/usr/local/nginx\n```\n\n2. 将 Nginx 安装目录下 sbin 目录中的 nginx 二进制文件进行更名备份\n\n```sh\ncd /usr/local/nginx/sbin\nmv nginx nginx.backup\n```\n\n3. 进入 Nginx 的安装目录\n\n```sh\ncd /root/nginx/core/nginx-1.21.6\n```\n\n4. 执行 make clean 清空之前编译的内容\n\n```sh\nmake clean\n```\n\n5. 使用 configure 来配置参数，添加 `ngx_http_gzip_static_module` 模块，记得加上第1步拷贝的配置信息\n\n```sh\n./configure --with-http_gzip_static_module  # 记得添加 configure arguments 后的数据\n```\n\n6. 使用 make 命令进行编译\n\n```sh\nmake\n```\n\n7. 将 objs 目录下的 nginx 二进制执行文件移动到 nginx 安装目录下的 sbin 目录中\n\n```sh\nmv /opt/nginx/core/nginx-1.21.6/objs/nginx /usr/local/nginx/sbin\n```\n\n如果不执行第（2）步进行备份，则该步骤会覆盖原来的 nginx 可执行文件\n\n8. 在源码目录下执行更新命令\n\n```sh\ncd /opt/nginx/core/nginx-1.21.6\nmake upgrade\n```\n\n### gzip_static测试\n\n准备好一个 jquery.js 文件，放在 html 目录下\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.576ef03x00c0.webp)\n\n1. 直接访问 `http://192.168.91.200/jquery.js`\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.2b8dhabn0cbo.webp)\n\n2. 使用 Gzip 命令进行压缩\n\n```sh\n# 进入 html 目录\ncd /usr/local/nginx/html\n\n# 压缩 js 文件\ngzip jquery.js\n```\n\n3. 再次访问 `http://192.168.91.200/jquery.js`\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.4ivj1d091pg.webp)\n\n可以看出 `Content-Length` 的大小已经变得非常小。\n\n## 静态资源缓存配置\n\n当浏览器请求 Nginx 服务器的资源后，我们可以让这些资源缓存在浏览器里，这样再一次请求相同的资源时，无需请求 Nginx 服务器，直接从浏览器的缓存里获取，减少 Nginx 服务器的压力。\n\n### 什么是缓存和Web缓存\n\n缓存（cache），原始意义是指访问速度比一般随机存取存储器（RAM）快的一种高速存储器，通常它不像系统主存那样使用 DRAM 技术，而使用昂贵但较快速的 SRAM 技术。缓存的设置是所有现代计算机系统发挥高性能的重要因素之一。\n\nWeb 缓存是指一个 Web 资源（如 html 页面，图片，js，数据等）存在于 Web 服务器和客户端（浏览器）之间的副本。缓存会根据进来的请求保存输出内容的副本；当下一个请求来到的时候，如果是相同的 URL，缓存会根据缓存机制决定是直接使用副本响应访问请求，还是向源服务器再次发送请求。比较常见的就是浏览器会缓存访问过网站的网页，当再次访问这个 URL 地址的时候，如果网页没有更新，就不会再次下载网页，而是直接使用本地缓存的网页。只有当网站明确标识资源已经更新，浏览器才会再次下载网页。\n\n### Web缓存的种类\n\n客户端缓存\n\n- 浏览器缓存\n\n服务端缓存\n\n- Nginx\n- Redis\n- Memcached 等\n\n### 为什么要用浏览器缓存\n\n- 成本最低的一种缓存实现\n- 减少网络带宽消耗\n- 降低服务器压力\n- 减少网络延迟，加快页面打开速度\n\n### 浏览器缓存执行流程\n\nHTTP 协议中和页面缓存相关的字段，我们先来认识下：\n\n| header        | 说明                                          |\n| ------------- | --------------------------------------------- |\n| Expires       | 缓存过期的日期和时间                          |\n| Cache-Control | 设置和缓存相关的配置信息                      |\n| Last-Modified | 请求资源最后修改时间                          |\n| ETag          | 请求变量的实体标签的当前值，比如文件的 MD5 值 |\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.209c4krjzgf4.webp)\n\n1. 用户首次通过浏览器发送请求到服务端获取数据，客户端是没有对应的缓存，所以需要发送 request 请求来获取数据；\n2. 服务端接收到请求后，获取服务端的数据及服务端缓存的允许后，返回 200 的成功状态码并且在响应头上附上对应资源以及缓存信息；\n3. 当用户再次访问相同资源的时候，客户端会在浏览器的缓存目录中查找是否存在响应的缓存文件；\n4. 如果没有找到对应的缓存文件，则走第2步；\n5. 如果有缓存文件，接下来对缓存文件是否过期进行判断，过期的判断标准是(Expires)；\n6. 如果没有过期，则直接从本地缓存中返回数据进行展示（强缓存）；\n7. 如果 Expires 过期，接下来需要判断缓存文件是否发生过变化；\n8. 判断的标准有两个（都要判断），一个是 ETag(Entity Tag)，一个是 Last-Modified；\n9. 判断结果是未发生变化，则服务端返回 304，直接从缓存文件中获取数据（弱缓存）；\n10. 如果判断是发生了变化，重新从服务端获取数据，并根据缓存协商(服务端所设置的是否需要进行缓存数据的设置)来进行数据缓存。\n\n### 浏览器缓存相关指令\n\nNginx 需要进行缓存相关设置，就需要用到如下的指令。\n\n#### expires指令\n\n该指令用来控制页面缓存的作用。可以通过该指令控制 HTTP 应答中的『Expires』和『Cache-Control』\n\n| 语法                                                       | 默认值       | 位置                   |\n| ---------------------------------------------------------- | ------------ | ---------------------- |\n| expires [modified] \\<time>; expires <epoch \\| max \\| off>; | expires off; | http、server、location |\n\n- time：可以整数也可以是负数，指定过期时间，单位为 s（秒）。如果是负数，Cache-Control 则为 no-cache，如果为整数或 0，则 Cache-Control 的值为 max-age=time\n\n- epoch：指定 Expires 的值为『'1 January,1970,00:00:01 GMT'』，即 1970-01-01 00:00:00 ，Cache-Control 的值 no-cache\n\n  因为 Expires（缓存过期时间）是 1970 年，所以不缓存。\n\n- max：指定 Expires 的值为『'31 December2037 23:59:59GMT' 』，即(2037-12-31 23:59:59，Cache-Control 的值为 10 年\n\n  因为 Expires（缓存过期时间）是 2037 年，虽然还有 16 年过期，但是最大只能缓存 10 年。\n\n- off：默认不缓存\n\n> **例子 1**\n\n在配置文件添加如下内容：\n\n```nginx\nlocation ~ .*\\.(html|js|css|png|jpg|jpeg|gif)$ {\n    # ...\n    expires max\n    # ...\n}\n```\n\n发送请求：`http://192.168.91.200/jquery.js`\n\n查看开发者工具(F12)的 NetWork，如图：\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.4x3yczk58lk0.webp)\n\n315360000 折算下来正好是 10 年。\n\n> **其他格式**\n\n```nginx\nexpires 30s;  # 表示把数据缓存 30 秒\n\nexpires 30m;  # 表示把数据缓存 30 分\n\nexpires 10h;  # 表示把数据缓存 10 小时\n\nexpires 1d;   # 表示把数据缓存 1 天\n```\n\n#### add_header指令\n\nadd_header 指令是用来添加指定的响应头和响应值。\n\nadd_header 是响应体的指令，不是请求时的指令（比如 expires ），并且 add_header 也有和 expires 一样的功能。\n\n如果 expires 和 add_header 同时开启的情况下，则 add_header 优于 expires 生效。\n\n| 语法                                  | 默认值 | 位置                              |\n| ------------------------------------- | ------ | --------------------------------- |\n| add_header \\<name> \\<value> [always]; | —      | location > server > http > ...... |\n\nalways 可选，代表总是添加。\n\nCache-Control 作为响应头信息，可以在 Nginx 配置文件设置如下缓存响应指令：\n\n```nginx\nadd_header Cache-control must-revalidate;\nadd_header Cache-control no-cache;\nadd_header Cache-control no-store;\nadd_header Cache-control no-transform;\nadd_header Cache-control public;\nadd_header Cache-control private;\nadd_header Cache-control proxy-revalidate;\nadd_header Cache-Control max-age=<seconds>;  # 秒\nadd_header Cache-control s-maxage=<seconds>; # 秒\n```\n\n描述：\n\n| 指令             | 说明                                                         |\n| ---------------- | ------------------------------------------------------------ |\n| must-revalidate  | 可缓存但必须再向源服务器进行确认                             |\n| no-cache         | 数据内容不能被缓存，每次请求都重新访问服务器，若有 max-age，则缓存期间不访问服务器 |\n| no-store         | 不缓存请求或响应的任何内容，暂存也不可以(临时文件夹中不能暂存该资源) |\n| no-transform     | 代理不可更改媒体类型                                         |\n| public           | 可以被任何缓存区缓存，如: 浏览器、服务器、代理服务器等       |\n| private（默认）  | 只能在浏览器中缓存，只有在第一次请求的时候才访问服务器，若有 max-age，则缓存期间不访问服务器 |\n| proxy-revalidate | 要求中间缓存服务器对缓存的响应有效性再进行确认               |\n| max-age=<秒>     | 过期时间，即以秒为单位的缓存时间                             |\n| s-maxage=<秒>    | 公共缓存服务器响应的最大 Age 值                              |\n\n值得注意的是：\n\n- 设置了 no-cache 或者 private 后，打开新窗口时会重新访问服务器。若设置 max-age，则缓存期间不访问服务器\n- 设置 private 和正数的 max-age 时，后退时候不会访问服务器\n- 设置 no-cache 和正数的 max-age 时，后退时会访问服务器\n\n### Nginx服务端缓存\n\n在 Web 缓存的种类，我们提到了 Ngixn 服务端缓存，而上面仅仅介绍了在浏览器进行缓存，而因为 Ngixn 服务端缓存的内容比较多，所以前往 **Nginx - 缓存集成** 进行学习。\n\n","slug":"Nginx_Static_resource_deployment","published":1,"updated":"2022-11-10T06:19:46.460Z","_id":"claajxdl5007ea8vwxcux35qn","comments":1,"layout":"post","photos":[],"link":"","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"Nginx-静态资源部署\"><a href=\"#Nginx-静态资源部署\" class=\"headerlink\" title=\"Nginx 静态资源部署\"></a>Nginx 静态资源部署</h1><p><strong>引言</strong></p>\n<p>静态资源如何部署？本内容带你了解静态资源相关的操作和内容。</p>\n<p>静态资源指令配置、静态资源优化配置、静态资源压缩配置、静态资源缓存配置。</p>\n<h2 id=\"Nginx静态资源概述\"><a href=\"#Nginx静态资源概述\" class=\"headerlink\" title=\"Nginx静态资源概述\"></a>Nginx静态资源概述</h2><p>上网去搜索访问资源对于我们来说并不陌生，通过浏览器发送一个 HTTP 请求实现从客户端发送请求到服务器端获取所需要内容后并把内容回显展示在页面的一个过程。这个时候，我们所请求的内容就分为两种类型，一类是静态资源、一类是动态资源。</p>\n<p>静态资源即指在服务器端真实存在并且能直接拿来展示的一些文件，比如常见的 html 页面、css 文件、js 文件、图片、视频等资源；</p>\n<p>动态资源即指在服务器端真实存在但是要想获取需要经过一定的业务逻辑处理，根据不同的条件展示在页面不同这 一部分内容，比如说报表数据展示、根据当前登录用户展示相关具体数据等资源；</p>\n<p>Nginx 处理静态资源的内容，我们需要考虑下面这几个问题：</p>\n<ul>\n<li>静态资源的配置指令</li>\n<li>静态资源的配置优化</li>\n<li>静态资源的压缩配置指令</li>\n<li>静态资源的缓存处理</li>\n<li>静态资源的访问控制，包括跨域问题和防盗链问题</li>\n</ul>\n<h2 id=\"静态资源指令配置\"><a href=\"#静态资源指令配置\" class=\"headerlink\" title=\"静态资源指令配置\"></a>静态资源指令配置</h2><h3 id=\"listen指令\"><a href=\"#listen指令\" class=\"headerlink\" title=\"listen指令\"></a>listen指令</h3><p>该指令是用来配置监听端口。默认监听 80（root 启动 Nginx） 和 8000（非 root 启动 Nginx） 端口。</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>listen &lt;address&gt;[:port] [default_server] …… ;<br> listen &lt;port&gt; [default_server] …… ;</td>\n<td>listen *:80 | *:8000</td>\n<td>server</td>\n</tr>\n</tbody></table>\n<p><code>listen</code> 指令的设置比较灵活，我们通过几个例子来把常用的设置方式熟悉下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen 127.0.0.1:8000; <span class=\"comment\"># listen localhost:8000 监听指定的IP和端口</span></span><br><span class=\"line\">listen 127.0.0.1;\t<span class=\"comment\"># 监听指定IP的所有端口</span></span><br><span class=\"line\">listen 8000;\t<span class=\"comment\"># 监听指定端口上的连接</span></span><br><span class=\"line\">listen *:8000;\t<span class=\"comment\"># 监听指定端口上的连接</span></span><br></pre></td></tr></table></figure>\n\n<p><code>default_server</code> 属性是标识符，用来将此虚拟主机设置成默认主机。所谓的默认主机指的是如果没有匹配到对应的 <code>address:port</code>，则会执行默认的 server。如果不指定该标识符，又没有匹配到对应的 <code>address:port</code> 时，默认使用的是第一个 server，所以第一个 server 要好好设置，建议第一个 server 就加上 <code>default_server</code>。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">8080</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> <span class=\"number\">127.0.0.1</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span> html;</span><br><span class=\"line\">\t\t<span class=\"attribute\">index</span> index.html;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">8080</span> default_server;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> localhost;</span><br><span class=\"line\">\t<span class=\"attribute\">default_type</span> text/plain;</span><br><span class=\"line\">\t<span class=\"attribute\">return</span> <span class=\"number\">444</span> <span class=\"string\">'This is a error request'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时访问 8080 端口，它会访问第二个 server，如果第二个 server 去掉 <code>default_server</code> ，则默认访问第一个 server。</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220730/image.2e5c4uo1ghlw.webp\" alt=\"image\"></p>\n<h3 id=\"server-name指令\"><a href=\"#server-name指令\" class=\"headerlink\" title=\"server_name指令\"></a>server_name指令</h3><p>该指令用来设置虚拟主机服务名称。默认为空。</p>\n<p>比如 127.0.0.1、localhost、域名[<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a> | <a href=\"http://www.jd.com]。\" target=\"_blank\" rel=\"noopener\">www.jd.com]。</a></p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>server_name &lt;name&gt; …… ;</td>\n<td>server_name “”;</td>\n<td>server</td>\n</tr>\n</tbody></table>\n<ul>\n<li>name 可以提供多个中间用空格分隔。</li>\n</ul>\n<p>关于 server_name 的配置方式有三种，分别是：</p>\n<ul>\n<li>精确匹配</li>\n<li>通配符匹配</li>\n<li>正则表达式匹配</li>\n</ul>\n<blockquote>\n<p><strong>配置方式一：精确匹配</strong></p>\n</blockquote>\n<p>如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> www.frx.com www.bing.com;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时以 <code>www.frx.com</code> 或者 <code>www.bing.com</code> 域名进行访问，就会跳转到 Nginx 的欢迎页面，前提是你需要拥有该域名，并且该域名和 Nginx 所在的系统 IP 进行绑定。</p>\n<p>所以我可以利用 hosts 文件进行「模拟」域名。</p>\n<blockquote>\n<p>补充小知识点</p>\n</blockquote>\n<p>hosts 是一个没有扩展名的系统文件，可以用记事本等工具打开，其作用就是将一些常用的网址域名与其对应的IP地址建立一个关联「数据库」，当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从 hosts 文件中寻找对应的IP地址，一旦找到，系统会立即打开对应网页，如果没有找到，则系统会再将网址提交 DNS 域名解析服务器进行 IP 地址的解析。</p>\n<p>hosts 文件不同系统的位置：</p>\n<ul>\n<li>在 windows 的位置：C:\\Windows\\System32\\drivers\\etc</li>\n<li>在 centos 的位置：/etc/hosts</li>\n</ul>\n<p>因为域名是要收取一定的费用，所以我们可以使用修改 hosts 文件来制作一些虚拟域名来使用。需要修改 <code>/etc/hosts</code> 文件来添加</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入 hosts 文件</span></span><br><span class=\"line\">vim /etc/hosts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加内容</span></span><br><span class=\"line\">127.0.0.1 www.frx.com</span><br><span class=\"line\">127.0.0.1 www.bing.com</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>访问测试</li>\n</ul>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220730/image.3nbv3p1703y0.webp\" alt=\"image\"></p>\n<blockquote>\n<p> <strong>配置方式二：使用通配符配置</strong></p>\n</blockquote>\n<p>server_name 指令支持通配符 *，但需要注意的是通配符不能出现在域名的中间，只能出现在首段或尾段，如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>  <span class=\"regexp\">*.frx.com</span>\t<span class=\"regexp\">www.frx.*</span>;</span><br><span class=\"line\">\t<span class=\"comment\"># www.frx.cn abc.frx.cn www.bing.cn www.frx.com</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面的配置就会报错，因为 * 不能出现在域名的中间和与其他字符串联使用</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>  <span class=\"regexp\">www.*</span>.cn www.frx.c*</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>  .frx.com</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>.frx.com</code> 相当于 <code>*..frx.com</code> + <code>frx.com</code></p>\n<blockquote>\n<p><strong>配置三：使用正则表达式配置</strong></p>\n</blockquote>\n<p>server_name 指令可以使用正则表达式，并且使用 <code>~</code> 作为正则表达式字符串的开始标记。</p>\n<p>常见的正则表达式：</p>\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>^</td>\n<td>匹配搜索字符串开始位置</td>\n</tr>\n<tr>\n<td>$</td>\n<td>匹配搜索字符串结束位置</td>\n</tr>\n<tr>\n<td>.</td>\n<td>匹配除换行符 \\n 之外的任何单个字符</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>转义字符，将下一个字符标记为特殊字符</td>\n</tr>\n<tr>\n<td>[xyz]</td>\n<td>字符集，与任意一个指定字符匹配</td>\n</tr>\n<tr>\n<td>[a-z]</td>\n<td>字符范围，匹配指定范围内的任何字符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>与以下任意字符匹配 A-Z a-z 0-9 和下划线,等效于[A-Za-z0-9_]</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>数字字符匹配，等效于[0-9]</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>正好匹配 n 次</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>至少匹配 n 次</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>匹配至少 n 次至多 m 次</td>\n</tr>\n<tr>\n<td>*</td>\n<td>零次或多次，等效于{0,}</td>\n</tr>\n<tr>\n<td>+</td>\n<td>一次或多次，等效于{1,}</td>\n</tr>\n<tr>\n<td>?</td>\n<td>零次或一次，等效于{0,1}</td>\n</tr>\n</tbody></table>\n<p>配置如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> ~^www\\.(\\w+)\\.com$;</span><br><span class=\"line\">    <span class=\"attribute\">default_type</span> text/plain;</span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"variable\">$1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意 ~ 后面不能加空格</strong>。括号代表可以在 Ngxin 配置文件内获取其中的值，如上方的 (\\w+) 的内容可以用 $1 获取到参数，如果有多个括号，依次使用 $2 $3 …… 获取。</p>\n<p>比如现在访问 <code>http://www.frx.com</code>，则返回 frx 到页面上，因为frx 被放在 $1 处：<code>return 200 frx</code>。</p>\n<p>⚠ 这里进行说明：server_name 配置了 localhost 和配置 IP 或者域名的区别</p>\n<p>localhost 是「虚拟 IP」，如果不是本机访问，而是外界访问，那么这个就是无效的，但是为什么学习阶段的时候都不改呢，因为当 Nginx 没有匹配到指定的 <code>server_name</code>，默认找到第一个 server 块，而 Nginx 默认的第一个 server 块就是 localhost，哪怕你把 localhost 改为其他的，如 hello，它也能访问。只是因为在匹配不到的情况下，默认是第一个 service 块，哪怕它确实和访问的 IP 不匹配。</p>\n<p>IP 如果和域名进行了绑定，那么在 <code>server_name</code> 中，两者都可以填写，填了域名，最后也是找到 IP，只是因为域名好记住。</p>\n<p>知道了区别，在生产环境上，可以给个指定的错误页面。如果匹配不上，则返回友好的提示，如第一个 server 块：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span> default_server;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> _;    <span class=\"comment\"># 匹配不上的时候，也可以填写 localhost</span></span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"string\">\"&lt;h1&gt;不好意思，匹配不到！\"</span>;</span><br><span class=\"line\">    <span class=\"comment\"># return 403;   # 也可以直接返回错误码</span></span><br><span class=\"line\">    <span class=\"comment\"># </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> www.frxcat.fun;    <span class=\"comment\"># 匹配域名访问</span></span><br><span class=\"line\">    <span class=\"comment\"># ......</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码块只允许域名访问，而不允许 IP 访问，避免其他人把未备案的域名解析到自己的服务器 IP。</p>\n<p>当然你也可以不设置错误页面。因为 Nginx 匹配不上时，直接返回它的欢迎界面。</p>\n<h3 id=\"匹配执行顺序\"><a href=\"#匹配执行顺序\" class=\"headerlink\" title=\"匹配执行顺序\"></a>匹配执行顺序</h3><p>由于 server_name 指令支持通配符和正则表达式，因此在包含多个虚拟主机的配置文件中，可能会出现一个名称被多个虚拟主机的 server_name 匹配成功，当遇到这种情况，当前的请求交给谁来处理呢？如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> ~^www\\.\\w+\\.com$;</span><br><span class=\"line\">\t<span class=\"attribute\">default_type</span> text/plain;</span><br><span class=\"line\">\t<span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">'regex_success'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> <span class=\"regexp\">www.frx.*</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">default_type</span> text/plain;</span><br><span class=\"line\">\t<span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">'wildcard_after_success'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> <span class=\"regexp\">*.frx.com</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">default_type</span> text/plain;</span><br><span class=\"line\">\t<span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">'wildcard_before_success'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> www.frx.com;</span><br><span class=\"line\">\t<span class=\"attribute\">default_type</span> text/plain;</span><br><span class=\"line\">\t<span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">'exact_success'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span> default_server;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> _;</span><br><span class=\"line\">\t<span class=\"attribute\">default_type</span> text/plain;</span><br><span class=\"line\">\t<span class=\"attribute\">return</span> <span class=\"number\">444</span> <span class=\"string\">'default_server not found server'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>访问 <code>http://www.kele.com</code> 的优先级：（访问完后请注释掉处理这个请求的 server）</p>\n<ul>\n<li>exact_success（第一个是精确匹配，然后注释掉该 server）</li>\n<li>wildcard_before_success（第二个是开始匹配符，然后注释掉该 server）</li>\n<li>wildcard_after_success（第三个是结尾匹配符，然后注释掉该 server）</li>\n<li>regex_success（第四个是正则表达式，然后注释掉该 server）</li>\n<li>default_server not found server!!（第五个是默认 server，因为前四个都注释了，所以只能走默认的 server）</li>\n</ul>\n<p><strong>结论</strong></p>\n<ul>\n<li><p>No1：准确匹配 server_name</p>\n</li>\n<li><p>No2：通配符在开始时匹配 server_name 成功</p>\n</li>\n<li><p>No3：通配符在结束时匹配 server_name 成功</p>\n</li>\n<li><p>No4：正则表达式匹配 server_name 成功</p>\n</li>\n<li><p>No5：被默认的 default_server 处理，如果没有指定默认找第一个 server</p>\n</li>\n</ul>\n<h3 id=\"location指令\"><a href=\"#location指令\" class=\"headerlink\" title=\"location指令\"></a>location指令</h3><p><code>location</code> 指令是用来设置请求的 URI。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> localhost;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> /abc &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>location [ = | ~ | <del>* | ^</del> | @ ] &lt;uri&gt;{…}</td>\n<td>—</td>\n<td>server、location</td>\n</tr>\n</tbody></table>\n<p>uri 变量是待匹配的请求字符串，可以不包含正则表达式，也可以包含正则表达式，那么 Nginx 服务器在搜索匹配 location 的时候，是先使用不包含正则表达式进行匹配，找到一个匹配度最高的一个，然后在通过包含正则表达式的进行匹配，<strong>如果能匹配到直接访问正则表达式的，匹配不到，就使用刚才匹配度最高（前缀最长的）的那个 location 来处理请求</strong>。</p>\n<p>属性介绍:</p>\n<p>不带符号，要求必须以指定模式开头，但是不要求精确匹配</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> <span class=\"number\">127.0.0.1</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> /abc &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">default_type</span> text/plain;</span><br><span class=\"line\">\t\t<span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">\"access success\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以下访问都是正确的</span></span><br><span class=\"line\">http://192.168.91.200/abc</span><br><span class=\"line\">http://192.168.91.200/abc?p1=kele</span><br><span class=\"line\">http://192.168.91.200/abc/</span><br><span class=\"line\">http://192.168.91.200/abcdef</span><br></pre></td></tr></table></figure>\n\n<p><code>=</code> 是用于不包含正则表达式的 uri，必须与指定的模式精确匹配</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> <span class=\"number\">127.0.0.1</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> =/abc &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">default_type</span> text/plain;</span><br><span class=\"line\">\t\t<span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">\"access success\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 匹配成功</span></span><br><span class=\"line\">http://192.168.91.200/abc</span><br><span class=\"line\">http://192.168.91.200/abc?p1=TOM</span><br><span class=\"line\"><span class=\"comment\"># 匹配失败</span></span><br><span class=\"line\">http://192.168.91.200/abc/</span><br><span class=\"line\">http://192.168.91.200/abcdef</span><br></pre></td></tr></table></figure>\n\n<p><code>~</code> 是用于表示当前 uri 中包含了正则表达式，并且区分大小写</p>\n<p><code>~*</code> 是用于表示当前 uri 中包含了正则表达式，但是是不区分大小写</p>\n<p>换句话说，<strong>如果 uri 包含了正则表达式，需要用上述两个符号来标识</strong></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用正则表达式，区分大小写</span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> <span class=\"number\">127.0.0.1</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> ~^/abc\\w$ &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">default_type</span> text/plain;</span><br><span class=\"line\">\t\t<span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">\"access success\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用正则表达式，不区分大小写</span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> <span class=\"number\">127.0.0.1</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> ~*^/abc\\w$ &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">default_type</span> text/plain;</span><br><span class=\"line\">\t\t<span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">\"access success\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>^~</code> 是用于不包含正则表达式的 uri，功能和不加符号的一致，唯一不同的是，如果请求匹配上了，那么就停止搜索其他模式了。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> <span class=\"number\">127.0.0.1</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span><span class=\"regexp\"> ^~/abc</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">default_type</span> text/plain;</span><br><span class=\"line\">\t\t<span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">\"access success\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>@</code> 前缀可以用来定义一个命名的 location,该 location 不处理正常的外部请求,一般用来当作标识供内部重定向使用。它们不能嵌套,也不能包含嵌套的 location。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> /try &#123;</span><br><span class=\"line\">    <span class=\"attribute\">try_files</span> <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ <span class=\"variable\">@name</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">location</span> /error &#123;</span><br><span class=\"line\">    <span class=\"attribute\">error_page</span> <span class=\"number\">404</span> = <span class=\"variable\">@name</span>;</span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">404</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">location</span> <span class=\"variable\">@name</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">\"<span class=\"variable\">@name</span>\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时访问 <code>/try</code> 或者 <code>/error</code> 都会返回 <code>@name</code>。</p>\n<h3 id=\"root-alias指令\"><a href=\"#root-alias指令\" class=\"headerlink\" title=\"root/alias指令\"></a>root/alias指令</h3><ul>\n<li><code>root</code> 指令是设置请求资源的根目录。默认值是 html。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>root &lt;path&gt;;</td>\n<td>root html;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<p>path 是 Nginx 服务器接收到请求以后查找资源的根目录路径。</p>\n<ul>\n<li><code>alias</code> 指令是用来更改 location 的 URI。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>alias &lt;path&gt;;</td>\n<td>—</td>\n<td>location</td>\n</tr>\n</tbody></table>\n<ul>\n<li>path 是修改后的根路径。</li>\n</ul>\n<p><strong>以上两个指令都可以来指定访问资源的路径，那么这两者之间的区别是什么？</strong></p>\n<blockquote>\n<p><strong>举例说明</strong></p>\n</blockquote>\n<ol>\n<li><p>在 <code>/usr/local/nginx/html</code> 目录下创建一个 images 目录,并在目录下放入一张图片 <code>mv.png</code> 图片。</p>\n<p>然后进入配置文件，添加如下内容：</p>\n</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> /images &#123;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /usr/local/nginx/html;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>访问图片的路径为：<code>http://192.168.91.200/images/mv.png</code></p>\n<ol start=\"2\">\n<li>如果把root改为alias</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> /images &#123;</span><br><span class=\"line\">    <span class=\"attribute\">alias</span> /usr/local/nginx/html;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再次访问上述地址，页面会出现 404 的错误，查看错误日志会发现是因为地址不对，所以验证了：</p>\n<ul>\n<li><p>root 的处理结果是：<strong>root 路径 + location 路径</strong>，location 路径包括匹配后面的请求，即包括 /mv.png</p>\n<p><code>/usr/local/nginx/html/images/mv.png</code></p>\n</li>\n</ul>\n<ul>\n<li>alias 的处理结果是：<strong>使用 alias 路径替换 location 路径</strong>，但是不会替换匹配后面的请求，即不会替换 /mv.png</li>\n</ul>\n<p>需要在 alias 后面路径改为：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> /images &#123;</span><br><span class=\"line\">    <span class=\"attribute\">alias</span> /usr/local/nginx/html/images;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>如果 location 路径是以 / 结尾,则 alias 也必须是以 / 结尾，root 没有要求。</li>\n</ol>\n<p>将上述配置修改为：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> /images/ &#123;</span><br><span class=\"line\">    <span class=\"attribute\">alias</span> /usr/local/nginx/html/images;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>访问就会出问题，查看错误日志还是路径不对，所以需要把 alias 后面加上 /</p>\n<p>小结：</p>\n<ul>\n<li>root 的处理结果是: root 路径 + location 路径</li>\n<li>alias 的处理结果是:使用 alias 路径替换 location 路径</li>\n<li>alias 是一个目录别名的定义，root 则是最上层目录的含义</li>\n<li>如果 location 路径是以 / 结尾,则 alias 也必须是以 / 结尾，root 没有要求<ul>\n<li><strong>alias 不支持 location 的 =</strong></li>\n</ul>\n</li>\n</ul>\n<p>这里再多言几句，alias 后指定的资源路径，Nginx 就会去这个路径下找资源，「忽略」location 本身的的请求，仅拼接 location 后面的请求。如果你想去拼接 location 本身，就用绝对路径（包括 location）的alias。</p>\n<h3 id=\"index指令\"><a href=\"#index指令\" class=\"headerlink\" title=\"index指令\"></a>index指令</h3><p><code>index</code> 指令是设置网站的默认首页。默认是 index.html。</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>index &lt;file&gt; …;</td>\n<td>index index.html;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<p><code>index</code> 后面可以跟多个设置，如果访问的时候没有指定具体访问的资源，则会从左往右依次进行查找，找到第一个为止。</p>\n<p>举例说明：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">root</span> /usr/local/nginx/html;</span><br><span class=\"line\">\t<span class=\"attribute\">index</span> index.html index.htm;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>访问该 location 的时候，可以通过 <code>http://ip:port/</code> 访问，地址后面如果不添加任何内容，则默认依次访问 index.html 和 index.htm，找到第一个来进行返回。</p>\n<h3 id=\"error-page指令\"><a href=\"#error-page指令\" class=\"headerlink\" title=\"error_page指令\"></a>error_page指令</h3><p>error_page 指令是设置网站的错误页面。</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>error_page &lt;code&gt; …… [=[response]] &lt;uri&gt;;</td>\n<td>—</td>\n<td>http、server、location ……</td>\n</tr>\n</tbody></table>\n<p>code 是响应码。</p>\n<p><strong>当出现对应的响应 code 后，如何来处理？</strong></p>\n<blockquote>\n<p><strong>举例说明</strong></p>\n</blockquote>\n<ol>\n<li>可以指定具体跳转的地址</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">error_page</span> <span class=\"number\">404</span> http://www.frx.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当页面产生 404 时，自动跳转到 <code>http://www.frx.com</code></p>\n<ol start=\"2\">\n<li>可以指定重定向地址</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">error_page</span> <span class=\"number\">404</span> /50x.html;</span><br><span class=\"line\">\t<span class=\"attribute\">error_page</span> <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span> /50x.html;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> =/50x.html &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span> html;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>产生错误页面时，重定向到 /50x.html，然后触发 location，最终访问的是 html 目录下的 50x.html 页面</p>\n<ol start=\"3\">\n<li>使用 location 的 @ 符合完成错误信息展示</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">error_page</span> <span class=\"number\">404</span> <span class=\"variable\">@jump_to_error</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> <span class=\"variable\">@jump_to_error</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">default_type</span> text/plain;</span><br><span class=\"line\">\t\t<span class=\"attribute\">return</span> <span class=\"number\">404</span> <span class=\"string\">'Not Found Page...'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可选项 <code>=[response]</code> 的作用是用来将相应代码更改为另外一个，如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">error_page</span> <span class=\"number\">404</span> =<span class=\"number\">200</span> /50x.html;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> =/50x.html &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span> html;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样的话，当返回 404 找不到对应的资源的时候，在浏览器上可以看到，最终返回的状态码是 200 而不是 404，这块需要注意下，编写 error_page 后面的内容，404 后面需要加空格，200 前面不能加空格。</p>\n<h2 id=\"静态资源优化配置\"><a href=\"#静态资源优化配置\" class=\"headerlink\" title=\"静态资源优化配置\"></a>静态资源优化配置</h2><p>Nginx 对静态资源如何进行优化配置。这里从三个属性配置进行优化：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">sendfile</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"><span class=\"attribute\">tcp_nopush</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"><span class=\"attribute\">tcp_nodeplay</span> <span class=\"literal\">on</span>;</span><br></pre></td></tr></table></figure>\n\n<p>建议三个都开启。如果想知道为什么，请往下看。</p>\n<h3 id=\"sendﬁle\"><a href=\"#sendﬁle\" class=\"headerlink\" title=\"sendﬁle\"></a>sendﬁle</h3><p>该指令是用来开启高效的文件传输模式。默认关闭，建议开启。</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sendﬁle &lt;on | off&gt;;</td>\n<td>sendﬁle oﬀ;</td>\n<td>http、server、location ……</td>\n</tr>\n</tbody></table>\n<p>请求静态资源的过程：客户端通过网络接口向服务端发送请求，操作系统将这些客户端的请求传递给服务器端应用程序，服务器端应用程序会处理这些请求，请求处理完成以后，操作系统还需要将处理得到的结果通过网络适配器传递回去。</p>\n<p>如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> localhost；</span><br><span class=\"line\">\tlocation / &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span> html;</span><br><span class=\"line\">\t\t<span class=\"attribute\">index</span> index.html;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>假设在 html 目录下有一个 welcome.html 页面，访问地址：<code>http://192.168.91.200/welcome.html</code>。</p>\n<p>流程如下：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.24hrbukvg0lc.webp\" alt=\"image\"></p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.5l2efa1uqlo0.webp\" alt=\"image\"></p>\n<h3 id=\"tcp-nopush\"><a href=\"#tcp-nopush\" class=\"headerlink\" title=\"tcp_nopush\"></a>tcp_nopush</h3><p>该指令必须在 sendfile 打开的状态下才会生效，主要是用来提升网络包的传输「效率」。默认关闭。</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>tcp_nopush &lt;on | off&gt;;</td>\n<td>tcp_nopush oﬀ;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<h3 id=\"tcp-nodelay\"><a href=\"#tcp-nodelay\" class=\"headerlink\" title=\"tcp_nodelay\"></a>tcp_nodelay</h3><p>该指令必须在 keep-alive 连接开启的情况下才生效，来提高网络包传输的「实时性」。默认开启。</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>tcp_nodelay &lt;on | off&gt;;</td>\n<td>tcp_nodelay on;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.1iu7wmocw0ao.webp\" alt=\"image\"></p>\n<p><code>tcp_nopush</code> 就像大巴车，等所有旅客占满了座位，才开始发车到景点（客户端），而 <code>tcp_nodelay</code>，上来一个旅客，就马上发车到景点客户端）。</p>\n<h3 id=\"优化总结\"><a href=\"#优化总结\" class=\"headerlink\" title=\"优化总结\"></a>优化总结</h3><p>经过分析，『 tcp_nopush 』和『 tcp_nodelay 』看起来是「互斥的」，那么为什么要将这两个值都打开，这个大家需要知道的是在 Linux2.5.9 以后的版本中两者是可以兼容的，三个指令都开启的好处是，sendfile 可以开启高效的文件传输模式，『 tcp_nopush 』开启可以确保在发送到客户端之前数据包已经充分「填满」，这大大减少了网络开销，并加快了文件发送的速度。然后，当它到达最后一个可能因为没有「填满」而暂停的数据包时，Nginx 会忽略『 tcp_nopush 』参数， 然后，『 tcp_nodelay 』强制套接字发送数据。由此可知，『 tcp_nopush 』可以与『 tcp_nodelay 』一起设置，它比单独配置『 tcp_nodelay 』具有更强的性能。</p>\n<p>所以回归开头，我们可以使用如下配置来优化 Nginx 静态资源的处理：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 三个都开启</span></span><br><span class=\"line\"><span class=\"attribute\">sendfile</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"><span class=\"attribute\">tcp_nopush</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"><span class=\"attribute\">tcp_nodelay</span> <span class=\"literal\">on</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"静态资源压缩配置\"><a href=\"#静态资源压缩配置\" class=\"headerlink\" title=\"静态资源压缩配置\"></a>静态资源压缩配置</h2><p>经过上述内容的优化，我们再次思考一个问题，假如在满足上述优化的前提下，我们传送一个 1M 的数据和一个 10M 的数据那个效率高？答案显而易见，<strong>传输内容小，速度就会快</strong>。那么问题又来了，同样的内容，如果把大小降下来，我们脑袋里面要蹦出一个词就是「压缩」，接下来，我们来学习 Nginx 的静态资源压缩模块。</p>\n<p>在 Nginx 的配置文件中可以通过配置 gzip 来对静态资源进行压缩，相关的指令可以配置在 http 块、server 块和 location 块中，Nginx 可以通过对这些指令进行解析和处理：</p>\n<ul>\n<li><code>ngx_http_gzip_module</code> 模块</li>\n<li><code>ngx_http_gzip_static_module</code> 模块</li>\n<li><code>ngx_http_gunzip_module</code> 模块</li>\n</ul>\n<p>接下来我们从以下内容进行学习：</p>\n<ul>\n<li>Gzip 各模块支持的配置指令</li>\n<li>Gzip 压缩功能的配置</li>\n<li>Gzip 和 sendfile 的冲突解决</li>\n<li>浏览器不支持 Gzip 的解决方案</li>\n</ul>\n<h3 id=\"Gzip模块配置指令\"><a href=\"#Gzip模块配置指令\" class=\"headerlink\" title=\"Gzip模块配置指令\"></a>Gzip模块配置指令</h3><p>接下来所学习的指令都来自 <code>ngx_http_gzip_module</code> 模块，该模块会在 Nginx 安装的时候内置到 Nginx 的安装环境中，也就是说我们可以直接使用这些指令。</p>\n<ul>\n<li><code>gzip</code> 指令是用于开启或者关闭 Gzip 功能。默认关闭</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gzip &lt;on | off&gt;;</td>\n<td>gzip off;</td>\n<td>http、server、location ……</td>\n</tr>\n</tbody></table>\n<p>注意：只有该指令为打开状态，下面的指令才有效果</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">gzip</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>gzip_types</code> 指令可以根据响应页的 MIME 类型选择性地开启 Gzip 压缩功能。默认是 text/html</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gzip_types &lt;mime-type&gt; …… ;</td>\n<td>gzip_types text/html;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<p>所选择的值可以从 mime.types 文件中进行查找，也可以使用 * 代表所有。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">gzip_types</span> application/javascript;</span><br><span class=\"line\">\t<span class=\"comment\"># * 代表所有</span></span><br><span class=\"line\">\t<span class=\"attribute\">gzip_types</span> *</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>gzip_comp_level</code> 指令是用于设置 Gzip 压缩程度，级别从 1-9，1 表示要是程度最低，要是效率最高，9 刚好相反，压缩程度最高，但是效率最低、最费时间。默认值是 1</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gzip_comp_level &lt;level&gt;;</td>\n<td>gzip_comp_level 1;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">gzip_comp_level</span> <span class=\"number\">6</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>gzip_vary</code> 指令是用于设置使用 Gzip 进行压缩发送是否携带『Vary:Accept-Encoding』头域的响应头部。主要是告诉接收方，所发送的数据经过了 Gzip 压缩处理。默认关闭</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gzip_vary &lt;on | off&gt;;</td>\n<td>gzip_vary off;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.4bsq0xpu9s20.webp\" alt=\"image\"></p>\n<ul>\n<li><code>gzip_buffers</code> 指令是用于处理请求压缩的缓冲区数量和大小</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gzip_buffers &lt;number&gt; &lt;size&gt;;</td>\n<td>gzip_buffers 32 4k | 16 8k;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<p>其中 number 是指定 Nginx 服务器向系统申请缓存空间个数，size 指的是每个缓存空间的大小。主要实现的是申请 number 个每个大小为 size 的内存空间。这个值的设定一般会和服务器的操作系统有关，所以建议此项不设置，使用默认值即可。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">gzip_buffers</span> <span class=\"number\">4</span> <span class=\"number\">16K</span>;\t  <span class=\"comment\"># 缓存空间大小</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>gzip_disable</code> 指令是针对不同种类客户端发起的请求，可以选择性地开启和关闭 Gzip 功能</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gzip_disable &lt;regex&gt; …… ;</td>\n<td>—</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<p>regex 是根据客户端的浏览器标志(user-agent)来设置，支持使用正则表达式。指定的浏览器标志不使用 Gzip.该指令一般是用来排除一些明显不支持 Gzip 的浏览器。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">gzip_disable</span> <span class=\"string\">\"MSIE [1-6]\\.\"</span>;</span><br></pre></td></tr></table></figure>\n\n<p><code>gzip_http_version</code> 指令是针对不同的 HTTP 协议版本，可以选择性地开启和关闭 Gzip 功能。默认是 1.1 版本</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gzip_http_version &lt;1.0 | 1.1&gt;;</td>\n<td>gzip_http_version 1.1;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<p>该指令是指定使用 Gzip 的 HTTP 最低版本，该指令一般采用默认值即可。</p>\n<ul>\n<li><code>gzip_min_length</code> 指令是针对传输数据的大小，可以选择性地开启和关闭 Gzip 功能</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gzip_min_length &lt;length&gt;;</td>\n<td>gzip_min_length 20;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<p>Nignx 计量大小的单位：bytes [字节] / kb [千字节] / M [兆]</p>\n<p>例如: 1024 / 10k | K / 10m | M</p>\n<p>Gzip 压缩功能对大数据的压缩效果明显，但是如果要压缩的数据比较小的话，可能出现越压缩数据量越大的情况，因此我们需要根据响应内容的大小来决定是否使用 Gzip 功能，响应页面的大小可以通过头信息中的 <code>Content-Length</code> 来获取。但是如何使用了 Chunk 编码动态压缩，该指令将被忽略。建议设置为 1K 或以上。</p>\n<ul>\n<li><code>gzip_proxied</code> 指令设置是否对服务端返回的结果进行 Gzip 压缩</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gzip_proxied &lt;off | expired | no-cache | no-store | private | no_last_modified | no_etag | auth | any&gt;;</td>\n<td>gzip_proxied off;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<ul>\n<li>off：关闭 Nginx 服务器对后台服务器返回结果的 Gzip 压缩</li>\n<li>expired：如果 header 头中包含 『Expires』头信息，启用压缩</li>\n<li>no-cache：如果 header 头中包含 『Cache-Control:no-cache』头信息，启用压缩</li>\n<li>no-store：如果 header 头中包含 『Cache-Control:no-store』头信息，启用压缩</li>\n<li>private：如果 header 头中包含 『Cache-Control:private』头信息，启用压缩</li>\n<li>no_last_modified：如果 header 头中不包含 『Last-Modified』头信息，启用压缩</li>\n<li>no_etag：如果 header 头中不包含 『ETag』 头信息，启用压缩</li>\n<li>auth：如果 header 头中包含 『Authorization』 头信息，启用压缩</li>\n<li>any：无条件启用压缩</li>\n</ul>\n<h3 id=\"Gzip压缩功能配置模板\"><a href=\"#Gzip压缩功能配置模板\" class=\"headerlink\" title=\"Gzip压缩功能配置模板\"></a>Gzip压缩功能配置模板</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">gzip</span> <span class=\"literal\">on</span>;  \t\t\t   \t\t <span class=\"comment\"># 开启 Gzip 功能</span></span><br><span class=\"line\"><span class=\"attribute\">gzip_types</span> *;\t\t   \t \t <span class=\"comment\"># 压缩源文件类型,根据具体的访问资源类型设定</span></span><br><span class=\"line\"><span class=\"attribute\">gzip_comp_level</span> <span class=\"number\">6</span>;\t   \t\t <span class=\"comment\"># Gzip 压缩级别</span></span><br><span class=\"line\"><span class=\"attribute\">gzip_min_length</span> <span class=\"number\">1k</span>;          <span class=\"comment\"># 进行压缩响应页面的最小长度，content-length</span></span><br><span class=\"line\"><span class=\"attribute\">gzip_buffers</span> <span class=\"number\">4</span> <span class=\"number\">16K</span>;\t         <span class=\"comment\"># 缓存空间大小</span></span><br><span class=\"line\"><span class=\"attribute\">gzip_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">1</span>;       <span class=\"comment\"># 指定压缩响应所需要的最低 HTTP 请求版本</span></span><br><span class=\"line\"><span class=\"attribute\">gzip_vary</span>  <span class=\"literal\">on</span>;\t\t         <span class=\"comment\"># 往头信息中添加压缩标识</span></span><br><span class=\"line\"><span class=\"attribute\">gzip_disable</span> <span class=\"string\">\"MSIE [1-6]\\.\"</span>; <span class=\"comment\"># 对 IE6 以下的版本都不进行压缩</span></span><br><span class=\"line\"><span class=\"attribute\">gzip_proxied</span>  <span class=\"literal\">off</span>;           <span class=\"comment\"># Nginx 作为反向代理压缩服务端返回数据的条件</span></span><br></pre></td></tr></table></figure>\n\n<p>这些配置在很多地方可能都会用到，所以我们可以将这些内容抽取到一个配置文件中，然后通过 include 指令把配置文件再次加载到 nginx.conf 配置文件中，方法使用。</p>\n<p>创建压缩配置文件：<code>nginx_gzip.conf</code>，添加如下内容：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">gzip</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"><span class=\"attribute\">gzip_types</span> *;</span><br><span class=\"line\"><span class=\"attribute\">gzip_comp_level</span> <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"attribute\">gzip_min_length</span> <span class=\"number\">1k</span>;</span><br><span class=\"line\"><span class=\"attribute\">gzip_buffers</span> <span class=\"number\">4</span> <span class=\"number\">16K</span>;</span><br><span class=\"line\"><span class=\"attribute\">gzip_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"attribute\">gzip_vary</span>  <span class=\"literal\">on</span>;</span><br><span class=\"line\"><span class=\"attribute\">gzip_disable</span> <span class=\"string\">\"MSIE [1-6]\\.\"</span>;</span><br><span class=\"line\"><span class=\"attribute\">gzip_proxied</span>  <span class=\"literal\">off</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在 Nginx 核心配置文件 <code>nginx.conf</code> 进行引入，添加如下内容：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">include</span> nginx_gzip.conf</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Gzip和sendfile共存问题\"><a href=\"#Gzip和sendfile共存问题\" class=\"headerlink\" title=\"Gzip和sendfile共存问题\"></a>Gzip和sendfile共存问题</h3><p>前面在讲解 sendfile 的时候，提到过，开启 sendfile 以后，在读取磁盘上的静态资源文件的时候，可以减少拷贝的次数，可以不经过用户进程将静态文件通过网络设备发送出去，但是 Gzip 要想对资源压缩，是需要经过用户进程进行操作的。Nginx 设置了Gzip 之后，静态文件的 sendfile 就不起作用了。所以要考虑如何解决两个设置的共存问题。</p>\n<p>可以使用 <code>ngx_http_gzip_static_module</code> 模块的 <code>gzip_static</code> 指令来解决。</p>\n<h3 id=\"gzip-static指令\"><a href=\"#gzip-static指令\" class=\"headerlink\" title=\"gzip_static指令\"></a>gzip_static指令</h3><p><code>gzip_static</code> 指令用于在检查与访问资源同名的 .gz 文件时，response 中以 Gzip 相关的 header 返回 .gz 文件的内容。默认关闭。</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gzip_static &lt;on | off | always&gt;;</td>\n<td>gzip_static off;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">gzip_static</span> <span class=\"literal\">on</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在配置文件添加上述命令后，会报一个错误：<code>unknown directive &quot;gzip_static&quot;</code>，主要的原因是 Nginx 默认是没有添加 ngx_http_gzip_static_module 模块。如何来添加？</p>\n<h3 id=\"Nginx模块添加\"><a href=\"#Nginx模块添加\" class=\"headerlink\" title=\"Nginx模块添加\"></a>Nginx模块添加</h3><ol>\n<li>查询当前 Nginx 的配置参数，即查看 <code>configure arguments</code> 的配置信息，拷贝出来</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -V</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拷贝 configure arguments 后面的数据</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--prefix=/usr/local/nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>将 Nginx 安装目录下 sbin 目录中的 nginx 二进制文件进行更名备份</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx/sbin</span><br><span class=\"line\">mv nginx nginx.backup</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>进入 Nginx 的安装目录</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /root/nginx/core/nginx-1.21.6</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>执行 make clean 清空之前编译的内容</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make clean</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>使用 configure 来配置参数，添加 <code>ngx_http_gzip_static_module</code> 模块，记得加上第1步拷贝的配置信息</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --with-http_gzip_static_module  <span class=\"comment\"># 记得添加 configure arguments 后的数据</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>使用 make 命令进行编译</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>将 objs 目录下的 nginx 二进制执行文件移动到 nginx 安装目录下的 sbin 目录中</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv /opt/nginx/core/nginx-1.21.6/objs/nginx /usr/<span class=\"built_in\">local</span>/nginx/sbin</span><br></pre></td></tr></table></figure>\n\n<p>如果不执行第（2）步进行备份，则该步骤会覆盖原来的 nginx 可执行文件</p>\n<ol start=\"8\">\n<li>在源码目录下执行更新命令</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /opt/nginx/core/nginx-1.21.6</span><br><span class=\"line\">make upgrade</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"gzip-static测试\"><a href=\"#gzip-static测试\" class=\"headerlink\" title=\"gzip_static测试\"></a>gzip_static测试</h3><p>准备好一个 jquery.js 文件，放在 html 目录下</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.576ef03x00c0.webp\" alt=\"image\"></p>\n<ol>\n<li>直接访问 <code>http://192.168.91.200/jquery.js</code></li>\n</ol>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.2b8dhabn0cbo.webp\" alt=\"image\"></p>\n<ol start=\"2\">\n<li>使用 Gzip 命令进行压缩</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入 html 目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx/html</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 压缩 js 文件</span></span><br><span class=\"line\">gzip jquery.js</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>再次访问 <code>http://192.168.91.200/jquery.js</code></li>\n</ol>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.4ivj1d091pg.webp\" alt=\"image\"></p>\n<p>可以看出 <code>Content-Length</code> 的大小已经变得非常小。</p>\n<h2 id=\"静态资源缓存配置\"><a href=\"#静态资源缓存配置\" class=\"headerlink\" title=\"静态资源缓存配置\"></a>静态资源缓存配置</h2><p>当浏览器请求 Nginx 服务器的资源后，我们可以让这些资源缓存在浏览器里，这样再一次请求相同的资源时，无需请求 Nginx 服务器，直接从浏览器的缓存里获取，减少 Nginx 服务器的压力。</p>\n<h3 id=\"什么是缓存和Web缓存\"><a href=\"#什么是缓存和Web缓存\" class=\"headerlink\" title=\"什么是缓存和Web缓存\"></a>什么是缓存和Web缓存</h3><p>缓存（cache），原始意义是指访问速度比一般随机存取存储器（RAM）快的一种高速存储器，通常它不像系统主存那样使用 DRAM 技术，而使用昂贵但较快速的 SRAM 技术。缓存的设置是所有现代计算机系统发挥高性能的重要因素之一。</p>\n<p>Web 缓存是指一个 Web 资源（如 html 页面，图片，js，数据等）存在于 Web 服务器和客户端（浏览器）之间的副本。缓存会根据进来的请求保存输出内容的副本；当下一个请求来到的时候，如果是相同的 URL，缓存会根据缓存机制决定是直接使用副本响应访问请求，还是向源服务器再次发送请求。比较常见的就是浏览器会缓存访问过网站的网页，当再次访问这个 URL 地址的时候，如果网页没有更新，就不会再次下载网页，而是直接使用本地缓存的网页。只有当网站明确标识资源已经更新，浏览器才会再次下载网页。</p>\n<h3 id=\"Web缓存的种类\"><a href=\"#Web缓存的种类\" class=\"headerlink\" title=\"Web缓存的种类\"></a>Web缓存的种类</h3><p>客户端缓存</p>\n<ul>\n<li>浏览器缓存</li>\n</ul>\n<p>服务端缓存</p>\n<ul>\n<li>Nginx</li>\n<li>Redis</li>\n<li>Memcached 等</li>\n</ul>\n<h3 id=\"为什么要用浏览器缓存\"><a href=\"#为什么要用浏览器缓存\" class=\"headerlink\" title=\"为什么要用浏览器缓存\"></a>为什么要用浏览器缓存</h3><ul>\n<li>成本最低的一种缓存实现</li>\n<li>减少网络带宽消耗</li>\n<li>降低服务器压力</li>\n<li>减少网络延迟，加快页面打开速度</li>\n</ul>\n<h3 id=\"浏览器缓存执行流程\"><a href=\"#浏览器缓存执行流程\" class=\"headerlink\" title=\"浏览器缓存执行流程\"></a>浏览器缓存执行流程</h3><p>HTTP 协议中和页面缓存相关的字段，我们先来认识下：</p>\n<table>\n<thead>\n<tr>\n<th>header</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Expires</td>\n<td>缓存过期的日期和时间</td>\n</tr>\n<tr>\n<td>Cache-Control</td>\n<td>设置和缓存相关的配置信息</td>\n</tr>\n<tr>\n<td>Last-Modified</td>\n<td>请求资源最后修改时间</td>\n</tr>\n<tr>\n<td>ETag</td>\n<td>请求变量的实体标签的当前值，比如文件的 MD5 值</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.209c4krjzgf4.webp\" alt=\"image\"></p>\n<ol>\n<li>用户首次通过浏览器发送请求到服务端获取数据，客户端是没有对应的缓存，所以需要发送 request 请求来获取数据；</li>\n<li>服务端接收到请求后，获取服务端的数据及服务端缓存的允许后，返回 200 的成功状态码并且在响应头上附上对应资源以及缓存信息；</li>\n<li>当用户再次访问相同资源的时候，客户端会在浏览器的缓存目录中查找是否存在响应的缓存文件；</li>\n<li>如果没有找到对应的缓存文件，则走第2步；</li>\n<li>如果有缓存文件，接下来对缓存文件是否过期进行判断，过期的判断标准是(Expires)；</li>\n<li>如果没有过期，则直接从本地缓存中返回数据进行展示（强缓存）；</li>\n<li>如果 Expires 过期，接下来需要判断缓存文件是否发生过变化；</li>\n<li>判断的标准有两个（都要判断），一个是 ETag(Entity Tag)，一个是 Last-Modified；</li>\n<li>判断结果是未发生变化，则服务端返回 304，直接从缓存文件中获取数据（弱缓存）；</li>\n<li>如果判断是发生了变化，重新从服务端获取数据，并根据缓存协商(服务端所设置的是否需要进行缓存数据的设置)来进行数据缓存。</li>\n</ol>\n<h3 id=\"浏览器缓存相关指令\"><a href=\"#浏览器缓存相关指令\" class=\"headerlink\" title=\"浏览器缓存相关指令\"></a>浏览器缓存相关指令</h3><p>Nginx 需要进行缓存相关设置，就需要用到如下的指令。</p>\n<h4 id=\"expires指令\"><a href=\"#expires指令\" class=\"headerlink\" title=\"expires指令\"></a>expires指令</h4><p>该指令用来控制页面缓存的作用。可以通过该指令控制 HTTP 应答中的『Expires』和『Cache-Control』</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>expires [modified] &lt;time&gt;; expires &lt;epoch | max | off&gt;;</td>\n<td>expires off;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>time：可以整数也可以是负数，指定过期时间，单位为 s（秒）。如果是负数，Cache-Control 则为 no-cache，如果为整数或 0，则 Cache-Control 的值为 max-age=time</p>\n</li>\n<li><p>epoch：指定 Expires 的值为『’1 January,1970,00:00:01 GMT’』，即 1970-01-01 00:00:00 ，Cache-Control 的值 no-cache</p>\n<p>因为 Expires（缓存过期时间）是 1970 年，所以不缓存。</p>\n</li>\n<li><p>max：指定 Expires 的值为『’31 December2037 23:59:59GMT’ 』，即(2037-12-31 23:59:59，Cache-Control 的值为 10 年</p>\n<p>因为 Expires（缓存过期时间）是 2037 年，虽然还有 16 年过期，但是最大只能缓存 10 年。</p>\n</li>\n<li><p>off：默认不缓存</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>例子 1</strong></p>\n</blockquote>\n<p>在配置文件添加如下内容：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> <span class=\"regexp\">~ .*\\.(html|js|css|png|jpg|jpeg|gif)$</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">    <span class=\"attribute\">expires</span> max</span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>发送请求：<code>http://192.168.91.200/jquery.js</code></p>\n<p>查看开发者工具(F12)的 NetWork，如图：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.4x3yczk58lk0.webp\" alt=\"image\"></p>\n<p>315360000 折算下来正好是 10 年。</p>\n<blockquote>\n<p><strong>其他格式</strong></p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">expires</span> <span class=\"number\">30s</span>;  <span class=\"comment\"># 表示把数据缓存 30 秒</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">expires</span> <span class=\"number\">30m</span>;  <span class=\"comment\"># 表示把数据缓存 30 分</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">expires</span> <span class=\"number\">10h</span>;  <span class=\"comment\"># 表示把数据缓存 10 小时</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">expires</span> <span class=\"number\">1d</span>;   <span class=\"comment\"># 表示把数据缓存 1 天</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"add-header指令\"><a href=\"#add-header指令\" class=\"headerlink\" title=\"add_header指令\"></a>add_header指令</h4><p>add_header 指令是用来添加指定的响应头和响应值。</p>\n<p>add_header 是响应体的指令，不是请求时的指令（比如 expires ），并且 add_header 也有和 expires 一样的功能。</p>\n<p>如果 expires 和 add_header 同时开启的情况下，则 add_header 优于 expires 生效。</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>add_header &lt;name&gt; &lt;value&gt; [always];</td>\n<td>—</td>\n<td>location &gt; server &gt; http &gt; ……</td>\n</tr>\n</tbody></table>\n<p>always 可选，代表总是添加。</p>\n<p>Cache-Control 作为响应头信息，可以在 Nginx 配置文件设置如下缓存响应指令：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">add_header</span> Cache-control must-revalidate;</span><br><span class=\"line\"><span class=\"attribute\">add_header</span> Cache-control <span class=\"literal\">no</span>-cache;</span><br><span class=\"line\"><span class=\"attribute\">add_header</span> Cache-control <span class=\"literal\">no</span>-store;</span><br><span class=\"line\"><span class=\"attribute\">add_header</span> Cache-control <span class=\"literal\">no</span>-transform;</span><br><span class=\"line\"><span class=\"attribute\">add_header</span> Cache-control public;</span><br><span class=\"line\"><span class=\"attribute\">add_header</span> Cache-control private;</span><br><span class=\"line\"><span class=\"attribute\">add_header</span> Cache-control proxy-revalidate;</span><br><span class=\"line\"><span class=\"attribute\">add_header</span> Cache-Control max-age=&lt;seconds&gt;;  <span class=\"comment\"># 秒</span></span><br><span class=\"line\"><span class=\"attribute\">add_header</span> Cache-control s-maxage=&lt;seconds&gt;; <span class=\"comment\"># 秒</span></span><br></pre></td></tr></table></figure>\n\n<p>描述：</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>must-revalidate</td>\n<td>可缓存但必须再向源服务器进行确认</td>\n</tr>\n<tr>\n<td>no-cache</td>\n<td>数据内容不能被缓存，每次请求都重新访问服务器，若有 max-age，则缓存期间不访问服务器</td>\n</tr>\n<tr>\n<td>no-store</td>\n<td>不缓存请求或响应的任何内容，暂存也不可以(临时文件夹中不能暂存该资源)</td>\n</tr>\n<tr>\n<td>no-transform</td>\n<td>代理不可更改媒体类型</td>\n</tr>\n<tr>\n<td>public</td>\n<td>可以被任何缓存区缓存，如: 浏览器、服务器、代理服务器等</td>\n</tr>\n<tr>\n<td>private（默认）</td>\n<td>只能在浏览器中缓存，只有在第一次请求的时候才访问服务器，若有 max-age，则缓存期间不访问服务器</td>\n</tr>\n<tr>\n<td>proxy-revalidate</td>\n<td>要求中间缓存服务器对缓存的响应有效性再进行确认</td>\n</tr>\n<tr>\n<td>max-age=&lt;秒&gt;</td>\n<td>过期时间，即以秒为单位的缓存时间</td>\n</tr>\n<tr>\n<td>s-maxage=&lt;秒&gt;</td>\n<td>公共缓存服务器响应的最大 Age 值</td>\n</tr>\n</tbody></table>\n<p>值得注意的是：</p>\n<ul>\n<li>设置了 no-cache 或者 private 后，打开新窗口时会重新访问服务器。若设置 max-age，则缓存期间不访问服务器</li>\n<li>设置 private 和正数的 max-age 时，后退时候不会访问服务器</li>\n<li>设置 no-cache 和正数的 max-age 时，后退时会访问服务器</li>\n</ul>\n<h3 id=\"Nginx服务端缓存\"><a href=\"#Nginx服务端缓存\" class=\"headerlink\" title=\"Nginx服务端缓存\"></a>Nginx服务端缓存</h3><p>在 Web 缓存的种类，我们提到了 Ngixn 服务端缓存，而上面仅仅介绍了在浏览器进行缓存，而因为 Ngixn 服务端缓存的内容比较多，所以前往 <strong>Nginx - 缓存集成</strong> 进行学习。</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/3z/wallhaven-3zgz2y.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"Nginx-静态资源部署\"><a href=\"#Nginx-静态资源部署\" class=\"headerlink\" title=\"Nginx 静态资源部署\"></a>Nginx 静态资源部署</h1><p><strong>引言</strong></p>\n<p>静态资源如何部署？本内容带你了解静态资源相关的操作和内容。</p>\n<p>静态资源指令配置、静态资源优化配置、静态资源压缩配置、静态资源缓存配置。</p>\n<h2 id=\"Nginx静态资源概述\"><a href=\"#Nginx静态资源概述\" class=\"headerlink\" title=\"Nginx静态资源概述\"></a>Nginx静态资源概述</h2><p>上网去搜索访问资源对于我们来说并不陌生，通过浏览器发送一个 HTTP 请求实现从客户端发送请求到服务器端获取所需要内容后并把内容回显展示在页面的一个过程。这个时候，我们所请求的内容就分为两种类型，一类是静态资源、一类是动态资源。</p>\n<p>静态资源即指在服务器端真实存在并且能直接拿来展示的一些文件，比如常见的 html 页面、css 文件、js 文件、图片、视频等资源；</p>\n<p>动态资源即指在服务器端真实存在但是要想获取需要经过一定的业务逻辑处理，根据不同的条件展示在页面不同这 一部分内容，比如说报表数据展示、根据当前登录用户展示相关具体数据等资源；</p>\n<p>Nginx 处理静态资源的内容，我们需要考虑下面这几个问题：</p>\n<ul>\n<li>静态资源的配置指令</li>\n<li>静态资源的配置优化</li>\n<li>静态资源的压缩配置指令</li>\n<li>静态资源的缓存处理</li>\n<li>静态资源的访问控制，包括跨域问题和防盗链问题</li>\n</ul>\n<h2 id=\"静态资源指令配置\"><a href=\"#静态资源指令配置\" class=\"headerlink\" title=\"静态资源指令配置\"></a>静态资源指令配置</h2><h3 id=\"listen指令\"><a href=\"#listen指令\" class=\"headerlink\" title=\"listen指令\"></a>listen指令</h3><p>该指令是用来配置监听端口。默认监听 80（root 启动 Nginx） 和 8000（非 root 启动 Nginx） 端口。</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>listen &lt;address&gt;[:port] [default_server] …… ;<br> listen &lt;port&gt; [default_server] …… ;</td>\n<td>listen *:80 | *:8000</td>\n<td>server</td>\n</tr>\n</tbody></table>\n<p><code>listen</code> 指令的设置比较灵活，我们通过几个例子来把常用的设置方式熟悉下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen 127.0.0.1:8000; <span class=\"comment\"># listen localhost:8000 监听指定的IP和端口</span></span><br><span class=\"line\">listen 127.0.0.1;\t<span class=\"comment\"># 监听指定IP的所有端口</span></span><br><span class=\"line\">listen 8000;\t<span class=\"comment\"># 监听指定端口上的连接</span></span><br><span class=\"line\">listen *:8000;\t<span class=\"comment\"># 监听指定端口上的连接</span></span><br></pre></td></tr></table></figure>\n\n<p><code>default_server</code> 属性是标识符，用来将此虚拟主机设置成默认主机。所谓的默认主机指的是如果没有匹配到对应的 <code>address:port</code>，则会执行默认的 server。如果不指定该标识符，又没有匹配到对应的 <code>address:port</code> 时，默认使用的是第一个 server，所以第一个 server 要好好设置，建议第一个 server 就加上 <code>default_server</code>。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">8080</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> <span class=\"number\">127.0.0.1</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span> html;</span><br><span class=\"line\">\t\t<span class=\"attribute\">index</span> index.html;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">8080</span> default_server;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> localhost;</span><br><span class=\"line\">\t<span class=\"attribute\">default_type</span> text/plain;</span><br><span class=\"line\">\t<span class=\"attribute\">return</span> <span class=\"number\">444</span> <span class=\"string\">'This is a error request'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时访问 8080 端口，它会访问第二个 server，如果第二个 server 去掉 <code>default_server</code> ，则默认访问第一个 server。</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220730/image.2e5c4uo1ghlw.webp\" alt=\"image\"></p>\n<h3 id=\"server-name指令\"><a href=\"#server-name指令\" class=\"headerlink\" title=\"server_name指令\"></a>server_name指令</h3><p>该指令用来设置虚拟主机服务名称。默认为空。</p>\n<p>比如 127.0.0.1、localhost、域名[<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a> | <a href=\"http://www.jd.com]。\" target=\"_blank\" rel=\"noopener\">www.jd.com]。</a></p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>server_name &lt;name&gt; …… ;</td>\n<td>server_name “”;</td>\n<td>server</td>\n</tr>\n</tbody></table>\n<ul>\n<li>name 可以提供多个中间用空格分隔。</li>\n</ul>\n<p>关于 server_name 的配置方式有三种，分别是：</p>\n<ul>\n<li>精确匹配</li>\n<li>通配符匹配</li>\n<li>正则表达式匹配</li>\n</ul>\n<blockquote>\n<p><strong>配置方式一：精确匹配</strong></p>\n</blockquote>\n<p>如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> www.frx.com www.bing.com;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时以 <code>www.frx.com</code> 或者 <code>www.bing.com</code> 域名进行访问，就会跳转到 Nginx 的欢迎页面，前提是你需要拥有该域名，并且该域名和 Nginx 所在的系统 IP 进行绑定。</p>\n<p>所以我可以利用 hosts 文件进行「模拟」域名。</p>\n<blockquote>\n<p>补充小知识点</p>\n</blockquote>\n<p>hosts 是一个没有扩展名的系统文件，可以用记事本等工具打开，其作用就是将一些常用的网址域名与其对应的IP地址建立一个关联「数据库」，当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从 hosts 文件中寻找对应的IP地址，一旦找到，系统会立即打开对应网页，如果没有找到，则系统会再将网址提交 DNS 域名解析服务器进行 IP 地址的解析。</p>\n<p>hosts 文件不同系统的位置：</p>\n<ul>\n<li>在 windows 的位置：C:\\Windows\\System32\\drivers\\etc</li>\n<li>在 centos 的位置：/etc/hosts</li>\n</ul>\n<p>因为域名是要收取一定的费用，所以我们可以使用修改 hosts 文件来制作一些虚拟域名来使用。需要修改 <code>/etc/hosts</code> 文件来添加</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入 hosts 文件</span></span><br><span class=\"line\">vim /etc/hosts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加内容</span></span><br><span class=\"line\">127.0.0.1 www.frx.com</span><br><span class=\"line\">127.0.0.1 www.bing.com</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>访问测试</li>\n</ul>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220730/image.3nbv3p1703y0.webp\" alt=\"image\"></p>\n<blockquote>\n<p> <strong>配置方式二：使用通配符配置</strong></p>\n</blockquote>\n<p>server_name 指令支持通配符 *，但需要注意的是通配符不能出现在域名的中间，只能出现在首段或尾段，如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>  <span class=\"regexp\">*.frx.com</span>\t<span class=\"regexp\">www.frx.*</span>;</span><br><span class=\"line\">\t<span class=\"comment\"># www.frx.cn abc.frx.cn www.bing.cn www.frx.com</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面的配置就会报错，因为 * 不能出现在域名的中间和与其他字符串联使用</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>  <span class=\"regexp\">www.*</span>.cn www.frx.c*</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span>  .frx.com</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>.frx.com</code> 相当于 <code>*..frx.com</code> + <code>frx.com</code></p>\n<blockquote>\n<p><strong>配置三：使用正则表达式配置</strong></p>\n</blockquote>\n<p>server_name 指令可以使用正则表达式，并且使用 <code>~</code> 作为正则表达式字符串的开始标记。</p>\n<p>常见的正则表达式：</p>\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>^</td>\n<td>匹配搜索字符串开始位置</td>\n</tr>\n<tr>\n<td>$</td>\n<td>匹配搜索字符串结束位置</td>\n</tr>\n<tr>\n<td>.</td>\n<td>匹配除换行符 \\n 之外的任何单个字符</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>转义字符，将下一个字符标记为特殊字符</td>\n</tr>\n<tr>\n<td>[xyz]</td>\n<td>字符集，与任意一个指定字符匹配</td>\n</tr>\n<tr>\n<td>[a-z]</td>\n<td>字符范围，匹配指定范围内的任何字符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>与以下任意字符匹配 A-Z a-z 0-9 和下划线,等效于[A-Za-z0-9_]</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>数字字符匹配，等效于[0-9]</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>正好匹配 n 次</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>至少匹配 n 次</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>匹配至少 n 次至多 m 次</td>\n</tr>\n<tr>\n<td>*</td>\n<td>零次或多次，等效于{0,}</td>\n</tr>\n<tr>\n<td>+</td>\n<td>一次或多次，等效于{1,}</td>\n</tr>\n<tr>\n<td>?</td>\n<td>零次或一次，等效于{0,1}</td>\n</tr>\n</tbody></table>\n<p>配置如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> ~^www\\.(\\w+)\\.com$;</span><br><span class=\"line\">    <span class=\"attribute\">default_type</span> text/plain;</span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"variable\">$1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意 ~ 后面不能加空格</strong>。括号代表可以在 Ngxin 配置文件内获取其中的值，如上方的 (\\w+) 的内容可以用 $1 获取到参数，如果有多个括号，依次使用 $2 $3 …… 获取。</p>\n<p>比如现在访问 <code>http://www.frx.com</code>，则返回 frx 到页面上，因为frx 被放在 $1 处：<code>return 200 frx</code>。</p>\n<p>⚠ 这里进行说明：server_name 配置了 localhost 和配置 IP 或者域名的区别</p>\n<p>localhost 是「虚拟 IP」，如果不是本机访问，而是外界访问，那么这个就是无效的，但是为什么学习阶段的时候都不改呢，因为当 Nginx 没有匹配到指定的 <code>server_name</code>，默认找到第一个 server 块，而 Nginx 默认的第一个 server 块就是 localhost，哪怕你把 localhost 改为其他的，如 hello，它也能访问。只是因为在匹配不到的情况下，默认是第一个 service 块，哪怕它确实和访问的 IP 不匹配。</p>\n<p>IP 如果和域名进行了绑定，那么在 <code>server_name</code> 中，两者都可以填写，填了域名，最后也是找到 IP，只是因为域名好记住。</p>\n<p>知道了区别，在生产环境上，可以给个指定的错误页面。如果匹配不上，则返回友好的提示，如第一个 server 块：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span> default_server;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> _;    <span class=\"comment\"># 匹配不上的时候，也可以填写 localhost</span></span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"string\">\"&lt;h1&gt;不好意思，匹配不到！\"</span>;</span><br><span class=\"line\">    <span class=\"comment\"># return 403;   # 也可以直接返回错误码</span></span><br><span class=\"line\">    <span class=\"comment\"># </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> www.frxcat.fun;    <span class=\"comment\"># 匹配域名访问</span></span><br><span class=\"line\">    <span class=\"comment\"># ......</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码块只允许域名访问，而不允许 IP 访问，避免其他人把未备案的域名解析到自己的服务器 IP。</p>\n<p>当然你也可以不设置错误页面。因为 Nginx 匹配不上时，直接返回它的欢迎界面。</p>\n<h3 id=\"匹配执行顺序\"><a href=\"#匹配执行顺序\" class=\"headerlink\" title=\"匹配执行顺序\"></a>匹配执行顺序</h3><p>由于 server_name 指令支持通配符和正则表达式，因此在包含多个虚拟主机的配置文件中，可能会出现一个名称被多个虚拟主机的 server_name 匹配成功，当遇到这种情况，当前的请求交给谁来处理呢？如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> ~^www\\.\\w+\\.com$;</span><br><span class=\"line\">\t<span class=\"attribute\">default_type</span> text/plain;</span><br><span class=\"line\">\t<span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">'regex_success'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> <span class=\"regexp\">www.frx.*</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">default_type</span> text/plain;</span><br><span class=\"line\">\t<span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">'wildcard_after_success'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> <span class=\"regexp\">*.frx.com</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">default_type</span> text/plain;</span><br><span class=\"line\">\t<span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">'wildcard_before_success'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> www.frx.com;</span><br><span class=\"line\">\t<span class=\"attribute\">default_type</span> text/plain;</span><br><span class=\"line\">\t<span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">'exact_success'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span> default_server;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> _;</span><br><span class=\"line\">\t<span class=\"attribute\">default_type</span> text/plain;</span><br><span class=\"line\">\t<span class=\"attribute\">return</span> <span class=\"number\">444</span> <span class=\"string\">'default_server not found server'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>访问 <code>http://www.kele.com</code> 的优先级：（访问完后请注释掉处理这个请求的 server）</p>\n<ul>\n<li>exact_success（第一个是精确匹配，然后注释掉该 server）</li>\n<li>wildcard_before_success（第二个是开始匹配符，然后注释掉该 server）</li>\n<li>wildcard_after_success（第三个是结尾匹配符，然后注释掉该 server）</li>\n<li>regex_success（第四个是正则表达式，然后注释掉该 server）</li>\n<li>default_server not found server!!（第五个是默认 server，因为前四个都注释了，所以只能走默认的 server）</li>\n</ul>\n<p><strong>结论</strong></p>\n<ul>\n<li><p>No1：准确匹配 server_name</p>\n</li>\n<li><p>No2：通配符在开始时匹配 server_name 成功</p>\n</li>\n<li><p>No3：通配符在结束时匹配 server_name 成功</p>\n</li>\n<li><p>No4：正则表达式匹配 server_name 成功</p>\n</li>\n<li><p>No5：被默认的 default_server 处理，如果没有指定默认找第一个 server</p>\n</li>\n</ul>\n<h3 id=\"location指令\"><a href=\"#location指令\" class=\"headerlink\" title=\"location指令\"></a>location指令</h3><p><code>location</code> 指令是用来设置请求的 URI。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> localhost;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> /abc &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>location [ = | ~ | <del>* | ^</del> | @ ] &lt;uri&gt;{…}</td>\n<td>—</td>\n<td>server、location</td>\n</tr>\n</tbody></table>\n<p>uri 变量是待匹配的请求字符串，可以不包含正则表达式，也可以包含正则表达式，那么 Nginx 服务器在搜索匹配 location 的时候，是先使用不包含正则表达式进行匹配，找到一个匹配度最高的一个，然后在通过包含正则表达式的进行匹配，<strong>如果能匹配到直接访问正则表达式的，匹配不到，就使用刚才匹配度最高（前缀最长的）的那个 location 来处理请求</strong>。</p>\n<p>属性介绍:</p>\n<p>不带符号，要求必须以指定模式开头，但是不要求精确匹配</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> <span class=\"number\">127.0.0.1</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> /abc &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">default_type</span> text/plain;</span><br><span class=\"line\">\t\t<span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">\"access success\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以下访问都是正确的</span></span><br><span class=\"line\">http://192.168.91.200/abc</span><br><span class=\"line\">http://192.168.91.200/abc?p1=kele</span><br><span class=\"line\">http://192.168.91.200/abc/</span><br><span class=\"line\">http://192.168.91.200/abcdef</span><br></pre></td></tr></table></figure>\n\n<p><code>=</code> 是用于不包含正则表达式的 uri，必须与指定的模式精确匹配</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> <span class=\"number\">127.0.0.1</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> =/abc &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">default_type</span> text/plain;</span><br><span class=\"line\">\t\t<span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">\"access success\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 匹配成功</span></span><br><span class=\"line\">http://192.168.91.200/abc</span><br><span class=\"line\">http://192.168.91.200/abc?p1=TOM</span><br><span class=\"line\"><span class=\"comment\"># 匹配失败</span></span><br><span class=\"line\">http://192.168.91.200/abc/</span><br><span class=\"line\">http://192.168.91.200/abcdef</span><br></pre></td></tr></table></figure>\n\n<p><code>~</code> 是用于表示当前 uri 中包含了正则表达式，并且区分大小写</p>\n<p><code>~*</code> 是用于表示当前 uri 中包含了正则表达式，但是是不区分大小写</p>\n<p>换句话说，<strong>如果 uri 包含了正则表达式，需要用上述两个符号来标识</strong></p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用正则表达式，区分大小写</span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> <span class=\"number\">127.0.0.1</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> ~^/abc\\w$ &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">default_type</span> text/plain;</span><br><span class=\"line\">\t\t<span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">\"access success\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用正则表达式，不区分大小写</span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> <span class=\"number\">127.0.0.1</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> ~*^/abc\\w$ &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">default_type</span> text/plain;</span><br><span class=\"line\">\t\t<span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">\"access success\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>^~</code> 是用于不包含正则表达式的 uri，功能和不加符号的一致，唯一不同的是，如果请求匹配上了，那么就停止搜索其他模式了。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> <span class=\"number\">127.0.0.1</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span><span class=\"regexp\"> ^~/abc</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">default_type</span> text/plain;</span><br><span class=\"line\">\t\t<span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">\"access success\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>@</code> 前缀可以用来定义一个命名的 location,该 location 不处理正常的外部请求,一般用来当作标识供内部重定向使用。它们不能嵌套,也不能包含嵌套的 location。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> /try &#123;</span><br><span class=\"line\">    <span class=\"attribute\">try_files</span> <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ <span class=\"variable\">@name</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">location</span> /error &#123;</span><br><span class=\"line\">    <span class=\"attribute\">error_page</span> <span class=\"number\">404</span> = <span class=\"variable\">@name</span>;</span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">404</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">location</span> <span class=\"variable\">@name</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">\"<span class=\"variable\">@name</span>\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时访问 <code>/try</code> 或者 <code>/error</code> 都会返回 <code>@name</code>。</p>\n<h3 id=\"root-alias指令\"><a href=\"#root-alias指令\" class=\"headerlink\" title=\"root/alias指令\"></a>root/alias指令</h3><ul>\n<li><code>root</code> 指令是设置请求资源的根目录。默认值是 html。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>root &lt;path&gt;;</td>\n<td>root html;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<p>path 是 Nginx 服务器接收到请求以后查找资源的根目录路径。</p>\n<ul>\n<li><code>alias</code> 指令是用来更改 location 的 URI。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>alias &lt;path&gt;;</td>\n<td>—</td>\n<td>location</td>\n</tr>\n</tbody></table>\n<ul>\n<li>path 是修改后的根路径。</li>\n</ul>\n<p><strong>以上两个指令都可以来指定访问资源的路径，那么这两者之间的区别是什么？</strong></p>\n<blockquote>\n<p><strong>举例说明</strong></p>\n</blockquote>\n<ol>\n<li><p>在 <code>/usr/local/nginx/html</code> 目录下创建一个 images 目录,并在目录下放入一张图片 <code>mv.png</code> 图片。</p>\n<p>然后进入配置文件，添加如下内容：</p>\n</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> /images &#123;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /usr/local/nginx/html;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>访问图片的路径为：<code>http://192.168.91.200/images/mv.png</code></p>\n<ol start=\"2\">\n<li>如果把root改为alias</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> /images &#123;</span><br><span class=\"line\">    <span class=\"attribute\">alias</span> /usr/local/nginx/html;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再次访问上述地址，页面会出现 404 的错误，查看错误日志会发现是因为地址不对，所以验证了：</p>\n<ul>\n<li><p>root 的处理结果是：<strong>root 路径 + location 路径</strong>，location 路径包括匹配后面的请求，即包括 /mv.png</p>\n<p><code>/usr/local/nginx/html/images/mv.png</code></p>\n</li>\n</ul>\n<ul>\n<li>alias 的处理结果是：<strong>使用 alias 路径替换 location 路径</strong>，但是不会替换匹配后面的请求，即不会替换 /mv.png</li>\n</ul>\n<p>需要在 alias 后面路径改为：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> /images &#123;</span><br><span class=\"line\">    <span class=\"attribute\">alias</span> /usr/local/nginx/html/images;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>如果 location 路径是以 / 结尾,则 alias 也必须是以 / 结尾，root 没有要求。</li>\n</ol>\n<p>将上述配置修改为：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> /images/ &#123;</span><br><span class=\"line\">    <span class=\"attribute\">alias</span> /usr/local/nginx/html/images;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>访问就会出问题，查看错误日志还是路径不对，所以需要把 alias 后面加上 /</p>\n<p>小结：</p>\n<ul>\n<li>root 的处理结果是: root 路径 + location 路径</li>\n<li>alias 的处理结果是:使用 alias 路径替换 location 路径</li>\n<li>alias 是一个目录别名的定义，root 则是最上层目录的含义</li>\n<li>如果 location 路径是以 / 结尾,则 alias 也必须是以 / 结尾，root 没有要求<ul>\n<li><strong>alias 不支持 location 的 =</strong></li>\n</ul>\n</li>\n</ul>\n<p>这里再多言几句，alias 后指定的资源路径，Nginx 就会去这个路径下找资源，「忽略」location 本身的的请求，仅拼接 location 后面的请求。如果你想去拼接 location 本身，就用绝对路径（包括 location）的alias。</p>\n<h3 id=\"index指令\"><a href=\"#index指令\" class=\"headerlink\" title=\"index指令\"></a>index指令</h3><p><code>index</code> 指令是设置网站的默认首页。默认是 index.html。</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>index &lt;file&gt; …;</td>\n<td>index index.html;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<p><code>index</code> 后面可以跟多个设置，如果访问的时候没有指定具体访问的资源，则会从左往右依次进行查找，找到第一个为止。</p>\n<p>举例说明：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">root</span> /usr/local/nginx/html;</span><br><span class=\"line\">\t<span class=\"attribute\">index</span> index.html index.htm;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>访问该 location 的时候，可以通过 <code>http://ip:port/</code> 访问，地址后面如果不添加任何内容，则默认依次访问 index.html 和 index.htm，找到第一个来进行返回。</p>\n<h3 id=\"error-page指令\"><a href=\"#error-page指令\" class=\"headerlink\" title=\"error_page指令\"></a>error_page指令</h3><p>error_page 指令是设置网站的错误页面。</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>error_page &lt;code&gt; …… [=[response]] &lt;uri&gt;;</td>\n<td>—</td>\n<td>http、server、location ……</td>\n</tr>\n</tbody></table>\n<p>code 是响应码。</p>\n<p><strong>当出现对应的响应 code 后，如何来处理？</strong></p>\n<blockquote>\n<p><strong>举例说明</strong></p>\n</blockquote>\n<ol>\n<li>可以指定具体跳转的地址</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">error_page</span> <span class=\"number\">404</span> http://www.frx.com;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当页面产生 404 时，自动跳转到 <code>http://www.frx.com</code></p>\n<ol start=\"2\">\n<li>可以指定重定向地址</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">error_page</span> <span class=\"number\">404</span> /50x.html;</span><br><span class=\"line\">\t<span class=\"attribute\">error_page</span> <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span> /50x.html;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> =/50x.html &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span> html;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>产生错误页面时，重定向到 /50x.html，然后触发 location，最终访问的是 html 目录下的 50x.html 页面</p>\n<ol start=\"3\">\n<li>使用 location 的 @ 符合完成错误信息展示</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">error_page</span> <span class=\"number\">404</span> <span class=\"variable\">@jump_to_error</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> <span class=\"variable\">@jump_to_error</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">default_type</span> text/plain;</span><br><span class=\"line\">\t\t<span class=\"attribute\">return</span> <span class=\"number\">404</span> <span class=\"string\">'Not Found Page...'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可选项 <code>=[response]</code> 的作用是用来将相应代码更改为另外一个，如下：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">error_page</span> <span class=\"number\">404</span> =<span class=\"number\">200</span> /50x.html;</span><br><span class=\"line\">\t<span class=\"attribute\">location</span> =/50x.html &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span> html;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样的话，当返回 404 找不到对应的资源的时候，在浏览器上可以看到，最终返回的状态码是 200 而不是 404，这块需要注意下，编写 error_page 后面的内容，404 后面需要加空格，200 前面不能加空格。</p>\n<h2 id=\"静态资源优化配置\"><a href=\"#静态资源优化配置\" class=\"headerlink\" title=\"静态资源优化配置\"></a>静态资源优化配置</h2><p>Nginx 对静态资源如何进行优化配置。这里从三个属性配置进行优化：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">sendfile</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"><span class=\"attribute\">tcp_nopush</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"><span class=\"attribute\">tcp_nodeplay</span> <span class=\"literal\">on</span>;</span><br></pre></td></tr></table></figure>\n\n<p>建议三个都开启。如果想知道为什么，请往下看。</p>\n<h3 id=\"sendﬁle\"><a href=\"#sendﬁle\" class=\"headerlink\" title=\"sendﬁle\"></a>sendﬁle</h3><p>该指令是用来开启高效的文件传输模式。默认关闭，建议开启。</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sendﬁle &lt;on | off&gt;;</td>\n<td>sendﬁle oﬀ;</td>\n<td>http、server、location ……</td>\n</tr>\n</tbody></table>\n<p>请求静态资源的过程：客户端通过网络接口向服务端发送请求，操作系统将这些客户端的请求传递给服务器端应用程序，服务器端应用程序会处理这些请求，请求处理完成以后，操作系统还需要将处理得到的结果通过网络适配器传递回去。</p>\n<p>如：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> localhost；</span><br><span class=\"line\">\tlocation / &#123;</span><br><span class=\"line\">\t\t<span class=\"attribute\">root</span> html;</span><br><span class=\"line\">\t\t<span class=\"attribute\">index</span> index.html;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>假设在 html 目录下有一个 welcome.html 页面，访问地址：<code>http://192.168.91.200/welcome.html</code>。</p>\n<p>流程如下：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.24hrbukvg0lc.webp\" alt=\"image\"></p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.5l2efa1uqlo0.webp\" alt=\"image\"></p>\n<h3 id=\"tcp-nopush\"><a href=\"#tcp-nopush\" class=\"headerlink\" title=\"tcp_nopush\"></a>tcp_nopush</h3><p>该指令必须在 sendfile 打开的状态下才会生效，主要是用来提升网络包的传输「效率」。默认关闭。</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>tcp_nopush &lt;on | off&gt;;</td>\n<td>tcp_nopush oﬀ;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<h3 id=\"tcp-nodelay\"><a href=\"#tcp-nodelay\" class=\"headerlink\" title=\"tcp_nodelay\"></a>tcp_nodelay</h3><p>该指令必须在 keep-alive 连接开启的情况下才生效，来提高网络包传输的「实时性」。默认开启。</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>tcp_nodelay &lt;on | off&gt;;</td>\n<td>tcp_nodelay on;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.1iu7wmocw0ao.webp\" alt=\"image\"></p>\n<p><code>tcp_nopush</code> 就像大巴车，等所有旅客占满了座位，才开始发车到景点（客户端），而 <code>tcp_nodelay</code>，上来一个旅客，就马上发车到景点客户端）。</p>\n<h3 id=\"优化总结\"><a href=\"#优化总结\" class=\"headerlink\" title=\"优化总结\"></a>优化总结</h3><p>经过分析，『 tcp_nopush 』和『 tcp_nodelay 』看起来是「互斥的」，那么为什么要将这两个值都打开，这个大家需要知道的是在 Linux2.5.9 以后的版本中两者是可以兼容的，三个指令都开启的好处是，sendfile 可以开启高效的文件传输模式，『 tcp_nopush 』开启可以确保在发送到客户端之前数据包已经充分「填满」，这大大减少了网络开销，并加快了文件发送的速度。然后，当它到达最后一个可能因为没有「填满」而暂停的数据包时，Nginx 会忽略『 tcp_nopush 』参数， 然后，『 tcp_nodelay 』强制套接字发送数据。由此可知，『 tcp_nopush 』可以与『 tcp_nodelay 』一起设置，它比单独配置『 tcp_nodelay 』具有更强的性能。</p>\n<p>所以回归开头，我们可以使用如下配置来优化 Nginx 静态资源的处理：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 三个都开启</span></span><br><span class=\"line\"><span class=\"attribute\">sendfile</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"><span class=\"attribute\">tcp_nopush</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"><span class=\"attribute\">tcp_nodelay</span> <span class=\"literal\">on</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"静态资源压缩配置\"><a href=\"#静态资源压缩配置\" class=\"headerlink\" title=\"静态资源压缩配置\"></a>静态资源压缩配置</h2><p>经过上述内容的优化，我们再次思考一个问题，假如在满足上述优化的前提下，我们传送一个 1M 的数据和一个 10M 的数据那个效率高？答案显而易见，<strong>传输内容小，速度就会快</strong>。那么问题又来了，同样的内容，如果把大小降下来，我们脑袋里面要蹦出一个词就是「压缩」，接下来，我们来学习 Nginx 的静态资源压缩模块。</p>\n<p>在 Nginx 的配置文件中可以通过配置 gzip 来对静态资源进行压缩，相关的指令可以配置在 http 块、server 块和 location 块中，Nginx 可以通过对这些指令进行解析和处理：</p>\n<ul>\n<li><code>ngx_http_gzip_module</code> 模块</li>\n<li><code>ngx_http_gzip_static_module</code> 模块</li>\n<li><code>ngx_http_gunzip_module</code> 模块</li>\n</ul>\n<p>接下来我们从以下内容进行学习：</p>\n<ul>\n<li>Gzip 各模块支持的配置指令</li>\n<li>Gzip 压缩功能的配置</li>\n<li>Gzip 和 sendfile 的冲突解决</li>\n<li>浏览器不支持 Gzip 的解决方案</li>\n</ul>\n<h3 id=\"Gzip模块配置指令\"><a href=\"#Gzip模块配置指令\" class=\"headerlink\" title=\"Gzip模块配置指令\"></a>Gzip模块配置指令</h3><p>接下来所学习的指令都来自 <code>ngx_http_gzip_module</code> 模块，该模块会在 Nginx 安装的时候内置到 Nginx 的安装环境中，也就是说我们可以直接使用这些指令。</p>\n<ul>\n<li><code>gzip</code> 指令是用于开启或者关闭 Gzip 功能。默认关闭</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gzip &lt;on | off&gt;;</td>\n<td>gzip off;</td>\n<td>http、server、location ……</td>\n</tr>\n</tbody></table>\n<p>注意：只有该指令为打开状态，下面的指令才有效果</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">gzip</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>gzip_types</code> 指令可以根据响应页的 MIME 类型选择性地开启 Gzip 压缩功能。默认是 text/html</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gzip_types &lt;mime-type&gt; …… ;</td>\n<td>gzip_types text/html;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<p>所选择的值可以从 mime.types 文件中进行查找，也可以使用 * 代表所有。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">gzip_types</span> application/javascript;</span><br><span class=\"line\">\t<span class=\"comment\"># * 代表所有</span></span><br><span class=\"line\">\t<span class=\"attribute\">gzip_types</span> *</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>gzip_comp_level</code> 指令是用于设置 Gzip 压缩程度，级别从 1-9，1 表示要是程度最低，要是效率最高，9 刚好相反，压缩程度最高，但是效率最低、最费时间。默认值是 1</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gzip_comp_level &lt;level&gt;;</td>\n<td>gzip_comp_level 1;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">gzip_comp_level</span> <span class=\"number\">6</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>gzip_vary</code> 指令是用于设置使用 Gzip 进行压缩发送是否携带『Vary:Accept-Encoding』头域的响应头部。主要是告诉接收方，所发送的数据经过了 Gzip 压缩处理。默认关闭</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gzip_vary &lt;on | off&gt;;</td>\n<td>gzip_vary off;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.4bsq0xpu9s20.webp\" alt=\"image\"></p>\n<ul>\n<li><code>gzip_buffers</code> 指令是用于处理请求压缩的缓冲区数量和大小</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gzip_buffers &lt;number&gt; &lt;size&gt;;</td>\n<td>gzip_buffers 32 4k | 16 8k;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<p>其中 number 是指定 Nginx 服务器向系统申请缓存空间个数，size 指的是每个缓存空间的大小。主要实现的是申请 number 个每个大小为 size 的内存空间。这个值的设定一般会和服务器的操作系统有关，所以建议此项不设置，使用默认值即可。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">gzip_buffers</span> <span class=\"number\">4</span> <span class=\"number\">16K</span>;\t  <span class=\"comment\"># 缓存空间大小</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>gzip_disable</code> 指令是针对不同种类客户端发起的请求，可以选择性地开启和关闭 Gzip 功能</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gzip_disable &lt;regex&gt; …… ;</td>\n<td>—</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<p>regex 是根据客户端的浏览器标志(user-agent)来设置，支持使用正则表达式。指定的浏览器标志不使用 Gzip.该指令一般是用来排除一些明显不支持 Gzip 的浏览器。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">gzip_disable</span> <span class=\"string\">\"MSIE [1-6]\\.\"</span>;</span><br></pre></td></tr></table></figure>\n\n<p><code>gzip_http_version</code> 指令是针对不同的 HTTP 协议版本，可以选择性地开启和关闭 Gzip 功能。默认是 1.1 版本</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gzip_http_version &lt;1.0 | 1.1&gt;;</td>\n<td>gzip_http_version 1.1;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<p>该指令是指定使用 Gzip 的 HTTP 最低版本，该指令一般采用默认值即可。</p>\n<ul>\n<li><code>gzip_min_length</code> 指令是针对传输数据的大小，可以选择性地开启和关闭 Gzip 功能</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gzip_min_length &lt;length&gt;;</td>\n<td>gzip_min_length 20;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<p>Nignx 计量大小的单位：bytes [字节] / kb [千字节] / M [兆]</p>\n<p>例如: 1024 / 10k | K / 10m | M</p>\n<p>Gzip 压缩功能对大数据的压缩效果明显，但是如果要压缩的数据比较小的话，可能出现越压缩数据量越大的情况，因此我们需要根据响应内容的大小来决定是否使用 Gzip 功能，响应页面的大小可以通过头信息中的 <code>Content-Length</code> 来获取。但是如何使用了 Chunk 编码动态压缩，该指令将被忽略。建议设置为 1K 或以上。</p>\n<ul>\n<li><code>gzip_proxied</code> 指令设置是否对服务端返回的结果进行 Gzip 压缩</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gzip_proxied &lt;off | expired | no-cache | no-store | private | no_last_modified | no_etag | auth | any&gt;;</td>\n<td>gzip_proxied off;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<ul>\n<li>off：关闭 Nginx 服务器对后台服务器返回结果的 Gzip 压缩</li>\n<li>expired：如果 header 头中包含 『Expires』头信息，启用压缩</li>\n<li>no-cache：如果 header 头中包含 『Cache-Control:no-cache』头信息，启用压缩</li>\n<li>no-store：如果 header 头中包含 『Cache-Control:no-store』头信息，启用压缩</li>\n<li>private：如果 header 头中包含 『Cache-Control:private』头信息，启用压缩</li>\n<li>no_last_modified：如果 header 头中不包含 『Last-Modified』头信息，启用压缩</li>\n<li>no_etag：如果 header 头中不包含 『ETag』 头信息，启用压缩</li>\n<li>auth：如果 header 头中包含 『Authorization』 头信息，启用压缩</li>\n<li>any：无条件启用压缩</li>\n</ul>\n<h3 id=\"Gzip压缩功能配置模板\"><a href=\"#Gzip压缩功能配置模板\" class=\"headerlink\" title=\"Gzip压缩功能配置模板\"></a>Gzip压缩功能配置模板</h3><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">gzip</span> <span class=\"literal\">on</span>;  \t\t\t   \t\t <span class=\"comment\"># 开启 Gzip 功能</span></span><br><span class=\"line\"><span class=\"attribute\">gzip_types</span> *;\t\t   \t \t <span class=\"comment\"># 压缩源文件类型,根据具体的访问资源类型设定</span></span><br><span class=\"line\"><span class=\"attribute\">gzip_comp_level</span> <span class=\"number\">6</span>;\t   \t\t <span class=\"comment\"># Gzip 压缩级别</span></span><br><span class=\"line\"><span class=\"attribute\">gzip_min_length</span> <span class=\"number\">1k</span>;          <span class=\"comment\"># 进行压缩响应页面的最小长度，content-length</span></span><br><span class=\"line\"><span class=\"attribute\">gzip_buffers</span> <span class=\"number\">4</span> <span class=\"number\">16K</span>;\t         <span class=\"comment\"># 缓存空间大小</span></span><br><span class=\"line\"><span class=\"attribute\">gzip_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">1</span>;       <span class=\"comment\"># 指定压缩响应所需要的最低 HTTP 请求版本</span></span><br><span class=\"line\"><span class=\"attribute\">gzip_vary</span>  <span class=\"literal\">on</span>;\t\t         <span class=\"comment\"># 往头信息中添加压缩标识</span></span><br><span class=\"line\"><span class=\"attribute\">gzip_disable</span> <span class=\"string\">\"MSIE [1-6]\\.\"</span>; <span class=\"comment\"># 对 IE6 以下的版本都不进行压缩</span></span><br><span class=\"line\"><span class=\"attribute\">gzip_proxied</span>  <span class=\"literal\">off</span>;           <span class=\"comment\"># Nginx 作为反向代理压缩服务端返回数据的条件</span></span><br></pre></td></tr></table></figure>\n\n<p>这些配置在很多地方可能都会用到，所以我们可以将这些内容抽取到一个配置文件中，然后通过 include 指令把配置文件再次加载到 nginx.conf 配置文件中，方法使用。</p>\n<p>创建压缩配置文件：<code>nginx_gzip.conf</code>，添加如下内容：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">gzip</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"><span class=\"attribute\">gzip_types</span> *;</span><br><span class=\"line\"><span class=\"attribute\">gzip_comp_level</span> <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"attribute\">gzip_min_length</span> <span class=\"number\">1k</span>;</span><br><span class=\"line\"><span class=\"attribute\">gzip_buffers</span> <span class=\"number\">4</span> <span class=\"number\">16K</span>;</span><br><span class=\"line\"><span class=\"attribute\">gzip_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"attribute\">gzip_vary</span>  <span class=\"literal\">on</span>;</span><br><span class=\"line\"><span class=\"attribute\">gzip_disable</span> <span class=\"string\">\"MSIE [1-6]\\.\"</span>;</span><br><span class=\"line\"><span class=\"attribute\">gzip_proxied</span>  <span class=\"literal\">off</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在 Nginx 核心配置文件 <code>nginx.conf</code> 进行引入，添加如下内容：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">include</span> nginx_gzip.conf</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Gzip和sendfile共存问题\"><a href=\"#Gzip和sendfile共存问题\" class=\"headerlink\" title=\"Gzip和sendfile共存问题\"></a>Gzip和sendfile共存问题</h3><p>前面在讲解 sendfile 的时候，提到过，开启 sendfile 以后，在读取磁盘上的静态资源文件的时候，可以减少拷贝的次数，可以不经过用户进程将静态文件通过网络设备发送出去，但是 Gzip 要想对资源压缩，是需要经过用户进程进行操作的。Nginx 设置了Gzip 之后，静态文件的 sendfile 就不起作用了。所以要考虑如何解决两个设置的共存问题。</p>\n<p>可以使用 <code>ngx_http_gzip_static_module</code> 模块的 <code>gzip_static</code> 指令来解决。</p>\n<h3 id=\"gzip-static指令\"><a href=\"#gzip-static指令\" class=\"headerlink\" title=\"gzip_static指令\"></a>gzip_static指令</h3><p><code>gzip_static</code> 指令用于在检查与访问资源同名的 .gz 文件时，response 中以 Gzip 相关的 header 返回 .gz 文件的内容。默认关闭。</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gzip_static &lt;on | off | always&gt;;</td>\n<td>gzip_static off;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">gzip_static</span> <span class=\"literal\">on</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在配置文件添加上述命令后，会报一个错误：<code>unknown directive &quot;gzip_static&quot;</code>，主要的原因是 Nginx 默认是没有添加 ngx_http_gzip_static_module 模块。如何来添加？</p>\n<h3 id=\"Nginx模块添加\"><a href=\"#Nginx模块添加\" class=\"headerlink\" title=\"Nginx模块添加\"></a>Nginx模块添加</h3><ol>\n<li>查询当前 Nginx 的配置参数，即查看 <code>configure arguments</code> 的配置信息，拷贝出来</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -V</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 拷贝 configure arguments 后面的数据</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--prefix=/usr/local/nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>将 Nginx 安装目录下 sbin 目录中的 nginx 二进制文件进行更名备份</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx/sbin</span><br><span class=\"line\">mv nginx nginx.backup</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>进入 Nginx 的安装目录</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /root/nginx/core/nginx-1.21.6</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>执行 make clean 清空之前编译的内容</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make clean</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>使用 configure 来配置参数，添加 <code>ngx_http_gzip_static_module</code> 模块，记得加上第1步拷贝的配置信息</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --with-http_gzip_static_module  <span class=\"comment\"># 记得添加 configure arguments 后的数据</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>使用 make 命令进行编译</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>将 objs 目录下的 nginx 二进制执行文件移动到 nginx 安装目录下的 sbin 目录中</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv /opt/nginx/core/nginx-1.21.6/objs/nginx /usr/<span class=\"built_in\">local</span>/nginx/sbin</span><br></pre></td></tr></table></figure>\n\n<p>如果不执行第（2）步进行备份，则该步骤会覆盖原来的 nginx 可执行文件</p>\n<ol start=\"8\">\n<li>在源码目录下执行更新命令</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /opt/nginx/core/nginx-1.21.6</span><br><span class=\"line\">make upgrade</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"gzip-static测试\"><a href=\"#gzip-static测试\" class=\"headerlink\" title=\"gzip_static测试\"></a>gzip_static测试</h3><p>准备好一个 jquery.js 文件，放在 html 目录下</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.576ef03x00c0.webp\" alt=\"image\"></p>\n<ol>\n<li>直接访问 <code>http://192.168.91.200/jquery.js</code></li>\n</ol>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.2b8dhabn0cbo.webp\" alt=\"image\"></p>\n<ol start=\"2\">\n<li>使用 Gzip 命令进行压缩</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入 html 目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx/html</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 压缩 js 文件</span></span><br><span class=\"line\">gzip jquery.js</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>再次访问 <code>http://192.168.91.200/jquery.js</code></li>\n</ol>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.4ivj1d091pg.webp\" alt=\"image\"></p>\n<p>可以看出 <code>Content-Length</code> 的大小已经变得非常小。</p>\n<h2 id=\"静态资源缓存配置\"><a href=\"#静态资源缓存配置\" class=\"headerlink\" title=\"静态资源缓存配置\"></a>静态资源缓存配置</h2><p>当浏览器请求 Nginx 服务器的资源后，我们可以让这些资源缓存在浏览器里，这样再一次请求相同的资源时，无需请求 Nginx 服务器，直接从浏览器的缓存里获取，减少 Nginx 服务器的压力。</p>\n<h3 id=\"什么是缓存和Web缓存\"><a href=\"#什么是缓存和Web缓存\" class=\"headerlink\" title=\"什么是缓存和Web缓存\"></a>什么是缓存和Web缓存</h3><p>缓存（cache），原始意义是指访问速度比一般随机存取存储器（RAM）快的一种高速存储器，通常它不像系统主存那样使用 DRAM 技术，而使用昂贵但较快速的 SRAM 技术。缓存的设置是所有现代计算机系统发挥高性能的重要因素之一。</p>\n<p>Web 缓存是指一个 Web 资源（如 html 页面，图片，js，数据等）存在于 Web 服务器和客户端（浏览器）之间的副本。缓存会根据进来的请求保存输出内容的副本；当下一个请求来到的时候，如果是相同的 URL，缓存会根据缓存机制决定是直接使用副本响应访问请求，还是向源服务器再次发送请求。比较常见的就是浏览器会缓存访问过网站的网页，当再次访问这个 URL 地址的时候，如果网页没有更新，就不会再次下载网页，而是直接使用本地缓存的网页。只有当网站明确标识资源已经更新，浏览器才会再次下载网页。</p>\n<h3 id=\"Web缓存的种类\"><a href=\"#Web缓存的种类\" class=\"headerlink\" title=\"Web缓存的种类\"></a>Web缓存的种类</h3><p>客户端缓存</p>\n<ul>\n<li>浏览器缓存</li>\n</ul>\n<p>服务端缓存</p>\n<ul>\n<li>Nginx</li>\n<li>Redis</li>\n<li>Memcached 等</li>\n</ul>\n<h3 id=\"为什么要用浏览器缓存\"><a href=\"#为什么要用浏览器缓存\" class=\"headerlink\" title=\"为什么要用浏览器缓存\"></a>为什么要用浏览器缓存</h3><ul>\n<li>成本最低的一种缓存实现</li>\n<li>减少网络带宽消耗</li>\n<li>降低服务器压力</li>\n<li>减少网络延迟，加快页面打开速度</li>\n</ul>\n<h3 id=\"浏览器缓存执行流程\"><a href=\"#浏览器缓存执行流程\" class=\"headerlink\" title=\"浏览器缓存执行流程\"></a>浏览器缓存执行流程</h3><p>HTTP 协议中和页面缓存相关的字段，我们先来认识下：</p>\n<table>\n<thead>\n<tr>\n<th>header</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Expires</td>\n<td>缓存过期的日期和时间</td>\n</tr>\n<tr>\n<td>Cache-Control</td>\n<td>设置和缓存相关的配置信息</td>\n</tr>\n<tr>\n<td>Last-Modified</td>\n<td>请求资源最后修改时间</td>\n</tr>\n<tr>\n<td>ETag</td>\n<td>请求变量的实体标签的当前值，比如文件的 MD5 值</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.209c4krjzgf4.webp\" alt=\"image\"></p>\n<ol>\n<li>用户首次通过浏览器发送请求到服务端获取数据，客户端是没有对应的缓存，所以需要发送 request 请求来获取数据；</li>\n<li>服务端接收到请求后，获取服务端的数据及服务端缓存的允许后，返回 200 的成功状态码并且在响应头上附上对应资源以及缓存信息；</li>\n<li>当用户再次访问相同资源的时候，客户端会在浏览器的缓存目录中查找是否存在响应的缓存文件；</li>\n<li>如果没有找到对应的缓存文件，则走第2步；</li>\n<li>如果有缓存文件，接下来对缓存文件是否过期进行判断，过期的判断标准是(Expires)；</li>\n<li>如果没有过期，则直接从本地缓存中返回数据进行展示（强缓存）；</li>\n<li>如果 Expires 过期，接下来需要判断缓存文件是否发生过变化；</li>\n<li>判断的标准有两个（都要判断），一个是 ETag(Entity Tag)，一个是 Last-Modified；</li>\n<li>判断结果是未发生变化，则服务端返回 304，直接从缓存文件中获取数据（弱缓存）；</li>\n<li>如果判断是发生了变化，重新从服务端获取数据，并根据缓存协商(服务端所设置的是否需要进行缓存数据的设置)来进行数据缓存。</li>\n</ol>\n<h3 id=\"浏览器缓存相关指令\"><a href=\"#浏览器缓存相关指令\" class=\"headerlink\" title=\"浏览器缓存相关指令\"></a>浏览器缓存相关指令</h3><p>Nginx 需要进行缓存相关设置，就需要用到如下的指令。</p>\n<h4 id=\"expires指令\"><a href=\"#expires指令\" class=\"headerlink\" title=\"expires指令\"></a>expires指令</h4><p>该指令用来控制页面缓存的作用。可以通过该指令控制 HTTP 应答中的『Expires』和『Cache-Control』</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>expires [modified] &lt;time&gt;; expires &lt;epoch | max | off&gt;;</td>\n<td>expires off;</td>\n<td>http、server、location</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>time：可以整数也可以是负数，指定过期时间，单位为 s（秒）。如果是负数，Cache-Control 则为 no-cache，如果为整数或 0，则 Cache-Control 的值为 max-age=time</p>\n</li>\n<li><p>epoch：指定 Expires 的值为『’1 January,1970,00:00:01 GMT’』，即 1970-01-01 00:00:00 ，Cache-Control 的值 no-cache</p>\n<p>因为 Expires（缓存过期时间）是 1970 年，所以不缓存。</p>\n</li>\n<li><p>max：指定 Expires 的值为『’31 December2037 23:59:59GMT’ 』，即(2037-12-31 23:59:59，Cache-Control 的值为 10 年</p>\n<p>因为 Expires（缓存过期时间）是 2037 年，虽然还有 16 年过期，但是最大只能缓存 10 年。</p>\n</li>\n<li><p>off：默认不缓存</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>例子 1</strong></p>\n</blockquote>\n<p>在配置文件添加如下内容：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">location</span> <span class=\"regexp\">~ .*\\.(html|js|css|png|jpg|jpeg|gif)$</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">    <span class=\"attribute\">expires</span> max</span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>发送请求：<code>http://192.168.91.200/jquery.js</code></p>\n<p>查看开发者工具(F12)的 NetWork，如图：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.4x3yczk58lk0.webp\" alt=\"image\"></p>\n<p>315360000 折算下来正好是 10 年。</p>\n<blockquote>\n<p><strong>其他格式</strong></p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">expires</span> <span class=\"number\">30s</span>;  <span class=\"comment\"># 表示把数据缓存 30 秒</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">expires</span> <span class=\"number\">30m</span>;  <span class=\"comment\"># 表示把数据缓存 30 分</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">expires</span> <span class=\"number\">10h</span>;  <span class=\"comment\"># 表示把数据缓存 10 小时</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">expires</span> <span class=\"number\">1d</span>;   <span class=\"comment\"># 表示把数据缓存 1 天</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"add-header指令\"><a href=\"#add-header指令\" class=\"headerlink\" title=\"add_header指令\"></a>add_header指令</h4><p>add_header 指令是用来添加指定的响应头和响应值。</p>\n<p>add_header 是响应体的指令，不是请求时的指令（比如 expires ），并且 add_header 也有和 expires 一样的功能。</p>\n<p>如果 expires 和 add_header 同时开启的情况下，则 add_header 优于 expires 生效。</p>\n<table>\n<thead>\n<tr>\n<th>语法</th>\n<th>默认值</th>\n<th>位置</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>add_header &lt;name&gt; &lt;value&gt; [always];</td>\n<td>—</td>\n<td>location &gt; server &gt; http &gt; ……</td>\n</tr>\n</tbody></table>\n<p>always 可选，代表总是添加。</p>\n<p>Cache-Control 作为响应头信息，可以在 Nginx 配置文件设置如下缓存响应指令：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">add_header</span> Cache-control must-revalidate;</span><br><span class=\"line\"><span class=\"attribute\">add_header</span> Cache-control <span class=\"literal\">no</span>-cache;</span><br><span class=\"line\"><span class=\"attribute\">add_header</span> Cache-control <span class=\"literal\">no</span>-store;</span><br><span class=\"line\"><span class=\"attribute\">add_header</span> Cache-control <span class=\"literal\">no</span>-transform;</span><br><span class=\"line\"><span class=\"attribute\">add_header</span> Cache-control public;</span><br><span class=\"line\"><span class=\"attribute\">add_header</span> Cache-control private;</span><br><span class=\"line\"><span class=\"attribute\">add_header</span> Cache-control proxy-revalidate;</span><br><span class=\"line\"><span class=\"attribute\">add_header</span> Cache-Control max-age=&lt;seconds&gt;;  <span class=\"comment\"># 秒</span></span><br><span class=\"line\"><span class=\"attribute\">add_header</span> Cache-control s-maxage=&lt;seconds&gt;; <span class=\"comment\"># 秒</span></span><br></pre></td></tr></table></figure>\n\n<p>描述：</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>must-revalidate</td>\n<td>可缓存但必须再向源服务器进行确认</td>\n</tr>\n<tr>\n<td>no-cache</td>\n<td>数据内容不能被缓存，每次请求都重新访问服务器，若有 max-age，则缓存期间不访问服务器</td>\n</tr>\n<tr>\n<td>no-store</td>\n<td>不缓存请求或响应的任何内容，暂存也不可以(临时文件夹中不能暂存该资源)</td>\n</tr>\n<tr>\n<td>no-transform</td>\n<td>代理不可更改媒体类型</td>\n</tr>\n<tr>\n<td>public</td>\n<td>可以被任何缓存区缓存，如: 浏览器、服务器、代理服务器等</td>\n</tr>\n<tr>\n<td>private（默认）</td>\n<td>只能在浏览器中缓存，只有在第一次请求的时候才访问服务器，若有 max-age，则缓存期间不访问服务器</td>\n</tr>\n<tr>\n<td>proxy-revalidate</td>\n<td>要求中间缓存服务器对缓存的响应有效性再进行确认</td>\n</tr>\n<tr>\n<td>max-age=&lt;秒&gt;</td>\n<td>过期时间，即以秒为单位的缓存时间</td>\n</tr>\n<tr>\n<td>s-maxage=&lt;秒&gt;</td>\n<td>公共缓存服务器响应的最大 Age 值</td>\n</tr>\n</tbody></table>\n<p>值得注意的是：</p>\n<ul>\n<li>设置了 no-cache 或者 private 后，打开新窗口时会重新访问服务器。若设置 max-age，则缓存期间不访问服务器</li>\n<li>设置 private 和正数的 max-age 时，后退时候不会访问服务器</li>\n<li>设置 no-cache 和正数的 max-age 时，后退时会访问服务器</li>\n</ul>\n<h3 id=\"Nginx服务端缓存\"><a href=\"#Nginx服务端缓存\" class=\"headerlink\" title=\"Nginx服务端缓存\"></a>Nginx服务端缓存</h3><p>在 Web 缓存的种类，我们提到了 Ngixn 服务端缓存，而上面仅仅介绍了在浏览器进行缓存，而因为 Ngixn 服务端缓存的内容比较多，所以前往 <strong>Nginx - 缓存集成</strong> 进行学习。</p>\n"},{"title":"Nginx安装","date":"2022-11-08T16:00:00.000Z","_content":"# Nginx 安装\n\n## Nginx版本介绍\n\nNginx 的官方网站为: [http://nginx.org](http://nginx.org/)\n\n打开源码可以看到如下的页面内容\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.4wlfyfbk53i0.webp)\n\nNginx 的官方下载网站为 [http://nginx.org/en/download.html](http://nginx.org/en/download.html)，当然你也可以之间在首页选中右边的 download 进入版本下载网页。在下载页面我们会看到如下内容：\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.3e7olqaurau0.webp)\n\n## 获取Nginx源码\n\n[http://nginx.org/download/](http://nginx.org/download/)\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.3cu95u4zd440.webp)\n\n## 准备服务器系统\n\n### 环境准备\n\n- 虚拟机：VMware WorkStation\n- Linux 系统：Centos7\n- 上传软件工具：MobaXterm、xsheel,SecureCRT 之一\n- 网络\n\n### 确认CentOS的内核\n\n准备一个内核为 2.6 及以上版本的操作系统，因为 linux2.6 及以上内核才支持 epoll,而 Nginx 需要解决高并发压力问题是需要用到 epoll，所以我们需要有这样的版本要求。\n\n我们可以使用 `uname -a` 命令来查询linux的内核版本\n\n```sh\n[root@master ~]# uname -a\nLinux master 3.10.0-1160.el7.x86_64 #1 SMP Mon Oct 19 16:18:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux\n```\n\n### 确保Centos能联网\n\n```sh\nping www.baidu.com\n```\n\n三种网络模式：桥接、主机、NAT，建议使用虚拟机使用 NAT 模式\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.4ga3snmdtsa0.webp)\n\nNAT 模式下，只要主机有网络，则虚拟机也有网络。\n\n### 确认关闭防火墙\n\n这一项的要求仅针对于那些对 Linux 系统的防火墙设置规则不太清楚的，建议大家把防火墙都关闭掉，因为把防火墙关闭掉，可以省掉后续 Nginx 使用过程中遇到的诸多问题。\n\n关闭的方式有如下两种:\n\n```sh\nsystemctl stop firewalld      # 关闭运行的防火墙，系统重新启动后，防火墙将重新打开\nsystemctl disable firewalld   # 永久关闭防火墙，，系统重新启动后，防火墙依然关闭\nsystemctl status firewalld\t # 查看防火墙状态\n```\n\n如果不想关闭防火墙，记得开放 Nginx 的访问端口\n\n### 确认停用selinux\n\nselinux(security-enhanced linux)，美国安全局对于强制访问控制的实现，在 Linux2.6 内核以后的版本中，selinux 已经成功内核中的一部分。可以说selinux 是 Linux 史上最杰出的新安全子系统之一。虽然有了 selinux，我们的系统会更安全，但是对于使用 Nginx 或者其他的学习过程中，会有很多设置，所以这块建议大家将 selinux 进行关闭。\n\n`sestatus` 查看状态\n\n```sh\n[root@master ~]# sestatus\nSELinux status:                 disabled\n```\n\n如果查看不是 disabled 状态，我们可以通过修改配置文件来进行设置,修改 `SELINUX=disabled`，然后重启下系统即可生效。\n\n```sh\nvim /etc/selinux/config\n```\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.1063r7fk4lz4.webp)\n\n## Nginx环境安装\n\nNginx 的安装方式有两种分别是：\n\n- 通过 Nginx 源码\n  - 通过 Nginx 源码简单安装\n  - 通过 Nginx 源码复杂安装\n- 通过 yum 安装\n\n如果通过 Nginx 源码安装需要提前准备安装好环境，我相信，任何 C 语言编写的软件都离不开这些环境，安装后所有软件都会收益，往下看。\n\n### GCC编译器\n\nNginx 是使用 C 语言编写的程序，因此想要运行 Nginx 就需要安装一个编译工具。GCC 就是一个开源的编译器集合，用于处理各种各样的语言，其中就包含了 C 语言。\n\n使用命令 `yum install -y gcc` 来安装\n\n安装成功后，可以通过 `gcc --version` 来查看 gcc 是否安装成功\n\n```sh\n# 安装 gcc\nyum install -y gcc\n\n# 查看 gcc 版本\ngcc --version\n```\n\n### PCRE\n\nNginx 在编译过程中需要使用到 PCRE 库（perl Compatible Regular Expressoin 兼容正则表达式库)，因为在 Nginx 的 Rewrite 模块和 Http 核心模块都会使用到 PCRE 正则表达式语法。\n\n可以使用命令 `yum install -y pcre pcre-devel` 来进行安装\n\n安装成功后，可以通过 `rpm -qa pcre pcre-devel` 来查看是否安装成功\n\n```sh\n# 安装 PCRE 和 pcre-devel\nyum install -y pcre pcre-devel\n\n# 查看 PCRE 是否安装成功\nrpm -qa pcre pcre-devel\n```\n\n### zlib\n\nzlib 库提供了开发人员的压缩算法，在 Nginx 的各个模块中需要使用 gzip 压缩，所以我们也需要提前安装其库及源代码 zlib 和 zlib-devel。\n\n可以使用命令 `yum install -y zlib zlib-devel` 来进行安装\n\n安装成功后，可以通过 `rpm -qa zlib zlib-devel` 来查看是否安装成功\n\n```sh\n# 安装 zlib 和 zlib-devel\nyum install -y zlib zlib-devel\n\n# 查看 zlib 和 zlib-devel 是否安装成功\nrpm -qa zlib zlib-devel\n```\n\n### OpenSSL\n\nOpenSSL 是一个开放源代码的软件库包，应用程序可以使用这个包进行安全通信，并且避免被窃听。\n\nSSL：Secure Sockets Layer 安全套接协议的缩写，可以在 Internet 上提供秘密性传输，其目标是保证两个应用间通信的保密性和可靠性。在 Nginx 中，如果服务器需要提供安全网页时就需要用到 OpenSSL 库，所以我们需要对 OpenSSL 的库文件及它的开发安装包进行一个安装。\n\n可以使用命令 `yum install -y openssl openssl-devel` 来进行安装\n\n安装成功后，可以通过 `rpm -qa openssl openssl-devel` 来查看是否安装成功\n\n```sh\n# 安装 OpenSSL 库\nyum install -y openssl openssl-devel\n\n# 查看 OpenSSL 是否安装成功\nrpm -qa openssl openssl-devel\n```\n\n### 全部安装命令\n\n上述命令，一个个来的话比较麻烦，我们也可以通过一条命令来进行安装\n\n`yum install -y gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel` 进行全部安装。\n\n```sh\n# 全部安装 GCC、PCRE、zlib、OpenSSL\nyum install -y gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel\n\n# 查看安装版本\nrpm -qa pcre pcre-devel zlib zlib-devel openssl openssl-devel\n```\n\n## Nginx安装\n\nNginx 的官方下载网站为 [http://nginx.org/en/download.html](http://nginx.org/en/download.html)\n\n### 源码简单安装\n\n1. 进入官网查找需要下载版本的链接地址，然后使用 wget 命令进行下载，这里下载在 `/opt` 目录下\n\n```sh\ncd /opt\n\nwget http://nginx.org/download/nginx-1.21.6.tar.gz\n```\n\n这里下载的版本是 1.21.6，请根据需求更改版本号。如果 wget 命令下载速度慢，可以先下载到 Windows 系统，再使用工具上传到 Linux 下。\n\n2. 建议大家将下载的资源进行包管理，在 `/opt` 目录下创建 `nginx/core` 目录，`-p` 代表允许创建多级目录\n\n```sh\n# 创建指定目录\nmkdir -p /opt/nginx/core\n\n# 移动到指定目录\nmv nginx-1.21.6.tar.gz nginx/core\n```\n\n3. 解压缩\n\n```sh\n# 进入指定目录\ncd /opt/nginx/core\n\n# 解压\ntar -xzf nginx-1.21.6.tar.gz\n```\n\n4. 进入资源文件中，发现 configure 文件，执行该文件\n\n```sh\n# 进入解压出的目录\ncd nginx-1.21.6/\n\n# 执行 configure \n./configure --prefix=/usr/local/nginx\n```\n\n5. 编译\n\n```sh\nmake\n```\n\n6. 安装\n\n```sh\nmake install\n```\n\n7. 查看 nginx 的安装位置\n\n```sh\nwhereis nginx\n```\n\n```sh\n[root@master sbin]# whereis nginx\nnginx: /usr/local/nginx\n```\n\n8. 启动测试。启动文件在安装目录下的 sbin 命令\n\n```sh\n# 进入启动文件的目录\ncd /usr/local/nginx/sbin\n\n# 执行 nginx 文件\n./nginx\n```\n\n访问自己 Linux 的 IP 地址，不需要加端口，如果看到如下图，代表成功\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.6xop32js8180.webp)\n\n### yum安装\n\n使用源码进行简单安装，我们会发现安装的过程比较繁琐，需要提前准备 GCC 编译器、PCRE 兼容正则表达式库、zlib 压缩库、OpenSSL 安全通信的软件库包，然后才能进行 Nginx 的安装。下面使用 yum 安装，过程更简单。\n\n1. 安装 yum-utils\n\n```sh\nsudo yum  install -y yum-utils\n```\n\n2. 添加 yum 源文件\n\n```sh\nvim /etc/yum.repos.d/nginx.repo\n```\n\n3. 添加如下内容\n\n```sh\n[nginx-stable]\nname=nginx stable repo\nbaseurl=http://nginx.org/packages/centos/$releasever/$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\n\n[nginx-mainline]\nname=nginx mainline repo\nbaseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\n```\n\n4. 使用 yum 安装 Nginx\n\n```sh\nsudo yum install -y nginx\n```\n\n5. 查看是否安装成功\n\n```sh\nyum list | grep nginx\n```\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.36wvsdkk9zc0.webp)\n\n6. 使用 yum 进行安装\n\n```sh\nyun install -y nginx\n```\n\n7. 查看nginx的安装位置\n\n```sh\nwhereis nginx\n```\n\n8. 启动测试\n\n```sh\n# 进入文件\ncd /usr/sbin\n\n# 启动 nginx\n./nginx\n```\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.38bsees6wz60.webp)\n\n访问自己 Linux 的 IP 地址，不需要加端口，如果看到如下图，代表成功\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.6xop32js8180.webp)\n\n### 源码简单安装和yum安装的差异\n\n这里先介绍一个命令: `./nginx -V`，通过该命令可以查看到所安装 Nginx 的版本及相关配置信息。\n\n简单安装的配置信息查看：\n\n```sh\n[root@master sbin]# ./nginx -V\nnginx version: nginx/1.21.6\nbuilt by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)\nconfigure arguments: --prefix=/usr/local/nginx\n```\n\nyum 安装的配置信息查看：（这里截取 1.16.1 版本的 图片）\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.os75hg8w3gg.webp)\n\n可以看出 yum 安装的参数非常多，如果想源码简单安装也有这些参数，这涉及到源码复杂安装，往下看。\n\n执行 `tar -zxvf nginx-1.16.1.tar.gz` 对下载的资源进行解压缩后，进入压缩后的目录，可以看到如下结构\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.320qb912jy00.webp)\n\n内容解释：\n\n| 内容名     | 作用                                                         |\n| ---------- | ------------------------------------------------------------ |\n| auto       | 存放的是编译相关的脚本                                       |\n| CHANGES    | 版本变更记录                                                 |\n| CHANGES.ru | 俄罗斯文的版本变更记录                                       |\n| conf       | Nginx 默认的配置文件                                         |\n| configure  | Nginx 软件的自动脚本程序,是一个比较重要的文件，作用如下： 1、检测环境及根据环境检测结果生成 C 代码 2、生成编译代码需要的 Makefile 文件 |\n| contrib    | 存放的是几个特殊的脚本文件，其中 README 中对脚本有着详细的说明 |\n| html       | 存放的是 Nginx 自带的两个 html 页面，访问 Nginx 的首页和错误页面 |\n| LICENSE    | 许可证的相关描述文件                                         |\n| man        | Nginx 的 man 手册                                            |\n| README     | Nginx 的阅读指南                                             |\n| src        | Nginx 的源代码                                               |\n\n### 源码复杂安装\n\n这种方式和简单的安装配置不同的地方在第一步，通过 `./configure` 来对编译参数进行设置，需要我们手动来指定。那么都有哪些参数可以进行设置，接下来我们进行一个详细的说明。\n\n- PATH：是和路径相关的配置信息\n- with：是启动模块，默认是关闭的\n- without：是关闭模块，默认是开启的\n\n我们先来认识一些简单的路径配置已经通过这些配置来完成一个简单的编译：\n\n| 指令                  | 作用                              | 默认值                     |\n| --------------------- | --------------------------------- | -------------------------- |\n| --prefix=PATH         | 指向 Nginx 的安装目录             | /usr/local/nginx           |\n| --sbin-path=PATH      | 指向(执行)程序文件(nginx)的路径   | <安装目录>/sbin/nginx      |\n| --modules-path=PATH   | 指向 Nginx 动态模块安装目录       | <安装目录>//modules        |\n| --conf-path=PATH      | 指向配置文件(nginx.conf)的路径    | <安装目录>/conf/nginx.conf |\n| --error-log-path=PATH | 指向错误日志文件的路径            | <安装目录>/logs/error.log  |\n| --http-log-path=PATH  | 指向访问日志文件的路径            | <安装目录>/logs/access.log |\n| --pid-path=PATH       | 指向 Nginx 启动后进行ID的文件路径 | <安装目录>/logs/nginx.pid  |\n| --lock-path=PATH      | 指向 Nginx 锁文件的存放路径       | <安装目录>/logs/nginx.lock |\n\n源码复杂安装命令如下：（先进入解压目录）\n\n```sh\n# 进入解压目\ncd ~/nginx/core\n\n# 安装命令\n./configure --prefix=/usr/local/nginx \\\n--sbin-path=/usr/local/nginx/sbin/nginx \\\n--modules-path=/usr/local/nginx/modules \\\n--conf-path=/usr/local/nginx/conf/nginx.conf \\\n--error-log-path=/usr/local/nginx/logs/error.log \\\n--http-log-path=/usr/local/nginx/logs/access.log \\\n--pid-path=/usr/local/nginx/logs/nginx.pid \\\n--lock-path=/usr/local/nginx/logs/nginx.lock\n\n# 执行编译和安装\nmake && make install\n```\n\n在使用上述命令之前，需要将之前服务器已经安装的 Nginx 进行卸载。\n\n## Nginx卸载\n\n简单安装后如果想要卸载，步骤分为三步骤：\n\n步骤一：需要将 Nginx 的进程关闭（要在 安装目录的 sbin 目录下）\n\n```sh\n./nginx -s stop\n```\n\n步骤二：将安装的 Nginx 进行删除\n\n```sh\nrm -rf /usr/local/nginx\n```\n\n步骤三：进入解压目录，将安装包之前编译的环境清除掉\n\n```sh\n# 进入解压目录\ncd /opt/nginx/core\n\n# 清除环境\nmake clean\n```\n\n## Nginx目录结构分析\n\n在使用 Nginx 之前，我们先对安装好的 Nginx 目录文件进行一个分析，在这块给大家介绍一个工具 tree，通过 tree 我们可以很方面的去查看 Centos 系统上的文件目录结构，当然，如果想使用 tree 工具，就得先通过 `yum install -y tree` 来进行安装，安装成功后，可以通过执行 `tree /usr/local/nginx` (tree 后面跟的是 Nginx 的安装目录)，获取的结果如下：\n\n```sh\n[root@master /]# tree /usr/local/nginx\n/usr/local/nginx\n├── client_body_temp\n├── conf\n│   ├── fastcgi.conf\n│   ├── fastcgi.conf.default\n│   ├── fastcgi_params\n│   ├── fastcgi_params.default\n│   ├── koi-utf\n│   ├── koi-win\n│   ├── mime.types\n│   ├── mime.types.default\n│   ├── nginx.conf\n│   ├── nginx.conf.default\n│   ├── scgi_params\n│   ├── scgi_params.default\n│   ├── uwsgi_params\n│   ├── uwsgi_params.default\n│   └── win-utf\n├── fastcgi_temp\n├── html\n│   ├── 50x.html\n│   └── index.html\n├── logs\n│   ├── access.log\n│   ├── error.log\n│   └── nginx.pid\n├── proxy_temp\n├── sbin\n│   ├── nginx\n│   └── nginx.old\n├── scgi_temp\n└── uwsgi_temp\n\n9 directories, 22 files\n```\n\n CGI(Common Gateway Interface)通用网关【接口】，主要解决的问题是从客户端发送一个请求和数据，服务端获取到请求和数据后可以调用调用 CGI【程序】处理及相应结果给客户端的一种标准规范。\n\n| 目录 | 文件名                    | 作用                                                         |\n| ---- | ------------------------- | ------------------------------------------------------------ |\n| conf |                           | Nginx 所有配置文件目录                                       |\n|      | fastcgi.conf              | fastcgi相关配置文件                                          |\n|      | fastcgi.conf.default      | fastcgi.conf 的备份文件                                      |\n|      | fastcgi_params            | fastcgi 的参数文件                                           |\n|      | fastcgi_params.default    | fastcgi 的参数备份文件                                       |\n|      | scgi_params               | scgi 的参数文件                                              |\n|      | scgi_params.default       | scgi 的参数备份文件                                          |\n|      | uwsgi_params              | uwsgi 的参数文件                                             |\n|      | uwsgi_params.default      | uwsgi 的参数备份文件                                         |\n|      | mime.types                | **记录的是 HTTP 协议中的 Content-Type 的值和文件后缀名的对应关系** |\n|      | mime.types.default        | mime.types 的备份文件                                        |\n|      | nginx.conf                | **这是 Nginx 的核心配置文件，这个文件非常重要，也是我们即将要学习的重点** |\n|      | nginx.conf.default        | nginx.conf 的备份文件                                        |\n|      | koi-utf、koi-win、win-utf | 这三个文件都是与编码转换映射相关的配置文件，用来将一种编码转换成另一种编码 |\n| html |                           | 存放 Nginx 自带的两个静态的 html 页面                        |\n|      | 50x.html                  | 访问失败后的失败页面                                         |\n|      | index.html                | 成功访问的默认首页                                           |\n| logs |                           | 记录入门的文件，当 Nginx 服务器启动后，这里面会有 access.log error.log 和 nginx.pid 三个文件出现 |\n|      | access.log                | **访问日志，每次访问成功都会进行记录**                       |\n|      | error.log                 | **错误日志，每次访问失败都会进行记录**                       |\n|      | nginx.pid                 | 启动 Nginx 后，系统生成一个进程 PID，这个文件记录这个 PID    |\n| sbin |                           | 是存放执行程序文件 nginx                                     |\n|      | nginx                     | 用来控制 Nginx 的启动和停止等相关的命令。**注意：该文件名就叫 nginx** |\n\n","source":"_posts/Nginx_install.md","raw":"---\ntitle:  Nginx安装\ntags: [Nginx, 中间件, 后端]\ncategories: [Nginx]\ndate: 2022-11-9\n---\n# Nginx 安装\n\n## Nginx版本介绍\n\nNginx 的官方网站为: [http://nginx.org](http://nginx.org/)\n\n打开源码可以看到如下的页面内容\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.4wlfyfbk53i0.webp)\n\nNginx 的官方下载网站为 [http://nginx.org/en/download.html](http://nginx.org/en/download.html)，当然你也可以之间在首页选中右边的 download 进入版本下载网页。在下载页面我们会看到如下内容：\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.3e7olqaurau0.webp)\n\n## 获取Nginx源码\n\n[http://nginx.org/download/](http://nginx.org/download/)\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.3cu95u4zd440.webp)\n\n## 准备服务器系统\n\n### 环境准备\n\n- 虚拟机：VMware WorkStation\n- Linux 系统：Centos7\n- 上传软件工具：MobaXterm、xsheel,SecureCRT 之一\n- 网络\n\n### 确认CentOS的内核\n\n准备一个内核为 2.6 及以上版本的操作系统，因为 linux2.6 及以上内核才支持 epoll,而 Nginx 需要解决高并发压力问题是需要用到 epoll，所以我们需要有这样的版本要求。\n\n我们可以使用 `uname -a` 命令来查询linux的内核版本\n\n```sh\n[root@master ~]# uname -a\nLinux master 3.10.0-1160.el7.x86_64 #1 SMP Mon Oct 19 16:18:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux\n```\n\n### 确保Centos能联网\n\n```sh\nping www.baidu.com\n```\n\n三种网络模式：桥接、主机、NAT，建议使用虚拟机使用 NAT 模式\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.4ga3snmdtsa0.webp)\n\nNAT 模式下，只要主机有网络，则虚拟机也有网络。\n\n### 确认关闭防火墙\n\n这一项的要求仅针对于那些对 Linux 系统的防火墙设置规则不太清楚的，建议大家把防火墙都关闭掉，因为把防火墙关闭掉，可以省掉后续 Nginx 使用过程中遇到的诸多问题。\n\n关闭的方式有如下两种:\n\n```sh\nsystemctl stop firewalld      # 关闭运行的防火墙，系统重新启动后，防火墙将重新打开\nsystemctl disable firewalld   # 永久关闭防火墙，，系统重新启动后，防火墙依然关闭\nsystemctl status firewalld\t # 查看防火墙状态\n```\n\n如果不想关闭防火墙，记得开放 Nginx 的访问端口\n\n### 确认停用selinux\n\nselinux(security-enhanced linux)，美国安全局对于强制访问控制的实现，在 Linux2.6 内核以后的版本中，selinux 已经成功内核中的一部分。可以说selinux 是 Linux 史上最杰出的新安全子系统之一。虽然有了 selinux，我们的系统会更安全，但是对于使用 Nginx 或者其他的学习过程中，会有很多设置，所以这块建议大家将 selinux 进行关闭。\n\n`sestatus` 查看状态\n\n```sh\n[root@master ~]# sestatus\nSELinux status:                 disabled\n```\n\n如果查看不是 disabled 状态，我们可以通过修改配置文件来进行设置,修改 `SELINUX=disabled`，然后重启下系统即可生效。\n\n```sh\nvim /etc/selinux/config\n```\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.1063r7fk4lz4.webp)\n\n## Nginx环境安装\n\nNginx 的安装方式有两种分别是：\n\n- 通过 Nginx 源码\n  - 通过 Nginx 源码简单安装\n  - 通过 Nginx 源码复杂安装\n- 通过 yum 安装\n\n如果通过 Nginx 源码安装需要提前准备安装好环境，我相信，任何 C 语言编写的软件都离不开这些环境，安装后所有软件都会收益，往下看。\n\n### GCC编译器\n\nNginx 是使用 C 语言编写的程序，因此想要运行 Nginx 就需要安装一个编译工具。GCC 就是一个开源的编译器集合，用于处理各种各样的语言，其中就包含了 C 语言。\n\n使用命令 `yum install -y gcc` 来安装\n\n安装成功后，可以通过 `gcc --version` 来查看 gcc 是否安装成功\n\n```sh\n# 安装 gcc\nyum install -y gcc\n\n# 查看 gcc 版本\ngcc --version\n```\n\n### PCRE\n\nNginx 在编译过程中需要使用到 PCRE 库（perl Compatible Regular Expressoin 兼容正则表达式库)，因为在 Nginx 的 Rewrite 模块和 Http 核心模块都会使用到 PCRE 正则表达式语法。\n\n可以使用命令 `yum install -y pcre pcre-devel` 来进行安装\n\n安装成功后，可以通过 `rpm -qa pcre pcre-devel` 来查看是否安装成功\n\n```sh\n# 安装 PCRE 和 pcre-devel\nyum install -y pcre pcre-devel\n\n# 查看 PCRE 是否安装成功\nrpm -qa pcre pcre-devel\n```\n\n### zlib\n\nzlib 库提供了开发人员的压缩算法，在 Nginx 的各个模块中需要使用 gzip 压缩，所以我们也需要提前安装其库及源代码 zlib 和 zlib-devel。\n\n可以使用命令 `yum install -y zlib zlib-devel` 来进行安装\n\n安装成功后，可以通过 `rpm -qa zlib zlib-devel` 来查看是否安装成功\n\n```sh\n# 安装 zlib 和 zlib-devel\nyum install -y zlib zlib-devel\n\n# 查看 zlib 和 zlib-devel 是否安装成功\nrpm -qa zlib zlib-devel\n```\n\n### OpenSSL\n\nOpenSSL 是一个开放源代码的软件库包，应用程序可以使用这个包进行安全通信，并且避免被窃听。\n\nSSL：Secure Sockets Layer 安全套接协议的缩写，可以在 Internet 上提供秘密性传输，其目标是保证两个应用间通信的保密性和可靠性。在 Nginx 中，如果服务器需要提供安全网页时就需要用到 OpenSSL 库，所以我们需要对 OpenSSL 的库文件及它的开发安装包进行一个安装。\n\n可以使用命令 `yum install -y openssl openssl-devel` 来进行安装\n\n安装成功后，可以通过 `rpm -qa openssl openssl-devel` 来查看是否安装成功\n\n```sh\n# 安装 OpenSSL 库\nyum install -y openssl openssl-devel\n\n# 查看 OpenSSL 是否安装成功\nrpm -qa openssl openssl-devel\n```\n\n### 全部安装命令\n\n上述命令，一个个来的话比较麻烦，我们也可以通过一条命令来进行安装\n\n`yum install -y gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel` 进行全部安装。\n\n```sh\n# 全部安装 GCC、PCRE、zlib、OpenSSL\nyum install -y gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel\n\n# 查看安装版本\nrpm -qa pcre pcre-devel zlib zlib-devel openssl openssl-devel\n```\n\n## Nginx安装\n\nNginx 的官方下载网站为 [http://nginx.org/en/download.html](http://nginx.org/en/download.html)\n\n### 源码简单安装\n\n1. 进入官网查找需要下载版本的链接地址，然后使用 wget 命令进行下载，这里下载在 `/opt` 目录下\n\n```sh\ncd /opt\n\nwget http://nginx.org/download/nginx-1.21.6.tar.gz\n```\n\n这里下载的版本是 1.21.6，请根据需求更改版本号。如果 wget 命令下载速度慢，可以先下载到 Windows 系统，再使用工具上传到 Linux 下。\n\n2. 建议大家将下载的资源进行包管理，在 `/opt` 目录下创建 `nginx/core` 目录，`-p` 代表允许创建多级目录\n\n```sh\n# 创建指定目录\nmkdir -p /opt/nginx/core\n\n# 移动到指定目录\nmv nginx-1.21.6.tar.gz nginx/core\n```\n\n3. 解压缩\n\n```sh\n# 进入指定目录\ncd /opt/nginx/core\n\n# 解压\ntar -xzf nginx-1.21.6.tar.gz\n```\n\n4. 进入资源文件中，发现 configure 文件，执行该文件\n\n```sh\n# 进入解压出的目录\ncd nginx-1.21.6/\n\n# 执行 configure \n./configure --prefix=/usr/local/nginx\n```\n\n5. 编译\n\n```sh\nmake\n```\n\n6. 安装\n\n```sh\nmake install\n```\n\n7. 查看 nginx 的安装位置\n\n```sh\nwhereis nginx\n```\n\n```sh\n[root@master sbin]# whereis nginx\nnginx: /usr/local/nginx\n```\n\n8. 启动测试。启动文件在安装目录下的 sbin 命令\n\n```sh\n# 进入启动文件的目录\ncd /usr/local/nginx/sbin\n\n# 执行 nginx 文件\n./nginx\n```\n\n访问自己 Linux 的 IP 地址，不需要加端口，如果看到如下图，代表成功\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.6xop32js8180.webp)\n\n### yum安装\n\n使用源码进行简单安装，我们会发现安装的过程比较繁琐，需要提前准备 GCC 编译器、PCRE 兼容正则表达式库、zlib 压缩库、OpenSSL 安全通信的软件库包，然后才能进行 Nginx 的安装。下面使用 yum 安装，过程更简单。\n\n1. 安装 yum-utils\n\n```sh\nsudo yum  install -y yum-utils\n```\n\n2. 添加 yum 源文件\n\n```sh\nvim /etc/yum.repos.d/nginx.repo\n```\n\n3. 添加如下内容\n\n```sh\n[nginx-stable]\nname=nginx stable repo\nbaseurl=http://nginx.org/packages/centos/$releasever/$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\n\n[nginx-mainline]\nname=nginx mainline repo\nbaseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\n```\n\n4. 使用 yum 安装 Nginx\n\n```sh\nsudo yum install -y nginx\n```\n\n5. 查看是否安装成功\n\n```sh\nyum list | grep nginx\n```\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.36wvsdkk9zc0.webp)\n\n6. 使用 yum 进行安装\n\n```sh\nyun install -y nginx\n```\n\n7. 查看nginx的安装位置\n\n```sh\nwhereis nginx\n```\n\n8. 启动测试\n\n```sh\n# 进入文件\ncd /usr/sbin\n\n# 启动 nginx\n./nginx\n```\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.38bsees6wz60.webp)\n\n访问自己 Linux 的 IP 地址，不需要加端口，如果看到如下图，代表成功\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.6xop32js8180.webp)\n\n### 源码简单安装和yum安装的差异\n\n这里先介绍一个命令: `./nginx -V`，通过该命令可以查看到所安装 Nginx 的版本及相关配置信息。\n\n简单安装的配置信息查看：\n\n```sh\n[root@master sbin]# ./nginx -V\nnginx version: nginx/1.21.6\nbuilt by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)\nconfigure arguments: --prefix=/usr/local/nginx\n```\n\nyum 安装的配置信息查看：（这里截取 1.16.1 版本的 图片）\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.os75hg8w3gg.webp)\n\n可以看出 yum 安装的参数非常多，如果想源码简单安装也有这些参数，这涉及到源码复杂安装，往下看。\n\n执行 `tar -zxvf nginx-1.16.1.tar.gz` 对下载的资源进行解压缩后，进入压缩后的目录，可以看到如下结构\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.320qb912jy00.webp)\n\n内容解释：\n\n| 内容名     | 作用                                                         |\n| ---------- | ------------------------------------------------------------ |\n| auto       | 存放的是编译相关的脚本                                       |\n| CHANGES    | 版本变更记录                                                 |\n| CHANGES.ru | 俄罗斯文的版本变更记录                                       |\n| conf       | Nginx 默认的配置文件                                         |\n| configure  | Nginx 软件的自动脚本程序,是一个比较重要的文件，作用如下： 1、检测环境及根据环境检测结果生成 C 代码 2、生成编译代码需要的 Makefile 文件 |\n| contrib    | 存放的是几个特殊的脚本文件，其中 README 中对脚本有着详细的说明 |\n| html       | 存放的是 Nginx 自带的两个 html 页面，访问 Nginx 的首页和错误页面 |\n| LICENSE    | 许可证的相关描述文件                                         |\n| man        | Nginx 的 man 手册                                            |\n| README     | Nginx 的阅读指南                                             |\n| src        | Nginx 的源代码                                               |\n\n### 源码复杂安装\n\n这种方式和简单的安装配置不同的地方在第一步，通过 `./configure` 来对编译参数进行设置，需要我们手动来指定。那么都有哪些参数可以进行设置，接下来我们进行一个详细的说明。\n\n- PATH：是和路径相关的配置信息\n- with：是启动模块，默认是关闭的\n- without：是关闭模块，默认是开启的\n\n我们先来认识一些简单的路径配置已经通过这些配置来完成一个简单的编译：\n\n| 指令                  | 作用                              | 默认值                     |\n| --------------------- | --------------------------------- | -------------------------- |\n| --prefix=PATH         | 指向 Nginx 的安装目录             | /usr/local/nginx           |\n| --sbin-path=PATH      | 指向(执行)程序文件(nginx)的路径   | <安装目录>/sbin/nginx      |\n| --modules-path=PATH   | 指向 Nginx 动态模块安装目录       | <安装目录>//modules        |\n| --conf-path=PATH      | 指向配置文件(nginx.conf)的路径    | <安装目录>/conf/nginx.conf |\n| --error-log-path=PATH | 指向错误日志文件的路径            | <安装目录>/logs/error.log  |\n| --http-log-path=PATH  | 指向访问日志文件的路径            | <安装目录>/logs/access.log |\n| --pid-path=PATH       | 指向 Nginx 启动后进行ID的文件路径 | <安装目录>/logs/nginx.pid  |\n| --lock-path=PATH      | 指向 Nginx 锁文件的存放路径       | <安装目录>/logs/nginx.lock |\n\n源码复杂安装命令如下：（先进入解压目录）\n\n```sh\n# 进入解压目\ncd ~/nginx/core\n\n# 安装命令\n./configure --prefix=/usr/local/nginx \\\n--sbin-path=/usr/local/nginx/sbin/nginx \\\n--modules-path=/usr/local/nginx/modules \\\n--conf-path=/usr/local/nginx/conf/nginx.conf \\\n--error-log-path=/usr/local/nginx/logs/error.log \\\n--http-log-path=/usr/local/nginx/logs/access.log \\\n--pid-path=/usr/local/nginx/logs/nginx.pid \\\n--lock-path=/usr/local/nginx/logs/nginx.lock\n\n# 执行编译和安装\nmake && make install\n```\n\n在使用上述命令之前，需要将之前服务器已经安装的 Nginx 进行卸载。\n\n## Nginx卸载\n\n简单安装后如果想要卸载，步骤分为三步骤：\n\n步骤一：需要将 Nginx 的进程关闭（要在 安装目录的 sbin 目录下）\n\n```sh\n./nginx -s stop\n```\n\n步骤二：将安装的 Nginx 进行删除\n\n```sh\nrm -rf /usr/local/nginx\n```\n\n步骤三：进入解压目录，将安装包之前编译的环境清除掉\n\n```sh\n# 进入解压目录\ncd /opt/nginx/core\n\n# 清除环境\nmake clean\n```\n\n## Nginx目录结构分析\n\n在使用 Nginx 之前，我们先对安装好的 Nginx 目录文件进行一个分析，在这块给大家介绍一个工具 tree，通过 tree 我们可以很方面的去查看 Centos 系统上的文件目录结构，当然，如果想使用 tree 工具，就得先通过 `yum install -y tree` 来进行安装，安装成功后，可以通过执行 `tree /usr/local/nginx` (tree 后面跟的是 Nginx 的安装目录)，获取的结果如下：\n\n```sh\n[root@master /]# tree /usr/local/nginx\n/usr/local/nginx\n├── client_body_temp\n├── conf\n│   ├── fastcgi.conf\n│   ├── fastcgi.conf.default\n│   ├── fastcgi_params\n│   ├── fastcgi_params.default\n│   ├── koi-utf\n│   ├── koi-win\n│   ├── mime.types\n│   ├── mime.types.default\n│   ├── nginx.conf\n│   ├── nginx.conf.default\n│   ├── scgi_params\n│   ├── scgi_params.default\n│   ├── uwsgi_params\n│   ├── uwsgi_params.default\n│   └── win-utf\n├── fastcgi_temp\n├── html\n│   ├── 50x.html\n│   └── index.html\n├── logs\n│   ├── access.log\n│   ├── error.log\n│   └── nginx.pid\n├── proxy_temp\n├── sbin\n│   ├── nginx\n│   └── nginx.old\n├── scgi_temp\n└── uwsgi_temp\n\n9 directories, 22 files\n```\n\n CGI(Common Gateway Interface)通用网关【接口】，主要解决的问题是从客户端发送一个请求和数据，服务端获取到请求和数据后可以调用调用 CGI【程序】处理及相应结果给客户端的一种标准规范。\n\n| 目录 | 文件名                    | 作用                                                         |\n| ---- | ------------------------- | ------------------------------------------------------------ |\n| conf |                           | Nginx 所有配置文件目录                                       |\n|      | fastcgi.conf              | fastcgi相关配置文件                                          |\n|      | fastcgi.conf.default      | fastcgi.conf 的备份文件                                      |\n|      | fastcgi_params            | fastcgi 的参数文件                                           |\n|      | fastcgi_params.default    | fastcgi 的参数备份文件                                       |\n|      | scgi_params               | scgi 的参数文件                                              |\n|      | scgi_params.default       | scgi 的参数备份文件                                          |\n|      | uwsgi_params              | uwsgi 的参数文件                                             |\n|      | uwsgi_params.default      | uwsgi 的参数备份文件                                         |\n|      | mime.types                | **记录的是 HTTP 协议中的 Content-Type 的值和文件后缀名的对应关系** |\n|      | mime.types.default        | mime.types 的备份文件                                        |\n|      | nginx.conf                | **这是 Nginx 的核心配置文件，这个文件非常重要，也是我们即将要学习的重点** |\n|      | nginx.conf.default        | nginx.conf 的备份文件                                        |\n|      | koi-utf、koi-win、win-utf | 这三个文件都是与编码转换映射相关的配置文件，用来将一种编码转换成另一种编码 |\n| html |                           | 存放 Nginx 自带的两个静态的 html 页面                        |\n|      | 50x.html                  | 访问失败后的失败页面                                         |\n|      | index.html                | 成功访问的默认首页                                           |\n| logs |                           | 记录入门的文件，当 Nginx 服务器启动后，这里面会有 access.log error.log 和 nginx.pid 三个文件出现 |\n|      | access.log                | **访问日志，每次访问成功都会进行记录**                       |\n|      | error.log                 | **错误日志，每次访问失败都会进行记录**                       |\n|      | nginx.pid                 | 启动 Nginx 后，系统生成一个进程 PID，这个文件记录这个 PID    |\n| sbin |                           | 是存放执行程序文件 nginx                                     |\n|      | nginx                     | 用来控制 Nginx 的启动和停止等相关的命令。**注意：该文件名就叫 nginx** |\n\n","slug":"Nginx_install","published":1,"updated":"2022-11-09T04:08:53.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdl7007ga8vwyrl9t5c3","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"Nginx-安装\"><a href=\"#Nginx-安装\" class=\"headerlink\" title=\"Nginx 安装\"></a>Nginx 安装</h1><h2 id=\"Nginx版本介绍\"><a href=\"#Nginx版本介绍\" class=\"headerlink\" title=\"Nginx版本介绍\"></a>Nginx版本介绍</h2><p>Nginx 的官方网站为: <a href=\"http://nginx.org/\" target=\"_blank\" rel=\"noopener\">http://nginx.org</a></p>\n<p>打开源码可以看到如下的页面内容</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.4wlfyfbk53i0.webp\" alt=\"image\"></p>\n<p>Nginx 的官方下载网站为 <a href=\"http://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">http://nginx.org/en/download.html</a>，当然你也可以之间在首页选中右边的 download 进入版本下载网页。在下载页面我们会看到如下内容：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.3e7olqaurau0.webp\" alt=\"image\"></p>\n<h2 id=\"获取Nginx源码\"><a href=\"#获取Nginx源码\" class=\"headerlink\" title=\"获取Nginx源码\"></a>获取Nginx源码</h2><p><a href=\"http://nginx.org/download/\" target=\"_blank\" rel=\"noopener\">http://nginx.org/download/</a></p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.3cu95u4zd440.webp\" alt=\"image\"></p>\n<h2 id=\"准备服务器系统\"><a href=\"#准备服务器系统\" class=\"headerlink\" title=\"准备服务器系统\"></a>准备服务器系统</h2><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><ul>\n<li>虚拟机：VMware WorkStation</li>\n<li>Linux 系统：Centos7</li>\n<li>上传软件工具：MobaXterm、xsheel,SecureCRT 之一</li>\n<li>网络</li>\n</ul>\n<h3 id=\"确认CentOS的内核\"><a href=\"#确认CentOS的内核\" class=\"headerlink\" title=\"确认CentOS的内核\"></a>确认CentOS的内核</h3><p>准备一个内核为 2.6 及以上版本的操作系统，因为 linux2.6 及以上内核才支持 epoll,而 Nginx 需要解决高并发压力问题是需要用到 epoll，所以我们需要有这样的版本要求。</p>\n<p>我们可以使用 <code>uname -a</code> 命令来查询linux的内核版本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master ~]<span class=\"comment\"># uname -a</span></span><br><span class=\"line\">Linux master 3.10.0-1160.el7.x86_64 <span class=\"comment\">#1 SMP Mon Oct 19 16:18:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"确保Centos能联网\"><a href=\"#确保Centos能联网\" class=\"headerlink\" title=\"确保Centos能联网\"></a>确保Centos能联网</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping www.baidu.com</span><br></pre></td></tr></table></figure>\n\n<p>三种网络模式：桥接、主机、NAT，建议使用虚拟机使用 NAT 模式</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.4ga3snmdtsa0.webp\" alt=\"image\"></p>\n<p>NAT 模式下，只要主机有网络，则虚拟机也有网络。</p>\n<h3 id=\"确认关闭防火墙\"><a href=\"#确认关闭防火墙\" class=\"headerlink\" title=\"确认关闭防火墙\"></a>确认关闭防火墙</h3><p>这一项的要求仅针对于那些对 Linux 系统的防火墙设置规则不太清楚的，建议大家把防火墙都关闭掉，因为把防火墙关闭掉，可以省掉后续 Nginx 使用过程中遇到的诸多问题。</p>\n<p>关闭的方式有如下两种:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld      <span class=\"comment\"># 关闭运行的防火墙，系统重新启动后，防火墙将重新打开</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld   <span class=\"comment\"># 永久关闭防火墙，，系统重新启动后，防火墙依然关闭</span></span><br><span class=\"line\">systemctl status firewalld\t <span class=\"comment\"># 查看防火墙状态</span></span><br></pre></td></tr></table></figure>\n\n<p>如果不想关闭防火墙，记得开放 Nginx 的访问端口</p>\n<h3 id=\"确认停用selinux\"><a href=\"#确认停用selinux\" class=\"headerlink\" title=\"确认停用selinux\"></a>确认停用selinux</h3><p>selinux(security-enhanced linux)，美国安全局对于强制访问控制的实现，在 Linux2.6 内核以后的版本中，selinux 已经成功内核中的一部分。可以说selinux 是 Linux 史上最杰出的新安全子系统之一。虽然有了 selinux，我们的系统会更安全，但是对于使用 Nginx 或者其他的学习过程中，会有很多设置，所以这块建议大家将 selinux 进行关闭。</p>\n<p><code>sestatus</code> 查看状态</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master ~]<span class=\"comment\"># sestatus</span></span><br><span class=\"line\">SELinux status:                 disabled</span><br></pre></td></tr></table></figure>\n\n<p>如果查看不是 disabled 状态，我们可以通过修改配置文件来进行设置,修改 <code>SELINUX=disabled</code>，然后重启下系统即可生效。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/selinux/config</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.1063r7fk4lz4.webp\" alt=\"image\"></p>\n<h2 id=\"Nginx环境安装\"><a href=\"#Nginx环境安装\" class=\"headerlink\" title=\"Nginx环境安装\"></a>Nginx环境安装</h2><p>Nginx 的安装方式有两种分别是：</p>\n<ul>\n<li>通过 Nginx 源码<ul>\n<li>通过 Nginx 源码简单安装</li>\n<li>通过 Nginx 源码复杂安装</li>\n</ul>\n</li>\n<li>通过 yum 安装</li>\n</ul>\n<p>如果通过 Nginx 源码安装需要提前准备安装好环境，我相信，任何 C 语言编写的软件都离不开这些环境，安装后所有软件都会收益，往下看。</p>\n<h3 id=\"GCC编译器\"><a href=\"#GCC编译器\" class=\"headerlink\" title=\"GCC编译器\"></a>GCC编译器</h3><p>Nginx 是使用 C 语言编写的程序，因此想要运行 Nginx 就需要安装一个编译工具。GCC 就是一个开源的编译器集合，用于处理各种各样的语言，其中就包含了 C 语言。</p>\n<p>使用命令 <code>yum install -y gcc</code> 来安装</p>\n<p>安装成功后，可以通过 <code>gcc --version</code> 来查看 gcc 是否安装成功</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 gcc</span></span><br><span class=\"line\">yum install -y gcc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看 gcc 版本</span></span><br><span class=\"line\">gcc --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PCRE\"><a href=\"#PCRE\" class=\"headerlink\" title=\"PCRE\"></a>PCRE</h3><p>Nginx 在编译过程中需要使用到 PCRE 库（perl Compatible Regular Expressoin 兼容正则表达式库)，因为在 Nginx 的 Rewrite 模块和 Http 核心模块都会使用到 PCRE 正则表达式语法。</p>\n<p>可以使用命令 <code>yum install -y pcre pcre-devel</code> 来进行安装</p>\n<p>安装成功后，可以通过 <code>rpm -qa pcre pcre-devel</code> 来查看是否安装成功</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 PCRE 和 pcre-devel</span></span><br><span class=\"line\">yum install -y pcre pcre-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看 PCRE 是否安装成功</span></span><br><span class=\"line\">rpm -qa pcre pcre-devel</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"zlib\"><a href=\"#zlib\" class=\"headerlink\" title=\"zlib\"></a>zlib</h3><p>zlib 库提供了开发人员的压缩算法，在 Nginx 的各个模块中需要使用 gzip 压缩，所以我们也需要提前安装其库及源代码 zlib 和 zlib-devel。</p>\n<p>可以使用命令 <code>yum install -y zlib zlib-devel</code> 来进行安装</p>\n<p>安装成功后，可以通过 <code>rpm -qa zlib zlib-devel</code> 来查看是否安装成功</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 zlib 和 zlib-devel</span></span><br><span class=\"line\">yum install -y zlib zlib-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看 zlib 和 zlib-devel 是否安装成功</span></span><br><span class=\"line\">rpm -qa zlib zlib-devel</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"OpenSSL\"><a href=\"#OpenSSL\" class=\"headerlink\" title=\"OpenSSL\"></a>OpenSSL</h3><p>OpenSSL 是一个开放源代码的软件库包，应用程序可以使用这个包进行安全通信，并且避免被窃听。</p>\n<p>SSL：Secure Sockets Layer 安全套接协议的缩写，可以在 Internet 上提供秘密性传输，其目标是保证两个应用间通信的保密性和可靠性。在 Nginx 中，如果服务器需要提供安全网页时就需要用到 OpenSSL 库，所以我们需要对 OpenSSL 的库文件及它的开发安装包进行一个安装。</p>\n<p>可以使用命令 <code>yum install -y openssl openssl-devel</code> 来进行安装</p>\n<p>安装成功后，可以通过 <code>rpm -qa openssl openssl-devel</code> 来查看是否安装成功</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 OpenSSL 库</span></span><br><span class=\"line\">yum install -y openssl openssl-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看 OpenSSL 是否安装成功</span></span><br><span class=\"line\">rpm -qa openssl openssl-devel</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"全部安装命令\"><a href=\"#全部安装命令\" class=\"headerlink\" title=\"全部安装命令\"></a>全部安装命令</h3><p>上述命令，一个个来的话比较麻烦，我们也可以通过一条命令来进行安装</p>\n<p><code>yum install -y gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel</code> 进行全部安装。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全部安装 GCC、PCRE、zlib、OpenSSL</span></span><br><span class=\"line\">yum install -y gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看安装版本</span></span><br><span class=\"line\">rpm -qa pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Nginx安装\"><a href=\"#Nginx安装\" class=\"headerlink\" title=\"Nginx安装\"></a>Nginx安装</h2><p>Nginx 的官方下载网站为 <a href=\"http://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">http://nginx.org/en/download.html</a></p>\n<h3 id=\"源码简单安装\"><a href=\"#源码简单安装\" class=\"headerlink\" title=\"源码简单安装\"></a>源码简单安装</h3><ol>\n<li>进入官网查找需要下载版本的链接地址，然后使用 wget 命令进行下载，这里下载在 <code>/opt</code> 目录下</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /opt</span><br><span class=\"line\"></span><br><span class=\"line\">wget http://nginx.org/download/nginx-1.21.6.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>这里下载的版本是 1.21.6，请根据需求更改版本号。如果 wget 命令下载速度慢，可以先下载到 Windows 系统，再使用工具上传到 Linux 下。</p>\n<ol start=\"2\">\n<li>建议大家将下载的资源进行包管理，在 <code>/opt</code> 目录下创建 <code>nginx/core</code> 目录，<code>-p</code> 代表允许创建多级目录</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建指定目录</span></span><br><span class=\"line\">mkdir -p /opt/nginx/core</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 移动到指定目录</span></span><br><span class=\"line\">mv nginx-1.21.6.tar.gz nginx/core</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>解压缩</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入指定目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt/nginx/core</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar -xzf nginx-1.21.6.tar.gz</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>进入资源文件中，发现 configure 文件，执行该文件</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入解压出的目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> nginx-1.21.6/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行 configure </span></span><br><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>编译</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>安装</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>查看 nginx 的安装位置</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">whereis nginx</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master sbin]<span class=\"comment\"># whereis nginx</span></span><br><span class=\"line\">nginx: /usr/<span class=\"built_in\">local</span>/nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>启动测试。启动文件在安装目录下的 sbin 命令</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入启动文件的目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx/sbin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行 nginx 文件</span></span><br><span class=\"line\">./nginx</span><br></pre></td></tr></table></figure>\n\n<p>访问自己 Linux 的 IP 地址，不需要加端口，如果看到如下图，代表成功</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.6xop32js8180.webp\" alt=\"image\"></p>\n<h3 id=\"yum安装\"><a href=\"#yum安装\" class=\"headerlink\" title=\"yum安装\"></a>yum安装</h3><p>使用源码进行简单安装，我们会发现安装的过程比较繁琐，需要提前准备 GCC 编译器、PCRE 兼容正则表达式库、zlib 压缩库、OpenSSL 安全通信的软件库包，然后才能进行 Nginx 的安装。下面使用 yum 安装，过程更简单。</p>\n<ol>\n<li>安装 yum-utils</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum  install -y yum-utils</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>添加 yum 源文件</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/yum.repos.d/nginx.repo</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>添加如下内容</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[nginx-stable]</span><br><span class=\"line\">name=nginx stable repo</span><br><span class=\"line\">baseurl=http://nginx.org/packages/centos/<span class=\"variable\">$releasever</span>/<span class=\"variable\">$basearch</span>/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[nginx-mainline]</span><br><span class=\"line\">name=nginx mainline repo</span><br><span class=\"line\">baseurl=http://nginx.org/packages/mainline/centos/<span class=\"variable\">$releasever</span>/<span class=\"variable\">$basearch</span>/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">enabled=0</span><br><span class=\"line\">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>使用 yum 安装 Nginx</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>查看是否安装成功</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list | grep nginx</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.36wvsdkk9zc0.webp\" alt=\"image\"></p>\n<ol start=\"6\">\n<li>使用 yum 进行安装</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yun install -y nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>查看nginx的安装位置</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">whereis nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>启动测试</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入文件</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/sbin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动 nginx</span></span><br><span class=\"line\">./nginx</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.38bsees6wz60.webp\" alt=\"image\"></p>\n<p>访问自己 Linux 的 IP 地址，不需要加端口，如果看到如下图，代表成功</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.6xop32js8180.webp\" alt=\"image\"></p>\n<h3 id=\"源码简单安装和yum安装的差异\"><a href=\"#源码简单安装和yum安装的差异\" class=\"headerlink\" title=\"源码简单安装和yum安装的差异\"></a>源码简单安装和yum安装的差异</h3><p>这里先介绍一个命令: <code>./nginx -V</code>，通过该命令可以查看到所安装 Nginx 的版本及相关配置信息。</p>\n<p>简单安装的配置信息查看：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master sbin]<span class=\"comment\"># ./nginx -V</span></span><br><span class=\"line\">nginx version: nginx/1.21.6</span><br><span class=\"line\">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)</span><br><span class=\"line\">configure arguments: --prefix=/usr/<span class=\"built_in\">local</span>/nginx</span><br></pre></td></tr></table></figure>\n\n<p>yum 安装的配置信息查看：（这里截取 1.16.1 版本的 图片）</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.os75hg8w3gg.webp\" alt=\"image\"></p>\n<p>可以看出 yum 安装的参数非常多，如果想源码简单安装也有这些参数，这涉及到源码复杂安装，往下看。</p>\n<p>执行 <code>tar -zxvf nginx-1.16.1.tar.gz</code> 对下载的资源进行解压缩后，进入压缩后的目录，可以看到如下结构</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.320qb912jy00.webp\" alt=\"image\"></p>\n<p>内容解释：</p>\n<table>\n<thead>\n<tr>\n<th>内容名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>auto</td>\n<td>存放的是编译相关的脚本</td>\n</tr>\n<tr>\n<td>CHANGES</td>\n<td>版本变更记录</td>\n</tr>\n<tr>\n<td>CHANGES.ru</td>\n<td>俄罗斯文的版本变更记录</td>\n</tr>\n<tr>\n<td>conf</td>\n<td>Nginx 默认的配置文件</td>\n</tr>\n<tr>\n<td>configure</td>\n<td>Nginx 软件的自动脚本程序,是一个比较重要的文件，作用如下： 1、检测环境及根据环境检测结果生成 C 代码 2、生成编译代码需要的 Makefile 文件</td>\n</tr>\n<tr>\n<td>contrib</td>\n<td>存放的是几个特殊的脚本文件，其中 README 中对脚本有着详细的说明</td>\n</tr>\n<tr>\n<td>html</td>\n<td>存放的是 Nginx 自带的两个 html 页面，访问 Nginx 的首页和错误页面</td>\n</tr>\n<tr>\n<td>LICENSE</td>\n<td>许可证的相关描述文件</td>\n</tr>\n<tr>\n<td>man</td>\n<td>Nginx 的 man 手册</td>\n</tr>\n<tr>\n<td>README</td>\n<td>Nginx 的阅读指南</td>\n</tr>\n<tr>\n<td>src</td>\n<td>Nginx 的源代码</td>\n</tr>\n</tbody></table>\n<h3 id=\"源码复杂安装\"><a href=\"#源码复杂安装\" class=\"headerlink\" title=\"源码复杂安装\"></a>源码复杂安装</h3><p>这种方式和简单的安装配置不同的地方在第一步，通过 <code>./configure</code> 来对编译参数进行设置，需要我们手动来指定。那么都有哪些参数可以进行设置，接下来我们进行一个详细的说明。</p>\n<ul>\n<li>PATH：是和路径相关的配置信息</li>\n<li>with：是启动模块，默认是关闭的</li>\n<li>without：是关闭模块，默认是开启的</li>\n</ul>\n<p>我们先来认识一些简单的路径配置已经通过这些配置来完成一个简单的编译：</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>作用</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>–prefix=PATH</td>\n<td>指向 Nginx 的安装目录</td>\n<td>/usr/local/nginx</td>\n</tr>\n<tr>\n<td>–sbin-path=PATH</td>\n<td>指向(执行)程序文件(nginx)的路径</td>\n<td>&lt;安装目录&gt;/sbin/nginx</td>\n</tr>\n<tr>\n<td>–modules-path=PATH</td>\n<td>指向 Nginx 动态模块安装目录</td>\n<td>&lt;安装目录&gt;//modules</td>\n</tr>\n<tr>\n<td>–conf-path=PATH</td>\n<td>指向配置文件(nginx.conf)的路径</td>\n<td>&lt;安装目录&gt;/conf/nginx.conf</td>\n</tr>\n<tr>\n<td>–error-log-path=PATH</td>\n<td>指向错误日志文件的路径</td>\n<td>&lt;安装目录&gt;/logs/error.log</td>\n</tr>\n<tr>\n<td>–http-log-path=PATH</td>\n<td>指向访问日志文件的路径</td>\n<td>&lt;安装目录&gt;/logs/access.log</td>\n</tr>\n<tr>\n<td>–pid-path=PATH</td>\n<td>指向 Nginx 启动后进行ID的文件路径</td>\n<td>&lt;安装目录&gt;/logs/nginx.pid</td>\n</tr>\n<tr>\n<td>–lock-path=PATH</td>\n<td>指向 Nginx 锁文件的存放路径</td>\n<td>&lt;安装目录&gt;/logs/nginx.lock</td>\n</tr>\n</tbody></table>\n<p>源码复杂安装命令如下：（先进入解压目录）</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入解压目</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/nginx/core</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装命令</span></span><br><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/nginx \\</span><br><span class=\"line\">--sbin-path=/usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx \\</span><br><span class=\"line\">--modules-path=/usr/<span class=\"built_in\">local</span>/nginx/modules \\</span><br><span class=\"line\">--conf-path=/usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf \\</span><br><span class=\"line\">--error-log-path=/usr/<span class=\"built_in\">local</span>/nginx/logs/error.log \\</span><br><span class=\"line\">--http-log-path=/usr/<span class=\"built_in\">local</span>/nginx/logs/access.log \\</span><br><span class=\"line\">--pid-path=/usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid \\</span><br><span class=\"line\">--lock-path=/usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.lock</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行编译和安装</span></span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<p>在使用上述命令之前，需要将之前服务器已经安装的 Nginx 进行卸载。</p>\n<h2 id=\"Nginx卸载\"><a href=\"#Nginx卸载\" class=\"headerlink\" title=\"Nginx卸载\"></a>Nginx卸载</h2><p>简单安装后如果想要卸载，步骤分为三步骤：</p>\n<p>步骤一：需要将 Nginx 的进程关闭（要在 安装目录的 sbin 目录下）</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./nginx -s stop</span><br></pre></td></tr></table></figure>\n\n<p>步骤二：将安装的 Nginx 进行删除</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf /usr/<span class=\"built_in\">local</span>/nginx</span><br></pre></td></tr></table></figure>\n\n<p>步骤三：进入解压目录，将安装包之前编译的环境清除掉</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入解压目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt/nginx/core</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清除环境</span></span><br><span class=\"line\">make clean</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Nginx目录结构分析\"><a href=\"#Nginx目录结构分析\" class=\"headerlink\" title=\"Nginx目录结构分析\"></a>Nginx目录结构分析</h2><p>在使用 Nginx 之前，我们先对安装好的 Nginx 目录文件进行一个分析，在这块给大家介绍一个工具 tree，通过 tree 我们可以很方面的去查看 Centos 系统上的文件目录结构，当然，如果想使用 tree 工具，就得先通过 <code>yum install -y tree</code> 来进行安装，安装成功后，可以通过执行 <code>tree /usr/local/nginx</code> (tree 后面跟的是 Nginx 的安装目录)，获取的结果如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master /]<span class=\"comment\"># tree /usr/local/nginx</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/nginx</span><br><span class=\"line\">├── client_body_temp</span><br><span class=\"line\">├── conf</span><br><span class=\"line\">│   ├── fastcgi.conf</span><br><span class=\"line\">│   ├── fastcgi.conf.default</span><br><span class=\"line\">│   ├── fastcgi_params</span><br><span class=\"line\">│   ├── fastcgi_params.default</span><br><span class=\"line\">│   ├── koi-utf</span><br><span class=\"line\">│   ├── koi-win</span><br><span class=\"line\">│   ├── mime.types</span><br><span class=\"line\">│   ├── mime.types.default</span><br><span class=\"line\">│   ├── nginx.conf</span><br><span class=\"line\">│   ├── nginx.conf.default</span><br><span class=\"line\">│   ├── scgi_params</span><br><span class=\"line\">│   ├── scgi_params.default</span><br><span class=\"line\">│   ├── uwsgi_params</span><br><span class=\"line\">│   ├── uwsgi_params.default</span><br><span class=\"line\">│   └── win-utf</span><br><span class=\"line\">├── fastcgi_temp</span><br><span class=\"line\">├── html</span><br><span class=\"line\">│   ├── 50x.html</span><br><span class=\"line\">│   └── index.html</span><br><span class=\"line\">├── logs</span><br><span class=\"line\">│   ├── access.log</span><br><span class=\"line\">│   ├── error.log</span><br><span class=\"line\">│   └── nginx.pid</span><br><span class=\"line\">├── proxy_temp</span><br><span class=\"line\">├── sbin</span><br><span class=\"line\">│   ├── nginx</span><br><span class=\"line\">│   └── nginx.old</span><br><span class=\"line\">├── scgi_temp</span><br><span class=\"line\">└── uwsgi_temp</span><br><span class=\"line\"></span><br><span class=\"line\">9 directories, 22 files</span><br></pre></td></tr></table></figure>\n\n<p> CGI(Common Gateway Interface)通用网关【接口】，主要解决的问题是从客户端发送一个请求和数据，服务端获取到请求和数据后可以调用调用 CGI【程序】处理及相应结果给客户端的一种标准规范。</p>\n<table>\n<thead>\n<tr>\n<th>目录</th>\n<th>文件名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>conf</td>\n<td></td>\n<td>Nginx 所有配置文件目录</td>\n</tr>\n<tr>\n<td></td>\n<td>fastcgi.conf</td>\n<td>fastcgi相关配置文件</td>\n</tr>\n<tr>\n<td></td>\n<td>fastcgi.conf.default</td>\n<td>fastcgi.conf 的备份文件</td>\n</tr>\n<tr>\n<td></td>\n<td>fastcgi_params</td>\n<td>fastcgi 的参数文件</td>\n</tr>\n<tr>\n<td></td>\n<td>fastcgi_params.default</td>\n<td>fastcgi 的参数备份文件</td>\n</tr>\n<tr>\n<td></td>\n<td>scgi_params</td>\n<td>scgi 的参数文件</td>\n</tr>\n<tr>\n<td></td>\n<td>scgi_params.default</td>\n<td>scgi 的参数备份文件</td>\n</tr>\n<tr>\n<td></td>\n<td>uwsgi_params</td>\n<td>uwsgi 的参数文件</td>\n</tr>\n<tr>\n<td></td>\n<td>uwsgi_params.default</td>\n<td>uwsgi 的参数备份文件</td>\n</tr>\n<tr>\n<td></td>\n<td>mime.types</td>\n<td><strong>记录的是 HTTP 协议中的 Content-Type 的值和文件后缀名的对应关系</strong></td>\n</tr>\n<tr>\n<td></td>\n<td>mime.types.default</td>\n<td>mime.types 的备份文件</td>\n</tr>\n<tr>\n<td></td>\n<td>nginx.conf</td>\n<td><strong>这是 Nginx 的核心配置文件，这个文件非常重要，也是我们即将要学习的重点</strong></td>\n</tr>\n<tr>\n<td></td>\n<td>nginx.conf.default</td>\n<td>nginx.conf 的备份文件</td>\n</tr>\n<tr>\n<td></td>\n<td>koi-utf、koi-win、win-utf</td>\n<td>这三个文件都是与编码转换映射相关的配置文件，用来将一种编码转换成另一种编码</td>\n</tr>\n<tr>\n<td>html</td>\n<td></td>\n<td>存放 Nginx 自带的两个静态的 html 页面</td>\n</tr>\n<tr>\n<td></td>\n<td>50x.html</td>\n<td>访问失败后的失败页面</td>\n</tr>\n<tr>\n<td></td>\n<td>index.html</td>\n<td>成功访问的默认首页</td>\n</tr>\n<tr>\n<td>logs</td>\n<td></td>\n<td>记录入门的文件，当 Nginx 服务器启动后，这里面会有 access.log error.log 和 nginx.pid 三个文件出现</td>\n</tr>\n<tr>\n<td></td>\n<td>access.log</td>\n<td><strong>访问日志，每次访问成功都会进行记录</strong></td>\n</tr>\n<tr>\n<td></td>\n<td>error.log</td>\n<td><strong>错误日志，每次访问失败都会进行记录</strong></td>\n</tr>\n<tr>\n<td></td>\n<td>nginx.pid</td>\n<td>启动 Nginx 后，系统生成一个进程 PID，这个文件记录这个 PID</td>\n</tr>\n<tr>\n<td>sbin</td>\n<td></td>\n<td>是存放执行程序文件 nginx</td>\n</tr>\n<tr>\n<td></td>\n<td>nginx</td>\n<td>用来控制 Nginx 的启动和停止等相关的命令。<strong>注意：该文件名就叫 nginx</strong></td>\n</tr>\n</tbody></table>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"Nginx-安装\"><a href=\"#Nginx-安装\" class=\"headerlink\" title=\"Nginx 安装\"></a>Nginx 安装</h1><h2 id=\"Nginx版本介绍\"><a href=\"#Nginx版本介绍\" class=\"headerlink\" title=\"Nginx版本介绍\"></a>Nginx版本介绍</h2><p>Nginx 的官方网站为: <a href=\"http://nginx.org/\" target=\"_blank\" rel=\"noopener\">http://nginx.org</a></p>\n<p>打开源码可以看到如下的页面内容</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.4wlfyfbk53i0.webp\" alt=\"image\"></p>\n<p>Nginx 的官方下载网站为 <a href=\"http://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">http://nginx.org/en/download.html</a>，当然你也可以之间在首页选中右边的 download 进入版本下载网页。在下载页面我们会看到如下内容：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.3e7olqaurau0.webp\" alt=\"image\"></p>\n<h2 id=\"获取Nginx源码\"><a href=\"#获取Nginx源码\" class=\"headerlink\" title=\"获取Nginx源码\"></a>获取Nginx源码</h2><p><a href=\"http://nginx.org/download/\" target=\"_blank\" rel=\"noopener\">http://nginx.org/download/</a></p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.3cu95u4zd440.webp\" alt=\"image\"></p>\n<h2 id=\"准备服务器系统\"><a href=\"#准备服务器系统\" class=\"headerlink\" title=\"准备服务器系统\"></a>准备服务器系统</h2><h3 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h3><ul>\n<li>虚拟机：VMware WorkStation</li>\n<li>Linux 系统：Centos7</li>\n<li>上传软件工具：MobaXterm、xsheel,SecureCRT 之一</li>\n<li>网络</li>\n</ul>\n<h3 id=\"确认CentOS的内核\"><a href=\"#确认CentOS的内核\" class=\"headerlink\" title=\"确认CentOS的内核\"></a>确认CentOS的内核</h3><p>准备一个内核为 2.6 及以上版本的操作系统，因为 linux2.6 及以上内核才支持 epoll,而 Nginx 需要解决高并发压力问题是需要用到 epoll，所以我们需要有这样的版本要求。</p>\n<p>我们可以使用 <code>uname -a</code> 命令来查询linux的内核版本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master ~]<span class=\"comment\"># uname -a</span></span><br><span class=\"line\">Linux master 3.10.0-1160.el7.x86_64 <span class=\"comment\">#1 SMP Mon Oct 19 16:18:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"确保Centos能联网\"><a href=\"#确保Centos能联网\" class=\"headerlink\" title=\"确保Centos能联网\"></a>确保Centos能联网</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping www.baidu.com</span><br></pre></td></tr></table></figure>\n\n<p>三种网络模式：桥接、主机、NAT，建议使用虚拟机使用 NAT 模式</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.4ga3snmdtsa0.webp\" alt=\"image\"></p>\n<p>NAT 模式下，只要主机有网络，则虚拟机也有网络。</p>\n<h3 id=\"确认关闭防火墙\"><a href=\"#确认关闭防火墙\" class=\"headerlink\" title=\"确认关闭防火墙\"></a>确认关闭防火墙</h3><p>这一项的要求仅针对于那些对 Linux 系统的防火墙设置规则不太清楚的，建议大家把防火墙都关闭掉，因为把防火墙关闭掉，可以省掉后续 Nginx 使用过程中遇到的诸多问题。</p>\n<p>关闭的方式有如下两种:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld      <span class=\"comment\"># 关闭运行的防火墙，系统重新启动后，防火墙将重新打开</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">disable</span> firewalld   <span class=\"comment\"># 永久关闭防火墙，，系统重新启动后，防火墙依然关闭</span></span><br><span class=\"line\">systemctl status firewalld\t <span class=\"comment\"># 查看防火墙状态</span></span><br></pre></td></tr></table></figure>\n\n<p>如果不想关闭防火墙，记得开放 Nginx 的访问端口</p>\n<h3 id=\"确认停用selinux\"><a href=\"#确认停用selinux\" class=\"headerlink\" title=\"确认停用selinux\"></a>确认停用selinux</h3><p>selinux(security-enhanced linux)，美国安全局对于强制访问控制的实现，在 Linux2.6 内核以后的版本中，selinux 已经成功内核中的一部分。可以说selinux 是 Linux 史上最杰出的新安全子系统之一。虽然有了 selinux，我们的系统会更安全，但是对于使用 Nginx 或者其他的学习过程中，会有很多设置，所以这块建议大家将 selinux 进行关闭。</p>\n<p><code>sestatus</code> 查看状态</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master ~]<span class=\"comment\"># sestatus</span></span><br><span class=\"line\">SELinux status:                 disabled</span><br></pre></td></tr></table></figure>\n\n<p>如果查看不是 disabled 状态，我们可以通过修改配置文件来进行设置,修改 <code>SELINUX=disabled</code>，然后重启下系统即可生效。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/selinux/config</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.1063r7fk4lz4.webp\" alt=\"image\"></p>\n<h2 id=\"Nginx环境安装\"><a href=\"#Nginx环境安装\" class=\"headerlink\" title=\"Nginx环境安装\"></a>Nginx环境安装</h2><p>Nginx 的安装方式有两种分别是：</p>\n<ul>\n<li>通过 Nginx 源码<ul>\n<li>通过 Nginx 源码简单安装</li>\n<li>通过 Nginx 源码复杂安装</li>\n</ul>\n</li>\n<li>通过 yum 安装</li>\n</ul>\n<p>如果通过 Nginx 源码安装需要提前准备安装好环境，我相信，任何 C 语言编写的软件都离不开这些环境，安装后所有软件都会收益，往下看。</p>\n<h3 id=\"GCC编译器\"><a href=\"#GCC编译器\" class=\"headerlink\" title=\"GCC编译器\"></a>GCC编译器</h3><p>Nginx 是使用 C 语言编写的程序，因此想要运行 Nginx 就需要安装一个编译工具。GCC 就是一个开源的编译器集合，用于处理各种各样的语言，其中就包含了 C 语言。</p>\n<p>使用命令 <code>yum install -y gcc</code> 来安装</p>\n<p>安装成功后，可以通过 <code>gcc --version</code> 来查看 gcc 是否安装成功</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 gcc</span></span><br><span class=\"line\">yum install -y gcc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看 gcc 版本</span></span><br><span class=\"line\">gcc --version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PCRE\"><a href=\"#PCRE\" class=\"headerlink\" title=\"PCRE\"></a>PCRE</h3><p>Nginx 在编译过程中需要使用到 PCRE 库（perl Compatible Regular Expressoin 兼容正则表达式库)，因为在 Nginx 的 Rewrite 模块和 Http 核心模块都会使用到 PCRE 正则表达式语法。</p>\n<p>可以使用命令 <code>yum install -y pcre pcre-devel</code> 来进行安装</p>\n<p>安装成功后，可以通过 <code>rpm -qa pcre pcre-devel</code> 来查看是否安装成功</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 PCRE 和 pcre-devel</span></span><br><span class=\"line\">yum install -y pcre pcre-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看 PCRE 是否安装成功</span></span><br><span class=\"line\">rpm -qa pcre pcre-devel</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"zlib\"><a href=\"#zlib\" class=\"headerlink\" title=\"zlib\"></a>zlib</h3><p>zlib 库提供了开发人员的压缩算法，在 Nginx 的各个模块中需要使用 gzip 压缩，所以我们也需要提前安装其库及源代码 zlib 和 zlib-devel。</p>\n<p>可以使用命令 <code>yum install -y zlib zlib-devel</code> 来进行安装</p>\n<p>安装成功后，可以通过 <code>rpm -qa zlib zlib-devel</code> 来查看是否安装成功</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 zlib 和 zlib-devel</span></span><br><span class=\"line\">yum install -y zlib zlib-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看 zlib 和 zlib-devel 是否安装成功</span></span><br><span class=\"line\">rpm -qa zlib zlib-devel</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"OpenSSL\"><a href=\"#OpenSSL\" class=\"headerlink\" title=\"OpenSSL\"></a>OpenSSL</h3><p>OpenSSL 是一个开放源代码的软件库包，应用程序可以使用这个包进行安全通信，并且避免被窃听。</p>\n<p>SSL：Secure Sockets Layer 安全套接协议的缩写，可以在 Internet 上提供秘密性传输，其目标是保证两个应用间通信的保密性和可靠性。在 Nginx 中，如果服务器需要提供安全网页时就需要用到 OpenSSL 库，所以我们需要对 OpenSSL 的库文件及它的开发安装包进行一个安装。</p>\n<p>可以使用命令 <code>yum install -y openssl openssl-devel</code> 来进行安装</p>\n<p>安装成功后，可以通过 <code>rpm -qa openssl openssl-devel</code> 来查看是否安装成功</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 OpenSSL 库</span></span><br><span class=\"line\">yum install -y openssl openssl-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看 OpenSSL 是否安装成功</span></span><br><span class=\"line\">rpm -qa openssl openssl-devel</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"全部安装命令\"><a href=\"#全部安装命令\" class=\"headerlink\" title=\"全部安装命令\"></a>全部安装命令</h3><p>上述命令，一个个来的话比较麻烦，我们也可以通过一条命令来进行安装</p>\n<p><code>yum install -y gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel</code> 进行全部安装。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全部安装 GCC、PCRE、zlib、OpenSSL</span></span><br><span class=\"line\">yum install -y gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看安装版本</span></span><br><span class=\"line\">rpm -qa pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Nginx安装\"><a href=\"#Nginx安装\" class=\"headerlink\" title=\"Nginx安装\"></a>Nginx安装</h2><p>Nginx 的官方下载网站为 <a href=\"http://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">http://nginx.org/en/download.html</a></p>\n<h3 id=\"源码简单安装\"><a href=\"#源码简单安装\" class=\"headerlink\" title=\"源码简单安装\"></a>源码简单安装</h3><ol>\n<li>进入官网查找需要下载版本的链接地址，然后使用 wget 命令进行下载，这里下载在 <code>/opt</code> 目录下</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /opt</span><br><span class=\"line\"></span><br><span class=\"line\">wget http://nginx.org/download/nginx-1.21.6.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>这里下载的版本是 1.21.6，请根据需求更改版本号。如果 wget 命令下载速度慢，可以先下载到 Windows 系统，再使用工具上传到 Linux 下。</p>\n<ol start=\"2\">\n<li>建议大家将下载的资源进行包管理，在 <code>/opt</code> 目录下创建 <code>nginx/core</code> 目录，<code>-p</code> 代表允许创建多级目录</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建指定目录</span></span><br><span class=\"line\">mkdir -p /opt/nginx/core</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 移动到指定目录</span></span><br><span class=\"line\">mv nginx-1.21.6.tar.gz nginx/core</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>解压缩</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入指定目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt/nginx/core</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解压</span></span><br><span class=\"line\">tar -xzf nginx-1.21.6.tar.gz</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>进入资源文件中，发现 configure 文件，执行该文件</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入解压出的目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> nginx-1.21.6/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行 configure </span></span><br><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>编译</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>安装</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>查看 nginx 的安装位置</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">whereis nginx</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master sbin]<span class=\"comment\"># whereis nginx</span></span><br><span class=\"line\">nginx: /usr/<span class=\"built_in\">local</span>/nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>启动测试。启动文件在安装目录下的 sbin 命令</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入启动文件的目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx/sbin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行 nginx 文件</span></span><br><span class=\"line\">./nginx</span><br></pre></td></tr></table></figure>\n\n<p>访问自己 Linux 的 IP 地址，不需要加端口，如果看到如下图，代表成功</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.6xop32js8180.webp\" alt=\"image\"></p>\n<h3 id=\"yum安装\"><a href=\"#yum安装\" class=\"headerlink\" title=\"yum安装\"></a>yum安装</h3><p>使用源码进行简单安装，我们会发现安装的过程比较繁琐，需要提前准备 GCC 编译器、PCRE 兼容正则表达式库、zlib 压缩库、OpenSSL 安全通信的软件库包，然后才能进行 Nginx 的安装。下面使用 yum 安装，过程更简单。</p>\n<ol>\n<li>安装 yum-utils</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum  install -y yum-utils</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>添加 yum 源文件</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/yum.repos.d/nginx.repo</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>添加如下内容</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[nginx-stable]</span><br><span class=\"line\">name=nginx stable repo</span><br><span class=\"line\">baseurl=http://nginx.org/packages/centos/<span class=\"variable\">$releasever</span>/<span class=\"variable\">$basearch</span>/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">[nginx-mainline]</span><br><span class=\"line\">name=nginx mainline repo</span><br><span class=\"line\">baseurl=http://nginx.org/packages/mainline/centos/<span class=\"variable\">$releasever</span>/<span class=\"variable\">$basearch</span>/</span><br><span class=\"line\">gpgcheck=1</span><br><span class=\"line\">enabled=0</span><br><span class=\"line\">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class=\"line\">module_hotfixes=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>使用 yum 安装 Nginx</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>查看是否安装成功</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list | grep nginx</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.36wvsdkk9zc0.webp\" alt=\"image\"></p>\n<ol start=\"6\">\n<li>使用 yum 进行安装</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yun install -y nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>查看nginx的安装位置</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">whereis nginx</span><br></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>启动测试</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入文件</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/sbin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动 nginx</span></span><br><span class=\"line\">./nginx</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.38bsees6wz60.webp\" alt=\"image\"></p>\n<p>访问自己 Linux 的 IP 地址，不需要加端口，如果看到如下图，代表成功</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.6xop32js8180.webp\" alt=\"image\"></p>\n<h3 id=\"源码简单安装和yum安装的差异\"><a href=\"#源码简单安装和yum安装的差异\" class=\"headerlink\" title=\"源码简单安装和yum安装的差异\"></a>源码简单安装和yum安装的差异</h3><p>这里先介绍一个命令: <code>./nginx -V</code>，通过该命令可以查看到所安装 Nginx 的版本及相关配置信息。</p>\n<p>简单安装的配置信息查看：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master sbin]<span class=\"comment\"># ./nginx -V</span></span><br><span class=\"line\">nginx version: nginx/1.21.6</span><br><span class=\"line\">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)</span><br><span class=\"line\">configure arguments: --prefix=/usr/<span class=\"built_in\">local</span>/nginx</span><br></pre></td></tr></table></figure>\n\n<p>yum 安装的配置信息查看：（这里截取 1.16.1 版本的 图片）</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.os75hg8w3gg.webp\" alt=\"image\"></p>\n<p>可以看出 yum 安装的参数非常多，如果想源码简单安装也有这些参数，这涉及到源码复杂安装，往下看。</p>\n<p>执行 <code>tar -zxvf nginx-1.16.1.tar.gz</code> 对下载的资源进行解压缩后，进入压缩后的目录，可以看到如下结构</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.320qb912jy00.webp\" alt=\"image\"></p>\n<p>内容解释：</p>\n<table>\n<thead>\n<tr>\n<th>内容名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>auto</td>\n<td>存放的是编译相关的脚本</td>\n</tr>\n<tr>\n<td>CHANGES</td>\n<td>版本变更记录</td>\n</tr>\n<tr>\n<td>CHANGES.ru</td>\n<td>俄罗斯文的版本变更记录</td>\n</tr>\n<tr>\n<td>conf</td>\n<td>Nginx 默认的配置文件</td>\n</tr>\n<tr>\n<td>configure</td>\n<td>Nginx 软件的自动脚本程序,是一个比较重要的文件，作用如下： 1、检测环境及根据环境检测结果生成 C 代码 2、生成编译代码需要的 Makefile 文件</td>\n</tr>\n<tr>\n<td>contrib</td>\n<td>存放的是几个特殊的脚本文件，其中 README 中对脚本有着详细的说明</td>\n</tr>\n<tr>\n<td>html</td>\n<td>存放的是 Nginx 自带的两个 html 页面，访问 Nginx 的首页和错误页面</td>\n</tr>\n<tr>\n<td>LICENSE</td>\n<td>许可证的相关描述文件</td>\n</tr>\n<tr>\n<td>man</td>\n<td>Nginx 的 man 手册</td>\n</tr>\n<tr>\n<td>README</td>\n<td>Nginx 的阅读指南</td>\n</tr>\n<tr>\n<td>src</td>\n<td>Nginx 的源代码</td>\n</tr>\n</tbody></table>\n<h3 id=\"源码复杂安装\"><a href=\"#源码复杂安装\" class=\"headerlink\" title=\"源码复杂安装\"></a>源码复杂安装</h3><p>这种方式和简单的安装配置不同的地方在第一步，通过 <code>./configure</code> 来对编译参数进行设置，需要我们手动来指定。那么都有哪些参数可以进行设置，接下来我们进行一个详细的说明。</p>\n<ul>\n<li>PATH：是和路径相关的配置信息</li>\n<li>with：是启动模块，默认是关闭的</li>\n<li>without：是关闭模块，默认是开启的</li>\n</ul>\n<p>我们先来认识一些简单的路径配置已经通过这些配置来完成一个简单的编译：</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>作用</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>–prefix=PATH</td>\n<td>指向 Nginx 的安装目录</td>\n<td>/usr/local/nginx</td>\n</tr>\n<tr>\n<td>–sbin-path=PATH</td>\n<td>指向(执行)程序文件(nginx)的路径</td>\n<td>&lt;安装目录&gt;/sbin/nginx</td>\n</tr>\n<tr>\n<td>–modules-path=PATH</td>\n<td>指向 Nginx 动态模块安装目录</td>\n<td>&lt;安装目录&gt;//modules</td>\n</tr>\n<tr>\n<td>–conf-path=PATH</td>\n<td>指向配置文件(nginx.conf)的路径</td>\n<td>&lt;安装目录&gt;/conf/nginx.conf</td>\n</tr>\n<tr>\n<td>–error-log-path=PATH</td>\n<td>指向错误日志文件的路径</td>\n<td>&lt;安装目录&gt;/logs/error.log</td>\n</tr>\n<tr>\n<td>–http-log-path=PATH</td>\n<td>指向访问日志文件的路径</td>\n<td>&lt;安装目录&gt;/logs/access.log</td>\n</tr>\n<tr>\n<td>–pid-path=PATH</td>\n<td>指向 Nginx 启动后进行ID的文件路径</td>\n<td>&lt;安装目录&gt;/logs/nginx.pid</td>\n</tr>\n<tr>\n<td>–lock-path=PATH</td>\n<td>指向 Nginx 锁文件的存放路径</td>\n<td>&lt;安装目录&gt;/logs/nginx.lock</td>\n</tr>\n</tbody></table>\n<p>源码复杂安装命令如下：（先进入解压目录）</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入解压目</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/nginx/core</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装命令</span></span><br><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/nginx \\</span><br><span class=\"line\">--sbin-path=/usr/<span class=\"built_in\">local</span>/nginx/sbin/nginx \\</span><br><span class=\"line\">--modules-path=/usr/<span class=\"built_in\">local</span>/nginx/modules \\</span><br><span class=\"line\">--conf-path=/usr/<span class=\"built_in\">local</span>/nginx/conf/nginx.conf \\</span><br><span class=\"line\">--error-log-path=/usr/<span class=\"built_in\">local</span>/nginx/logs/error.log \\</span><br><span class=\"line\">--http-log-path=/usr/<span class=\"built_in\">local</span>/nginx/logs/access.log \\</span><br><span class=\"line\">--pid-path=/usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.pid \\</span><br><span class=\"line\">--lock-path=/usr/<span class=\"built_in\">local</span>/nginx/logs/nginx.lock</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 执行编译和安装</span></span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<p>在使用上述命令之前，需要将之前服务器已经安装的 Nginx 进行卸载。</p>\n<h2 id=\"Nginx卸载\"><a href=\"#Nginx卸载\" class=\"headerlink\" title=\"Nginx卸载\"></a>Nginx卸载</h2><p>简单安装后如果想要卸载，步骤分为三步骤：</p>\n<p>步骤一：需要将 Nginx 的进程关闭（要在 安装目录的 sbin 目录下）</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./nginx -s stop</span><br></pre></td></tr></table></figure>\n\n<p>步骤二：将安装的 Nginx 进行删除</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf /usr/<span class=\"built_in\">local</span>/nginx</span><br></pre></td></tr></table></figure>\n\n<p>步骤三：进入解压目录，将安装包之前编译的环境清除掉</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 进入解压目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt/nginx/core</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 清除环境</span></span><br><span class=\"line\">make clean</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Nginx目录结构分析\"><a href=\"#Nginx目录结构分析\" class=\"headerlink\" title=\"Nginx目录结构分析\"></a>Nginx目录结构分析</h2><p>在使用 Nginx 之前，我们先对安装好的 Nginx 目录文件进行一个分析，在这块给大家介绍一个工具 tree，通过 tree 我们可以很方面的去查看 Centos 系统上的文件目录结构，当然，如果想使用 tree 工具，就得先通过 <code>yum install -y tree</code> 来进行安装，安装成功后，可以通过执行 <code>tree /usr/local/nginx</code> (tree 后面跟的是 Nginx 的安装目录)，获取的结果如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@master /]<span class=\"comment\"># tree /usr/local/nginx</span></span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/nginx</span><br><span class=\"line\">├── client_body_temp</span><br><span class=\"line\">├── conf</span><br><span class=\"line\">│   ├── fastcgi.conf</span><br><span class=\"line\">│   ├── fastcgi.conf.default</span><br><span class=\"line\">│   ├── fastcgi_params</span><br><span class=\"line\">│   ├── fastcgi_params.default</span><br><span class=\"line\">│   ├── koi-utf</span><br><span class=\"line\">│   ├── koi-win</span><br><span class=\"line\">│   ├── mime.types</span><br><span class=\"line\">│   ├── mime.types.default</span><br><span class=\"line\">│   ├── nginx.conf</span><br><span class=\"line\">│   ├── nginx.conf.default</span><br><span class=\"line\">│   ├── scgi_params</span><br><span class=\"line\">│   ├── scgi_params.default</span><br><span class=\"line\">│   ├── uwsgi_params</span><br><span class=\"line\">│   ├── uwsgi_params.default</span><br><span class=\"line\">│   └── win-utf</span><br><span class=\"line\">├── fastcgi_temp</span><br><span class=\"line\">├── html</span><br><span class=\"line\">│   ├── 50x.html</span><br><span class=\"line\">│   └── index.html</span><br><span class=\"line\">├── logs</span><br><span class=\"line\">│   ├── access.log</span><br><span class=\"line\">│   ├── error.log</span><br><span class=\"line\">│   └── nginx.pid</span><br><span class=\"line\">├── proxy_temp</span><br><span class=\"line\">├── sbin</span><br><span class=\"line\">│   ├── nginx</span><br><span class=\"line\">│   └── nginx.old</span><br><span class=\"line\">├── scgi_temp</span><br><span class=\"line\">└── uwsgi_temp</span><br><span class=\"line\"></span><br><span class=\"line\">9 directories, 22 files</span><br></pre></td></tr></table></figure>\n\n<p> CGI(Common Gateway Interface)通用网关【接口】，主要解决的问题是从客户端发送一个请求和数据，服务端获取到请求和数据后可以调用调用 CGI【程序】处理及相应结果给客户端的一种标准规范。</p>\n<table>\n<thead>\n<tr>\n<th>目录</th>\n<th>文件名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>conf</td>\n<td></td>\n<td>Nginx 所有配置文件目录</td>\n</tr>\n<tr>\n<td></td>\n<td>fastcgi.conf</td>\n<td>fastcgi相关配置文件</td>\n</tr>\n<tr>\n<td></td>\n<td>fastcgi.conf.default</td>\n<td>fastcgi.conf 的备份文件</td>\n</tr>\n<tr>\n<td></td>\n<td>fastcgi_params</td>\n<td>fastcgi 的参数文件</td>\n</tr>\n<tr>\n<td></td>\n<td>fastcgi_params.default</td>\n<td>fastcgi 的参数备份文件</td>\n</tr>\n<tr>\n<td></td>\n<td>scgi_params</td>\n<td>scgi 的参数文件</td>\n</tr>\n<tr>\n<td></td>\n<td>scgi_params.default</td>\n<td>scgi 的参数备份文件</td>\n</tr>\n<tr>\n<td></td>\n<td>uwsgi_params</td>\n<td>uwsgi 的参数文件</td>\n</tr>\n<tr>\n<td></td>\n<td>uwsgi_params.default</td>\n<td>uwsgi 的参数备份文件</td>\n</tr>\n<tr>\n<td></td>\n<td>mime.types</td>\n<td><strong>记录的是 HTTP 协议中的 Content-Type 的值和文件后缀名的对应关系</strong></td>\n</tr>\n<tr>\n<td></td>\n<td>mime.types.default</td>\n<td>mime.types 的备份文件</td>\n</tr>\n<tr>\n<td></td>\n<td>nginx.conf</td>\n<td><strong>这是 Nginx 的核心配置文件，这个文件非常重要，也是我们即将要学习的重点</strong></td>\n</tr>\n<tr>\n<td></td>\n<td>nginx.conf.default</td>\n<td>nginx.conf 的备份文件</td>\n</tr>\n<tr>\n<td></td>\n<td>koi-utf、koi-win、win-utf</td>\n<td>这三个文件都是与编码转换映射相关的配置文件，用来将一种编码转换成另一种编码</td>\n</tr>\n<tr>\n<td>html</td>\n<td></td>\n<td>存放 Nginx 自带的两个静态的 html 页面</td>\n</tr>\n<tr>\n<td></td>\n<td>50x.html</td>\n<td>访问失败后的失败页面</td>\n</tr>\n<tr>\n<td></td>\n<td>index.html</td>\n<td>成功访问的默认首页</td>\n</tr>\n<tr>\n<td>logs</td>\n<td></td>\n<td>记录入门的文件，当 Nginx 服务器启动后，这里面会有 access.log error.log 和 nginx.pid 三个文件出现</td>\n</tr>\n<tr>\n<td></td>\n<td>access.log</td>\n<td><strong>访问日志，每次访问成功都会进行记录</strong></td>\n</tr>\n<tr>\n<td></td>\n<td>error.log</td>\n<td><strong>错误日志，每次访问失败都会进行记录</strong></td>\n</tr>\n<tr>\n<td></td>\n<td>nginx.pid</td>\n<td>启动 Nginx 后，系统生成一个进程 PID，这个文件记录这个 PID</td>\n</tr>\n<tr>\n<td>sbin</td>\n<td></td>\n<td>是存放执行程序文件 nginx</td>\n</tr>\n<tr>\n<td></td>\n<td>nginx</td>\n<td>用来控制 Nginx 的启动和停止等相关的命令。<strong>注意：该文件名就叫 nginx</strong></td>\n</tr>\n</tbody></table>\n"},{"title":"Nginx介绍","date":"2022-11-07T16:00:00.000Z","_content":"# Nginx 介绍\n\n## Nginx是什么\n\nNginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。\n\n其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、简单的配置文件和低系统资源的消耗而闻名。2011年6月1日，nginx 1.0.4发布。Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。\n\n\n\n## 名词解释\n\n1. Web服务器\n\nWEB 服务器也叫网页服务器，英文名叫 Web Server，主要功能是为用户提供网上信息浏览服务。\n\n2. HTTP\n\nHTTP 是超文本传输协议的缩写，是用于从 WEB 服务器传输超文本到本地浏览器的传输协议，也是互联网上应用最为广泛的一种网络协议。HTTP 是一个客户端和服务器端请求和应答的标准，客户端是终端用户，服务端是网站，通过使用 Web 浏览器、网络爬虫或者其他工具，客户端发起一个到服务器上指定端口的 HTTP 请求。\n\n3. POP3/SMTP/IMAP\n\nPOP3(Post Offic Protocol 3)邮局协议的第三个版本；\n\nSMTP(Simple Mail Transfer Protocol)简单邮件传输协议；\n\nIMAP(Internet Mail Access Protocol)交互式邮件存取协议；\n\n通过上述名词的解释，我们可以了解到 Nginx 也可以作为电子邮件代理服务器。\n\n4. 正向代理\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.5u72na7a9hc0.webp)\n\n反向代理\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.3622anezbxi0.webp)\n\n正向代理的 Proxy 是多对一，反向代理的 Proxy 是一对多。\n\n## 常见服务器对比\n\n在介绍这一节内容之前，我们先来认识一家公司叫 Netcraft。\n\n> Netcraft 公司于 1994 年底在英国成立，多年来一直致力于互联网市场以及在线安全方面的咨询服务，其中在国际上最具影响力的当属其针对网站服务器、SSL市场所做的客观严谨的分析研究，公司官网每月公布的调研数据（Web Server Survey）已成为当今人们了解全球网站数量以及服务器市场分额情况的主要参考依据，时常被诸如华尔街杂志，英国 BBC，Slashdot 等媒体报道或引用。\n\n我们先来看一组数据，我们先打开 Nginx 的官方网站 [http://nginx.org/](http://nginx.org/)，找到 Netcraft 公司公布的数据，对当前主流服务器产品进行介绍。\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.6wcjq3k197c0.webp)\n\n上面这张图展示了 2019 年全球主流 Web 服务器的市场情况，其中有 Apache、Microsoft-IIS、google Servers、Nginx、Tomcat 等，而我们在了解新事物的时候，往往习惯通过类比来帮助自己理解事物的概貌。可以看出绿色线的 nginx 在 2019 年已经领现全球了。\n\n所以下面我们把几种常见的服务器来给大家简单介绍下：\n\n### IIS\n\n全称(Internet Information Services)即互联网信息服务，是由微软公司提供的基于 Windows 系统的互联网基本服务。Windows 作为服务器在稳定性与其他一些性能上都不如类 UNIX 操作系统，因此在需要高性能 Web 服务器的场合下，IIS 可能就会被「冷落」.\n\n### Tomcat\n\nTomcat是一个运行 Servlet 和 JSP 的 Web 应用软件，Tomcat 技术先进、性能稳定而且开放源代码，因此深受 Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的 Web 应用服务器。但是 Tomcat 天生是一个重量级的 Web 服务器，对静态文件和高并发的处理比较弱。\n\n### Apache\n\nApache 的发展时期很长，同时也有过一段辉煌的业绩。从上图可以看出大概在 2014 年以前都是市场份额第一的服务器。Apache 有很多优点，如稳定、开源、跨平台等。但是它出现的时间太久了，在它兴起的年代，互联网的产业规模远远不如今天，所以它被设计成一个重量级的、不支持高并发的 Web 服务器。在 Apache 服务器上，如果有数以万计的并发 HTTP 请求同时访问，就会导致服务器上消耗大量能存，操作系统内核对成百上千的 Apache 进程做进程间切换也会消耗大量的 CPU 资源，并导致 HTTP 请求的平均响应速度降低，这些都决定了 Apache 不可能成为高性能的 Web 服务器。这也促使了 Lighttpd 和 Nginx 的出现。\n\n### Lighttpd\n\nLighttpd 是德国的一个开源的 Web 服务器软件，它和 Nginx 一样，都是轻量级、高性能的 Web 服务器，欧美的业界开发者比较钟爱 Lighttpd，而国内的公司更多的青睐 Nginx，同时网上 Nginx 的资源要更丰富些。\n\n### 其他的服务器\n\nGoogle Servers，Weblogic, Webshpere(IBM) ......\n\nGoogle Servers 是闭源的，市面上很少看到。Weblogic 和 Webshpere(IBM) 使用起来都需要支付一定费用。\n\n经过各个服务器的对比，种种迹象都表明，Nginx 将以性能为王。这也是我们为什么选择 Nginx 的理由。\n\n## Nginx的优点\n\n### 速度更快、并发更高\n\n单次请求或者高并发请求的环境下，Nginx 都会比其他 Web 服务器响应的速度更快。一方面在正常情况下，单次请求会得到更快的响应，另一方面，在高峰期(如有数以万计的并发请求)，Nginx 比其他 Web 服务器更快的响应请求。Nginx 之所以有这么高的并发处理能力和这么好的性能原因在于 Nginx 采用了多进程和 I/O 多路复用(epoll)的底层实现。\n\n### 配置简单，扩展性强\n\nNginx 的设计极具扩展性，它本身就是由很多模块组成，这些模块的使用可以通过配置文件的配置来添加。这些模块有官方提供的也有第三方提供的模块，如果需要完全可以开发服务自己业务特性的定制模块\n\n### 高可靠性\n\nNginx 采用的是多进程模式运行，其中有一个 master 主进程和 N 多个 worker 进程，一个 master 管理多个 worker，worker 进程的数量我们可以手动设置，每个 worker 进程之间都是相互独立提供服务，并且 master 主进程可以在某一个 worker 进程出错时，快速去「拉起」新的 worker 进程提供服务。\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.3wz8th685620.webp)\n\n### 热部署(核心)\n\n现在互联网项目都要求以 7 * 24 小时进行服务的提供，针对于这一要求，Nginx 也提供了热部署功能，即可以在 Nginx 不停止的情况下，对 Nginx 进行文件升级、更新配置和更换日志文件等功能。\n\n### 成本低、BSD许可证\n\nBSD 是一个开源的许可证，世界上的开源许可证有很多，现在比较流行的有六种分别是 GPL、BSD、MIT、Mozilla、Apache、LGPL。这六种的区别是什么，我们可以通过下面一张图来解释下：\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.771jinl18hw0.webp)\n\n## Nginx的功能特性及常用功能\n\nNginx 提供的基本功能服务从大体上归纳为「基本 HTTP 服务」、「高级 HTTP 服务」和「邮件服务」等三大类。\n\n### 基本HTTP服务\n\nNginx 可以提供基本 HTTP 服务，可以作为 HTTP 代理服务器和反向代理服务器，支持通过缓存加速访问，可以完成简单的负载均衡和容错，支持包过滤功能，支持 SSL 等。\n\n- 处理静态文件、处理索引文件以及支持自动索引\n- 提供反向代理服务器，并可以使用缓存加上反向代理，同时完成负载均衡和容错\n- 提供对 FastCGI、memcached 等服务的缓存机制，，同时完成负载均衡和容错\n- 使用 Nginx 的模块化特性提供过滤器功能。Nginx 基本过滤器包括 gzip 压缩、ranges 支持、chunked 响应、XSLT、SSI 以及图像缩放等。其中针对包含多个 SSI 的页面，经由 FastCGI 或反向代理，SSI 过滤器可以并行处理\n- 支持 HTTP 下的安全套接层安全协议 SSL.\n- 支持基于加权和依赖的优先权的 HTTP/2\n\n### 高级HTTP服务\n\n- 支持基于名字和 IP 的虚拟主机设置\n- 支持 HTTP/1.0 中的 KEEP-Alive 模式和管线(PipeLined)模型连接\n- 自定义访问日志格式、带缓存的日志写操作以及快速日志轮转\n- 提供 3xx~5xx 错误代码重定向功能\n- 支持重写（Rewrite)模块扩展\n- 支持重新加载配置以及在线升级时无需中断正在处理的请求\n- 支持网络监控\n- 支持 FLV 和 MP4 流媒体传输\n\n### 邮件服务\n\nNginx 提供邮件代理服务也是其基本开发需求之一，主要包含以下特性：\n\n- 支持 IMPA/POP3 代理服务功能\n- 支持内部 SMTP 代理服务功能\n\n### Nginx常用的功能模块\n\n- 静态资源部署：核心功能\n- Rewrite 地址重写：用到正则表达式\n- 反向代理\n- 负载均衡：轮询、加权轮询、ip_hash、url_hash、fair 等算法\n- Web 缓存\n- 环境部署：搭建高可用的环境\n- 用户认证模块 ...\n- Nginx 的核心组成\n  - nginx 二进制可执行文件（启动、关闭、加载 Nginx）\n  - nginx.conf 配置文件\n  - error.log 错误的日志记录\n  - access.log 访问日志记录","source":"_posts/Nginx_introduce.md","raw":"---\ntitle:  Nginx介绍\ntags: [Nginx, 中间件, 后端]\ncategories: [Nginx]\ndate: 2022-11-8\n---\n# Nginx 介绍\n\n## Nginx是什么\n\nNginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。\n\n其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、简单的配置文件和低系统资源的消耗而闻名。2011年6月1日，nginx 1.0.4发布。Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。\n\n\n\n## 名词解释\n\n1. Web服务器\n\nWEB 服务器也叫网页服务器，英文名叫 Web Server，主要功能是为用户提供网上信息浏览服务。\n\n2. HTTP\n\nHTTP 是超文本传输协议的缩写，是用于从 WEB 服务器传输超文本到本地浏览器的传输协议，也是互联网上应用最为广泛的一种网络协议。HTTP 是一个客户端和服务器端请求和应答的标准，客户端是终端用户，服务端是网站，通过使用 Web 浏览器、网络爬虫或者其他工具，客户端发起一个到服务器上指定端口的 HTTP 请求。\n\n3. POP3/SMTP/IMAP\n\nPOP3(Post Offic Protocol 3)邮局协议的第三个版本；\n\nSMTP(Simple Mail Transfer Protocol)简单邮件传输协议；\n\nIMAP(Internet Mail Access Protocol)交互式邮件存取协议；\n\n通过上述名词的解释，我们可以了解到 Nginx 也可以作为电子邮件代理服务器。\n\n4. 正向代理\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.5u72na7a9hc0.webp)\n\n反向代理\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.3622anezbxi0.webp)\n\n正向代理的 Proxy 是多对一，反向代理的 Proxy 是一对多。\n\n## 常见服务器对比\n\n在介绍这一节内容之前，我们先来认识一家公司叫 Netcraft。\n\n> Netcraft 公司于 1994 年底在英国成立，多年来一直致力于互联网市场以及在线安全方面的咨询服务，其中在国际上最具影响力的当属其针对网站服务器、SSL市场所做的客观严谨的分析研究，公司官网每月公布的调研数据（Web Server Survey）已成为当今人们了解全球网站数量以及服务器市场分额情况的主要参考依据，时常被诸如华尔街杂志，英国 BBC，Slashdot 等媒体报道或引用。\n\n我们先来看一组数据，我们先打开 Nginx 的官方网站 [http://nginx.org/](http://nginx.org/)，找到 Netcraft 公司公布的数据，对当前主流服务器产品进行介绍。\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.6wcjq3k197c0.webp)\n\n上面这张图展示了 2019 年全球主流 Web 服务器的市场情况，其中有 Apache、Microsoft-IIS、google Servers、Nginx、Tomcat 等，而我们在了解新事物的时候，往往习惯通过类比来帮助自己理解事物的概貌。可以看出绿色线的 nginx 在 2019 年已经领现全球了。\n\n所以下面我们把几种常见的服务器来给大家简单介绍下：\n\n### IIS\n\n全称(Internet Information Services)即互联网信息服务，是由微软公司提供的基于 Windows 系统的互联网基本服务。Windows 作为服务器在稳定性与其他一些性能上都不如类 UNIX 操作系统，因此在需要高性能 Web 服务器的场合下，IIS 可能就会被「冷落」.\n\n### Tomcat\n\nTomcat是一个运行 Servlet 和 JSP 的 Web 应用软件，Tomcat 技术先进、性能稳定而且开放源代码，因此深受 Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的 Web 应用服务器。但是 Tomcat 天生是一个重量级的 Web 服务器，对静态文件和高并发的处理比较弱。\n\n### Apache\n\nApache 的发展时期很长，同时也有过一段辉煌的业绩。从上图可以看出大概在 2014 年以前都是市场份额第一的服务器。Apache 有很多优点，如稳定、开源、跨平台等。但是它出现的时间太久了，在它兴起的年代，互联网的产业规模远远不如今天，所以它被设计成一个重量级的、不支持高并发的 Web 服务器。在 Apache 服务器上，如果有数以万计的并发 HTTP 请求同时访问，就会导致服务器上消耗大量能存，操作系统内核对成百上千的 Apache 进程做进程间切换也会消耗大量的 CPU 资源，并导致 HTTP 请求的平均响应速度降低，这些都决定了 Apache 不可能成为高性能的 Web 服务器。这也促使了 Lighttpd 和 Nginx 的出现。\n\n### Lighttpd\n\nLighttpd 是德国的一个开源的 Web 服务器软件，它和 Nginx 一样，都是轻量级、高性能的 Web 服务器，欧美的业界开发者比较钟爱 Lighttpd，而国内的公司更多的青睐 Nginx，同时网上 Nginx 的资源要更丰富些。\n\n### 其他的服务器\n\nGoogle Servers，Weblogic, Webshpere(IBM) ......\n\nGoogle Servers 是闭源的，市面上很少看到。Weblogic 和 Webshpere(IBM) 使用起来都需要支付一定费用。\n\n经过各个服务器的对比，种种迹象都表明，Nginx 将以性能为王。这也是我们为什么选择 Nginx 的理由。\n\n## Nginx的优点\n\n### 速度更快、并发更高\n\n单次请求或者高并发请求的环境下，Nginx 都会比其他 Web 服务器响应的速度更快。一方面在正常情况下，单次请求会得到更快的响应，另一方面，在高峰期(如有数以万计的并发请求)，Nginx 比其他 Web 服务器更快的响应请求。Nginx 之所以有这么高的并发处理能力和这么好的性能原因在于 Nginx 采用了多进程和 I/O 多路复用(epoll)的底层实现。\n\n### 配置简单，扩展性强\n\nNginx 的设计极具扩展性，它本身就是由很多模块组成，这些模块的使用可以通过配置文件的配置来添加。这些模块有官方提供的也有第三方提供的模块，如果需要完全可以开发服务自己业务特性的定制模块\n\n### 高可靠性\n\nNginx 采用的是多进程模式运行，其中有一个 master 主进程和 N 多个 worker 进程，一个 master 管理多个 worker，worker 进程的数量我们可以手动设置，每个 worker 进程之间都是相互独立提供服务，并且 master 主进程可以在某一个 worker 进程出错时，快速去「拉起」新的 worker 进程提供服务。\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.3wz8th685620.webp)\n\n### 热部署(核心)\n\n现在互联网项目都要求以 7 * 24 小时进行服务的提供，针对于这一要求，Nginx 也提供了热部署功能，即可以在 Nginx 不停止的情况下，对 Nginx 进行文件升级、更新配置和更换日志文件等功能。\n\n### 成本低、BSD许可证\n\nBSD 是一个开源的许可证，世界上的开源许可证有很多，现在比较流行的有六种分别是 GPL、BSD、MIT、Mozilla、Apache、LGPL。这六种的区别是什么，我们可以通过下面一张图来解释下：\n\n![image](https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.771jinl18hw0.webp)\n\n## Nginx的功能特性及常用功能\n\nNginx 提供的基本功能服务从大体上归纳为「基本 HTTP 服务」、「高级 HTTP 服务」和「邮件服务」等三大类。\n\n### 基本HTTP服务\n\nNginx 可以提供基本 HTTP 服务，可以作为 HTTP 代理服务器和反向代理服务器，支持通过缓存加速访问，可以完成简单的负载均衡和容错，支持包过滤功能，支持 SSL 等。\n\n- 处理静态文件、处理索引文件以及支持自动索引\n- 提供反向代理服务器，并可以使用缓存加上反向代理，同时完成负载均衡和容错\n- 提供对 FastCGI、memcached 等服务的缓存机制，，同时完成负载均衡和容错\n- 使用 Nginx 的模块化特性提供过滤器功能。Nginx 基本过滤器包括 gzip 压缩、ranges 支持、chunked 响应、XSLT、SSI 以及图像缩放等。其中针对包含多个 SSI 的页面，经由 FastCGI 或反向代理，SSI 过滤器可以并行处理\n- 支持 HTTP 下的安全套接层安全协议 SSL.\n- 支持基于加权和依赖的优先权的 HTTP/2\n\n### 高级HTTP服务\n\n- 支持基于名字和 IP 的虚拟主机设置\n- 支持 HTTP/1.0 中的 KEEP-Alive 模式和管线(PipeLined)模型连接\n- 自定义访问日志格式、带缓存的日志写操作以及快速日志轮转\n- 提供 3xx~5xx 错误代码重定向功能\n- 支持重写（Rewrite)模块扩展\n- 支持重新加载配置以及在线升级时无需中断正在处理的请求\n- 支持网络监控\n- 支持 FLV 和 MP4 流媒体传输\n\n### 邮件服务\n\nNginx 提供邮件代理服务也是其基本开发需求之一，主要包含以下特性：\n\n- 支持 IMPA/POP3 代理服务功能\n- 支持内部 SMTP 代理服务功能\n\n### Nginx常用的功能模块\n\n- 静态资源部署：核心功能\n- Rewrite 地址重写：用到正则表达式\n- 反向代理\n- 负载均衡：轮询、加权轮询、ip_hash、url_hash、fair 等算法\n- Web 缓存\n- 环境部署：搭建高可用的环境\n- 用户认证模块 ...\n- Nginx 的核心组成\n  - nginx 二进制可执行文件（启动、关闭、加载 Nginx）\n  - nginx.conf 配置文件\n  - error.log 错误的日志记录\n  - access.log 访问日志记录","slug":"Nginx_introduce","published":1,"updated":"2022-11-08T01:59:47.805Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdld007la8vw6n61f4bk","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"Nginx-介绍\"><a href=\"#Nginx-介绍\" class=\"headerlink\" title=\"Nginx 介绍\"></a>Nginx 介绍</h1><h2 id=\"Nginx是什么\"><a href=\"#Nginx是什么\" class=\"headerlink\" title=\"Nginx是什么\"></a>Nginx是什么</h2><p>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。</p>\n<p>其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、简单的配置文件和低系统资源的消耗而闻名。2011年6月1日，nginx 1.0.4发布。Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。</p>\n<h2 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h2><ol>\n<li>Web服务器</li>\n</ol>\n<p>WEB 服务器也叫网页服务器，英文名叫 Web Server，主要功能是为用户提供网上信息浏览服务。</p>\n<ol start=\"2\">\n<li>HTTP</li>\n</ol>\n<p>HTTP 是超文本传输协议的缩写，是用于从 WEB 服务器传输超文本到本地浏览器的传输协议，也是互联网上应用最为广泛的一种网络协议。HTTP 是一个客户端和服务器端请求和应答的标准，客户端是终端用户，服务端是网站，通过使用 Web 浏览器、网络爬虫或者其他工具，客户端发起一个到服务器上指定端口的 HTTP 请求。</p>\n<ol start=\"3\">\n<li>POP3/SMTP/IMAP</li>\n</ol>\n<p>POP3(Post Offic Protocol 3)邮局协议的第三个版本；</p>\n<p>SMTP(Simple Mail Transfer Protocol)简单邮件传输协议；</p>\n<p>IMAP(Internet Mail Access Protocol)交互式邮件存取协议；</p>\n<p>通过上述名词的解释，我们可以了解到 Nginx 也可以作为电子邮件代理服务器。</p>\n<ol start=\"4\">\n<li>正向代理</li>\n</ol>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.5u72na7a9hc0.webp\" alt=\"image\"></p>\n<p>反向代理</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.3622anezbxi0.webp\" alt=\"image\"></p>\n<p>正向代理的 Proxy 是多对一，反向代理的 Proxy 是一对多。</p>\n<h2 id=\"常见服务器对比\"><a href=\"#常见服务器对比\" class=\"headerlink\" title=\"常见服务器对比\"></a>常见服务器对比</h2><p>在介绍这一节内容之前，我们先来认识一家公司叫 Netcraft。</p>\n<blockquote>\n<p>Netcraft 公司于 1994 年底在英国成立，多年来一直致力于互联网市场以及在线安全方面的咨询服务，其中在国际上最具影响力的当属其针对网站服务器、SSL市场所做的客观严谨的分析研究，公司官网每月公布的调研数据（Web Server Survey）已成为当今人们了解全球网站数量以及服务器市场分额情况的主要参考依据，时常被诸如华尔街杂志，英国 BBC，Slashdot 等媒体报道或引用。</p>\n</blockquote>\n<p>我们先来看一组数据，我们先打开 Nginx 的官方网站 <a href=\"http://nginx.org/\" target=\"_blank\" rel=\"noopener\">http://nginx.org/</a>，找到 Netcraft 公司公布的数据，对当前主流服务器产品进行介绍。</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.6wcjq3k197c0.webp\" alt=\"image\"></p>\n<p>上面这张图展示了 2019 年全球主流 Web 服务器的市场情况，其中有 Apache、Microsoft-IIS、google Servers、Nginx、Tomcat 等，而我们在了解新事物的时候，往往习惯通过类比来帮助自己理解事物的概貌。可以看出绿色线的 nginx 在 2019 年已经领现全球了。</p>\n<p>所以下面我们把几种常见的服务器来给大家简单介绍下：</p>\n<h3 id=\"IIS\"><a href=\"#IIS\" class=\"headerlink\" title=\"IIS\"></a>IIS</h3><p>全称(Internet Information Services)即互联网信息服务，是由微软公司提供的基于 Windows 系统的互联网基本服务。Windows 作为服务器在稳定性与其他一些性能上都不如类 UNIX 操作系统，因此在需要高性能 Web 服务器的场合下，IIS 可能就会被「冷落」.</p>\n<h3 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h3><p>Tomcat是一个运行 Servlet 和 JSP 的 Web 应用软件，Tomcat 技术先进、性能稳定而且开放源代码，因此深受 Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的 Web 应用服务器。但是 Tomcat 天生是一个重量级的 Web 服务器，对静态文件和高并发的处理比较弱。</p>\n<h3 id=\"Apache\"><a href=\"#Apache\" class=\"headerlink\" title=\"Apache\"></a>Apache</h3><p>Apache 的发展时期很长，同时也有过一段辉煌的业绩。从上图可以看出大概在 2014 年以前都是市场份额第一的服务器。Apache 有很多优点，如稳定、开源、跨平台等。但是它出现的时间太久了，在它兴起的年代，互联网的产业规模远远不如今天，所以它被设计成一个重量级的、不支持高并发的 Web 服务器。在 Apache 服务器上，如果有数以万计的并发 HTTP 请求同时访问，就会导致服务器上消耗大量能存，操作系统内核对成百上千的 Apache 进程做进程间切换也会消耗大量的 CPU 资源，并导致 HTTP 请求的平均响应速度降低，这些都决定了 Apache 不可能成为高性能的 Web 服务器。这也促使了 Lighttpd 和 Nginx 的出现。</p>\n<h3 id=\"Lighttpd\"><a href=\"#Lighttpd\" class=\"headerlink\" title=\"Lighttpd\"></a>Lighttpd</h3><p>Lighttpd 是德国的一个开源的 Web 服务器软件，它和 Nginx 一样，都是轻量级、高性能的 Web 服务器，欧美的业界开发者比较钟爱 Lighttpd，而国内的公司更多的青睐 Nginx，同时网上 Nginx 的资源要更丰富些。</p>\n<h3 id=\"其他的服务器\"><a href=\"#其他的服务器\" class=\"headerlink\" title=\"其他的服务器\"></a>其他的服务器</h3><p>Google Servers，Weblogic, Webshpere(IBM) ……</p>\n<p>Google Servers 是闭源的，市面上很少看到。Weblogic 和 Webshpere(IBM) 使用起来都需要支付一定费用。</p>\n<p>经过各个服务器的对比，种种迹象都表明，Nginx 将以性能为王。这也是我们为什么选择 Nginx 的理由。</p>\n<h2 id=\"Nginx的优点\"><a href=\"#Nginx的优点\" class=\"headerlink\" title=\"Nginx的优点\"></a>Nginx的优点</h2><h3 id=\"速度更快、并发更高\"><a href=\"#速度更快、并发更高\" class=\"headerlink\" title=\"速度更快、并发更高\"></a>速度更快、并发更高</h3><p>单次请求或者高并发请求的环境下，Nginx 都会比其他 Web 服务器响应的速度更快。一方面在正常情况下，单次请求会得到更快的响应，另一方面，在高峰期(如有数以万计的并发请求)，Nginx 比其他 Web 服务器更快的响应请求。Nginx 之所以有这么高的并发处理能力和这么好的性能原因在于 Nginx 采用了多进程和 I/O 多路复用(epoll)的底层实现。</p>\n<h3 id=\"配置简单，扩展性强\"><a href=\"#配置简单，扩展性强\" class=\"headerlink\" title=\"配置简单，扩展性强\"></a>配置简单，扩展性强</h3><p>Nginx 的设计极具扩展性，它本身就是由很多模块组成，这些模块的使用可以通过配置文件的配置来添加。这些模块有官方提供的也有第三方提供的模块，如果需要完全可以开发服务自己业务特性的定制模块</p>\n<h3 id=\"高可靠性\"><a href=\"#高可靠性\" class=\"headerlink\" title=\"高可靠性\"></a>高可靠性</h3><p>Nginx 采用的是多进程模式运行，其中有一个 master 主进程和 N 多个 worker 进程，一个 master 管理多个 worker，worker 进程的数量我们可以手动设置，每个 worker 进程之间都是相互独立提供服务，并且 master 主进程可以在某一个 worker 进程出错时，快速去「拉起」新的 worker 进程提供服务。</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.3wz8th685620.webp\" alt=\"image\"></p>\n<h3 id=\"热部署-核心\"><a href=\"#热部署-核心\" class=\"headerlink\" title=\"热部署(核心)\"></a>热部署(核心)</h3><p>现在互联网项目都要求以 7 * 24 小时进行服务的提供，针对于这一要求，Nginx 也提供了热部署功能，即可以在 Nginx 不停止的情况下，对 Nginx 进行文件升级、更新配置和更换日志文件等功能。</p>\n<h3 id=\"成本低、BSD许可证\"><a href=\"#成本低、BSD许可证\" class=\"headerlink\" title=\"成本低、BSD许可证\"></a>成本低、BSD许可证</h3><p>BSD 是一个开源的许可证，世界上的开源许可证有很多，现在比较流行的有六种分别是 GPL、BSD、MIT、Mozilla、Apache、LGPL。这六种的区别是什么，我们可以通过下面一张图来解释下：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.771jinl18hw0.webp\" alt=\"image\"></p>\n<h2 id=\"Nginx的功能特性及常用功能\"><a href=\"#Nginx的功能特性及常用功能\" class=\"headerlink\" title=\"Nginx的功能特性及常用功能\"></a>Nginx的功能特性及常用功能</h2><p>Nginx 提供的基本功能服务从大体上归纳为「基本 HTTP 服务」、「高级 HTTP 服务」和「邮件服务」等三大类。</p>\n<h3 id=\"基本HTTP服务\"><a href=\"#基本HTTP服务\" class=\"headerlink\" title=\"基本HTTP服务\"></a>基本HTTP服务</h3><p>Nginx 可以提供基本 HTTP 服务，可以作为 HTTP 代理服务器和反向代理服务器，支持通过缓存加速访问，可以完成简单的负载均衡和容错，支持包过滤功能，支持 SSL 等。</p>\n<ul>\n<li>处理静态文件、处理索引文件以及支持自动索引</li>\n<li>提供反向代理服务器，并可以使用缓存加上反向代理，同时完成负载均衡和容错</li>\n<li>提供对 FastCGI、memcached 等服务的缓存机制，，同时完成负载均衡和容错</li>\n<li>使用 Nginx 的模块化特性提供过滤器功能。Nginx 基本过滤器包括 gzip 压缩、ranges 支持、chunked 响应、XSLT、SSI 以及图像缩放等。其中针对包含多个 SSI 的页面，经由 FastCGI 或反向代理，SSI 过滤器可以并行处理</li>\n<li>支持 HTTP 下的安全套接层安全协议 SSL.</li>\n<li>支持基于加权和依赖的优先权的 HTTP/2</li>\n</ul>\n<h3 id=\"高级HTTP服务\"><a href=\"#高级HTTP服务\" class=\"headerlink\" title=\"高级HTTP服务\"></a>高级HTTP服务</h3><ul>\n<li>支持基于名字和 IP 的虚拟主机设置</li>\n<li>支持 HTTP/1.0 中的 KEEP-Alive 模式和管线(PipeLined)模型连接</li>\n<li>自定义访问日志格式、带缓存的日志写操作以及快速日志轮转</li>\n<li>提供 3xx~5xx 错误代码重定向功能</li>\n<li>支持重写（Rewrite)模块扩展</li>\n<li>支持重新加载配置以及在线升级时无需中断正在处理的请求</li>\n<li>支持网络监控</li>\n<li>支持 FLV 和 MP4 流媒体传输</li>\n</ul>\n<h3 id=\"邮件服务\"><a href=\"#邮件服务\" class=\"headerlink\" title=\"邮件服务\"></a>邮件服务</h3><p>Nginx 提供邮件代理服务也是其基本开发需求之一，主要包含以下特性：</p>\n<ul>\n<li>支持 IMPA/POP3 代理服务功能</li>\n<li>支持内部 SMTP 代理服务功能</li>\n</ul>\n<h3 id=\"Nginx常用的功能模块\"><a href=\"#Nginx常用的功能模块\" class=\"headerlink\" title=\"Nginx常用的功能模块\"></a>Nginx常用的功能模块</h3><ul>\n<li>静态资源部署：核心功能</li>\n<li>Rewrite 地址重写：用到正则表达式</li>\n<li>反向代理</li>\n<li>负载均衡：轮询、加权轮询、ip_hash、url_hash、fair 等算法</li>\n<li>Web 缓存</li>\n<li>环境部署：搭建高可用的环境</li>\n<li>用户认证模块 …</li>\n<li>Nginx 的核心组成<ul>\n<li>nginx 二进制可执行文件（启动、关闭、加载 Nginx）</li>\n<li>nginx.conf 配置文件</li>\n<li>error.log 错误的日志记录</li>\n<li>access.log 访问日志记录</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"Nginx-介绍\"><a href=\"#Nginx-介绍\" class=\"headerlink\" title=\"Nginx 介绍\"></a>Nginx 介绍</h1><h2 id=\"Nginx是什么\"><a href=\"#Nginx是什么\" class=\"headerlink\" title=\"Nginx是什么\"></a>Nginx是什么</h2><p>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。</p>\n<p>其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、简单的配置文件和低系统资源的消耗而闻名。2011年6月1日，nginx 1.0.4发布。Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。</p>\n<h2 id=\"名词解释\"><a href=\"#名词解释\" class=\"headerlink\" title=\"名词解释\"></a>名词解释</h2><ol>\n<li>Web服务器</li>\n</ol>\n<p>WEB 服务器也叫网页服务器，英文名叫 Web Server，主要功能是为用户提供网上信息浏览服务。</p>\n<ol start=\"2\">\n<li>HTTP</li>\n</ol>\n<p>HTTP 是超文本传输协议的缩写，是用于从 WEB 服务器传输超文本到本地浏览器的传输协议，也是互联网上应用最为广泛的一种网络协议。HTTP 是一个客户端和服务器端请求和应答的标准，客户端是终端用户，服务端是网站，通过使用 Web 浏览器、网络爬虫或者其他工具，客户端发起一个到服务器上指定端口的 HTTP 请求。</p>\n<ol start=\"3\">\n<li>POP3/SMTP/IMAP</li>\n</ol>\n<p>POP3(Post Offic Protocol 3)邮局协议的第三个版本；</p>\n<p>SMTP(Simple Mail Transfer Protocol)简单邮件传输协议；</p>\n<p>IMAP(Internet Mail Access Protocol)交互式邮件存取协议；</p>\n<p>通过上述名词的解释，我们可以了解到 Nginx 也可以作为电子邮件代理服务器。</p>\n<ol start=\"4\">\n<li>正向代理</li>\n</ol>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.5u72na7a9hc0.webp\" alt=\"image\"></p>\n<p>反向代理</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.3622anezbxi0.webp\" alt=\"image\"></p>\n<p>正向代理的 Proxy 是多对一，反向代理的 Proxy 是一对多。</p>\n<h2 id=\"常见服务器对比\"><a href=\"#常见服务器对比\" class=\"headerlink\" title=\"常见服务器对比\"></a>常见服务器对比</h2><p>在介绍这一节内容之前，我们先来认识一家公司叫 Netcraft。</p>\n<blockquote>\n<p>Netcraft 公司于 1994 年底在英国成立，多年来一直致力于互联网市场以及在线安全方面的咨询服务，其中在国际上最具影响力的当属其针对网站服务器、SSL市场所做的客观严谨的分析研究，公司官网每月公布的调研数据（Web Server Survey）已成为当今人们了解全球网站数量以及服务器市场分额情况的主要参考依据，时常被诸如华尔街杂志，英国 BBC，Slashdot 等媒体报道或引用。</p>\n</blockquote>\n<p>我们先来看一组数据，我们先打开 Nginx 的官方网站 <a href=\"http://nginx.org/\" target=\"_blank\" rel=\"noopener\">http://nginx.org/</a>，找到 Netcraft 公司公布的数据，对当前主流服务器产品进行介绍。</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.6wcjq3k197c0.webp\" alt=\"image\"></p>\n<p>上面这张图展示了 2019 年全球主流 Web 服务器的市场情况，其中有 Apache、Microsoft-IIS、google Servers、Nginx、Tomcat 等，而我们在了解新事物的时候，往往习惯通过类比来帮助自己理解事物的概貌。可以看出绿色线的 nginx 在 2019 年已经领现全球了。</p>\n<p>所以下面我们把几种常见的服务器来给大家简单介绍下：</p>\n<h3 id=\"IIS\"><a href=\"#IIS\" class=\"headerlink\" title=\"IIS\"></a>IIS</h3><p>全称(Internet Information Services)即互联网信息服务，是由微软公司提供的基于 Windows 系统的互联网基本服务。Windows 作为服务器在稳定性与其他一些性能上都不如类 UNIX 操作系统，因此在需要高性能 Web 服务器的场合下，IIS 可能就会被「冷落」.</p>\n<h3 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h3><p>Tomcat是一个运行 Servlet 和 JSP 的 Web 应用软件，Tomcat 技术先进、性能稳定而且开放源代码，因此深受 Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的 Web 应用服务器。但是 Tomcat 天生是一个重量级的 Web 服务器，对静态文件和高并发的处理比较弱。</p>\n<h3 id=\"Apache\"><a href=\"#Apache\" class=\"headerlink\" title=\"Apache\"></a>Apache</h3><p>Apache 的发展时期很长，同时也有过一段辉煌的业绩。从上图可以看出大概在 2014 年以前都是市场份额第一的服务器。Apache 有很多优点，如稳定、开源、跨平台等。但是它出现的时间太久了，在它兴起的年代，互联网的产业规模远远不如今天，所以它被设计成一个重量级的、不支持高并发的 Web 服务器。在 Apache 服务器上，如果有数以万计的并发 HTTP 请求同时访问，就会导致服务器上消耗大量能存，操作系统内核对成百上千的 Apache 进程做进程间切换也会消耗大量的 CPU 资源，并导致 HTTP 请求的平均响应速度降低，这些都决定了 Apache 不可能成为高性能的 Web 服务器。这也促使了 Lighttpd 和 Nginx 的出现。</p>\n<h3 id=\"Lighttpd\"><a href=\"#Lighttpd\" class=\"headerlink\" title=\"Lighttpd\"></a>Lighttpd</h3><p>Lighttpd 是德国的一个开源的 Web 服务器软件，它和 Nginx 一样，都是轻量级、高性能的 Web 服务器，欧美的业界开发者比较钟爱 Lighttpd，而国内的公司更多的青睐 Nginx，同时网上 Nginx 的资源要更丰富些。</p>\n<h3 id=\"其他的服务器\"><a href=\"#其他的服务器\" class=\"headerlink\" title=\"其他的服务器\"></a>其他的服务器</h3><p>Google Servers，Weblogic, Webshpere(IBM) ……</p>\n<p>Google Servers 是闭源的，市面上很少看到。Weblogic 和 Webshpere(IBM) 使用起来都需要支付一定费用。</p>\n<p>经过各个服务器的对比，种种迹象都表明，Nginx 将以性能为王。这也是我们为什么选择 Nginx 的理由。</p>\n<h2 id=\"Nginx的优点\"><a href=\"#Nginx的优点\" class=\"headerlink\" title=\"Nginx的优点\"></a>Nginx的优点</h2><h3 id=\"速度更快、并发更高\"><a href=\"#速度更快、并发更高\" class=\"headerlink\" title=\"速度更快、并发更高\"></a>速度更快、并发更高</h3><p>单次请求或者高并发请求的环境下，Nginx 都会比其他 Web 服务器响应的速度更快。一方面在正常情况下，单次请求会得到更快的响应，另一方面，在高峰期(如有数以万计的并发请求)，Nginx 比其他 Web 服务器更快的响应请求。Nginx 之所以有这么高的并发处理能力和这么好的性能原因在于 Nginx 采用了多进程和 I/O 多路复用(epoll)的底层实现。</p>\n<h3 id=\"配置简单，扩展性强\"><a href=\"#配置简单，扩展性强\" class=\"headerlink\" title=\"配置简单，扩展性强\"></a>配置简单，扩展性强</h3><p>Nginx 的设计极具扩展性，它本身就是由很多模块组成，这些模块的使用可以通过配置文件的配置来添加。这些模块有官方提供的也有第三方提供的模块，如果需要完全可以开发服务自己业务特性的定制模块</p>\n<h3 id=\"高可靠性\"><a href=\"#高可靠性\" class=\"headerlink\" title=\"高可靠性\"></a>高可靠性</h3><p>Nginx 采用的是多进程模式运行，其中有一个 master 主进程和 N 多个 worker 进程，一个 master 管理多个 worker，worker 进程的数量我们可以手动设置，每个 worker 进程之间都是相互独立提供服务，并且 master 主进程可以在某一个 worker 进程出错时，快速去「拉起」新的 worker 进程提供服务。</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.3wz8th685620.webp\" alt=\"image\"></p>\n<h3 id=\"热部署-核心\"><a href=\"#热部署-核心\" class=\"headerlink\" title=\"热部署(核心)\"></a>热部署(核心)</h3><p>现在互联网项目都要求以 7 * 24 小时进行服务的提供，针对于这一要求，Nginx 也提供了热部署功能，即可以在 Nginx 不停止的情况下，对 Nginx 进行文件升级、更新配置和更换日志文件等功能。</p>\n<h3 id=\"成本低、BSD许可证\"><a href=\"#成本低、BSD许可证\" class=\"headerlink\" title=\"成本低、BSD许可证\"></a>成本低、BSD许可证</h3><p>BSD 是一个开源的许可证，世界上的开源许可证有很多，现在比较流行的有六种分别是 GPL、BSD、MIT、Mozilla、Apache、LGPL。这六种的区别是什么，我们可以通过下面一张图来解释下：</p>\n<p><img src=\"https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.771jinl18hw0.webp\" alt=\"image\"></p>\n<h2 id=\"Nginx的功能特性及常用功能\"><a href=\"#Nginx的功能特性及常用功能\" class=\"headerlink\" title=\"Nginx的功能特性及常用功能\"></a>Nginx的功能特性及常用功能</h2><p>Nginx 提供的基本功能服务从大体上归纳为「基本 HTTP 服务」、「高级 HTTP 服务」和「邮件服务」等三大类。</p>\n<h3 id=\"基本HTTP服务\"><a href=\"#基本HTTP服务\" class=\"headerlink\" title=\"基本HTTP服务\"></a>基本HTTP服务</h3><p>Nginx 可以提供基本 HTTP 服务，可以作为 HTTP 代理服务器和反向代理服务器，支持通过缓存加速访问，可以完成简单的负载均衡和容错，支持包过滤功能，支持 SSL 等。</p>\n<ul>\n<li>处理静态文件、处理索引文件以及支持自动索引</li>\n<li>提供反向代理服务器，并可以使用缓存加上反向代理，同时完成负载均衡和容错</li>\n<li>提供对 FastCGI、memcached 等服务的缓存机制，，同时完成负载均衡和容错</li>\n<li>使用 Nginx 的模块化特性提供过滤器功能。Nginx 基本过滤器包括 gzip 压缩、ranges 支持、chunked 响应、XSLT、SSI 以及图像缩放等。其中针对包含多个 SSI 的页面，经由 FastCGI 或反向代理，SSI 过滤器可以并行处理</li>\n<li>支持 HTTP 下的安全套接层安全协议 SSL.</li>\n<li>支持基于加权和依赖的优先权的 HTTP/2</li>\n</ul>\n<h3 id=\"高级HTTP服务\"><a href=\"#高级HTTP服务\" class=\"headerlink\" title=\"高级HTTP服务\"></a>高级HTTP服务</h3><ul>\n<li>支持基于名字和 IP 的虚拟主机设置</li>\n<li>支持 HTTP/1.0 中的 KEEP-Alive 模式和管线(PipeLined)模型连接</li>\n<li>自定义访问日志格式、带缓存的日志写操作以及快速日志轮转</li>\n<li>提供 3xx~5xx 错误代码重定向功能</li>\n<li>支持重写（Rewrite)模块扩展</li>\n<li>支持重新加载配置以及在线升级时无需中断正在处理的请求</li>\n<li>支持网络监控</li>\n<li>支持 FLV 和 MP4 流媒体传输</li>\n</ul>\n<h3 id=\"邮件服务\"><a href=\"#邮件服务\" class=\"headerlink\" title=\"邮件服务\"></a>邮件服务</h3><p>Nginx 提供邮件代理服务也是其基本开发需求之一，主要包含以下特性：</p>\n<ul>\n<li>支持 IMPA/POP3 代理服务功能</li>\n<li>支持内部 SMTP 代理服务功能</li>\n</ul>\n<h3 id=\"Nginx常用的功能模块\"><a href=\"#Nginx常用的功能模块\" class=\"headerlink\" title=\"Nginx常用的功能模块\"></a>Nginx常用的功能模块</h3><ul>\n<li>静态资源部署：核心功能</li>\n<li>Rewrite 地址重写：用到正则表达式</li>\n<li>反向代理</li>\n<li>负载均衡：轮询、加权轮询、ip_hash、url_hash、fair 等算法</li>\n<li>Web 缓存</li>\n<li>环境部署：搭建高可用的环境</li>\n<li>用户认证模块 …</li>\n<li>Nginx 的核心组成<ul>\n<li>nginx 二进制可执行文件（启动、关闭、加载 Nginx）</li>\n<li>nginx.conf 配置文件</li>\n<li>error.log 错误的日志记录</li>\n<li>access.log 访问日志记录</li>\n</ul>\n</li>\n</ul>\n"},{"title":"✨Deep-High-Resolution Representation Learning for Cross-Resolution Person Re-identification","date":"2021-10-06T16:00:00.000Z","_content":"\n<div align=\"center\">\n  \n[**<front size=5>Journal of IEEE TIP (SCI-Q1 Top)</front>**](https://ieeexplore.ieee.org/document/9591273/authors#citations)\n\n<center>\nG. Zhang, 👉Y. Ge👈, Z. Dong, H. Wang, Y. Zheng and S. Chen\n</center>\n\n![](https://img.gejiba.com/images/de85252fec31e625fecf220fa7b686b8.png)\n\n</div>\n\n## <a id=\"contents-\">Contents 🗒</a>\n- [<a id=\"contents-\">Contents 🗒</a>](#contents-)\n- [<a id=\"introduction-\">Introduction 🗒</a>](#introduction-)\n- [<a id=\"usage-\">Usage 🔧</a>](#usage-)\n- [<a id=\"result-\">Results 🏆</a>](#results-)\n- [<a id=\"acknowledgements-\">Acknowledgements 👍</a>](#acknowledgements-)\n\n## <a id=\"introduction-\">Introduction 🗒</a>\n\nWe propose a Deep High-Resolution Pseudo-Siamese Framework (PS-HRNet) to solve the cross-resolution person re-ID problem. Specifically, in order to restore the resolution of low-resolution images and make reasonable use of different channel information of feature maps, we introduce and innovate VDSR module with channel attention (CA) mechanism, named as VDSR-CA. Then we reform the HRNet by designing a novel representation head to extract discriminating features, named as HRNet-ReID. In addition, a pseudo-siamese framework is constructed to reduce the difference of feature distributions between low-resolution images and high-resolution images. The experimental results on five cross-resolution person datasets verify the effectiveness of our proposed approach. Compared with the state-of-the-art methods, our proposed PS-HRNet improves 3.4%, 6.2%, 2.5%,1.1% and 4.2% at Rank-1 on MLR-Market-1501, MLR-CUHK03, MLR-VIPeR, MLR-DukeMTMC-reID, and CAVIAR datasets, respectively.\n\n## <a id=\"usage-\">Usage 🔧</a>\n\nWe use apex (A PyTorch Extension) a Pytorch extension with NVIDIA-maintained utilities to streamline mixed precision and distributed training. Some of the code here will be included in upstream Pytorch eventually. The intention of Apex is to make up-to-date utilities available to users as quickly as possible.Installation instructions can be found here: https://github.com/NVIDIA/apex#quick-start.\n\nWe display the process of the algorithm as an ipynb file, you can use jupyter notebook to view and run it.\n\nYou may need HRNet-W32-C ImageNet pretrained models or learn more about HRNet: https://github.com/HRNet/HRNet-Image-Classification.git.\n\nWanna know more detail of the first phase？ Check this：https://github.com/NUISTGY/Person-re-identification-based-on-HRNet\n## <a id=\"result-\">Results 🏆</a>\n\n<div align=\"center\">\n\n![](https://img.gejiba.com/images/6670ce1bd1696c28e0fedd4fbefd676f.png)\n\n</div>\n\n## <a id=\"acknowledgements-\">Acknowledgements 👍</a>\n\n- This code is built on [HRNet-Image-Classification](https://github.com/HRNet/HRNet-Image-Classification) and [Person_reID_baseline_pytorch](https://github.com/layumi/Person_reID_baseline_pytorch). We thank the authors for sharing their codes. To the great spirit of open source!\n- Thank [Z.Dong](https://github.com/dzc2000) and [H.Wang](https://github.com/Rockdow), they are the most important contributors to the related work of the experiment. If you have any questions in the process of testing, you can send them by email or pose issues.\n- Thanks for the right to use the GPU workstation provided by Nanyang Technological University.\n","source":"_posts/PSHRNet.md","raw":"---\ntitle: ✨Deep-High-Resolution Representation Learning for Cross-Resolution Person Re-identification\ntags: [行人重识别,论文]\ncategories: [行人重识别]\ndate: 2021-10-7\n\n---\n\n<div align=\"center\">\n  \n[**<front size=5>Journal of IEEE TIP (SCI-Q1 Top)</front>**](https://ieeexplore.ieee.org/document/9591273/authors#citations)\n\n<center>\nG. Zhang, 👉Y. Ge👈, Z. Dong, H. Wang, Y. Zheng and S. Chen\n</center>\n\n![](https://img.gejiba.com/images/de85252fec31e625fecf220fa7b686b8.png)\n\n</div>\n\n## <a id=\"contents-\">Contents 🗒</a>\n- [<a id=\"contents-\">Contents 🗒</a>](#contents-)\n- [<a id=\"introduction-\">Introduction 🗒</a>](#introduction-)\n- [<a id=\"usage-\">Usage 🔧</a>](#usage-)\n- [<a id=\"result-\">Results 🏆</a>](#results-)\n- [<a id=\"acknowledgements-\">Acknowledgements 👍</a>](#acknowledgements-)\n\n## <a id=\"introduction-\">Introduction 🗒</a>\n\nWe propose a Deep High-Resolution Pseudo-Siamese Framework (PS-HRNet) to solve the cross-resolution person re-ID problem. Specifically, in order to restore the resolution of low-resolution images and make reasonable use of different channel information of feature maps, we introduce and innovate VDSR module with channel attention (CA) mechanism, named as VDSR-CA. Then we reform the HRNet by designing a novel representation head to extract discriminating features, named as HRNet-ReID. In addition, a pseudo-siamese framework is constructed to reduce the difference of feature distributions between low-resolution images and high-resolution images. The experimental results on five cross-resolution person datasets verify the effectiveness of our proposed approach. Compared with the state-of-the-art methods, our proposed PS-HRNet improves 3.4%, 6.2%, 2.5%,1.1% and 4.2% at Rank-1 on MLR-Market-1501, MLR-CUHK03, MLR-VIPeR, MLR-DukeMTMC-reID, and CAVIAR datasets, respectively.\n\n## <a id=\"usage-\">Usage 🔧</a>\n\nWe use apex (A PyTorch Extension) a Pytorch extension with NVIDIA-maintained utilities to streamline mixed precision and distributed training. Some of the code here will be included in upstream Pytorch eventually. The intention of Apex is to make up-to-date utilities available to users as quickly as possible.Installation instructions can be found here: https://github.com/NVIDIA/apex#quick-start.\n\nWe display the process of the algorithm as an ipynb file, you can use jupyter notebook to view and run it.\n\nYou may need HRNet-W32-C ImageNet pretrained models or learn more about HRNet: https://github.com/HRNet/HRNet-Image-Classification.git.\n\nWanna know more detail of the first phase？ Check this：https://github.com/NUISTGY/Person-re-identification-based-on-HRNet\n## <a id=\"result-\">Results 🏆</a>\n\n<div align=\"center\">\n\n![](https://img.gejiba.com/images/6670ce1bd1696c28e0fedd4fbefd676f.png)\n\n</div>\n\n## <a id=\"acknowledgements-\">Acknowledgements 👍</a>\n\n- This code is built on [HRNet-Image-Classification](https://github.com/HRNet/HRNet-Image-Classification) and [Person_reID_baseline_pytorch](https://github.com/layumi/Person_reID_baseline_pytorch). We thank the authors for sharing their codes. To the great spirit of open source!\n- Thank [Z.Dong](https://github.com/dzc2000) and [H.Wang](https://github.com/Rockdow), they are the most important contributors to the related work of the experiment. If you have any questions in the process of testing, you can send them by email or pose issues.\n- Thanks for the right to use the GPU workstation provided by Nanyang Technological University.\n","slug":"PSHRNet","published":1,"updated":"2022-09-06T02:29:36.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdle007na8vwug0axzy3","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><div align=\"center\">\n\n<p><a href=\"https://ieeexplore.ieee.org/document/9591273/authors#citations\" target=\"_blank\" rel=\"noopener\"><strong><front size=\"5\">Journal of IEEE TIP (SCI-Q1 Top)</front></strong></a></p>\n<center>\nG. Zhang, 👉Y. Ge👈, Z. Dong, H. Wang, Y. Zheng and S. Chen\n</center>\n\n<p><img src=\"https://img.gejiba.com/images/de85252fec31e625fecf220fa7b686b8.png\" alt></p>\n</div>\n\n<h2 id=\"Contents-🗒\"><a href=\"#Contents-🗒\" class=\"headerlink\" title=\"Contents 🗒\"></a><a id=\"contents-\">Contents 🗒</a></h2><ul>\n<li><a href=\"#contents-\"><a id=\"contents-\">Contents 🗒</a></a></li>\n<li><a href=\"#introduction-\"><a id=\"introduction-\">Introduction 🗒</a></a></li>\n<li><a href=\"#usage-\"><a id=\"usage-\">Usage 🔧</a></a></li>\n<li><a href=\"#results-\"><a id=\"result-\">Results 🏆</a></a></li>\n<li><a href=\"#acknowledgements-\"><a id=\"acknowledgements-\">Acknowledgements 👍</a></a></li>\n</ul>\n<h2 id=\"Introduction-🗒\"><a href=\"#Introduction-🗒\" class=\"headerlink\" title=\"Introduction 🗒\"></a><a id=\"introduction-\">Introduction 🗒</a></h2><p>We propose a Deep High-Resolution Pseudo-Siamese Framework (PS-HRNet) to solve the cross-resolution person re-ID problem. Specifically, in order to restore the resolution of low-resolution images and make reasonable use of different channel information of feature maps, we introduce and innovate VDSR module with channel attention (CA) mechanism, named as VDSR-CA. Then we reform the HRNet by designing a novel representation head to extract discriminating features, named as HRNet-ReID. In addition, a pseudo-siamese framework is constructed to reduce the difference of feature distributions between low-resolution images and high-resolution images. The experimental results on five cross-resolution person datasets verify the effectiveness of our proposed approach. Compared with the state-of-the-art methods, our proposed PS-HRNet improves 3.4%, 6.2%, 2.5%,1.1% and 4.2% at Rank-1 on MLR-Market-1501, MLR-CUHK03, MLR-VIPeR, MLR-DukeMTMC-reID, and CAVIAR datasets, respectively.</p>\n<h2 id=\"Usage-🔧\"><a href=\"#Usage-🔧\" class=\"headerlink\" title=\"Usage 🔧\"></a><a id=\"usage-\">Usage 🔧</a></h2><p>We use apex (A PyTorch Extension) a Pytorch extension with NVIDIA-maintained utilities to streamline mixed precision and distributed training. Some of the code here will be included in upstream Pytorch eventually. The intention of Apex is to make up-to-date utilities available to users as quickly as possible.Installation instructions can be found here: <a href=\"https://github.com/NVIDIA/apex#quick-start\">https://github.com/NVIDIA/apex#quick-start</a>.</p>\n<p>We display the process of the algorithm as an ipynb file, you can use jupyter notebook to view and run it.</p>\n<p>You may need HRNet-W32-C ImageNet pretrained models or learn more about HRNet: <a href=\"https://github.com/HRNet/HRNet-Image-Classification.git\">https://github.com/HRNet/HRNet-Image-Classification.git</a>.</p>\n<p>Wanna know more detail of the first phase？ Check this：<a href=\"https://github.com/NUISTGY/Person-re-identification-based-on-HRNet\">https://github.com/NUISTGY/Person-re-identification-based-on-HRNet</a></p>\n<h2 id=\"Results-🏆\"><a href=\"#Results-🏆\" class=\"headerlink\" title=\"Results 🏆\"></a><a id=\"result-\">Results 🏆</a></h2><div align=\"center\">\n\n<p><img src=\"https://img.gejiba.com/images/6670ce1bd1696c28e0fedd4fbefd676f.png\" alt></p>\n</div>\n\n<h2 id=\"Acknowledgements-👍\"><a href=\"#Acknowledgements-👍\" class=\"headerlink\" title=\"Acknowledgements 👍\"></a><a id=\"acknowledgements-\">Acknowledgements 👍</a></h2><ul>\n<li>This code is built on <a href=\"https://github.com/HRNet/HRNet-Image-Classification\">HRNet-Image-Classification</a> and <a href=\"https://github.com/layumi/Person_reID_baseline_pytorch\">Person_reID_baseline_pytorch</a>. We thank the authors for sharing their codes. To the great spirit of open source!</li>\n<li>Thank <a href=\"https://github.com/dzc2000\">Z.Dong</a> and <a href=\"https://github.com/Rockdow\">H.Wang</a>, they are the most important contributors to the related work of the experiment. If you have any questions in the process of testing, you can send them by email or pose issues.</li>\n<li>Thanks for the right to use the GPU workstation provided by Nanyang Technological University.</li>\n</ul>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<div align=\"center\">\n\n<p><a href=\"https://ieeexplore.ieee.org/document/9591273/authors#citations\" target=\"_blank\" rel=\"noopener\"><strong><front size=\"5\">Journal of IEEE TIP (SCI-Q1 Top)</front></strong></a></p>\n<center>\nG. Zhang, 👉Y. Ge👈, Z. Dong, H. Wang, Y. Zheng and S. Chen\n</center>\n\n<p><img src=\"https://img.gejiba.com/images/de85252fec31e625fecf220fa7b686b8.png\" alt></p>\n</div>\n\n<h2 id=\"Contents-🗒\"><a href=\"#Contents-🗒\" class=\"headerlink\" title=\"Contents 🗒\"></a><a id=\"contents-\">Contents 🗒</a></h2><ul>\n<li><a href=\"#contents-\"><a id=\"contents-\">Contents 🗒</a></a></li>\n<li><a href=\"#introduction-\"><a id=\"introduction-\">Introduction 🗒</a></a></li>\n<li><a href=\"#usage-\"><a id=\"usage-\">Usage 🔧</a></a></li>\n<li><a href=\"#results-\"><a id=\"result-\">Results 🏆</a></a></li>\n<li><a href=\"#acknowledgements-\"><a id=\"acknowledgements-\">Acknowledgements 👍</a></a></li>\n</ul>\n<h2 id=\"Introduction-🗒\"><a href=\"#Introduction-🗒\" class=\"headerlink\" title=\"Introduction 🗒\"></a><a id=\"introduction-\">Introduction 🗒</a></h2><p>We propose a Deep High-Resolution Pseudo-Siamese Framework (PS-HRNet) to solve the cross-resolution person re-ID problem. Specifically, in order to restore the resolution of low-resolution images and make reasonable use of different channel information of feature maps, we introduce and innovate VDSR module with channel attention (CA) mechanism, named as VDSR-CA. Then we reform the HRNet by designing a novel representation head to extract discriminating features, named as HRNet-ReID. In addition, a pseudo-siamese framework is constructed to reduce the difference of feature distributions between low-resolution images and high-resolution images. The experimental results on five cross-resolution person datasets verify the effectiveness of our proposed approach. Compared with the state-of-the-art methods, our proposed PS-HRNet improves 3.4%, 6.2%, 2.5%,1.1% and 4.2% at Rank-1 on MLR-Market-1501, MLR-CUHK03, MLR-VIPeR, MLR-DukeMTMC-reID, and CAVIAR datasets, respectively.</p>\n<h2 id=\"Usage-🔧\"><a href=\"#Usage-🔧\" class=\"headerlink\" title=\"Usage 🔧\"></a><a id=\"usage-\">Usage 🔧</a></h2><p>We use apex (A PyTorch Extension) a Pytorch extension with NVIDIA-maintained utilities to streamline mixed precision and distributed training. Some of the code here will be included in upstream Pytorch eventually. The intention of Apex is to make up-to-date utilities available to users as quickly as possible.Installation instructions can be found here: <a href=\"https://github.com/NVIDIA/apex#quick-start\">https://github.com/NVIDIA/apex#quick-start</a>.</p>\n<p>We display the process of the algorithm as an ipynb file, you can use jupyter notebook to view and run it.</p>\n<p>You may need HRNet-W32-C ImageNet pretrained models or learn more about HRNet: <a href=\"https://github.com/HRNet/HRNet-Image-Classification.git\">https://github.com/HRNet/HRNet-Image-Classification.git</a>.</p>\n<p>Wanna know more detail of the first phase？ Check this：<a href=\"https://github.com/NUISTGY/Person-re-identification-based-on-HRNet\">https://github.com/NUISTGY/Person-re-identification-based-on-HRNet</a></p>\n<h2 id=\"Results-🏆\"><a href=\"#Results-🏆\" class=\"headerlink\" title=\"Results 🏆\"></a><a id=\"result-\">Results 🏆</a></h2><div align=\"center\">\n\n<p><img src=\"https://img.gejiba.com/images/6670ce1bd1696c28e0fedd4fbefd676f.png\" alt></p>\n</div>\n\n<h2 id=\"Acknowledgements-👍\"><a href=\"#Acknowledgements-👍\" class=\"headerlink\" title=\"Acknowledgements 👍\"></a><a id=\"acknowledgements-\">Acknowledgements 👍</a></h2><ul>\n<li>This code is built on <a href=\"https://github.com/HRNet/HRNet-Image-Classification\">HRNet-Image-Classification</a> and <a href=\"https://github.com/layumi/Person_reID_baseline_pytorch\">Person_reID_baseline_pytorch</a>. We thank the authors for sharing their codes. To the great spirit of open source!</li>\n<li>Thank <a href=\"https://github.com/dzc2000\">Z.Dong</a> and <a href=\"https://github.com/Rockdow\">H.Wang</a>, they are the most important contributors to the related work of the experiment. If you have any questions in the process of testing, you can send them by email or pose issues.</li>\n<li>Thanks for the right to use the GPU workstation provided by Nanyang Technological University.</li>\n</ul>\n"},{"title":"Person Re-identification数据集描述——Market-1501","date":"2019-07-30T16:00:00.000Z","_content":"\n![](http://changingfond.oss-cn-hangzhou.aliyuncs.com/18-7-12/87140649.jpg)\n# 数据集简介\n**Market-1501** 数据集在清华大学校园中采集，夏天拍摄，在 2015 年构建并公开。它包括由6个摄像头（其中5个高清摄像头和1个低清摄像头）拍摄到的 1501 个行人、32668 个检测到的行人矩形框。每个行人至少由2个摄像头捕获到，并且在一个摄像头中可能具有多张图像。训练集有 751 人，包含 12,936 张图像，平均每个人有 17.2 张训练数据；测试集有 750 人，包含 19,732 张图像，平均每个人有 26.3 张测试数据。3368 张查询图像的行人检测矩形框是人工绘制的，而 gallery 中的行人检测矩形框则是使用DPM检测器检测得到的。该数据集提供的固定数量的训练集和测试集均可以在single-shot或multi-shot测试设置下使用。\n## 目录结构\nMarket-1501\n　　├── bounding_box_test\n　　　　　　　├── 0000_c1s1_000151_01.jpg\n　　　　　　　├── 0000_c1s1_000376_03.jpg\n　　　　　　　├── 0000_c1s1_001051_02.jpg\n　　├── bounding_box_train\n　　　　　　　├── 0002_c1s1_000451_03.jpg\n　　　　　　　├── 0002_c1s1_000551_01.jpg\n　　　　　　　├── 0002_c1s1_000801_01.jpg\n　　├── gt_bbox\n　　　　　　　├── 0001_c1s1_001051_00.jpg\n　　　　　　　├── 0001_c1s1_009376_00.jpg\n　　　　　　　├── 0001_c2s1_001976_00.jpg\n　　├── gt_query\n　　　　　　　├── 0001_c1s1_001051_00_good.mat\n　　　　　　　├── 0001_c1s1_001051_00_junk.mat\n　　├── query\n　　　　　　　├── 0001_c1s1_001051_00.jpg\n　　　　　　　├── 0001_c2s1_000301_00.jpg\n　　　　　　　├── 0001_c3s1_000551_00.jpg\n　　└── readme.txt\n##   目录介绍\n - **“bounding_box_test”**——用于测试集的 750 人，包含 19,732 张图像，前缀为 0000 表示在提取这 750 人的过程中DPM检测错的图（可能与query是同一个人），-1 表示检测出来其他人的图（不在这 750 人中）\n\n- **“bounding_box_train”**——用于训练集的 751 人，包含 12,936 张图像\n-  **“query”**——为 750 人在每个摄像头中随机选择一张图像作为query，因此一个人的query最多有 6 个，共有 3,368 张图像\n\n- **“gt_query”**——matlab格式，用于判断一个query的哪些图片是好的匹配（同一个人不同摄像头的图像）和不好的匹配（同一个人同一个摄像头的图像或非同一个人的图像）\n-  **“gt_bbox”**——手工标注的bounding box，用于判断DPM检测的bounding box是不是一个好的box\n\n## 命名规则\n**以 0001_c1s1_000151_01.jpg 为例**\n-  0001 表示每个人的标签编号，从0001到1501；\n-  c1 表示第一个摄像头(camera1)，共有6个摄像头；\n-  s1 表示第一个录像片段(sequece1)，每个摄像机都有数个录像段；\n-  000151 表示 c1s1 的第000151帧图片，视频帧率25fps；\n-  01 表示 c1s1_001051 这一帧上的第1个检测框，由于采用DPM检测器，对于每一帧上的行人可能会框出好几个bbox。00 表示手工标注框\n\n# 参考文献\n- Zheng, Liang, et al. “Scalable Person Re-identification: A Benchmark.” IEEE International Conference on Computer Vision IEEE Computer Society, 2015:1116-1124.","source":"_posts/Person Re-identification数据集描述——Market-1501.md","raw":"---\ntitle:  Person Re-identification数据集描述——Market-1501\ntags: [行人重识别,数据集]\ncategories: [数据集]\ndate: 2019-7-31\n\n---\n\n![](http://changingfond.oss-cn-hangzhou.aliyuncs.com/18-7-12/87140649.jpg)\n# 数据集简介\n**Market-1501** 数据集在清华大学校园中采集，夏天拍摄，在 2015 年构建并公开。它包括由6个摄像头（其中5个高清摄像头和1个低清摄像头）拍摄到的 1501 个行人、32668 个检测到的行人矩形框。每个行人至少由2个摄像头捕获到，并且在一个摄像头中可能具有多张图像。训练集有 751 人，包含 12,936 张图像，平均每个人有 17.2 张训练数据；测试集有 750 人，包含 19,732 张图像，平均每个人有 26.3 张测试数据。3368 张查询图像的行人检测矩形框是人工绘制的，而 gallery 中的行人检测矩形框则是使用DPM检测器检测得到的。该数据集提供的固定数量的训练集和测试集均可以在single-shot或multi-shot测试设置下使用。\n## 目录结构\nMarket-1501\n　　├── bounding_box_test\n　　　　　　　├── 0000_c1s1_000151_01.jpg\n　　　　　　　├── 0000_c1s1_000376_03.jpg\n　　　　　　　├── 0000_c1s1_001051_02.jpg\n　　├── bounding_box_train\n　　　　　　　├── 0002_c1s1_000451_03.jpg\n　　　　　　　├── 0002_c1s1_000551_01.jpg\n　　　　　　　├── 0002_c1s1_000801_01.jpg\n　　├── gt_bbox\n　　　　　　　├── 0001_c1s1_001051_00.jpg\n　　　　　　　├── 0001_c1s1_009376_00.jpg\n　　　　　　　├── 0001_c2s1_001976_00.jpg\n　　├── gt_query\n　　　　　　　├── 0001_c1s1_001051_00_good.mat\n　　　　　　　├── 0001_c1s1_001051_00_junk.mat\n　　├── query\n　　　　　　　├── 0001_c1s1_001051_00.jpg\n　　　　　　　├── 0001_c2s1_000301_00.jpg\n　　　　　　　├── 0001_c3s1_000551_00.jpg\n　　└── readme.txt\n##   目录介绍\n - **“bounding_box_test”**——用于测试集的 750 人，包含 19,732 张图像，前缀为 0000 表示在提取这 750 人的过程中DPM检测错的图（可能与query是同一个人），-1 表示检测出来其他人的图（不在这 750 人中）\n\n- **“bounding_box_train”**——用于训练集的 751 人，包含 12,936 张图像\n-  **“query”**——为 750 人在每个摄像头中随机选择一张图像作为query，因此一个人的query最多有 6 个，共有 3,368 张图像\n\n- **“gt_query”**——matlab格式，用于判断一个query的哪些图片是好的匹配（同一个人不同摄像头的图像）和不好的匹配（同一个人同一个摄像头的图像或非同一个人的图像）\n-  **“gt_bbox”**——手工标注的bounding box，用于判断DPM检测的bounding box是不是一个好的box\n\n## 命名规则\n**以 0001_c1s1_000151_01.jpg 为例**\n-  0001 表示每个人的标签编号，从0001到1501；\n-  c1 表示第一个摄像头(camera1)，共有6个摄像头；\n-  s1 表示第一个录像片段(sequece1)，每个摄像机都有数个录像段；\n-  000151 表示 c1s1 的第000151帧图片，视频帧率25fps；\n-  01 表示 c1s1_001051 这一帧上的第1个检测框，由于采用DPM检测器，对于每一帧上的行人可能会框出好几个bbox。00 表示手工标注框\n\n# 参考文献\n- Zheng, Liang, et al. “Scalable Person Re-identification: A Benchmark.” IEEE International Conference on Computer Vision IEEE Computer Society, 2015:1116-1124.","slug":"Person Re-identification数据集描述——Market-1501","published":1,"updated":"2019-10-25T07:30:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdlg007sa8vwqjgcf8iy","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p><img src=\"http://changingfond.oss-cn-hangzhou.aliyuncs.com/18-7-12/87140649.jpg\" alt></p>\n<h1 id=\"数据集简介\"><a href=\"#数据集简介\" class=\"headerlink\" title=\"数据集简介\"></a>数据集简介</h1><p><strong>Market-1501</strong> 数据集在清华大学校园中采集，夏天拍摄，在 2015 年构建并公开。它包括由6个摄像头（其中5个高清摄像头和1个低清摄像头）拍摄到的 1501 个行人、32668 个检测到的行人矩形框。每个行人至少由2个摄像头捕获到，并且在一个摄像头中可能具有多张图像。训练集有 751 人，包含 12,936 张图像，平均每个人有 17.2 张训练数据；测试集有 750 人，包含 19,732 张图像，平均每个人有 26.3 张测试数据。3368 张查询图像的行人检测矩形框是人工绘制的，而 gallery 中的行人检测矩形框则是使用DPM检测器检测得到的。该数据集提供的固定数量的训练集和测试集均可以在single-shot或multi-shot测试设置下使用。</p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>Market-1501<br>　　├── bounding_box_test<br>　　　　　　　├── 0000_c1s1_000151_01.jpg<br>　　　　　　　├── 0000_c1s1_000376_03.jpg<br>　　　　　　　├── 0000_c1s1_001051_02.jpg<br>　　├── bounding_box_train<br>　　　　　　　├── 0002_c1s1_000451_03.jpg<br>　　　　　　　├── 0002_c1s1_000551_01.jpg<br>　　　　　　　├── 0002_c1s1_000801_01.jpg<br>　　├── gt_bbox<br>　　　　　　　├── 0001_c1s1_001051_00.jpg<br>　　　　　　　├── 0001_c1s1_009376_00.jpg<br>　　　　　　　├── 0001_c2s1_001976_00.jpg<br>　　├── gt_query<br>　　　　　　　├── 0001_c1s1_001051_00_good.mat<br>　　　　　　　├── 0001_c1s1_001051_00_junk.mat<br>　　├── query<br>　　　　　　　├── 0001_c1s1_001051_00.jpg<br>　　　　　　　├── 0001_c2s1_000301_00.jpg<br>　　　　　　　├── 0001_c3s1_000551_00.jpg<br>　　└── readme.txt</p>\n<h2 id=\"目录介绍\"><a href=\"#目录介绍\" class=\"headerlink\" title=\"目录介绍\"></a>目录介绍</h2><ul>\n<li><strong>“bounding_box_test”</strong>——用于测试集的 750 人，包含 19,732 张图像，前缀为 0000 表示在提取这 750 人的过程中DPM检测错的图（可能与query是同一个人），-1 表示检测出来其他人的图（不在这 750 人中）</li>\n</ul>\n<ul>\n<li><p><strong>“bounding_box_train”</strong>——用于训练集的 751 人，包含 12,936 张图像</p>\n</li>\n<li><p><strong>“query”</strong>——为 750 人在每个摄像头中随机选择一张图像作为query，因此一个人的query最多有 6 个，共有 3,368 张图像</p>\n</li>\n<li><p><strong>“gt_query”</strong>——matlab格式，用于判断一个query的哪些图片是好的匹配（同一个人不同摄像头的图像）和不好的匹配（同一个人同一个摄像头的图像或非同一个人的图像）</p>\n</li>\n<li><p><strong>“gt_bbox”</strong>——手工标注的bounding box，用于判断DPM检测的bounding box是不是一个好的box</p>\n</li>\n</ul>\n<h2 id=\"命名规则\"><a href=\"#命名规则\" class=\"headerlink\" title=\"命名规则\"></a>命名规则</h2><p><strong>以 0001_c1s1_000151_01.jpg 为例</strong></p>\n<ul>\n<li>0001 表示每个人的标签编号，从0001到1501；</li>\n<li>c1 表示第一个摄像头(camera1)，共有6个摄像头；</li>\n<li>s1 表示第一个录像片段(sequece1)，每个摄像机都有数个录像段；</li>\n<li>000151 表示 c1s1 的第000151帧图片，视频帧率25fps；</li>\n<li>01 表示 c1s1_001051 这一帧上的第1个检测框，由于采用DPM检测器，对于每一帧上的行人可能会框出好几个bbox。00 表示手工标注框</li>\n</ul>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><ul>\n<li>Zheng, Liang, et al. “Scalable Person Re-identification: A Benchmark.” IEEE International Conference on Computer Vision IEEE Computer Society, 2015:1116-1124.</li>\n</ul>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<p><img src=\"http://changingfond.oss-cn-hangzhou.aliyuncs.com/18-7-12/87140649.jpg\" alt></p>\n<h1 id=\"数据集简介\"><a href=\"#数据集简介\" class=\"headerlink\" title=\"数据集简介\"></a>数据集简介</h1><p><strong>Market-1501</strong> 数据集在清华大学校园中采集，夏天拍摄，在 2015 年构建并公开。它包括由6个摄像头（其中5个高清摄像头和1个低清摄像头）拍摄到的 1501 个行人、32668 个检测到的行人矩形框。每个行人至少由2个摄像头捕获到，并且在一个摄像头中可能具有多张图像。训练集有 751 人，包含 12,936 张图像，平均每个人有 17.2 张训练数据；测试集有 750 人，包含 19,732 张图像，平均每个人有 26.3 张测试数据。3368 张查询图像的行人检测矩形框是人工绘制的，而 gallery 中的行人检测矩形框则是使用DPM检测器检测得到的。该数据集提供的固定数量的训练集和测试集均可以在single-shot或multi-shot测试设置下使用。</p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>Market-1501<br>　　├── bounding_box_test<br>　　　　　　　├── 0000_c1s1_000151_01.jpg<br>　　　　　　　├── 0000_c1s1_000376_03.jpg<br>　　　　　　　├── 0000_c1s1_001051_02.jpg<br>　　├── bounding_box_train<br>　　　　　　　├── 0002_c1s1_000451_03.jpg<br>　　　　　　　├── 0002_c1s1_000551_01.jpg<br>　　　　　　　├── 0002_c1s1_000801_01.jpg<br>　　├── gt_bbox<br>　　　　　　　├── 0001_c1s1_001051_00.jpg<br>　　　　　　　├── 0001_c1s1_009376_00.jpg<br>　　　　　　　├── 0001_c2s1_001976_00.jpg<br>　　├── gt_query<br>　　　　　　　├── 0001_c1s1_001051_00_good.mat<br>　　　　　　　├── 0001_c1s1_001051_00_junk.mat<br>　　├── query<br>　　　　　　　├── 0001_c1s1_001051_00.jpg<br>　　　　　　　├── 0001_c2s1_000301_00.jpg<br>　　　　　　　├── 0001_c3s1_000551_00.jpg<br>　　└── readme.txt</p>\n<h2 id=\"目录介绍\"><a href=\"#目录介绍\" class=\"headerlink\" title=\"目录介绍\"></a>目录介绍</h2><ul>\n<li><strong>“bounding_box_test”</strong>——用于测试集的 750 人，包含 19,732 张图像，前缀为 0000 表示在提取这 750 人的过程中DPM检测错的图（可能与query是同一个人），-1 表示检测出来其他人的图（不在这 750 人中）</li>\n</ul>\n<ul>\n<li><p><strong>“bounding_box_train”</strong>——用于训练集的 751 人，包含 12,936 张图像</p>\n</li>\n<li><p><strong>“query”</strong>——为 750 人在每个摄像头中随机选择一张图像作为query，因此一个人的query最多有 6 个，共有 3,368 张图像</p>\n</li>\n<li><p><strong>“gt_query”</strong>——matlab格式，用于判断一个query的哪些图片是好的匹配（同一个人不同摄像头的图像）和不好的匹配（同一个人同一个摄像头的图像或非同一个人的图像）</p>\n</li>\n<li><p><strong>“gt_bbox”</strong>——手工标注的bounding box，用于判断DPM检测的bounding box是不是一个好的box</p>\n</li>\n</ul>\n<h2 id=\"命名规则\"><a href=\"#命名规则\" class=\"headerlink\" title=\"命名规则\"></a>命名规则</h2><p><strong>以 0001_c1s1_000151_01.jpg 为例</strong></p>\n<ul>\n<li>0001 表示每个人的标签编号，从0001到1501；</li>\n<li>c1 表示第一个摄像头(camera1)，共有6个摄像头；</li>\n<li>s1 表示第一个录像片段(sequece1)，每个摄像机都有数个录像段；</li>\n<li>000151 表示 c1s1 的第000151帧图片，视频帧率25fps；</li>\n<li>01 表示 c1s1_001051 这一帧上的第1个检测框，由于采用DPM检测器，对于每一帧上的行人可能会框出好几个bbox。00 表示手工标注框</li>\n</ul>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><ul>\n<li>Zheng, Liang, et al. “Scalable Person Re-identification: A Benchmark.” IEEE International Conference on Computer Vision IEEE Computer Society, 2015:1116-1124.</li>\n</ul>\n"},{"title":"SpringMVC - 获取Get请求参数详解","date":"2022-09-12T16:00:00.000Z","_content":"\n## 引言\n\n**<center>📨本篇主要对比两种获取Get请求参数方法的区别📨</center>**\n\n### 代码\n\n先看如下两段基于@GetMapping注解的方法👇\n\n```java\n    @GetMapping(\"/page\")\n    public R<Page> page(int page, int pageSize, String name){\n        log.info(\"page={}, pageSize={}, name={}\", page, pageSize, name);\n\n        //创建页面对象\n        Page pageInfo = new Page(page,pageSize);\n        //配置分页条件\n        LambdaQueryWrapper<Employee> queryWrapper = new LambdaQueryWrapper();\n        queryWrapper.like(StringUtils.isNotEmpty(name), Employee::getName, name);\n        queryWrapper.orderByDesc(Employee::getUpdateTime);\n\n        employeeService.page(pageInfo, queryWrapper);\n\n        return R.success(pageInfo);\n    }\n```\n```java\n    @GetMapping(\"/{id}\")\n    public R<Employee> getByID(@PathVariable Long id){\n        Employee employee = employeeService.getById(id);\n        if (employee != null) {\n            return R.success(employee);\n        }\n        return R.error(\"查询失败！\");\n    }\n```\n\n### 说明\n上面两段代码中：\n- 共同点是都是针对Get请求的后端代码逻辑处理\n- 主要的不同之处是对于Get请求参数的获取方式\n- 第一段代码的完整请求路径是：**http://localhost:8080/employee/page?page=1&pageSize=2**\n- 第二段代码的完整请求路径是：**http://localhost:8080/employee/141242344443454456**\n\n## 关于第一种方式\n\n第一种属于传统方式的Get请求参数获取方法，即参数跟在问号后面。\n我们假有这样一段请求需要处理：**http://localhost:8080/helloworld?name=张三**\n则Controller中的处理代码如下👇\n```java\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.bind.annotation.GetMapping;\n \n@RestController\npublic class HelloController {\n    @GetMapping(\"/helloworld\")\n    public String helloworld1(@RequestParam(\"name\") String name) {\n        return \"获取到的name是：\" + name;\n    }\n}\n```\n### @RequestParam使用\n\n这种方式涉及了@RequestParam注解的使用，关于该注解总结如下👇\n- 不加@RequestParam，前端的参数名需要和后端控制器的变量名保持一致才能生效\n\n- 不加@RequestParam，参数为非必传，加@RequestParam写法参数为必传。但@RequestParam可以通过@RequestParam(required = false)设置为非必传。\n\n- @RequestParam可以通过@RequestParam(“userId”)或者@RequestParam(value = “userId”)指定传入的参数名。\n\n- @RequestParam可以通过@RequestParam(defaultValue = “0”)指定参数默认值\n\n- 如果接口除了前端调用还有后端RPC调用，则不能省略@RequestParam，否则RPC会找不到参数报错\n\n- 访问时：\n  - 不加@RequestParam注解：url可带参数也可不带参数\n  - 加@RequestParam注解：url必须带有参数\n\n## 关于第二种方式\n第二种是典型的 RESTful 风格，ID参数值直接放在路径里面。\n我们假有这样一段请求需要处理：**http://localhost:8080/helloworld/张三**\n则Controller中的处理代码如下👇\n```java\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class HelloWorldController {\n\n    @GetMapping(\"/helloworld/{name}\")\n    public String helloworld(@PathVariable(\"name\") String name) {\n        return \"获取到的name是：\" + name;\n    }\n}\n```\n### @PathVariable使用\n通过 @PathVariable 可以将 URL 中占位符参数绑定到控制器处理方法的形参中。\n\n- 若方法参数名称和需要绑定的url中变量名称一致时,可以简写：\n  ```java   \n    @GetMapping(\"/{id}\")\n    public R<Employee> getByID(@PathVariable Long id){\n        Employee employee = employeeService.getById(id);\n        if (employee != null) {\n            return R.success(employee);\n        }\n        return R.error(\"查询失败！\");\n    }\n  ```\n- 若方法参数名称和需要绑定的url中变量名称不一致时，写成：\n  ```java\n    @GetMapping(\"/{id}\")\n    public R<Employee> getByID(@PathVariable(\"id\") Long empId){\n        Employee employee = employeeService.getById(id);\n        if (employee != null) {\n            return R.success(employee);\n        }\n        return R.error(\"查询失败！\");\n    }\n  ```\n\n ---\n ## 2022/9/14 更新\n\n ### 第一种方式的补充：使用对象来接收参数\n\n 此处定义一个简单的POJO如下👇\n ```java\n public class User {\n    private String name;\n    private Integer age;\n \n    public String getName() {\n        return name;\n    }\n \n    public void setName(String name) {\n        this.name = name;\n    }\n \n    public Integer getAge() {\n        return age;\n    }\n \n    public void setAge(Integer age) {\n        this.age = age;\n    }\n}\n ```\n定义一个RestController如下👇\n```java\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.bind.annotation.GetMapping;\n \n@RestController\npublic class HelloController {\n    @GetMapping(\"/helloworld\")\n    public String helloworld(User user) {\n        return \"name：\" + user.getName();\n    }\n}\n```\n现在给出一个GET请求：**http://localhost:8080/helloworld?name=张三**\n则浏览器可以看到：**name: 张三**","source":"_posts/SpringMVC - 获取Get请求参数详解.md","raw":"---\ntitle:  SpringMVC - 获取Get请求参数详解\ntags: [JavaWeb,后端,SpringMVC,RESTful]\ncategories: [后端]\ndate: 2022-9-13\n\n---\n\n## 引言\n\n**<center>📨本篇主要对比两种获取Get请求参数方法的区别📨</center>**\n\n### 代码\n\n先看如下两段基于@GetMapping注解的方法👇\n\n```java\n    @GetMapping(\"/page\")\n    public R<Page> page(int page, int pageSize, String name){\n        log.info(\"page={}, pageSize={}, name={}\", page, pageSize, name);\n\n        //创建页面对象\n        Page pageInfo = new Page(page,pageSize);\n        //配置分页条件\n        LambdaQueryWrapper<Employee> queryWrapper = new LambdaQueryWrapper();\n        queryWrapper.like(StringUtils.isNotEmpty(name), Employee::getName, name);\n        queryWrapper.orderByDesc(Employee::getUpdateTime);\n\n        employeeService.page(pageInfo, queryWrapper);\n\n        return R.success(pageInfo);\n    }\n```\n```java\n    @GetMapping(\"/{id}\")\n    public R<Employee> getByID(@PathVariable Long id){\n        Employee employee = employeeService.getById(id);\n        if (employee != null) {\n            return R.success(employee);\n        }\n        return R.error(\"查询失败！\");\n    }\n```\n\n### 说明\n上面两段代码中：\n- 共同点是都是针对Get请求的后端代码逻辑处理\n- 主要的不同之处是对于Get请求参数的获取方式\n- 第一段代码的完整请求路径是：**http://localhost:8080/employee/page?page=1&pageSize=2**\n- 第二段代码的完整请求路径是：**http://localhost:8080/employee/141242344443454456**\n\n## 关于第一种方式\n\n第一种属于传统方式的Get请求参数获取方法，即参数跟在问号后面。\n我们假有这样一段请求需要处理：**http://localhost:8080/helloworld?name=张三**\n则Controller中的处理代码如下👇\n```java\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.bind.annotation.GetMapping;\n \n@RestController\npublic class HelloController {\n    @GetMapping(\"/helloworld\")\n    public String helloworld1(@RequestParam(\"name\") String name) {\n        return \"获取到的name是：\" + name;\n    }\n}\n```\n### @RequestParam使用\n\n这种方式涉及了@RequestParam注解的使用，关于该注解总结如下👇\n- 不加@RequestParam，前端的参数名需要和后端控制器的变量名保持一致才能生效\n\n- 不加@RequestParam，参数为非必传，加@RequestParam写法参数为必传。但@RequestParam可以通过@RequestParam(required = false)设置为非必传。\n\n- @RequestParam可以通过@RequestParam(“userId”)或者@RequestParam(value = “userId”)指定传入的参数名。\n\n- @RequestParam可以通过@RequestParam(defaultValue = “0”)指定参数默认值\n\n- 如果接口除了前端调用还有后端RPC调用，则不能省略@RequestParam，否则RPC会找不到参数报错\n\n- 访问时：\n  - 不加@RequestParam注解：url可带参数也可不带参数\n  - 加@RequestParam注解：url必须带有参数\n\n## 关于第二种方式\n第二种是典型的 RESTful 风格，ID参数值直接放在路径里面。\n我们假有这样一段请求需要处理：**http://localhost:8080/helloworld/张三**\n则Controller中的处理代码如下👇\n```java\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class HelloWorldController {\n\n    @GetMapping(\"/helloworld/{name}\")\n    public String helloworld(@PathVariable(\"name\") String name) {\n        return \"获取到的name是：\" + name;\n    }\n}\n```\n### @PathVariable使用\n通过 @PathVariable 可以将 URL 中占位符参数绑定到控制器处理方法的形参中。\n\n- 若方法参数名称和需要绑定的url中变量名称一致时,可以简写：\n  ```java   \n    @GetMapping(\"/{id}\")\n    public R<Employee> getByID(@PathVariable Long id){\n        Employee employee = employeeService.getById(id);\n        if (employee != null) {\n            return R.success(employee);\n        }\n        return R.error(\"查询失败！\");\n    }\n  ```\n- 若方法参数名称和需要绑定的url中变量名称不一致时，写成：\n  ```java\n    @GetMapping(\"/{id}\")\n    public R<Employee> getByID(@PathVariable(\"id\") Long empId){\n        Employee employee = employeeService.getById(id);\n        if (employee != null) {\n            return R.success(employee);\n        }\n        return R.error(\"查询失败！\");\n    }\n  ```\n\n ---\n ## 2022/9/14 更新\n\n ### 第一种方式的补充：使用对象来接收参数\n\n 此处定义一个简单的POJO如下👇\n ```java\n public class User {\n    private String name;\n    private Integer age;\n \n    public String getName() {\n        return name;\n    }\n \n    public void setName(String name) {\n        this.name = name;\n    }\n \n    public Integer getAge() {\n        return age;\n    }\n \n    public void setAge(Integer age) {\n        this.age = age;\n    }\n}\n ```\n定义一个RestController如下👇\n```java\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.bind.annotation.GetMapping;\n \n@RestController\npublic class HelloController {\n    @GetMapping(\"/helloworld\")\n    public String helloworld(User user) {\n        return \"name：\" + user.getName();\n    }\n}\n```\n现在给出一个GET请求：**http://localhost:8080/helloworld?name=张三**\n则浏览器可以看到：**name: 张三**","slug":"SpringMVC - 获取Get请求参数详解","published":1,"updated":"2022-09-14T11:22:54.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdlh007ua8vwdr3vd40k","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p><strong><center>📨本篇主要对比两种获取Get请求参数方法的区别📨</center></strong></p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>先看如下两段基于@GetMapping注解的方法👇</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/page\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> R&lt;Page&gt; <span class=\"title\">page</span><span class=\"params\">(<span class=\"keyword\">int</span> page, <span class=\"keyword\">int</span> pageSize, String name)</span></span>&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">\"page=&#123;&#125;, pageSize=&#123;&#125;, name=&#123;&#125;\"</span>, page, pageSize, name);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建页面对象</span></span><br><span class=\"line\">    Page pageInfo = <span class=\"keyword\">new</span> Page(page,pageSize);</span><br><span class=\"line\">    <span class=\"comment\">//配置分页条件</span></span><br><span class=\"line\">    LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class=\"keyword\">new</span> LambdaQueryWrapper();</span><br><span class=\"line\">    queryWrapper.like(StringUtils.isNotEmpty(name), Employee::getName, name);</span><br><span class=\"line\">    queryWrapper.orderByDesc(Employee::getUpdateTime);</span><br><span class=\"line\"></span><br><span class=\"line\">    employeeService.page(pageInfo, queryWrapper);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> R.success(pageInfo);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/&#123;id&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> R&lt;Employee&gt; <span class=\"title\">getByID</span><span class=\"params\">(@PathVariable Long id)</span></span>&#123;</span><br><span class=\"line\">    Employee employee = employeeService.getById(id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (employee != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.success(employee);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> R.error(<span class=\"string\">\"查询失败！\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>上面两段代码中：</p>\n<ul>\n<li>共同点是都是针对Get请求的后端代码逻辑处理</li>\n<li>主要的不同之处是对于Get请求参数的获取方式</li>\n<li>第一段代码的完整请求路径是：<strong><a href=\"http://localhost:8080/employee/page?page=1&amp;pageSize=2\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/employee/page?page=1&amp;pageSize=2</a></strong></li>\n<li>第二段代码的完整请求路径是：<strong><a href=\"http://localhost:8080/employee/141242344443454456\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/employee/141242344443454456</a></strong></li>\n</ul>\n<h2 id=\"关于第一种方式\"><a href=\"#关于第一种方式\" class=\"headerlink\" title=\"关于第一种方式\"></a>关于第一种方式</h2><p>第一种属于传统方式的Get请求参数获取方法，即参数跟在问号后面。<br>我们假有这样一段请求需要处理：<strong><a href=\"http://localhost:8080/helloworld?name=张三\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/helloworld?name=张三</a></strong><br>则Controller中的处理代码如下👇</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/helloworld\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">helloworld1</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"name\"</span>)</span> String name) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"获取到的name是：\"</span> + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RequestParam使用\"><a href=\"#RequestParam使用\" class=\"headerlink\" title=\"@RequestParam使用\"></a>@RequestParam使用</h3><p>这种方式涉及了@RequestParam注解的使用，关于该注解总结如下👇</p>\n<ul>\n<li><p>不加@RequestParam，前端的参数名需要和后端控制器的变量名保持一致才能生效</p>\n</li>\n<li><p>不加@RequestParam，参数为非必传，加@RequestParam写法参数为必传。但@RequestParam可以通过@RequestParam(required = false)设置为非必传。</p>\n</li>\n<li><p>@RequestParam可以通过@RequestParam(“userId”)或者@RequestParam(value = “userId”)指定传入的参数名。</p>\n</li>\n<li><p>@RequestParam可以通过@RequestParam(defaultValue = “0”)指定参数默认值</p>\n</li>\n<li><p>如果接口除了前端调用还有后端RPC调用，则不能省略@RequestParam，否则RPC会找不到参数报错</p>\n</li>\n<li><p>访问时：</p>\n<ul>\n<li>不加@RequestParam注解：url可带参数也可不带参数</li>\n<li>加@RequestParam注解：url必须带有参数</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"关于第二种方式\"><a href=\"#关于第二种方式\" class=\"headerlink\" title=\"关于第二种方式\"></a>关于第二种方式</h2><p>第二种是典型的 RESTful 风格，ID参数值直接放在路径里面。<br>我们假有这样一段请求需要处理：<strong><a href=\"http://localhost:8080/helloworld/张三\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/helloworld/张三</a></strong><br>则Controller中的处理代码如下👇</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/helloworld/&#123;name&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">helloworld</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"name\"</span>)</span> String name) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"获取到的name是：\"</span> + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PathVariable使用\"><a href=\"#PathVariable使用\" class=\"headerlink\" title=\"@PathVariable使用\"></a>@PathVariable使用</h3><p>通过 @PathVariable 可以将 URL 中占位符参数绑定到控制器处理方法的形参中。</p>\n<ul>\n<li><p>若方法参数名称和需要绑定的url中变量名称一致时,可以简写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/&#123;id&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> R&lt;Employee&gt; <span class=\"title\">getByID</span><span class=\"params\">(@PathVariable Long id)</span></span>&#123;</span><br><span class=\"line\">    Employee employee = employeeService.getById(id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (employee != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.success(employee);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> R.error(<span class=\"string\">\"查询失败！\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>若方法参数名称和需要绑定的url中变量名称不一致时，写成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/&#123;id&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> R&lt;Employee&gt; <span class=\"title\">getByID</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span> Long empId)</span>&#123;</span><br><span class=\"line\">    Employee employee = employeeService.getById(id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (employee != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.success(employee);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> R.error(<span class=\"string\">\"查询失败！\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"2022-9-14-更新\"><a href=\"#2022-9-14-更新\" class=\"headerlink\" title=\"2022/9/14 更新\"></a>2022/9/14 更新</h2><h3 id=\"第一种方式的补充：使用对象来接收参数\"><a href=\"#第一种方式的补充：使用对象来接收参数\" class=\"headerlink\" title=\"第一种方式的补充：使用对象来接收参数\"></a>第一种方式的补充：使用对象来接收参数</h3><p>此处定义一个简单的POJO如下👇</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>定义一个RestController如下👇</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/helloworld\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">helloworld</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"name：\"</span> + user.getName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在给出一个GET请求：<strong><a href=\"http://localhost:8080/helloworld?name=张三\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/helloworld?name=张三</a></strong><br>则浏览器可以看到：<strong>name: 张三</strong></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p><strong><center>📨本篇主要对比两种获取Get请求参数方法的区别📨</center></strong></p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><p>先看如下两段基于@GetMapping注解的方法👇</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/page\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> R&lt;Page&gt; <span class=\"title\">page</span><span class=\"params\">(<span class=\"keyword\">int</span> page, <span class=\"keyword\">int</span> pageSize, String name)</span></span>&#123;</span><br><span class=\"line\">    log.info(<span class=\"string\">\"page=&#123;&#125;, pageSize=&#123;&#125;, name=&#123;&#125;\"</span>, page, pageSize, name);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建页面对象</span></span><br><span class=\"line\">    Page pageInfo = <span class=\"keyword\">new</span> Page(page,pageSize);</span><br><span class=\"line\">    <span class=\"comment\">//配置分页条件</span></span><br><span class=\"line\">    LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class=\"keyword\">new</span> LambdaQueryWrapper();</span><br><span class=\"line\">    queryWrapper.like(StringUtils.isNotEmpty(name), Employee::getName, name);</span><br><span class=\"line\">    queryWrapper.orderByDesc(Employee::getUpdateTime);</span><br><span class=\"line\"></span><br><span class=\"line\">    employeeService.page(pageInfo, queryWrapper);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> R.success(pageInfo);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/&#123;id&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> R&lt;Employee&gt; <span class=\"title\">getByID</span><span class=\"params\">(@PathVariable Long id)</span></span>&#123;</span><br><span class=\"line\">    Employee employee = employeeService.getById(id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (employee != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.success(employee);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> R.error(<span class=\"string\">\"查询失败！\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>上面两段代码中：</p>\n<ul>\n<li>共同点是都是针对Get请求的后端代码逻辑处理</li>\n<li>主要的不同之处是对于Get请求参数的获取方式</li>\n<li>第一段代码的完整请求路径是：<strong><a href=\"http://localhost:8080/employee/page?page=1&amp;pageSize=2\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/employee/page?page=1&amp;pageSize=2</a></strong></li>\n<li>第二段代码的完整请求路径是：<strong><a href=\"http://localhost:8080/employee/141242344443454456\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/employee/141242344443454456</a></strong></li>\n</ul>\n<h2 id=\"关于第一种方式\"><a href=\"#关于第一种方式\" class=\"headerlink\" title=\"关于第一种方式\"></a>关于第一种方式</h2><p>第一种属于传统方式的Get请求参数获取方法，即参数跟在问号后面。<br>我们假有这样一段请求需要处理：<strong><a href=\"http://localhost:8080/helloworld?name=张三\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/helloworld?name=张三</a></strong><br>则Controller中的处理代码如下👇</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/helloworld\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">helloworld1</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"name\"</span>)</span> String name) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"获取到的name是：\"</span> + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"RequestParam使用\"><a href=\"#RequestParam使用\" class=\"headerlink\" title=\"@RequestParam使用\"></a>@RequestParam使用</h3><p>这种方式涉及了@RequestParam注解的使用，关于该注解总结如下👇</p>\n<ul>\n<li><p>不加@RequestParam，前端的参数名需要和后端控制器的变量名保持一致才能生效</p>\n</li>\n<li><p>不加@RequestParam，参数为非必传，加@RequestParam写法参数为必传。但@RequestParam可以通过@RequestParam(required = false)设置为非必传。</p>\n</li>\n<li><p>@RequestParam可以通过@RequestParam(“userId”)或者@RequestParam(value = “userId”)指定传入的参数名。</p>\n</li>\n<li><p>@RequestParam可以通过@RequestParam(defaultValue = “0”)指定参数默认值</p>\n</li>\n<li><p>如果接口除了前端调用还有后端RPC调用，则不能省略@RequestParam，否则RPC会找不到参数报错</p>\n</li>\n<li><p>访问时：</p>\n<ul>\n<li>不加@RequestParam注解：url可带参数也可不带参数</li>\n<li>加@RequestParam注解：url必须带有参数</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"关于第二种方式\"><a href=\"#关于第二种方式\" class=\"headerlink\" title=\"关于第二种方式\"></a>关于第二种方式</h2><p>第二种是典型的 RESTful 风格，ID参数值直接放在路径里面。<br>我们假有这样一段请求需要处理：<strong><a href=\"http://localhost:8080/helloworld/张三\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/helloworld/张三</a></strong><br>则Controller中的处理代码如下👇</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/helloworld/&#123;name&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">helloworld</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"name\"</span>)</span> String name) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"获取到的name是：\"</span> + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PathVariable使用\"><a href=\"#PathVariable使用\" class=\"headerlink\" title=\"@PathVariable使用\"></a>@PathVariable使用</h3><p>通过 @PathVariable 可以将 URL 中占位符参数绑定到控制器处理方法的形参中。</p>\n<ul>\n<li><p>若方法参数名称和需要绑定的url中变量名称一致时,可以简写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/&#123;id&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> R&lt;Employee&gt; <span class=\"title\">getByID</span><span class=\"params\">(@PathVariable Long id)</span></span>&#123;</span><br><span class=\"line\">    Employee employee = employeeService.getById(id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (employee != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.success(employee);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> R.error(<span class=\"string\">\"查询失败！\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>若方法参数名称和需要绑定的url中变量名称不一致时，写成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/&#123;id&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> R&lt;Employee&gt; <span class=\"title\">getByID</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"id\"</span>)</span> Long empId)</span>&#123;</span><br><span class=\"line\">    Employee employee = employeeService.getById(id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (employee != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> R.success(employee);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> R.error(<span class=\"string\">\"查询失败！\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"2022-9-14-更新\"><a href=\"#2022-9-14-更新\" class=\"headerlink\" title=\"2022/9/14 更新\"></a>2022/9/14 更新</h2><h3 id=\"第一种方式的补充：使用对象来接收参数\"><a href=\"#第一种方式的补充：使用对象来接收参数\" class=\"headerlink\" title=\"第一种方式的补充：使用对象来接收参数\"></a>第一种方式的补充：使用对象来接收参数</h3><p>此处定义一个简单的POJO如下👇</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(Integer age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>定义一个RestController如下👇</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/helloworld\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">helloworld</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"name：\"</span> + user.getName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在给出一个GET请求：<strong><a href=\"http://localhost:8080/helloworld?name=张三\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/helloworld?name=张三</a></strong><br>则浏览器可以看到：<strong>name: 张三</strong></p>\n"},{"title":"Git工作区中文件状态总结","date":"2022-09-15T16:00:00.000Z","_content":"\n# 总结\n\nGit工作区中文件的状态👇\n\nGit工作区中的文件存在两种状态:\n\n- untracked未跟踪（未被纳入版本控制)\n- tracked已跟踪（被纳入版本控制)\n  - 1.Unmodified 未修改状态\n  - 2.Modified 已修改状态\n  - 3.Staged 已暂存状态\n\n# 详细说明\n\n**注⚠：使用git status查看文件状态**\n\n## untracker\n\n设想：此时在.git所在目录中新建文件Hello.txt\n则：此时查看文件Hello.txt状态为 <font color=\"#660000\">untracker</font> \n\n## tracker\n\n### Staged\n\n设想：此时对Hello.txt文件进行git add. 操作\n则：此时查看文件Hello.txt状态为 <font color=\"#006600\">Staged</font>\n\n### Unmodified\n\n设想：此时对Hello.txt文件进行git commit 操作\n则：此时查看文件Hello.txt状态为 Unmodified，注意此时调用状态查看结果并不显示\n\n### Modified\n\n设想：此时对Hello.txt文件内容进行修改操作\n则：此时查看文件Hello.txt状态为 <font color=\"#660000\">Modified</font> (未放入缓存区)\n\n紧接着：再次执行git add. 操作\n则：此时查看文件Hello.txt状态为 <font color=\"#006600\">Modified</font> (已归入缓存区)","source":"_posts/git_status总结.md","raw":"---\ntitle:  Git工作区中文件状态总结\ntags: [git]\ncategories: [git]\ndate: 2022-9-16\n\n---\n\n# 总结\n\nGit工作区中文件的状态👇\n\nGit工作区中的文件存在两种状态:\n\n- untracked未跟踪（未被纳入版本控制)\n- tracked已跟踪（被纳入版本控制)\n  - 1.Unmodified 未修改状态\n  - 2.Modified 已修改状态\n  - 3.Staged 已暂存状态\n\n# 详细说明\n\n**注⚠：使用git status查看文件状态**\n\n## untracker\n\n设想：此时在.git所在目录中新建文件Hello.txt\n则：此时查看文件Hello.txt状态为 <font color=\"#660000\">untracker</font> \n\n## tracker\n\n### Staged\n\n设想：此时对Hello.txt文件进行git add. 操作\n则：此时查看文件Hello.txt状态为 <font color=\"#006600\">Staged</font>\n\n### Unmodified\n\n设想：此时对Hello.txt文件进行git commit 操作\n则：此时查看文件Hello.txt状态为 Unmodified，注意此时调用状态查看结果并不显示\n\n### Modified\n\n设想：此时对Hello.txt文件内容进行修改操作\n则：此时查看文件Hello.txt状态为 <font color=\"#660000\">Modified</font> (未放入缓存区)\n\n紧接着：再次执行git add. 操作\n则：此时查看文件Hello.txt状态为 <font color=\"#006600\">Modified</font> (已归入缓存区)","slug":"git_status总结","published":1,"updated":"2022-09-16T14:22:57.805Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdls007za8vws37bhlnk","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Git工作区中文件的状态👇</p>\n<p>Git工作区中的文件存在两种状态:</p>\n<ul>\n<li>untracked未跟踪（未被纳入版本控制)</li>\n<li>tracked已跟踪（被纳入版本控制)<ul>\n<li>1.Unmodified 未修改状态</li>\n<li>2.Modified 已修改状态</li>\n<li>3.Staged 已暂存状态</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"详细说明\"><a href=\"#详细说明\" class=\"headerlink\" title=\"详细说明\"></a>详细说明</h1><p><strong>注⚠：使用git status查看文件状态</strong></p>\n<h2 id=\"untracker\"><a href=\"#untracker\" class=\"headerlink\" title=\"untracker\"></a>untracker</h2><p>设想：此时在.git所在目录中新建文件Hello.txt<br>则：此时查看文件Hello.txt状态为 <font color=\"#660000\">untracker</font> </p>\n<h2 id=\"tracker\"><a href=\"#tracker\" class=\"headerlink\" title=\"tracker\"></a>tracker</h2><h3 id=\"Staged\"><a href=\"#Staged\" class=\"headerlink\" title=\"Staged\"></a>Staged</h3><p>设想：此时对Hello.txt文件进行git add. 操作<br>则：此时查看文件Hello.txt状态为 <font color=\"#006600\">Staged</font></p>\n<h3 id=\"Unmodified\"><a href=\"#Unmodified\" class=\"headerlink\" title=\"Unmodified\"></a>Unmodified</h3><p>设想：此时对Hello.txt文件进行git commit 操作<br>则：此时查看文件Hello.txt状态为 Unmodified，注意此时调用状态查看结果并不显示</p>\n<h3 id=\"Modified\"><a href=\"#Modified\" class=\"headerlink\" title=\"Modified\"></a>Modified</h3><p>设想：此时对Hello.txt文件内容进行修改操作<br>则：此时查看文件Hello.txt状态为 <font color=\"#660000\">Modified</font> (未放入缓存区)</p>\n<p>紧接着：再次执行git add. 操作<br>则：此时查看文件Hello.txt状态为 <font color=\"#006600\">Modified</font> (已归入缓存区)</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>Git工作区中文件的状态👇</p>\n<p>Git工作区中的文件存在两种状态:</p>\n<ul>\n<li>untracked未跟踪（未被纳入版本控制)</li>\n<li>tracked已跟踪（被纳入版本控制)<ul>\n<li>1.Unmodified 未修改状态</li>\n<li>2.Modified 已修改状态</li>\n<li>3.Staged 已暂存状态</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"详细说明\"><a href=\"#详细说明\" class=\"headerlink\" title=\"详细说明\"></a>详细说明</h1><p><strong>注⚠：使用git status查看文件状态</strong></p>\n<h2 id=\"untracker\"><a href=\"#untracker\" class=\"headerlink\" title=\"untracker\"></a>untracker</h2><p>设想：此时在.git所在目录中新建文件Hello.txt<br>则：此时查看文件Hello.txt状态为 <font color=\"#660000\">untracker</font> </p>\n<h2 id=\"tracker\"><a href=\"#tracker\" class=\"headerlink\" title=\"tracker\"></a>tracker</h2><h3 id=\"Staged\"><a href=\"#Staged\" class=\"headerlink\" title=\"Staged\"></a>Staged</h3><p>设想：此时对Hello.txt文件进行git add. 操作<br>则：此时查看文件Hello.txt状态为 <font color=\"#006600\">Staged</font></p>\n<h3 id=\"Unmodified\"><a href=\"#Unmodified\" class=\"headerlink\" title=\"Unmodified\"></a>Unmodified</h3><p>设想：此时对Hello.txt文件进行git commit 操作<br>则：此时查看文件Hello.txt状态为 Unmodified，注意此时调用状态查看结果并不显示</p>\n<h3 id=\"Modified\"><a href=\"#Modified\" class=\"headerlink\" title=\"Modified\"></a>Modified</h3><p>设想：此时对Hello.txt文件内容进行修改操作<br>则：此时查看文件Hello.txt状态为 <font color=\"#660000\">Modified</font> (未放入缓存区)</p>\n<p>紧接着：再次执行git add. 操作<br>则：此时查看文件Hello.txt状态为 <font color=\"#006600\">Modified</font> (已归入缓存区)</p>\n"},{"title":"Hello World","comments":1,"date":"2015-01-19T16:00:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ncomments: true\ndate: 2015-1-20\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2022-09-05T03:46:54.744Z","layout":"post","photos":[],"link":"","_id":"claajxdlt0081a8vwp0df9oa6","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"MNIST数据集的下载与数据处理","date":"2019-08-27T16:00:00.000Z","_content":"\n## 源码（python）\n\n```python\n# coding: utf-8\ntry:\n    import urllib.request\nexcept ImportError:\n    raise ImportError('You should use Python 3.x')\nimport os.path\nimport gzip\nimport pickle\nimport os\nimport numpy as np\n\n\nurl_base = 'http://yann.lecun.com/exdb/mnist/'\nkey_file = {\n    'train_img':'train-images-idx3-ubyte.gz',\n    'train_label':'train-labels-idx1-ubyte.gz',\n    'test_img':'t10k-images-idx3-ubyte.gz',\n    'test_label':'t10k-labels-idx1-ubyte.gz'\n}\n\ndataset_dir = os.path.dirname(os.path.abspath(__file__))\nsave_file = dataset_dir + \"/mnist.pkl\"\n\ntrain_num = 60000\ntest_num = 10000\nimg_dim = (1, 28, 28)\nimg_size = 784\n\n\ndef _download(file_name):\n    file_path = dataset_dir + \"/\" + file_name\n    \n    if os.path.exists(file_path):\n        return\n\n    print(\"Downloading \" + file_name + \" ... \")\n    urllib.request.urlretrieve(url_base + file_name, file_path)\n    print(\"Done\")\n    \ndef download_mnist():\n    for v in key_file.values():\n       _download(v)\n        \ndef _load_label(file_name):\n    file_path = dataset_dir + \"/\" + file_name\n    \n    print(\"Converting \" + file_name + \" to NumPy Array ...\")\n    with gzip.open(file_path, 'rb') as f:\n            labels = np.frombuffer(f.read(), np.uint8, offset=8)\n    print(\"Done\")\n    \n    return labels\n\ndef _load_img(file_name):\n    file_path = dataset_dir + \"/\" + file_name\n    \n    print(\"Converting \" + file_name + \" to NumPy Array ...\")    \n    with gzip.open(file_path, 'rb') as f:\n            data = np.frombuffer(f.read(), np.uint8, offset=16)\n    data = data.reshape(-1, img_size)\n    print(\"Done\")\n    \n    return data\n    \ndef _convert_numpy():\n    dataset = {}\n    dataset['train_img'] =  _load_img(key_file['train_img'])\n    dataset['train_label'] = _load_label(key_file['train_label'])    \n    dataset['test_img'] = _load_img(key_file['test_img'])\n    dataset['test_label'] = _load_label(key_file['test_label'])\n    \n    return dataset\n\ndef init_mnist():\n    download_mnist()\n    dataset = _convert_numpy()\n    print(\"Creating pickle file ...\")\n    with open(save_file, 'wb') as f:\n        pickle.dump(dataset, f, -1)\n    print(\"Done!\")\n\ndef _change_one_hot_label(X):\n    T = np.zeros((X.size, 10))\n    for idx, row in enumerate(T):\n        row[X[idx]] = 1\n        \n    return T\n    \n\ndef load_mnist(normalize=True, flatten=True, one_hot_label=False):\n    \"\"\"读入MNIST数据集\n    \n    Parameters\n    ----------\n    normalize : 将图像的像素值正规化为0.0~1.0\n    one_hot_label : \n        one_hot_label为True的情况下，标签作为one-hot数组返回\n        one-hot数组是指[0,0,1,0,0,0,0,0,0,0]这样的数组\n    flatten : 是否将图像展开为一维数组\n    \n    Returns\n    -------\n    (训练图像, 训练标签), (测试图像, 测试标签)\n    \"\"\"\n    if not os.path.exists(save_file):\n        init_mnist()\n        \n    with open(save_file, 'rb') as f:\n        dataset = pickle.load(f)\n    \n    if normalize:\n        for key in ('train_img', 'test_img'):\n            dataset[key] = dataset[key].astype(np.float32)\n            dataset[key] /= 255.0\n            \n    if one_hot_label:\n        dataset['train_label'] = _change_one_hot_label(dataset['train_label'])\n        dataset['test_label'] = _change_one_hot_label(dataset['test_label'])\n    \n    if not flatten:\n         for key in ('train_img', 'test_img'):\n            dataset[key] = dataset[key].reshape(-1, 1, 28, 28)\n\n    return (dataset['train_img'], dataset['train_label']), (dataset['test_img'], dataset['test_label']) \n\n\nif __name__ == '__main__':\n    init_mnist()\n```\n## load_mnist函数讲解\n```python\ndef load_mnist(normalize=True, flatten=True, one_hot_label=False):\n    \"\"\"读入MNIST数据集\n    \n    Parameters\n    ----------\n    normalize : 将图像的像素值正规化为0.0~1.0\n    one_hot_label : \n        one_hot_label为True的情况下，标签作为one-hot数组返回\n        one-hot数组是指[0,0,1,0,0,0,0,0,0,0]这样的数组\n    flatten : 是否将图像展开为一维数组\n    \n    Returns\n    -------\n    (训练图像, 训练标签), (测试图像, 测试标签)\n    \"\"\"\n    if not os.path.exists(save_file):\n        init_mnist()\n        \n    with open(save_file, 'rb') as f:\n        dataset = pickle.load(f)\n    \n    if normalize:\n        for key in ('train_img', 'test_img'):\n            dataset[key] = dataset[key].astype(np.float32)\n            dataset[key] /= 255.0\n            \n    if one_hot_label:\n        dataset['train_label'] = _change_one_hot_label(dataset['train_label'])\n        dataset['test_label'] = _change_one_hot_label(dataset['test_label'])\n    \n    if not flatten:\n         for key in ('train_img', 'test_img'):\n            dataset[key] = dataset[key].reshape(-1, 1, 28, 28)\n\n    return (dataset['train_img'], dataset['train_label']), (dataset['test_img'], dataset['test_label']) \n```\nload_mnist函数以**“(训练图像,训练标签),(测试图像,测试标签)”**的形式返回读入的MNIST数据。\n\n此外,还可以像**load_mnist(normalize=True,flatten=True,one_hot_label=False)**这样,设置3个参数。\n- 第1个参数normalize设置是否将输入图像正规化为0.0-1.0的值。如果将该参数设置为 False,则输入图像的像素会保持原来的0-255。\n- 第2个参数 flatten设置是否展开输入图像(变成一维数组)。如果将该参数设置为 False,则输入图像为1×28×28的三维数组;若设置为True,则输入图像会保存为由784个元素构成的一维数组。\n- 第3个参数one_hot_label设置是否将标签保存为one-hot表示(one-hot representation)。one-hot表示是仅正确解标签为1,其余皆为0的数组,就像[0,0,1,0,0,0,0,0,0,0]这样。当one_hot_label为Fase时,只是像7、2这样简单保存正确解标签;当 one_hot_label为True时,标签则保存为one-hot表示。\n\n>PS:想获取完整的手写数字识别源码请访问我的GitHub：\n>https://github.com/NUISTGY/Codes-of-fish-book.git\n","source":"_posts/mnist数据集下载与处理.md","raw":"---\ntitle: MNIST数据集的下载与数据处理\ntags: [python,手写识别,MNIST,图像识别]\n\ncategories: [数据集]\n\ndate: 2019-8-28\n---\n\n## 源码（python）\n\n```python\n# coding: utf-8\ntry:\n    import urllib.request\nexcept ImportError:\n    raise ImportError('You should use Python 3.x')\nimport os.path\nimport gzip\nimport pickle\nimport os\nimport numpy as np\n\n\nurl_base = 'http://yann.lecun.com/exdb/mnist/'\nkey_file = {\n    'train_img':'train-images-idx3-ubyte.gz',\n    'train_label':'train-labels-idx1-ubyte.gz',\n    'test_img':'t10k-images-idx3-ubyte.gz',\n    'test_label':'t10k-labels-idx1-ubyte.gz'\n}\n\ndataset_dir = os.path.dirname(os.path.abspath(__file__))\nsave_file = dataset_dir + \"/mnist.pkl\"\n\ntrain_num = 60000\ntest_num = 10000\nimg_dim = (1, 28, 28)\nimg_size = 784\n\n\ndef _download(file_name):\n    file_path = dataset_dir + \"/\" + file_name\n    \n    if os.path.exists(file_path):\n        return\n\n    print(\"Downloading \" + file_name + \" ... \")\n    urllib.request.urlretrieve(url_base + file_name, file_path)\n    print(\"Done\")\n    \ndef download_mnist():\n    for v in key_file.values():\n       _download(v)\n        \ndef _load_label(file_name):\n    file_path = dataset_dir + \"/\" + file_name\n    \n    print(\"Converting \" + file_name + \" to NumPy Array ...\")\n    with gzip.open(file_path, 'rb') as f:\n            labels = np.frombuffer(f.read(), np.uint8, offset=8)\n    print(\"Done\")\n    \n    return labels\n\ndef _load_img(file_name):\n    file_path = dataset_dir + \"/\" + file_name\n    \n    print(\"Converting \" + file_name + \" to NumPy Array ...\")    \n    with gzip.open(file_path, 'rb') as f:\n            data = np.frombuffer(f.read(), np.uint8, offset=16)\n    data = data.reshape(-1, img_size)\n    print(\"Done\")\n    \n    return data\n    \ndef _convert_numpy():\n    dataset = {}\n    dataset['train_img'] =  _load_img(key_file['train_img'])\n    dataset['train_label'] = _load_label(key_file['train_label'])    \n    dataset['test_img'] = _load_img(key_file['test_img'])\n    dataset['test_label'] = _load_label(key_file['test_label'])\n    \n    return dataset\n\ndef init_mnist():\n    download_mnist()\n    dataset = _convert_numpy()\n    print(\"Creating pickle file ...\")\n    with open(save_file, 'wb') as f:\n        pickle.dump(dataset, f, -1)\n    print(\"Done!\")\n\ndef _change_one_hot_label(X):\n    T = np.zeros((X.size, 10))\n    for idx, row in enumerate(T):\n        row[X[idx]] = 1\n        \n    return T\n    \n\ndef load_mnist(normalize=True, flatten=True, one_hot_label=False):\n    \"\"\"读入MNIST数据集\n    \n    Parameters\n    ----------\n    normalize : 将图像的像素值正规化为0.0~1.0\n    one_hot_label : \n        one_hot_label为True的情况下，标签作为one-hot数组返回\n        one-hot数组是指[0,0,1,0,0,0,0,0,0,0]这样的数组\n    flatten : 是否将图像展开为一维数组\n    \n    Returns\n    -------\n    (训练图像, 训练标签), (测试图像, 测试标签)\n    \"\"\"\n    if not os.path.exists(save_file):\n        init_mnist()\n        \n    with open(save_file, 'rb') as f:\n        dataset = pickle.load(f)\n    \n    if normalize:\n        for key in ('train_img', 'test_img'):\n            dataset[key] = dataset[key].astype(np.float32)\n            dataset[key] /= 255.0\n            \n    if one_hot_label:\n        dataset['train_label'] = _change_one_hot_label(dataset['train_label'])\n        dataset['test_label'] = _change_one_hot_label(dataset['test_label'])\n    \n    if not flatten:\n         for key in ('train_img', 'test_img'):\n            dataset[key] = dataset[key].reshape(-1, 1, 28, 28)\n\n    return (dataset['train_img'], dataset['train_label']), (dataset['test_img'], dataset['test_label']) \n\n\nif __name__ == '__main__':\n    init_mnist()\n```\n## load_mnist函数讲解\n```python\ndef load_mnist(normalize=True, flatten=True, one_hot_label=False):\n    \"\"\"读入MNIST数据集\n    \n    Parameters\n    ----------\n    normalize : 将图像的像素值正规化为0.0~1.0\n    one_hot_label : \n        one_hot_label为True的情况下，标签作为one-hot数组返回\n        one-hot数组是指[0,0,1,0,0,0,0,0,0,0]这样的数组\n    flatten : 是否将图像展开为一维数组\n    \n    Returns\n    -------\n    (训练图像, 训练标签), (测试图像, 测试标签)\n    \"\"\"\n    if not os.path.exists(save_file):\n        init_mnist()\n        \n    with open(save_file, 'rb') as f:\n        dataset = pickle.load(f)\n    \n    if normalize:\n        for key in ('train_img', 'test_img'):\n            dataset[key] = dataset[key].astype(np.float32)\n            dataset[key] /= 255.0\n            \n    if one_hot_label:\n        dataset['train_label'] = _change_one_hot_label(dataset['train_label'])\n        dataset['test_label'] = _change_one_hot_label(dataset['test_label'])\n    \n    if not flatten:\n         for key in ('train_img', 'test_img'):\n            dataset[key] = dataset[key].reshape(-1, 1, 28, 28)\n\n    return (dataset['train_img'], dataset['train_label']), (dataset['test_img'], dataset['test_label']) \n```\nload_mnist函数以**“(训练图像,训练标签),(测试图像,测试标签)”**的形式返回读入的MNIST数据。\n\n此外,还可以像**load_mnist(normalize=True,flatten=True,one_hot_label=False)**这样,设置3个参数。\n- 第1个参数normalize设置是否将输入图像正规化为0.0-1.0的值。如果将该参数设置为 False,则输入图像的像素会保持原来的0-255。\n- 第2个参数 flatten设置是否展开输入图像(变成一维数组)。如果将该参数设置为 False,则输入图像为1×28×28的三维数组;若设置为True,则输入图像会保存为由784个元素构成的一维数组。\n- 第3个参数one_hot_label设置是否将标签保存为one-hot表示(one-hot representation)。one-hot表示是仅正确解标签为1,其余皆为0的数组,就像[0,0,1,0,0,0,0,0,0,0]这样。当one_hot_label为Fase时,只是像7、2这样简单保存正确解标签;当 one_hot_label为True时,标签则保存为one-hot表示。\n\n>PS:想获取完整的手写数字识别源码请访问我的GitHub：\n>https://github.com/NUISTGY/Codes-of-fish-book.git\n","slug":"mnist数据集下载与处理","published":1,"updated":"2022-09-05T03:49:33.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdlu0086a8vw0q8zy83v","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"源码（python）\"><a href=\"#源码（python）\" class=\"headerlink\" title=\"源码（python）\"></a>源码（python）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">raise</span> ImportError(<span class=\"string\">'You should use Python 3.x'</span>)</span><br><span class=\"line\"><span class=\"keyword\">import</span> os.path</span><br><span class=\"line\"><span class=\"keyword\">import</span> gzip</span><br><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">url_base = <span class=\"string\">'http://yann.lecun.com/exdb/mnist/'</span></span><br><span class=\"line\">key_file = &#123;</span><br><span class=\"line\">    <span class=\"string\">'train_img'</span>:<span class=\"string\">'train-images-idx3-ubyte.gz'</span>,</span><br><span class=\"line\">    <span class=\"string\">'train_label'</span>:<span class=\"string\">'train-labels-idx1-ubyte.gz'</span>,</span><br><span class=\"line\">    <span class=\"string\">'test_img'</span>:<span class=\"string\">'t10k-images-idx3-ubyte.gz'</span>,</span><br><span class=\"line\">    <span class=\"string\">'test_label'</span>:<span class=\"string\">'t10k-labels-idx1-ubyte.gz'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dataset_dir = os.path.dirname(os.path.abspath(__file__))</span><br><span class=\"line\">save_file = dataset_dir + <span class=\"string\">\"/mnist.pkl\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">train_num = <span class=\"number\">60000</span></span><br><span class=\"line\">test_num = <span class=\"number\">10000</span></span><br><span class=\"line\">img_dim = (<span class=\"number\">1</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>)</span><br><span class=\"line\">img_size = <span class=\"number\">784</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_download</span><span class=\"params\">(file_name)</span>:</span></span><br><span class=\"line\">    file_path = dataset_dir + <span class=\"string\">\"/\"</span> + file_name</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> os.path.exists(file_path):</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"Downloading \"</span> + file_name + <span class=\"string\">\" ... \"</span>)</span><br><span class=\"line\">    urllib.request.urlretrieve(url_base + file_name, file_path)</span><br><span class=\"line\">    print(<span class=\"string\">\"Done\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">download_mnist</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> key_file.values():</span><br><span class=\"line\">       _download(v)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_load_label</span><span class=\"params\">(file_name)</span>:</span></span><br><span class=\"line\">    file_path = dataset_dir + <span class=\"string\">\"/\"</span> + file_name</span><br><span class=\"line\">    </span><br><span class=\"line\">    print(<span class=\"string\">\"Converting \"</span> + file_name + <span class=\"string\">\" to NumPy Array ...\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> gzip.open(file_path, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            labels = np.frombuffer(f.read(), np.uint8, offset=<span class=\"number\">8</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"Done\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> labels</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_load_img</span><span class=\"params\">(file_name)</span>:</span></span><br><span class=\"line\">    file_path = dataset_dir + <span class=\"string\">\"/\"</span> + file_name</span><br><span class=\"line\">    </span><br><span class=\"line\">    print(<span class=\"string\">\"Converting \"</span> + file_name + <span class=\"string\">\" to NumPy Array ...\"</span>)    </span><br><span class=\"line\">    <span class=\"keyword\">with</span> gzip.open(file_path, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            data = np.frombuffer(f.read(), np.uint8, offset=<span class=\"number\">16</span>)</span><br><span class=\"line\">    data = data.reshape(<span class=\"number\">-1</span>, img_size)</span><br><span class=\"line\">    print(<span class=\"string\">\"Done\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_convert_numpy</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    dataset = &#123;&#125;</span><br><span class=\"line\">    dataset[<span class=\"string\">'train_img'</span>] =  _load_img(key_file[<span class=\"string\">'train_img'</span>])</span><br><span class=\"line\">    dataset[<span class=\"string\">'train_label'</span>] = _load_label(key_file[<span class=\"string\">'train_label'</span>])    </span><br><span class=\"line\">    dataset[<span class=\"string\">'test_img'</span>] = _load_img(key_file[<span class=\"string\">'test_img'</span>])</span><br><span class=\"line\">    dataset[<span class=\"string\">'test_label'</span>] = _load_label(key_file[<span class=\"string\">'test_label'</span>])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> dataset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_mnist</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    download_mnist()</span><br><span class=\"line\">    dataset = _convert_numpy()</span><br><span class=\"line\">    print(<span class=\"string\">\"Creating pickle file ...\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(save_file, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        pickle.dump(dataset, f, <span class=\"number\">-1</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"Done!\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_change_one_hot_label</span><span class=\"params\">(X)</span>:</span></span><br><span class=\"line\">    T = np.zeros((X.size, <span class=\"number\">10</span>))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> idx, row <span class=\"keyword\">in</span> enumerate(T):</span><br><span class=\"line\">        row[X[idx]] = <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> T</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load_mnist</span><span class=\"params\">(normalize=True, flatten=True, one_hot_label=False)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"读入MNIST数据集</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    Parameters</span></span><br><span class=\"line\"><span class=\"string\">    ----------</span></span><br><span class=\"line\"><span class=\"string\">    normalize : 将图像的像素值正规化为0.0~1.0</span></span><br><span class=\"line\"><span class=\"string\">    one_hot_label : </span></span><br><span class=\"line\"><span class=\"string\">        one_hot_label为True的情况下，标签作为one-hot数组返回</span></span><br><span class=\"line\"><span class=\"string\">        one-hot数组是指[0,0,1,0,0,0,0,0,0,0]这样的数组</span></span><br><span class=\"line\"><span class=\"string\">    flatten : 是否将图像展开为一维数组</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    Returns</span></span><br><span class=\"line\"><span class=\"string\">    -------</span></span><br><span class=\"line\"><span class=\"string\">    (训练图像, 训练标签), (测试图像, 测试标签)</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(save_file):</span><br><span class=\"line\">        init_mnist()</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(save_file, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        dataset = pickle.load(f)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> normalize:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> (<span class=\"string\">'train_img'</span>, <span class=\"string\">'test_img'</span>):</span><br><span class=\"line\">            dataset[key] = dataset[key].astype(np.float32)</span><br><span class=\"line\">            dataset[key] /= <span class=\"number\">255.0</span></span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"keyword\">if</span> one_hot_label:</span><br><span class=\"line\">        dataset[<span class=\"string\">'train_label'</span>] = _change_one_hot_label(dataset[<span class=\"string\">'train_label'</span>])</span><br><span class=\"line\">        dataset[<span class=\"string\">'test_label'</span>] = _change_one_hot_label(dataset[<span class=\"string\">'test_label'</span>])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> flatten:</span><br><span class=\"line\">         <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> (<span class=\"string\">'train_img'</span>, <span class=\"string\">'test_img'</span>):</span><br><span class=\"line\">            dataset[key] = dataset[key].reshape(<span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (dataset[<span class=\"string\">'train_img'</span>], dataset[<span class=\"string\">'train_label'</span>]), (dataset[<span class=\"string\">'test_img'</span>], dataset[<span class=\"string\">'test_label'</span>]) </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    init_mnist()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"load-mnist函数讲解\"><a href=\"#load-mnist函数讲解\" class=\"headerlink\" title=\"load_mnist函数讲解\"></a>load_mnist函数讲解</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load_mnist</span><span class=\"params\">(normalize=True, flatten=True, one_hot_label=False)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"读入MNIST数据集</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    Parameters</span></span><br><span class=\"line\"><span class=\"string\">    ----------</span></span><br><span class=\"line\"><span class=\"string\">    normalize : 将图像的像素值正规化为0.0~1.0</span></span><br><span class=\"line\"><span class=\"string\">    one_hot_label : </span></span><br><span class=\"line\"><span class=\"string\">        one_hot_label为True的情况下，标签作为one-hot数组返回</span></span><br><span class=\"line\"><span class=\"string\">        one-hot数组是指[0,0,1,0,0,0,0,0,0,0]这样的数组</span></span><br><span class=\"line\"><span class=\"string\">    flatten : 是否将图像展开为一维数组</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    Returns</span></span><br><span class=\"line\"><span class=\"string\">    -------</span></span><br><span class=\"line\"><span class=\"string\">    (训练图像, 训练标签), (测试图像, 测试标签)</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(save_file):</span><br><span class=\"line\">        init_mnist()</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(save_file, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        dataset = pickle.load(f)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> normalize:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> (<span class=\"string\">'train_img'</span>, <span class=\"string\">'test_img'</span>):</span><br><span class=\"line\">            dataset[key] = dataset[key].astype(np.float32)</span><br><span class=\"line\">            dataset[key] /= <span class=\"number\">255.0</span></span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"keyword\">if</span> one_hot_label:</span><br><span class=\"line\">        dataset[<span class=\"string\">'train_label'</span>] = _change_one_hot_label(dataset[<span class=\"string\">'train_label'</span>])</span><br><span class=\"line\">        dataset[<span class=\"string\">'test_label'</span>] = _change_one_hot_label(dataset[<span class=\"string\">'test_label'</span>])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> flatten:</span><br><span class=\"line\">         <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> (<span class=\"string\">'train_img'</span>, <span class=\"string\">'test_img'</span>):</span><br><span class=\"line\">            dataset[key] = dataset[key].reshape(<span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (dataset[<span class=\"string\">'train_img'</span>], dataset[<span class=\"string\">'train_label'</span>]), (dataset[<span class=\"string\">'test_img'</span>], dataset[<span class=\"string\">'test_label'</span>])</span><br></pre></td></tr></table></figure>\n\n<p>load_mnist函数以<strong>“(训练图像,训练标签),(测试图像,测试标签)”</strong>的形式返回读入的MNIST数据。</p>\n<p>此外,还可以像<strong>load_mnist(normalize=True,flatten=True,one_hot_label=False)</strong>这样,设置3个参数。</p>\n<ul>\n<li>第1个参数normalize设置是否将输入图像正规化为0.0-1.0的值。如果将该参数设置为 False,则输入图像的像素会保持原来的0-255。</li>\n<li>第2个参数 flatten设置是否展开输入图像(变成一维数组)。如果将该参数设置为 False,则输入图像为1×28×28的三维数组;若设置为True,则输入图像会保存为由784个元素构成的一维数组。</li>\n<li>第3个参数one_hot_label设置是否将标签保存为one-hot表示(one-hot representation)。one-hot表示是仅正确解标签为1,其余皆为0的数组,就像[0,0,1,0,0,0,0,0,0,0]这样。当one_hot_label为Fase时,只是像7、2这样简单保存正确解标签;当 one_hot_label为True时,标签则保存为one-hot表示。</li>\n</ul>\n<blockquote>\n<p>PS:想获取完整的手写数字识别源码请访问我的GitHub：<br><a href=\"https://github.com/NUISTGY/Codes-of-fish-book.git\">https://github.com/NUISTGY/Codes-of-fish-book.git</a></p>\n</blockquote>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h2 id=\"源码（python）\"><a href=\"#源码（python）\" class=\"headerlink\" title=\"源码（python）\"></a>源码（python）</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">except</span> ImportError:</span><br><span class=\"line\">    <span class=\"keyword\">raise</span> ImportError(<span class=\"string\">'You should use Python 3.x'</span>)</span><br><span class=\"line\"><span class=\"keyword\">import</span> os.path</span><br><span class=\"line\"><span class=\"keyword\">import</span> gzip</span><br><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">url_base = <span class=\"string\">'http://yann.lecun.com/exdb/mnist/'</span></span><br><span class=\"line\">key_file = &#123;</span><br><span class=\"line\">    <span class=\"string\">'train_img'</span>:<span class=\"string\">'train-images-idx3-ubyte.gz'</span>,</span><br><span class=\"line\">    <span class=\"string\">'train_label'</span>:<span class=\"string\">'train-labels-idx1-ubyte.gz'</span>,</span><br><span class=\"line\">    <span class=\"string\">'test_img'</span>:<span class=\"string\">'t10k-images-idx3-ubyte.gz'</span>,</span><br><span class=\"line\">    <span class=\"string\">'test_label'</span>:<span class=\"string\">'t10k-labels-idx1-ubyte.gz'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dataset_dir = os.path.dirname(os.path.abspath(__file__))</span><br><span class=\"line\">save_file = dataset_dir + <span class=\"string\">\"/mnist.pkl\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">train_num = <span class=\"number\">60000</span></span><br><span class=\"line\">test_num = <span class=\"number\">10000</span></span><br><span class=\"line\">img_dim = (<span class=\"number\">1</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>)</span><br><span class=\"line\">img_size = <span class=\"number\">784</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_download</span><span class=\"params\">(file_name)</span>:</span></span><br><span class=\"line\">    file_path = dataset_dir + <span class=\"string\">\"/\"</span> + file_name</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> os.path.exists(file_path):</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"Downloading \"</span> + file_name + <span class=\"string\">\" ... \"</span>)</span><br><span class=\"line\">    urllib.request.urlretrieve(url_base + file_name, file_path)</span><br><span class=\"line\">    print(<span class=\"string\">\"Done\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">download_mnist</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> key_file.values():</span><br><span class=\"line\">       _download(v)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_load_label</span><span class=\"params\">(file_name)</span>:</span></span><br><span class=\"line\">    file_path = dataset_dir + <span class=\"string\">\"/\"</span> + file_name</span><br><span class=\"line\">    </span><br><span class=\"line\">    print(<span class=\"string\">\"Converting \"</span> + file_name + <span class=\"string\">\" to NumPy Array ...\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> gzip.open(file_path, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            labels = np.frombuffer(f.read(), np.uint8, offset=<span class=\"number\">8</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"Done\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> labels</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_load_img</span><span class=\"params\">(file_name)</span>:</span></span><br><span class=\"line\">    file_path = dataset_dir + <span class=\"string\">\"/\"</span> + file_name</span><br><span class=\"line\">    </span><br><span class=\"line\">    print(<span class=\"string\">\"Converting \"</span> + file_name + <span class=\"string\">\" to NumPy Array ...\"</span>)    </span><br><span class=\"line\">    <span class=\"keyword\">with</span> gzip.open(file_path, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            data = np.frombuffer(f.read(), np.uint8, offset=<span class=\"number\">16</span>)</span><br><span class=\"line\">    data = data.reshape(<span class=\"number\">-1</span>, img_size)</span><br><span class=\"line\">    print(<span class=\"string\">\"Done\"</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_convert_numpy</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    dataset = &#123;&#125;</span><br><span class=\"line\">    dataset[<span class=\"string\">'train_img'</span>] =  _load_img(key_file[<span class=\"string\">'train_img'</span>])</span><br><span class=\"line\">    dataset[<span class=\"string\">'train_label'</span>] = _load_label(key_file[<span class=\"string\">'train_label'</span>])    </span><br><span class=\"line\">    dataset[<span class=\"string\">'test_img'</span>] = _load_img(key_file[<span class=\"string\">'test_img'</span>])</span><br><span class=\"line\">    dataset[<span class=\"string\">'test_label'</span>] = _load_label(key_file[<span class=\"string\">'test_label'</span>])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> dataset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_mnist</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    download_mnist()</span><br><span class=\"line\">    dataset = _convert_numpy()</span><br><span class=\"line\">    print(<span class=\"string\">\"Creating pickle file ...\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(save_file, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        pickle.dump(dataset, f, <span class=\"number\">-1</span>)</span><br><span class=\"line\">    print(<span class=\"string\">\"Done!\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_change_one_hot_label</span><span class=\"params\">(X)</span>:</span></span><br><span class=\"line\">    T = np.zeros((X.size, <span class=\"number\">10</span>))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> idx, row <span class=\"keyword\">in</span> enumerate(T):</span><br><span class=\"line\">        row[X[idx]] = <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> T</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load_mnist</span><span class=\"params\">(normalize=True, flatten=True, one_hot_label=False)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"读入MNIST数据集</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    Parameters</span></span><br><span class=\"line\"><span class=\"string\">    ----------</span></span><br><span class=\"line\"><span class=\"string\">    normalize : 将图像的像素值正规化为0.0~1.0</span></span><br><span class=\"line\"><span class=\"string\">    one_hot_label : </span></span><br><span class=\"line\"><span class=\"string\">        one_hot_label为True的情况下，标签作为one-hot数组返回</span></span><br><span class=\"line\"><span class=\"string\">        one-hot数组是指[0,0,1,0,0,0,0,0,0,0]这样的数组</span></span><br><span class=\"line\"><span class=\"string\">    flatten : 是否将图像展开为一维数组</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    Returns</span></span><br><span class=\"line\"><span class=\"string\">    -------</span></span><br><span class=\"line\"><span class=\"string\">    (训练图像, 训练标签), (测试图像, 测试标签)</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(save_file):</span><br><span class=\"line\">        init_mnist()</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(save_file, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        dataset = pickle.load(f)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> normalize:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> (<span class=\"string\">'train_img'</span>, <span class=\"string\">'test_img'</span>):</span><br><span class=\"line\">            dataset[key] = dataset[key].astype(np.float32)</span><br><span class=\"line\">            dataset[key] /= <span class=\"number\">255.0</span></span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"keyword\">if</span> one_hot_label:</span><br><span class=\"line\">        dataset[<span class=\"string\">'train_label'</span>] = _change_one_hot_label(dataset[<span class=\"string\">'train_label'</span>])</span><br><span class=\"line\">        dataset[<span class=\"string\">'test_label'</span>] = _change_one_hot_label(dataset[<span class=\"string\">'test_label'</span>])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> flatten:</span><br><span class=\"line\">         <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> (<span class=\"string\">'train_img'</span>, <span class=\"string\">'test_img'</span>):</span><br><span class=\"line\">            dataset[key] = dataset[key].reshape(<span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (dataset[<span class=\"string\">'train_img'</span>], dataset[<span class=\"string\">'train_label'</span>]), (dataset[<span class=\"string\">'test_img'</span>], dataset[<span class=\"string\">'test_label'</span>]) </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    init_mnist()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"load-mnist函数讲解\"><a href=\"#load-mnist函数讲解\" class=\"headerlink\" title=\"load_mnist函数讲解\"></a>load_mnist函数讲解</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load_mnist</span><span class=\"params\">(normalize=True, flatten=True, one_hot_label=False)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"读入MNIST数据集</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    Parameters</span></span><br><span class=\"line\"><span class=\"string\">    ----------</span></span><br><span class=\"line\"><span class=\"string\">    normalize : 将图像的像素值正规化为0.0~1.0</span></span><br><span class=\"line\"><span class=\"string\">    one_hot_label : </span></span><br><span class=\"line\"><span class=\"string\">        one_hot_label为True的情况下，标签作为one-hot数组返回</span></span><br><span class=\"line\"><span class=\"string\">        one-hot数组是指[0,0,1,0,0,0,0,0,0,0]这样的数组</span></span><br><span class=\"line\"><span class=\"string\">    flatten : 是否将图像展开为一维数组</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    Returns</span></span><br><span class=\"line\"><span class=\"string\">    -------</span></span><br><span class=\"line\"><span class=\"string\">    (训练图像, 训练标签), (测试图像, 测试标签)</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(save_file):</span><br><span class=\"line\">        init_mnist()</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(save_file, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        dataset = pickle.load(f)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> normalize:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> (<span class=\"string\">'train_img'</span>, <span class=\"string\">'test_img'</span>):</span><br><span class=\"line\">            dataset[key] = dataset[key].astype(np.float32)</span><br><span class=\"line\">            dataset[key] /= <span class=\"number\">255.0</span></span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"keyword\">if</span> one_hot_label:</span><br><span class=\"line\">        dataset[<span class=\"string\">'train_label'</span>] = _change_one_hot_label(dataset[<span class=\"string\">'train_label'</span>])</span><br><span class=\"line\">        dataset[<span class=\"string\">'test_label'</span>] = _change_one_hot_label(dataset[<span class=\"string\">'test_label'</span>])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> flatten:</span><br><span class=\"line\">         <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> (<span class=\"string\">'train_img'</span>, <span class=\"string\">'test_img'</span>):</span><br><span class=\"line\">            dataset[key] = dataset[key].reshape(<span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (dataset[<span class=\"string\">'train_img'</span>], dataset[<span class=\"string\">'train_label'</span>]), (dataset[<span class=\"string\">'test_img'</span>], dataset[<span class=\"string\">'test_label'</span>])</span><br></pre></td></tr></table></figure>\n\n<p>load_mnist函数以<strong>“(训练图像,训练标签),(测试图像,测试标签)”</strong>的形式返回读入的MNIST数据。</p>\n<p>此外,还可以像<strong>load_mnist(normalize=True,flatten=True,one_hot_label=False)</strong>这样,设置3个参数。</p>\n<ul>\n<li>第1个参数normalize设置是否将输入图像正规化为0.0-1.0的值。如果将该参数设置为 False,则输入图像的像素会保持原来的0-255。</li>\n<li>第2个参数 flatten设置是否展开输入图像(变成一维数组)。如果将该参数设置为 False,则输入图像为1×28×28的三维数组;若设置为True,则输入图像会保存为由784个元素构成的一维数组。</li>\n<li>第3个参数one_hot_label设置是否将标签保存为one-hot表示(one-hot representation)。one-hot表示是仅正确解标签为1,其余皆为0的数组,就像[0,0,1,0,0,0,0,0,0,0]这样。当one_hot_label为Fase时,只是像7、2这样简单保存正确解标签;当 one_hot_label为True时,标签则保存为one-hot表示。</li>\n</ul>\n<blockquote>\n<p>PS:想获取完整的手写数字识别源码请访问我的GitHub：<br><a href=\"https://github.com/NUISTGY/Codes-of-fish-book.git\">https://github.com/NUISTGY/Codes-of-fish-book.git</a></p>\n</blockquote>\n"},{"title":"什么是MNIST 数据集","date":"2019-08-27T16:00:00.000Z","_content":"\n**MNIST 数据集已经是一个被”嚼烂”了的数据集, 很多教程都会对它”下手”, 几乎成为一个 “典范”. 不过有些人可能对它还不是很了解, 下面来介绍一下.**\n\n![手写数字](https://s1.ax1x.com/2022/09/05/vT2wAP.png \"手写数字\")\n\nMNIST 数据集可在 http://yann.lecun.com/exdb/mnist/ 获取, 它包含了四个部分:\n\n- Training set images: train-images-idx3-ubyte.gz (9.9 MB, 解压后 47 MB, 包含 60,000 个样本)\n- Training set labels: train-labels-idx1-ubyte.gz (29 KB, 解压后 60 KB, 包含 60,000 个标签)\n- Test set images: t10k-images-idx3-ubyte.gz (1.6 MB, 解压后 7.8 MB, 包含 10,000 个样本)\n- Test set labels: t10k-labels-idx1-ubyte.gz (5KB, 解压后 10 KB, 包含 10,000 个标签)\n\n![解压后](https://s1.ax1x.com/2022/09/05/vT20tf.png \"解压后\")\n\nMNIST 数据集来自美国国家标准与技术研究所, National Institute of Standards and Technology (NIST). 训练集 (training set) 由来自 250 个不同人手写的数字构成, 其中 50% 是高中学生, 50% 来自人口普查局 (the Census Bureau) 的工作人员. 测试集(test set) 也是同样比例的手写数字数据.\n","source":"_posts/mnist数据集介绍.md","raw":"---\ntitle: 什么是MNIST 数据集\ntags: [手写识别,MNIST]\n\ncategories: [数据集]\ndate: 2019-8-28\n---\n\n**MNIST 数据集已经是一个被”嚼烂”了的数据集, 很多教程都会对它”下手”, 几乎成为一个 “典范”. 不过有些人可能对它还不是很了解, 下面来介绍一下.**\n\n![手写数字](https://s1.ax1x.com/2022/09/05/vT2wAP.png \"手写数字\")\n\nMNIST 数据集可在 http://yann.lecun.com/exdb/mnist/ 获取, 它包含了四个部分:\n\n- Training set images: train-images-idx3-ubyte.gz (9.9 MB, 解压后 47 MB, 包含 60,000 个样本)\n- Training set labels: train-labels-idx1-ubyte.gz (29 KB, 解压后 60 KB, 包含 60,000 个标签)\n- Test set images: t10k-images-idx3-ubyte.gz (1.6 MB, 解压后 7.8 MB, 包含 10,000 个样本)\n- Test set labels: t10k-labels-idx1-ubyte.gz (5KB, 解压后 10 KB, 包含 10,000 个标签)\n\n![解压后](https://s1.ax1x.com/2022/09/05/vT20tf.png \"解压后\")\n\nMNIST 数据集来自美国国家标准与技术研究所, National Institute of Standards and Technology (NIST). 训练集 (training set) 由来自 250 个不同人手写的数字构成, 其中 50% 是高中学生, 50% 来自人口普查局 (the Census Bureau) 的工作人员. 测试集(test set) 也是同样比例的手写数字数据.\n","slug":"mnist数据集介绍","published":1,"updated":"2022-09-05T05:53:17.546Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdlw0088a8vw59fjhjwn","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p><strong>MNIST 数据集已经是一个被”嚼烂”了的数据集, 很多教程都会对它”下手”, 几乎成为一个 “典范”. 不过有些人可能对它还不是很了解, 下面来介绍一下.</strong></p>\n<p><img src=\"https://s1.ax1x.com/2022/09/05/vT2wAP.png\" alt=\"手写数字\" title=\"手写数字\"></p>\n<p>MNIST 数据集可在 <a href=\"http://yann.lecun.com/exdb/mnist/\" target=\"_blank\" rel=\"noopener\">http://yann.lecun.com/exdb/mnist/</a> 获取, 它包含了四个部分:</p>\n<ul>\n<li>Training set images: train-images-idx3-ubyte.gz (9.9 MB, 解压后 47 MB, 包含 60,000 个样本)</li>\n<li>Training set labels: train-labels-idx1-ubyte.gz (29 KB, 解压后 60 KB, 包含 60,000 个标签)</li>\n<li>Test set images: t10k-images-idx3-ubyte.gz (1.6 MB, 解压后 7.8 MB, 包含 10,000 个样本)</li>\n<li>Test set labels: t10k-labels-idx1-ubyte.gz (5KB, 解压后 10 KB, 包含 10,000 个标签)</li>\n</ul>\n<p><img src=\"https://s1.ax1x.com/2022/09/05/vT20tf.png\" alt=\"解压后\" title=\"解压后\"></p>\n<p>MNIST 数据集来自美国国家标准与技术研究所, National Institute of Standards and Technology (NIST). 训练集 (training set) 由来自 250 个不同人手写的数字构成, 其中 50% 是高中学生, 50% 来自人口普查局 (the Census Bureau) 的工作人员. 测试集(test set) 也是同样比例的手写数字数据.</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<p><strong>MNIST 数据集已经是一个被”嚼烂”了的数据集, 很多教程都会对它”下手”, 几乎成为一个 “典范”. 不过有些人可能对它还不是很了解, 下面来介绍一下.</strong></p>\n<p><img src=\"https://s1.ax1x.com/2022/09/05/vT2wAP.png\" alt=\"手写数字\" title=\"手写数字\"></p>\n<p>MNIST 数据集可在 <a href=\"http://yann.lecun.com/exdb/mnist/\" target=\"_blank\" rel=\"noopener\">http://yann.lecun.com/exdb/mnist/</a> 获取, 它包含了四个部分:</p>\n<ul>\n<li>Training set images: train-images-idx3-ubyte.gz (9.9 MB, 解压后 47 MB, 包含 60,000 个样本)</li>\n<li>Training set labels: train-labels-idx1-ubyte.gz (29 KB, 解压后 60 KB, 包含 60,000 个标签)</li>\n<li>Test set images: t10k-images-idx3-ubyte.gz (1.6 MB, 解压后 7.8 MB, 包含 10,000 个样本)</li>\n<li>Test set labels: t10k-labels-idx1-ubyte.gz (5KB, 解压后 10 KB, 包含 10,000 个标签)</li>\n</ul>\n<p><img src=\"https://s1.ax1x.com/2022/09/05/vT20tf.png\" alt=\"解压后\" title=\"解压后\"></p>\n<p>MNIST 数据集来自美国国家标准与技术研究所, National Institute of Standards and Technology (NIST). 训练集 (training set) 由来自 250 个不同人手写的数字构成, 其中 50% 是高中学生, 50% 来自人口普查局 (the Census Bureau) 的工作人员. 测试集(test set) 也是同样比例的手写数字数据.</p>\n"},{"title":"MyBatis——解决属性名和数据库字段名不一致问题（注解方式)","date":"2022-09-05T16:00:00.000Z","_content":"## 提问与解答：\n**提问：**当我们使用注解开发时有时会遇到数据库字段名与实体类属性名不一致的问题。xml方式开发可以通过结果集映射的方式解决，那注解方式开发要怎么解决呢？\n\n**解答：**利用 **@Results()**注解！\n\nResults注解中有两个常用的参数，一个是id，另一个是value。\n\n- **id**：这个参数的主要作用在于唯一标记这个Results注解，如果接口中的其他抽象方法也需要通过result注解来解决属性名和数据库字段名不一致问题，那么重新写一个Results注解就太麻烦了，这时我们就可以通过@ResultMap()注解中传入Results注解的参数id来引用Results注解中的内容。\n\n- **value**：这个参数用于建立实体类与数据库表的映射关系，其中可以填写多个@Result注解，用来将实体类的属性名和数据库字段名一一对应。⚠**需要注意如果是主键字段，@Result注解中需要设置id=true。**\n\n## 代码示例：\n\n```java\npublic interface UserMapper {\n    @Select(\"select * from user\")\n    @Results(id=\"aaa\",value={\n            @Result(id=true,column = \"id\",property = \"userId\"),\n            @Result(column = \"name\",property = \"userName\"),\n            @Result(column = \"age\",property = \"userAge\")\n    })\n    List<User> getUsers();\n\n\n    @Select(\"select count(id) from user\")\n    @ResultMap(value={\"aaa\"})\n    int findTotalUser();\n}\n```","source":"_posts/mybatis——解决属性名和数据库字段名不一致问题（注解方式).md","raw":"---\ntitle:  MyBatis——解决属性名和数据库字段名不一致问题（注解方式)\ntags: [编程,学习,Java,MyBatis]\ncategories: [MyBatys]\ndate: 2022-9-6\n\n---\n## 提问与解答：\n**提问：**当我们使用注解开发时有时会遇到数据库字段名与实体类属性名不一致的问题。xml方式开发可以通过结果集映射的方式解决，那注解方式开发要怎么解决呢？\n\n**解答：**利用 **@Results()**注解！\n\nResults注解中有两个常用的参数，一个是id，另一个是value。\n\n- **id**：这个参数的主要作用在于唯一标记这个Results注解，如果接口中的其他抽象方法也需要通过result注解来解决属性名和数据库字段名不一致问题，那么重新写一个Results注解就太麻烦了，这时我们就可以通过@ResultMap()注解中传入Results注解的参数id来引用Results注解中的内容。\n\n- **value**：这个参数用于建立实体类与数据库表的映射关系，其中可以填写多个@Result注解，用来将实体类的属性名和数据库字段名一一对应。⚠**需要注意如果是主键字段，@Result注解中需要设置id=true。**\n\n## 代码示例：\n\n```java\npublic interface UserMapper {\n    @Select(\"select * from user\")\n    @Results(id=\"aaa\",value={\n            @Result(id=true,column = \"id\",property = \"userId\"),\n            @Result(column = \"name\",property = \"userName\"),\n            @Result(column = \"age\",property = \"userAge\")\n    })\n    List<User> getUsers();\n\n\n    @Select(\"select count(id) from user\")\n    @ResultMap(value={\"aaa\"})\n    int findTotalUser();\n}\n```","slug":"mybatis——解决属性名和数据库字段名不一致问题（注解方式)","published":1,"updated":"2022-09-23T13:17:15.418Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdlx008ca8vwz41w9c84","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"提问与解答：\"><a href=\"#提问与解答：\" class=\"headerlink\" title=\"提问与解答：\"></a>提问与解答：</h2><p><strong>提问：</strong>当我们使用注解开发时有时会遇到数据库字段名与实体类属性名不一致的问题。xml方式开发可以通过结果集映射的方式解决，那注解方式开发要怎么解决呢？</p>\n<p><strong>解答：</strong>利用 <strong>@Results()</strong>注解！</p>\n<p>Results注解中有两个常用的参数，一个是id，另一个是value。</p>\n<ul>\n<li><p><strong>id</strong>：这个参数的主要作用在于唯一标记这个Results注解，如果接口中的其他抽象方法也需要通过result注解来解决属性名和数据库字段名不一致问题，那么重新写一个Results注解就太麻烦了，这时我们就可以通过@ResultMap()注解中传入Results注解的参数id来引用Results注解中的内容。</p>\n</li>\n<li><p><strong>value</strong>：这个参数用于建立实体类与数据库表的映射关系，其中可以填写多个@Result注解，用来将实体类的属性名和数据库字段名一一对应。⚠<strong>需要注意如果是主键字段，@Result注解中需要设置id=true。</strong></p>\n</li>\n</ul>\n<h2 id=\"代码示例：\"><a href=\"#代码示例：\" class=\"headerlink\" title=\"代码示例：\"></a>代码示例：</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Select</span>(<span class=\"string\">\"select * from user\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Results</span>(id=<span class=\"string\">\"aaa\"</span>,value=&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Result</span>(id=<span class=\"keyword\">true</span>,column = <span class=\"string\">\"id\"</span>,property = <span class=\"string\">\"userId\"</span>),</span><br><span class=\"line\">            <span class=\"meta\">@Result</span>(column = <span class=\"string\">\"name\"</span>,property = <span class=\"string\">\"userName\"</span>),</span><br><span class=\"line\">            <span class=\"meta\">@Result</span>(column = <span class=\"string\">\"age\"</span>,property = <span class=\"string\">\"userAge\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"function\">List&lt;User&gt; <span class=\"title\">getUsers</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Select</span>(<span class=\"string\">\"select count(id) from user\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResultMap</span>(value=&#123;<span class=\"string\">\"aaa\"</span>&#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findTotalUser</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h2 id=\"提问与解答：\"><a href=\"#提问与解答：\" class=\"headerlink\" title=\"提问与解答：\"></a>提问与解答：</h2><p><strong>提问：</strong>当我们使用注解开发时有时会遇到数据库字段名与实体类属性名不一致的问题。xml方式开发可以通过结果集映射的方式解决，那注解方式开发要怎么解决呢？</p>\n<p><strong>解答：</strong>利用 <strong>@Results()</strong>注解！</p>\n<p>Results注解中有两个常用的参数，一个是id，另一个是value。</p>\n<ul>\n<li><p><strong>id</strong>：这个参数的主要作用在于唯一标记这个Results注解，如果接口中的其他抽象方法也需要通过result注解来解决属性名和数据库字段名不一致问题，那么重新写一个Results注解就太麻烦了，这时我们就可以通过@ResultMap()注解中传入Results注解的参数id来引用Results注解中的内容。</p>\n</li>\n<li><p><strong>value</strong>：这个参数用于建立实体类与数据库表的映射关系，其中可以填写多个@Result注解，用来将实体类的属性名和数据库字段名一一对应。⚠<strong>需要注意如果是主键字段，@Result注解中需要设置id=true。</strong></p>\n</li>\n</ul>\n<h2 id=\"代码示例：\"><a href=\"#代码示例：\" class=\"headerlink\" title=\"代码示例：\"></a>代码示例：</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Select</span>(<span class=\"string\">\"select * from user\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Results</span>(id=<span class=\"string\">\"aaa\"</span>,value=&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Result</span>(id=<span class=\"keyword\">true</span>,column = <span class=\"string\">\"id\"</span>,property = <span class=\"string\">\"userId\"</span>),</span><br><span class=\"line\">            <span class=\"meta\">@Result</span>(column = <span class=\"string\">\"name\"</span>,property = <span class=\"string\">\"userName\"</span>),</span><br><span class=\"line\">            <span class=\"meta\">@Result</span>(column = <span class=\"string\">\"age\"</span>,property = <span class=\"string\">\"userAge\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"function\">List&lt;User&gt; <span class=\"title\">getUsers</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Select</span>(<span class=\"string\">\"select count(id) from user\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResultMap</span>(value=&#123;<span class=\"string\">\"aaa\"</span>&#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findTotalUser</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"numpy之sum函数的axis参数","date":"2020-03-20T16:00:00.000Z","_content":"\n# 结论：\n\n没有axis参数表示全部相加，axis＝0表示按列相加，axis＝1表示按照行的方向。验证如下：\n![axis&sum](https://5b0988e595225.cdn.sohucs.com/images/20171124/e90ccf3e7386468fa64c8b4bc0e60e5e.png)\n\n# 推广：\naxis=i表示对array的第i个维度**变化**的方向进行操作！","source":"_posts/numpy中的axis参数.md","raw":"---\ntitle:  numpy之sum函数的axis参数\ntags: [python,numpy]\n\ncategories: [python]\ndate: 2020-3-21\n---\n\n# 结论：\n\n没有axis参数表示全部相加，axis＝0表示按列相加，axis＝1表示按照行的方向。验证如下：\n![axis&sum](https://5b0988e595225.cdn.sohucs.com/images/20171124/e90ccf3e7386468fa64c8b4bc0e60e5e.png)\n\n# 推广：\naxis=i表示对array的第i个维度**变化**的方向进行操作！","slug":"numpy中的axis参数","published":1,"updated":"2022-09-05T03:41:04.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdm0008fa8vwc669b18w","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"结论：\"><a href=\"#结论：\" class=\"headerlink\" title=\"结论：\"></a>结论：</h1><p>没有axis参数表示全部相加，axis＝0表示按列相加，axis＝1表示按照行的方向。验证如下：<br><img src=\"https://5b0988e595225.cdn.sohucs.com/images/20171124/e90ccf3e7386468fa64c8b4bc0e60e5e.png\" alt=\"axis&amp;sum\"></p>\n<h1 id=\"推广：\"><a href=\"#推广：\" class=\"headerlink\" title=\"推广：\"></a>推广：</h1><p>axis=i表示对array的第i个维度<strong>变化</strong>的方向进行操作！</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"结论：\"><a href=\"#结论：\" class=\"headerlink\" title=\"结论：\"></a>结论：</h1><p>没有axis参数表示全部相加，axis＝0表示按列相加，axis＝1表示按照行的方向。验证如下：<br><img src=\"https://5b0988e595225.cdn.sohucs.com/images/20171124/e90ccf3e7386468fa64c8b4bc0e60e5e.png\" alt=\"axis&amp;sum\"></p>\n<h1 id=\"推广：\"><a href=\"#推广：\" class=\"headerlink\" title=\"推广：\"></a>推广：</h1><p>axis=i表示对array的第i个维度<strong>变化</strong>的方向进行操作！</p>\n"},{"title":"numpy数组和python列表的区别","date":"2020-03-20T16:00:00.000Z","_content":"\n1. numpy数组创建时是固定大小，python数组（list）是动态的。更改ndarray的大小将创建一个新数组并删除原来的数组。\n\n2. 元素类型区别。\n3. NumPy数组中的元素都需要具有相同的数据类型，因此在内存中的大小相同。\n\n4. python的List可以存放不同类型的元素。\n5. 例外情况：Python的原生数组里包含了NumPy的对象的时候，这种情况下就允许不同大小元素的数组。\n\n6. 数学操作执行效率高于原生python\n7. 越来越多的基于Python的科学和数学软件包使用NumPy数组","source":"_posts/numpy数组和python列表的区别.md","raw":"---\ntitle: numpy数组和python列表的区别\ntags: [python,numpy]\n\ncategories: [python]\ndate: 2020-3-21\n---\n\n1. numpy数组创建时是固定大小，python数组（list）是动态的。更改ndarray的大小将创建一个新数组并删除原来的数组。\n\n2. 元素类型区别。\n3. NumPy数组中的元素都需要具有相同的数据类型，因此在内存中的大小相同。\n\n4. python的List可以存放不同类型的元素。\n5. 例外情况：Python的原生数组里包含了NumPy的对象的时候，这种情况下就允许不同大小元素的数组。\n\n6. 数学操作执行效率高于原生python\n7. 越来越多的基于Python的科学和数学软件包使用NumPy数组","slug":"numpy数组和python列表的区别","published":1,"updated":"2022-09-05T03:49:28.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdm1008ja8vwjnysm3ri","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><ol>\n<li><p>numpy数组创建时是固定大小，python数组（list）是动态的。更改ndarray的大小将创建一个新数组并删除原来的数组。</p>\n</li>\n<li><p>元素类型区别。</p>\n</li>\n<li><p>NumPy数组中的元素都需要具有相同的数据类型，因此在内存中的大小相同。</p>\n</li>\n<li><p>python的List可以存放不同类型的元素。</p>\n</li>\n<li><p>例外情况：Python的原生数组里包含了NumPy的对象的时候，这种情况下就允许不同大小元素的数组。</p>\n</li>\n<li><p>数学操作执行效率高于原生python</p>\n</li>\n<li><p>越来越多的基于Python的科学和数学软件包使用NumPy数组</p>\n</li>\n</ol>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<ol>\n<li><p>numpy数组创建时是固定大小，python数组（list）是动态的。更改ndarray的大小将创建一个新数组并删除原来的数组。</p>\n</li>\n<li><p>元素类型区别。</p>\n</li>\n<li><p>NumPy数组中的元素都需要具有相同的数据类型，因此在内存中的大小相同。</p>\n</li>\n<li><p>python的List可以存放不同类型的元素。</p>\n</li>\n<li><p>例外情况：Python的原生数组里包含了NumPy的对象的时候，这种情况下就允许不同大小元素的数组。</p>\n</li>\n<li><p>数学操作执行效率高于原生python</p>\n</li>\n<li><p>越来越多的基于Python的科学和数学软件包使用NumPy数组</p>\n</li>\n</ol>\n"},{"title":"Servlet进化之旅 —— 从ServerSocket编程到SpringMVC框架开发","date":"2022-09-07T16:00:00.000Z","_content":"\n# 前言\n**<center>本篇主要记录Java后端开发学习过程中关于Servlet相关技术路线的梳理和总结</center>**\n\n按技术迭代顺序依次从下述几个Web技术开展梳理：\n- ServerSocket编程\n- Web服务器\n- Servlet规范\n- SpringMCV框架\n\n# ServerSocket编程\n\n**<center>本部分通过手撸一个基于Java的简易HTTP服务器来体会最原初的JavaWeb后端开发过程</center>**\n\n## 客户端\n\n这里客户端就不使用Java代码编写了，可以考虑使用最基本的浏览器或者后端测试工具如PostMan。\n\n## 服务端\n\n- 第一步我们先创建ServerSocket，监听8080端口\n- 第二步接收到请求后把流在控制台进行输出\n\n```java\npublic class HttpServer {\n\n    public static void main(String[] args) throws IOException {\n        ServerSocket serverSocket = null;\n        Socket socket = null;\n        InputStream is = null;\n        InputStreamReader isr = null;\n        BufferedReader br = null;\n        OutputStream os = null;\n        PrintWriter pw = null;\n        try {\n            serverSocket = new ServerSocket(8080);\n            //调用accept()方法开始监听，等待客户端的连接\n            while ((socket = serverSocket.accept()) != null ){\n                List<String> lines = IOUtils.readLines(socket.getInputStream(), \"utf-8\");\n                for (String line : lines) {\n                    System.out.println(line);\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            //关闭资源\n            pw.close();\n            os.close();\n            br.close();\n            isr.close();\n            is.close();\n            socket.close();\n            serverSocket.close();\n        }\n    }\n}\n```\n打印到控制台是以下这段文本:\n![](https://img.gejiba.com/images/e49002a3b302ec04645132ea159a3f8a.png)\n\n**解释一下：** 上述代码监听了8080端口并将客户端的访问请求打印为字符串，即控制台中的文本信息，只要我们的服务器解析这段字符串然后拼接成request，就能封装HTTP请求。但是这时观察浏览器界面发现没有任何响应。因为我们编写的HTTP服务器什么都没返回就关闭了连接。如果要浏览器正确的显示我们想要看到的helloword。同样也要拼接成浏览器能理解的http协议响应格式才能正确被解析。\n\n下面继续改动代码，让http返回200成功，并返回helloword：\n```java\npublic class HttpServer {\n\n    public static void main(String[] args) throws IOException {\n        ServerSocket serverSocket = null;\n        Socket socket = null;\n        InputStream is = null;\n        InputStreamReader isr = null;\n        BufferedReader br = null;\n        OutputStream os = null;\n        PrintWriter pw = null;\n        try {\n            serverSocket = new ServerSocket(8080);\n            //调用accept()方法开始监听，等待客户端的连接\n            while ((socket = serverSocket.accept()) != null ){\n                //获取输出流，响应客户端的请求\n                os = socket.getOutputStream();\n                pw = new PrintWriter(os);\n                pw.write(\"HTTP/1.1 200 OK\\n\" +\n                        \"Date: Fri, 7 Sept 2022 06:07:21 GMT\\n\" +\n                        \"Content-Type: text/html; charset=UTF-8\\n\" +\n                        \"\\n\" +\n                        \"<html>\\n\" +\n                        \"      <head></head>\\n\" +\n                        \"      <body>\\n\" +\n                        \"            helloWord!\\n\" +\n                        \"      </body>\\n\" +\n                        \"</html>\");\n                pw.flush();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            //关闭资源\n            pw.close();\n            os.close();\n            br.close();\n            isr.close();\n            is.close();\n            socket.close();\n            serverSocket.close();\n        }\n    }\n}\n```\n浏览器访问：localhost:8080 可见：\n![](https://img.gejiba.com/images/e252a903e9cf4d35eaa77788489e4a4c.png)\n\n## 总结\n\n上述示例实现了一个最简单的基于HTTP协议的Java服务器后端，里面并不包含对request请求字符串的处理，仅仅是打印了它，response也仅仅是按HTTP协议的规定封装了一句“helloworld！”。如此简易原始的HTTP服务器的整个访问和回复过程是如此繁琐，可见新技术出现的必要性。\n\n# Web服务器\n\n**<center>\nWeb服务器是一个应该程序(软件)，对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作，让Web开发更加便捷。主要功能是\"提供网上信息浏览服务\"</center>**\n\n![](https://img.gejiba.com/images/d2eca8a0000dc6e254f5bcf9300b8418.png)\n\n下面以Apache Tomcat服务器为例展示一个最简单的HTTP Web服务。\n\n## 创建展示页面\n\n在Tomcat根目录的**Webapps**下创建一个test文件夹，内部创建hello.html文件用于返回请求页面👇👇\n\n![](https://img.gejiba.com/images/ba7d619e9f80190fa9b379c01b9ac67d.png)\n\n## 启动服务器并请求资源\n\n- 启动Tomcat根目录下的**bin/startup.bat**\n- 使用Post访问**localhost:8080/test/hello.html**\n\n![](https://img.gejiba.com/images/2c4d42954c3df74e89901c3eac879458.png)\n\n## 总结\n\n1. Web服务器作用?\n➢封装HTTP协议操作，简化开发\n➢可以将Web项目部署到服务器中，对外提供网上浏览服务\n2. 什么是Tomcat?\nTomcat是一个轻量级的Web服务器， 支持Servlet/JSP少量JavaEE规范，也称为Web容器，Servlet容器，Servlet依赖于它或其他Web服务器才能正常运行。\n\n# Servlet规范\n\n## Servlet规范简介\n\nServlet（Server Applet，服务端小程序，是服务端的一小部分），全称Java Servlet，未有中文译文。是用Java编写的服务器端程序。其主要功能在于交互式地浏览和修改数据，生成动态Web内容。狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。\n\n### 补充：Servlet和Web服务器的关系\n首先要明白我们从来不会在Servlet中写什么监听8080端口的代码，Servlet不会直接和客户端打交道！这些全被Web服务器封装了。\n\n那请求是怎么来到Servlet的呢？答案是Servlet容器，比如我们最常用的Tomcat。Servlet都是部署在一个容器中的，不然你的Servlet根本不起作用。\n\nTomcat才是与客户端直接打交道的家伙，它监听了端口，请求过来后，根据URL等信息，确定要将请求交给哪个Servlet去处理，然后调用那个Servlet的service方法，service方法返回一个response对象，Tomcat再把这个respond返回给客户端。\n\n## 接口代码\n```Java\npackage Javax.Servlet;\n\nimport Java.io.IOException;\n\npublic interface Servlet {\n    void init(ServletConfig var1) throws ServletException;\n\n    ServletConfig getServletConfig();\n\n    void service(ServletRequest var1, ServletResponse var2) throws ServletException, IOException;\n\n    String getServletInfo();\n\n    void destroy();\n}\n```\n\nServlet接口定义的是一套处理网络请求的规范，所有实现Servlet的类，都需要实现它的那五个方法，其中最主要的是两个声明周期方法init()和destory()，还有一个处理请求的service()。也就是说，所有实现Servlet接口的类，或者说，所有想要处理网络请求的类，都需要回答这三个问题：\n\n- 你初始化时要做什么？\n- 你销毁时要做什么？\n- 你接收到请求时要做什么？\n\n## 生命周期\n\n1、客户端请求该 Servlet；\n\n2、Tomcat加载 Servlet 类到内存；\n\n3、Tomcat实例化并调用init()方法初始化该 Servlet；\n\n4、Tomcat调用service()（根据请求方法不同调用doGet() 或者 doPost()，此外还有doHead()、doPut()、doTrace()、doDelete()、doOptions()）；\n\n5、destroy()；\n\n6、加载和实例化 Servlet。这项操作一般是动态执行的。然而，Server 通常会提供一个管理的选项，用于在 Server 启动时强制装载和初始化特定的 Servlet；\n\n7、Server 创建一个 Servlet的实例；\n\n8、第一个客户端的请求到达 Server；\n\n9、Server 调用 Servlet 的 init() 方法（可配置为 Server 创建 Servlet 实例时调用）；\n\n10、一个客户端的请求到达 Server；\n\n11、Server 创建一个请求对象，处理客户端请求；\n\n12、Server 创建一个响应对象，响应客户端请求；\n\n13、Server 激活 Servlet 的 service() 方法，传递请求和响应对象作为参数；\n\n14、service() 方法获得关于请求对象的信息，处理请求，访问其他资源，获得需要的信息；\n\n15、service() 方法使用响应对象的方法，将响应传回Server，最终到达客户端。service()方法可能激活其它方法以处理请求，如 doGet() 或 doPost() 或程序员自己开发的新的方法；\n\n## 继承体系\n[![](https://img.gejiba.com/images/c4ed97e0e4b645e0968dc28a9fd82b22.png)](https://img.gejiba.com/image/EAAFoV)\n\n### HttpServlet源码\n```java\npackage javax.servlet.http;\n\nimport java.io.IOException;\nimport java.io.Serializable;\nimport java.lang.reflect.Method;\nimport java.text.MessageFormat;\nimport java.util.Enumeration;\nimport java.util.ResourceBundle;\nimport javax.servlet.GenericServlet;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\n\npublic abstract class HttpServlet extends GenericServlet implements Serializable {\n    private static final String METHOD_DELETE = \"DELETE\";\n    private static final String METHOD_HEAD = \"HEAD\";\n    private static final String METHOD_GET = \"GET\";\n    private static final String METHOD_OPTIONS = \"OPTIONS\";\n    private static final String METHOD_POST = \"POST\";\n    private static final String METHOD_PUT = \"PUT\";\n    private static final String METHOD_TRACE = \"TRACE\";\n    private static final String HEADER_IFMODSINCE = \"If-Modified-Since\";\n    private static final String HEADER_LASTMOD = \"Last-Modified\";\n    private static final String LSTRING_FILE = \"javax.servlet.http.LocalStrings\";\n    private static ResourceBundle lStrings = ResourceBundle.getBundle(\"javax.servlet.http.LocalStrings\");\n\n    public HttpServlet() {\n    }\n\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String protocol = req.getProtocol();\n        String msg = lStrings.getString(\"http.method_get_not_supported\");\n        if (protocol.endsWith(\"1.1\")) {\n            resp.sendError(405, msg);\n        } else {\n            resp.sendError(400, msg);\n        }\n\n    }\n\n    protected long getLastModified(HttpServletRequest req) {\n        return -1L;\n    }\n\n    protected void doHead(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        NoBodyResponse response = new NoBodyResponse(resp);\n        this.doGet(req, response);\n        response.setContentLength();\n    }\n\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String protocol = req.getProtocol();\n        String msg = lStrings.getString(\"http.method_post_not_supported\");\n        if (protocol.endsWith(\"1.1\")) {\n            resp.sendError(405, msg);\n        } else {\n            resp.sendError(400, msg);\n        }\n\n    }\n\n    protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String protocol = req.getProtocol();\n        String msg = lStrings.getString(\"http.method_put_not_supported\");\n        if (protocol.endsWith(\"1.1\")) {\n            resp.sendError(405, msg);\n        } else {\n            resp.sendError(400, msg);\n        }\n\n    }\n\n    protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String protocol = req.getProtocol();\n        String msg = lStrings.getString(\"http.method_delete_not_supported\");\n        if (protocol.endsWith(\"1.1\")) {\n            resp.sendError(405, msg);\n        } else {\n            resp.sendError(400, msg);\n        }\n\n    }\n\n    private Method[] getAllDeclaredMethods(Class c) {\n        if (c.equals(HttpServlet.class)) {\n            return null;\n        } else {\n            Method[] parentMethods = this.getAllDeclaredMethods(c.getSuperclass());\n            Method[] thisMethods = c.getDeclaredMethods();\n            if (parentMethods != null && parentMethods.length > 0) {\n                Method[] allMethods = new Method[parentMethods.length + thisMethods.length];\n                System.arraycopy(parentMethods, 0, allMethods, 0, parentMethods.length);\n                System.arraycopy(thisMethods, 0, allMethods, parentMethods.length, thisMethods.length);\n                thisMethods = allMethods;\n            }\n\n            return thisMethods;\n        }\n    }\n\n    protected void doOptions(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        Method[] methods = this.getAllDeclaredMethods(this.getClass());\n        boolean ALLOW_GET = false;\n        boolean ALLOW_HEAD = false;\n        boolean ALLOW_POST = false;\n        boolean ALLOW_PUT = false;\n        boolean ALLOW_DELETE = false;\n        boolean ALLOW_TRACE = true;\n        boolean ALLOW_OPTIONS = true;\n\n        for(int i = 0; i < methods.length; ++i) {\n            Method m = methods[i];\n            if (m.getName().equals(\"doGet\")) {\n                ALLOW_GET = true;\n                ALLOW_HEAD = true;\n            }\n\n            if (m.getName().equals(\"doPost\")) {\n                ALLOW_POST = true;\n            }\n\n            if (m.getName().equals(\"doPut\")) {\n                ALLOW_PUT = true;\n            }\n\n            if (m.getName().equals(\"doDelete\")) {\n                ALLOW_DELETE = true;\n            }\n        }\n\n        String allow = null;\n        if (ALLOW_GET && allow == null) {\n            allow = \"GET\";\n        }\n\n        if (ALLOW_HEAD) {\n            if (allow == null) {\n                allow = \"HEAD\";\n            } else {\n                allow = allow + \", HEAD\";\n            }\n        }\n\n        if (ALLOW_POST) {\n            if (allow == null) {\n                allow = \"POST\";\n            } else {\n                allow = allow + \", POST\";\n            }\n        }\n\n        if (ALLOW_PUT) {\n            if (allow == null) {\n                allow = \"PUT\";\n            } else {\n                allow = allow + \", PUT\";\n            }\n        }\n\n        if (ALLOW_DELETE) {\n            if (allow == null) {\n                allow = \"DELETE\";\n            } else {\n                allow = allow + \", DELETE\";\n            }\n        }\n\n        if (ALLOW_TRACE) {\n            if (allow == null) {\n                allow = \"TRACE\";\n            } else {\n                allow = allow + \", TRACE\";\n            }\n        }\n\n        if (ALLOW_OPTIONS) {\n            if (allow == null) {\n                allow = \"OPTIONS\";\n            } else {\n                allow = allow + \", OPTIONS\";\n            }\n        }\n\n        resp.setHeader(\"Allow\", allow);\n    }\n\n    protected void doTrace(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String CRLF = \"\\r\\n\";\n        String responseString = \"TRACE \" + req.getRequestURI() + \" \" + req.getProtocol();\n\n        String headerName;\n        for(Enumeration reqHeaderEnum = req.getHeaderNames(); reqHeaderEnum.hasMoreElements(); responseString = responseString + CRLF + headerName + \": \" + req.getHeader(headerName)) {\n            headerName = (String)reqHeaderEnum.nextElement();\n        }\n\n        responseString = responseString + CRLF;\n        int responseLength = responseString.length();\n        resp.setContentType(\"message/http\");\n        resp.setContentLength(responseLength);\n        ServletOutputStream out = resp.getOutputStream();\n        out.print(responseString);\n        out.close();\n    }\n\n    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String method = req.getMethod();\n        long lastModified;\n        if (method.equals(\"GET\")) {\n            lastModified = this.getLastModified(req);\n            if (lastModified == -1L) {\n                this.doGet(req, resp);\n            } else {\n                long ifModifiedSince = req.getDateHeader(\"If-Modified-Since\");\n                if (ifModifiedSince < lastModified / 1000L * 1000L) {\n                    this.maybeSetLastModified(resp, lastModified);\n                    this.doGet(req, resp);\n                } else {\n                    resp.setStatus(304);\n                }\n            }\n        } else if (method.equals(\"HEAD\")) {\n            lastModified = this.getLastModified(req);\n            this.maybeSetLastModified(resp, lastModified);\n            this.doHead(req, resp);\n        } else if (method.equals(\"POST\")) {\n            this.doPost(req, resp);\n        } else if (method.equals(\"PUT\")) {\n            this.doPut(req, resp);\n        } else if (method.equals(\"DELETE\")) {\n            this.doDelete(req, resp);\n        } else if (method.equals(\"OPTIONS\")) {\n            this.doOptions(req, resp);\n        } else if (method.equals(\"TRACE\")) {\n            this.doTrace(req, resp);\n        } else {\n            String errMsg = lStrings.getString(\"http.method_not_implemented\");\n            Object[] errArgs = new Object[]{method};\n            errMsg = MessageFormat.format(errMsg, errArgs);\n            resp.sendError(501, errMsg);\n        }\n\n    }\n\n    private void maybeSetLastModified(HttpServletResponse resp, long lastModified) {\n        if (!resp.containsHeader(\"Last-Modified\")) {\n            if (lastModified >= 0L) {\n                resp.setDateHeader(\"Last-Modified\", lastModified);\n            }\n\n        }\n    }\n\n    public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException {\n        HttpServletRequest request;\n        HttpServletResponse response;\n        try {\n            request = (HttpServletRequest)req;\n            response = (HttpServletResponse)res;\n        } catch (ClassCastException var6) {\n            throw new ServletException(\"non-HTTP request or response\");\n        }\n\n        this.service(request, response);\n    }\n}\n```\n\n## Servlet示例\n\n**<center>👇此处展示一段处理登录业务的Servlet代码👇</center>**\n\n```java\npackage com.geyu.web;\n\nimport com.geyu.web.mapper.UserMapper;\nimport com.geyu.web.pojo.User;\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\n\nimport javax.servlet.*;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.Map;\n\n@WebServlet(\"/loginServlet\")\npublic class ServletDemo extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String username = req.getParameter(\"username\");\n        String password = req.getParameter(\"password\");\n\n        String resource = \"mybatis-config.xml\";\n        InputStream inputStream = Resources.getResourceAsStream(resource);\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n\n        SqlSession sqlSession = sqlSessionFactory.openSession();\n\n        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);\n\n        User user = userMapper.select(username, password);\n\n        sqlSession.close();\n\n        resp.setContentType(\"text/html;charset=utf-8\");\n        PrintWriter writer = resp.getWriter();\n        if (user != null){\n            //登陆成功\n            writer.write(\"登陆成功\");\n        }else {\n            //登陆失败\n            writer.write(\"登录失败\");\n        }\n\n    }\n}\n```\n\n## 总结\n讲了这么多废话，总结来说Servlet就是一群人来制定Java应用中使用Web时的各种规范，统一接口，其他内部实现由厂商自己实现，tomcat jetty jboss等等应运而生。\n\n关于他如何工作的：一个http请求到来，容器将请求封装成Servlet中的request对象，在request中你可以得到所有的http信息，然后你可以取出来操作，最后你再把数据封装成Servlet的response对象，应用容器将respose对象解析之后封装成一个http response。\n\nWeb服务器习惯处理静态页面，所以需要一个程序来帮忙处理动态请求(如当前时间)。Web服务器程序会将动态请求转发给帮助程序，帮助程序处理后，返回处理后的静态结果给Web服务器程序。这样就避免了Web服务器程序处理动态页面。\n\n# SpringMVC框架\n\n## 简介\nSpring MVC是一个基于Java的实现了MVC设计模式的请求驱动类型的轻量级Web框架，通过把Model，View，Controller分离，将web层进行职责解耦，把复杂的web应用分成逻辑清晰的几部分，简化开发，减少出错，方便组内开发人员之间的配合。\n\n### SpringMVC和Servlet的区别与联系\n\n- Servlet：性能最好，处理HTTP请求的标准和规范。\n\n- SpringMVC：开发效率高（好多共性的东西都封装好了，是对Servlet的封装，核心的DispatcherServlet最终继承自HttpServlet）\n\n这两者的关系，就如同MyBatis和JDBC，一个性能好，一个开发效率高，是对另一个的封装。\n\n### Controller层示例\n\n```java\n@Controller\n@RequestMapping(\"/user\")\npublic class UserController {\n\n    @Autowired\n    IUserService service;\n\n    @RequestMapping(value = \"/login.do\", method = {RequestMethod.GET})\n    public String login(User user) {\n        User result = service.login(user);\n        if (result != null) {\n            return \"redirect:/pages/success.html\";\n        } else {\n            return \"redirect:/pages/error.html\";\n        }\n    }\n}\n```\n<center>\n👀开发过程肉眼可见的简介♥\n</center>\n","source":"_posts/servlet进化之旅.md","raw":"---\ntitle:  Servlet进化之旅 —— 从ServerSocket编程到SpringMVC框架开发\ntags: [JavaWeb,后端,Servlet,SpringMVC,Tomcat]\ncategories: [后端]\ndate: 2022-9-8\n\n---\n\n# 前言\n**<center>本篇主要记录Java后端开发学习过程中关于Servlet相关技术路线的梳理和总结</center>**\n\n按技术迭代顺序依次从下述几个Web技术开展梳理：\n- ServerSocket编程\n- Web服务器\n- Servlet规范\n- SpringMCV框架\n\n# ServerSocket编程\n\n**<center>本部分通过手撸一个基于Java的简易HTTP服务器来体会最原初的JavaWeb后端开发过程</center>**\n\n## 客户端\n\n这里客户端就不使用Java代码编写了，可以考虑使用最基本的浏览器或者后端测试工具如PostMan。\n\n## 服务端\n\n- 第一步我们先创建ServerSocket，监听8080端口\n- 第二步接收到请求后把流在控制台进行输出\n\n```java\npublic class HttpServer {\n\n    public static void main(String[] args) throws IOException {\n        ServerSocket serverSocket = null;\n        Socket socket = null;\n        InputStream is = null;\n        InputStreamReader isr = null;\n        BufferedReader br = null;\n        OutputStream os = null;\n        PrintWriter pw = null;\n        try {\n            serverSocket = new ServerSocket(8080);\n            //调用accept()方法开始监听，等待客户端的连接\n            while ((socket = serverSocket.accept()) != null ){\n                List<String> lines = IOUtils.readLines(socket.getInputStream(), \"utf-8\");\n                for (String line : lines) {\n                    System.out.println(line);\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            //关闭资源\n            pw.close();\n            os.close();\n            br.close();\n            isr.close();\n            is.close();\n            socket.close();\n            serverSocket.close();\n        }\n    }\n}\n```\n打印到控制台是以下这段文本:\n![](https://img.gejiba.com/images/e49002a3b302ec04645132ea159a3f8a.png)\n\n**解释一下：** 上述代码监听了8080端口并将客户端的访问请求打印为字符串，即控制台中的文本信息，只要我们的服务器解析这段字符串然后拼接成request，就能封装HTTP请求。但是这时观察浏览器界面发现没有任何响应。因为我们编写的HTTP服务器什么都没返回就关闭了连接。如果要浏览器正确的显示我们想要看到的helloword。同样也要拼接成浏览器能理解的http协议响应格式才能正确被解析。\n\n下面继续改动代码，让http返回200成功，并返回helloword：\n```java\npublic class HttpServer {\n\n    public static void main(String[] args) throws IOException {\n        ServerSocket serverSocket = null;\n        Socket socket = null;\n        InputStream is = null;\n        InputStreamReader isr = null;\n        BufferedReader br = null;\n        OutputStream os = null;\n        PrintWriter pw = null;\n        try {\n            serverSocket = new ServerSocket(8080);\n            //调用accept()方法开始监听，等待客户端的连接\n            while ((socket = serverSocket.accept()) != null ){\n                //获取输出流，响应客户端的请求\n                os = socket.getOutputStream();\n                pw = new PrintWriter(os);\n                pw.write(\"HTTP/1.1 200 OK\\n\" +\n                        \"Date: Fri, 7 Sept 2022 06:07:21 GMT\\n\" +\n                        \"Content-Type: text/html; charset=UTF-8\\n\" +\n                        \"\\n\" +\n                        \"<html>\\n\" +\n                        \"      <head></head>\\n\" +\n                        \"      <body>\\n\" +\n                        \"            helloWord!\\n\" +\n                        \"      </body>\\n\" +\n                        \"</html>\");\n                pw.flush();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            //关闭资源\n            pw.close();\n            os.close();\n            br.close();\n            isr.close();\n            is.close();\n            socket.close();\n            serverSocket.close();\n        }\n    }\n}\n```\n浏览器访问：localhost:8080 可见：\n![](https://img.gejiba.com/images/e252a903e9cf4d35eaa77788489e4a4c.png)\n\n## 总结\n\n上述示例实现了一个最简单的基于HTTP协议的Java服务器后端，里面并不包含对request请求字符串的处理，仅仅是打印了它，response也仅仅是按HTTP协议的规定封装了一句“helloworld！”。如此简易原始的HTTP服务器的整个访问和回复过程是如此繁琐，可见新技术出现的必要性。\n\n# Web服务器\n\n**<center>\nWeb服务器是一个应该程序(软件)，对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作，让Web开发更加便捷。主要功能是\"提供网上信息浏览服务\"</center>**\n\n![](https://img.gejiba.com/images/d2eca8a0000dc6e254f5bcf9300b8418.png)\n\n下面以Apache Tomcat服务器为例展示一个最简单的HTTP Web服务。\n\n## 创建展示页面\n\n在Tomcat根目录的**Webapps**下创建一个test文件夹，内部创建hello.html文件用于返回请求页面👇👇\n\n![](https://img.gejiba.com/images/ba7d619e9f80190fa9b379c01b9ac67d.png)\n\n## 启动服务器并请求资源\n\n- 启动Tomcat根目录下的**bin/startup.bat**\n- 使用Post访问**localhost:8080/test/hello.html**\n\n![](https://img.gejiba.com/images/2c4d42954c3df74e89901c3eac879458.png)\n\n## 总结\n\n1. Web服务器作用?\n➢封装HTTP协议操作，简化开发\n➢可以将Web项目部署到服务器中，对外提供网上浏览服务\n2. 什么是Tomcat?\nTomcat是一个轻量级的Web服务器， 支持Servlet/JSP少量JavaEE规范，也称为Web容器，Servlet容器，Servlet依赖于它或其他Web服务器才能正常运行。\n\n# Servlet规范\n\n## Servlet规范简介\n\nServlet（Server Applet，服务端小程序，是服务端的一小部分），全称Java Servlet，未有中文译文。是用Java编写的服务器端程序。其主要功能在于交互式地浏览和修改数据，生成动态Web内容。狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。\n\n### 补充：Servlet和Web服务器的关系\n首先要明白我们从来不会在Servlet中写什么监听8080端口的代码，Servlet不会直接和客户端打交道！这些全被Web服务器封装了。\n\n那请求是怎么来到Servlet的呢？答案是Servlet容器，比如我们最常用的Tomcat。Servlet都是部署在一个容器中的，不然你的Servlet根本不起作用。\n\nTomcat才是与客户端直接打交道的家伙，它监听了端口，请求过来后，根据URL等信息，确定要将请求交给哪个Servlet去处理，然后调用那个Servlet的service方法，service方法返回一个response对象，Tomcat再把这个respond返回给客户端。\n\n## 接口代码\n```Java\npackage Javax.Servlet;\n\nimport Java.io.IOException;\n\npublic interface Servlet {\n    void init(ServletConfig var1) throws ServletException;\n\n    ServletConfig getServletConfig();\n\n    void service(ServletRequest var1, ServletResponse var2) throws ServletException, IOException;\n\n    String getServletInfo();\n\n    void destroy();\n}\n```\n\nServlet接口定义的是一套处理网络请求的规范，所有实现Servlet的类，都需要实现它的那五个方法，其中最主要的是两个声明周期方法init()和destory()，还有一个处理请求的service()。也就是说，所有实现Servlet接口的类，或者说，所有想要处理网络请求的类，都需要回答这三个问题：\n\n- 你初始化时要做什么？\n- 你销毁时要做什么？\n- 你接收到请求时要做什么？\n\n## 生命周期\n\n1、客户端请求该 Servlet；\n\n2、Tomcat加载 Servlet 类到内存；\n\n3、Tomcat实例化并调用init()方法初始化该 Servlet；\n\n4、Tomcat调用service()（根据请求方法不同调用doGet() 或者 doPost()，此外还有doHead()、doPut()、doTrace()、doDelete()、doOptions()）；\n\n5、destroy()；\n\n6、加载和实例化 Servlet。这项操作一般是动态执行的。然而，Server 通常会提供一个管理的选项，用于在 Server 启动时强制装载和初始化特定的 Servlet；\n\n7、Server 创建一个 Servlet的实例；\n\n8、第一个客户端的请求到达 Server；\n\n9、Server 调用 Servlet 的 init() 方法（可配置为 Server 创建 Servlet 实例时调用）；\n\n10、一个客户端的请求到达 Server；\n\n11、Server 创建一个请求对象，处理客户端请求；\n\n12、Server 创建一个响应对象，响应客户端请求；\n\n13、Server 激活 Servlet 的 service() 方法，传递请求和响应对象作为参数；\n\n14、service() 方法获得关于请求对象的信息，处理请求，访问其他资源，获得需要的信息；\n\n15、service() 方法使用响应对象的方法，将响应传回Server，最终到达客户端。service()方法可能激活其它方法以处理请求，如 doGet() 或 doPost() 或程序员自己开发的新的方法；\n\n## 继承体系\n[![](https://img.gejiba.com/images/c4ed97e0e4b645e0968dc28a9fd82b22.png)](https://img.gejiba.com/image/EAAFoV)\n\n### HttpServlet源码\n```java\npackage javax.servlet.http;\n\nimport java.io.IOException;\nimport java.io.Serializable;\nimport java.lang.reflect.Method;\nimport java.text.MessageFormat;\nimport java.util.Enumeration;\nimport java.util.ResourceBundle;\nimport javax.servlet.GenericServlet;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\n\npublic abstract class HttpServlet extends GenericServlet implements Serializable {\n    private static final String METHOD_DELETE = \"DELETE\";\n    private static final String METHOD_HEAD = \"HEAD\";\n    private static final String METHOD_GET = \"GET\";\n    private static final String METHOD_OPTIONS = \"OPTIONS\";\n    private static final String METHOD_POST = \"POST\";\n    private static final String METHOD_PUT = \"PUT\";\n    private static final String METHOD_TRACE = \"TRACE\";\n    private static final String HEADER_IFMODSINCE = \"If-Modified-Since\";\n    private static final String HEADER_LASTMOD = \"Last-Modified\";\n    private static final String LSTRING_FILE = \"javax.servlet.http.LocalStrings\";\n    private static ResourceBundle lStrings = ResourceBundle.getBundle(\"javax.servlet.http.LocalStrings\");\n\n    public HttpServlet() {\n    }\n\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String protocol = req.getProtocol();\n        String msg = lStrings.getString(\"http.method_get_not_supported\");\n        if (protocol.endsWith(\"1.1\")) {\n            resp.sendError(405, msg);\n        } else {\n            resp.sendError(400, msg);\n        }\n\n    }\n\n    protected long getLastModified(HttpServletRequest req) {\n        return -1L;\n    }\n\n    protected void doHead(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        NoBodyResponse response = new NoBodyResponse(resp);\n        this.doGet(req, response);\n        response.setContentLength();\n    }\n\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String protocol = req.getProtocol();\n        String msg = lStrings.getString(\"http.method_post_not_supported\");\n        if (protocol.endsWith(\"1.1\")) {\n            resp.sendError(405, msg);\n        } else {\n            resp.sendError(400, msg);\n        }\n\n    }\n\n    protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String protocol = req.getProtocol();\n        String msg = lStrings.getString(\"http.method_put_not_supported\");\n        if (protocol.endsWith(\"1.1\")) {\n            resp.sendError(405, msg);\n        } else {\n            resp.sendError(400, msg);\n        }\n\n    }\n\n    protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String protocol = req.getProtocol();\n        String msg = lStrings.getString(\"http.method_delete_not_supported\");\n        if (protocol.endsWith(\"1.1\")) {\n            resp.sendError(405, msg);\n        } else {\n            resp.sendError(400, msg);\n        }\n\n    }\n\n    private Method[] getAllDeclaredMethods(Class c) {\n        if (c.equals(HttpServlet.class)) {\n            return null;\n        } else {\n            Method[] parentMethods = this.getAllDeclaredMethods(c.getSuperclass());\n            Method[] thisMethods = c.getDeclaredMethods();\n            if (parentMethods != null && parentMethods.length > 0) {\n                Method[] allMethods = new Method[parentMethods.length + thisMethods.length];\n                System.arraycopy(parentMethods, 0, allMethods, 0, parentMethods.length);\n                System.arraycopy(thisMethods, 0, allMethods, parentMethods.length, thisMethods.length);\n                thisMethods = allMethods;\n            }\n\n            return thisMethods;\n        }\n    }\n\n    protected void doOptions(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        Method[] methods = this.getAllDeclaredMethods(this.getClass());\n        boolean ALLOW_GET = false;\n        boolean ALLOW_HEAD = false;\n        boolean ALLOW_POST = false;\n        boolean ALLOW_PUT = false;\n        boolean ALLOW_DELETE = false;\n        boolean ALLOW_TRACE = true;\n        boolean ALLOW_OPTIONS = true;\n\n        for(int i = 0; i < methods.length; ++i) {\n            Method m = methods[i];\n            if (m.getName().equals(\"doGet\")) {\n                ALLOW_GET = true;\n                ALLOW_HEAD = true;\n            }\n\n            if (m.getName().equals(\"doPost\")) {\n                ALLOW_POST = true;\n            }\n\n            if (m.getName().equals(\"doPut\")) {\n                ALLOW_PUT = true;\n            }\n\n            if (m.getName().equals(\"doDelete\")) {\n                ALLOW_DELETE = true;\n            }\n        }\n\n        String allow = null;\n        if (ALLOW_GET && allow == null) {\n            allow = \"GET\";\n        }\n\n        if (ALLOW_HEAD) {\n            if (allow == null) {\n                allow = \"HEAD\";\n            } else {\n                allow = allow + \", HEAD\";\n            }\n        }\n\n        if (ALLOW_POST) {\n            if (allow == null) {\n                allow = \"POST\";\n            } else {\n                allow = allow + \", POST\";\n            }\n        }\n\n        if (ALLOW_PUT) {\n            if (allow == null) {\n                allow = \"PUT\";\n            } else {\n                allow = allow + \", PUT\";\n            }\n        }\n\n        if (ALLOW_DELETE) {\n            if (allow == null) {\n                allow = \"DELETE\";\n            } else {\n                allow = allow + \", DELETE\";\n            }\n        }\n\n        if (ALLOW_TRACE) {\n            if (allow == null) {\n                allow = \"TRACE\";\n            } else {\n                allow = allow + \", TRACE\";\n            }\n        }\n\n        if (ALLOW_OPTIONS) {\n            if (allow == null) {\n                allow = \"OPTIONS\";\n            } else {\n                allow = allow + \", OPTIONS\";\n            }\n        }\n\n        resp.setHeader(\"Allow\", allow);\n    }\n\n    protected void doTrace(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String CRLF = \"\\r\\n\";\n        String responseString = \"TRACE \" + req.getRequestURI() + \" \" + req.getProtocol();\n\n        String headerName;\n        for(Enumeration reqHeaderEnum = req.getHeaderNames(); reqHeaderEnum.hasMoreElements(); responseString = responseString + CRLF + headerName + \": \" + req.getHeader(headerName)) {\n            headerName = (String)reqHeaderEnum.nextElement();\n        }\n\n        responseString = responseString + CRLF;\n        int responseLength = responseString.length();\n        resp.setContentType(\"message/http\");\n        resp.setContentLength(responseLength);\n        ServletOutputStream out = resp.getOutputStream();\n        out.print(responseString);\n        out.close();\n    }\n\n    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String method = req.getMethod();\n        long lastModified;\n        if (method.equals(\"GET\")) {\n            lastModified = this.getLastModified(req);\n            if (lastModified == -1L) {\n                this.doGet(req, resp);\n            } else {\n                long ifModifiedSince = req.getDateHeader(\"If-Modified-Since\");\n                if (ifModifiedSince < lastModified / 1000L * 1000L) {\n                    this.maybeSetLastModified(resp, lastModified);\n                    this.doGet(req, resp);\n                } else {\n                    resp.setStatus(304);\n                }\n            }\n        } else if (method.equals(\"HEAD\")) {\n            lastModified = this.getLastModified(req);\n            this.maybeSetLastModified(resp, lastModified);\n            this.doHead(req, resp);\n        } else if (method.equals(\"POST\")) {\n            this.doPost(req, resp);\n        } else if (method.equals(\"PUT\")) {\n            this.doPut(req, resp);\n        } else if (method.equals(\"DELETE\")) {\n            this.doDelete(req, resp);\n        } else if (method.equals(\"OPTIONS\")) {\n            this.doOptions(req, resp);\n        } else if (method.equals(\"TRACE\")) {\n            this.doTrace(req, resp);\n        } else {\n            String errMsg = lStrings.getString(\"http.method_not_implemented\");\n            Object[] errArgs = new Object[]{method};\n            errMsg = MessageFormat.format(errMsg, errArgs);\n            resp.sendError(501, errMsg);\n        }\n\n    }\n\n    private void maybeSetLastModified(HttpServletResponse resp, long lastModified) {\n        if (!resp.containsHeader(\"Last-Modified\")) {\n            if (lastModified >= 0L) {\n                resp.setDateHeader(\"Last-Modified\", lastModified);\n            }\n\n        }\n    }\n\n    public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException {\n        HttpServletRequest request;\n        HttpServletResponse response;\n        try {\n            request = (HttpServletRequest)req;\n            response = (HttpServletResponse)res;\n        } catch (ClassCastException var6) {\n            throw new ServletException(\"non-HTTP request or response\");\n        }\n\n        this.service(request, response);\n    }\n}\n```\n\n## Servlet示例\n\n**<center>👇此处展示一段处理登录业务的Servlet代码👇</center>**\n\n```java\npackage com.geyu.web;\n\nimport com.geyu.web.mapper.UserMapper;\nimport com.geyu.web.pojo.User;\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\n\nimport javax.servlet.*;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.Map;\n\n@WebServlet(\"/loginServlet\")\npublic class ServletDemo extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String username = req.getParameter(\"username\");\n        String password = req.getParameter(\"password\");\n\n        String resource = \"mybatis-config.xml\";\n        InputStream inputStream = Resources.getResourceAsStream(resource);\n        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n\n        SqlSession sqlSession = sqlSessionFactory.openSession();\n\n        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);\n\n        User user = userMapper.select(username, password);\n\n        sqlSession.close();\n\n        resp.setContentType(\"text/html;charset=utf-8\");\n        PrintWriter writer = resp.getWriter();\n        if (user != null){\n            //登陆成功\n            writer.write(\"登陆成功\");\n        }else {\n            //登陆失败\n            writer.write(\"登录失败\");\n        }\n\n    }\n}\n```\n\n## 总结\n讲了这么多废话，总结来说Servlet就是一群人来制定Java应用中使用Web时的各种规范，统一接口，其他内部实现由厂商自己实现，tomcat jetty jboss等等应运而生。\n\n关于他如何工作的：一个http请求到来，容器将请求封装成Servlet中的request对象，在request中你可以得到所有的http信息，然后你可以取出来操作，最后你再把数据封装成Servlet的response对象，应用容器将respose对象解析之后封装成一个http response。\n\nWeb服务器习惯处理静态页面，所以需要一个程序来帮忙处理动态请求(如当前时间)。Web服务器程序会将动态请求转发给帮助程序，帮助程序处理后，返回处理后的静态结果给Web服务器程序。这样就避免了Web服务器程序处理动态页面。\n\n# SpringMVC框架\n\n## 简介\nSpring MVC是一个基于Java的实现了MVC设计模式的请求驱动类型的轻量级Web框架，通过把Model，View，Controller分离，将web层进行职责解耦，把复杂的web应用分成逻辑清晰的几部分，简化开发，减少出错，方便组内开发人员之间的配合。\n\n### SpringMVC和Servlet的区别与联系\n\n- Servlet：性能最好，处理HTTP请求的标准和规范。\n\n- SpringMVC：开发效率高（好多共性的东西都封装好了，是对Servlet的封装，核心的DispatcherServlet最终继承自HttpServlet）\n\n这两者的关系，就如同MyBatis和JDBC，一个性能好，一个开发效率高，是对另一个的封装。\n\n### Controller层示例\n\n```java\n@Controller\n@RequestMapping(\"/user\")\npublic class UserController {\n\n    @Autowired\n    IUserService service;\n\n    @RequestMapping(value = \"/login.do\", method = {RequestMethod.GET})\n    public String login(User user) {\n        User result = service.login(user);\n        if (result != null) {\n            return \"redirect:/pages/success.html\";\n        } else {\n            return \"redirect:/pages/error.html\";\n        }\n    }\n}\n```\n<center>\n👀开发过程肉眼可见的简介♥\n</center>\n","slug":"servlet进化之旅","published":1,"updated":"2022-10-15T13:55:20.716Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdm3008ma8vwux826g9v","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><strong><center>本篇主要记录Java后端开发学习过程中关于Servlet相关技术路线的梳理和总结</center></strong></p>\n<p>按技术迭代顺序依次从下述几个Web技术开展梳理：</p>\n<ul>\n<li>ServerSocket编程</li>\n<li>Web服务器</li>\n<li>Servlet规范</li>\n<li>SpringMCV框架</li>\n</ul>\n<h1 id=\"ServerSocket编程\"><a href=\"#ServerSocket编程\" class=\"headerlink\" title=\"ServerSocket编程\"></a>ServerSocket编程</h1><p><strong><center>本部分通过手撸一个基于Java的简易HTTP服务器来体会最原初的JavaWeb后端开发过程</center></strong></p>\n<h2 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><p>这里客户端就不使用Java代码编写了，可以考虑使用最基本的浏览器或者后端测试工具如PostMan。</p>\n<h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><ul>\n<li>第一步我们先创建ServerSocket，监听8080端口</li>\n<li>第二步接收到请求后把流在控制台进行输出</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpServer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        ServerSocket serverSocket = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Socket socket = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        InputStream is = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        InputStreamReader isr = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        BufferedReader br = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        OutputStream os = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        PrintWriter pw = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            serverSocket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">8080</span>);</span><br><span class=\"line\">            <span class=\"comment\">//调用accept()方法开始监听，等待客户端的连接</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((socket = serverSocket.accept()) != <span class=\"keyword\">null</span> )&#123;</span><br><span class=\"line\">                List&lt;String&gt; lines = IOUtils.readLines(socket.getInputStream(), <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (String line : lines) &#123;</span><br><span class=\"line\">                    System.out.println(line);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//关闭资源</span></span><br><span class=\"line\">            pw.close();</span><br><span class=\"line\">            os.close();</span><br><span class=\"line\">            br.close();</span><br><span class=\"line\">            isr.close();</span><br><span class=\"line\">            is.close();</span><br><span class=\"line\">            socket.close();</span><br><span class=\"line\">            serverSocket.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打印到控制台是以下这段文本:<br><img src=\"https://img.gejiba.com/images/e49002a3b302ec04645132ea159a3f8a.png\" alt></p>\n<p><strong>解释一下：</strong> 上述代码监听了8080端口并将客户端的访问请求打印为字符串，即控制台中的文本信息，只要我们的服务器解析这段字符串然后拼接成request，就能封装HTTP请求。但是这时观察浏览器界面发现没有任何响应。因为我们编写的HTTP服务器什么都没返回就关闭了连接。如果要浏览器正确的显示我们想要看到的helloword。同样也要拼接成浏览器能理解的http协议响应格式才能正确被解析。</p>\n<p>下面继续改动代码，让http返回200成功，并返回helloword：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpServer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        ServerSocket serverSocket = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Socket socket = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        InputStream is = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        InputStreamReader isr = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        BufferedReader br = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        OutputStream os = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        PrintWriter pw = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            serverSocket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">8080</span>);</span><br><span class=\"line\">            <span class=\"comment\">//调用accept()方法开始监听，等待客户端的连接</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((socket = serverSocket.accept()) != <span class=\"keyword\">null</span> )&#123;</span><br><span class=\"line\">                <span class=\"comment\">//获取输出流，响应客户端的请求</span></span><br><span class=\"line\">                os = socket.getOutputStream();</span><br><span class=\"line\">                pw = <span class=\"keyword\">new</span> PrintWriter(os);</span><br><span class=\"line\">                pw.write(<span class=\"string\">\"HTTP/1.1 200 OK\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"Date: Fri, 7 Sept 2022 06:07:21 GMT\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"Content-Type: text/html; charset=UTF-8\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"&lt;html&gt;\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"      &lt;head&gt;&lt;/head&gt;\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"      &lt;body&gt;\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"            helloWord!\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"      &lt;/body&gt;\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"&lt;/html&gt;\"</span>);</span><br><span class=\"line\">                pw.flush();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//关闭资源</span></span><br><span class=\"line\">            pw.close();</span><br><span class=\"line\">            os.close();</span><br><span class=\"line\">            br.close();</span><br><span class=\"line\">            isr.close();</span><br><span class=\"line\">            is.close();</span><br><span class=\"line\">            socket.close();</span><br><span class=\"line\">            serverSocket.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>浏览器访问：localhost:8080 可见：<br><img src=\"https://img.gejiba.com/images/e252a903e9cf4d35eaa77788489e4a4c.png\" alt></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上述示例实现了一个最简单的基于HTTP协议的Java服务器后端，里面并不包含对request请求字符串的处理，仅仅是打印了它，response也仅仅是按HTTP协议的规定封装了一句“helloworld！”。如此简易原始的HTTP服务器的整个访问和回复过程是如此繁琐，可见新技术出现的必要性。</p>\n<h1 id=\"Web服务器\"><a href=\"#Web服务器\" class=\"headerlink\" title=\"Web服务器\"></a>Web服务器</h1><p><strong><center><br>Web服务器是一个应该程序(软件)，对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作，让Web开发更加便捷。主要功能是”提供网上信息浏览服务”</center></strong></p>\n<p><img src=\"https://img.gejiba.com/images/d2eca8a0000dc6e254f5bcf9300b8418.png\" alt></p>\n<p>下面以Apache Tomcat服务器为例展示一个最简单的HTTP Web服务。</p>\n<h2 id=\"创建展示页面\"><a href=\"#创建展示页面\" class=\"headerlink\" title=\"创建展示页面\"></a>创建展示页面</h2><p>在Tomcat根目录的<strong>Webapps</strong>下创建一个test文件夹，内部创建hello.html文件用于返回请求页面👇👇</p>\n<p><img src=\"https://img.gejiba.com/images/ba7d619e9f80190fa9b379c01b9ac67d.png\" alt></p>\n<h2 id=\"启动服务器并请求资源\"><a href=\"#启动服务器并请求资源\" class=\"headerlink\" title=\"启动服务器并请求资源\"></a>启动服务器并请求资源</h2><ul>\n<li>启动Tomcat根目录下的<strong>bin/startup.bat</strong></li>\n<li>使用Post访问<strong>localhost:8080/test/hello.html</strong></li>\n</ul>\n<p><img src=\"https://img.gejiba.com/images/2c4d42954c3df74e89901c3eac879458.png\" alt></p>\n<h2 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>Web服务器作用?<br>➢封装HTTP协议操作，简化开发<br>➢可以将Web项目部署到服务器中，对外提供网上浏览服务</li>\n<li>什么是Tomcat?<br>Tomcat是一个轻量级的Web服务器， 支持Servlet/JSP少量JavaEE规范，也称为Web容器，Servlet容器，Servlet依赖于它或其他Web服务器才能正常运行。</li>\n</ol>\n<h1 id=\"Servlet规范\"><a href=\"#Servlet规范\" class=\"headerlink\" title=\"Servlet规范\"></a>Servlet规范</h1><h2 id=\"Servlet规范简介\"><a href=\"#Servlet规范简介\" class=\"headerlink\" title=\"Servlet规范简介\"></a>Servlet规范简介</h2><p>Servlet（Server Applet，服务端小程序，是服务端的一小部分），全称Java Servlet，未有中文译文。是用Java编写的服务器端程序。其主要功能在于交互式地浏览和修改数据，生成动态Web内容。狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。</p>\n<h3 id=\"补充：Servlet和Web服务器的关系\"><a href=\"#补充：Servlet和Web服务器的关系\" class=\"headerlink\" title=\"补充：Servlet和Web服务器的关系\"></a>补充：Servlet和Web服务器的关系</h3><p>首先要明白我们从来不会在Servlet中写什么监听8080端口的代码，Servlet不会直接和客户端打交道！这些全被Web服务器封装了。</p>\n<p>那请求是怎么来到Servlet的呢？答案是Servlet容器，比如我们最常用的Tomcat。Servlet都是部署在一个容器中的，不然你的Servlet根本不起作用。</p>\n<p>Tomcat才是与客户端直接打交道的家伙，它监听了端口，请求过来后，根据URL等信息，确定要将请求交给哪个Servlet去处理，然后调用那个Servlet的service方法，service方法返回一个response对象，Tomcat再把这个respond返回给客户端。</p>\n<h2 id=\"接口代码\"><a href=\"#接口代码\" class=\"headerlink\" title=\"接口代码\"></a>接口代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Javax.Servlet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Servlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ServletConfig var1)</span> <span class=\"keyword\">throws</span> ServletException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">ServletConfig <span class=\"title\">getServletConfig</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(ServletRequest var1, ServletResponse var2)</span> <span class=\"keyword\">throws</span> ServletException, IOException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getServletInfo</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Servlet接口定义的是一套处理网络请求的规范，所有实现Servlet的类，都需要实现它的那五个方法，其中最主要的是两个声明周期方法init()和destory()，还有一个处理请求的service()。也就是说，所有实现Servlet接口的类，或者说，所有想要处理网络请求的类，都需要回答这三个问题：</p>\n<ul>\n<li>你初始化时要做什么？</li>\n<li>你销毁时要做什么？</li>\n<li>你接收到请求时要做什么？</li>\n</ul>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><p>1、客户端请求该 Servlet；</p>\n<p>2、Tomcat加载 Servlet 类到内存；</p>\n<p>3、Tomcat实例化并调用init()方法初始化该 Servlet；</p>\n<p>4、Tomcat调用service()（根据请求方法不同调用doGet() 或者 doPost()，此外还有doHead()、doPut()、doTrace()、doDelete()、doOptions()）；</p>\n<p>5、destroy()；</p>\n<p>6、加载和实例化 Servlet。这项操作一般是动态执行的。然而，Server 通常会提供一个管理的选项，用于在 Server 启动时强制装载和初始化特定的 Servlet；</p>\n<p>7、Server 创建一个 Servlet的实例；</p>\n<p>8、第一个客户端的请求到达 Server；</p>\n<p>9、Server 调用 Servlet 的 init() 方法（可配置为 Server 创建 Servlet 实例时调用）；</p>\n<p>10、一个客户端的请求到达 Server；</p>\n<p>11、Server 创建一个请求对象，处理客户端请求；</p>\n<p>12、Server 创建一个响应对象，响应客户端请求；</p>\n<p>13、Server 激活 Servlet 的 service() 方法，传递请求和响应对象作为参数；</p>\n<p>14、service() 方法获得关于请求对象的信息，处理请求，访问其他资源，获得需要的信息；</p>\n<p>15、service() 方法使用响应对象的方法，将响应传回Server，最终到达客户端。service()方法可能激活其它方法以处理请求，如 doGet() 或 doPost() 或程序员自己开发的新的方法；</p>\n<h2 id=\"继承体系\"><a href=\"#继承体系\" class=\"headerlink\" title=\"继承体系\"></a>继承体系</h2><p><a href=\"https://img.gejiba.com/image/EAAFoV\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.gejiba.com/images/c4ed97e0e4b645e0968dc28a9fd82b22.png\" alt></a></p>\n<h3 id=\"HttpServlet源码\"><a href=\"#HttpServlet源码\" class=\"headerlink\" title=\"HttpServlet源码\"></a>HttpServlet源码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> javax.servlet.http;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.MessageFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Enumeration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ResourceBundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.GenericServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">GenericServlet</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String METHOD_DELETE = <span class=\"string\">\"DELETE\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String METHOD_HEAD = <span class=\"string\">\"HEAD\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String METHOD_GET = <span class=\"string\">\"GET\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String METHOD_OPTIONS = <span class=\"string\">\"OPTIONS\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String METHOD_POST = <span class=\"string\">\"POST\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String METHOD_PUT = <span class=\"string\">\"PUT\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String METHOD_TRACE = <span class=\"string\">\"TRACE\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String HEADER_IFMODSINCE = <span class=\"string\">\"If-Modified-Since\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String HEADER_LASTMOD = <span class=\"string\">\"Last-Modified\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String LSTRING_FILE = <span class=\"string\">\"javax.servlet.http.LocalStrings\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ResourceBundle lStrings = ResourceBundle.getBundle(<span class=\"string\">\"javax.servlet.http.LocalStrings\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HttpServlet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String protocol = req.getProtocol();</span><br><span class=\"line\">        String msg = lStrings.getString(<span class=\"string\">\"http.method_get_not_supported\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (protocol.endsWith(<span class=\"string\">\"1.1\"</span>)) &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">405</span>, msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">400</span>, msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">long</span> <span class=\"title\">getLastModified</span><span class=\"params\">(HttpServletRequest req)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1L</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doHead</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        NoBodyResponse response = <span class=\"keyword\">new</span> NoBodyResponse(resp);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.doGet(req, response);</span><br><span class=\"line\">        response.setContentLength();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String protocol = req.getProtocol();</span><br><span class=\"line\">        String msg = lStrings.getString(<span class=\"string\">\"http.method_post_not_supported\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (protocol.endsWith(<span class=\"string\">\"1.1\"</span>)) &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">405</span>, msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">400</span>, msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPut</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String protocol = req.getProtocol();</span><br><span class=\"line\">        String msg = lStrings.getString(<span class=\"string\">\"http.method_put_not_supported\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (protocol.endsWith(<span class=\"string\">\"1.1\"</span>)) &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">405</span>, msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">400</span>, msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doDelete</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String protocol = req.getProtocol();</span><br><span class=\"line\">        String msg = lStrings.getString(<span class=\"string\">\"http.method_delete_not_supported\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (protocol.endsWith(<span class=\"string\">\"1.1\"</span>)) &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">405</span>, msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">400</span>, msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Method[] getAllDeclaredMethods(Class c) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c.equals(HttpServlet.class)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Method[] parentMethods = <span class=\"keyword\">this</span>.getAllDeclaredMethods(c.getSuperclass());</span><br><span class=\"line\">            Method[] thisMethods = c.getDeclaredMethods();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (parentMethods != <span class=\"keyword\">null</span> &amp;&amp; parentMethods.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                Method[] allMethods = <span class=\"keyword\">new</span> Method[parentMethods.length + thisMethods.length];</span><br><span class=\"line\">                System.arraycopy(parentMethods, <span class=\"number\">0</span>, allMethods, <span class=\"number\">0</span>, parentMethods.length);</span><br><span class=\"line\">                System.arraycopy(thisMethods, <span class=\"number\">0</span>, allMethods, parentMethods.length, thisMethods.length);</span><br><span class=\"line\">                thisMethods = allMethods;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> thisMethods;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doOptions</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        Method[] methods = <span class=\"keyword\">this</span>.getAllDeclaredMethods(<span class=\"keyword\">this</span>.getClass());</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ALLOW_GET = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ALLOW_HEAD = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ALLOW_POST = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ALLOW_PUT = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ALLOW_DELETE = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ALLOW_TRACE = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ALLOW_OPTIONS = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; methods.length; ++i) &#123;</span><br><span class=\"line\">            Method m = methods[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m.getName().equals(<span class=\"string\">\"doGet\"</span>)) &#123;</span><br><span class=\"line\">                ALLOW_GET = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                ALLOW_HEAD = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m.getName().equals(<span class=\"string\">\"doPost\"</span>)) &#123;</span><br><span class=\"line\">                ALLOW_POST = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m.getName().equals(<span class=\"string\">\"doPut\"</span>)) &#123;</span><br><span class=\"line\">                ALLOW_PUT = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m.getName().equals(<span class=\"string\">\"doDelete\"</span>)) &#123;</span><br><span class=\"line\">                ALLOW_DELETE = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        String allow = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOW_GET &amp;&amp; allow == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            allow = <span class=\"string\">\"GET\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOW_HEAD) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (allow == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                allow = <span class=\"string\">\"HEAD\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                allow = allow + <span class=\"string\">\", HEAD\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOW_POST) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (allow == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                allow = <span class=\"string\">\"POST\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                allow = allow + <span class=\"string\">\", POST\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOW_PUT) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (allow == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                allow = <span class=\"string\">\"PUT\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                allow = allow + <span class=\"string\">\", PUT\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOW_DELETE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (allow == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                allow = <span class=\"string\">\"DELETE\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                allow = allow + <span class=\"string\">\", DELETE\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOW_TRACE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (allow == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                allow = <span class=\"string\">\"TRACE\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                allow = allow + <span class=\"string\">\", TRACE\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOW_OPTIONS) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (allow == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                allow = <span class=\"string\">\"OPTIONS\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                allow = allow + <span class=\"string\">\", OPTIONS\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        resp.setHeader(<span class=\"string\">\"Allow\"</span>, allow);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doTrace</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String CRLF = <span class=\"string\">\"\\r\\n\"</span>;</span><br><span class=\"line\">        String responseString = <span class=\"string\">\"TRACE \"</span> + req.getRequestURI() + <span class=\"string\">\" \"</span> + req.getProtocol();</span><br><span class=\"line\"></span><br><span class=\"line\">        String headerName;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Enumeration reqHeaderEnum = req.getHeaderNames(); reqHeaderEnum.hasMoreElements(); responseString = responseString + CRLF + headerName + <span class=\"string\">\": \"</span> + req.getHeader(headerName)) &#123;</span><br><span class=\"line\">            headerName = (String)reqHeaderEnum.nextElement();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        responseString = responseString + CRLF;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> responseLength = responseString.length();</span><br><span class=\"line\">        resp.setContentType(<span class=\"string\">\"message/http\"</span>);</span><br><span class=\"line\">        resp.setContentLength(responseLength);</span><br><span class=\"line\">        ServletOutputStream out = resp.getOutputStream();</span><br><span class=\"line\">        out.print(responseString);</span><br><span class=\"line\">        out.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String method = req.getMethod();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> lastModified;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"GET\"</span>)) &#123;</span><br><span class=\"line\">            lastModified = <span class=\"keyword\">this</span>.getLastModified(req);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lastModified == -<span class=\"number\">1L</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.doGet(req, resp);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> ifModifiedSince = req.getDateHeader(<span class=\"string\">\"If-Modified-Since\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ifModifiedSince &lt; lastModified / <span class=\"number\">1000L</span> * <span class=\"number\">1000L</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.maybeSetLastModified(resp, lastModified);</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.doGet(req, resp);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    resp.setStatus(<span class=\"number\">304</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"HEAD\"</span>)) &#123;</span><br><span class=\"line\">            lastModified = <span class=\"keyword\">this</span>.getLastModified(req);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.maybeSetLastModified(resp, lastModified);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.doHead(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"POST\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.doPost(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"PUT\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.doPut(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"DELETE\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.doDelete(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"OPTIONS\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.doOptions(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"TRACE\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.doTrace(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            String errMsg = lStrings.getString(<span class=\"string\">\"http.method_not_implemented\"</span>);</span><br><span class=\"line\">            Object[] errArgs = <span class=\"keyword\">new</span> Object[]&#123;method&#125;;</span><br><span class=\"line\">            errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">501</span>, errMsg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">maybeSetLastModified</span><span class=\"params\">(HttpServletResponse resp, <span class=\"keyword\">long</span> lastModified)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!resp.containsHeader(<span class=\"string\">\"Last-Modified\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lastModified &gt;= <span class=\"number\">0L</span>) &#123;</span><br><span class=\"line\">                resp.setDateHeader(<span class=\"string\">\"Last-Modified\"</span>, lastModified);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(ServletRequest req, ServletResponse res)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        HttpServletRequest request;</span><br><span class=\"line\">        HttpServletResponse response;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            request = (HttpServletRequest)req;</span><br><span class=\"line\">            response = (HttpServletResponse)res;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassCastException var6) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ServletException(<span class=\"string\">\"non-HTTP request or response\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.service(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Servlet示例\"><a href=\"#Servlet示例\" class=\"headerlink\" title=\"Servlet示例\"></a>Servlet示例</h2><p><strong><center>👇此处展示一段处理登录业务的Servlet代码👇</center></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.geyu.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.geyu.web.mapper.UserMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.geyu.web.pojo.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.io.Resources;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/loginServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServletDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String username = req.getParameter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">        String password = req.getParameter(<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        String resource = <span class=\"string\">\"mybatis-config.xml\"</span>;</span><br><span class=\"line\">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class=\"line\">        SqlSessionFactory sqlSessionFactory = <span class=\"keyword\">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class=\"line\"></span><br><span class=\"line\">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class=\"line\"></span><br><span class=\"line\">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        User user = userMapper.select(username, password);</span><br><span class=\"line\"></span><br><span class=\"line\">        sqlSession.close();</span><br><span class=\"line\"></span><br><span class=\"line\">        resp.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);</span><br><span class=\"line\">        PrintWriter writer = resp.getWriter();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (user != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//登陆成功</span></span><br><span class=\"line\">            writer.write(<span class=\"string\">\"登陆成功\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//登陆失败</span></span><br><span class=\"line\">            writer.write(<span class=\"string\">\"登录失败\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>讲了这么多废话，总结来说Servlet就是一群人来制定Java应用中使用Web时的各种规范，统一接口，其他内部实现由厂商自己实现，tomcat jetty jboss等等应运而生。</p>\n<p>关于他如何工作的：一个http请求到来，容器将请求封装成Servlet中的request对象，在request中你可以得到所有的http信息，然后你可以取出来操作，最后你再把数据封装成Servlet的response对象，应用容器将respose对象解析之后封装成一个http response。</p>\n<p>Web服务器习惯处理静态页面，所以需要一个程序来帮忙处理动态请求(如当前时间)。Web服务器程序会将动态请求转发给帮助程序，帮助程序处理后，返回处理后的静态结果给Web服务器程序。这样就避免了Web服务器程序处理动态页面。</p>\n<h1 id=\"SpringMVC框架\"><a href=\"#SpringMVC框架\" class=\"headerlink\" title=\"SpringMVC框架\"></a>SpringMVC框架</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Spring MVC是一个基于Java的实现了MVC设计模式的请求驱动类型的轻量级Web框架，通过把Model，View，Controller分离，将web层进行职责解耦，把复杂的web应用分成逻辑清晰的几部分，简化开发，减少出错，方便组内开发人员之间的配合。</p>\n<h3 id=\"SpringMVC和Servlet的区别与联系\"><a href=\"#SpringMVC和Servlet的区别与联系\" class=\"headerlink\" title=\"SpringMVC和Servlet的区别与联系\"></a>SpringMVC和Servlet的区别与联系</h3><ul>\n<li><p>Servlet：性能最好，处理HTTP请求的标准和规范。</p>\n</li>\n<li><p>SpringMVC：开发效率高（好多共性的东西都封装好了，是对Servlet的封装，核心的DispatcherServlet最终继承自HttpServlet）</p>\n</li>\n</ul>\n<p>这两者的关系，就如同MyBatis和JDBC，一个性能好，一个开发效率高，是对另一个的封装。</p>\n<h3 id=\"Controller层示例\"><a href=\"#Controller层示例\" class=\"headerlink\" title=\"Controller层示例\"></a>Controller层示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/user\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    IUserService service;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/login.do\"</span>, method = &#123;RequestMethod.GET&#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">login</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        User result = service.login(user);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/pages/success.html\"</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/pages/error.html\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<center>\n👀开发过程肉眼可见的简介♥\n</center>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p><strong><center>本篇主要记录Java后端开发学习过程中关于Servlet相关技术路线的梳理和总结</center></strong></p>\n<p>按技术迭代顺序依次从下述几个Web技术开展梳理：</p>\n<ul>\n<li>ServerSocket编程</li>\n<li>Web服务器</li>\n<li>Servlet规范</li>\n<li>SpringMCV框架</li>\n</ul>\n<h1 id=\"ServerSocket编程\"><a href=\"#ServerSocket编程\" class=\"headerlink\" title=\"ServerSocket编程\"></a>ServerSocket编程</h1><p><strong><center>本部分通过手撸一个基于Java的简易HTTP服务器来体会最原初的JavaWeb后端开发过程</center></strong></p>\n<h2 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><p>这里客户端就不使用Java代码编写了，可以考虑使用最基本的浏览器或者后端测试工具如PostMan。</p>\n<h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><ul>\n<li>第一步我们先创建ServerSocket，监听8080端口</li>\n<li>第二步接收到请求后把流在控制台进行输出</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpServer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        ServerSocket serverSocket = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Socket socket = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        InputStream is = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        InputStreamReader isr = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        BufferedReader br = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        OutputStream os = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        PrintWriter pw = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            serverSocket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">8080</span>);</span><br><span class=\"line\">            <span class=\"comment\">//调用accept()方法开始监听，等待客户端的连接</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((socket = serverSocket.accept()) != <span class=\"keyword\">null</span> )&#123;</span><br><span class=\"line\">                List&lt;String&gt; lines = IOUtils.readLines(socket.getInputStream(), <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (String line : lines) &#123;</span><br><span class=\"line\">                    System.out.println(line);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//关闭资源</span></span><br><span class=\"line\">            pw.close();</span><br><span class=\"line\">            os.close();</span><br><span class=\"line\">            br.close();</span><br><span class=\"line\">            isr.close();</span><br><span class=\"line\">            is.close();</span><br><span class=\"line\">            socket.close();</span><br><span class=\"line\">            serverSocket.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打印到控制台是以下这段文本:<br><img src=\"https://img.gejiba.com/images/e49002a3b302ec04645132ea159a3f8a.png\" alt></p>\n<p><strong>解释一下：</strong> 上述代码监听了8080端口并将客户端的访问请求打印为字符串，即控制台中的文本信息，只要我们的服务器解析这段字符串然后拼接成request，就能封装HTTP请求。但是这时观察浏览器界面发现没有任何响应。因为我们编写的HTTP服务器什么都没返回就关闭了连接。如果要浏览器正确的显示我们想要看到的helloword。同样也要拼接成浏览器能理解的http协议响应格式才能正确被解析。</p>\n<p>下面继续改动代码，让http返回200成功，并返回helloword：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpServer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        ServerSocket serverSocket = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        Socket socket = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        InputStream is = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        InputStreamReader isr = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        BufferedReader br = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        OutputStream os = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        PrintWriter pw = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            serverSocket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">8080</span>);</span><br><span class=\"line\">            <span class=\"comment\">//调用accept()方法开始监听，等待客户端的连接</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((socket = serverSocket.accept()) != <span class=\"keyword\">null</span> )&#123;</span><br><span class=\"line\">                <span class=\"comment\">//获取输出流，响应客户端的请求</span></span><br><span class=\"line\">                os = socket.getOutputStream();</span><br><span class=\"line\">                pw = <span class=\"keyword\">new</span> PrintWriter(os);</span><br><span class=\"line\">                pw.write(<span class=\"string\">\"HTTP/1.1 200 OK\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"Date: Fri, 7 Sept 2022 06:07:21 GMT\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"Content-Type: text/html; charset=UTF-8\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"&lt;html&gt;\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"      &lt;head&gt;&lt;/head&gt;\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"      &lt;body&gt;\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"            helloWord!\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"      &lt;/body&gt;\\n\"</span> +</span><br><span class=\"line\">                        <span class=\"string\">\"&lt;/html&gt;\"</span>);</span><br><span class=\"line\">                pw.flush();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//关闭资源</span></span><br><span class=\"line\">            pw.close();</span><br><span class=\"line\">            os.close();</span><br><span class=\"line\">            br.close();</span><br><span class=\"line\">            isr.close();</span><br><span class=\"line\">            is.close();</span><br><span class=\"line\">            socket.close();</span><br><span class=\"line\">            serverSocket.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>浏览器访问：localhost:8080 可见：<br><img src=\"https://img.gejiba.com/images/e252a903e9cf4d35eaa77788489e4a4c.png\" alt></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上述示例实现了一个最简单的基于HTTP协议的Java服务器后端，里面并不包含对request请求字符串的处理，仅仅是打印了它，response也仅仅是按HTTP协议的规定封装了一句“helloworld！”。如此简易原始的HTTP服务器的整个访问和回复过程是如此繁琐，可见新技术出现的必要性。</p>\n<h1 id=\"Web服务器\"><a href=\"#Web服务器\" class=\"headerlink\" title=\"Web服务器\"></a>Web服务器</h1><p><strong><center><br>Web服务器是一个应该程序(软件)，对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作，让Web开发更加便捷。主要功能是”提供网上信息浏览服务”</center></strong></p>\n<p><img src=\"https://img.gejiba.com/images/d2eca8a0000dc6e254f5bcf9300b8418.png\" alt></p>\n<p>下面以Apache Tomcat服务器为例展示一个最简单的HTTP Web服务。</p>\n<h2 id=\"创建展示页面\"><a href=\"#创建展示页面\" class=\"headerlink\" title=\"创建展示页面\"></a>创建展示页面</h2><p>在Tomcat根目录的<strong>Webapps</strong>下创建一个test文件夹，内部创建hello.html文件用于返回请求页面👇👇</p>\n<p><img src=\"https://img.gejiba.com/images/ba7d619e9f80190fa9b379c01b9ac67d.png\" alt></p>\n<h2 id=\"启动服务器并请求资源\"><a href=\"#启动服务器并请求资源\" class=\"headerlink\" title=\"启动服务器并请求资源\"></a>启动服务器并请求资源</h2><ul>\n<li>启动Tomcat根目录下的<strong>bin/startup.bat</strong></li>\n<li>使用Post访问<strong>localhost:8080/test/hello.html</strong></li>\n</ul>\n<p><img src=\"https://img.gejiba.com/images/2c4d42954c3df74e89901c3eac879458.png\" alt></p>\n<h2 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>Web服务器作用?<br>➢封装HTTP协议操作，简化开发<br>➢可以将Web项目部署到服务器中，对外提供网上浏览服务</li>\n<li>什么是Tomcat?<br>Tomcat是一个轻量级的Web服务器， 支持Servlet/JSP少量JavaEE规范，也称为Web容器，Servlet容器，Servlet依赖于它或其他Web服务器才能正常运行。</li>\n</ol>\n<h1 id=\"Servlet规范\"><a href=\"#Servlet规范\" class=\"headerlink\" title=\"Servlet规范\"></a>Servlet规范</h1><h2 id=\"Servlet规范简介\"><a href=\"#Servlet规范简介\" class=\"headerlink\" title=\"Servlet规范简介\"></a>Servlet规范简介</h2><p>Servlet（Server Applet，服务端小程序，是服务端的一小部分），全称Java Servlet，未有中文译文。是用Java编写的服务器端程序。其主要功能在于交互式地浏览和修改数据，生成动态Web内容。狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。</p>\n<h3 id=\"补充：Servlet和Web服务器的关系\"><a href=\"#补充：Servlet和Web服务器的关系\" class=\"headerlink\" title=\"补充：Servlet和Web服务器的关系\"></a>补充：Servlet和Web服务器的关系</h3><p>首先要明白我们从来不会在Servlet中写什么监听8080端口的代码，Servlet不会直接和客户端打交道！这些全被Web服务器封装了。</p>\n<p>那请求是怎么来到Servlet的呢？答案是Servlet容器，比如我们最常用的Tomcat。Servlet都是部署在一个容器中的，不然你的Servlet根本不起作用。</p>\n<p>Tomcat才是与客户端直接打交道的家伙，它监听了端口，请求过来后，根据URL等信息，确定要将请求交给哪个Servlet去处理，然后调用那个Servlet的service方法，service方法返回一个response对象，Tomcat再把这个respond返回给客户端。</p>\n<h2 id=\"接口代码\"><a href=\"#接口代码\" class=\"headerlink\" title=\"接口代码\"></a>接口代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> Javax.Servlet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Servlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ServletConfig var1)</span> <span class=\"keyword\">throws</span> ServletException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">ServletConfig <span class=\"title\">getServletConfig</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(ServletRequest var1, ServletResponse var2)</span> <span class=\"keyword\">throws</span> ServletException, IOException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">getServletInfo</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Servlet接口定义的是一套处理网络请求的规范，所有实现Servlet的类，都需要实现它的那五个方法，其中最主要的是两个声明周期方法init()和destory()，还有一个处理请求的service()。也就是说，所有实现Servlet接口的类，或者说，所有想要处理网络请求的类，都需要回答这三个问题：</p>\n<ul>\n<li>你初始化时要做什么？</li>\n<li>你销毁时要做什么？</li>\n<li>你接收到请求时要做什么？</li>\n</ul>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><p>1、客户端请求该 Servlet；</p>\n<p>2、Tomcat加载 Servlet 类到内存；</p>\n<p>3、Tomcat实例化并调用init()方法初始化该 Servlet；</p>\n<p>4、Tomcat调用service()（根据请求方法不同调用doGet() 或者 doPost()，此外还有doHead()、doPut()、doTrace()、doDelete()、doOptions()）；</p>\n<p>5、destroy()；</p>\n<p>6、加载和实例化 Servlet。这项操作一般是动态执行的。然而，Server 通常会提供一个管理的选项，用于在 Server 启动时强制装载和初始化特定的 Servlet；</p>\n<p>7、Server 创建一个 Servlet的实例；</p>\n<p>8、第一个客户端的请求到达 Server；</p>\n<p>9、Server 调用 Servlet 的 init() 方法（可配置为 Server 创建 Servlet 实例时调用）；</p>\n<p>10、一个客户端的请求到达 Server；</p>\n<p>11、Server 创建一个请求对象，处理客户端请求；</p>\n<p>12、Server 创建一个响应对象，响应客户端请求；</p>\n<p>13、Server 激活 Servlet 的 service() 方法，传递请求和响应对象作为参数；</p>\n<p>14、service() 方法获得关于请求对象的信息，处理请求，访问其他资源，获得需要的信息；</p>\n<p>15、service() 方法使用响应对象的方法，将响应传回Server，最终到达客户端。service()方法可能激活其它方法以处理请求，如 doGet() 或 doPost() 或程序员自己开发的新的方法；</p>\n<h2 id=\"继承体系\"><a href=\"#继承体系\" class=\"headerlink\" title=\"继承体系\"></a>继承体系</h2><p><a href=\"https://img.gejiba.com/image/EAAFoV\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.gejiba.com/images/c4ed97e0e4b645e0968dc28a9fd82b22.png\" alt></a></p>\n<h3 id=\"HttpServlet源码\"><a href=\"#HttpServlet源码\" class=\"headerlink\" title=\"HttpServlet源码\"></a>HttpServlet源码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> javax.servlet.http;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.MessageFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Enumeration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ResourceBundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.GenericServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">GenericServlet</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String METHOD_DELETE = <span class=\"string\">\"DELETE\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String METHOD_HEAD = <span class=\"string\">\"HEAD\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String METHOD_GET = <span class=\"string\">\"GET\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String METHOD_OPTIONS = <span class=\"string\">\"OPTIONS\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String METHOD_POST = <span class=\"string\">\"POST\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String METHOD_PUT = <span class=\"string\">\"PUT\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String METHOD_TRACE = <span class=\"string\">\"TRACE\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String HEADER_IFMODSINCE = <span class=\"string\">\"If-Modified-Since\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String HEADER_LASTMOD = <span class=\"string\">\"Last-Modified\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String LSTRING_FILE = <span class=\"string\">\"javax.servlet.http.LocalStrings\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ResourceBundle lStrings = ResourceBundle.getBundle(<span class=\"string\">\"javax.servlet.http.LocalStrings\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HttpServlet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String protocol = req.getProtocol();</span><br><span class=\"line\">        String msg = lStrings.getString(<span class=\"string\">\"http.method_get_not_supported\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (protocol.endsWith(<span class=\"string\">\"1.1\"</span>)) &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">405</span>, msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">400</span>, msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">long</span> <span class=\"title\">getLastModified</span><span class=\"params\">(HttpServletRequest req)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1L</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doHead</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        NoBodyResponse response = <span class=\"keyword\">new</span> NoBodyResponse(resp);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.doGet(req, response);</span><br><span class=\"line\">        response.setContentLength();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String protocol = req.getProtocol();</span><br><span class=\"line\">        String msg = lStrings.getString(<span class=\"string\">\"http.method_post_not_supported\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (protocol.endsWith(<span class=\"string\">\"1.1\"</span>)) &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">405</span>, msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">400</span>, msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPut</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String protocol = req.getProtocol();</span><br><span class=\"line\">        String msg = lStrings.getString(<span class=\"string\">\"http.method_put_not_supported\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (protocol.endsWith(<span class=\"string\">\"1.1\"</span>)) &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">405</span>, msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">400</span>, msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doDelete</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String protocol = req.getProtocol();</span><br><span class=\"line\">        String msg = lStrings.getString(<span class=\"string\">\"http.method_delete_not_supported\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (protocol.endsWith(<span class=\"string\">\"1.1\"</span>)) &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">405</span>, msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">400</span>, msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Method[] getAllDeclaredMethods(Class c) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c.equals(HttpServlet.class)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Method[] parentMethods = <span class=\"keyword\">this</span>.getAllDeclaredMethods(c.getSuperclass());</span><br><span class=\"line\">            Method[] thisMethods = c.getDeclaredMethods();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (parentMethods != <span class=\"keyword\">null</span> &amp;&amp; parentMethods.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                Method[] allMethods = <span class=\"keyword\">new</span> Method[parentMethods.length + thisMethods.length];</span><br><span class=\"line\">                System.arraycopy(parentMethods, <span class=\"number\">0</span>, allMethods, <span class=\"number\">0</span>, parentMethods.length);</span><br><span class=\"line\">                System.arraycopy(thisMethods, <span class=\"number\">0</span>, allMethods, parentMethods.length, thisMethods.length);</span><br><span class=\"line\">                thisMethods = allMethods;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> thisMethods;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doOptions</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        Method[] methods = <span class=\"keyword\">this</span>.getAllDeclaredMethods(<span class=\"keyword\">this</span>.getClass());</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ALLOW_GET = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ALLOW_HEAD = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ALLOW_POST = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ALLOW_PUT = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ALLOW_DELETE = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ALLOW_TRACE = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> ALLOW_OPTIONS = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; methods.length; ++i) &#123;</span><br><span class=\"line\">            Method m = methods[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m.getName().equals(<span class=\"string\">\"doGet\"</span>)) &#123;</span><br><span class=\"line\">                ALLOW_GET = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                ALLOW_HEAD = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m.getName().equals(<span class=\"string\">\"doPost\"</span>)) &#123;</span><br><span class=\"line\">                ALLOW_POST = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m.getName().equals(<span class=\"string\">\"doPut\"</span>)) &#123;</span><br><span class=\"line\">                ALLOW_PUT = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m.getName().equals(<span class=\"string\">\"doDelete\"</span>)) &#123;</span><br><span class=\"line\">                ALLOW_DELETE = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        String allow = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOW_GET &amp;&amp; allow == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            allow = <span class=\"string\">\"GET\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOW_HEAD) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (allow == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                allow = <span class=\"string\">\"HEAD\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                allow = allow + <span class=\"string\">\", HEAD\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOW_POST) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (allow == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                allow = <span class=\"string\">\"POST\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                allow = allow + <span class=\"string\">\", POST\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOW_PUT) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (allow == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                allow = <span class=\"string\">\"PUT\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                allow = allow + <span class=\"string\">\", PUT\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOW_DELETE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (allow == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                allow = <span class=\"string\">\"DELETE\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                allow = allow + <span class=\"string\">\", DELETE\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOW_TRACE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (allow == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                allow = <span class=\"string\">\"TRACE\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                allow = allow + <span class=\"string\">\", TRACE\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOW_OPTIONS) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (allow == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                allow = <span class=\"string\">\"OPTIONS\"</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                allow = allow + <span class=\"string\">\", OPTIONS\"</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        resp.setHeader(<span class=\"string\">\"Allow\"</span>, allow);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doTrace</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String CRLF = <span class=\"string\">\"\\r\\n\"</span>;</span><br><span class=\"line\">        String responseString = <span class=\"string\">\"TRACE \"</span> + req.getRequestURI() + <span class=\"string\">\" \"</span> + req.getProtocol();</span><br><span class=\"line\"></span><br><span class=\"line\">        String headerName;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Enumeration reqHeaderEnum = req.getHeaderNames(); reqHeaderEnum.hasMoreElements(); responseString = responseString + CRLF + headerName + <span class=\"string\">\": \"</span> + req.getHeader(headerName)) &#123;</span><br><span class=\"line\">            headerName = (String)reqHeaderEnum.nextElement();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        responseString = responseString + CRLF;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> responseLength = responseString.length();</span><br><span class=\"line\">        resp.setContentType(<span class=\"string\">\"message/http\"</span>);</span><br><span class=\"line\">        resp.setContentLength(responseLength);</span><br><span class=\"line\">        ServletOutputStream out = resp.getOutputStream();</span><br><span class=\"line\">        out.print(responseString);</span><br><span class=\"line\">        out.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String method = req.getMethod();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> lastModified;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"GET\"</span>)) &#123;</span><br><span class=\"line\">            lastModified = <span class=\"keyword\">this</span>.getLastModified(req);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lastModified == -<span class=\"number\">1L</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.doGet(req, resp);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> ifModifiedSince = req.getDateHeader(<span class=\"string\">\"If-Modified-Since\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ifModifiedSince &lt; lastModified / <span class=\"number\">1000L</span> * <span class=\"number\">1000L</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.maybeSetLastModified(resp, lastModified);</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.doGet(req, resp);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    resp.setStatus(<span class=\"number\">304</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"HEAD\"</span>)) &#123;</span><br><span class=\"line\">            lastModified = <span class=\"keyword\">this</span>.getLastModified(req);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.maybeSetLastModified(resp, lastModified);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.doHead(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"POST\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.doPost(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"PUT\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.doPut(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"DELETE\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.doDelete(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"OPTIONS\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.doOptions(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(<span class=\"string\">\"TRACE\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.doTrace(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            String errMsg = lStrings.getString(<span class=\"string\">\"http.method_not_implemented\"</span>);</span><br><span class=\"line\">            Object[] errArgs = <span class=\"keyword\">new</span> Object[]&#123;method&#125;;</span><br><span class=\"line\">            errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class=\"line\">            resp.sendError(<span class=\"number\">501</span>, errMsg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">maybeSetLastModified</span><span class=\"params\">(HttpServletResponse resp, <span class=\"keyword\">long</span> lastModified)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!resp.containsHeader(<span class=\"string\">\"Last-Modified\"</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lastModified &gt;= <span class=\"number\">0L</span>) &#123;</span><br><span class=\"line\">                resp.setDateHeader(<span class=\"string\">\"Last-Modified\"</span>, lastModified);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(ServletRequest req, ServletResponse res)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        HttpServletRequest request;</span><br><span class=\"line\">        HttpServletResponse response;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            request = (HttpServletRequest)req;</span><br><span class=\"line\">            response = (HttpServletResponse)res;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassCastException var6) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ServletException(<span class=\"string\">\"non-HTTP request or response\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.service(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Servlet示例\"><a href=\"#Servlet示例\" class=\"headerlink\" title=\"Servlet示例\"></a>Servlet示例</h2><p><strong><center>👇此处展示一段处理登录业务的Servlet代码👇</center></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.geyu.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.geyu.web.mapper.UserMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.geyu.web.pojo.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.io.Resources;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.PrintWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/loginServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServletDemo</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String username = req.getParameter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">        String password = req.getParameter(<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        String resource = <span class=\"string\">\"mybatis-config.xml\"</span>;</span><br><span class=\"line\">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class=\"line\">        SqlSessionFactory sqlSessionFactory = <span class=\"keyword\">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class=\"line\"></span><br><span class=\"line\">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class=\"line\"></span><br><span class=\"line\">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        User user = userMapper.select(username, password);</span><br><span class=\"line\"></span><br><span class=\"line\">        sqlSession.close();</span><br><span class=\"line\"></span><br><span class=\"line\">        resp.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);</span><br><span class=\"line\">        PrintWriter writer = resp.getWriter();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (user != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//登陆成功</span></span><br><span class=\"line\">            writer.write(<span class=\"string\">\"登陆成功\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//登陆失败</span></span><br><span class=\"line\">            writer.write(<span class=\"string\">\"登录失败\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>讲了这么多废话，总结来说Servlet就是一群人来制定Java应用中使用Web时的各种规范，统一接口，其他内部实现由厂商自己实现，tomcat jetty jboss等等应运而生。</p>\n<p>关于他如何工作的：一个http请求到来，容器将请求封装成Servlet中的request对象，在request中你可以得到所有的http信息，然后你可以取出来操作，最后你再把数据封装成Servlet的response对象，应用容器将respose对象解析之后封装成一个http response。</p>\n<p>Web服务器习惯处理静态页面，所以需要一个程序来帮忙处理动态请求(如当前时间)。Web服务器程序会将动态请求转发给帮助程序，帮助程序处理后，返回处理后的静态结果给Web服务器程序。这样就避免了Web服务器程序处理动态页面。</p>\n<h1 id=\"SpringMVC框架\"><a href=\"#SpringMVC框架\" class=\"headerlink\" title=\"SpringMVC框架\"></a>SpringMVC框架</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Spring MVC是一个基于Java的实现了MVC设计模式的请求驱动类型的轻量级Web框架，通过把Model，View，Controller分离，将web层进行职责解耦，把复杂的web应用分成逻辑清晰的几部分，简化开发，减少出错，方便组内开发人员之间的配合。</p>\n<h3 id=\"SpringMVC和Servlet的区别与联系\"><a href=\"#SpringMVC和Servlet的区别与联系\" class=\"headerlink\" title=\"SpringMVC和Servlet的区别与联系\"></a>SpringMVC和Servlet的区别与联系</h3><ul>\n<li><p>Servlet：性能最好，处理HTTP请求的标准和规范。</p>\n</li>\n<li><p>SpringMVC：开发效率高（好多共性的东西都封装好了，是对Servlet的封装，核心的DispatcherServlet最终继承自HttpServlet）</p>\n</li>\n</ul>\n<p>这两者的关系，就如同MyBatis和JDBC，一个性能好，一个开发效率高，是对另一个的封装。</p>\n<h3 id=\"Controller层示例\"><a href=\"#Controller层示例\" class=\"headerlink\" title=\"Controller层示例\"></a>Controller层示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/user\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    IUserService service;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/login.do\"</span>, method = &#123;RequestMethod.GET&#125;)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">login</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\">        User result = service.login(user);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/pages/success.html\"</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/pages/error.html\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<center>\n👀开发过程肉眼可见的简介♥\n</center>\n"},{"title":"代理模式","date":"2022-09-18T16:00:00.000Z","_content":"\n## 代理模式\n\n在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。\n在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。\n\n### 介绍\n\n- **意图**：为其他对象提供一种代理以控制对这个对象的访问。\n\n- **主要解决**：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。\n\n- **何时使用**：想在访问一个类时做一些控制。\n\n## 实现\n这里将创建一个 Image 接口和实现了 Image 接口的实体类。ProxyImage 是一个代理类，减少 RealImage 对象加载的内存占用。\n\nProxyPatternDemo 类使用 ProxyImage 来获取要加载的 Image 对象，并按照需求进行显示。\n\n![](https://s1.ax1x.com/2022/09/19/x9x6tf.jpg)\n\n### 步骤一：创建接口\n```java\n//Image.java\npublic interface Image {\n   void display();\n}\n```\n### 步骤二：创建实现类\n```java\n//RealImage.java\npublic class RealImage implements Image {\n \n   private String fileName;\n \n   public RealImage(String fileName){\n      this.fileName = fileName;\n      loadFromDisk(fileName);\n   }\n \n   @Override\n   public void display() {\n      System.out.println(\"Displaying \" + fileName);\n   }\n \n   private void loadFromDisk(String fileName){\n      System.out.println(\"Loading \" + fileName);\n   }\n}\n```\n```java\n//ProxyImage.java\npublic class ProxyImage implements Image{\n \n   private RealImage realImage;\n   private String fileName;\n \n   public ProxyImage(String fileName){\n      this.fileName = fileName;\n   }\n \n   @Override\n   public void display() {\n      if(realImage == null){\n         realImage = new RealImage(fileName);\n      }\n      realImage.display();\n   }\n}\n```\n### 步骤三： 测试类\n```java\n//Test.java\npublic class Test {\n   \n   public static void main(String[] args) {\n      Image image = new ProxyImage(\"test_10mb.jpg\");\n \n      // 图像将从磁盘加载\n      image.display(); \n      System.out.println(\"\");\n      // 图像不需要从磁盘加载\n      image.display();  \n   }\n}\n```\n","source":"_posts/代理模式.md","raw":"---\ntitle:  代理模式\ntags: [Java, 设计模式, 代理模式]\ncategories: [设计模式]\ndate: 2022-9-19\n\n---\n\n## 代理模式\n\n在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。\n在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。\n\n### 介绍\n\n- **意图**：为其他对象提供一种代理以控制对这个对象的访问。\n\n- **主要解决**：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。\n\n- **何时使用**：想在访问一个类时做一些控制。\n\n## 实现\n这里将创建一个 Image 接口和实现了 Image 接口的实体类。ProxyImage 是一个代理类，减少 RealImage 对象加载的内存占用。\n\nProxyPatternDemo 类使用 ProxyImage 来获取要加载的 Image 对象，并按照需求进行显示。\n\n![](https://s1.ax1x.com/2022/09/19/x9x6tf.jpg)\n\n### 步骤一：创建接口\n```java\n//Image.java\npublic interface Image {\n   void display();\n}\n```\n### 步骤二：创建实现类\n```java\n//RealImage.java\npublic class RealImage implements Image {\n \n   private String fileName;\n \n   public RealImage(String fileName){\n      this.fileName = fileName;\n      loadFromDisk(fileName);\n   }\n \n   @Override\n   public void display() {\n      System.out.println(\"Displaying \" + fileName);\n   }\n \n   private void loadFromDisk(String fileName){\n      System.out.println(\"Loading \" + fileName);\n   }\n}\n```\n```java\n//ProxyImage.java\npublic class ProxyImage implements Image{\n \n   private RealImage realImage;\n   private String fileName;\n \n   public ProxyImage(String fileName){\n      this.fileName = fileName;\n   }\n \n   @Override\n   public void display() {\n      if(realImage == null){\n         realImage = new RealImage(fileName);\n      }\n      realImage.display();\n   }\n}\n```\n### 步骤三： 测试类\n```java\n//Test.java\npublic class Test {\n   \n   public static void main(String[] args) {\n      Image image = new ProxyImage(\"test_10mb.jpg\");\n \n      // 图像将从磁盘加载\n      image.display(); \n      System.out.println(\"\");\n      // 图像不需要从磁盘加载\n      image.display();  \n   }\n}\n```\n","slug":"代理模式","published":1,"updated":"2022-09-19T13:45:07.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdm4008qa8vwfu6h2sko","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2><p>在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。<br>在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。</p>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><ul>\n<li><p><strong>意图</strong>：为其他对象提供一种代理以控制对这个对象的访问。</p>\n</li>\n<li><p><strong>主要解决</strong>：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。</p>\n</li>\n<li><p><strong>何时使用</strong>：想在访问一个类时做一些控制。</p>\n</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>这里将创建一个 Image 接口和实现了 Image 接口的实体类。ProxyImage 是一个代理类，减少 RealImage 对象加载的内存占用。</p>\n<p>ProxyPatternDemo 类使用 ProxyImage 来获取要加载的 Image 对象，并按照需求进行显示。</p>\n<p><img src=\"https://s1.ax1x.com/2022/09/19/x9x6tf.jpg\" alt></p>\n<h3 id=\"步骤一：创建接口\"><a href=\"#步骤一：创建接口\" class=\"headerlink\" title=\"步骤一：创建接口\"></a>步骤一：创建接口</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Image.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Image</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤二：创建实现类\"><a href=\"#步骤二：创建实现类\" class=\"headerlink\" title=\"步骤二：创建实现类\"></a>步骤二：创建实现类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//RealImage.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealImage</span> <span class=\"keyword\">implements</span> <span class=\"title\">Image</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">private</span> String fileName;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RealImage</span><span class=\"params\">(String fileName)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.fileName = fileName;</span><br><span class=\"line\">      loadFromDisk(fileName);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Displaying \"</span> + fileName);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">loadFromDisk</span><span class=\"params\">(String fileName)</span></span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Loading \"</span> + fileName);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ProxyImage.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyImage</span> <span class=\"keyword\">implements</span> <span class=\"title\">Image</span></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">private</span> RealImage realImage;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String fileName;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProxyImage</span><span class=\"params\">(String fileName)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.fileName = fileName;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(realImage == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">         realImage = <span class=\"keyword\">new</span> RealImage(fileName);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      realImage.display();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤三：-测试类\"><a href=\"#步骤三：-测试类\" class=\"headerlink\" title=\"步骤三： 测试类\"></a>步骤三： 测试类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Test.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      Image image = <span class=\"keyword\">new</span> ProxyImage(<span class=\"string\">\"test_10mb.jpg\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 图像将从磁盘加载</span></span><br><span class=\"line\">      image.display(); </span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 图像不需要从磁盘加载</span></span><br><span class=\"line\">      image.display();  </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2><p>在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。<br>在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。</p>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><ul>\n<li><p><strong>意图</strong>：为其他对象提供一种代理以控制对这个对象的访问。</p>\n</li>\n<li><p><strong>主要解决</strong>：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。</p>\n</li>\n<li><p><strong>何时使用</strong>：想在访问一个类时做一些控制。</p>\n</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>这里将创建一个 Image 接口和实现了 Image 接口的实体类。ProxyImage 是一个代理类，减少 RealImage 对象加载的内存占用。</p>\n<p>ProxyPatternDemo 类使用 ProxyImage 来获取要加载的 Image 对象，并按照需求进行显示。</p>\n<p><img src=\"https://s1.ax1x.com/2022/09/19/x9x6tf.jpg\" alt></p>\n<h3 id=\"步骤一：创建接口\"><a href=\"#步骤一：创建接口\" class=\"headerlink\" title=\"步骤一：创建接口\"></a>步骤一：创建接口</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Image.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Image</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤二：创建实现类\"><a href=\"#步骤二：创建实现类\" class=\"headerlink\" title=\"步骤二：创建实现类\"></a>步骤二：创建实现类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//RealImage.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RealImage</span> <span class=\"keyword\">implements</span> <span class=\"title\">Image</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">private</span> String fileName;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RealImage</span><span class=\"params\">(String fileName)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.fileName = fileName;</span><br><span class=\"line\">      loadFromDisk(fileName);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Displaying \"</span> + fileName);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">loadFromDisk</span><span class=\"params\">(String fileName)</span></span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"Loading \"</span> + fileName);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ProxyImage.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyImage</span> <span class=\"keyword\">implements</span> <span class=\"title\">Image</span></span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">private</span> RealImage realImage;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String fileName;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProxyImage</span><span class=\"params\">(String fileName)</span></span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.fileName = fileName;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">display</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(realImage == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">         realImage = <span class=\"keyword\">new</span> RealImage(fileName);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      realImage.display();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤三：-测试类\"><a href=\"#步骤三：-测试类\" class=\"headerlink\" title=\"步骤三： 测试类\"></a>步骤三： 测试类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Test.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">      Image image = <span class=\"keyword\">new</span> ProxyImage(<span class=\"string\">\"test_10mb.jpg\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 图像将从磁盘加载</span></span><br><span class=\"line\">      image.display(); </span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 图像不需要从磁盘加载</span></span><br><span class=\"line\">      image.display();  </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"关于ReLU的问题&思考","date":"2019-07-15T16:00:00.000Z","_content":"\n**今天看完🐟书后回头捋了一下，突然对ReLU激活函数产生了疑问。**\n## 引例\n**试想一下有X1，X2两个输入，对应三个输出的简易网络：**\n\n![eg net](https://s1.ax1x.com/2022/09/05/vTWizF.png \"markdown\")\n\n根据对应把权值W设为W11,W12,W13...W23\n**显然通过矩阵运算：**\n>Y1=W11·X1+W21·X2\n>Y2=W12·X1+W22·X2\n>Y3=W13·X1+W23·X2\n\n所得到的表达式依旧是X的**线性表达式**\n之后通过**ReLU层**（这里假设都>0）\n因为Y1，Y2，Y3＞0，故输出不变：\n>Y1=W11·X1+W21·X2\n>Y2=W12·X1+W22·X2\n>Y3=W13·X1+W23·X2\n\n## 问题提出\n我们知道引入激活函数的目的是为了**使层神经网络表达能力就更加强大（不再是输入的线性组合，而是几乎可以逼近任意函数，详见上篇Blog）**，而通过小实验发现，ReLU好像并没有改变原式的线性结构，反而是原式输出。那么是否有悖机器学习的原理呢？\n\n## 问题解决\n首先肯定一点：**上面的实验确实反映了ReLU没有改变实验对象的线性结构。**\n### 下面细说：\n首先观察实验，实验的基础是Y1,Y2,Y3＞0这个条件，在这个条件下显然是等价于恒等函数的。也就是说Y被原样加工。因为原来的表达式是线性结构，所以激活之后依旧是线性结构。但是，这并不能说明ReLU对增强神经网络的表现力无用。\n\n事实是，参与训练的数据首先不止2个（参考MNIST数据集，训练输入就6万个），其次对权值w的初始化是按标准差为0.01的高斯分布来进行的，**这就肯定输入ReLU层的数据不恒正**！\n![高斯分布](https://s1.ax1x.com/2022/09/05/vTWkM4.png \"Pandao editor.md\")\n而小于0的则被赋值0，这意味着什么呢？**线性结构被破坏！**\n\n用**矛盾推理法**来想一下这个问题（假设ReLU不改变线性结构）：\n- 那么应改满足F(X)=M·X（矩阵乘法）——>ReLU ——>M·X——>G(F(X))=N·M·X——>ReLU ——>N·M·X...\n- 可事实是：权值的正态性不保证每次输入都是正值，所以中间会出现等于0的情况\n- 也就是F(X)=M·X（矩阵乘法）——>**ReLU ——>0——>G(0）！=N·M·X**——>...\n- 显然线性传递被中断\n- 或者说形成了一个新的线性空间，新空间与恒等线性空间互相无法表示，使整个空间呈非线性结构\n","source":"_posts/关于ReLU的问题及思考.md","raw":"---\ntitle: 关于ReLU的问题&思考\ntags: [神经网络,激活函数,代数系统]\ndate: 2019-7-16\ncategories: [机器学习]\n---\n\n**今天看完🐟书后回头捋了一下，突然对ReLU激活函数产生了疑问。**\n## 引例\n**试想一下有X1，X2两个输入，对应三个输出的简易网络：**\n\n![eg net](https://s1.ax1x.com/2022/09/05/vTWizF.png \"markdown\")\n\n根据对应把权值W设为W11,W12,W13...W23\n**显然通过矩阵运算：**\n>Y1=W11·X1+W21·X2\n>Y2=W12·X1+W22·X2\n>Y3=W13·X1+W23·X2\n\n所得到的表达式依旧是X的**线性表达式**\n之后通过**ReLU层**（这里假设都>0）\n因为Y1，Y2，Y3＞0，故输出不变：\n>Y1=W11·X1+W21·X2\n>Y2=W12·X1+W22·X2\n>Y3=W13·X1+W23·X2\n\n## 问题提出\n我们知道引入激活函数的目的是为了**使层神经网络表达能力就更加强大（不再是输入的线性组合，而是几乎可以逼近任意函数，详见上篇Blog）**，而通过小实验发现，ReLU好像并没有改变原式的线性结构，反而是原式输出。那么是否有悖机器学习的原理呢？\n\n## 问题解决\n首先肯定一点：**上面的实验确实反映了ReLU没有改变实验对象的线性结构。**\n### 下面细说：\n首先观察实验，实验的基础是Y1,Y2,Y3＞0这个条件，在这个条件下显然是等价于恒等函数的。也就是说Y被原样加工。因为原来的表达式是线性结构，所以激活之后依旧是线性结构。但是，这并不能说明ReLU对增强神经网络的表现力无用。\n\n事实是，参与训练的数据首先不止2个（参考MNIST数据集，训练输入就6万个），其次对权值w的初始化是按标准差为0.01的高斯分布来进行的，**这就肯定输入ReLU层的数据不恒正**！\n![高斯分布](https://s1.ax1x.com/2022/09/05/vTWkM4.png \"Pandao editor.md\")\n而小于0的则被赋值0，这意味着什么呢？**线性结构被破坏！**\n\n用**矛盾推理法**来想一下这个问题（假设ReLU不改变线性结构）：\n- 那么应改满足F(X)=M·X（矩阵乘法）——>ReLU ——>M·X——>G(F(X))=N·M·X——>ReLU ——>N·M·X...\n- 可事实是：权值的正态性不保证每次输入都是正值，所以中间会出现等于0的情况\n- 也就是F(X)=M·X（矩阵乘法）——>**ReLU ——>0——>G(0）！=N·M·X**——>...\n- 显然线性传递被中断\n- 或者说形成了一个新的线性空间，新空间与恒等线性空间互相无法表示，使整个空间呈非线性结构\n","slug":"关于ReLU的问题及思考","published":1,"updated":"2022-09-05T06:14:09.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdm6008ta8vwkf1srdc2","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p><strong>今天看完🐟书后回头捋了一下，突然对ReLU激活函数产生了疑问。</strong></p>\n<h2 id=\"引例\"><a href=\"#引例\" class=\"headerlink\" title=\"引例\"></a>引例</h2><p><strong>试想一下有X1，X2两个输入，对应三个输出的简易网络：</strong></p>\n<p><img src=\"https://s1.ax1x.com/2022/09/05/vTWizF.png\" alt=\"eg net\" title=\"markdown\"></p>\n<p>根据对应把权值W设为W11,W12,W13…W23<br><strong>显然通过矩阵运算：</strong></p>\n<blockquote>\n<p>Y1=W11·X1+W21·X2<br>Y2=W12·X1+W22·X2<br>Y3=W13·X1+W23·X2</p>\n</blockquote>\n<p>所得到的表达式依旧是X的<strong>线性表达式</strong><br>之后通过<strong>ReLU层</strong>（这里假设都&gt;0）<br>因为Y1，Y2，Y3＞0，故输出不变：</p>\n<blockquote>\n<p>Y1=W11·X1+W21·X2<br>Y2=W12·X1+W22·X2<br>Y3=W13·X1+W23·X2</p>\n</blockquote>\n<h2 id=\"问题提出\"><a href=\"#问题提出\" class=\"headerlink\" title=\"问题提出\"></a>问题提出</h2><p>我们知道引入激活函数的目的是为了<strong>使层神经网络表达能力就更加强大（不再是输入的线性组合，而是几乎可以逼近任意函数，详见上篇Blog）</strong>，而通过小实验发现，ReLU好像并没有改变原式的线性结构，反而是原式输出。那么是否有悖机器学习的原理呢？</p>\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><p>首先肯定一点：<strong>上面的实验确实反映了ReLU没有改变实验对象的线性结构。</strong></p>\n<h3 id=\"下面细说：\"><a href=\"#下面细说：\" class=\"headerlink\" title=\"下面细说：\"></a>下面细说：</h3><p>首先观察实验，实验的基础是Y1,Y2,Y3＞0这个条件，在这个条件下显然是等价于恒等函数的。也就是说Y被原样加工。因为原来的表达式是线性结构，所以激活之后依旧是线性结构。但是，这并不能说明ReLU对增强神经网络的表现力无用。</p>\n<p>事实是，参与训练的数据首先不止2个（参考MNIST数据集，训练输入就6万个），其次对权值w的初始化是按标准差为0.01的高斯分布来进行的，<strong>这就肯定输入ReLU层的数据不恒正</strong>！<br><img src=\"https://s1.ax1x.com/2022/09/05/vTWkM4.png\" alt=\"高斯分布\" title=\"Pandao editor.md\"><br>而小于0的则被赋值0，这意味着什么呢？<strong>线性结构被破坏！</strong></p>\n<p>用<strong>矛盾推理法</strong>来想一下这个问题（假设ReLU不改变线性结构）：</p>\n<ul>\n<li>那么应改满足F(X)=M·X（矩阵乘法）——&gt;ReLU ——&gt;M·X——&gt;G(F(X))=N·M·X——&gt;ReLU ——&gt;N·M·X…</li>\n<li>可事实是：权值的正态性不保证每次输入都是正值，所以中间会出现等于0的情况</li>\n<li>也就是F(X)=M·X（矩阵乘法）——&gt;<strong>ReLU ——&gt;0——&gt;G(0）！=N·M·X</strong>——&gt;…</li>\n<li>显然线性传递被中断</li>\n<li>或者说形成了一个新的线性空间，新空间与恒等线性空间互相无法表示，使整个空间呈非线性结构</li>\n</ul>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<p><strong>今天看完🐟书后回头捋了一下，突然对ReLU激活函数产生了疑问。</strong></p>\n<h2 id=\"引例\"><a href=\"#引例\" class=\"headerlink\" title=\"引例\"></a>引例</h2><p><strong>试想一下有X1，X2两个输入，对应三个输出的简易网络：</strong></p>\n<p><img src=\"https://s1.ax1x.com/2022/09/05/vTWizF.png\" alt=\"eg net\" title=\"markdown\"></p>\n<p>根据对应把权值W设为W11,W12,W13…W23<br><strong>显然通过矩阵运算：</strong></p>\n<blockquote>\n<p>Y1=W11·X1+W21·X2<br>Y2=W12·X1+W22·X2<br>Y3=W13·X1+W23·X2</p>\n</blockquote>\n<p>所得到的表达式依旧是X的<strong>线性表达式</strong><br>之后通过<strong>ReLU层</strong>（这里假设都&gt;0）<br>因为Y1，Y2，Y3＞0，故输出不变：</p>\n<blockquote>\n<p>Y1=W11·X1+W21·X2<br>Y2=W12·X1+W22·X2<br>Y3=W13·X1+W23·X2</p>\n</blockquote>\n<h2 id=\"问题提出\"><a href=\"#问题提出\" class=\"headerlink\" title=\"问题提出\"></a>问题提出</h2><p>我们知道引入激活函数的目的是为了<strong>使层神经网络表达能力就更加强大（不再是输入的线性组合，而是几乎可以逼近任意函数，详见上篇Blog）</strong>，而通过小实验发现，ReLU好像并没有改变原式的线性结构，反而是原式输出。那么是否有悖机器学习的原理呢？</p>\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><p>首先肯定一点：<strong>上面的实验确实反映了ReLU没有改变实验对象的线性结构。</strong></p>\n<h3 id=\"下面细说：\"><a href=\"#下面细说：\" class=\"headerlink\" title=\"下面细说：\"></a>下面细说：</h3><p>首先观察实验，实验的基础是Y1,Y2,Y3＞0这个条件，在这个条件下显然是等价于恒等函数的。也就是说Y被原样加工。因为原来的表达式是线性结构，所以激活之后依旧是线性结构。但是，这并不能说明ReLU对增强神经网络的表现力无用。</p>\n<p>事实是，参与训练的数据首先不止2个（参考MNIST数据集，训练输入就6万个），其次对权值w的初始化是按标准差为0.01的高斯分布来进行的，<strong>这就肯定输入ReLU层的数据不恒正</strong>！<br><img src=\"https://s1.ax1x.com/2022/09/05/vTWkM4.png\" alt=\"高斯分布\" title=\"Pandao editor.md\"><br>而小于0的则被赋值0，这意味着什么呢？<strong>线性结构被破坏！</strong></p>\n<p>用<strong>矛盾推理法</strong>来想一下这个问题（假设ReLU不改变线性结构）：</p>\n<ul>\n<li>那么应改满足F(X)=M·X（矩阵乘法）——&gt;ReLU ——&gt;M·X——&gt;G(F(X))=N·M·X——&gt;ReLU ——&gt;N·M·X…</li>\n<li>可事实是：权值的正态性不保证每次输入都是正值，所以中间会出现等于0的情况</li>\n<li>也就是F(X)=M·X（矩阵乘法）——&gt;<strong>ReLU ——&gt;0——&gt;G(0）！=N·M·X</strong>——&gt;…</li>\n<li>显然线性传递被中断</li>\n<li>或者说形成了一个新的线性空间，新空间与恒等线性空间互相无法表示，使整个空间呈非线性结构</li>\n</ul>\n"},{"title":"感知机初识","date":"2018-08-09T16:00:00.000Z","_content":"\n# 感知机（perceptron)\n感知机是神经网络（深度学习）的起源算法，学习感知机的构造是通向神经网络和深度学习的一种重要思想。\n>严格讲，应该称为“人工神经元”或“朴素感知机”，但是因为很多基本的处理都是共通的，所以这里就简单地称为“感知机”。\n\n## 原理简介：\n感知机接收多个输入信号，输出一个信号。\n这里所说的“信号”可以想 象成电流或河流那样具备“**流动性**”的东西。\n像电流流过导线，向前方输送 电子一样，感知机的信号也会形成流，向前方输送信息。\n但是，和实际的电 流不同的是，感知机的信号只有**“流/不流”（1/0）**两种取值。\n0 对应“不传递信号”，1对应“传递信号”。\n\n![net](http://r.photo.store.qq.com/psb?/V14eJTFY137vJk/Jb9LnAgcqtwC7udEtAvxtUYaeAQmdphrXHM8w98K9MQ!/r/dIoBAAAAAAAA \"markdown\")\n\n**如图**\n- x<sub>1</sub> 、x<sub>2</sub>是输入信号，\n- y 是输出信号，\n- w<sub>1</sub>、w<sub>2</sub>是权重 （w 是 weight 的首字母）。\n- 图中的○称为“神经元”或者“节点”。\n- 输入信号被送往神经元时，会被分别乘以固定的权重（w<sub>1</sub> x<sub>1</sub> , w<sub>2</sub> x<sub>2</sub> ）。\n- 神经元会计算传送过来的信号的总和，只有当这个总和超过 了某个界限值时，才会输出1（这也称为“神经元被激活）。\n- 这里将这个界限值称为阈值，用符号θ表示。\n\n感知机的多个输入信号都有各自固有的权重，这些权重发挥着控制各个 信号的重要性的作用。也就是说，权重越大，对应该权重的信号的重要性就越高。\n权重：相当于电流里的电阻。电阻是决定电流流动难度的参数， 电阻越低，通过的电流就越大。\n而感知机的权重则是值越大，通过的信号就越大。\n不管是电阻还是权重，在控制信号流动难度（或者流 动容易度）这一点上的作用都是一样的。","source":"_posts/感知机初识.md","raw":"---\ntitle: 感知机初识\ntags: [感知机]\n\ncategories: [机器学习]\n\ndate: 2018-8-10\n---\n\n# 感知机（perceptron)\n感知机是神经网络（深度学习）的起源算法，学习感知机的构造是通向神经网络和深度学习的一种重要思想。\n>严格讲，应该称为“人工神经元”或“朴素感知机”，但是因为很多基本的处理都是共通的，所以这里就简单地称为“感知机”。\n\n## 原理简介：\n感知机接收多个输入信号，输出一个信号。\n这里所说的“信号”可以想 象成电流或河流那样具备“**流动性**”的东西。\n像电流流过导线，向前方输送 电子一样，感知机的信号也会形成流，向前方输送信息。\n但是，和实际的电 流不同的是，感知机的信号只有**“流/不流”（1/0）**两种取值。\n0 对应“不传递信号”，1对应“传递信号”。\n\n![net](http://r.photo.store.qq.com/psb?/V14eJTFY137vJk/Jb9LnAgcqtwC7udEtAvxtUYaeAQmdphrXHM8w98K9MQ!/r/dIoBAAAAAAAA \"markdown\")\n\n**如图**\n- x<sub>1</sub> 、x<sub>2</sub>是输入信号，\n- y 是输出信号，\n- w<sub>1</sub>、w<sub>2</sub>是权重 （w 是 weight 的首字母）。\n- 图中的○称为“神经元”或者“节点”。\n- 输入信号被送往神经元时，会被分别乘以固定的权重（w<sub>1</sub> x<sub>1</sub> , w<sub>2</sub> x<sub>2</sub> ）。\n- 神经元会计算传送过来的信号的总和，只有当这个总和超过 了某个界限值时，才会输出1（这也称为“神经元被激活）。\n- 这里将这个界限值称为阈值，用符号θ表示。\n\n感知机的多个输入信号都有各自固有的权重，这些权重发挥着控制各个 信号的重要性的作用。也就是说，权重越大，对应该权重的信号的重要性就越高。\n权重：相当于电流里的电阻。电阻是决定电流流动难度的参数， 电阻越低，通过的电流就越大。\n而感知机的权重则是值越大，通过的信号就越大。\n不管是电阻还是权重，在控制信号流动难度（或者流 动容易度）这一点上的作用都是一样的。","slug":"感知机初识","published":1,"updated":"2022-09-05T06:19:22.645Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdm8008xa8vwwxbqkqir","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"感知机（perceptron\"><a href=\"#感知机（perceptron\" class=\"headerlink\" title=\"感知机（perceptron)\"></a>感知机（perceptron)</h1><p>感知机是神经网络（深度学习）的起源算法，学习感知机的构造是通向神经网络和深度学习的一种重要思想。</p>\n<blockquote>\n<p>严格讲，应该称为“人工神经元”或“朴素感知机”，但是因为很多基本的处理都是共通的，所以这里就简单地称为“感知机”。</p>\n</blockquote>\n<h2 id=\"原理简介：\"><a href=\"#原理简介：\" class=\"headerlink\" title=\"原理简介：\"></a>原理简介：</h2><p>感知机接收多个输入信号，输出一个信号。<br>这里所说的“信号”可以想 象成电流或河流那样具备“<strong>流动性</strong>”的东西。<br>像电流流过导线，向前方输送 电子一样，感知机的信号也会形成流，向前方输送信息。<br>但是，和实际的电 流不同的是，感知机的信号只有<strong>“流/不流”（1/0）</strong>两种取值。<br>0 对应“不传递信号”，1对应“传递信号”。</p>\n<p><img src=\"http://r.photo.store.qq.com/psb?/V14eJTFY137vJk/Jb9LnAgcqtwC7udEtAvxtUYaeAQmdphrXHM8w98K9MQ!/r/dIoBAAAAAAAA\" alt=\"net\" title=\"markdown\"></p>\n<p><strong>如图</strong></p>\n<ul>\n<li>x<sub>1</sub> 、x<sub>2</sub>是输入信号，</li>\n<li>y 是输出信号，</li>\n<li>w<sub>1</sub>、w<sub>2</sub>是权重 （w 是 weight 的首字母）。</li>\n<li>图中的○称为“神经元”或者“节点”。</li>\n<li>输入信号被送往神经元时，会被分别乘以固定的权重（w<sub>1</sub> x<sub>1</sub> , w<sub>2</sub> x<sub>2</sub> ）。</li>\n<li>神经元会计算传送过来的信号的总和，只有当这个总和超过 了某个界限值时，才会输出1（这也称为“神经元被激活）。</li>\n<li>这里将这个界限值称为阈值，用符号θ表示。</li>\n</ul>\n<p>感知机的多个输入信号都有各自固有的权重，这些权重发挥着控制各个 信号的重要性的作用。也就是说，权重越大，对应该权重的信号的重要性就越高。<br>权重：相当于电流里的电阻。电阻是决定电流流动难度的参数， 电阻越低，通过的电流就越大。<br>而感知机的权重则是值越大，通过的信号就越大。<br>不管是电阻还是权重，在控制信号流动难度（或者流 动容易度）这一点上的作用都是一样的。</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"感知机（perceptron\"><a href=\"#感知机（perceptron\" class=\"headerlink\" title=\"感知机（perceptron)\"></a>感知机（perceptron)</h1><p>感知机是神经网络（深度学习）的起源算法，学习感知机的构造是通向神经网络和深度学习的一种重要思想。</p>\n<blockquote>\n<p>严格讲，应该称为“人工神经元”或“朴素感知机”，但是因为很多基本的处理都是共通的，所以这里就简单地称为“感知机”。</p>\n</blockquote>\n<h2 id=\"原理简介：\"><a href=\"#原理简介：\" class=\"headerlink\" title=\"原理简介：\"></a>原理简介：</h2><p>感知机接收多个输入信号，输出一个信号。<br>这里所说的“信号”可以想 象成电流或河流那样具备“<strong>流动性</strong>”的东西。<br>像电流流过导线，向前方输送 电子一样，感知机的信号也会形成流，向前方输送信息。<br>但是，和实际的电 流不同的是，感知机的信号只有<strong>“流/不流”（1/0）</strong>两种取值。<br>0 对应“不传递信号”，1对应“传递信号”。</p>\n<p><img src=\"http://r.photo.store.qq.com/psb?/V14eJTFY137vJk/Jb9LnAgcqtwC7udEtAvxtUYaeAQmdphrXHM8w98K9MQ!/r/dIoBAAAAAAAA\" alt=\"net\" title=\"markdown\"></p>\n<p><strong>如图</strong></p>\n<ul>\n<li>x<sub>1</sub> 、x<sub>2</sub>是输入信号，</li>\n<li>y 是输出信号，</li>\n<li>w<sub>1</sub>、w<sub>2</sub>是权重 （w 是 weight 的首字母）。</li>\n<li>图中的○称为“神经元”或者“节点”。</li>\n<li>输入信号被送往神经元时，会被分别乘以固定的权重（w<sub>1</sub> x<sub>1</sub> , w<sub>2</sub> x<sub>2</sub> ）。</li>\n<li>神经元会计算传送过来的信号的总和，只有当这个总和超过 了某个界限值时，才会输出1（这也称为“神经元被激活）。</li>\n<li>这里将这个界限值称为阈值，用符号θ表示。</li>\n</ul>\n<p>感知机的多个输入信号都有各自固有的权重，这些权重发挥着控制各个 信号的重要性的作用。也就是说，权重越大，对应该权重的信号的重要性就越高。<br>权重：相当于电流里的电阻。电阻是决定电流流动难度的参数， 电阻越低，通过的电流就越大。<br>而感知机的权重则是值越大，通过的信号就越大。<br>不管是电阻还是权重，在控制信号流动难度（或者流 动容易度）这一点上的作用都是一样的。</p>\n"},{"title":"正向代理与反向代理","date":"2022-11-07T16:00:00.000Z","_content":"\n[![xxKjxS.jpg](https://s1.ax1x.com/2022/11/08/xxKjxS.jpg)](https://imgse.com/i/xxKjxS)","source":"_posts/正向代理与反向代理.md","raw":"---\ntitle:  正向代理与反向代理\ntags: [编程,学习,后端,Web服务器]\ncategories: [后端]\ndate: 2022-11-8\n\n---\n\n[![xxKjxS.jpg](https://s1.ax1x.com/2022/11/08/xxKjxS.jpg)](https://imgse.com/i/xxKjxS)","slug":"正向代理与反向代理","published":1,"updated":"2022-11-08T03:28:36.505Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdm90090a8vwv2w2cglv","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p><a href=\"https://imgse.com/i/xxKjxS\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2022/11/08/xxKjxS.jpg\" alt=\"xxKjxS.jpg\"></a></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<p><a href=\"https://imgse.com/i/xxKjxS\" target=\"_blank\" rel=\"noopener\"><img src=\"https://s1.ax1x.com/2022/11/08/xxKjxS.jpg\" alt=\"xxKjxS.jpg\"></a></p>\n"},{"title":"关于激活函数的理解","date":"2018-08-18T16:00:00.000Z","_content":"\n# 什么是激活函数：\n\n下午学完了神经网络误差的反向传播，心满意足看着满屏幕刚撸出来的Affine,Sigmoid,ReLU,Softmax......突然,心里发出一声疑问：**激活函数有什么用？？？**我慌了，我说不上来，但是隐隐约约能知道这玩意是干嘛的，本着一贯~~刨根问底跑个稀烂~~的作风,我决定彻底搞清楚！\n\n## 引例\n首先回到机器学习最初始的那个地方-----**逻辑门（感知机表示）**\n```python\n#与门感知机\n\ndef AND(x1,x2):\n    w1,w2,theta=0.5,0.5,0.7\n    tmp=x1*w1+x2*w2\n    if tmp<=theta:\n        return 0\n    elif tmp>theta:\n        return 1\n    \n#Test\nAND(0,0)  #输出0\nAND(1,0)  #输出0\nAND(0,1)  #输出0\nAND(1,1)  #输出1\n```\n```python\n#或门感知机\n\ndef OR(x1,x2):\n    w1,w2,theta=0.5,0.5,0.2\n    tmp=x1*w1+x2*w2\n    if tmp<=theta:\n        return 0\n    elif tmp>theta:\n        return 1\n    \n#Test\nOR(0,0)  #输出0\nOR(1,0)  #输出1\nOR(0,1)  #输出1\nOR(1,1)  #输出1\n```\n```python\n#与非门感知机\n\ndef NAND(x1,x2):\n    w1,w2,theta=0.5,0.5,0.7\n    tmp=x1*w1+x2*w2\n    if tmp<=theta:\n        return 1\n    elif tmp>theta:\n        return 0\n\n#Test\nXOR(0,0)  #输出1\nXOR(1,0)  #输出1\nXOR(0,1)  #输出1\nXOR(1,1)  #输出0\n```\n毫无技术含量，所以这里就不细讲代码。\n\n**接下来看看如何表示异或门：**\n```python\ndef XOR(x1,x2):\n    s1=NAND(x1,x2)\n    s2=OR(x1,x2)\n    y=AND(s1,s2)\n    return y\n\nXOR(0,0)   #输出0\nXOR(1,0)   #输出1\nXOR(0,1)   #输出1\nXOR(1,1)   #输出0\n```\n显然异或门的实现借助了另外三个门！\n下面从**几何角度**上看看异或门：\n![异或门区域](https://s1.ax1x.com/2022/09/05/vTW3sH.png \"markdown\")\n**显然：异或门划分的空间是非线性的！而另外三个门划分都是线性的！**\n\n现在再回头思考，发现通过对简单门的叠加，实现了非线性划分空间的复杂门！\n\n## 回到神经网络中\n\n神经网络中，我们知道，隐藏层中主要是Affine层和各种激活函数层：\n![net](https://s1.ax1x.com/2022/09/05/vTW8Ld.png \"markdown\")\n现在假设把激活函数都删掉，也就是说经过一层仿射变换后不加处理继续下一层仿射变换。\n>比如：x->w·x=y->w'·y=z...（矩阵点乘）\n\n这样会有什么问题呢？很显然。\n>注意： x->w·x=y->w'·y=z就相当于z=cx,其中c=w·w'\n\n这说明**两层仿射变换后的表达式结构还是线性的！！**同理n层之后还是线性！这简直是无用功！要记住，神经网络那么多层的目的是尽可能学习如何逼近数据，如果数据是非线性结构排布的，那叠加再多也毫无卵用！\n所以现在再来看看这个问题：**为什么需要激活函数？**\n## 总结一下：\n如果不用激励函数（其实相当于激励函数是f(x) = x），在这种情况下你每一层节点的输入都是上层输出的线性函数，很容易验证，**无论你神经网络有多少层，输出都是输入的线性组合**，与没有隐藏层效果相当，这种情况就是最原始的感知机（Perceptron）了，那么网络的逼近能力就相当有限。正因为上面的原因，我们决定引入非线性函数作为激励函数，这样深层神经网络表达能力就更加强大（不再是输入的线性组合，而是**几乎可以逼近任意函数**）","source":"_posts/激活函数（一）.md","raw":"---\ntitle:  关于激活函数的理解\ntags: [神经网络,激活函数]\n\ncategories: [机器学习]\ndate: 2018-8-19\n---\n\n# 什么是激活函数：\n\n下午学完了神经网络误差的反向传播，心满意足看着满屏幕刚撸出来的Affine,Sigmoid,ReLU,Softmax......突然,心里发出一声疑问：**激活函数有什么用？？？**我慌了，我说不上来，但是隐隐约约能知道这玩意是干嘛的，本着一贯~~刨根问底跑个稀烂~~的作风,我决定彻底搞清楚！\n\n## 引例\n首先回到机器学习最初始的那个地方-----**逻辑门（感知机表示）**\n```python\n#与门感知机\n\ndef AND(x1,x2):\n    w1,w2,theta=0.5,0.5,0.7\n    tmp=x1*w1+x2*w2\n    if tmp<=theta:\n        return 0\n    elif tmp>theta:\n        return 1\n    \n#Test\nAND(0,0)  #输出0\nAND(1,0)  #输出0\nAND(0,1)  #输出0\nAND(1,1)  #输出1\n```\n```python\n#或门感知机\n\ndef OR(x1,x2):\n    w1,w2,theta=0.5,0.5,0.2\n    tmp=x1*w1+x2*w2\n    if tmp<=theta:\n        return 0\n    elif tmp>theta:\n        return 1\n    \n#Test\nOR(0,0)  #输出0\nOR(1,0)  #输出1\nOR(0,1)  #输出1\nOR(1,1)  #输出1\n```\n```python\n#与非门感知机\n\ndef NAND(x1,x2):\n    w1,w2,theta=0.5,0.5,0.7\n    tmp=x1*w1+x2*w2\n    if tmp<=theta:\n        return 1\n    elif tmp>theta:\n        return 0\n\n#Test\nXOR(0,0)  #输出1\nXOR(1,0)  #输出1\nXOR(0,1)  #输出1\nXOR(1,1)  #输出0\n```\n毫无技术含量，所以这里就不细讲代码。\n\n**接下来看看如何表示异或门：**\n```python\ndef XOR(x1,x2):\n    s1=NAND(x1,x2)\n    s2=OR(x1,x2)\n    y=AND(s1,s2)\n    return y\n\nXOR(0,0)   #输出0\nXOR(1,0)   #输出1\nXOR(0,1)   #输出1\nXOR(1,1)   #输出0\n```\n显然异或门的实现借助了另外三个门！\n下面从**几何角度**上看看异或门：\n![异或门区域](https://s1.ax1x.com/2022/09/05/vTW3sH.png \"markdown\")\n**显然：异或门划分的空间是非线性的！而另外三个门划分都是线性的！**\n\n现在再回头思考，发现通过对简单门的叠加，实现了非线性划分空间的复杂门！\n\n## 回到神经网络中\n\n神经网络中，我们知道，隐藏层中主要是Affine层和各种激活函数层：\n![net](https://s1.ax1x.com/2022/09/05/vTW8Ld.png \"markdown\")\n现在假设把激活函数都删掉，也就是说经过一层仿射变换后不加处理继续下一层仿射变换。\n>比如：x->w·x=y->w'·y=z...（矩阵点乘）\n\n这样会有什么问题呢？很显然。\n>注意： x->w·x=y->w'·y=z就相当于z=cx,其中c=w·w'\n\n这说明**两层仿射变换后的表达式结构还是线性的！！**同理n层之后还是线性！这简直是无用功！要记住，神经网络那么多层的目的是尽可能学习如何逼近数据，如果数据是非线性结构排布的，那叠加再多也毫无卵用！\n所以现在再来看看这个问题：**为什么需要激活函数？**\n## 总结一下：\n如果不用激励函数（其实相当于激励函数是f(x) = x），在这种情况下你每一层节点的输入都是上层输出的线性函数，很容易验证，**无论你神经网络有多少层，输出都是输入的线性组合**，与没有隐藏层效果相当，这种情况就是最原始的感知机（Perceptron）了，那么网络的逼近能力就相当有限。正因为上面的原因，我们决定引入非线性函数作为激励函数，这样深层神经网络表达能力就更加强大（不再是输入的线性组合，而是**几乎可以逼近任意函数**）","slug":"激活函数（一）","published":1,"updated":"2022-09-05T06:17:04.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdma0093a8vwahwnnsr9","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"什么是激活函数：\"><a href=\"#什么是激活函数：\" class=\"headerlink\" title=\"什么是激活函数：\"></a>什么是激活函数：</h1><p>下午学完了神经网络误差的反向传播，心满意足看着满屏幕刚撸出来的Affine,Sigmoid,ReLU,Softmax……突然,心里发出一声疑问：<strong>激活函数有什么用？？？</strong>我慌了，我说不上来，但是隐隐约约能知道这玩意是干嘛的，本着一贯<del>刨根问底跑个稀烂</del>的作风,我决定彻底搞清楚！</p>\n<h2 id=\"引例\"><a href=\"#引例\" class=\"headerlink\" title=\"引例\"></a>引例</h2><p>首先回到机器学习最初始的那个地方—–<strong>逻辑门（感知机表示）</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#与门感知机</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">AND</span><span class=\"params\">(x1,x2)</span>:</span></span><br><span class=\"line\">    w1,w2,theta=<span class=\"number\">0.5</span>,<span class=\"number\">0.5</span>,<span class=\"number\">0.7</span></span><br><span class=\"line\">    tmp=x1*w1+x2*w2</span><br><span class=\"line\">    <span class=\"keyword\">if</span> tmp&lt;=theta:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> tmp&gt;theta:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">#Test</span></span><br><span class=\"line\">AND(<span class=\"number\">0</span>,<span class=\"number\">0</span>)  <span class=\"comment\">#输出0</span></span><br><span class=\"line\">AND(<span class=\"number\">1</span>,<span class=\"number\">0</span>)  <span class=\"comment\">#输出0</span></span><br><span class=\"line\">AND(<span class=\"number\">0</span>,<span class=\"number\">1</span>)  <span class=\"comment\">#输出0</span></span><br><span class=\"line\">AND(<span class=\"number\">1</span>,<span class=\"number\">1</span>)  <span class=\"comment\">#输出1</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#或门感知机</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">OR</span><span class=\"params\">(x1,x2)</span>:</span></span><br><span class=\"line\">    w1,w2,theta=<span class=\"number\">0.5</span>,<span class=\"number\">0.5</span>,<span class=\"number\">0.2</span></span><br><span class=\"line\">    tmp=x1*w1+x2*w2</span><br><span class=\"line\">    <span class=\"keyword\">if</span> tmp&lt;=theta:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> tmp&gt;theta:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">#Test</span></span><br><span class=\"line\">OR(<span class=\"number\">0</span>,<span class=\"number\">0</span>)  <span class=\"comment\">#输出0</span></span><br><span class=\"line\">OR(<span class=\"number\">1</span>,<span class=\"number\">0</span>)  <span class=\"comment\">#输出1</span></span><br><span class=\"line\">OR(<span class=\"number\">0</span>,<span class=\"number\">1</span>)  <span class=\"comment\">#输出1</span></span><br><span class=\"line\">OR(<span class=\"number\">1</span>,<span class=\"number\">1</span>)  <span class=\"comment\">#输出1</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#与非门感知机</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">NAND</span><span class=\"params\">(x1,x2)</span>:</span></span><br><span class=\"line\">    w1,w2,theta=<span class=\"number\">0.5</span>,<span class=\"number\">0.5</span>,<span class=\"number\">0.7</span></span><br><span class=\"line\">    tmp=x1*w1+x2*w2</span><br><span class=\"line\">    <span class=\"keyword\">if</span> tmp&lt;=theta:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> tmp&gt;theta:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Test</span></span><br><span class=\"line\">XOR(<span class=\"number\">0</span>,<span class=\"number\">0</span>)  <span class=\"comment\">#输出1</span></span><br><span class=\"line\">XOR(<span class=\"number\">1</span>,<span class=\"number\">0</span>)  <span class=\"comment\">#输出1</span></span><br><span class=\"line\">XOR(<span class=\"number\">0</span>,<span class=\"number\">1</span>)  <span class=\"comment\">#输出1</span></span><br><span class=\"line\">XOR(<span class=\"number\">1</span>,<span class=\"number\">1</span>)  <span class=\"comment\">#输出0</span></span><br></pre></td></tr></table></figure>\n\n<p>毫无技术含量，所以这里就不细讲代码。</p>\n<p><strong>接下来看看如何表示异或门：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">XOR</span><span class=\"params\">(x1,x2)</span>:</span></span><br><span class=\"line\">    s1=NAND(x1,x2)</span><br><span class=\"line\">    s2=OR(x1,x2)</span><br><span class=\"line\">    y=AND(s1,s2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y</span><br><span class=\"line\"></span><br><span class=\"line\">XOR(<span class=\"number\">0</span>,<span class=\"number\">0</span>)   <span class=\"comment\">#输出0</span></span><br><span class=\"line\">XOR(<span class=\"number\">1</span>,<span class=\"number\">0</span>)   <span class=\"comment\">#输出1</span></span><br><span class=\"line\">XOR(<span class=\"number\">0</span>,<span class=\"number\">1</span>)   <span class=\"comment\">#输出1</span></span><br><span class=\"line\">XOR(<span class=\"number\">1</span>,<span class=\"number\">1</span>)   <span class=\"comment\">#输出0</span></span><br></pre></td></tr></table></figure>\n\n<p>显然异或门的实现借助了另外三个门！<br>下面从<strong>几何角度</strong>上看看异或门：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTW3sH.png\" alt=\"异或门区域\" title=\"markdown\"><br><strong>显然：异或门划分的空间是非线性的！而另外三个门划分都是线性的！</strong></p>\n<p>现在再回头思考，发现通过对简单门的叠加，实现了非线性划分空间的复杂门！</p>\n<h2 id=\"回到神经网络中\"><a href=\"#回到神经网络中\" class=\"headerlink\" title=\"回到神经网络中\"></a>回到神经网络中</h2><p>神经网络中，我们知道，隐藏层中主要是Affine层和各种激活函数层：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTW8Ld.png\" alt=\"net\" title=\"markdown\"><br>现在假设把激活函数都删掉，也就是说经过一层仿射变换后不加处理继续下一层仿射变换。</p>\n<blockquote>\n<p>比如：x-&gt;w·x=y-&gt;w’·y=z…（矩阵点乘）</p>\n</blockquote>\n<p>这样会有什么问题呢？很显然。</p>\n<blockquote>\n<p>注意： x-&gt;w·x=y-&gt;w’·y=z就相当于z=cx,其中c=w·w’</p>\n</blockquote>\n<p>这说明<strong>两层仿射变换后的表达式结构还是线性的！！</strong>同理n层之后还是线性！这简直是无用功！要记住，神经网络那么多层的目的是尽可能学习如何逼近数据，如果数据是非线性结构排布的，那叠加再多也毫无卵用！<br>所以现在再来看看这个问题：<strong>为什么需要激活函数？</strong></p>\n<h2 id=\"总结一下：\"><a href=\"#总结一下：\" class=\"headerlink\" title=\"总结一下：\"></a>总结一下：</h2><p>如果不用激励函数（其实相当于激励函数是f(x) = x），在这种情况下你每一层节点的输入都是上层输出的线性函数，很容易验证，<strong>无论你神经网络有多少层，输出都是输入的线性组合</strong>，与没有隐藏层效果相当，这种情况就是最原始的感知机（Perceptron）了，那么网络的逼近能力就相当有限。正因为上面的原因，我们决定引入非线性函数作为激励函数，这样深层神经网络表达能力就更加强大（不再是输入的线性组合，而是<strong>几乎可以逼近任意函数</strong>）</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"什么是激活函数：\"><a href=\"#什么是激活函数：\" class=\"headerlink\" title=\"什么是激活函数：\"></a>什么是激活函数：</h1><p>下午学完了神经网络误差的反向传播，心满意足看着满屏幕刚撸出来的Affine,Sigmoid,ReLU,Softmax……突然,心里发出一声疑问：<strong>激活函数有什么用？？？</strong>我慌了，我说不上来，但是隐隐约约能知道这玩意是干嘛的，本着一贯<del>刨根问底跑个稀烂</del>的作风,我决定彻底搞清楚！</p>\n<h2 id=\"引例\"><a href=\"#引例\" class=\"headerlink\" title=\"引例\"></a>引例</h2><p>首先回到机器学习最初始的那个地方—–<strong>逻辑门（感知机表示）</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#与门感知机</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">AND</span><span class=\"params\">(x1,x2)</span>:</span></span><br><span class=\"line\">    w1,w2,theta=<span class=\"number\">0.5</span>,<span class=\"number\">0.5</span>,<span class=\"number\">0.7</span></span><br><span class=\"line\">    tmp=x1*w1+x2*w2</span><br><span class=\"line\">    <span class=\"keyword\">if</span> tmp&lt;=theta:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> tmp&gt;theta:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">#Test</span></span><br><span class=\"line\">AND(<span class=\"number\">0</span>,<span class=\"number\">0</span>)  <span class=\"comment\">#输出0</span></span><br><span class=\"line\">AND(<span class=\"number\">1</span>,<span class=\"number\">0</span>)  <span class=\"comment\">#输出0</span></span><br><span class=\"line\">AND(<span class=\"number\">0</span>,<span class=\"number\">1</span>)  <span class=\"comment\">#输出0</span></span><br><span class=\"line\">AND(<span class=\"number\">1</span>,<span class=\"number\">1</span>)  <span class=\"comment\">#输出1</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#或门感知机</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">OR</span><span class=\"params\">(x1,x2)</span>:</span></span><br><span class=\"line\">    w1,w2,theta=<span class=\"number\">0.5</span>,<span class=\"number\">0.5</span>,<span class=\"number\">0.2</span></span><br><span class=\"line\">    tmp=x1*w1+x2*w2</span><br><span class=\"line\">    <span class=\"keyword\">if</span> tmp&lt;=theta:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> tmp&gt;theta:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">#Test</span></span><br><span class=\"line\">OR(<span class=\"number\">0</span>,<span class=\"number\">0</span>)  <span class=\"comment\">#输出0</span></span><br><span class=\"line\">OR(<span class=\"number\">1</span>,<span class=\"number\">0</span>)  <span class=\"comment\">#输出1</span></span><br><span class=\"line\">OR(<span class=\"number\">0</span>,<span class=\"number\">1</span>)  <span class=\"comment\">#输出1</span></span><br><span class=\"line\">OR(<span class=\"number\">1</span>,<span class=\"number\">1</span>)  <span class=\"comment\">#输出1</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#与非门感知机</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">NAND</span><span class=\"params\">(x1,x2)</span>:</span></span><br><span class=\"line\">    w1,w2,theta=<span class=\"number\">0.5</span>,<span class=\"number\">0.5</span>,<span class=\"number\">0.7</span></span><br><span class=\"line\">    tmp=x1*w1+x2*w2</span><br><span class=\"line\">    <span class=\"keyword\">if</span> tmp&lt;=theta:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> tmp&gt;theta:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Test</span></span><br><span class=\"line\">XOR(<span class=\"number\">0</span>,<span class=\"number\">0</span>)  <span class=\"comment\">#输出1</span></span><br><span class=\"line\">XOR(<span class=\"number\">1</span>,<span class=\"number\">0</span>)  <span class=\"comment\">#输出1</span></span><br><span class=\"line\">XOR(<span class=\"number\">0</span>,<span class=\"number\">1</span>)  <span class=\"comment\">#输出1</span></span><br><span class=\"line\">XOR(<span class=\"number\">1</span>,<span class=\"number\">1</span>)  <span class=\"comment\">#输出0</span></span><br></pre></td></tr></table></figure>\n\n<p>毫无技术含量，所以这里就不细讲代码。</p>\n<p><strong>接下来看看如何表示异或门：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">XOR</span><span class=\"params\">(x1,x2)</span>:</span></span><br><span class=\"line\">    s1=NAND(x1,x2)</span><br><span class=\"line\">    s2=OR(x1,x2)</span><br><span class=\"line\">    y=AND(s1,s2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y</span><br><span class=\"line\"></span><br><span class=\"line\">XOR(<span class=\"number\">0</span>,<span class=\"number\">0</span>)   <span class=\"comment\">#输出0</span></span><br><span class=\"line\">XOR(<span class=\"number\">1</span>,<span class=\"number\">0</span>)   <span class=\"comment\">#输出1</span></span><br><span class=\"line\">XOR(<span class=\"number\">0</span>,<span class=\"number\">1</span>)   <span class=\"comment\">#输出1</span></span><br><span class=\"line\">XOR(<span class=\"number\">1</span>,<span class=\"number\">1</span>)   <span class=\"comment\">#输出0</span></span><br></pre></td></tr></table></figure>\n\n<p>显然异或门的实现借助了另外三个门！<br>下面从<strong>几何角度</strong>上看看异或门：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTW3sH.png\" alt=\"异或门区域\" title=\"markdown\"><br><strong>显然：异或门划分的空间是非线性的！而另外三个门划分都是线性的！</strong></p>\n<p>现在再回头思考，发现通过对简单门的叠加，实现了非线性划分空间的复杂门！</p>\n<h2 id=\"回到神经网络中\"><a href=\"#回到神经网络中\" class=\"headerlink\" title=\"回到神经网络中\"></a>回到神经网络中</h2><p>神经网络中，我们知道，隐藏层中主要是Affine层和各种激活函数层：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTW8Ld.png\" alt=\"net\" title=\"markdown\"><br>现在假设把激活函数都删掉，也就是说经过一层仿射变换后不加处理继续下一层仿射变换。</p>\n<blockquote>\n<p>比如：x-&gt;w·x=y-&gt;w’·y=z…（矩阵点乘）</p>\n</blockquote>\n<p>这样会有什么问题呢？很显然。</p>\n<blockquote>\n<p>注意： x-&gt;w·x=y-&gt;w’·y=z就相当于z=cx,其中c=w·w’</p>\n</blockquote>\n<p>这说明<strong>两层仿射变换后的表达式结构还是线性的！！</strong>同理n层之后还是线性！这简直是无用功！要记住，神经网络那么多层的目的是尽可能学习如何逼近数据，如果数据是非线性结构排布的，那叠加再多也毫无卵用！<br>所以现在再来看看这个问题：<strong>为什么需要激活函数？</strong></p>\n<h2 id=\"总结一下：\"><a href=\"#总结一下：\" class=\"headerlink\" title=\"总结一下：\"></a>总结一下：</h2><p>如果不用激励函数（其实相当于激励函数是f(x) = x），在这种情况下你每一层节点的输入都是上层输出的线性函数，很容易验证，<strong>无论你神经网络有多少层，输出都是输入的线性组合</strong>，与没有隐藏层效果相当，这种情况就是最原始的感知机（Perceptron）了，那么网络的逼近能力就相当有限。正因为上面的原因，我们决定引入非线性函数作为激励函数，这样深层神经网络表达能力就更加强大（不再是输入的线性组合，而是<strong>几乎可以逼近任意函数</strong>）</p>\n"},{"title":"简单的3层神经网络实现","date":"2018-08-18T16:00:00.000Z","_content":"\n## 使用sigmoid作为激活函数的极简3层神经网络(前向)范例\n### 导入numpy库\n```python\n    import numpy as np\n```\n### 定义sigmoid函数\n```python\n    def sigmoid(x):\n        return 1/(1+np.exp(-x))\n```\n### 初始化神经网络\n```python\n    def init_network():\n        network={}\n        network['w1']=np.array([[0.1,0.3,0.5],[0.2,0.4,0.6]])\n        network['w2']=np.array([[0.1,0.4],[0.2,0.5],[0.3,0.6]])\n        network['w3']=np.array([[0.1,0.3],[0.2,0.4]])\n        network['b1']=np.array([0.1,0.2,0.3])\n        network['b2']=np.array([0.1,0.2])\n        network['b3']=np.array([0.1,0.2])\n        return network\n```\n### 定义神经网络\n```python\n    def forward(network,x):\n        w1,w2,w3=network['w1'],network['w2'],network['w3']\n        b1,b2,b3=network['b1'],network['b2'],network['b3']\n        \n        a1=np.dot(x,w1)+b1\n        z1=sigmoid(a1)\n        a2=np.dot(z1,w2)+b2\n        z2=sigmoid(a2)\n        a3=np.dot(z2,w3)+b3\n        y=a3\n        return y\n```\n### 执行\n```python\t\n    network=init_network()\n    x=np.array([1.0,0.5])\n    y=forward(network,x)\n    print(y)import numpy as np\n```\n![神经网络](https://s1.ax1x.com/2022/09/05/vTWyes.jpg \"神经网络\")","source":"_posts/简单的3层神经网络实现.md","raw":"---\ntitle: 简单的3层神经网络实现\ntags: [神经网络,python]\n\ncategories: [机器学习]\ndate: 2018-8-19\n---\n\n## 使用sigmoid作为激活函数的极简3层神经网络(前向)范例\n### 导入numpy库\n```python\n    import numpy as np\n```\n### 定义sigmoid函数\n```python\n    def sigmoid(x):\n        return 1/(1+np.exp(-x))\n```\n### 初始化神经网络\n```python\n    def init_network():\n        network={}\n        network['w1']=np.array([[0.1,0.3,0.5],[0.2,0.4,0.6]])\n        network['w2']=np.array([[0.1,0.4],[0.2,0.5],[0.3,0.6]])\n        network['w3']=np.array([[0.1,0.3],[0.2,0.4]])\n        network['b1']=np.array([0.1,0.2,0.3])\n        network['b2']=np.array([0.1,0.2])\n        network['b3']=np.array([0.1,0.2])\n        return network\n```\n### 定义神经网络\n```python\n    def forward(network,x):\n        w1,w2,w3=network['w1'],network['w2'],network['w3']\n        b1,b2,b3=network['b1'],network['b2'],network['b3']\n        \n        a1=np.dot(x,w1)+b1\n        z1=sigmoid(a1)\n        a2=np.dot(z1,w2)+b2\n        z2=sigmoid(a2)\n        a3=np.dot(z2,w3)+b3\n        y=a3\n        return y\n```\n### 执行\n```python\t\n    network=init_network()\n    x=np.array([1.0,0.5])\n    y=forward(network,x)\n    print(y)import numpy as np\n```\n![神经网络](https://s1.ax1x.com/2022/09/05/vTWyes.jpg \"神经网络\")","slug":"简单的3层神经网络实现","published":1,"updated":"2022-09-05T06:18:21.459Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdmc0097a8vwb83n7x9g","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"使用sigmoid作为激活函数的极简3层神经网络-前向-范例\"><a href=\"#使用sigmoid作为激活函数的极简3层神经网络-前向-范例\" class=\"headerlink\" title=\"使用sigmoid作为激活函数的极简3层神经网络(前向)范例\"></a>使用sigmoid作为激活函数的极简3层神经网络(前向)范例</h2><h3 id=\"导入numpy库\"><a href=\"#导入numpy库\" class=\"headerlink\" title=\"导入numpy库\"></a>导入numpy库</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义sigmoid函数\"><a href=\"#定义sigmoid函数\" class=\"headerlink\" title=\"定义sigmoid函数\"></a>定义sigmoid函数</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sigmoid</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>/(<span class=\"number\">1</span>+np.exp(-x))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"初始化神经网络\"><a href=\"#初始化神经网络\" class=\"headerlink\" title=\"初始化神经网络\"></a>初始化神经网络</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_network</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    network=&#123;&#125;</span><br><span class=\"line\">    network[<span class=\"string\">'w1'</span>]=np.array([[<span class=\"number\">0.1</span>,<span class=\"number\">0.3</span>,<span class=\"number\">0.5</span>],[<span class=\"number\">0.2</span>,<span class=\"number\">0.4</span>,<span class=\"number\">0.6</span>]])</span><br><span class=\"line\">    network[<span class=\"string\">'w2'</span>]=np.array([[<span class=\"number\">0.1</span>,<span class=\"number\">0.4</span>],[<span class=\"number\">0.2</span>,<span class=\"number\">0.5</span>],[<span class=\"number\">0.3</span>,<span class=\"number\">0.6</span>]])</span><br><span class=\"line\">    network[<span class=\"string\">'w3'</span>]=np.array([[<span class=\"number\">0.1</span>,<span class=\"number\">0.3</span>],[<span class=\"number\">0.2</span>,<span class=\"number\">0.4</span>]])</span><br><span class=\"line\">    network[<span class=\"string\">'b1'</span>]=np.array([<span class=\"number\">0.1</span>,<span class=\"number\">0.2</span>,<span class=\"number\">0.3</span>])</span><br><span class=\"line\">    network[<span class=\"string\">'b2'</span>]=np.array([<span class=\"number\">0.1</span>,<span class=\"number\">0.2</span>])</span><br><span class=\"line\">    network[<span class=\"string\">'b3'</span>]=np.array([<span class=\"number\">0.1</span>,<span class=\"number\">0.2</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> network</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义神经网络\"><a href=\"#定义神经网络\" class=\"headerlink\" title=\"定义神经网络\"></a>定义神经网络</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span><span class=\"params\">(network,x)</span>:</span></span><br><span class=\"line\">    w1,w2,w3=network[<span class=\"string\">'w1'</span>],network[<span class=\"string\">'w2'</span>],network[<span class=\"string\">'w3'</span>]</span><br><span class=\"line\">    b1,b2,b3=network[<span class=\"string\">'b1'</span>],network[<span class=\"string\">'b2'</span>],network[<span class=\"string\">'b3'</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    a1=np.dot(x,w1)+b1</span><br><span class=\"line\">    z1=sigmoid(a1)</span><br><span class=\"line\">    a2=np.dot(z1,w2)+b2</span><br><span class=\"line\">    z2=sigmoid(a2)</span><br><span class=\"line\">    a3=np.dot(z2,w3)+b3</span><br><span class=\"line\">    y=a3</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">network=init_network()</span><br><span class=\"line\">x=np.array([<span class=\"number\">1.0</span>,<span class=\"number\">0.5</span>])</span><br><span class=\"line\">y=forward(network,x)</span><br><span class=\"line\">print(y)<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s1.ax1x.com/2022/09/05/vTWyes.jpg\" alt=\"神经网络\" title=\"神经网络\"></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h2 id=\"使用sigmoid作为激活函数的极简3层神经网络-前向-范例\"><a href=\"#使用sigmoid作为激活函数的极简3层神经网络-前向-范例\" class=\"headerlink\" title=\"使用sigmoid作为激活函数的极简3层神经网络(前向)范例\"></a>使用sigmoid作为激活函数的极简3层神经网络(前向)范例</h2><h3 id=\"导入numpy库\"><a href=\"#导入numpy库\" class=\"headerlink\" title=\"导入numpy库\"></a>导入numpy库</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义sigmoid函数\"><a href=\"#定义sigmoid函数\" class=\"headerlink\" title=\"定义sigmoid函数\"></a>定义sigmoid函数</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sigmoid</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>/(<span class=\"number\">1</span>+np.exp(-x))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"初始化神经网络\"><a href=\"#初始化神经网络\" class=\"headerlink\" title=\"初始化神经网络\"></a>初始化神经网络</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_network</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    network=&#123;&#125;</span><br><span class=\"line\">    network[<span class=\"string\">'w1'</span>]=np.array([[<span class=\"number\">0.1</span>,<span class=\"number\">0.3</span>,<span class=\"number\">0.5</span>],[<span class=\"number\">0.2</span>,<span class=\"number\">0.4</span>,<span class=\"number\">0.6</span>]])</span><br><span class=\"line\">    network[<span class=\"string\">'w2'</span>]=np.array([[<span class=\"number\">0.1</span>,<span class=\"number\">0.4</span>],[<span class=\"number\">0.2</span>,<span class=\"number\">0.5</span>],[<span class=\"number\">0.3</span>,<span class=\"number\">0.6</span>]])</span><br><span class=\"line\">    network[<span class=\"string\">'w3'</span>]=np.array([[<span class=\"number\">0.1</span>,<span class=\"number\">0.3</span>],[<span class=\"number\">0.2</span>,<span class=\"number\">0.4</span>]])</span><br><span class=\"line\">    network[<span class=\"string\">'b1'</span>]=np.array([<span class=\"number\">0.1</span>,<span class=\"number\">0.2</span>,<span class=\"number\">0.3</span>])</span><br><span class=\"line\">    network[<span class=\"string\">'b2'</span>]=np.array([<span class=\"number\">0.1</span>,<span class=\"number\">0.2</span>])</span><br><span class=\"line\">    network[<span class=\"string\">'b3'</span>]=np.array([<span class=\"number\">0.1</span>,<span class=\"number\">0.2</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> network</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义神经网络\"><a href=\"#定义神经网络\" class=\"headerlink\" title=\"定义神经网络\"></a>定义神经网络</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span><span class=\"params\">(network,x)</span>:</span></span><br><span class=\"line\">    w1,w2,w3=network[<span class=\"string\">'w1'</span>],network[<span class=\"string\">'w2'</span>],network[<span class=\"string\">'w3'</span>]</span><br><span class=\"line\">    b1,b2,b3=network[<span class=\"string\">'b1'</span>],network[<span class=\"string\">'b2'</span>],network[<span class=\"string\">'b3'</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    a1=np.dot(x,w1)+b1</span><br><span class=\"line\">    z1=sigmoid(a1)</span><br><span class=\"line\">    a2=np.dot(z1,w2)+b2</span><br><span class=\"line\">    z2=sigmoid(a2)</span><br><span class=\"line\">    a3=np.dot(z2,w3)+b3</span><br><span class=\"line\">    y=a3</span><br><span class=\"line\">    <span class=\"keyword\">return</span> y</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">network=init_network()</span><br><span class=\"line\">x=np.array([<span class=\"number\">1.0</span>,<span class=\"number\">0.5</span>])</span><br><span class=\"line\">y=forward(network,x)</span><br><span class=\"line\">print(y)<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s1.ax1x.com/2022/09/05/vTWyes.jpg\" alt=\"神经网络\" title=\"神经网络\"></p>\n"},{"title":"行人重识别代码实战（一）","date":"2019-08-21T16:00:00.000Z","_content":"# **代码描述**\n\n**代码来源：** <https://github.com/layumi/Person_reID_baseline_pytorch>\n\n`详细信息可见README.md`\n\n# prepare.py 文件简单讲解\n\n**文件代码：**\n``` python\nimport os\nfrom shutil import copyfile\n\n# You only need to change this line to your dataset download path\ndownload_path = 'C:/Users/葛宇/学习/ReId/数据集/Market-1501-v15.09.15'\n\nif not os.path.isdir(download_path):\n    print('please change the download_path')\n\nsave_path = download_path + '/pytorch'\nif not os.path.isdir(save_path):\n    os.mkdir(save_path)\n#-----------------------------------------\n#query\nquery_path = download_path + '/query'\nquery_save_path = download_path + '/pytorch/query'\nif not os.path.isdir(query_save_path):\n    os.mkdir(query_save_path)\n\nfor root, dirs, files in os.walk(query_path, topdown=True):\n    for name in files:\n        if not name[-3:]=='jpg':\n            continue\n        ID  = name.split('_')\n        src_path = query_path + '/' + name\n        dst_path = query_save_path + '/' + ID[0] \n        if not os.path.isdir(dst_path):\n            os.mkdir(dst_path)\n        copyfile(src_path, dst_path + '/' + name)\n\n#-----------------------------------------\n#multi-query\nquery_path = download_path + '/gt_bbox'\n# for dukemtmc-reid, we do not need multi-query\nif os.path.isdir(query_path):\n    query_save_path = download_path + '/pytorch/multi-query'\n    if not os.path.isdir(query_save_path):\n        os.mkdir(query_save_path)\n\n    for root, dirs, files in os.walk(query_path, topdown=True):\n        for name in files:\n            if not name[-3:]=='jpg':\n                continue\n            ID  = name.split('_')\n            src_path = query_path + '/' + name\n            dst_path = query_save_path + '/' + ID[0]\n            if not os.path.isdir(dst_path):\n                os.mkdir(dst_path)\n            copyfile(src_path, dst_path + '/' + name)\n\n#-----------------------------------------\n#gallery\ngallery_path = download_path + '/bounding_box_test'\ngallery_save_path = download_path + '/pytorch/gallery'\nif not os.path.isdir(gallery_save_path):\n    os.mkdir(gallery_save_path)\n\nfor root, dirs, files in os.walk(gallery_path, topdown=True):\n    for name in files:\n        if not name[-3:]=='jpg':\n            continue\n        ID  = name.split('_')\n        src_path = gallery_path + '/' + name\n        dst_path = gallery_save_path + '/' + ID[0]\n        if not os.path.isdir(dst_path):\n            os.mkdir(dst_path)\n        copyfile(src_path, dst_path + '/' + name)\n\n#---------------------------------------\n#train_all\ntrain_path = download_path + '/bounding_box_train'\ntrain_save_path = download_path + '/pytorch/train_all'\nif not os.path.isdir(train_save_path):\n    os.mkdir(train_save_path)\n\nfor root, dirs, files in os.walk(train_path, topdown=True):\n    for name in files:\n        if not name[-3:]=='jpg':\n            continue\n        ID  = name.split('_')\n        src_path = train_path + '/' + name\n        dst_path = train_save_path + '/' + ID[0]\n        if not os.path.isdir(dst_path):\n            os.mkdir(dst_path)\n        copyfile(src_path, dst_path + '/' + name)\n\n\n#---------------------------------------\n#train_val\ntrain_path = download_path + '/bounding_box_train'\ntrain_save_path = download_path + '/pytorch/train'\nval_save_path = download_path + '/pytorch/val'\nif not os.path.isdir(train_save_path):\n    os.mkdir(train_save_path)\n    os.mkdir(val_save_path)\n\nfor root, dirs, files in os.walk(train_path, topdown=True):\n    for name in files:\n        if not name[-3:]=='jpg':\n            continue\n        ID  = name.split('_')\n        src_path = train_path + '/' + name\n        dst_path = train_save_path + '/' + ID[0]\n        if not os.path.isdir(dst_path):\n            os.mkdir(dst_path)\n            dst_path = val_save_path + '/' + ID[0]  #first image is used as val image\n            os.mkdir(dst_path)\n        copyfile(src_path, dst_path + '/' + name)\n```\n**代码比较冗长，我总结一下。**\n这个脚本的作用是将原始数据集重新按图片ID分类。主要操作是通过调用系统函数加之必要的循环判断来实现。可不必细究。运行之前先将第五行`download_path = 'C:/Users/葛宇/学习/ReId/数据集/Market-1501-v15.09.15'`改为你自己的地址。\n按照原作者的使用教程，第一步要做的就是运行prepare.py文件。\n运行之后会发现在原先的Market1501数据集中（详见之前的博客）多出了一个文件夹“pytorch”,打开看看：\n\n![](https://s1.ax1x.com/2022/09/05/vT2hNV.png)\n\n里面是6个文件夹：\n1. gallery中包含752个文件夹项目，均按ID排序：![](https://s1.ax1x.com/2022/09/05/vT24hT.png)\n2. multi中是1051个文件夹项目，从0001到1501\n3. query中包含750个文件项目，不含0000和-1\n4. train中包含751个文件项目，不含0000和-1\n5. train all中包含751个文件项目，不含0000和-1\n6. val中包含751个文件项目，不含0000和-1\n\n具体情况可以自己尝试打开观察。","source":"_posts/行人重识别代码实战（一）.md","raw":"---\ntitle:  行人重识别代码实战（一）\ntags: [行人重识别,深度学习,图像处理]\ncategories: [深度学习]\ndate: 2019-8-22\n\n---\n# **代码描述**\n\n**代码来源：** <https://github.com/layumi/Person_reID_baseline_pytorch>\n\n`详细信息可见README.md`\n\n# prepare.py 文件简单讲解\n\n**文件代码：**\n``` python\nimport os\nfrom shutil import copyfile\n\n# You only need to change this line to your dataset download path\ndownload_path = 'C:/Users/葛宇/学习/ReId/数据集/Market-1501-v15.09.15'\n\nif not os.path.isdir(download_path):\n    print('please change the download_path')\n\nsave_path = download_path + '/pytorch'\nif not os.path.isdir(save_path):\n    os.mkdir(save_path)\n#-----------------------------------------\n#query\nquery_path = download_path + '/query'\nquery_save_path = download_path + '/pytorch/query'\nif not os.path.isdir(query_save_path):\n    os.mkdir(query_save_path)\n\nfor root, dirs, files in os.walk(query_path, topdown=True):\n    for name in files:\n        if not name[-3:]=='jpg':\n            continue\n        ID  = name.split('_')\n        src_path = query_path + '/' + name\n        dst_path = query_save_path + '/' + ID[0] \n        if not os.path.isdir(dst_path):\n            os.mkdir(dst_path)\n        copyfile(src_path, dst_path + '/' + name)\n\n#-----------------------------------------\n#multi-query\nquery_path = download_path + '/gt_bbox'\n# for dukemtmc-reid, we do not need multi-query\nif os.path.isdir(query_path):\n    query_save_path = download_path + '/pytorch/multi-query'\n    if not os.path.isdir(query_save_path):\n        os.mkdir(query_save_path)\n\n    for root, dirs, files in os.walk(query_path, topdown=True):\n        for name in files:\n            if not name[-3:]=='jpg':\n                continue\n            ID  = name.split('_')\n            src_path = query_path + '/' + name\n            dst_path = query_save_path + '/' + ID[0]\n            if not os.path.isdir(dst_path):\n                os.mkdir(dst_path)\n            copyfile(src_path, dst_path + '/' + name)\n\n#-----------------------------------------\n#gallery\ngallery_path = download_path + '/bounding_box_test'\ngallery_save_path = download_path + '/pytorch/gallery'\nif not os.path.isdir(gallery_save_path):\n    os.mkdir(gallery_save_path)\n\nfor root, dirs, files in os.walk(gallery_path, topdown=True):\n    for name in files:\n        if not name[-3:]=='jpg':\n            continue\n        ID  = name.split('_')\n        src_path = gallery_path + '/' + name\n        dst_path = gallery_save_path + '/' + ID[0]\n        if not os.path.isdir(dst_path):\n            os.mkdir(dst_path)\n        copyfile(src_path, dst_path + '/' + name)\n\n#---------------------------------------\n#train_all\ntrain_path = download_path + '/bounding_box_train'\ntrain_save_path = download_path + '/pytorch/train_all'\nif not os.path.isdir(train_save_path):\n    os.mkdir(train_save_path)\n\nfor root, dirs, files in os.walk(train_path, topdown=True):\n    for name in files:\n        if not name[-3:]=='jpg':\n            continue\n        ID  = name.split('_')\n        src_path = train_path + '/' + name\n        dst_path = train_save_path + '/' + ID[0]\n        if not os.path.isdir(dst_path):\n            os.mkdir(dst_path)\n        copyfile(src_path, dst_path + '/' + name)\n\n\n#---------------------------------------\n#train_val\ntrain_path = download_path + '/bounding_box_train'\ntrain_save_path = download_path + '/pytorch/train'\nval_save_path = download_path + '/pytorch/val'\nif not os.path.isdir(train_save_path):\n    os.mkdir(train_save_path)\n    os.mkdir(val_save_path)\n\nfor root, dirs, files in os.walk(train_path, topdown=True):\n    for name in files:\n        if not name[-3:]=='jpg':\n            continue\n        ID  = name.split('_')\n        src_path = train_path + '/' + name\n        dst_path = train_save_path + '/' + ID[0]\n        if not os.path.isdir(dst_path):\n            os.mkdir(dst_path)\n            dst_path = val_save_path + '/' + ID[0]  #first image is used as val image\n            os.mkdir(dst_path)\n        copyfile(src_path, dst_path + '/' + name)\n```\n**代码比较冗长，我总结一下。**\n这个脚本的作用是将原始数据集重新按图片ID分类。主要操作是通过调用系统函数加之必要的循环判断来实现。可不必细究。运行之前先将第五行`download_path = 'C:/Users/葛宇/学习/ReId/数据集/Market-1501-v15.09.15'`改为你自己的地址。\n按照原作者的使用教程，第一步要做的就是运行prepare.py文件。\n运行之后会发现在原先的Market1501数据集中（详见之前的博客）多出了一个文件夹“pytorch”,打开看看：\n\n![](https://s1.ax1x.com/2022/09/05/vT2hNV.png)\n\n里面是6个文件夹：\n1. gallery中包含752个文件夹项目，均按ID排序：![](https://s1.ax1x.com/2022/09/05/vT24hT.png)\n2. multi中是1051个文件夹项目，从0001到1501\n3. query中包含750个文件项目，不含0000和-1\n4. train中包含751个文件项目，不含0000和-1\n5. train all中包含751个文件项目，不含0000和-1\n6. val中包含751个文件项目，不含0000和-1\n\n具体情况可以自己尝试打开观察。","slug":"行人重识别代码实战（一）","published":1,"updated":"2022-09-05T05:57:12.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdmd0099a8vwupfbq0lx","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"代码描述\"><a href=\"#代码描述\" class=\"headerlink\" title=\"代码描述\"></a><strong>代码描述</strong></h1><p><strong>代码来源：</strong> <a href=\"https://github.com/layumi/Person_reID_baseline_pytorch\">https://github.com/layumi/Person_reID_baseline_pytorch</a></p>\n<p><code>详细信息可见README.md</code></p>\n<h1 id=\"prepare-py-文件简单讲解\"><a href=\"#prepare-py-文件简单讲解\" class=\"headerlink\" title=\"prepare.py 文件简单讲解\"></a>prepare.py 文件简单讲解</h1><p><strong>文件代码：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> shutil <span class=\"keyword\">import</span> copyfile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># You only need to change this line to your dataset download path</span></span><br><span class=\"line\">download_path = <span class=\"string\">'C:/Users/葛宇/学习/ReId/数据集/Market-1501-v15.09.15'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(download_path):</span><br><span class=\"line\">    print(<span class=\"string\">'please change the download_path'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">save_path = download_path + <span class=\"string\">'/pytorch'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(save_path):</span><br><span class=\"line\">    os.mkdir(save_path)</span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#query</span></span><br><span class=\"line\">query_path = download_path + <span class=\"string\">'/query'</span></span><br><span class=\"line\">query_save_path = download_path + <span class=\"string\">'/pytorch/query'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(query_save_path):</span><br><span class=\"line\">    os.mkdir(query_save_path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(query_path, topdown=<span class=\"literal\">True</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name[<span class=\"number\">-3</span>:]==<span class=\"string\">'jpg'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        ID  = name.split(<span class=\"string\">'_'</span>)</span><br><span class=\"line\">        src_path = query_path + <span class=\"string\">'/'</span> + name</span><br><span class=\"line\">        dst_path = query_save_path + <span class=\"string\">'/'</span> + ID[<span class=\"number\">0</span>] </span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(dst_path):</span><br><span class=\"line\">            os.mkdir(dst_path)</span><br><span class=\"line\">        copyfile(src_path, dst_path + <span class=\"string\">'/'</span> + name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#multi-query</span></span><br><span class=\"line\">query_path = download_path + <span class=\"string\">'/gt_bbox'</span></span><br><span class=\"line\"><span class=\"comment\"># for dukemtmc-reid, we do not need multi-query</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> os.path.isdir(query_path):</span><br><span class=\"line\">    query_save_path = download_path + <span class=\"string\">'/pytorch/multi-query'</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(query_save_path):</span><br><span class=\"line\">        os.mkdir(query_save_path)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(query_path, topdown=<span class=\"literal\">True</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name[<span class=\"number\">-3</span>:]==<span class=\"string\">'jpg'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            ID  = name.split(<span class=\"string\">'_'</span>)</span><br><span class=\"line\">            src_path = query_path + <span class=\"string\">'/'</span> + name</span><br><span class=\"line\">            dst_path = query_save_path + <span class=\"string\">'/'</span> + ID[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(dst_path):</span><br><span class=\"line\">                os.mkdir(dst_path)</span><br><span class=\"line\">            copyfile(src_path, dst_path + <span class=\"string\">'/'</span> + name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#gallery</span></span><br><span class=\"line\">gallery_path = download_path + <span class=\"string\">'/bounding_box_test'</span></span><br><span class=\"line\">gallery_save_path = download_path + <span class=\"string\">'/pytorch/gallery'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(gallery_save_path):</span><br><span class=\"line\">    os.mkdir(gallery_save_path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(gallery_path, topdown=<span class=\"literal\">True</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name[<span class=\"number\">-3</span>:]==<span class=\"string\">'jpg'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        ID  = name.split(<span class=\"string\">'_'</span>)</span><br><span class=\"line\">        src_path = gallery_path + <span class=\"string\">'/'</span> + name</span><br><span class=\"line\">        dst_path = gallery_save_path + <span class=\"string\">'/'</span> + ID[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(dst_path):</span><br><span class=\"line\">            os.mkdir(dst_path)</span><br><span class=\"line\">        copyfile(src_path, dst_path + <span class=\"string\">'/'</span> + name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#train_all</span></span><br><span class=\"line\">train_path = download_path + <span class=\"string\">'/bounding_box_train'</span></span><br><span class=\"line\">train_save_path = download_path + <span class=\"string\">'/pytorch/train_all'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(train_save_path):</span><br><span class=\"line\">    os.mkdir(train_save_path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(train_path, topdown=<span class=\"literal\">True</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name[<span class=\"number\">-3</span>:]==<span class=\"string\">'jpg'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        ID  = name.split(<span class=\"string\">'_'</span>)</span><br><span class=\"line\">        src_path = train_path + <span class=\"string\">'/'</span> + name</span><br><span class=\"line\">        dst_path = train_save_path + <span class=\"string\">'/'</span> + ID[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(dst_path):</span><br><span class=\"line\">            os.mkdir(dst_path)</span><br><span class=\"line\">        copyfile(src_path, dst_path + <span class=\"string\">'/'</span> + name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#train_val</span></span><br><span class=\"line\">train_path = download_path + <span class=\"string\">'/bounding_box_train'</span></span><br><span class=\"line\">train_save_path = download_path + <span class=\"string\">'/pytorch/train'</span></span><br><span class=\"line\">val_save_path = download_path + <span class=\"string\">'/pytorch/val'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(train_save_path):</span><br><span class=\"line\">    os.mkdir(train_save_path)</span><br><span class=\"line\">    os.mkdir(val_save_path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(train_path, topdown=<span class=\"literal\">True</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name[<span class=\"number\">-3</span>:]==<span class=\"string\">'jpg'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        ID  = name.split(<span class=\"string\">'_'</span>)</span><br><span class=\"line\">        src_path = train_path + <span class=\"string\">'/'</span> + name</span><br><span class=\"line\">        dst_path = train_save_path + <span class=\"string\">'/'</span> + ID[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(dst_path):</span><br><span class=\"line\">            os.mkdir(dst_path)</span><br><span class=\"line\">            dst_path = val_save_path + <span class=\"string\">'/'</span> + ID[<span class=\"number\">0</span>]  <span class=\"comment\">#first image is used as val image</span></span><br><span class=\"line\">            os.mkdir(dst_path)</span><br><span class=\"line\">        copyfile(src_path, dst_path + <span class=\"string\">'/'</span> + name)</span><br></pre></td></tr></table></figure>\n\n<p><strong>代码比较冗长，我总结一下。</strong><br>这个脚本的作用是将原始数据集重新按图片ID分类。主要操作是通过调用系统函数加之必要的循环判断来实现。可不必细究。运行之前先将第五行<code>download_path = &#39;C:/Users/葛宇/学习/ReId/数据集/Market-1501-v15.09.15&#39;</code>改为你自己的地址。<br>按照原作者的使用教程，第一步要做的就是运行prepare.py文件。<br>运行之后会发现在原先的Market1501数据集中（详见之前的博客）多出了一个文件夹“pytorch”,打开看看：</p>\n<p><img src=\"https://s1.ax1x.com/2022/09/05/vT2hNV.png\" alt></p>\n<p>里面是6个文件夹：</p>\n<ol>\n<li>gallery中包含752个文件夹项目，均按ID排序：<img src=\"https://s1.ax1x.com/2022/09/05/vT24hT.png\" alt></li>\n<li>multi中是1051个文件夹项目，从0001到1501</li>\n<li>query中包含750个文件项目，不含0000和-1</li>\n<li>train中包含751个文件项目，不含0000和-1</li>\n<li>train all中包含751个文件项目，不含0000和-1</li>\n<li>val中包含751个文件项目，不含0000和-1</li>\n</ol>\n<p>具体情况可以自己尝试打开观察。</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"代码描述\"><a href=\"#代码描述\" class=\"headerlink\" title=\"代码描述\"></a><strong>代码描述</strong></h1><p><strong>代码来源：</strong> <a href=\"https://github.com/layumi/Person_reID_baseline_pytorch\">https://github.com/layumi/Person_reID_baseline_pytorch</a></p>\n<p><code>详细信息可见README.md</code></p>\n<h1 id=\"prepare-py-文件简单讲解\"><a href=\"#prepare-py-文件简单讲解\" class=\"headerlink\" title=\"prepare.py 文件简单讲解\"></a>prepare.py 文件简单讲解</h1><p><strong>文件代码：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">from</span> shutil <span class=\"keyword\">import</span> copyfile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># You only need to change this line to your dataset download path</span></span><br><span class=\"line\">download_path = <span class=\"string\">'C:/Users/葛宇/学习/ReId/数据集/Market-1501-v15.09.15'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(download_path):</span><br><span class=\"line\">    print(<span class=\"string\">'please change the download_path'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">save_path = download_path + <span class=\"string\">'/pytorch'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(save_path):</span><br><span class=\"line\">    os.mkdir(save_path)</span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#query</span></span><br><span class=\"line\">query_path = download_path + <span class=\"string\">'/query'</span></span><br><span class=\"line\">query_save_path = download_path + <span class=\"string\">'/pytorch/query'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(query_save_path):</span><br><span class=\"line\">    os.mkdir(query_save_path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(query_path, topdown=<span class=\"literal\">True</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name[<span class=\"number\">-3</span>:]==<span class=\"string\">'jpg'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        ID  = name.split(<span class=\"string\">'_'</span>)</span><br><span class=\"line\">        src_path = query_path + <span class=\"string\">'/'</span> + name</span><br><span class=\"line\">        dst_path = query_save_path + <span class=\"string\">'/'</span> + ID[<span class=\"number\">0</span>] </span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(dst_path):</span><br><span class=\"line\">            os.mkdir(dst_path)</span><br><span class=\"line\">        copyfile(src_path, dst_path + <span class=\"string\">'/'</span> + name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#multi-query</span></span><br><span class=\"line\">query_path = download_path + <span class=\"string\">'/gt_bbox'</span></span><br><span class=\"line\"><span class=\"comment\"># for dukemtmc-reid, we do not need multi-query</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> os.path.isdir(query_path):</span><br><span class=\"line\">    query_save_path = download_path + <span class=\"string\">'/pytorch/multi-query'</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(query_save_path):</span><br><span class=\"line\">        os.mkdir(query_save_path)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(query_path, topdown=<span class=\"literal\">True</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name[<span class=\"number\">-3</span>:]==<span class=\"string\">'jpg'</span>:</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            ID  = name.split(<span class=\"string\">'_'</span>)</span><br><span class=\"line\">            src_path = query_path + <span class=\"string\">'/'</span> + name</span><br><span class=\"line\">            dst_path = query_save_path + <span class=\"string\">'/'</span> + ID[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(dst_path):</span><br><span class=\"line\">                os.mkdir(dst_path)</span><br><span class=\"line\">            copyfile(src_path, dst_path + <span class=\"string\">'/'</span> + name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#-----------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#gallery</span></span><br><span class=\"line\">gallery_path = download_path + <span class=\"string\">'/bounding_box_test'</span></span><br><span class=\"line\">gallery_save_path = download_path + <span class=\"string\">'/pytorch/gallery'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(gallery_save_path):</span><br><span class=\"line\">    os.mkdir(gallery_save_path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(gallery_path, topdown=<span class=\"literal\">True</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name[<span class=\"number\">-3</span>:]==<span class=\"string\">'jpg'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        ID  = name.split(<span class=\"string\">'_'</span>)</span><br><span class=\"line\">        src_path = gallery_path + <span class=\"string\">'/'</span> + name</span><br><span class=\"line\">        dst_path = gallery_save_path + <span class=\"string\">'/'</span> + ID[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(dst_path):</span><br><span class=\"line\">            os.mkdir(dst_path)</span><br><span class=\"line\">        copyfile(src_path, dst_path + <span class=\"string\">'/'</span> + name)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#train_all</span></span><br><span class=\"line\">train_path = download_path + <span class=\"string\">'/bounding_box_train'</span></span><br><span class=\"line\">train_save_path = download_path + <span class=\"string\">'/pytorch/train_all'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(train_save_path):</span><br><span class=\"line\">    os.mkdir(train_save_path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(train_path, topdown=<span class=\"literal\">True</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name[<span class=\"number\">-3</span>:]==<span class=\"string\">'jpg'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        ID  = name.split(<span class=\"string\">'_'</span>)</span><br><span class=\"line\">        src_path = train_path + <span class=\"string\">'/'</span> + name</span><br><span class=\"line\">        dst_path = train_save_path + <span class=\"string\">'/'</span> + ID[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(dst_path):</span><br><span class=\"line\">            os.mkdir(dst_path)</span><br><span class=\"line\">        copyfile(src_path, dst_path + <span class=\"string\">'/'</span> + name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">#train_val</span></span><br><span class=\"line\">train_path = download_path + <span class=\"string\">'/bounding_box_train'</span></span><br><span class=\"line\">train_save_path = download_path + <span class=\"string\">'/pytorch/train'</span></span><br><span class=\"line\">val_save_path = download_path + <span class=\"string\">'/pytorch/val'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(train_save_path):</span><br><span class=\"line\">    os.mkdir(train_save_path)</span><br><span class=\"line\">    os.mkdir(val_save_path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(train_path, topdown=<span class=\"literal\">True</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> name[<span class=\"number\">-3</span>:]==<span class=\"string\">'jpg'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        ID  = name.split(<span class=\"string\">'_'</span>)</span><br><span class=\"line\">        src_path = train_path + <span class=\"string\">'/'</span> + name</span><br><span class=\"line\">        dst_path = train_save_path + <span class=\"string\">'/'</span> + ID[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(dst_path):</span><br><span class=\"line\">            os.mkdir(dst_path)</span><br><span class=\"line\">            dst_path = val_save_path + <span class=\"string\">'/'</span> + ID[<span class=\"number\">0</span>]  <span class=\"comment\">#first image is used as val image</span></span><br><span class=\"line\">            os.mkdir(dst_path)</span><br><span class=\"line\">        copyfile(src_path, dst_path + <span class=\"string\">'/'</span> + name)</span><br></pre></td></tr></table></figure>\n\n<p><strong>代码比较冗长，我总结一下。</strong><br>这个脚本的作用是将原始数据集重新按图片ID分类。主要操作是通过调用系统函数加之必要的循环判断来实现。可不必细究。运行之前先将第五行<code>download_path = &#39;C:/Users/葛宇/学习/ReId/数据集/Market-1501-v15.09.15&#39;</code>改为你自己的地址。<br>按照原作者的使用教程，第一步要做的就是运行prepare.py文件。<br>运行之后会发现在原先的Market1501数据集中（详见之前的博客）多出了一个文件夹“pytorch”,打开看看：</p>\n<p><img src=\"https://s1.ax1x.com/2022/09/05/vT2hNV.png\" alt></p>\n<p>里面是6个文件夹：</p>\n<ol>\n<li>gallery中包含752个文件夹项目，均按ID排序：<img src=\"https://s1.ax1x.com/2022/09/05/vT24hT.png\" alt></li>\n<li>multi中是1051个文件夹项目，从0001到1501</li>\n<li>query中包含750个文件项目，不含0000和-1</li>\n<li>train中包含751个文件项目，不含0000和-1</li>\n<li>train all中包含751个文件项目，不含0000和-1</li>\n<li>val中包含751个文件项目，不含0000和-1</li>\n</ol>\n<p>具体情况可以自己尝试打开观察。</p>\n"},{"title":"行人重识别代码实战（三）","date":"2019-08-23T16:00:00.000Z","_content":"\n# **代码描述**\n\n**代码来源：** <https://github.com/layumi/Person_reID_baseline_pytorch>\n\n`详细信息可见README.md`\n\n准备好了训练数据和网络结构，下面就可以训练了：\n```cmd\npython train.py --gpu_ids 0 --name ft_ResNet50 --train_all --batchsize 32  --data_dir your_data_path\n--gpu_ids which gpu to run.\n--name the name of the model.\n--data_dir the path of the training data.\n--train_all using all images to train.\n--batchsize batch size.\n--erasing_p random erasing probability.\n```\n这里探究一下`train.py`中都做了些什么。\n首先是读取数据和label。这里使用了`torch.utils.data.DataLoader`, 可以获得两个迭代器`dataloaders['train']` and `dataloaders['val']` 来读数据：\n```python\nimage_datasets = {}\nimage_datasets['train'] = datasets.ImageFolder(os.path.join(data_dir, 'train'),\n                                         data_transforms['train'])\nimage_datasets['val'] = datasets.ImageFolder(os.path.join(data_dir, 'val'),\n                                         data_transforms['val'])\n\ndataloaders = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=opt.batchsize,\n                                            shuffle=True, num_workers=8) # 8 workers may work faster\n             for x in ['train', 'val']}\ndataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}\n```\n以下则是主要的代码来训练模型，一共只有20行：\n```python\n# Iterate over data.\n           for data in dataloaders[phase]:\n               # get a batch of inputs\n               inputs, labels = data\n               now_batch_size,c,h,w = inputs.shape\n               if now_batch_size<opt.batchsize: # skip the last batch\n                   continue\n               # print(inputs.shape)\n               # wrap them in Variable, if gpu is used, we transform the data to cuda.\n               if use_gpu:\n                   inputs = Variable(inputs.cuda())\n                   labels = Variable(labels.cuda())\n               else:\n                   inputs, labels = Variable(inputs), Variable(labels)\n\n               # zero the parameter gradients\n               optimizer.zero_grad()\n\n               #-------- forward --------\n               outputs = model(inputs)\n               _, preds = torch.max(outputs.data, 1)\n               loss = criterion(outputs, labels)\n\n               #-------- backward + optimize --------\n               # only if in training phase\n               if phase == 'train':\n                   loss.backward()\n                   optimizer.step()\n```\n每十轮，都会保存网络和更新loss曲线：\n```python\nif epoch%10 == 9:\n    save_network(model, epoch)\n    draw_curve(epoch)\n```\n更多细节见train.py\n","source":"_posts/行人重识别代码实战（三）.md","raw":"---\ntitle:  行人重识别代码实战（三）\ntags: [行人重识别,深度学习,图像处理]\ncategories: [深度学习]\ndate: 2019-8-24\n\n---\n\n# **代码描述**\n\n**代码来源：** <https://github.com/layumi/Person_reID_baseline_pytorch>\n\n`详细信息可见README.md`\n\n准备好了训练数据和网络结构，下面就可以训练了：\n```cmd\npython train.py --gpu_ids 0 --name ft_ResNet50 --train_all --batchsize 32  --data_dir your_data_path\n--gpu_ids which gpu to run.\n--name the name of the model.\n--data_dir the path of the training data.\n--train_all using all images to train.\n--batchsize batch size.\n--erasing_p random erasing probability.\n```\n这里探究一下`train.py`中都做了些什么。\n首先是读取数据和label。这里使用了`torch.utils.data.DataLoader`, 可以获得两个迭代器`dataloaders['train']` and `dataloaders['val']` 来读数据：\n```python\nimage_datasets = {}\nimage_datasets['train'] = datasets.ImageFolder(os.path.join(data_dir, 'train'),\n                                         data_transforms['train'])\nimage_datasets['val'] = datasets.ImageFolder(os.path.join(data_dir, 'val'),\n                                         data_transforms['val'])\n\ndataloaders = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=opt.batchsize,\n                                            shuffle=True, num_workers=8) # 8 workers may work faster\n             for x in ['train', 'val']}\ndataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}\n```\n以下则是主要的代码来训练模型，一共只有20行：\n```python\n# Iterate over data.\n           for data in dataloaders[phase]:\n               # get a batch of inputs\n               inputs, labels = data\n               now_batch_size,c,h,w = inputs.shape\n               if now_batch_size<opt.batchsize: # skip the last batch\n                   continue\n               # print(inputs.shape)\n               # wrap them in Variable, if gpu is used, we transform the data to cuda.\n               if use_gpu:\n                   inputs = Variable(inputs.cuda())\n                   labels = Variable(labels.cuda())\n               else:\n                   inputs, labels = Variable(inputs), Variable(labels)\n\n               # zero the parameter gradients\n               optimizer.zero_grad()\n\n               #-------- forward --------\n               outputs = model(inputs)\n               _, preds = torch.max(outputs.data, 1)\n               loss = criterion(outputs, labels)\n\n               #-------- backward + optimize --------\n               # only if in training phase\n               if phase == 'train':\n                   loss.backward()\n                   optimizer.step()\n```\n每十轮，都会保存网络和更新loss曲线：\n```python\nif epoch%10 == 9:\n    save_network(model, epoch)\n    draw_curve(epoch)\n```\n更多细节见train.py\n","slug":"行人重识别代码实战（三）","published":1,"updated":"2022-09-05T05:54:42.418Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdmf009ea8vwkldpwqpa","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"代码描述\"><a href=\"#代码描述\" class=\"headerlink\" title=\"代码描述\"></a><strong>代码描述</strong></h1><p><strong>代码来源：</strong> <a href=\"https://github.com/layumi/Person_reID_baseline_pytorch\">https://github.com/layumi/Person_reID_baseline_pytorch</a></p>\n<p><code>详细信息可见README.md</code></p>\n<p>准备好了训练数据和网络结构，下面就可以训练了：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python train.py --gpu_ids <span class=\"number\">0</span> --name ft_ResNet50 --train_all --batchsize <span class=\"number\">32</span>  --data_dir your_data_path</span><br><span class=\"line\">--gpu_ids which gpu to run.</span><br><span class=\"line\">--name the name of the model.</span><br><span class=\"line\">--data_dir the <span class=\"built_in\">path</span> of the training data.</span><br><span class=\"line\">--train_all using all images to train.</span><br><span class=\"line\">--batchsize batch size.</span><br><span class=\"line\">--erasing_p random erasing probability.</span><br></pre></td></tr></table></figure>\n\n<p>这里探究一下<code>train.py</code>中都做了些什么。<br>首先是读取数据和label。这里使用了<code>torch.utils.data.DataLoader</code>, 可以获得两个迭代器<code>dataloaders[&#39;train&#39;]</code> and <code>dataloaders[&#39;val&#39;]</code> 来读数据：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">image_datasets = &#123;&#125;</span><br><span class=\"line\">image_datasets[<span class=\"string\">'train'</span>] = datasets.ImageFolder(os.path.join(data_dir, <span class=\"string\">'train'</span>),</span><br><span class=\"line\">                                         data_transforms[<span class=\"string\">'train'</span>])</span><br><span class=\"line\">image_datasets[<span class=\"string\">'val'</span>] = datasets.ImageFolder(os.path.join(data_dir, <span class=\"string\">'val'</span>),</span><br><span class=\"line\">                                         data_transforms[<span class=\"string\">'val'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">dataloaders = &#123;x: torch.utils.data.DataLoader(image_datasets[x], batch_size=opt.batchsize,</span><br><span class=\"line\">                                            shuffle=<span class=\"literal\">True</span>, num_workers=<span class=\"number\">8</span>) <span class=\"comment\"># 8 workers may work faster</span></span><br><span class=\"line\">             <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> [<span class=\"string\">'train'</span>, <span class=\"string\">'val'</span>]&#125;</span><br><span class=\"line\">dataset_sizes = &#123;x: len(image_datasets[x]) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> [<span class=\"string\">'train'</span>, <span class=\"string\">'val'</span>]&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以下则是主要的代码来训练模型，一共只有20行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Iterate over data.</span></span><br><span class=\"line\">           <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> dataloaders[phase]:</span><br><span class=\"line\">               <span class=\"comment\"># get a batch of inputs</span></span><br><span class=\"line\">               inputs, labels = data</span><br><span class=\"line\">               now_batch_size,c,h,w = inputs.shape</span><br><span class=\"line\">               <span class=\"keyword\">if</span> now_batch_size&lt;opt.batchsize: <span class=\"comment\"># skip the last batch</span></span><br><span class=\"line\">                   <span class=\"keyword\">continue</span></span><br><span class=\"line\">               <span class=\"comment\"># print(inputs.shape)</span></span><br><span class=\"line\">               <span class=\"comment\"># wrap them in Variable, if gpu is used, we transform the data to cuda.</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> use_gpu:</span><br><span class=\"line\">                   inputs = Variable(inputs.cuda())</span><br><span class=\"line\">                   labels = Variable(labels.cuda())</span><br><span class=\"line\">               <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                   inputs, labels = Variable(inputs), Variable(labels)</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"comment\"># zero the parameter gradients</span></span><br><span class=\"line\">               optimizer.zero_grad()</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"comment\">#-------- forward --------</span></span><br><span class=\"line\">               outputs = model(inputs)</span><br><span class=\"line\">               _, preds = torch.max(outputs.data, <span class=\"number\">1</span>)</span><br><span class=\"line\">               loss = criterion(outputs, labels)</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"comment\">#-------- backward + optimize --------</span></span><br><span class=\"line\">               <span class=\"comment\"># only if in training phase</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> phase == <span class=\"string\">'train'</span>:</span><br><span class=\"line\">                   loss.backward()</span><br><span class=\"line\">                   optimizer.step()</span><br></pre></td></tr></table></figure>\n\n<p>每十轮，都会保存网络和更新loss曲线：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> epoch%<span class=\"number\">10</span> == <span class=\"number\">9</span>:</span><br><span class=\"line\">    save_network(model, epoch)</span><br><span class=\"line\">    draw_curve(epoch)</span><br></pre></td></tr></table></figure>\n\n<p>更多细节见train.py</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"代码描述\"><a href=\"#代码描述\" class=\"headerlink\" title=\"代码描述\"></a><strong>代码描述</strong></h1><p><strong>代码来源：</strong> <a href=\"https://github.com/layumi/Person_reID_baseline_pytorch\">https://github.com/layumi/Person_reID_baseline_pytorch</a></p>\n<p><code>详细信息可见README.md</code></p>\n<p>准备好了训练数据和网络结构，下面就可以训练了：</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python train.py --gpu_ids <span class=\"number\">0</span> --name ft_ResNet50 --train_all --batchsize <span class=\"number\">32</span>  --data_dir your_data_path</span><br><span class=\"line\">--gpu_ids which gpu to run.</span><br><span class=\"line\">--name the name of the model.</span><br><span class=\"line\">--data_dir the <span class=\"built_in\">path</span> of the training data.</span><br><span class=\"line\">--train_all using all images to train.</span><br><span class=\"line\">--batchsize batch size.</span><br><span class=\"line\">--erasing_p random erasing probability.</span><br></pre></td></tr></table></figure>\n\n<p>这里探究一下<code>train.py</code>中都做了些什么。<br>首先是读取数据和label。这里使用了<code>torch.utils.data.DataLoader</code>, 可以获得两个迭代器<code>dataloaders[&#39;train&#39;]</code> and <code>dataloaders[&#39;val&#39;]</code> 来读数据：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">image_datasets = &#123;&#125;</span><br><span class=\"line\">image_datasets[<span class=\"string\">'train'</span>] = datasets.ImageFolder(os.path.join(data_dir, <span class=\"string\">'train'</span>),</span><br><span class=\"line\">                                         data_transforms[<span class=\"string\">'train'</span>])</span><br><span class=\"line\">image_datasets[<span class=\"string\">'val'</span>] = datasets.ImageFolder(os.path.join(data_dir, <span class=\"string\">'val'</span>),</span><br><span class=\"line\">                                         data_transforms[<span class=\"string\">'val'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">dataloaders = &#123;x: torch.utils.data.DataLoader(image_datasets[x], batch_size=opt.batchsize,</span><br><span class=\"line\">                                            shuffle=<span class=\"literal\">True</span>, num_workers=<span class=\"number\">8</span>) <span class=\"comment\"># 8 workers may work faster</span></span><br><span class=\"line\">             <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> [<span class=\"string\">'train'</span>, <span class=\"string\">'val'</span>]&#125;</span><br><span class=\"line\">dataset_sizes = &#123;x: len(image_datasets[x]) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> [<span class=\"string\">'train'</span>, <span class=\"string\">'val'</span>]&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以下则是主要的代码来训练模型，一共只有20行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Iterate over data.</span></span><br><span class=\"line\">           <span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> dataloaders[phase]:</span><br><span class=\"line\">               <span class=\"comment\"># get a batch of inputs</span></span><br><span class=\"line\">               inputs, labels = data</span><br><span class=\"line\">               now_batch_size,c,h,w = inputs.shape</span><br><span class=\"line\">               <span class=\"keyword\">if</span> now_batch_size&lt;opt.batchsize: <span class=\"comment\"># skip the last batch</span></span><br><span class=\"line\">                   <span class=\"keyword\">continue</span></span><br><span class=\"line\">               <span class=\"comment\"># print(inputs.shape)</span></span><br><span class=\"line\">               <span class=\"comment\"># wrap them in Variable, if gpu is used, we transform the data to cuda.</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> use_gpu:</span><br><span class=\"line\">                   inputs = Variable(inputs.cuda())</span><br><span class=\"line\">                   labels = Variable(labels.cuda())</span><br><span class=\"line\">               <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                   inputs, labels = Variable(inputs), Variable(labels)</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"comment\"># zero the parameter gradients</span></span><br><span class=\"line\">               optimizer.zero_grad()</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"comment\">#-------- forward --------</span></span><br><span class=\"line\">               outputs = model(inputs)</span><br><span class=\"line\">               _, preds = torch.max(outputs.data, <span class=\"number\">1</span>)</span><br><span class=\"line\">               loss = criterion(outputs, labels)</span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"comment\">#-------- backward + optimize --------</span></span><br><span class=\"line\">               <span class=\"comment\"># only if in training phase</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> phase == <span class=\"string\">'train'</span>:</span><br><span class=\"line\">                   loss.backward()</span><br><span class=\"line\">                   optimizer.step()</span><br></pre></td></tr></table></figure>\n\n<p>每十轮，都会保存网络和更新loss曲线：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> epoch%<span class=\"number\">10</span> == <span class=\"number\">9</span>:</span><br><span class=\"line\">    save_network(model, epoch)</span><br><span class=\"line\">    draw_curve(epoch)</span><br></pre></td></tr></table></figure>\n\n<p>更多细节见train.py</p>\n"},{"title":"行人重识别代码实战（二）","date":"2019-08-23T16:00:00.000Z","_content":"\n# **代码描述**\n\n**代码来源：** <https://github.com/layumi/Person_reID_baseline_pytorch>\n\n`详细信息可见README.md`\n\n这次研究的是`model.py`原理是利用和修改预训练模型，代码原作者使用的是**ImageNet**预训练网络。\n\npytorch里引入方式如下：\n```python\nfrom torchvision import models\nmodel =models.resnet50(pretrained = True)\n```\n通过`print（model）`查看网络结构：\n![](https://s1.ax1x.com/2022/09/05/vT2fA0.png)\n\n实际使用时要做修改。考虑到Market1501训练集中有751个不同的人，所以要改变模型来训练Reid的分类器：\n```python\n# Define the ResNet50-based Model\nclass ft_net(nn.Module):\n\n    def __init__(self, class_num, droprate=0.5, stride=2):\n        super(ft_net, self).__init__()\n        model_ft = models.resnet50(pretrained=True)\n        # avg pooling to global pooling\n        if stride == 1:\n            model_ft.layer4[0].downsample[0].stride = (1,1)\n            model_ft.layer4[0].conv2.stride = (1,1)\n        model_ft.avgpool = nn.AdaptiveAvgPool2d((1,1))\n        self.model = model_ft\n        self.classifier = ClassBlock(2048, class_num, droprate)\n\n    def forward(self, x):\n        x = self.model.conv1(x)\n        x = self.model.bn1(x)\n        x = self.model.relu(x)\n        x = self.model.maxpool(x)\n        x = self.model.layer1(x)\n        x = self.model.layer2(x)\n        x = self.model.layer3(x)\n        x = self.model.layer4(x)\n        x = self.model.avgpool(x)\n        x = x.view(x.size(0), x.size(1))\n        x = self.classifier(x)\n        return x\n\n```\n更多细节在model.py中，里面还包含了其他的预训练模型以及对应的修改方法。","source":"_posts/行人重识别代码实战（二）.md","raw":"---\ntitle:  行人重识别代码实战（二）\ntags: [行人重识别,深度学习,图像处理]\ncategories: [深度学习]\ndate: 2019-8-24\n\n---\n\n# **代码描述**\n\n**代码来源：** <https://github.com/layumi/Person_reID_baseline_pytorch>\n\n`详细信息可见README.md`\n\n这次研究的是`model.py`原理是利用和修改预训练模型，代码原作者使用的是**ImageNet**预训练网络。\n\npytorch里引入方式如下：\n```python\nfrom torchvision import models\nmodel =models.resnet50(pretrained = True)\n```\n通过`print（model）`查看网络结构：\n![](https://s1.ax1x.com/2022/09/05/vT2fA0.png)\n\n实际使用时要做修改。考虑到Market1501训练集中有751个不同的人，所以要改变模型来训练Reid的分类器：\n```python\n# Define the ResNet50-based Model\nclass ft_net(nn.Module):\n\n    def __init__(self, class_num, droprate=0.5, stride=2):\n        super(ft_net, self).__init__()\n        model_ft = models.resnet50(pretrained=True)\n        # avg pooling to global pooling\n        if stride == 1:\n            model_ft.layer4[0].downsample[0].stride = (1,1)\n            model_ft.layer4[0].conv2.stride = (1,1)\n        model_ft.avgpool = nn.AdaptiveAvgPool2d((1,1))\n        self.model = model_ft\n        self.classifier = ClassBlock(2048, class_num, droprate)\n\n    def forward(self, x):\n        x = self.model.conv1(x)\n        x = self.model.bn1(x)\n        x = self.model.relu(x)\n        x = self.model.maxpool(x)\n        x = self.model.layer1(x)\n        x = self.model.layer2(x)\n        x = self.model.layer3(x)\n        x = self.model.layer4(x)\n        x = self.model.avgpool(x)\n        x = x.view(x.size(0), x.size(1))\n        x = self.classifier(x)\n        return x\n\n```\n更多细节在model.py中，里面还包含了其他的预训练模型以及对应的修改方法。","slug":"行人重识别代码实战（二）","published":1,"updated":"2022-09-05T05:55:51.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdmg009ga8vw7bser6e4","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"代码描述\"><a href=\"#代码描述\" class=\"headerlink\" title=\"代码描述\"></a><strong>代码描述</strong></h1><p><strong>代码来源：</strong> <a href=\"https://github.com/layumi/Person_reID_baseline_pytorch\">https://github.com/layumi/Person_reID_baseline_pytorch</a></p>\n<p><code>详细信息可见README.md</code></p>\n<p>这次研究的是<code>model.py</code>原理是利用和修改预训练模型，代码原作者使用的是<strong>ImageNet</strong>预训练网络。</p>\n<p>pytorch里引入方式如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torchvision <span class=\"keyword\">import</span> models</span><br><span class=\"line\">model =models.resnet50(pretrained = <span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>print（model）</code>查看网络结构：<br><img src=\"https://s1.ax1x.com/2022/09/05/vT2fA0.png\" alt></p>\n<p>实际使用时要做修改。考虑到Market1501训练集中有751个不同的人，所以要改变模型来训练Reid的分类器：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Define the ResNet50-based Model</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ft_net</span><span class=\"params\">(nn.Module)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, class_num, droprate=<span class=\"number\">0.5</span>, stride=<span class=\"number\">2</span>)</span>:</span></span><br><span class=\"line\">        super(ft_net, self).__init__()</span><br><span class=\"line\">        model_ft = models.resnet50(pretrained=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"comment\"># avg pooling to global pooling</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> stride == <span class=\"number\">1</span>:</span><br><span class=\"line\">            model_ft.layer4[<span class=\"number\">0</span>].downsample[<span class=\"number\">0</span>].stride = (<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">            model_ft.layer4[<span class=\"number\">0</span>].conv2.stride = (<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">        model_ft.avgpool = nn.AdaptiveAvgPool2d((<span class=\"number\">1</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\">        self.model = model_ft</span><br><span class=\"line\">        self.classifier = ClassBlock(<span class=\"number\">2048</span>, class_num, droprate)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        x = self.model.conv1(x)</span><br><span class=\"line\">        x = self.model.bn1(x)</span><br><span class=\"line\">        x = self.model.relu(x)</span><br><span class=\"line\">        x = self.model.maxpool(x)</span><br><span class=\"line\">        x = self.model.layer1(x)</span><br><span class=\"line\">        x = self.model.layer2(x)</span><br><span class=\"line\">        x = self.model.layer3(x)</span><br><span class=\"line\">        x = self.model.layer4(x)</span><br><span class=\"line\">        x = self.model.avgpool(x)</span><br><span class=\"line\">        x = x.view(x.size(<span class=\"number\">0</span>), x.size(<span class=\"number\">1</span>))</span><br><span class=\"line\">        x = self.classifier(x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br></pre></td></tr></table></figure>\n\n<p>更多细节在model.py中，里面还包含了其他的预训练模型以及对应的修改方法。</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"代码描述\"><a href=\"#代码描述\" class=\"headerlink\" title=\"代码描述\"></a><strong>代码描述</strong></h1><p><strong>代码来源：</strong> <a href=\"https://github.com/layumi/Person_reID_baseline_pytorch\">https://github.com/layumi/Person_reID_baseline_pytorch</a></p>\n<p><code>详细信息可见README.md</code></p>\n<p>这次研究的是<code>model.py</code>原理是利用和修改预训练模型，代码原作者使用的是<strong>ImageNet</strong>预训练网络。</p>\n<p>pytorch里引入方式如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> torchvision <span class=\"keyword\">import</span> models</span><br><span class=\"line\">model =models.resnet50(pretrained = <span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<p>通过<code>print（model）</code>查看网络结构：<br><img src=\"https://s1.ax1x.com/2022/09/05/vT2fA0.png\" alt></p>\n<p>实际使用时要做修改。考虑到Market1501训练集中有751个不同的人，所以要改变模型来训练Reid的分类器：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Define the ResNet50-based Model</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ft_net</span><span class=\"params\">(nn.Module)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, class_num, droprate=<span class=\"number\">0.5</span>, stride=<span class=\"number\">2</span>)</span>:</span></span><br><span class=\"line\">        super(ft_net, self).__init__()</span><br><span class=\"line\">        model_ft = models.resnet50(pretrained=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"comment\"># avg pooling to global pooling</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> stride == <span class=\"number\">1</span>:</span><br><span class=\"line\">            model_ft.layer4[<span class=\"number\">0</span>].downsample[<span class=\"number\">0</span>].stride = (<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">            model_ft.layer4[<span class=\"number\">0</span>].conv2.stride = (<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">        model_ft.avgpool = nn.AdaptiveAvgPool2d((<span class=\"number\">1</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\">        self.model = model_ft</span><br><span class=\"line\">        self.classifier = ClassBlock(<span class=\"number\">2048</span>, class_num, droprate)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        x = self.model.conv1(x)</span><br><span class=\"line\">        x = self.model.bn1(x)</span><br><span class=\"line\">        x = self.model.relu(x)</span><br><span class=\"line\">        x = self.model.maxpool(x)</span><br><span class=\"line\">        x = self.model.layer1(x)</span><br><span class=\"line\">        x = self.model.layer2(x)</span><br><span class=\"line\">        x = self.model.layer3(x)</span><br><span class=\"line\">        x = self.model.layer4(x)</span><br><span class=\"line\">        x = self.model.avgpool(x)</span><br><span class=\"line\">        x = x.view(x.size(<span class=\"number\">0</span>), x.size(<span class=\"number\">1</span>))</span><br><span class=\"line\">        x = self.classifier(x)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br></pre></td></tr></table></figure>\n\n<p>更多细节在model.py中，里面还包含了其他的预训练模型以及对应的修改方法。</p>\n"},{"title":"行人重识别初识","date":"2019-07-30T16:00:00.000Z","_content":"\n![](https://s1.ax1x.com/2022/09/05/vTRHG8.png)\n# 行人重识别是什么？\n**行人重识别（Person re-identification）**也称行人再识别，是利用计算机视觉技术判断图像或者视频序列中是否存在特定行人的技术。广泛被认为是一个图像检索的子问题。给定一个监控行人图像，检索跨设备下的该行人图像。旨在弥补目前固定的摄像头的视觉局限，并可与行人检测/行人跟踪技术相结合，可广泛应用于智能视频监控、智能安保等领域。由于不同摄像设备之间的差异，同时行人兼具刚性和柔性的特性 ，外观易受穿着、尺度、遮挡、姿态和视角等影响，使得行人重识别成为计算机视觉领域中一个既具有研究价值同时又极具挑战性的热门课题。\n\n------------\n# 技术难点\n- **能不能用人脸识别做重识别？**\n理论上是可以的。但是有两个原因导致人脸识别较难应用：首先，广泛存在后脑勺和侧脸的情况，做正脸的人脸识别难。其次，摄像头拍摄的像素可能不高，尤其是远景摄像头里面人脸截出来很可能都没有32x32的像素。所以人脸识别在实际的重识别应用中很可能有限。\n- **有些人靠衣服的颜色就可以判断出来了，还需要行人重识别么？**\n衣服颜色确实是行人重识别做出判断一个重要因素，但光靠颜色是不足的。首先，摄像头之间是有色差，并且会有光照的影响。其次，有撞衫（颜色相似）的人怎么办，要找细节，但比如颜色直方图这种统计的特征就把细节给忽略了。在多个数据集上的测试表明，光用颜色特征是难以达到50%的top1正确率的。\n\n- **总结**：\n1. 不同下摄像头造成行人外观的巨大变化；\n2. 目标遮挡（Occlusion）导致部分特征丢失；\n3. 不同的 View，Illumination 导致同一目标的特征差异；\n4. 不同目标衣服颜色近似、特征近似导致区分度下降；\n\n------------\n\n\n# 基本方法\n## 基于部件匹配的方法\n** 基于人体在三维空间中的结构（结构信息），人体图像可以进行分割，按部件来执行匹配。**\n- 常见方案是水平切割，就是将图像切为几个水平的条。由于人体身材往往差不多，所以可以用简单的水平条来做一一比较。\n- 在领域中做匹配，采用的是一个正方形的邻域。\n- 另一个较新的方案是先在人体上检测部件（手，腿，躯干等等）再进行匹配，这样的话可以减少位置的误差，但可能引入检测部件的误差。\n- 类似LSTM的attention匹配，但必须pair输入，测试时间较长，不适合快速图像检索。\n- 如图，类似人脸对齐，使用STN 将行人整个图像先利用热度图对齐，再匹配。\n![](https://s1.ax1x.com/2022/09/05/vTR7Pf.png)\n## 基于损失函数的方法\n**基于高层语义信息，设置一些辅助任务，帮助模型学习到好的特征表达。**\n-  身份损失（Identification loss）直接拿身份label做多类分类。\n-  鉴定损失（Verification loss）比较两个输入图像是否为同一人。\n- 身份损失（Identification loss）+鉴定损失（Verification loss），将以上两种损失函数混合。\n- 三样本损失 （Triplet loss） 以3个样本为一组，同一人的图像特征距离应小于不同人。\n- 加入属性任务 （attribute）比如判断是否背包，是男生还是女生等等。人们遇见陌生人也是利用这些属性来描述。\n- 数据增强 混合多数据集训练 ，加入训练集上 生成对抗网络（GAN）生成的数据，如图：\n ![](https://s1.ax1x.com/2022/09/05/vTRfrd.png)\n\n# 识别机制\n**如图**\n ![](https://s1.ax1x.com/2022/09/05/vTR5VI.png)\n首先要做的是**Detection**，也就是检测出行人，其实这一步数据集已经帮我们做到了，下面介绍数据集的时候会讲到不同数据集采用的不同的目标检测方法以及ID的标注方式。剩下的部分，就是要去**训练一个特征提取网络**，根据特征所计算的度量距离得到损失值，我们选用一个优化器去迭代找到loss最小值，并不断更新网络的参数达到学习的效果。在测试的时候，我们用将要检索的图片（称为**query**或者**probe**），在**底库gallery**中，根据计算出的特征距离进行排序，选出最TOP的几张图片，来达到目标检索的目的。\n\n下面两张图分别是**训练阶段**和**测试阶段**的示意图：\n ![](https://s1.ax1x.com/2022/09/05/vTRrUx.png)\n** 训练阶段**\n  ![](https://s1.ax1x.com/2022/09/05/vTR6PK.png)\n\n------------\n\n# 评测指标\n## rank-k\n`算法返回的排序列表中，前k位为存在检索目标则称为rank-k命中`\n**举个例子:**\n假如在人脸识别中，底库中有100个人，现在来了1个待识别的人脸（假如label为m1），与底库中的人脸比对后将底库中的人脸按照得分从高到低进行排序，我们发现：\n如果识别结果是m1、m2、m3、m4、m5……，则此时rank-1的正确率为100%；rank-2的正确率也为100%；rank-5的正确率也为100%；\n如果识别结果是m2、m1、m3、m4、m5……，则此时rank-1的正确率为0%；rank-2的正确率为100%；rank-5的正确率也为100%；\n如果识别结果是m2、m3、m4、m5、m1……，则此时rank-1的正确率为0%；rank-2的正确率为0%；rank-5的正确率为100%；\n同理，当待识别的人脸集合有很多时，则采取取平均值的做法。例如待识别人脸有3个（假如label为m1，m2，m3），同样对每一个人脸都有一个从高到低的得分，\n**比如：**\n人脸1结果为m1、m2、m3、m4、m5……，\n人脸2结果为m2、m1、m3、m4、m5……，\n人脸3结果m3、m1、m2、m4、m5……，\n则此时rank-1的正确率为（1+1+1）/3=100%；\nrank-2的正确率也为（1+1+1）/3=100%；\nrank-5的正确率也为（1+1+1）/3=100%；\n**比如：**\n人脸1结果为m4、m2、m3、m5、m6……，\n人脸2结果为m1、m2、m3、m4、m5……，\n人脸3结果m3、m1、m2、m4、m5……，\n则此时rank-1的正确率为（0+0+1）/3=33.33%；\nrank-2的正确率为（0+1+1）/3=66.66%；\nrank-5的正确率也为（0+1+1）/3=66.66%；\n\n## mAP(mean average precision)\n反应检索的人在数据库中所有正确的图片排在排序列表前面的程度，能更加全面的衡量ReID算法的性能。如下图，假设该检索行人在gallery中有10张图片，在检索的list中位置（rank）分别为1、2、3、4、5、6、7、8、9，则ap为(1/ 1 + 2 / 2 + 3 / 3 + 4 / 4 + 5 / 5 + 6 / 6 + 7 / 7 + 8 / 8 + 9 / 9) / 10 = 0.90；ap较大时，该行人的检索结果都相对靠前，对所有query的ap取平均值得到mAP\n ![](https://s1.ax1x.com/2022/09/05/vTRc8O.png)","source":"_posts/行人重识别初识.md","raw":"---\ntitle:  行人重识别初识\ntags: [行人重识别,深度学习,图像处理]\ncategories: [深度学习]\ndate: 2019-7-31\n\n---\n\n![](https://s1.ax1x.com/2022/09/05/vTRHG8.png)\n# 行人重识别是什么？\n**行人重识别（Person re-identification）**也称行人再识别，是利用计算机视觉技术判断图像或者视频序列中是否存在特定行人的技术。广泛被认为是一个图像检索的子问题。给定一个监控行人图像，检索跨设备下的该行人图像。旨在弥补目前固定的摄像头的视觉局限，并可与行人检测/行人跟踪技术相结合，可广泛应用于智能视频监控、智能安保等领域。由于不同摄像设备之间的差异，同时行人兼具刚性和柔性的特性 ，外观易受穿着、尺度、遮挡、姿态和视角等影响，使得行人重识别成为计算机视觉领域中一个既具有研究价值同时又极具挑战性的热门课题。\n\n------------\n# 技术难点\n- **能不能用人脸识别做重识别？**\n理论上是可以的。但是有两个原因导致人脸识别较难应用：首先，广泛存在后脑勺和侧脸的情况，做正脸的人脸识别难。其次，摄像头拍摄的像素可能不高，尤其是远景摄像头里面人脸截出来很可能都没有32x32的像素。所以人脸识别在实际的重识别应用中很可能有限。\n- **有些人靠衣服的颜色就可以判断出来了，还需要行人重识别么？**\n衣服颜色确实是行人重识别做出判断一个重要因素，但光靠颜色是不足的。首先，摄像头之间是有色差，并且会有光照的影响。其次，有撞衫（颜色相似）的人怎么办，要找细节，但比如颜色直方图这种统计的特征就把细节给忽略了。在多个数据集上的测试表明，光用颜色特征是难以达到50%的top1正确率的。\n\n- **总结**：\n1. 不同下摄像头造成行人外观的巨大变化；\n2. 目标遮挡（Occlusion）导致部分特征丢失；\n3. 不同的 View，Illumination 导致同一目标的特征差异；\n4. 不同目标衣服颜色近似、特征近似导致区分度下降；\n\n------------\n\n\n# 基本方法\n## 基于部件匹配的方法\n** 基于人体在三维空间中的结构（结构信息），人体图像可以进行分割，按部件来执行匹配。**\n- 常见方案是水平切割，就是将图像切为几个水平的条。由于人体身材往往差不多，所以可以用简单的水平条来做一一比较。\n- 在领域中做匹配，采用的是一个正方形的邻域。\n- 另一个较新的方案是先在人体上检测部件（手，腿，躯干等等）再进行匹配，这样的话可以减少位置的误差，但可能引入检测部件的误差。\n- 类似LSTM的attention匹配，但必须pair输入，测试时间较长，不适合快速图像检索。\n- 如图，类似人脸对齐，使用STN 将行人整个图像先利用热度图对齐，再匹配。\n![](https://s1.ax1x.com/2022/09/05/vTR7Pf.png)\n## 基于损失函数的方法\n**基于高层语义信息，设置一些辅助任务，帮助模型学习到好的特征表达。**\n-  身份损失（Identification loss）直接拿身份label做多类分类。\n-  鉴定损失（Verification loss）比较两个输入图像是否为同一人。\n- 身份损失（Identification loss）+鉴定损失（Verification loss），将以上两种损失函数混合。\n- 三样本损失 （Triplet loss） 以3个样本为一组，同一人的图像特征距离应小于不同人。\n- 加入属性任务 （attribute）比如判断是否背包，是男生还是女生等等。人们遇见陌生人也是利用这些属性来描述。\n- 数据增强 混合多数据集训练 ，加入训练集上 生成对抗网络（GAN）生成的数据，如图：\n ![](https://s1.ax1x.com/2022/09/05/vTRfrd.png)\n\n# 识别机制\n**如图**\n ![](https://s1.ax1x.com/2022/09/05/vTR5VI.png)\n首先要做的是**Detection**，也就是检测出行人，其实这一步数据集已经帮我们做到了，下面介绍数据集的时候会讲到不同数据集采用的不同的目标检测方法以及ID的标注方式。剩下的部分，就是要去**训练一个特征提取网络**，根据特征所计算的度量距离得到损失值，我们选用一个优化器去迭代找到loss最小值，并不断更新网络的参数达到学习的效果。在测试的时候，我们用将要检索的图片（称为**query**或者**probe**），在**底库gallery**中，根据计算出的特征距离进行排序，选出最TOP的几张图片，来达到目标检索的目的。\n\n下面两张图分别是**训练阶段**和**测试阶段**的示意图：\n ![](https://s1.ax1x.com/2022/09/05/vTRrUx.png)\n** 训练阶段**\n  ![](https://s1.ax1x.com/2022/09/05/vTR6PK.png)\n\n------------\n\n# 评测指标\n## rank-k\n`算法返回的排序列表中，前k位为存在检索目标则称为rank-k命中`\n**举个例子:**\n假如在人脸识别中，底库中有100个人，现在来了1个待识别的人脸（假如label为m1），与底库中的人脸比对后将底库中的人脸按照得分从高到低进行排序，我们发现：\n如果识别结果是m1、m2、m3、m4、m5……，则此时rank-1的正确率为100%；rank-2的正确率也为100%；rank-5的正确率也为100%；\n如果识别结果是m2、m1、m3、m4、m5……，则此时rank-1的正确率为0%；rank-2的正确率为100%；rank-5的正确率也为100%；\n如果识别结果是m2、m3、m4、m5、m1……，则此时rank-1的正确率为0%；rank-2的正确率为0%；rank-5的正确率为100%；\n同理，当待识别的人脸集合有很多时，则采取取平均值的做法。例如待识别人脸有3个（假如label为m1，m2，m3），同样对每一个人脸都有一个从高到低的得分，\n**比如：**\n人脸1结果为m1、m2、m3、m4、m5……，\n人脸2结果为m2、m1、m3、m4、m5……，\n人脸3结果m3、m1、m2、m4、m5……，\n则此时rank-1的正确率为（1+1+1）/3=100%；\nrank-2的正确率也为（1+1+1）/3=100%；\nrank-5的正确率也为（1+1+1）/3=100%；\n**比如：**\n人脸1结果为m4、m2、m3、m5、m6……，\n人脸2结果为m1、m2、m3、m4、m5……，\n人脸3结果m3、m1、m2、m4、m5……，\n则此时rank-1的正确率为（0+0+1）/3=33.33%；\nrank-2的正确率为（0+1+1）/3=66.66%；\nrank-5的正确率也为（0+1+1）/3=66.66%；\n\n## mAP(mean average precision)\n反应检索的人在数据库中所有正确的图片排在排序列表前面的程度，能更加全面的衡量ReID算法的性能。如下图，假设该检索行人在gallery中有10张图片，在检索的list中位置（rank）分别为1、2、3、4、5、6、7、8、9，则ap为(1/ 1 + 2 / 2 + 3 / 3 + 4 / 4 + 5 / 5 + 6 / 6 + 7 / 7 + 8 / 8 + 9 / 9) / 10 = 0.90；ap较大时，该行人的检索结果都相对靠前，对所有query的ap取平均值得到mAP\n ![](https://s1.ax1x.com/2022/09/05/vTRc8O.png)","slug":"行人重识别初识","published":1,"updated":"2022-09-05T06:07:37.485Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdmi009la8vwrxgi4979","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p><img src=\"https://s1.ax1x.com/2022/09/05/vTRHG8.png\" alt></p>\n<h1 id=\"行人重识别是什么？\"><a href=\"#行人重识别是什么？\" class=\"headerlink\" title=\"行人重识别是什么？\"></a>行人重识别是什么？</h1><p><strong>行人重识别（Person re-identification）</strong>也称行人再识别，是利用计算机视觉技术判断图像或者视频序列中是否存在特定行人的技术。广泛被认为是一个图像检索的子问题。给定一个监控行人图像，检索跨设备下的该行人图像。旨在弥补目前固定的摄像头的视觉局限，并可与行人检测/行人跟踪技术相结合，可广泛应用于智能视频监控、智能安保等领域。由于不同摄像设备之间的差异，同时行人兼具刚性和柔性的特性 ，外观易受穿着、尺度、遮挡、姿态和视角等影响，使得行人重识别成为计算机视觉领域中一个既具有研究价值同时又极具挑战性的热门课题。</p>\n<hr>\n<h1 id=\"技术难点\"><a href=\"#技术难点\" class=\"headerlink\" title=\"技术难点\"></a>技术难点</h1><ul>\n<li><p><strong>能不能用人脸识别做重识别？</strong><br>理论上是可以的。但是有两个原因导致人脸识别较难应用：首先，广泛存在后脑勺和侧脸的情况，做正脸的人脸识别难。其次，摄像头拍摄的像素可能不高，尤其是远景摄像头里面人脸截出来很可能都没有32x32的像素。所以人脸识别在实际的重识别应用中很可能有限。</p>\n</li>\n<li><p><strong>有些人靠衣服的颜色就可以判断出来了，还需要行人重识别么？</strong><br>衣服颜色确实是行人重识别做出判断一个重要因素，但光靠颜色是不足的。首先，摄像头之间是有色差，并且会有光照的影响。其次，有撞衫（颜色相似）的人怎么办，要找细节，但比如颜色直方图这种统计的特征就把细节给忽略了。在多个数据集上的测试表明，光用颜色特征是难以达到50%的top1正确率的。</p>\n</li>\n<li><p><strong>总结</strong>：</p>\n</li>\n</ul>\n<ol>\n<li>不同下摄像头造成行人外观的巨大变化；</li>\n<li>目标遮挡（Occlusion）导致部分特征丢失；</li>\n<li>不同的 View，Illumination 导致同一目标的特征差异；</li>\n<li>不同目标衣服颜色近似、特征近似导致区分度下降；</li>\n</ol>\n<hr>\n<h1 id=\"基本方法\"><a href=\"#基本方法\" class=\"headerlink\" title=\"基本方法\"></a>基本方法</h1><h2 id=\"基于部件匹配的方法\"><a href=\"#基于部件匹配的方法\" class=\"headerlink\" title=\"基于部件匹配的方法\"></a>基于部件匹配的方法</h2><p>** 基于人体在三维空间中的结构（结构信息），人体图像可以进行分割，按部件来执行匹配。**</p>\n<ul>\n<li>常见方案是水平切割，就是将图像切为几个水平的条。由于人体身材往往差不多，所以可以用简单的水平条来做一一比较。</li>\n<li>在领域中做匹配，采用的是一个正方形的邻域。</li>\n<li>另一个较新的方案是先在人体上检测部件（手，腿，躯干等等）再进行匹配，这样的话可以减少位置的误差，但可能引入检测部件的误差。</li>\n<li>类似LSTM的attention匹配，但必须pair输入，测试时间较长，不适合快速图像检索。</li>\n<li>如图，类似人脸对齐，使用STN 将行人整个图像先利用热度图对齐，再匹配。<br><img src=\"https://s1.ax1x.com/2022/09/05/vTR7Pf.png\" alt><h2 id=\"基于损失函数的方法\"><a href=\"#基于损失函数的方法\" class=\"headerlink\" title=\"基于损失函数的方法\"></a>基于损失函数的方法</h2></li>\n</ul>\n<p><strong>基于高层语义信息，设置一些辅助任务，帮助模型学习到好的特征表达。</strong></p>\n<ul>\n<li>身份损失（Identification loss）直接拿身份label做多类分类。</li>\n<li>鉴定损失（Verification loss）比较两个输入图像是否为同一人。</li>\n<li>身份损失（Identification loss）+鉴定损失（Verification loss），将以上两种损失函数混合。</li>\n<li>三样本损失 （Triplet loss） 以3个样本为一组，同一人的图像特征距离应小于不同人。</li>\n<li>加入属性任务 （attribute）比如判断是否背包，是男生还是女生等等。人们遇见陌生人也是利用这些属性来描述。</li>\n<li>数据增强 混合多数据集训练 ，加入训练集上 生成对抗网络（GAN）生成的数据，如图：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTRfrd.png\" alt></li>\n</ul>\n<h1 id=\"识别机制\"><a href=\"#识别机制\" class=\"headerlink\" title=\"识别机制\"></a>识别机制</h1><p><strong>如图</strong><br> <img src=\"https://s1.ax1x.com/2022/09/05/vTR5VI.png\" alt><br>首先要做的是<strong>Detection</strong>，也就是检测出行人，其实这一步数据集已经帮我们做到了，下面介绍数据集的时候会讲到不同数据集采用的不同的目标检测方法以及ID的标注方式。剩下的部分，就是要去<strong>训练一个特征提取网络</strong>，根据特征所计算的度量距离得到损失值，我们选用一个优化器去迭代找到loss最小值，并不断更新网络的参数达到学习的效果。在测试的时候，我们用将要检索的图片（称为<strong>query</strong>或者<strong>probe</strong>），在<strong>底库gallery</strong>中，根据计算出的特征距离进行排序，选出最TOP的几张图片，来达到目标检索的目的。</p>\n<p>下面两张图分别是<strong>训练阶段</strong>和<strong>测试阶段</strong>的示意图：<br> <img src=\"https://s1.ax1x.com/2022/09/05/vTRrUx.png\" alt><br>** 训练阶段**<br>  <img src=\"https://s1.ax1x.com/2022/09/05/vTR6PK.png\" alt></p>\n<hr>\n<h1 id=\"评测指标\"><a href=\"#评测指标\" class=\"headerlink\" title=\"评测指标\"></a>评测指标</h1><h2 id=\"rank-k\"><a href=\"#rank-k\" class=\"headerlink\" title=\"rank-k\"></a>rank-k</h2><p><code>算法返回的排序列表中，前k位为存在检索目标则称为rank-k命中</code><br><strong>举个例子:</strong><br>假如在人脸识别中，底库中有100个人，现在来了1个待识别的人脸（假如label为m1），与底库中的人脸比对后将底库中的人脸按照得分从高到低进行排序，我们发现：<br>如果识别结果是m1、m2、m3、m4、m5……，则此时rank-1的正确率为100%；rank-2的正确率也为100%；rank-5的正确率也为100%；<br>如果识别结果是m2、m1、m3、m4、m5……，则此时rank-1的正确率为0%；rank-2的正确率为100%；rank-5的正确率也为100%；<br>如果识别结果是m2、m3、m4、m5、m1……，则此时rank-1的正确率为0%；rank-2的正确率为0%；rank-5的正确率为100%；<br>同理，当待识别的人脸集合有很多时，则采取取平均值的做法。例如待识别人脸有3个（假如label为m1，m2，m3），同样对每一个人脸都有一个从高到低的得分，<br><strong>比如：</strong><br>人脸1结果为m1、m2、m3、m4、m5……，<br>人脸2结果为m2、m1、m3、m4、m5……，<br>人脸3结果m3、m1、m2、m4、m5……，<br>则此时rank-1的正确率为（1+1+1）/3=100%；<br>rank-2的正确率也为（1+1+1）/3=100%；<br>rank-5的正确率也为（1+1+1）/3=100%；<br><strong>比如：</strong><br>人脸1结果为m4、m2、m3、m5、m6……，<br>人脸2结果为m1、m2、m3、m4、m5……，<br>人脸3结果m3、m1、m2、m4、m5……，<br>则此时rank-1的正确率为（0+0+1）/3=33.33%；<br>rank-2的正确率为（0+1+1）/3=66.66%；<br>rank-5的正确率也为（0+1+1）/3=66.66%；</p>\n<h2 id=\"mAP-mean-average-precision\"><a href=\"#mAP-mean-average-precision\" class=\"headerlink\" title=\"mAP(mean average precision)\"></a>mAP(mean average precision)</h2><p>反应检索的人在数据库中所有正确的图片排在排序列表前面的程度，能更加全面的衡量ReID算法的性能。如下图，假设该检索行人在gallery中有10张图片，在检索的list中位置（rank）分别为1、2、3、4、5、6、7、8、9，则ap为(1/ 1 + 2 / 2 + 3 / 3 + 4 / 4 + 5 / 5 + 6 / 6 + 7 / 7 + 8 / 8 + 9 / 9) / 10 = 0.90；ap较大时，该行人的检索结果都相对靠前，对所有query的ap取平均值得到mAP<br> <img src=\"https://s1.ax1x.com/2022/09/05/vTRc8O.png\" alt></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<p><img src=\"https://s1.ax1x.com/2022/09/05/vTRHG8.png\" alt></p>\n<h1 id=\"行人重识别是什么？\"><a href=\"#行人重识别是什么？\" class=\"headerlink\" title=\"行人重识别是什么？\"></a>行人重识别是什么？</h1><p><strong>行人重识别（Person re-identification）</strong>也称行人再识别，是利用计算机视觉技术判断图像或者视频序列中是否存在特定行人的技术。广泛被认为是一个图像检索的子问题。给定一个监控行人图像，检索跨设备下的该行人图像。旨在弥补目前固定的摄像头的视觉局限，并可与行人检测/行人跟踪技术相结合，可广泛应用于智能视频监控、智能安保等领域。由于不同摄像设备之间的差异，同时行人兼具刚性和柔性的特性 ，外观易受穿着、尺度、遮挡、姿态和视角等影响，使得行人重识别成为计算机视觉领域中一个既具有研究价值同时又极具挑战性的热门课题。</p>\n<hr>\n<h1 id=\"技术难点\"><a href=\"#技术难点\" class=\"headerlink\" title=\"技术难点\"></a>技术难点</h1><ul>\n<li><p><strong>能不能用人脸识别做重识别？</strong><br>理论上是可以的。但是有两个原因导致人脸识别较难应用：首先，广泛存在后脑勺和侧脸的情况，做正脸的人脸识别难。其次，摄像头拍摄的像素可能不高，尤其是远景摄像头里面人脸截出来很可能都没有32x32的像素。所以人脸识别在实际的重识别应用中很可能有限。</p>\n</li>\n<li><p><strong>有些人靠衣服的颜色就可以判断出来了，还需要行人重识别么？</strong><br>衣服颜色确实是行人重识别做出判断一个重要因素，但光靠颜色是不足的。首先，摄像头之间是有色差，并且会有光照的影响。其次，有撞衫（颜色相似）的人怎么办，要找细节，但比如颜色直方图这种统计的特征就把细节给忽略了。在多个数据集上的测试表明，光用颜色特征是难以达到50%的top1正确率的。</p>\n</li>\n<li><p><strong>总结</strong>：</p>\n</li>\n</ul>\n<ol>\n<li>不同下摄像头造成行人外观的巨大变化；</li>\n<li>目标遮挡（Occlusion）导致部分特征丢失；</li>\n<li>不同的 View，Illumination 导致同一目标的特征差异；</li>\n<li>不同目标衣服颜色近似、特征近似导致区分度下降；</li>\n</ol>\n<hr>\n<h1 id=\"基本方法\"><a href=\"#基本方法\" class=\"headerlink\" title=\"基本方法\"></a>基本方法</h1><h2 id=\"基于部件匹配的方法\"><a href=\"#基于部件匹配的方法\" class=\"headerlink\" title=\"基于部件匹配的方法\"></a>基于部件匹配的方法</h2><p>** 基于人体在三维空间中的结构（结构信息），人体图像可以进行分割，按部件来执行匹配。**</p>\n<ul>\n<li>常见方案是水平切割，就是将图像切为几个水平的条。由于人体身材往往差不多，所以可以用简单的水平条来做一一比较。</li>\n<li>在领域中做匹配，采用的是一个正方形的邻域。</li>\n<li>另一个较新的方案是先在人体上检测部件（手，腿，躯干等等）再进行匹配，这样的话可以减少位置的误差，但可能引入检测部件的误差。</li>\n<li>类似LSTM的attention匹配，但必须pair输入，测试时间较长，不适合快速图像检索。</li>\n<li>如图，类似人脸对齐，使用STN 将行人整个图像先利用热度图对齐，再匹配。<br><img src=\"https://s1.ax1x.com/2022/09/05/vTR7Pf.png\" alt><h2 id=\"基于损失函数的方法\"><a href=\"#基于损失函数的方法\" class=\"headerlink\" title=\"基于损失函数的方法\"></a>基于损失函数的方法</h2></li>\n</ul>\n<p><strong>基于高层语义信息，设置一些辅助任务，帮助模型学习到好的特征表达。</strong></p>\n<ul>\n<li>身份损失（Identification loss）直接拿身份label做多类分类。</li>\n<li>鉴定损失（Verification loss）比较两个输入图像是否为同一人。</li>\n<li>身份损失（Identification loss）+鉴定损失（Verification loss），将以上两种损失函数混合。</li>\n<li>三样本损失 （Triplet loss） 以3个样本为一组，同一人的图像特征距离应小于不同人。</li>\n<li>加入属性任务 （attribute）比如判断是否背包，是男生还是女生等等。人们遇见陌生人也是利用这些属性来描述。</li>\n<li>数据增强 混合多数据集训练 ，加入训练集上 生成对抗网络（GAN）生成的数据，如图：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTRfrd.png\" alt></li>\n</ul>\n<h1 id=\"识别机制\"><a href=\"#识别机制\" class=\"headerlink\" title=\"识别机制\"></a>识别机制</h1><p><strong>如图</strong><br> <img src=\"https://s1.ax1x.com/2022/09/05/vTR5VI.png\" alt><br>首先要做的是<strong>Detection</strong>，也就是检测出行人，其实这一步数据集已经帮我们做到了，下面介绍数据集的时候会讲到不同数据集采用的不同的目标检测方法以及ID的标注方式。剩下的部分，就是要去<strong>训练一个特征提取网络</strong>，根据特征所计算的度量距离得到损失值，我们选用一个优化器去迭代找到loss最小值，并不断更新网络的参数达到学习的效果。在测试的时候，我们用将要检索的图片（称为<strong>query</strong>或者<strong>probe</strong>），在<strong>底库gallery</strong>中，根据计算出的特征距离进行排序，选出最TOP的几张图片，来达到目标检索的目的。</p>\n<p>下面两张图分别是<strong>训练阶段</strong>和<strong>测试阶段</strong>的示意图：<br> <img src=\"https://s1.ax1x.com/2022/09/05/vTRrUx.png\" alt><br>** 训练阶段**<br>  <img src=\"https://s1.ax1x.com/2022/09/05/vTR6PK.png\" alt></p>\n<hr>\n<h1 id=\"评测指标\"><a href=\"#评测指标\" class=\"headerlink\" title=\"评测指标\"></a>评测指标</h1><h2 id=\"rank-k\"><a href=\"#rank-k\" class=\"headerlink\" title=\"rank-k\"></a>rank-k</h2><p><code>算法返回的排序列表中，前k位为存在检索目标则称为rank-k命中</code><br><strong>举个例子:</strong><br>假如在人脸识别中，底库中有100个人，现在来了1个待识别的人脸（假如label为m1），与底库中的人脸比对后将底库中的人脸按照得分从高到低进行排序，我们发现：<br>如果识别结果是m1、m2、m3、m4、m5……，则此时rank-1的正确率为100%；rank-2的正确率也为100%；rank-5的正确率也为100%；<br>如果识别结果是m2、m1、m3、m4、m5……，则此时rank-1的正确率为0%；rank-2的正确率为100%；rank-5的正确率也为100%；<br>如果识别结果是m2、m3、m4、m5、m1……，则此时rank-1的正确率为0%；rank-2的正确率为0%；rank-5的正确率为100%；<br>同理，当待识别的人脸集合有很多时，则采取取平均值的做法。例如待识别人脸有3个（假如label为m1，m2，m3），同样对每一个人脸都有一个从高到低的得分，<br><strong>比如：</strong><br>人脸1结果为m1、m2、m3、m4、m5……，<br>人脸2结果为m2、m1、m3、m4、m5……，<br>人脸3结果m3、m1、m2、m4、m5……，<br>则此时rank-1的正确率为（1+1+1）/3=100%；<br>rank-2的正确率也为（1+1+1）/3=100%；<br>rank-5的正确率也为（1+1+1）/3=100%；<br><strong>比如：</strong><br>人脸1结果为m4、m2、m3、m5、m6……，<br>人脸2结果为m1、m2、m3、m4、m5……，<br>人脸3结果m3、m1、m2、m4、m5……，<br>则此时rank-1的正确率为（0+0+1）/3=33.33%；<br>rank-2的正确率为（0+1+1）/3=66.66%；<br>rank-5的正确率也为（0+1+1）/3=66.66%；</p>\n<h2 id=\"mAP-mean-average-precision\"><a href=\"#mAP-mean-average-precision\" class=\"headerlink\" title=\"mAP(mean average precision)\"></a>mAP(mean average precision)</h2><p>反应检索的人在数据库中所有正确的图片排在排序列表前面的程度，能更加全面的衡量ReID算法的性能。如下图，假设该检索行人在gallery中有10张图片，在检索的list中位置（rank）分别为1、2、3、4、5、6、7、8、9，则ap为(1/ 1 + 2 / 2 + 3 / 3 + 4 / 4 + 5 / 5 + 6 / 6 + 7 / 7 + 8 / 8 + 9 / 9) / 10 = 0.90；ap较大时，该行人的检索结果都相对靠前，对所有query的ap取平均值得到mAP<br> <img src=\"https://s1.ax1x.com/2022/09/05/vTRc8O.png\" alt></p>\n"},{"title":"Deep Low-Resolution Person Re-Identification阅读笔记","date":"2020-07-14T16:00:00.000Z","_content":"# 标题及作者\n![](https://s3.bmp.ovh/imgs/2022/09/05/aa8ff46d06e6cc07.png)\n## 方法概况及总结\n### 整体架构\n![整体架构](https://s3.bmp.ovh/imgs/2022/09/05/d2fb70f26d148a01.png)\nSING CNN由SR子网(d)和Re-ID子网(e)两部分组成，在模型训练中部署三个流，分别以LR图像(a)、合成LR图像(b)和HR图像(c)作为输入。中间流(b)作为连接图像SR (d)和人Re-ID (e)学习任务的桥梁。\n### 损失函数构建\n损失函数由**SR损失**和**Re-ID**损失联合构建，公式如下：\n![SR损失函数 ](https://s3.bmp.ovh/imgs/2022/09/05/2dfc3dd0e6857260.png)\n![Re-ID损失函数](https://s3.bmp.ovh/imgs/2022/09/05/f440a4392562d931.png)\nL-reid式中：\n![ ](https://s3.bmp.ovh/imgs/2022/09/05/aed7d2417f060ddb.png)\n最后构建联合损失函数如下：\n![联合损失函数](https://s3.bmp.ovh/imgs/2022/09/05/194e32f193a83d27.png)\n### 训练及验证\n训练阶段上文已叙述，主要讲一下验证时的操作。验证时输入为2张图片，分别来自gallery的HR图片和probe的LR图片。对于HR图片，直接经过Re-ID子网提取特征；对于LR图片，需要先进行SR子网的增强再经过Re-ID提取特征，最后度量L2距离。\n### 实验结果\n参考以下四张表格：\n![和现行方法的比较](https://s3.bmp.ovh/imgs/2022/09/05/da5efeb01914b978.png)\n![组合网络的比较](https://s3.bmp.ovh/imgs/2022/09/05/3d02d144e35fddb2.png)\n![加入自制LR的效果](https://s3.bmp.ovh/imgs/2022/09/05/26de61efb1180638.png)\n![加入多尺度的效果](https://s3.bmp.ovh/imgs/2022/09/05/5bb3aae90e39a19b.png)","source":"_posts/论文笔记(一).md","raw":"---\ntitle: Deep Low-Resolution Person Re-Identification阅读笔记\ntags: [行人重识别,论文]\ncategories: [论文笔记]\ndate: 2020-7-15\n\n---\n# 标题及作者\n![](https://s3.bmp.ovh/imgs/2022/09/05/aa8ff46d06e6cc07.png)\n## 方法概况及总结\n### 整体架构\n![整体架构](https://s3.bmp.ovh/imgs/2022/09/05/d2fb70f26d148a01.png)\nSING CNN由SR子网(d)和Re-ID子网(e)两部分组成，在模型训练中部署三个流，分别以LR图像(a)、合成LR图像(b)和HR图像(c)作为输入。中间流(b)作为连接图像SR (d)和人Re-ID (e)学习任务的桥梁。\n### 损失函数构建\n损失函数由**SR损失**和**Re-ID**损失联合构建，公式如下：\n![SR损失函数 ](https://s3.bmp.ovh/imgs/2022/09/05/2dfc3dd0e6857260.png)\n![Re-ID损失函数](https://s3.bmp.ovh/imgs/2022/09/05/f440a4392562d931.png)\nL-reid式中：\n![ ](https://s3.bmp.ovh/imgs/2022/09/05/aed7d2417f060ddb.png)\n最后构建联合损失函数如下：\n![联合损失函数](https://s3.bmp.ovh/imgs/2022/09/05/194e32f193a83d27.png)\n### 训练及验证\n训练阶段上文已叙述，主要讲一下验证时的操作。验证时输入为2张图片，分别来自gallery的HR图片和probe的LR图片。对于HR图片，直接经过Re-ID子网提取特征；对于LR图片，需要先进行SR子网的增强再经过Re-ID提取特征，最后度量L2距离。\n### 实验结果\n参考以下四张表格：\n![和现行方法的比较](https://s3.bmp.ovh/imgs/2022/09/05/da5efeb01914b978.png)\n![组合网络的比较](https://s3.bmp.ovh/imgs/2022/09/05/3d02d144e35fddb2.png)\n![加入自制LR的效果](https://s3.bmp.ovh/imgs/2022/09/05/26de61efb1180638.png)\n![加入多尺度的效果](https://s3.bmp.ovh/imgs/2022/09/05/5bb3aae90e39a19b.png)","slug":"论文笔记(一)","published":1,"updated":"2022-09-05T04:59:17.747Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdmj009na8vwguu89dqu","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"标题及作者\"><a href=\"#标题及作者\" class=\"headerlink\" title=\"标题及作者\"></a>标题及作者</h1><p><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/aa8ff46d06e6cc07.png\" alt></p>\n<h2 id=\"方法概况及总结\"><a href=\"#方法概况及总结\" class=\"headerlink\" title=\"方法概况及总结\"></a>方法概况及总结</h2><h3 id=\"整体架构\"><a href=\"#整体架构\" class=\"headerlink\" title=\"整体架构\"></a>整体架构</h3><p><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/d2fb70f26d148a01.png\" alt=\"整体架构\"><br>SING CNN由SR子网(d)和Re-ID子网(e)两部分组成，在模型训练中部署三个流，分别以LR图像(a)、合成LR图像(b)和HR图像(c)作为输入。中间流(b)作为连接图像SR (d)和人Re-ID (e)学习任务的桥梁。</p>\n<h3 id=\"损失函数构建\"><a href=\"#损失函数构建\" class=\"headerlink\" title=\"损失函数构建\"></a>损失函数构建</h3><p>损失函数由<strong>SR损失</strong>和<strong>Re-ID</strong>损失联合构建，公式如下：<br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/2dfc3dd0e6857260.png\" alt=\"SR损失函数 \"><br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/f440a4392562d931.png\" alt=\"Re-ID损失函数\"><br>L-reid式中：<br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/aed7d2417f060ddb.png\" alt=\" \"><br>最后构建联合损失函数如下：<br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/194e32f193a83d27.png\" alt=\"联合损失函数\"></p>\n<h3 id=\"训练及验证\"><a href=\"#训练及验证\" class=\"headerlink\" title=\"训练及验证\"></a>训练及验证</h3><p>训练阶段上文已叙述，主要讲一下验证时的操作。验证时输入为2张图片，分别来自gallery的HR图片和probe的LR图片。对于HR图片，直接经过Re-ID子网提取特征；对于LR图片，需要先进行SR子网的增强再经过Re-ID提取特征，最后度量L2距离。</p>\n<h3 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h3><p>参考以下四张表格：<br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/da5efeb01914b978.png\" alt=\"和现行方法的比较\"><br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/3d02d144e35fddb2.png\" alt=\"组合网络的比较\"><br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/26de61efb1180638.png\" alt=\"加入自制LR的效果\"><br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/5bb3aae90e39a19b.png\" alt=\"加入多尺度的效果\"></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"标题及作者\"><a href=\"#标题及作者\" class=\"headerlink\" title=\"标题及作者\"></a>标题及作者</h1><p><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/aa8ff46d06e6cc07.png\" alt></p>\n<h2 id=\"方法概况及总结\"><a href=\"#方法概况及总结\" class=\"headerlink\" title=\"方法概况及总结\"></a>方法概况及总结</h2><h3 id=\"整体架构\"><a href=\"#整体架构\" class=\"headerlink\" title=\"整体架构\"></a>整体架构</h3><p><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/d2fb70f26d148a01.png\" alt=\"整体架构\"><br>SING CNN由SR子网(d)和Re-ID子网(e)两部分组成，在模型训练中部署三个流，分别以LR图像(a)、合成LR图像(b)和HR图像(c)作为输入。中间流(b)作为连接图像SR (d)和人Re-ID (e)学习任务的桥梁。</p>\n<h3 id=\"损失函数构建\"><a href=\"#损失函数构建\" class=\"headerlink\" title=\"损失函数构建\"></a>损失函数构建</h3><p>损失函数由<strong>SR损失</strong>和<strong>Re-ID</strong>损失联合构建，公式如下：<br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/2dfc3dd0e6857260.png\" alt=\"SR损失函数 \"><br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/f440a4392562d931.png\" alt=\"Re-ID损失函数\"><br>L-reid式中：<br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/aed7d2417f060ddb.png\" alt=\" \"><br>最后构建联合损失函数如下：<br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/194e32f193a83d27.png\" alt=\"联合损失函数\"></p>\n<h3 id=\"训练及验证\"><a href=\"#训练及验证\" class=\"headerlink\" title=\"训练及验证\"></a>训练及验证</h3><p>训练阶段上文已叙述，主要讲一下验证时的操作。验证时输入为2张图片，分别来自gallery的HR图片和probe的LR图片。对于HR图片，直接经过Re-ID子网提取特征；对于LR图片，需要先进行SR子网的增强再经过Re-ID提取特征，最后度量L2距离。</p>\n<h3 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h3><p>参考以下四张表格：<br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/da5efeb01914b978.png\" alt=\"和现行方法的比较\"><br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/3d02d144e35fddb2.png\" alt=\"组合网络的比较\"><br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/26de61efb1180638.png\" alt=\"加入自制LR的效果\"><br><img src=\"https://s3.bmp.ovh/imgs/2022/09/05/5bb3aae90e39a19b.png\" alt=\"加入多尺度的效果\"></p>\n"},{"title":"论文笔记（一）","date":"2020-07-13T16:00:00.000Z","_content":"**CVPR2017**\n# **Re-ranking Person Re-identification with k-reciprocal Encoding**\n![](https://s1.ax1x.com/2022/09/05/vTREUP.png)\n# Abstract\n当将person re-ID看作一个检索过程时，re-ranking是提高其准确性的关键步骤。然而，在re-ID社区中，对re-ranking的努力有限，尤其是那些全自动、无监督的解决方案。在本文中，我们提出了一种k-reciprocal编码方法来re-ranking re-ID的结果。我们的假设是，如果一个gallery图像与k-reciprocal nearest neighbors中的probe查询相似，则更有可能是真正的匹配。具体地，给定图像，通过将其k-reciprocal nearest neighbors编码为单个向量来计算k-reciprocal特征，该向量用于在杰卡德距离（Jaccard Distance：用来衡量两个集合差异性的一种指标）下re-ranking。最终的距离计算为原始距离和杰卡德距离的组合。我们的re-ranking方法不需要任何人工交互或任何标记数据，因此适用于大规模数据集。在大型Market-1501、CUHK03、MARS和PRW数据集上的实验证实了我们方法的有效性。\n\n------------\n\n\n# Introduction\nperson re-ID是计算机视觉中的一个具有挑战性的课题。一般来说，re-ID可以被看作是一个检索问题。给定一个probe person，我们希望在gallery中搜索包含处于跨相机模式下的相同行人的图像。在获得初始排序列表之后，好的实践包括添加re-ranking步骤，期望相关图像将获得更高的排名。因此，本文将重点放在re-ranking问题上。\n\nre-ranking主要是在通用实例检索generic instance retrieval[5、14、34、35]中进行研究。许多re-ranking主方法的主要优点是它可以在不需要额外训练样本的情况下实现，并且可以应用于任何初始ranking结果。\n\nre-ranking的有效性在很大程度上取决于初始ranking列表initial ranking list的质量。许多先前的工作利用了初始排序列表[5，14，34，35，43，44]中排名靠前的图像(例如k-最近邻，k-nearest neighbors)之间的相似关系。一个基本的假设是，如果返回的图像在probe的k个最近邻内排序，那么它很可能是一个真正的匹配，可用于随后的re-ranking。然而，情况可能偏离最佳情况：错误匹配很可能包括在probe的k个最近邻中。例如，在图1中，P1、P2、P3和P4是4个查询图probe的真实匹配，但是它们都不包括在top-4中。我们观察到一些错误匹配（N1-N6）获得高排名。结果，直接使用top-k的图像可能在re-ranking系统中引入噪声并损害最终结果。\n![](https://s1.ax1x.com/2022/09/05/vTReC8.png)\n在文献中，k-reciprocal nearest neighbor[14，34]是解决上述问题的有效方法，即被错误匹配污染的top-k图像。当两个图像被称为k-reciprocal nearest neighbor时，当另一个图像作为probe时，它们都被排到top-k。因此，k-reciprocal nearest neighbor作为两个图像是否正确匹配的更严格规则。在图1中，我们观察到probe是正确匹配图像的reciprocal neighbor，而不是错误匹配图像的reciprocal neighbor。该观察识别初始排序列表initial ranking list中的正确匹配，以改善重新排序re-ranking结果。\n\n基于以上考虑，本文提出了一种基于k-reciprocal编码的re-ID re-ranking方法。我们的方法包括三个步骤。首先，将加权的k-reciprocal neighbor 集编码为一个向量，形成k-reciprocal特征。然后，两个图像之间的Jaccard距离可以通过它们的k-reciprocal特征来计算。其次，为了获得更鲁棒的k-reciprocal特征，我们改进了一种局部查询扩展方法（a local query expansion approach），以进一步改善re-ID性能。最后，最终距离的计算为原始距离和Jaccard距离的加权集合。随后，它被用来获取re-ranking列表。所提出的方法的框架如图2所示。综上所述，本文的贡献是：\n1. 我们提出了一个k-reciprocal特征通过编码k-reciprocal特征到一个单一的向量。重re-ranking过程可以很容易地通过向量比较来执行。\n2. 我们的方法不需要任何人工交互或带标注的数据，并且可以自动和无监督的方式应用于任何人person re-ID ranking结果。\n3. 该方法有效地提高了Market-1501、CUHK03、MARS和PRW等数据集上的person re-ID性能。特别地，我们在rank-1和mAP上实现了Market-1501的最先进的精度。\n![](https://s1.ax1x.com/2022/09/05/vTRV4f.png)\n\n# Related Work\n\n我们推荐感兴趣的读者阅读[3，50]以详细回顾person re-ID。在此，我们重点研究用于目标检索，特别是用于re-ID的re-ranking方法。\n\n**Re-ranking for object retrieval.**\nRe-ranking方法已被成功地研究以提高目标检索精度[51]。许多工作利用k-nearest neighbors来探索相似关系来解决re-ranking问题。[5]提出了average query expansion (AQE)方法，该方法通过对top-k返回结果中的向量进行平均，得到一个新的查询向量（query vector），用于对数据库进行重新查询。为了利用远离查询图像的负样本，Arandjelović和Zisserman[1]改进了discriminative query expansion (DQE)，使用线性SVM来获得权重向量。从决策边界的距离被用来修改初始排序表（initial ranking list）。[35]利用初始排序表的k-nearest neighbors作为新查询（queries）来生成新的排序表。每个图像的新得分根据其在产生的排序表中的位置来计算。最近，稀疏上下文激活sparse contextual activation (SCA)[2]提出将neighbor set编码为向量，并通过广义Jaccard距离来表示样本的相似性。为了防止错误匹配对top-k图像的污染，[14，34]中采用了k-reciprocal nearest neighbors的概念。在[14]中提出了上下文不相似性度量contextual dissimilarity measure (CDM)，通过迭代正则化每个点到其邻域的平均距离来细化相似性。[34]正式提出k-reciprocal nearest neighbors的概念。k-reciprocal nearest neighbors被认为是高度相关的候选，用于构造闭集（closed set）以re-ranking数据集的其余部分。我们的工作从两个方面背离了这两个方法。我们不像文献[14]那样对最近邻（nearest neighborhood）关系进行对称化来细化相似度，也不像文献[34]那样直接将k-reciprocal nearest neighbors看作高阶样本。相反，我们通过比较两幅图像的k-reciprocal nearest neighbors来计算它们之间的新距离。\n\n**Re-ranking for re-ID.**\n大多数现有的person re-ID方法主要集中于特征表示[41，12，23，48，21]或度量学习[23，17，9，32，45]。最近，一些研究者[10，33，28，24，49，20，11，19，42，44]已经注意到在re-ID社区中基于re-ranking的方法。[20]通过分析每对图像的近邻（near neighbors）的相关信息和直接信息，建立re-ranking模型。在[11]中，通过联合考虑排序列表中的内容和上下文信息，学习无监督的重新排序模型，有效地去除了模糊样本，提高了re-ID的性能。[19]提出一种双向排序（bidirectional ranking）方法，利用计算得到的新相似度作为内容相似度和上下文相似度的融合，对初始排序表进行修正。最近，利用不同基线（different baseline）方法的公共最近邻来re-ranking任务[42，44]。[42]将全局特征和局部特征的公共最近邻作为新查询（queries），通过集合全局特征和局部特征的新排序列表来修改初始排序列表。在[44]中，利用k-nearest neighbor set从不同的baseline方法计算相似度和不相似度，然后进行相似度和不相似度的集合来优化初始排序表。上述方法在re-ranking方面继续取得进展，有望为将来从k-nearest neighbors发现进一步的信息作出贡献。然而，使用k-nearest neighbors直接实现re-ranking可能限制整体性能，因为常常包括错误匹配。**为了解决这个问题，本文研究了k-reciprocal neighbors在person re-ID中的重要性，从而设计了一个简单而有效的re-ranking方法。**\n\n# Proposed Approach\n\n### Problem Definition\n给定查询图像`p`和`gallery set`（包含N幅图像，`G = {gi | i = 1, 2, ...N }`），`p`和`gi`之间的原始距离可以用马氏距离（Mahalanobis distance）衡量：\n![](https://s1.ax1x.com/2022/09/05/vTR9jH.png)\n其中，`xp`个`xg`分别代表查询图`p`和**检测集gallery**中`gi`的外观特征，`M`是半正定矩阵。\n初始排序表：\n![](https://s1.ax1x.com/2022/09/05/vTRpge.png)\n可根据`probe p`和`gallery gi`之间的成对原始距离得到，其中：\n![](https://s1.ax1x.com/2022/09/05/vTRPud.png)\n我们的目标是对`L(p,G)`进行**re-rank**，使更多的正样本排在`top`列表中，从而提高person re-ID的性能。\n\n### K -reciprocal Nearest Neighbors\n我们将`N(p,k)`定义为一个probe p的k-nearest neighbors（i.e. 排序列表的top-k samples）：\n![](https://s1.ax1x.com/2022/09/05/vTRFHI.png)\n其中，`|.|`表示集合中候选的数目。k-reciprocal nearest neighbors `R(p, k)`可以定义为：\n![](https://s1.ax1x.com/2022/09/05/vTRAEt.png)\n**根据前面的描述，k-reciprocal nearest neighbors比k-nearest neighbors和probe p更相关**。然而，由于照明、姿态、视图和遮挡的变化，正样本图像可能被从k-nearest neighbors中排除，并且随后不被包括在k-reciprocal nearest neighbors中。为了解决这个问题，我们根据以下条件将`R(p，k)`中每个候选项的`1/2 k-reciprocal nearest neighbors`增量地添加到更鲁棒的集合`R*(p，k)`中：\n![](https://s1.ax1x.com/2022/09/05/vTRiDA.png)\n\n# Conclusion\n\n在本文中，我们解决person re-ID的re-ranking问题。通过将k-reciprocal nearest neighbors编码为单个向量，我们提出了k-reciprocal特征，从而可以通过向量比较容易地执行re-ranking过程。为了从相似样本中获取相似关系，提出了局部扩展查询（local expansion query）以获得更鲁棒的k-reciprocal特征。基于原始距离和Jaccard距离的组合的最终距离有效地提高了多个大规模数据集上的re-ID性能。值得一提的是，我们的方法是全自动和无监督的，并且可以很容易地实现任何ranking结果。","source":"_posts/论文笔记（一）.md","raw":"---\ntitle:  论文笔记（一）\ntags: [行人重识别,深度学习,图像处理]\ncategories: [论文笔记]\ndate: 2020-7-14\n\n---\n**CVPR2017**\n# **Re-ranking Person Re-identification with k-reciprocal Encoding**\n![](https://s1.ax1x.com/2022/09/05/vTREUP.png)\n# Abstract\n当将person re-ID看作一个检索过程时，re-ranking是提高其准确性的关键步骤。然而，在re-ID社区中，对re-ranking的努力有限，尤其是那些全自动、无监督的解决方案。在本文中，我们提出了一种k-reciprocal编码方法来re-ranking re-ID的结果。我们的假设是，如果一个gallery图像与k-reciprocal nearest neighbors中的probe查询相似，则更有可能是真正的匹配。具体地，给定图像，通过将其k-reciprocal nearest neighbors编码为单个向量来计算k-reciprocal特征，该向量用于在杰卡德距离（Jaccard Distance：用来衡量两个集合差异性的一种指标）下re-ranking。最终的距离计算为原始距离和杰卡德距离的组合。我们的re-ranking方法不需要任何人工交互或任何标记数据，因此适用于大规模数据集。在大型Market-1501、CUHK03、MARS和PRW数据集上的实验证实了我们方法的有效性。\n\n------------\n\n\n# Introduction\nperson re-ID是计算机视觉中的一个具有挑战性的课题。一般来说，re-ID可以被看作是一个检索问题。给定一个probe person，我们希望在gallery中搜索包含处于跨相机模式下的相同行人的图像。在获得初始排序列表之后，好的实践包括添加re-ranking步骤，期望相关图像将获得更高的排名。因此，本文将重点放在re-ranking问题上。\n\nre-ranking主要是在通用实例检索generic instance retrieval[5、14、34、35]中进行研究。许多re-ranking主方法的主要优点是它可以在不需要额外训练样本的情况下实现，并且可以应用于任何初始ranking结果。\n\nre-ranking的有效性在很大程度上取决于初始ranking列表initial ranking list的质量。许多先前的工作利用了初始排序列表[5，14，34，35，43，44]中排名靠前的图像(例如k-最近邻，k-nearest neighbors)之间的相似关系。一个基本的假设是，如果返回的图像在probe的k个最近邻内排序，那么它很可能是一个真正的匹配，可用于随后的re-ranking。然而，情况可能偏离最佳情况：错误匹配很可能包括在probe的k个最近邻中。例如，在图1中，P1、P2、P3和P4是4个查询图probe的真实匹配，但是它们都不包括在top-4中。我们观察到一些错误匹配（N1-N6）获得高排名。结果，直接使用top-k的图像可能在re-ranking系统中引入噪声并损害最终结果。\n![](https://s1.ax1x.com/2022/09/05/vTReC8.png)\n在文献中，k-reciprocal nearest neighbor[14，34]是解决上述问题的有效方法，即被错误匹配污染的top-k图像。当两个图像被称为k-reciprocal nearest neighbor时，当另一个图像作为probe时，它们都被排到top-k。因此，k-reciprocal nearest neighbor作为两个图像是否正确匹配的更严格规则。在图1中，我们观察到probe是正确匹配图像的reciprocal neighbor，而不是错误匹配图像的reciprocal neighbor。该观察识别初始排序列表initial ranking list中的正确匹配，以改善重新排序re-ranking结果。\n\n基于以上考虑，本文提出了一种基于k-reciprocal编码的re-ID re-ranking方法。我们的方法包括三个步骤。首先，将加权的k-reciprocal neighbor 集编码为一个向量，形成k-reciprocal特征。然后，两个图像之间的Jaccard距离可以通过它们的k-reciprocal特征来计算。其次，为了获得更鲁棒的k-reciprocal特征，我们改进了一种局部查询扩展方法（a local query expansion approach），以进一步改善re-ID性能。最后，最终距离的计算为原始距离和Jaccard距离的加权集合。随后，它被用来获取re-ranking列表。所提出的方法的框架如图2所示。综上所述，本文的贡献是：\n1. 我们提出了一个k-reciprocal特征通过编码k-reciprocal特征到一个单一的向量。重re-ranking过程可以很容易地通过向量比较来执行。\n2. 我们的方法不需要任何人工交互或带标注的数据，并且可以自动和无监督的方式应用于任何人person re-ID ranking结果。\n3. 该方法有效地提高了Market-1501、CUHK03、MARS和PRW等数据集上的person re-ID性能。特别地，我们在rank-1和mAP上实现了Market-1501的最先进的精度。\n![](https://s1.ax1x.com/2022/09/05/vTRV4f.png)\n\n# Related Work\n\n我们推荐感兴趣的读者阅读[3，50]以详细回顾person re-ID。在此，我们重点研究用于目标检索，特别是用于re-ID的re-ranking方法。\n\n**Re-ranking for object retrieval.**\nRe-ranking方法已被成功地研究以提高目标检索精度[51]。许多工作利用k-nearest neighbors来探索相似关系来解决re-ranking问题。[5]提出了average query expansion (AQE)方法，该方法通过对top-k返回结果中的向量进行平均，得到一个新的查询向量（query vector），用于对数据库进行重新查询。为了利用远离查询图像的负样本，Arandjelović和Zisserman[1]改进了discriminative query expansion (DQE)，使用线性SVM来获得权重向量。从决策边界的距离被用来修改初始排序表（initial ranking list）。[35]利用初始排序表的k-nearest neighbors作为新查询（queries）来生成新的排序表。每个图像的新得分根据其在产生的排序表中的位置来计算。最近，稀疏上下文激活sparse contextual activation (SCA)[2]提出将neighbor set编码为向量，并通过广义Jaccard距离来表示样本的相似性。为了防止错误匹配对top-k图像的污染，[14，34]中采用了k-reciprocal nearest neighbors的概念。在[14]中提出了上下文不相似性度量contextual dissimilarity measure (CDM)，通过迭代正则化每个点到其邻域的平均距离来细化相似性。[34]正式提出k-reciprocal nearest neighbors的概念。k-reciprocal nearest neighbors被认为是高度相关的候选，用于构造闭集（closed set）以re-ranking数据集的其余部分。我们的工作从两个方面背离了这两个方法。我们不像文献[14]那样对最近邻（nearest neighborhood）关系进行对称化来细化相似度，也不像文献[34]那样直接将k-reciprocal nearest neighbors看作高阶样本。相反，我们通过比较两幅图像的k-reciprocal nearest neighbors来计算它们之间的新距离。\n\n**Re-ranking for re-ID.**\n大多数现有的person re-ID方法主要集中于特征表示[41，12，23，48，21]或度量学习[23，17，9，32，45]。最近，一些研究者[10，33，28，24，49，20，11，19，42，44]已经注意到在re-ID社区中基于re-ranking的方法。[20]通过分析每对图像的近邻（near neighbors）的相关信息和直接信息，建立re-ranking模型。在[11]中，通过联合考虑排序列表中的内容和上下文信息，学习无监督的重新排序模型，有效地去除了模糊样本，提高了re-ID的性能。[19]提出一种双向排序（bidirectional ranking）方法，利用计算得到的新相似度作为内容相似度和上下文相似度的融合，对初始排序表进行修正。最近，利用不同基线（different baseline）方法的公共最近邻来re-ranking任务[42，44]。[42]将全局特征和局部特征的公共最近邻作为新查询（queries），通过集合全局特征和局部特征的新排序列表来修改初始排序列表。在[44]中，利用k-nearest neighbor set从不同的baseline方法计算相似度和不相似度，然后进行相似度和不相似度的集合来优化初始排序表。上述方法在re-ranking方面继续取得进展，有望为将来从k-nearest neighbors发现进一步的信息作出贡献。然而，使用k-nearest neighbors直接实现re-ranking可能限制整体性能，因为常常包括错误匹配。**为了解决这个问题，本文研究了k-reciprocal neighbors在person re-ID中的重要性，从而设计了一个简单而有效的re-ranking方法。**\n\n# Proposed Approach\n\n### Problem Definition\n给定查询图像`p`和`gallery set`（包含N幅图像，`G = {gi | i = 1, 2, ...N }`），`p`和`gi`之间的原始距离可以用马氏距离（Mahalanobis distance）衡量：\n![](https://s1.ax1x.com/2022/09/05/vTR9jH.png)\n其中，`xp`个`xg`分别代表查询图`p`和**检测集gallery**中`gi`的外观特征，`M`是半正定矩阵。\n初始排序表：\n![](https://s1.ax1x.com/2022/09/05/vTRpge.png)\n可根据`probe p`和`gallery gi`之间的成对原始距离得到，其中：\n![](https://s1.ax1x.com/2022/09/05/vTRPud.png)\n我们的目标是对`L(p,G)`进行**re-rank**，使更多的正样本排在`top`列表中，从而提高person re-ID的性能。\n\n### K -reciprocal Nearest Neighbors\n我们将`N(p,k)`定义为一个probe p的k-nearest neighbors（i.e. 排序列表的top-k samples）：\n![](https://s1.ax1x.com/2022/09/05/vTRFHI.png)\n其中，`|.|`表示集合中候选的数目。k-reciprocal nearest neighbors `R(p, k)`可以定义为：\n![](https://s1.ax1x.com/2022/09/05/vTRAEt.png)\n**根据前面的描述，k-reciprocal nearest neighbors比k-nearest neighbors和probe p更相关**。然而，由于照明、姿态、视图和遮挡的变化，正样本图像可能被从k-nearest neighbors中排除，并且随后不被包括在k-reciprocal nearest neighbors中。为了解决这个问题，我们根据以下条件将`R(p，k)`中每个候选项的`1/2 k-reciprocal nearest neighbors`增量地添加到更鲁棒的集合`R*(p，k)`中：\n![](https://s1.ax1x.com/2022/09/05/vTRiDA.png)\n\n# Conclusion\n\n在本文中，我们解决person re-ID的re-ranking问题。通过将k-reciprocal nearest neighbors编码为单个向量，我们提出了k-reciprocal特征，从而可以通过向量比较容易地执行re-ranking过程。为了从相似样本中获取相似关系，提出了局部扩展查询（local expansion query）以获得更鲁棒的k-reciprocal特征。基于原始距离和Jaccard距离的组合的最终距离有效地提高了多个大规模数据集上的re-ID性能。值得一提的是，我们的方法是全自动和无监督的，并且可以很容易地实现任何ranking结果。","slug":"论文笔记（一）","published":1,"updated":"2022-09-05T06:03:27.516Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdmk009sa8vw79q5f5n8","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><p><strong>CVPR2017</strong></p>\n<h1 id=\"Re-ranking-Person-Re-identification-with-k-reciprocal-Encoding\"><a href=\"#Re-ranking-Person-Re-identification-with-k-reciprocal-Encoding\" class=\"headerlink\" title=\"Re-ranking Person Re-identification with k-reciprocal Encoding\"></a><strong>Re-ranking Person Re-identification with k-reciprocal Encoding</strong></h1><p><img src=\"https://s1.ax1x.com/2022/09/05/vTREUP.png\" alt></p>\n<h1 id=\"Abstract\"><a href=\"#Abstract\" class=\"headerlink\" title=\"Abstract\"></a>Abstract</h1><p>当将person re-ID看作一个检索过程时，re-ranking是提高其准确性的关键步骤。然而，在re-ID社区中，对re-ranking的努力有限，尤其是那些全自动、无监督的解决方案。在本文中，我们提出了一种k-reciprocal编码方法来re-ranking re-ID的结果。我们的假设是，如果一个gallery图像与k-reciprocal nearest neighbors中的probe查询相似，则更有可能是真正的匹配。具体地，给定图像，通过将其k-reciprocal nearest neighbors编码为单个向量来计算k-reciprocal特征，该向量用于在杰卡德距离（Jaccard Distance：用来衡量两个集合差异性的一种指标）下re-ranking。最终的距离计算为原始距离和杰卡德距离的组合。我们的re-ranking方法不需要任何人工交互或任何标记数据，因此适用于大规模数据集。在大型Market-1501、CUHK03、MARS和PRW数据集上的实验证实了我们方法的有效性。</p>\n<hr>\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>person re-ID是计算机视觉中的一个具有挑战性的课题。一般来说，re-ID可以被看作是一个检索问题。给定一个probe person，我们希望在gallery中搜索包含处于跨相机模式下的相同行人的图像。在获得初始排序列表之后，好的实践包括添加re-ranking步骤，期望相关图像将获得更高的排名。因此，本文将重点放在re-ranking问题上。</p>\n<p>re-ranking主要是在通用实例检索generic instance retrieval[5、14、34、35]中进行研究。许多re-ranking主方法的主要优点是它可以在不需要额外训练样本的情况下实现，并且可以应用于任何初始ranking结果。</p>\n<p>re-ranking的有效性在很大程度上取决于初始ranking列表initial ranking list的质量。许多先前的工作利用了初始排序列表[5，14，34，35，43，44]中排名靠前的图像(例如k-最近邻，k-nearest neighbors)之间的相似关系。一个基本的假设是，如果返回的图像在probe的k个最近邻内排序，那么它很可能是一个真正的匹配，可用于随后的re-ranking。然而，情况可能偏离最佳情况：错误匹配很可能包括在probe的k个最近邻中。例如，在图1中，P1、P2、P3和P4是4个查询图probe的真实匹配，但是它们都不包括在top-4中。我们观察到一些错误匹配（N1-N6）获得高排名。结果，直接使用top-k的图像可能在re-ranking系统中引入噪声并损害最终结果。<br><img src=\"https://s1.ax1x.com/2022/09/05/vTReC8.png\" alt><br>在文献中，k-reciprocal nearest neighbor[14，34]是解决上述问题的有效方法，即被错误匹配污染的top-k图像。当两个图像被称为k-reciprocal nearest neighbor时，当另一个图像作为probe时，它们都被排到top-k。因此，k-reciprocal nearest neighbor作为两个图像是否正确匹配的更严格规则。在图1中，我们观察到probe是正确匹配图像的reciprocal neighbor，而不是错误匹配图像的reciprocal neighbor。该观察识别初始排序列表initial ranking list中的正确匹配，以改善重新排序re-ranking结果。</p>\n<p>基于以上考虑，本文提出了一种基于k-reciprocal编码的re-ID re-ranking方法。我们的方法包括三个步骤。首先，将加权的k-reciprocal neighbor 集编码为一个向量，形成k-reciprocal特征。然后，两个图像之间的Jaccard距离可以通过它们的k-reciprocal特征来计算。其次，为了获得更鲁棒的k-reciprocal特征，我们改进了一种局部查询扩展方法（a local query expansion approach），以进一步改善re-ID性能。最后，最终距离的计算为原始距离和Jaccard距离的加权集合。随后，它被用来获取re-ranking列表。所提出的方法的框架如图2所示。综上所述，本文的贡献是：</p>\n<ol>\n<li>我们提出了一个k-reciprocal特征通过编码k-reciprocal特征到一个单一的向量。重re-ranking过程可以很容易地通过向量比较来执行。</li>\n<li>我们的方法不需要任何人工交互或带标注的数据，并且可以自动和无监督的方式应用于任何人person re-ID ranking结果。</li>\n<li>该方法有效地提高了Market-1501、CUHK03、MARS和PRW等数据集上的person re-ID性能。特别地，我们在rank-1和mAP上实现了Market-1501的最先进的精度。<br><img src=\"https://s1.ax1x.com/2022/09/05/vTRV4f.png\" alt></li>\n</ol>\n<h1 id=\"Related-Work\"><a href=\"#Related-Work\" class=\"headerlink\" title=\"Related Work\"></a>Related Work</h1><p>我们推荐感兴趣的读者阅读[3，50]以详细回顾person re-ID。在此，我们重点研究用于目标检索，特别是用于re-ID的re-ranking方法。</p>\n<p><strong>Re-ranking for object retrieval.</strong><br>Re-ranking方法已被成功地研究以提高目标检索精度[51]。许多工作利用k-nearest neighbors来探索相似关系来解决re-ranking问题。[5]提出了average query expansion (AQE)方法，该方法通过对top-k返回结果中的向量进行平均，得到一个新的查询向量（query vector），用于对数据库进行重新查询。为了利用远离查询图像的负样本，Arandjelović和Zisserman[1]改进了discriminative query expansion (DQE)，使用线性SVM来获得权重向量。从决策边界的距离被用来修改初始排序表（initial ranking list）。[35]利用初始排序表的k-nearest neighbors作为新查询（queries）来生成新的排序表。每个图像的新得分根据其在产生的排序表中的位置来计算。最近，稀疏上下文激活sparse contextual activation (SCA)[2]提出将neighbor set编码为向量，并通过广义Jaccard距离来表示样本的相似性。为了防止错误匹配对top-k图像的污染，[14，34]中采用了k-reciprocal nearest neighbors的概念。在[14]中提出了上下文不相似性度量contextual dissimilarity measure (CDM)，通过迭代正则化每个点到其邻域的平均距离来细化相似性。[34]正式提出k-reciprocal nearest neighbors的概念。k-reciprocal nearest neighbors被认为是高度相关的候选，用于构造闭集（closed set）以re-ranking数据集的其余部分。我们的工作从两个方面背离了这两个方法。我们不像文献[14]那样对最近邻（nearest neighborhood）关系进行对称化来细化相似度，也不像文献[34]那样直接将k-reciprocal nearest neighbors看作高阶样本。相反，我们通过比较两幅图像的k-reciprocal nearest neighbors来计算它们之间的新距离。</p>\n<p><strong>Re-ranking for re-ID.</strong><br>大多数现有的person re-ID方法主要集中于特征表示[41，12，23，48，21]或度量学习[23，17，9，32，45]。最近，一些研究者[10，33，28，24，49，20，11，19，42，44]已经注意到在re-ID社区中基于re-ranking的方法。[20]通过分析每对图像的近邻（near neighbors）的相关信息和直接信息，建立re-ranking模型。在[11]中，通过联合考虑排序列表中的内容和上下文信息，学习无监督的重新排序模型，有效地去除了模糊样本，提高了re-ID的性能。[19]提出一种双向排序（bidirectional ranking）方法，利用计算得到的新相似度作为内容相似度和上下文相似度的融合，对初始排序表进行修正。最近，利用不同基线（different baseline）方法的公共最近邻来re-ranking任务[42，44]。[42]将全局特征和局部特征的公共最近邻作为新查询（queries），通过集合全局特征和局部特征的新排序列表来修改初始排序列表。在[44]中，利用k-nearest neighbor set从不同的baseline方法计算相似度和不相似度，然后进行相似度和不相似度的集合来优化初始排序表。上述方法在re-ranking方面继续取得进展，有望为将来从k-nearest neighbors发现进一步的信息作出贡献。然而，使用k-nearest neighbors直接实现re-ranking可能限制整体性能，因为常常包括错误匹配。<strong>为了解决这个问题，本文研究了k-reciprocal neighbors在person re-ID中的重要性，从而设计了一个简单而有效的re-ranking方法。</strong></p>\n<h1 id=\"Proposed-Approach\"><a href=\"#Proposed-Approach\" class=\"headerlink\" title=\"Proposed Approach\"></a>Proposed Approach</h1><h3 id=\"Problem-Definition\"><a href=\"#Problem-Definition\" class=\"headerlink\" title=\"Problem Definition\"></a>Problem Definition</h3><p>给定查询图像<code>p</code>和<code>gallery set</code>（包含N幅图像，<code>G = {gi | i = 1, 2, ...N }</code>），<code>p</code>和<code>gi</code>之间的原始距离可以用马氏距离（Mahalanobis distance）衡量：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTR9jH.png\" alt><br>其中，<code>xp</code>个<code>xg</code>分别代表查询图<code>p</code>和<strong>检测集gallery</strong>中<code>gi</code>的外观特征，<code>M</code>是半正定矩阵。<br>初始排序表：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTRpge.png\" alt><br>可根据<code>probe p</code>和<code>gallery gi</code>之间的成对原始距离得到，其中：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTRPud.png\" alt><br>我们的目标是对<code>L(p,G)</code>进行<strong>re-rank</strong>，使更多的正样本排在<code>top</code>列表中，从而提高person re-ID的性能。</p>\n<h3 id=\"K-reciprocal-Nearest-Neighbors\"><a href=\"#K-reciprocal-Nearest-Neighbors\" class=\"headerlink\" title=\"K -reciprocal Nearest Neighbors\"></a>K -reciprocal Nearest Neighbors</h3><p>我们将<code>N(p,k)</code>定义为一个probe p的k-nearest neighbors（i.e. 排序列表的top-k samples）：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTRFHI.png\" alt><br>其中，<code>|.|</code>表示集合中候选的数目。k-reciprocal nearest neighbors <code>R(p, k)</code>可以定义为：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTRAEt.png\" alt><br><strong>根据前面的描述，k-reciprocal nearest neighbors比k-nearest neighbors和probe p更相关</strong>。然而，由于照明、姿态、视图和遮挡的变化，正样本图像可能被从k-nearest neighbors中排除，并且随后不被包括在k-reciprocal nearest neighbors中。为了解决这个问题，我们根据以下条件将<code>R(p，k)</code>中每个候选项的<code>1/2 k-reciprocal nearest neighbors</code>增量地添加到更鲁棒的集合<code>R*(p，k)</code>中：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTRiDA.png\" alt></p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>在本文中，我们解决person re-ID的re-ranking问题。通过将k-reciprocal nearest neighbors编码为单个向量，我们提出了k-reciprocal特征，从而可以通过向量比较容易地执行re-ranking过程。为了从相似样本中获取相似关系，提出了局部扩展查询（local expansion query）以获得更鲁棒的k-reciprocal特征。基于原始距离和Jaccard距离的组合的最终距离有效地提高了多个大规模数据集上的re-ID性能。值得一提的是，我们的方法是全自动和无监督的，并且可以很容易地实现任何ranking结果。</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<p><strong>CVPR2017</strong></p>\n<h1 id=\"Re-ranking-Person-Re-identification-with-k-reciprocal-Encoding\"><a href=\"#Re-ranking-Person-Re-identification-with-k-reciprocal-Encoding\" class=\"headerlink\" title=\"Re-ranking Person Re-identification with k-reciprocal Encoding\"></a><strong>Re-ranking Person Re-identification with k-reciprocal Encoding</strong></h1><p><img src=\"https://s1.ax1x.com/2022/09/05/vTREUP.png\" alt></p>\n<h1 id=\"Abstract\"><a href=\"#Abstract\" class=\"headerlink\" title=\"Abstract\"></a>Abstract</h1><p>当将person re-ID看作一个检索过程时，re-ranking是提高其准确性的关键步骤。然而，在re-ID社区中，对re-ranking的努力有限，尤其是那些全自动、无监督的解决方案。在本文中，我们提出了一种k-reciprocal编码方法来re-ranking re-ID的结果。我们的假设是，如果一个gallery图像与k-reciprocal nearest neighbors中的probe查询相似，则更有可能是真正的匹配。具体地，给定图像，通过将其k-reciprocal nearest neighbors编码为单个向量来计算k-reciprocal特征，该向量用于在杰卡德距离（Jaccard Distance：用来衡量两个集合差异性的一种指标）下re-ranking。最终的距离计算为原始距离和杰卡德距离的组合。我们的re-ranking方法不需要任何人工交互或任何标记数据，因此适用于大规模数据集。在大型Market-1501、CUHK03、MARS和PRW数据集上的实验证实了我们方法的有效性。</p>\n<hr>\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>person re-ID是计算机视觉中的一个具有挑战性的课题。一般来说，re-ID可以被看作是一个检索问题。给定一个probe person，我们希望在gallery中搜索包含处于跨相机模式下的相同行人的图像。在获得初始排序列表之后，好的实践包括添加re-ranking步骤，期望相关图像将获得更高的排名。因此，本文将重点放在re-ranking问题上。</p>\n<p>re-ranking主要是在通用实例检索generic instance retrieval[5、14、34、35]中进行研究。许多re-ranking主方法的主要优点是它可以在不需要额外训练样本的情况下实现，并且可以应用于任何初始ranking结果。</p>\n<p>re-ranking的有效性在很大程度上取决于初始ranking列表initial ranking list的质量。许多先前的工作利用了初始排序列表[5，14，34，35，43，44]中排名靠前的图像(例如k-最近邻，k-nearest neighbors)之间的相似关系。一个基本的假设是，如果返回的图像在probe的k个最近邻内排序，那么它很可能是一个真正的匹配，可用于随后的re-ranking。然而，情况可能偏离最佳情况：错误匹配很可能包括在probe的k个最近邻中。例如，在图1中，P1、P2、P3和P4是4个查询图probe的真实匹配，但是它们都不包括在top-4中。我们观察到一些错误匹配（N1-N6）获得高排名。结果，直接使用top-k的图像可能在re-ranking系统中引入噪声并损害最终结果。<br><img src=\"https://s1.ax1x.com/2022/09/05/vTReC8.png\" alt><br>在文献中，k-reciprocal nearest neighbor[14，34]是解决上述问题的有效方法，即被错误匹配污染的top-k图像。当两个图像被称为k-reciprocal nearest neighbor时，当另一个图像作为probe时，它们都被排到top-k。因此，k-reciprocal nearest neighbor作为两个图像是否正确匹配的更严格规则。在图1中，我们观察到probe是正确匹配图像的reciprocal neighbor，而不是错误匹配图像的reciprocal neighbor。该观察识别初始排序列表initial ranking list中的正确匹配，以改善重新排序re-ranking结果。</p>\n<p>基于以上考虑，本文提出了一种基于k-reciprocal编码的re-ID re-ranking方法。我们的方法包括三个步骤。首先，将加权的k-reciprocal neighbor 集编码为一个向量，形成k-reciprocal特征。然后，两个图像之间的Jaccard距离可以通过它们的k-reciprocal特征来计算。其次，为了获得更鲁棒的k-reciprocal特征，我们改进了一种局部查询扩展方法（a local query expansion approach），以进一步改善re-ID性能。最后，最终距离的计算为原始距离和Jaccard距离的加权集合。随后，它被用来获取re-ranking列表。所提出的方法的框架如图2所示。综上所述，本文的贡献是：</p>\n<ol>\n<li>我们提出了一个k-reciprocal特征通过编码k-reciprocal特征到一个单一的向量。重re-ranking过程可以很容易地通过向量比较来执行。</li>\n<li>我们的方法不需要任何人工交互或带标注的数据，并且可以自动和无监督的方式应用于任何人person re-ID ranking结果。</li>\n<li>该方法有效地提高了Market-1501、CUHK03、MARS和PRW等数据集上的person re-ID性能。特别地，我们在rank-1和mAP上实现了Market-1501的最先进的精度。<br><img src=\"https://s1.ax1x.com/2022/09/05/vTRV4f.png\" alt></li>\n</ol>\n<h1 id=\"Related-Work\"><a href=\"#Related-Work\" class=\"headerlink\" title=\"Related Work\"></a>Related Work</h1><p>我们推荐感兴趣的读者阅读[3，50]以详细回顾person re-ID。在此，我们重点研究用于目标检索，特别是用于re-ID的re-ranking方法。</p>\n<p><strong>Re-ranking for object retrieval.</strong><br>Re-ranking方法已被成功地研究以提高目标检索精度[51]。许多工作利用k-nearest neighbors来探索相似关系来解决re-ranking问题。[5]提出了average query expansion (AQE)方法，该方法通过对top-k返回结果中的向量进行平均，得到一个新的查询向量（query vector），用于对数据库进行重新查询。为了利用远离查询图像的负样本，Arandjelović和Zisserman[1]改进了discriminative query expansion (DQE)，使用线性SVM来获得权重向量。从决策边界的距离被用来修改初始排序表（initial ranking list）。[35]利用初始排序表的k-nearest neighbors作为新查询（queries）来生成新的排序表。每个图像的新得分根据其在产生的排序表中的位置来计算。最近，稀疏上下文激活sparse contextual activation (SCA)[2]提出将neighbor set编码为向量，并通过广义Jaccard距离来表示样本的相似性。为了防止错误匹配对top-k图像的污染，[14，34]中采用了k-reciprocal nearest neighbors的概念。在[14]中提出了上下文不相似性度量contextual dissimilarity measure (CDM)，通过迭代正则化每个点到其邻域的平均距离来细化相似性。[34]正式提出k-reciprocal nearest neighbors的概念。k-reciprocal nearest neighbors被认为是高度相关的候选，用于构造闭集（closed set）以re-ranking数据集的其余部分。我们的工作从两个方面背离了这两个方法。我们不像文献[14]那样对最近邻（nearest neighborhood）关系进行对称化来细化相似度，也不像文献[34]那样直接将k-reciprocal nearest neighbors看作高阶样本。相反，我们通过比较两幅图像的k-reciprocal nearest neighbors来计算它们之间的新距离。</p>\n<p><strong>Re-ranking for re-ID.</strong><br>大多数现有的person re-ID方法主要集中于特征表示[41，12，23，48，21]或度量学习[23，17，9，32，45]。最近，一些研究者[10，33，28，24，49，20，11，19，42，44]已经注意到在re-ID社区中基于re-ranking的方法。[20]通过分析每对图像的近邻（near neighbors）的相关信息和直接信息，建立re-ranking模型。在[11]中，通过联合考虑排序列表中的内容和上下文信息，学习无监督的重新排序模型，有效地去除了模糊样本，提高了re-ID的性能。[19]提出一种双向排序（bidirectional ranking）方法，利用计算得到的新相似度作为内容相似度和上下文相似度的融合，对初始排序表进行修正。最近，利用不同基线（different baseline）方法的公共最近邻来re-ranking任务[42，44]。[42]将全局特征和局部特征的公共最近邻作为新查询（queries），通过集合全局特征和局部特征的新排序列表来修改初始排序列表。在[44]中，利用k-nearest neighbor set从不同的baseline方法计算相似度和不相似度，然后进行相似度和不相似度的集合来优化初始排序表。上述方法在re-ranking方面继续取得进展，有望为将来从k-nearest neighbors发现进一步的信息作出贡献。然而，使用k-nearest neighbors直接实现re-ranking可能限制整体性能，因为常常包括错误匹配。<strong>为了解决这个问题，本文研究了k-reciprocal neighbors在person re-ID中的重要性，从而设计了一个简单而有效的re-ranking方法。</strong></p>\n<h1 id=\"Proposed-Approach\"><a href=\"#Proposed-Approach\" class=\"headerlink\" title=\"Proposed Approach\"></a>Proposed Approach</h1><h3 id=\"Problem-Definition\"><a href=\"#Problem-Definition\" class=\"headerlink\" title=\"Problem Definition\"></a>Problem Definition</h3><p>给定查询图像<code>p</code>和<code>gallery set</code>（包含N幅图像，<code>G = {gi | i = 1, 2, ...N }</code>），<code>p</code>和<code>gi</code>之间的原始距离可以用马氏距离（Mahalanobis distance）衡量：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTR9jH.png\" alt><br>其中，<code>xp</code>个<code>xg</code>分别代表查询图<code>p</code>和<strong>检测集gallery</strong>中<code>gi</code>的外观特征，<code>M</code>是半正定矩阵。<br>初始排序表：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTRpge.png\" alt><br>可根据<code>probe p</code>和<code>gallery gi</code>之间的成对原始距离得到，其中：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTRPud.png\" alt><br>我们的目标是对<code>L(p,G)</code>进行<strong>re-rank</strong>，使更多的正样本排在<code>top</code>列表中，从而提高person re-ID的性能。</p>\n<h3 id=\"K-reciprocal-Nearest-Neighbors\"><a href=\"#K-reciprocal-Nearest-Neighbors\" class=\"headerlink\" title=\"K -reciprocal Nearest Neighbors\"></a>K -reciprocal Nearest Neighbors</h3><p>我们将<code>N(p,k)</code>定义为一个probe p的k-nearest neighbors（i.e. 排序列表的top-k samples）：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTRFHI.png\" alt><br>其中，<code>|.|</code>表示集合中候选的数目。k-reciprocal nearest neighbors <code>R(p, k)</code>可以定义为：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTRAEt.png\" alt><br><strong>根据前面的描述，k-reciprocal nearest neighbors比k-nearest neighbors和probe p更相关</strong>。然而，由于照明、姿态、视图和遮挡的变化，正样本图像可能被从k-nearest neighbors中排除，并且随后不被包括在k-reciprocal nearest neighbors中。为了解决这个问题，我们根据以下条件将<code>R(p，k)</code>中每个候选项的<code>1/2 k-reciprocal nearest neighbors</code>增量地添加到更鲁棒的集合<code>R*(p，k)</code>中：<br><img src=\"https://s1.ax1x.com/2022/09/05/vTRiDA.png\" alt></p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>在本文中，我们解决person re-ID的re-ranking问题。通过将k-reciprocal nearest neighbors编码为单个向量，我们提出了k-reciprocal特征，从而可以通过向量比较容易地执行re-ranking过程。为了从相似样本中获取相似关系，提出了局部扩展查询（local expansion query）以获得更鲁棒的k-reciprocal特征。基于原始距离和Jaccard距离的组合的最终距离有效地提高了多个大规模数据集上的re-ID性能。值得一提的是，我们的方法是全自动和无监督的，并且可以很容易地实现任何ranking结果。</p>\n"},{"title":"试玩YOLOv3多目标检测","date":"2019-10-23T16:00:00.000Z","_content":"# YOLOv3简介\n\n![](https://s1.ax1x.com/2022/09/05/vT2ltK.png)\n\n[官网链接](https://pjreddie.com/darknet/yolo/)\n[论文链接](https://pjreddie.com/media/files/papers/YOLOv3.pdf)\n\n# 运行环境搭建\n首先下载源码：\n**源码：** <https://github.com/NUISTGY/TensorFlow2.0-Examples/tree/master/4-Object_Detection/YOLOV3>\n\n接着安装依赖库和训练好的权重：\n```\n$ pip3 install -r ./docs/requirements.txt\n$ wget https://pjreddie.com/media/files/yolov3.weights\n```\n将权重文件置于源码文件夹目录下即可。\n\n# Quick Start\n前面已经完成了所有的准备公作，运行以下命令即可进行目标检测：\n```\n$ python image_demo.py\n$ python video_demo.py # if use camera, set video_path = 0\n```\n![运行python image_demo.py的结果](https://s1.ax1x.com/2022/09/05/vT2KTx.jpg)\n\n# 尝试检测自己的图片或视频\n想要识别自己的图片只需要做很小的改动即可。\n打开`image_demo.py`:\n![](https://s1.ax1x.com/2022/09/05/vT2J6H.png)\n将22行image_path改为自己图片的地址即可，视频目标检测同理。\n\n最后再贴一张目标比较多的照片：\n![](https://s1.ax1x.com/2022/09/05/vT2Qk6.png)\n\n","source":"_posts/试玩YOLOv3多目标检测.md","raw":"---\ntitle:  试玩YOLOv3多目标检测\ntags: [目标检测,深度学习,图像处理]\ncategories: [深度学习]\ndate: 2019-10-24\n\n---\n# YOLOv3简介\n\n![](https://s1.ax1x.com/2022/09/05/vT2ltK.png)\n\n[官网链接](https://pjreddie.com/darknet/yolo/)\n[论文链接](https://pjreddie.com/media/files/papers/YOLOv3.pdf)\n\n# 运行环境搭建\n首先下载源码：\n**源码：** <https://github.com/NUISTGY/TensorFlow2.0-Examples/tree/master/4-Object_Detection/YOLOV3>\n\n接着安装依赖库和训练好的权重：\n```\n$ pip3 install -r ./docs/requirements.txt\n$ wget https://pjreddie.com/media/files/yolov3.weights\n```\n将权重文件置于源码文件夹目录下即可。\n\n# Quick Start\n前面已经完成了所有的准备公作，运行以下命令即可进行目标检测：\n```\n$ python image_demo.py\n$ python video_demo.py # if use camera, set video_path = 0\n```\n![运行python image_demo.py的结果](https://s1.ax1x.com/2022/09/05/vT2KTx.jpg)\n\n# 尝试检测自己的图片或视频\n想要识别自己的图片只需要做很小的改动即可。\n打开`image_demo.py`:\n![](https://s1.ax1x.com/2022/09/05/vT2J6H.png)\n将22行image_path改为自己图片的地址即可，视频目标检测同理。\n\n最后再贴一张目标比较多的照片：\n![](https://s1.ax1x.com/2022/09/05/vT2Qk6.png)\n\n","slug":"试玩YOLOv3多目标检测","published":1,"updated":"2022-09-05T05:51:05.001Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdmm009ua8vwqplbawfd","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"YOLOv3简介\"><a href=\"#YOLOv3简介\" class=\"headerlink\" title=\"YOLOv3简介\"></a>YOLOv3简介</h1><p><img src=\"https://s1.ax1x.com/2022/09/05/vT2ltK.png\" alt></p>\n<p><a href=\"https://pjreddie.com/darknet/yolo/\" target=\"_blank\" rel=\"noopener\">官网链接</a><br><a href=\"https://pjreddie.com/media/files/papers/YOLOv3.pdf\" target=\"_blank\" rel=\"noopener\">论文链接</a></p>\n<h1 id=\"运行环境搭建\"><a href=\"#运行环境搭建\" class=\"headerlink\" title=\"运行环境搭建\"></a>运行环境搭建</h1><p>首先下载源码：<br><strong>源码：</strong> <a href=\"https://github.com/NUISTGY/TensorFlow2.0-Examples/tree/master/4-Object_Detection/YOLOV3\">https://github.com/NUISTGY/TensorFlow2.0-Examples/tree/master/4-Object_Detection/YOLOV3</a></p>\n<p>接着安装依赖库和训练好的权重：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip3 install -r ./docs/requirements.txt</span><br><span class=\"line\">$ wget https://pjreddie.com/media/files/yolov3.weights</span><br></pre></td></tr></table></figure>\n\n<p>将权重文件置于源码文件夹目录下即可。</p>\n<h1 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h1><p>前面已经完成了所有的准备公作，运行以下命令即可进行目标检测：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python image_demo.py</span><br><span class=\"line\">$ python video_demo.py # if use camera, set video_path = 0</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s1.ax1x.com/2022/09/05/vT2KTx.jpg\" alt=\"运行python image_demo.py的结果\"></p>\n<h1 id=\"尝试检测自己的图片或视频\"><a href=\"#尝试检测自己的图片或视频\" class=\"headerlink\" title=\"尝试检测自己的图片或视频\"></a>尝试检测自己的图片或视频</h1><p>想要识别自己的图片只需要做很小的改动即可。<br>打开<code>image_demo.py</code>:<br><img src=\"https://s1.ax1x.com/2022/09/05/vT2J6H.png\" alt><br>将22行image_path改为自己图片的地址即可，视频目标检测同理。</p>\n<p>最后再贴一张目标比较多的照片：<br><img src=\"https://s1.ax1x.com/2022/09/05/vT2Qk6.png\" alt></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"YOLOv3简介\"><a href=\"#YOLOv3简介\" class=\"headerlink\" title=\"YOLOv3简介\"></a>YOLOv3简介</h1><p><img src=\"https://s1.ax1x.com/2022/09/05/vT2ltK.png\" alt></p>\n<p><a href=\"https://pjreddie.com/darknet/yolo/\" target=\"_blank\" rel=\"noopener\">官网链接</a><br><a href=\"https://pjreddie.com/media/files/papers/YOLOv3.pdf\" target=\"_blank\" rel=\"noopener\">论文链接</a></p>\n<h1 id=\"运行环境搭建\"><a href=\"#运行环境搭建\" class=\"headerlink\" title=\"运行环境搭建\"></a>运行环境搭建</h1><p>首先下载源码：<br><strong>源码：</strong> <a href=\"https://github.com/NUISTGY/TensorFlow2.0-Examples/tree/master/4-Object_Detection/YOLOV3\">https://github.com/NUISTGY/TensorFlow2.0-Examples/tree/master/4-Object_Detection/YOLOV3</a></p>\n<p>接着安装依赖库和训练好的权重：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip3 install -r ./docs/requirements.txt</span><br><span class=\"line\">$ wget https://pjreddie.com/media/files/yolov3.weights</span><br></pre></td></tr></table></figure>\n\n<p>将权重文件置于源码文件夹目录下即可。</p>\n<h1 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h1><p>前面已经完成了所有的准备公作，运行以下命令即可进行目标检测：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ python image_demo.py</span><br><span class=\"line\">$ python video_demo.py # if use camera, set video_path = 0</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://s1.ax1x.com/2022/09/05/vT2KTx.jpg\" alt=\"运行python image_demo.py的结果\"></p>\n<h1 id=\"尝试检测自己的图片或视频\"><a href=\"#尝试检测自己的图片或视频\" class=\"headerlink\" title=\"尝试检测自己的图片或视频\"></a>尝试检测自己的图片或视频</h1><p>想要识别自己的图片只需要做很小的改动即可。<br>打开<code>image_demo.py</code>:<br><img src=\"https://s1.ax1x.com/2022/09/05/vT2J6H.png\" alt><br>将22行image_path改为自己图片的地址即可，视频目标检测同理。</p>\n<p>最后再贴一张目标比较多的照片：<br><img src=\"https://s1.ax1x.com/2022/09/05/vT2Qk6.png\" alt></p>\n"},{"title":"🐟书踩坑（一）","date":"2018-09-19T16:00:00.000Z","_content":"\n## 废话不多说，俺先讲一下来龙去脉~\n\n今天看鱼书P108页，遇到一个想不通的地方，我先放一波源码：\n~~（不了解的小伙伴看上一篇博文，有源码连接）~~\n```python\n# coding: utf-8\nimport sys, os\nsys.path.append(os.pardir)  # 为了导入父目录中的文件而进行的设定\nimport numpy as np\nfrom common.functions import softmax, cross_entropy_error\nfrom common.gradient import numerical_gradient\n\n\nclass simpleNet:\n    def __init__(self):\n        self.W = np.random.randn(2,3)\n\n    def predict(self, x):\n        return np.dot(x, self.W)\n\n    def loss(self, x, t):\n        z = self.predict(x)\n        y = softmax(z)\n        loss = cross_entropy_error(y, t)\n\n        return loss\n\nx = np.array([0.6, 0.9])\nt = np.array([0, 0, 1])\n\nnet = simpleNet()\n\nf = lambda w: net.loss(x, t)\ndW = numerical_gradient(f, net.W)\n\nprint(dW)\n```\n没错，这个是一个求神经网络梯度 w 的简单脚本。\n\n如你所见，文件头也import了许多外部函数，下面贴其中一个比较重要的外部函数：\n\n**numerical_gradient函数**\n\n```python\n# coding: utf-8\nimport numpy as np\n\ndef numerical_gradient(f, x):\n    h = 1e-4 # 0.0001\n    grad = np.zeros_like(x)\n    \n    it = np.nditer(x, flags=['multi_index'], op_flags=['readwrite'])\n    while not it.finished:\n        idx = it.multi_index\n        tmp_val = x[idx]\n        x[idx] = float(tmp_val) + h\n        fxh1 = f(x) # f(x+h)\n        \n        x[idx] = tmp_val - h \n        fxh2 = f(x) # f(x-h)\n        grad[idx] = (fxh1 - fxh2) / (2*h)\n        \n        x[idx] = tmp_val # 还原值\n        it.iternext()   \n        \n    return grad\n```\n## 下面讲讲这个坑\n小伙子们注意看第一段代码28，29两行：\n```python\nf = lambda w: net.loss(x, t)\ndW = numerical_gradient(f, net.W)\n```\n函数f中lambda表达式没什么问题，注意里面的参数 w ，仔细看，你会发现......卧槽！这不没jb卵用吗...\n如果你这么想，那你跟年轻的我有的一拼，~~too young,too simple~~\n\n接着看下一行：**dW = numerical_gradient(f, net.W)**很显然调用了**numerical_gradient函数**，没毛病。但是，兄弟萌，请仔细看看**numerical_gradient函数**实现机制，你会发现：\n>第13行：   fxh1 = f(x)\n>第16行：   fxh2 = f(x) \n>？？？？？？？？？？\n\n看不出问题吗？\n注意：这里的f是：\n```python\nf = lambda w: net.loss(x, t)\n```\nw是伪参数，没卵用，而x是**net.W**——神经网络的权重组成的数组，这尼玛驴头不对马嘴怎么就传给f了？？？而且f也不需要参数啊！\n\n我是左思右想一下午，后来有了一个猜想来解释这段代码。\n## 猜想\n我猜想fxh1 = f(x) ，fxh2 = f(x)括号里的x对程序根本没卵用，于是我大胆的删掉了x,变成：\n>第13行：   fxh1 = f()\n>第16行：   fxh2 = f()\n\n当然为了保持兼容，也得把lambda表达式那个伪参数删了：\n>f = lambda : net.loss(x, t)\n\n然后编译运行，结果...tmd就对了，你肯定觉得这是个坑，没错，我开始也觉得是坑，坑死我了。\n后来浏览了后面的代码，发现了一些用**numerical_gradient函数**做测试脚本，其中测试的是一些简单函数的梯度问题，涉及到变量x所以**numerical_gradient函数**的x要保留。。。。。。相应的，神经网络求梯度就要顺着**numerical_gradient函数**，没必要再写一个，于是就加了伪参数w保证兼容。\n\n最后俺深刻的明白：实践是检验真理的唯一标准~~（早试试就不会浪费那么多时间了）~~\n\n![END](http://r.photo.store.qq.com/psb?/V14eJTFY137vJk/5sLv1ifk0X3wKuPoH9lo.XgUnbenkVfUYF4G24tUjTE!/r/dMMAAAAAAAAA \"END\")","source":"_posts/鱼书踩坑（一）.md","raw":"---\ntitle:  🐟书踩坑（一）\ntags: [神经网络,python,坑]\n\ncategories: [机器学习]\ndate: 2018-9-20\n---\n\n## 废话不多说，俺先讲一下来龙去脉~\n\n今天看鱼书P108页，遇到一个想不通的地方，我先放一波源码：\n~~（不了解的小伙伴看上一篇博文，有源码连接）~~\n```python\n# coding: utf-8\nimport sys, os\nsys.path.append(os.pardir)  # 为了导入父目录中的文件而进行的设定\nimport numpy as np\nfrom common.functions import softmax, cross_entropy_error\nfrom common.gradient import numerical_gradient\n\n\nclass simpleNet:\n    def __init__(self):\n        self.W = np.random.randn(2,3)\n\n    def predict(self, x):\n        return np.dot(x, self.W)\n\n    def loss(self, x, t):\n        z = self.predict(x)\n        y = softmax(z)\n        loss = cross_entropy_error(y, t)\n\n        return loss\n\nx = np.array([0.6, 0.9])\nt = np.array([0, 0, 1])\n\nnet = simpleNet()\n\nf = lambda w: net.loss(x, t)\ndW = numerical_gradient(f, net.W)\n\nprint(dW)\n```\n没错，这个是一个求神经网络梯度 w 的简单脚本。\n\n如你所见，文件头也import了许多外部函数，下面贴其中一个比较重要的外部函数：\n\n**numerical_gradient函数**\n\n```python\n# coding: utf-8\nimport numpy as np\n\ndef numerical_gradient(f, x):\n    h = 1e-4 # 0.0001\n    grad = np.zeros_like(x)\n    \n    it = np.nditer(x, flags=['multi_index'], op_flags=['readwrite'])\n    while not it.finished:\n        idx = it.multi_index\n        tmp_val = x[idx]\n        x[idx] = float(tmp_val) + h\n        fxh1 = f(x) # f(x+h)\n        \n        x[idx] = tmp_val - h \n        fxh2 = f(x) # f(x-h)\n        grad[idx] = (fxh1 - fxh2) / (2*h)\n        \n        x[idx] = tmp_val # 还原值\n        it.iternext()   \n        \n    return grad\n```\n## 下面讲讲这个坑\n小伙子们注意看第一段代码28，29两行：\n```python\nf = lambda w: net.loss(x, t)\ndW = numerical_gradient(f, net.W)\n```\n函数f中lambda表达式没什么问题，注意里面的参数 w ，仔细看，你会发现......卧槽！这不没jb卵用吗...\n如果你这么想，那你跟年轻的我有的一拼，~~too young,too simple~~\n\n接着看下一行：**dW = numerical_gradient(f, net.W)**很显然调用了**numerical_gradient函数**，没毛病。但是，兄弟萌，请仔细看看**numerical_gradient函数**实现机制，你会发现：\n>第13行：   fxh1 = f(x)\n>第16行：   fxh2 = f(x) \n>？？？？？？？？？？\n\n看不出问题吗？\n注意：这里的f是：\n```python\nf = lambda w: net.loss(x, t)\n```\nw是伪参数，没卵用，而x是**net.W**——神经网络的权重组成的数组，这尼玛驴头不对马嘴怎么就传给f了？？？而且f也不需要参数啊！\n\n我是左思右想一下午，后来有了一个猜想来解释这段代码。\n## 猜想\n我猜想fxh1 = f(x) ，fxh2 = f(x)括号里的x对程序根本没卵用，于是我大胆的删掉了x,变成：\n>第13行：   fxh1 = f()\n>第16行：   fxh2 = f()\n\n当然为了保持兼容，也得把lambda表达式那个伪参数删了：\n>f = lambda : net.loss(x, t)\n\n然后编译运行，结果...tmd就对了，你肯定觉得这是个坑，没错，我开始也觉得是坑，坑死我了。\n后来浏览了后面的代码，发现了一些用**numerical_gradient函数**做测试脚本，其中测试的是一些简单函数的梯度问题，涉及到变量x所以**numerical_gradient函数**的x要保留。。。。。。相应的，神经网络求梯度就要顺着**numerical_gradient函数**，没必要再写一个，于是就加了伪参数w保证兼容。\n\n最后俺深刻的明白：实践是检验真理的唯一标准~~（早试试就不会浪费那么多时间了）~~\n\n![END](http://r.photo.store.qq.com/psb?/V14eJTFY137vJk/5sLv1ifk0X3wKuPoH9lo.XgUnbenkVfUYF4G24tUjTE!/r/dMMAAAAAAAAA \"END\")","slug":"鱼书踩坑（一）","published":1,"updated":"2022-09-05T03:46:56.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdmo009za8vwk3omganq","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h2 id=\"废话不多说，俺先讲一下来龙去脉\"><a href=\"#废话不多说，俺先讲一下来龙去脉\" class=\"headerlink\" title=\"废话不多说，俺先讲一下来龙去脉~\"></a>废话不多说，俺先讲一下来龙去脉~</h2><p>今天看鱼书P108页，遇到一个想不通的地方，我先放一波源码：<br><del>（不了解的小伙伴看上一篇博文，有源码连接）</del></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys, os</span><br><span class=\"line\">sys.path.append(os.pardir)  <span class=\"comment\"># 为了导入父目录中的文件而进行的设定</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> common.functions <span class=\"keyword\">import</span> softmax, cross_entropy_error</span><br><span class=\"line\"><span class=\"keyword\">from</span> common.gradient <span class=\"keyword\">import</span> numerical_gradient</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">simpleNet</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.W = np.random.randn(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">predict</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> np.dot(x, self.W)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loss</span><span class=\"params\">(self, x, t)</span>:</span></span><br><span class=\"line\">        z = self.predict(x)</span><br><span class=\"line\">        y = softmax(z)</span><br><span class=\"line\">        loss = cross_entropy_error(y, t)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> loss</span><br><span class=\"line\"></span><br><span class=\"line\">x = np.array([<span class=\"number\">0.6</span>, <span class=\"number\">0.9</span>])</span><br><span class=\"line\">t = np.array([<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">net = simpleNet()</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"keyword\">lambda</span> w: net.loss(x, t)</span><br><span class=\"line\">dW = numerical_gradient(f, net.W)</span><br><span class=\"line\"></span><br><span class=\"line\">print(dW)</span><br></pre></td></tr></table></figure>\n\n<p>没错，这个是一个求神经网络梯度 w 的简单脚本。</p>\n<p>如你所见，文件头也import了许多外部函数，下面贴其中一个比较重要的外部函数：</p>\n<p><strong>numerical_gradient函数</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numerical_gradient</span><span class=\"params\">(f, x)</span>:</span></span><br><span class=\"line\">    h = <span class=\"number\">1e-4</span> <span class=\"comment\"># 0.0001</span></span><br><span class=\"line\">    grad = np.zeros_like(x)</span><br><span class=\"line\">    </span><br><span class=\"line\">    it = np.nditer(x, flags=[<span class=\"string\">'multi_index'</span>], op_flags=[<span class=\"string\">'readwrite'</span>])</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> it.finished:</span><br><span class=\"line\">        idx = it.multi_index</span><br><span class=\"line\">        tmp_val = x[idx]</span><br><span class=\"line\">        x[idx] = float(tmp_val) + h</span><br><span class=\"line\">        fxh1 = f(x) <span class=\"comment\"># f(x+h)</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        x[idx] = tmp_val - h </span><br><span class=\"line\">        fxh2 = f(x) <span class=\"comment\"># f(x-h)</span></span><br><span class=\"line\">        grad[idx] = (fxh1 - fxh2) / (<span class=\"number\">2</span>*h)</span><br><span class=\"line\">        </span><br><span class=\"line\">        x[idx] = tmp_val <span class=\"comment\"># 还原值</span></span><br><span class=\"line\">        it.iternext()   </span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> grad</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"下面讲讲这个坑\"><a href=\"#下面讲讲这个坑\" class=\"headerlink\" title=\"下面讲讲这个坑\"></a>下面讲讲这个坑</h2><p>小伙子们注意看第一段代码28，29两行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"keyword\">lambda</span> w: net.loss(x, t)</span><br><span class=\"line\">dW = numerical_gradient(f, net.W)</span><br></pre></td></tr></table></figure>\n\n<p>函数f中lambda表达式没什么问题，注意里面的参数 w ，仔细看，你会发现……卧槽！这不没jb卵用吗…<br>如果你这么想，那你跟年轻的我有的一拼，<del>too young,too simple</del></p>\n<p>接着看下一行：<strong>dW = numerical_gradient(f, net.W)</strong>很显然调用了<strong>numerical_gradient函数</strong>，没毛病。但是，兄弟萌，请仔细看看<strong>numerical_gradient函数</strong>实现机制，你会发现：</p>\n<blockquote>\n<p>第13行：   fxh1 = f(x)<br>第16行：   fxh2 = f(x)<br>？？？？？？？？？？</p>\n</blockquote>\n<p>看不出问题吗？<br>注意：这里的f是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"keyword\">lambda</span> w: net.loss(x, t)</span><br></pre></td></tr></table></figure>\n\n<p>w是伪参数，没卵用，而x是<strong>net.W</strong>——神经网络的权重组成的数组，这尼玛驴头不对马嘴怎么就传给f了？？？而且f也不需要参数啊！</p>\n<p>我是左思右想一下午，后来有了一个猜想来解释这段代码。</p>\n<h2 id=\"猜想\"><a href=\"#猜想\" class=\"headerlink\" title=\"猜想\"></a>猜想</h2><p>我猜想fxh1 = f(x) ，fxh2 = f(x)括号里的x对程序根本没卵用，于是我大胆的删掉了x,变成：</p>\n<blockquote>\n<p>第13行：   fxh1 = f()<br>第16行：   fxh2 = f()</p>\n</blockquote>\n<p>当然为了保持兼容，也得把lambda表达式那个伪参数删了：</p>\n<blockquote>\n<p>f = lambda : net.loss(x, t)</p>\n</blockquote>\n<p>然后编译运行，结果…tmd就对了，你肯定觉得这是个坑，没错，我开始也觉得是坑，坑死我了。<br>后来浏览了后面的代码，发现了一些用<strong>numerical_gradient函数</strong>做测试脚本，其中测试的是一些简单函数的梯度问题，涉及到变量x所以<strong>numerical_gradient函数</strong>的x要保留。。。。。。相应的，神经网络求梯度就要顺着<strong>numerical_gradient函数</strong>，没必要再写一个，于是就加了伪参数w保证兼容。</p>\n<p>最后俺深刻的明白：实践是检验真理的唯一标准<del>（早试试就不会浪费那么多时间了）</del></p>\n<p><img src=\"http://r.photo.store.qq.com/psb?/V14eJTFY137vJk/5sLv1ifk0X3wKuPoH9lo.XgUnbenkVfUYF4G24tUjTE!/r/dMMAAAAAAAAA\" alt=\"END\" title=\"END\"></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h2 id=\"废话不多说，俺先讲一下来龙去脉\"><a href=\"#废话不多说，俺先讲一下来龙去脉\" class=\"headerlink\" title=\"废话不多说，俺先讲一下来龙去脉~\"></a>废话不多说，俺先讲一下来龙去脉~</h2><p>今天看鱼书P108页，遇到一个想不通的地方，我先放一波源码：<br><del>（不了解的小伙伴看上一篇博文，有源码连接）</del></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys, os</span><br><span class=\"line\">sys.path.append(os.pardir)  <span class=\"comment\"># 为了导入父目录中的文件而进行的设定</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> common.functions <span class=\"keyword\">import</span> softmax, cross_entropy_error</span><br><span class=\"line\"><span class=\"keyword\">from</span> common.gradient <span class=\"keyword\">import</span> numerical_gradient</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">simpleNet</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.W = np.random.randn(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">predict</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> np.dot(x, self.W)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">loss</span><span class=\"params\">(self, x, t)</span>:</span></span><br><span class=\"line\">        z = self.predict(x)</span><br><span class=\"line\">        y = softmax(z)</span><br><span class=\"line\">        loss = cross_entropy_error(y, t)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> loss</span><br><span class=\"line\"></span><br><span class=\"line\">x = np.array([<span class=\"number\">0.6</span>, <span class=\"number\">0.9</span>])</span><br><span class=\"line\">t = np.array([<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">net = simpleNet()</span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"keyword\">lambda</span> w: net.loss(x, t)</span><br><span class=\"line\">dW = numerical_gradient(f, net.W)</span><br><span class=\"line\"></span><br><span class=\"line\">print(dW)</span><br></pre></td></tr></table></figure>\n\n<p>没错，这个是一个求神经网络梯度 w 的简单脚本。</p>\n<p>如你所见，文件头也import了许多外部函数，下面贴其中一个比较重要的外部函数：</p>\n<p><strong>numerical_gradient函数</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># coding: utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">numerical_gradient</span><span class=\"params\">(f, x)</span>:</span></span><br><span class=\"line\">    h = <span class=\"number\">1e-4</span> <span class=\"comment\"># 0.0001</span></span><br><span class=\"line\">    grad = np.zeros_like(x)</span><br><span class=\"line\">    </span><br><span class=\"line\">    it = np.nditer(x, flags=[<span class=\"string\">'multi_index'</span>], op_flags=[<span class=\"string\">'readwrite'</span>])</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> it.finished:</span><br><span class=\"line\">        idx = it.multi_index</span><br><span class=\"line\">        tmp_val = x[idx]</span><br><span class=\"line\">        x[idx] = float(tmp_val) + h</span><br><span class=\"line\">        fxh1 = f(x) <span class=\"comment\"># f(x+h)</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        x[idx] = tmp_val - h </span><br><span class=\"line\">        fxh2 = f(x) <span class=\"comment\"># f(x-h)</span></span><br><span class=\"line\">        grad[idx] = (fxh1 - fxh2) / (<span class=\"number\">2</span>*h)</span><br><span class=\"line\">        </span><br><span class=\"line\">        x[idx] = tmp_val <span class=\"comment\"># 还原值</span></span><br><span class=\"line\">        it.iternext()   </span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> grad</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"下面讲讲这个坑\"><a href=\"#下面讲讲这个坑\" class=\"headerlink\" title=\"下面讲讲这个坑\"></a>下面讲讲这个坑</h2><p>小伙子们注意看第一段代码28，29两行：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"keyword\">lambda</span> w: net.loss(x, t)</span><br><span class=\"line\">dW = numerical_gradient(f, net.W)</span><br></pre></td></tr></table></figure>\n\n<p>函数f中lambda表达式没什么问题，注意里面的参数 w ，仔细看，你会发现……卧槽！这不没jb卵用吗…<br>如果你这么想，那你跟年轻的我有的一拼，<del>too young,too simple</del></p>\n<p>接着看下一行：<strong>dW = numerical_gradient(f, net.W)</strong>很显然调用了<strong>numerical_gradient函数</strong>，没毛病。但是，兄弟萌，请仔细看看<strong>numerical_gradient函数</strong>实现机制，你会发现：</p>\n<blockquote>\n<p>第13行：   fxh1 = f(x)<br>第16行：   fxh2 = f(x)<br>？？？？？？？？？？</p>\n</blockquote>\n<p>看不出问题吗？<br>注意：这里的f是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"keyword\">lambda</span> w: net.loss(x, t)</span><br></pre></td></tr></table></figure>\n\n<p>w是伪参数，没卵用，而x是<strong>net.W</strong>——神经网络的权重组成的数组，这尼玛驴头不对马嘴怎么就传给f了？？？而且f也不需要参数啊！</p>\n<p>我是左思右想一下午，后来有了一个猜想来解释这段代码。</p>\n<h2 id=\"猜想\"><a href=\"#猜想\" class=\"headerlink\" title=\"猜想\"></a>猜想</h2><p>我猜想fxh1 = f(x) ，fxh2 = f(x)括号里的x对程序根本没卵用，于是我大胆的删掉了x,变成：</p>\n<blockquote>\n<p>第13行：   fxh1 = f()<br>第16行：   fxh2 = f()</p>\n</blockquote>\n<p>当然为了保持兼容，也得把lambda表达式那个伪参数删了：</p>\n<blockquote>\n<p>f = lambda : net.loss(x, t)</p>\n</blockquote>\n<p>然后编译运行，结果…tmd就对了，你肯定觉得这是个坑，没错，我开始也觉得是坑，坑死我了。<br>后来浏览了后面的代码，发现了一些用<strong>numerical_gradient函数</strong>做测试脚本，其中测试的是一些简单函数的梯度问题，涉及到变量x所以<strong>numerical_gradient函数</strong>的x要保留。。。。。。相应的，神经网络求梯度就要顺着<strong>numerical_gradient函数</strong>，没必要再写一个，于是就加了伪参数w保证兼容。</p>\n<p>最后俺深刻的明白：实践是检验真理的唯一标准<del>（早试试就不会浪费那么多时间了）</del></p>\n<p><img src=\"http://r.photo.store.qq.com/psb?/V14eJTFY137vJk/5sLv1ifk0X3wKuPoH9lo.XgUnbenkVfUYF4G24tUjTE!/r/dMMAAAAAAAAA\" alt=\"END\" title=\"END\"></p>\n"},{"title":"MySQL笔记","date":"2022-09-06T16:00:00.000Z","_content":"\n# 基础篇\n\n## 通用语法及分类\n\n- DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）\n- DML: 数据操作语言，用来对数据库表中的数据进行增删改\n- DQL: 数据查询语言，用来查询数据库中表的记录\n- DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限\n\n### DDL（数据定义语言）\n\n数据定义语言\n\n#### 数据库操作\n\n查询所有数据库：\n`SHOW DATABASES;`\n查询当前数据库：\n`SELECT DATABASE();`\n创建数据库：\n`CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];`\n删除数据库：\n`DROP DATABASE [ IF EXISTS ] 数据库名;`\n使用数据库：\n`USE 数据库名;`\n\n##### 注意事项\n\n- UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集\n\n#### 表操作\n\n查询当前数据库所有表：\n`SHOW TABLES;`\n查询表结构：\n`DESC 表名;`\n查询指定表的建表语句：\n`SHOW CREATE TABLE 表名;`\n\n创建表：\n```mysql\nCREATE TABLE 表名(\n\t字段1 字段1类型 [COMMENT 字段1注释],\n\t字段2 字段2类型 [COMMENT 字段2注释],\n\t字段3 字段3类型 [COMMENT 字段3注释],\n\t...\n\t字段n 字段n类型 [COMMENT 字段n注释]\n)[ COMMENT 表注释 ];\n```\n**最后一个字段后面没有逗号**\n\n添加字段：\n`ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];`\n例：`ALTER TABLE emp ADD nickname varchar(20) COMMENT '昵称';`\n\n修改数据类型：\n`ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);`\n修改字段名和字段类型：\n`ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];`\n例：将emp表的nickname字段修改为username，类型为varchar(30)\n`ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT '昵称';`\n\n删除字段：\n`ALTER TABLE 表名 DROP 字段名;`\n\n修改表名：\n`ALTER TABLE 表名 RENAME TO 新表名`\n\n删除表：\n`DROP TABLE [IF EXISTS] 表名;`\n删除表，并重新创建该表：\n`TRUNCATE TABLE 表名;`\n\n### DML（数据操作语言）\n\n#### 添加数据\n\n指定字段：\n`INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);`\n全部字段：\n`INSERT INTO 表名 VALUES (值1, 值2, ...);`\n\n批量添加数据：\n`INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);`\n`INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);`\n\n##### 注意事项\n\n- 字符串和日期类型数据应该包含在引号中\n- 插入的数据大小应该在字段的规定范围内\n\n#### 更新和删除数据\n\n修改数据：\n`UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];`\n例：\n`UPDATE emp SET name = 'Jack' WHERE id = 1;`\n\n删除数据：\n`DELETE FROM 表名 [ WHERE 条件 ];`\n\n### DQL（数据查询语言）\n\n语法：\n```mysql\nSELECT\n\t字段列表\nFROM\n\t表名字段\nWHERE\n\t条件列表\nGROUP BY\n\t分组字段列表\nHAVING\n\t分组后的条件列表\nORDER BY\n\t排序字段列表\nLIMIT\n\t分页参数\n```\n\n#### 基础查询\n\n查询多个字段：\n`SELECT 字段1, 字段2, 字段3, ... FROM 表名;`\n`SELECT * FROM 表名;`\n\n设置别名：\n`SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;`\n`SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;`\n\n去除重复记录：\n`SELECT DISTINCT 字段列表 FROM 表名;`\n\n转义：\n`SELECT * FROM 表名 WHERE name LIKE '/_张三' ESCAPE '/'`\n/ 之后的\\_不作为通配符\n\n#### 条件查询\n\n语法：\n`SELECT 字段列表 FROM 表名 WHERE 条件列表;`\n\n条件：\n\n| 比较运算符          | 功能                                        |\n| ------------------- | ------------------------------------------- |\n| >                   | 大于                                        |\n| >=                  | 大于等于                                    |\n| <                   | 小于                                        |\n| <=                  | 小于等于                                    |\n| =                   | 等于                                        |\n| <> 或 !=            | 不等于                                      |\n| BETWEEN ... AND ... | 在某个范围内（含最小、最大值）              |\n| IN(...)             | 在in之后的列表中的值，多选一                |\n| LIKE 占位符         | 模糊匹配（\\_匹配单个字符，%匹配任意个字符） |\n| IS NULL             | 是NULL                                      |\n\n| 逻辑运算符         | 功能                         |\n| ------------------ | ---------------------------- |\n| AND 或 &&          | 并且（多个条件同时成立）     |\n| OR 或 &#124;&#124; | 或者（多个条件任意一个成立） |\n| NOT 或 !           | 非，不是                     |\n\n例子：\n```mysql\n-- 年龄等于30\nselect * from employee where age = 30;\n-- 年龄小于30\nselect * from employee where age < 30;\n-- 小于等于\nselect * from employee where age <= 30;\n-- 没有身份证\nselect * from employee where idcard is null or idcard = '';\n-- 有身份证\nselect * from employee where idcard;\nselect * from employee where idcard is not null;\n-- 不等于\nselect * from employee where age != 30;\n-- 年龄在20到30之间\nselect * from employee where age between 20 and 30;\nselect * from employee where age >= 20 and age <= 30;\n-- 下面语句不报错，但查不到任何信息\nselect * from employee where age between 30 and 20;\n-- 性别为女且年龄小于30\nselect * from employee where age < 30 and gender = '女';\n-- 年龄等于25或30或35\nselect * from employee where age = 25 or age = 30 or age = 35;\nselect * from employee where age in (25, 30, 35);\n-- 姓名为两个字\nselect * from employee where name like '__';\n-- 身份证最后为X\nselect * from employee where idcard like '%X';\n```\n\n#### 聚合查询（聚合函数）\n\n常见聚合函数：\n\n| 函数  | 功能     |\n| ----- | -------- |\n| count | 统计数量 |\n| max   | 最大值   |\n| min   | 最小值   |\n| avg   | 平均值   |\n| sum   | 求和     |\n\n语法：\n`SELECT 聚合函数(字段列表) FROM 表名;`\n例：\n`SELECT count(id) from employee where workaddress = \"广东省\";`\n\n#### 分组查询\n\n语法：\n`SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];`\n\nwhere 和 having 的区别：\n\n- 执行时机不同：where是分组之前进行过滤，不满足where条件不参与分组；having是分组后对结果进行过滤。\n- 判断条件不同：where不能对聚合函数进行判断，而having可以。\n\n例子：\n\n```mysql\n-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）\nselect count(*) from employee group by gender;\n-- 根据性别分组，统计男性和女性数量\nselect gender, count(*) from employee group by gender;\n-- 根据性别分组，统计男性和女性的平均年龄\nselect gender, avg(age) from employee group by gender;\n-- 年龄小于45，并根据工作地址分组\nselect workaddress, count(*) from employee where age < 45 group by workaddress;\n-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址\nselect workaddress, count(*) address_count from employee where age < 45 group by workaddress having address_count >= 3;\n```\n\n##### 注意事项\n\n- 执行顺序：where > 聚合函数 > having\n- 分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义\n\n#### 排序查询\n\n语法：\n`SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;`\n\n排序方式：\n\n- ASC: 升序（默认）\n- DESC: 降序\n\n例子：\n\n```mysql\n-- 根据年龄升序排序\nSELECT * FROM employee ORDER BY age ASC;\nSELECT * FROM employee ORDER BY age;\n-- 两字段排序，根据年龄升序排序，入职时间降序排序\nSELECT * FROM employee ORDER BY age ASC, entrydate DESC;\n```\n\n##### 注意事项\n\n如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序\n\n#### 分页查询\n\n语法：\n`SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;`\n\n例子：\n\n```mysql\n-- 查询第一页数据，展示10条\nSELECT * FROM employee LIMIT 0, 10;\n-- 查询第二页\nSELECT * FROM employee LIMIT 10, 10;\n```\n\n##### 注意事项\n\n- 起始索引从0开始，起始索引 = （查询页码 - 1） * 每页显示记录数\n- 分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT\n- 如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10\n\n#### DQL执行顺序\n\nFROM -> WHERE -> GROUP BY -> SELECT -> ORDER BY -> LIMIT\n\n### DCL\n\n#### 管理用户\n\n查询用户：\n\n```mysql\nUSER mysql;\nSELECT * FROM user;\n```\n\n创建用户:\n`CREATE USER '用户名'@'主机名' IDENTIFIED BY '密码';`\n\n修改用户密码：\n`ALTER USER '用户名'@'主机名' IDENTIFIED WITH mysql_native_password BY '新密码';`\n\n删除用户：\n`DROP USER '用户名'@'主机名';`\n\n例子：\n\n```mysql\n-- 创建用户test，只能在当前主机localhost访问\ncreate user 'test'@'localhost' identified by '123456';\n-- 创建用户test，能在任意主机访问\ncreate user 'test'@'%' identified by '123456';\ncreate user 'test' identified by '123456';\n-- 修改密码\nalter user 'test'@'localhost' identified with mysql_native_password by '1234';\n-- 删除用户\ndrop user 'test'@'localhost';\n```\n\n##### 注意事项\n\n- 主机名可以使用 % 通配\n\n#### 权限控制\n\n常用权限：\n\n| 权限                | 说明               |\n| ------------------- | ------------------ |\n| ALL, ALL PRIVILEGES | 所有权限           |\n| SELECT              | 查询数据           |\n| INSERT              | 插入数据           |\n| UPDATE              | 修改数据           |\n| DELETE              | 删除数据           |\n| ALTER               | 修改表             |\n| DROP                | 删除数据库/表/视图 |\n| CREATE              | 创建数据库/表      |\n\n更多权限请看[权限一览表](#权限一览表 \"权限一览表\")\n\n查询权限：\n`SHOW GRANTS FOR '用户名'@'主机名';`\n\n授予权限：\n`GRANT 权限列表 ON 数据库名.表名 TO '用户名'@'主机名';`\n\n撤销权限：\n`REVOKE 权限列表 ON 数据库名.表名 FROM '用户名'@'主机名';`\n\n##### 注意事项\n\n- 多个权限用逗号分隔\n- 授权时，数据库名和表名可以用 * 进行通配，代表所有\n\n## 函数\n\n- 字符串函数\n- 数值函数\n- 日期函数\n- 流程函数\n\n### 字符串函数\n\n常用函数：\n\n| 函数  | 功能  |\n| ------------ | ------------ |\n| CONCAT(s1, s2, ..., sn)  | 字符串拼接，将s1, s2, ..., sn拼接成一个字符串  |\n| LOWER(str)  | 将字符串全部转为小写  |\n| UPPER(str)  | 将字符串全部转为大写  |\n| LPAD(str, n, pad)  | 左填充，用字符串pad对str的左边进行填充，达到n个字符串长度  |\n| RPAD(str, n, pad)  | 右填充，用字符串pad对str的右边进行填充，达到n个字符串长度  |\n| TRIM(str)  | 去掉字符串头部和尾部的空格  |\n| SUBSTRING(str, start, len)  | 返回从字符串str从start位置起的len个长度的字符串  |\n\n使用示例：\n\n```mysql\n-- 拼接\nSELECT CONCAT('Hello', 'World');\n-- 小写\nSELECT LOWER('Hello');\n-- 大写\nSELECT UPPER('Hello');\n-- 左填充\nSELECT LPAD('01', 5, '-');\n-- 右填充\nSELECT RPAD('01', 5, '-');\n-- 去除空格\nSELECT TRIM(' Hello World ');\n-- 切片（起始索引为1）\nSELECT SUBSTRING('Hello World', 1, 5);\n```\n\n### 数值函数\n\n常见函数：\n\n| 函数  | 功能  |\n| ------------ | ------------ |\n| CEIL(x)  | 向上取整  |\n| FLOOR(x)  | 向下取整  |\n| MOD(x, y)  | 返回x/y的模  |\n| RAND() | 返回0~1内的随机数 |\n| ROUND(x, y) | 求参数x的四舍五入值，保留y位小数 |\n\n### 日期函数\n\n常用函数：\n\n| 函数  | 功能  |\n| ------------ | ------------ |\n| CURDATE()  | 返回当前日期  |\n| CURTIME()  | 返回当前时间  |\n| NOW()  | 返回当前日期和时间  |\n| YEAR(date)  | 获取指定date的年份  |\n| MONTH(date)  | 获取指定date的月份  |\n| DAY(date)  | 获取指定date的日期  |\n| DATE_ADD(date, INTERVAL expr type)  | 返回一个日期/时间值加上一个时间间隔expr后的时间值  |\n| DATEDIFF(date1, date2)  | 返回起始时间date1和结束时间date2之间的天数  |\n\n例子：\n\n```mysql\n-- DATE_ADD\nSELECT DATE_ADD(NOW(), INTERVAL 70 YEAR);\n```\n\n### 流程函数\n\n常用函数：\n\n| 函数  | 功能  |\n| ------------ | ------------ |\n| IF(value, t, f)  | 如果value为true，则返回t，否则返回f  |\n| IFNULL(value1, value2)  | 如果value1不为空，返回value1，否则返回value2  |\n| CASE WHEN [ val1 ] THEN [ res1 ] ... ELSE [ default ] END  | 如果val1为true，返回res1，... 否则返回default默认值  |\n| CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] ... ELSE [ default ] END  | 如果expr的值等于val1，返回res1，... 否则返回default默认值  |\n\n例子：\n\n```mysql\nselect\n\tname,\n\t(case when age > 30 then '中年' else '青年' end)\nfrom employee;\nselect\n\tname,\n\t(case workaddress when '北京市' then '一线城市' when '上海市' then '一线城市' else '二线城市' end) as '工作地址'\nfrom employee;\n```\n\n## 约束\n\n分类：\n\n| 约束  | 描述  | 关键字  |\n| ------------ | ------------ | ------------ |\n| 非空约束  | 限制该字段的数据不能为null  | NOT NULL  |\n| 唯一约束  | 保证该字段的所有数据都是唯一、不重复的  | UNIQUE  |\n| 主键约束  | 主键是一行数据的唯一标识，要求非空且唯一  | PRIMARY KEY  |\n| 默认约束  | 保存数据时，如果未指定该字段的值，则采用默认值  | DEFAULT  |\n| 检查约束（8.0.1版本后）  | 保证字段值满足某一个条件  | CHECK  |\n| 外键约束  | 用来让两张图的数据之间建立连接，保证数据的一致性和完整性  | FOREIGN KEY  |\n\n约束是作用于表中字段上的，可以再创建表/修改表的时候添加约束。\n\n### 常用约束\n\n| 约束条件  | 关键字  |\n| ------------ | ------------ |\n| 主键  | PRIMARY KEY  |\n| 自动增长  | AUTO_INCREMENT  |\n| 不为空  | NOT NULL  |\n| 唯一  | UNIQUE  |\n| 逻辑条件  | CHECK  |\n| 默认值  | DEFAULT  |\n\n例子：\n\n```mysql\ncreate table user(\n\tid int primary key auto_increment,\n\tname varchar(10) not null unique,\n\tage int check(age > 0 and age < 120),\n\tstatus char(1) default '1',\n\tgender char(1)\n);\n```\n\n### 外键约束\n\n添加外键：\n\n```mysql\nCREATE TABLE 表名(\n\t字段名 字段类型,\n\t...\n\t[CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名)\n);\nALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);\n\n-- 例子\nalter table emp add constraint fk_emp_dept_id foreign key(dept_id) references dept(id);\n```\n\n删除外键：\n`ALTER TABLE 表名 DROP FOREIGN KEY 外键名;`\n\n#### 删除/更新行为\n\n| 行为  | 说明  |\n| ------------ | ------------ |\n| NO ACTION  | 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与RESTRICT一致）  |\n| RESTRICT  | 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与NO ACTION一致）  |\n| CASCADE  | 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除/更新外键在子表中的记录  |\n| SET NULL  | 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（要求该外键允许为null）  |\n| SET DEFAULT  | 父表有变更时，子表将外键设为一个默认值（Innodb不支持）  |\n\n更改删除/更新行为：\n`ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为;`\n\n## 多表查询\n\n### 多表关系\n\n- 一对多（多对一）\n- 多对多\n- 一对一\n\n#### 一对多\n\n案例：部门与员工\n关系：一个部门对应多个员工，一个员工对应一个部门\n实现：在多的一方建立外键，指向一的一方的主键\n\n#### 多对多\n\n案例：学生与课程\n关系：一个学生可以选多门课程，一门课程也可以供多个学生选修\n实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键\n\n#### 一对一\n\n案例：用户与用户详情\n关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率\n实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）\n\n### 查询\n\n合并查询（笛卡尔积，会展示所有组合结果）：\n`select * from employee, dept;`\n\n> 笛卡尔积：两个集合A集合和B集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）\n\n消除无效笛卡尔积：\n`select * from employee, dept where employee.dept = dept.id;`\n\n### 内连接查询\n\n内连接查询的是两张表交集的部分\n\n隐式内连接：\n`SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;`\n\n显式内连接：\n`SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;`\n\n显式性能比隐式高\n\n例子：\n\n```mysql\n-- 查询员工姓名，及关联的部门的名称\n-- 隐式\nselect e.name, d.name from employee as e, dept as d where e.dept = d.id;\n-- 显式\nselect e.name, d.name from employee as e inner join dept as d on e.dept = d.id;\n```\n\n### 外连接查询\n\n左外连接：\n查询左表所有数据，以及两张表交集部分数据\n`SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;`\n相当于查询表1的所有数据，包含表1和表2交集部分数据\n\n右外连接：\n查询右表所有数据，以及两张表交集部分数据\n`SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;`\n\n例子：\n\n```mysql\n-- 左\nselect e.*, d.name from employee as e left outer join dept as d on e.dept = d.id;\nselect d.name, e.* from dept d left outer join emp e on e.dept = d.id;  -- 这条语句与下面的语句效果一样\n-- 右\nselect d.name, e.* from employee as e right outer join dept as d on e.dept = d.id;\n```\n\n左连接可以查询到没有dept的employee，右连接可以查询到没有employee的dept\n\n### 自连接查询\n\n当前表与自身的连接查询，自连接必须使用表别名\n\n语法：\n`SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;`\n\n自连接查询，可以是内连接查询，也可以是外连接查询\n\n例子：\n\n```mysql\n-- 查询员工及其所属领导的名字\nselect a.name, b.name from employee a, employee b where a.manager = b.id;\n-- 没有领导的也查询出来\nselect a.name, b.name from employee a left join employee b on a.manager = b.id;\n```\n\n### 联合查询 union, union all\n\n把多次查询的结果合并，形成一个新的查询集\n\n语法：\n\n```mysql\nSELECT 字段列表 FROM 表A ...\nUNION [ALL]\nSELECT 字段列表 FROM 表B ...\n```\n\n#### 注意事项\n\n- UNION ALL 会有重复结果，UNION 不会\n- 联合查询比使用or效率高，不会使索引失效\n\n### 子查询\n\nSQL语句中嵌套SELECT语句，称谓嵌套查询，又称子查询。\n`SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);`\n**子查询外部的语句可以是 INSERT / UPDATE / DELETE / SELECT 的任何一个**\n\n根据子查询结果可以分为：\n\n- 标量子查询（子查询结果为单个值）\n- 列子查询（子查询结果为一列）\n- 行子查询（子查询结果为一行）\n- 表子查询（子查询结果为多行多列）\n\n根据子查询位置可分为：\n\n- WHERE 之后\n- FROM 之后\n- SELECT 之后\n\n#### 标量子查询\n\n子查询返回的结果是单个值（数字、字符串、日期等）。\n常用操作符：- < > > >= < <=\n\n例子：\n\n```mysql\n-- 查询销售部所有员工\nselect id from dept where name = '销售部';\n-- 根据销售部部门ID，查询员工信息\nselect * from employee where dept = 4;\n-- 合并（子查询）\nselect * from employee where dept = (select id from dept where name = '销售部');\n\n-- 查询xxx入职之后的员工信息\nselect * from employee where entrydate > (select entrydate from employee where name = 'xxx');\n```\n\n#### 列子查询\n\n返回的结果是一列（可以是多行）。\n\n常用操作符：\n\n| 操作符  | 描述  |\n| ------------ | ------------ |\n| IN  | 在指定的集合范围内，多选一  |\n| NOT IN  | 不在指定的集合范围内  |\n| ANY  | 子查询返回列表中，有任意一个满足即可  |\n| SOME  | 与ANY等同，使用SOME的地方都可以使用ANY  |\n| ALL  | 子查询返回列表的所有值都必须满足  |\n\n例子：\n\n```mysql\n-- 查询销售部和市场部的所有员工信息\nselect * from employee where dept in (select id from dept where name = '销售部' or name = '市场部');\n-- 查询比财务部所有人工资都高的员工信息\nselect * from employee where salary > all(select salary from employee where dept = (select id from dept where name = '财务部'));\n-- 查询比研发部任意一人工资高的员工信息\nselect * from employee where salary > any (select salary from employee where dept = (select id from dept where name = '研发部'));\n```\n\n#### 行子查询\n\n返回的结果是一行（可以是多列）。\n常用操作符：=, <, >, IN, NOT IN\n\n例子：\n\n```mysql\n-- 查询与xxx的薪资及直属领导相同的员工信息\nselect * from employee where (salary, manager) = (12500, 1);\nselect * from employee where (salary, manager) = (select salary, manager from employee where name = 'xxx');\n```\n\n#### 表子查询\n\n返回的结果是多行多列\n常用操作符：IN\n\n例子：\n\n```mysql\n-- 查询与xxx1，xxx2的职位和薪资相同的员工\nselect * from employee where (job, salary) in (select job, salary from employee where name = 'xxx1' or name = 'xxx2');\n-- 查询入职日期是2006-01-01之后的员工，及其部门信息\nselect e.*, d.* from (select * from employee where entrydate > '2006-01-01') as e left join dept as d on e.dept = d.id;\n```\n\n## 事务\n\n事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。\n\n基本操作：\n\n```mysql\n-- 1. 查询张三账户余额\nselect * from account where name = '张三';\n-- 2. 将张三账户余额-1000\nupdate account set money = money - 1000 where name = '张三';\n-- 此语句出错后张三钱减少但是李四钱没有增加\n模拟sql语句错误\n-- 3. 将李四账户余额+1000\nupdate account set money = money + 1000 where name = '李四';\n\n-- 查看事务提交方式\nSELECT @@AUTOCOMMIT;\n-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效\nSET @@AUTOCOMMIT = 0;\n-- 提交事务\nCOMMIT;\n-- 回滚事务\nROLLBACK;\n\n-- 设置手动提交后上面代码改为：\nselect * from account where name = '张三';\nupdate account set money = money - 1000 where name = '张三';\nupdate account set money = money + 1000 where name = '李四';\ncommit;\n```\n\n操作方式二：\n\n开启事务：\n`START TRANSACTION 或 BEGIN TRANSACTION;`\n提交事务：\n`COMMIT;`\n回滚事务：\n`ROLLBACK;`\n\n操作实例：\n\n```mysql\nstart transaction;\nselect * from account where name = '张三';\nupdate account set money = money - 1000 where name = '张三';\nupdate account set money = money + 1000 where name = '李四';\ncommit;\n```\n\n### 四大特性ACID\n\n- 原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败\n- 一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态\n- 隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行\n- 持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的\n\n### 并发事务\n\n| 问题  | 描述  |\n| ------------ | ------------ |\n| 脏读  | 一个事务读到另一个事务还没提交的数据  |\n| 不可重复读  | 一个事务先后读取同一条记录，但两次读取的数据不同  |\n| 幻读  | 一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在  |\n\n> 这三个问题的详细演示：https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd \n\n并发事务隔离级别：\n\n| 隔离级别  | 脏读  | 不可重复读  | 幻读  |\n| ------------ | ------------ | ------------ | ------------ |\n| Read uncommitted  | √  | √  | √  |\n| Read committed  | ×  | √  | √  |\n| Repeatable Read(默认)  | ×  | ×  | √  |\n| Serializable  | ×  | ×  | ×  |\n\n- √表示在当前隔离级别下该问题会出现\n- Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差\n\n查看事务隔离级别：\n`SELECT @@TRANSACTION_ISOLATION;`\n设置事务隔离级别：\n`SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE };`\nSESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效\n\n# 进阶篇\n\n## 存储引擎\n\nMySQL体系结构：\n\n![结构图](https://dhc.pythonanywhere.com/media/editor/MySQL体系结构_20220315034329549927.png \"结构图\")\n![层级描述](https://dhc.pythonanywhere.com/media/editor/MySQL体系结构层级含义_20220315034359342837.png \"层级描述\")\n\n存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。\n默认存储引擎是InnoDB。\n\n相关操作：\n\n```mysql\n-- 查询建表语句\nshow create table account;\n-- 建表时指定存储引擎\nCREATE TABLE 表名(\n\t...\n) ENGINE=INNODB;\n-- 查看当前数据库支持的存储引擎\nshow engines;\n```\n\n### InnoDB\n\nInnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。\n\n特点：\n\n- DML 操作遵循 ACID 模型，支持**事务**\n- **行级锁**，提高并发访问性能\n- 支持**外键**约束，保证数据的完整性和正确性\n\n文件：\n\n- xxx.ibd: xxx代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。\n\n参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间\n\n知识点：\n\n查看 Mysql 变量：\n`show variables like 'innodb_file_per_table';`\n\n从idb文件提取表结构数据：\n（在cmd运行）\n`ibd2sdi xxx.ibd`\n\nInnoDB 逻辑存储结构：\n![InnoDB逻辑存储结构](https://dhc.pythonanywhere.com/media/editor/逻辑存储结构_20220316030616590001.png \"InnoDB逻辑存储结构\")\n\n### MyISAM\n\nMyISAM 是 MySQL 早期的默认存储引擎。\n\n特点：\n\n- 不支持事务，不支持外键\n- 支持表锁，不支持行锁\n- 访问速度快\n\n文件：\n\n- xxx.sdi: 存储表结构信息\n- xxx.MYD: 存储数据\n- xxx.MYI: 存储索引\n\n### Memory\n\nMemory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。\n\n特点：\n\n- 存放在内存中，速度快\n- hash索引（默认）\n\n文件：\n\n- xxx.sdi: 存储表结构信息\n\n### 存储引擎特点\n\n| 特点  | InnoDB  | MyISAM  | Memory  |\n| ------------ | ------------ | ------------ | ------------ |\n| 存储限制  | 64TB  | 有  | 有  |\n| 事务安全  | 支持  | -  | -  |\n| 锁机制  | 行锁  | 表锁  | 表锁  |\n| B+tree索引  | 支持  | 支持  | 支持  |\n| Hash索引  | -  | -  | 支持  |\n| 全文索引  | 支持（5.6版本之后）  | 支持  | -  |\n| 空间使用  | 高  | 低  | N/A  |\n| 内存使用  | 高  | 低  | 中等  |\n| 批量插入速度  | 低  | 高  | 高  |\n| 支持外键  | 支持  | -  | -  |\n\n### 存储引擎的选择\n\n在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。\n\n- InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择\n- MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。\n- Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性\n\n电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。\n\n## 性能分析\n\n### 查看执行频次\n\n查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：\n`SHOW GLOBAL STATUS LIKE 'Com_______';` 或者 `SHOW SESSION STATUS LIKE 'Com_______';`\n例：`show global status like 'Com_______'`\n\n### 慢查询日志\n\n慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。\nMySQL的慢查询日志默认没有开启，需要在MySQL的配置文件（/etc/my.cnf）中配置如下信息：\n\t# 开启慢查询日志开关\n\tslow_query_log=1\n\t# 设置慢查询日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志\n\tlong_query_time=2\n更改后记得重启MySQL服务，日志文件位置：/var/lib/mysql/localhost-slow.log\n\n查看慢查询日志开关状态：\n`show variables like 'slow_query_log';`\n\n### profile\n\nshow profile 能在做SQL优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：\n`SELECT @@have_profiling;`\nprofiling 默认关闭，可以通过set语句在session/global级别开启 profiling：\n`SET profiling = 1;`\n查看所有语句的耗时：\n`show profiles;`\n查看指定query_id的SQL语句各个阶段的耗时：\n`show profile for query query_id;`\n查看指定query_id的SQL语句CPU的使用情况\n`show profile cpu for query query_id;`\n\n### explain\n\nEXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。\n语法：\n\t# 直接在select语句之前加上关键字 explain / desc\n\tEXPLAIN SELECT 字段列表 FROM 表名 HWERE 条件;\n\nEXPLAIN 各字段含义：\n\n- id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id相同，执行顺序从上到下；id不同，值越大越先执行）\n- select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（SELECT/WHERE之后包含了子查询）等\n- type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all\n- possible_key：可能应用在这张表上的索引，一个或多个\n- Key：实际使用的索引，如果为 NULL，则没有使用索引\n- Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好\n- rows：MySQL认为必须要执行的行数，在InnoDB引擎的表中，是一个估计值，可能并不总是准确的\n- filtered：表示返回结果的行数占需读取行数的百分比，filtered的值越大越好\n\n## 索引\n\n索引是帮助 MySQL **高效获取数据**的**数据结构（有序）**。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。\n\n优缺点：\n\n优点：\n\n- 提高数据检索效率，降低数据库的IO成本\n- 通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗\n\n缺点：\n\n- 索引列也是要占用空间的\n- 索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE\n\n### 索引结构\n\n| 索引结构  | 描述  |\n| ------------ | ------------ |\n| B+Tree  | 最常见的索引类型，大部分引擎都支持B+树索引  |\n| Hash  | 底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询  |\n| R-Tree(空间索引)  | 空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少  |\n| Full-Text(全文索引)  | 是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES  |\n\n| 索引  | InnoDB  | MyISAM  | Memory  |\n| ------------ | ------------ | ------------ | ------------ |\n| B+Tree索引  | 支持  | 支持  | 支持  |\n| Hash索引  | 不支持  | 不支持  | 支持  |\n| R-Tree索引  | 不支持  | 支持  | 不支持  |\n| Full-text  | 5.6版本后支持  | 支持  | 不支持  |\n\n#### B-Tree\n\n![二叉树](https://dhc.pythonanywhere.com/media/editor/二叉树_20220316153214227108.png \"二叉树\")\n\n二叉树的缺点可以用红黑树来解决：\n![红黑树](https://dhc.pythonanywhere.com/media/editor/红黑树_20220316163142686602.png \"红黑树\")\n红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。\n\n为了解决上述问题，可以使用 B-Tree 结构。\nB-Tree (多路平衡查找树) 以一棵最大度数（max-degree，指一个节点的子节点个数）为5（5阶）的 b-tree 为例（每个节点最多存储4个key，5个指针）\n\n![B-Tree结构](https://dhc.pythonanywhere.com/media/editor/B-Tree结构_20220316163813441163.png \"B-Tree结构\")\n\n> B-Tree 的数据插入过程动画参照：https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68\n演示地址：https://www.cs.usfca.edu/~galles/visualization/BTree.html\n\n#### B+Tree\n\n结构图：\n\n![B+Tree结构图](https://dhc.pythonanywhere.com/media/editor/B+Tree结构图_20220316170700591277.png \"B+Tree结构图\")\n\n> 演示地址：https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html\n\n与 B-Tree 的区别：\n\n- 所有的数据都会出现在叶子节点\n- 叶子节点形成一个单向链表\n\nMySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。\n\n![MySQL B+Tree 结构图](https://dhc.pythonanywhere.com/media/editor/结构图_20220316171730865611.png \"MySQL B+Tree 结构图\")\n\n#### Hash\n\n哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。\n如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可以通过链表来解决。\n\n![Hash索引原理图](https://dhc.pythonanywhere.com/media/editor/Hash索引原理图_20220317143226150679.png \"Hash索引原理图\")\n\n特点：\n\n- Hash索引只能用于对等比较（=、in），不支持范围查询（betwwn、>、<、...）\n- 无法利用索引完成排序操作\n- 查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引\n\n存储引擎支持：\n\n- Memory\n- InnoDB: 具有自适应hash功能，hash索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的\n\n#### 面试题\n\n1. 为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？\n\n- 相对于二叉树，层级更少，搜索效率高\n- 对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低\n- 相对于 Hash 索引，B+Tree 支持范围匹配及排序操作\n\n### 索引分类\n\n| 分类  | 含义  | 特点  | 关键字  |\n| ------------ | ------------ | ------------ | ------------ |\n| 主键索引  | 针对于表中主键创建的索引  | 默认自动创建，只能有一个  | PRIMARY  |\n| 唯一索引  | 避免同一个表中某数据列中的值重复  | 可以有多个  | UNIQUE  |\n| 常规索引  | 快速定位特定数据  | 可以有多个  |   |\n| 全文索引  | 全文索引查找的是文本中的关键词，而不是比较索引中的值  | 可以有多个  | FULLTEXT  |\n\n在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：\n\n| 分类  | 含义  | 特点  |\n| ------------ | ------------ | ------------ |\n| 聚集索引(Clustered Index)  | 将数据存储与索引放一块，索引结构的叶子节点保存了行数据  | 必须有，而且只有一个  |\n| 二级索引(Secondary Index)  | 将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键  | 可以存在多个  |\n\n演示图：\n\n![大致原理](https://dhc.pythonanywhere.com/media/editor/原理图_20220318194454880073.png \"大致原理\")\n![演示图](https://dhc.pythonanywhere.com/media/editor/演示图_20220319215403721066.png \"演示图\")\n\n聚集索引选取规则：\n\n- 如果存在主键，主键索引就是聚集索引\n- 如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引\n- 如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引\n\n#### 思考题\n\n1\\. 以下 SQL 语句，哪个执行效率高？为什么？\n\n```mysql\nselect * from user where id = 10;\nselect * from user where name = 'Arm';\n-- 备注：id为主键，name字段创建的有索引\n```\n\n答：第一条语句，因为第二条需要回表查询，相当于两个步骤。\n\n2\\. InnoDB 主键索引的 B+Tree 高度为多少？\n\n答：假设一行数据大小为1k，一页中可以存储16行这样的数据。InnoDB 的指针占用6个字节的空间，主键假设为bigint，占用字节数为8.\n可得公式：`n * 8 + (n + 1) * 6 = 16 * 1024`，其中 8 表示 bigint 占用的字节数，n 表示当前节点存储的key的数量，(n + 1) 表示指针数量（比key多一个）。算出n约为1170。\n\n如果树的高度为2，那么他能存储的数据量大概为：`1171 * 16 = 18736`；\n如果树的高度为3，那么他能存储的数据量大概为：`1171 * 1171 * 16 = 21939856`。\n\n另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。\n\n### 语法\n\n创建索引：\n`CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...);`\n如果不加 CREATE 后面不加索引类型参数，则创建的是常规索引\n\n查看索引：\n`SHOW INDEX FROM table_name;`\n\n删除索引：\n`DROP INDEX index_name ON table_name;`\n\n案例：\n\n```mysql\n-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引\ncreate index idx_user_name on tb_user(name);\n-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引\ncreate unique index idx_user_phone on tb_user (phone);\n-- 为profession, age, status创建联合索引\ncreate index idx_user_pro_age_stat on tb_user(profession, age, status);\n-- 为email建立合适的索引来提升查询效率\ncreate index idx_user_email on tb_user(email);\n\n-- 删除索引\ndrop index idx_user_email on tb_user;\n```\n\n### 使用规则\n\n#### 最左前缀法则\n\n如果索引关联了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。\n如果跳跃某一列，索引将部分失效（后面的字段索引失效）。\n\n联合索引中，出现范围查询（<, >），范围查询右侧的列索引失效。可以用>=或者<=来规避索引失效问题。\n\n#### 索引失效情况\n\n1. 在索引列上进行运算操作，索引将失效。如：`explain select * from tb_user where substring(phone, 10, 2) = '15';`\n2. 字符串类型字段使用时，不加引号，索引将失效。如：`explain select * from tb_user where phone = 17799990015;`，此处phone的值没有加引号\n3. 模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如：`explain select * from tb_user where profession like '%工程';`，前后都有 % 也会失效。\n4. 用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。\n5. 如果 MySQL 评估使用索引比全表更慢，则不使用索引。\n\n#### SQL 提示\n\n是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。\n\n例如，使用索引：\n`explain select * from tb_user use index(idx_user_pro) where profession=\"软件工程\";`\n不使用哪个索引：\n`explain select * from tb_user ignore index(idx_user_pro) where profession=\"软件工程\";`\n必须使用哪个索引：\n`explain select * from tb_user force index(idx_user_pro) where profession=\"软件工程\";`\n\nuse 是建议，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，force就是无论如何都强制使用该索引。\n\n#### 覆盖索引&回表查询\n\n尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。\n\nexplain 中 extra 字段含义：\n`using index condition`：查找使用了索引，但是需要回表查询数据\n`using where; using index;`：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询\n\n如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是select \\*；如果在辅助索引中找聚集索引，如`select id, name from xxx where name='xxx';`，也只需要通过辅助索引(name)查找到对应的id，返回name和name索引对应的id即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如`select id, name, gender from xxx where name='xxx';`\n\n所以尽量不要用`select *`，容易出现回表查询，降低效率，除非有联合索引包含了所有字段\n\n面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下SQL语句进行优化，该如何进行才是最优方案：\n`select id, username, password from tb_user where username='itcast';`\n\n解：给username和password字段建立联合索引，则不需要回表查询，直接覆盖索引\n\n#### 前缀索引\n\n当字段类型为字符串（varchar, text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。\n\n语法：`create index idx_xxxx on table_name(columnn(n));`\n前缀长度：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。\n求选择性公式：\n```mysql\nselect count(distinct email) / count(*) from tb_user;\nselect count(distinct substring(email, 1, 5)) / count(*) from tb_user;\n```\n\nshow index 里面的sub_part可以看到接取的长度\n\n#### 单列索引&联合索引\n\n单列索引：即一个索引只包含单个列\n联合索引：即一个索引包含了多个列\n在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。\n\n单列索引情况：\n`explain select id, phone, name from tb_user where phone = '17799990010' and name = '韩信';`\n这句只会用到phone索引字段\n\n##### 注意事项\n\n- 多条件联合查询时，MySQL优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询\n\n### 设计原则\n\n1. 针对于数据量较大，且查询比较频繁的表建立索引\n2. 针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引\n3. 尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高\n4. 如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引\n5. 尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率\n6. 要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率\n7. 如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询\n\n## SQL 优化\n\n### 插入数据\n\n普通插入：\n\n1. 采用批量插入（一次插入的数据不建议超过1000条）\n2. 手动提交事务\n3. 主键顺序插入\n\n大批量插入：\n如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令插入。\n\n```mysql\n# 客户端连接服务端时，加上参数 --local-infile（这一行在bash/cmd界面输入）\nmysql --local-infile -u root -p\n# 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关\nset global local_infile = 1;\nselect @@local_infile;\n# 执行load指令将准备好的数据，加载到表结构中\nload data local infile '/root/sql1.log' into table 'tb_user' fields terminated by ',' lines terminated by '\\n';\n```\n\n### 主键优化\n\n数据组织方式：在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（Index organized table, IOT）\n\n页分裂：页可以为空，也可以填充一般，也可以填充100%，每个页包含了2-N行数据（如果一行数据过大，会行溢出），根据主键排列。\n页合并：当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录到达 MERGE_THRESHOLD（默认为页的50%），InnoDB会开始寻找最靠近的页（前后）看看是否可以将这两个页合并以优化空间使用。\n\nMERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或创建索引时指定\n\n> 文字说明不够清晰明了，具体可以看视频里的PPT演示过程：https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90\n\n主键设计原则：\n\n- 满足业务需求的情况下，尽量降低主键的长度\n- 插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键\n- 尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号\n- 业务操作时，避免对主键的修改\n\n### order by优化\n\n1. Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序\n2. Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高\n\n如果order by字段全部使用升序排序或者降序排序，则都会走索引，但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain的extra信息显示的是`Using index, Using filesort`，如果要优化掉Using filesort，则需要另外再创建一个索引，如：`create index idx_user_age_phone_ad on tb_user(age asc, phone desc);`，此时使用`select id, age, phone from tb_user order by age asc, phone desc;`会全部走索引\n\n总结：\n\n- 根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则\n- 尽量使用覆盖索引\n- 多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC/DESC）\n- 如果不可避免出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认256k）\n\n### group by优化\n\n- 在分组操作时，可以通过索引来提高效率\n- 分组操作时，索引的使用也是满足最左前缀法则的\n\n如索引为`idx_user_pro_age_stat`，则句式可以是`select ... where profession order by age`，这样也符合最左前缀法则\n\n### limit优化\n\n常见的问题如`limit 2000000, 10`，此时需要 MySQL 排序前2000000条记录，但仅仅返回2000000 - 2000010的记录，其他记录丢弃，查询排序的代价非常大。\n优化方案：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化\n\n例如：\n\n```mysql\n-- 此语句耗时很长\nselect * from tb_sku limit 9000000, 10;\n-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询\nselect id from tb_sku order by id limit 9000000, 10;\n-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit\n-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);\n-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度\nselect * from tb_sku as s, (select id from tb_sku order by id limit 9000000, 10) as a where s.id = a.id;\n```\n\n### count优化\n\nMyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(\\*) 的时候会直接返回这个数，效率很高（前提是不适用where）；\nInnoDB 在执行 count(\\*) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。\n优化方案：自己计数，如创建key-value表存储在内存或硬盘，或者是用redis\n\ncount的几种用法：\n\n- 如果count函数的参数（count里面写的那个字段）不是NULL（字段值不为NULL），累计值就加一，最后返回累计值\n- 用法：count(\\*)、count(主键)、count(字段)、count(1)\n- count(主键)跟count(\\*)一样，因为主键不能为空；count(字段)只计算字段值不为NULL的行；count(1)引擎会为每行添加一个1，然后就count这个1，返回结果也跟count(\\*)一样；count(null)返回0\n\n各种用法的性能：\n\n- count(主键)：InnoDB引擎会遍历整张表，把每行的主键id值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）\n- count(字段)：没有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加；有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加\n- count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加\n- count(\\*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加\n\n按效率排序：count(字段) < count(主键) < count(1) < count(\\*)，所以尽量使用 count(\\*)\n\n### update优化（避免行锁升级为表锁）\n\nInnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。\n\n如以下两条语句：\n`update student set no = '123' where id = 1;`，这句由于id有主键索引，所以只会锁这一行；\n`update student set no = '123' where name = 'test';`，这句由于name没有索引，所以会把整张表都锁住进行数据更新，解决方法是给name字段添加索引\n\n# 数据类型\n\n## 整型\n\n| 类型名称      | 取值范围                                  | 大小    |\n| ------------- | ----------------------------------------- | ------- |\n| TINYINT       | -128〜127                                 | 1个字节 |\n| SMALLINT      | -32768〜32767                             | 2个宇节 |\n| MEDIUMINT     | -8388608〜8388607                         | 3个字节 |\n| INT (INTEGHR) | -2147483648〜2147483647                   | 4个字节 |\n| BIGINT        | -9223372036854775808〜9223372036854775807 | 8个字节 |\n\n无符号在数据类型后加 unsigned 关键字。\n\n## 浮点型\n\n| 类型名称            | 说明               | 存储需求   |\n| ------------------- | ------------------ | ---------- |\n| FLOAT               | 单精度浮点数       | 4 个字节   |\n| DOUBLE              | 双精度浮点数       | 8 个字节   |\n| DECIMAL (M, D)，DEC | 压缩的“严格”定点数 | M+2 个字节 |\n\n## 日期和时间\n\n| 类型名称  | 日期格式            | 日期范围                                          | 存储需求 |\n| --------- | ------------------- | ------------------------------------------------- | -------- |\n| YEAR      | YYYY                | 1901 ~ 2155                                       | 1 个字节 |\n| TIME      | HH:MM:SS            | -838:59:59 ~ 838:59:59                            | 3 个字节 |\n| DATE      | YYYY-MM-DD          | 1000-01-01 ~ 9999-12-3                            | 3 个字节 |\n| DATETIME  | YYYY-MM-DD HH:MM:SS | 1000-01-01 00:00:00 ~ 9999-12-31 23:59:59         | 8 个字节 |\n| TIMESTAMP | YYYY-MM-DD HH:MM:SS | 1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC | 4 个字节 |\n\n## 字符串\n\n| 类型名称   | 说明                                         | 存储需求                                                   |\n| ---------- | -------------------------------------------- | ---------------------------------------------------------- |\n| CHAR(M)    | 固定长度非二进制字符串                       | M 字节，1<=M<=255                                          |\n| VARCHAR(M) | 变长非二进制字符串                           | L+1字节，在此，L< = M和 1<=M<=255                          |\n| TINYTEXT   | 非常小的非二进制字符串                       | L+1字节，在此，L<2^8                                       |\n| TEXT       | 小的非二进制字符串                           | L+2字节，在此，L<2^16                                      |\n| MEDIUMTEXT | 中等大小的非二进制字符串                     | L+3字节，在此，L<2^24                                      |\n| LONGTEXT   | 大的非二进制字符串                           | L+4字节，在此，L<2^32                                      |\n| ENUM       | 枚举类型，只能有一个枚举字符串值             | 1或2个字节，取决于枚举值的数目 (最大值为65535)             |\n| SET        | 一个设置，字符串对象可以有零个或 多个SET成员 | 1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员） |\n\n## 二进制类型\n\n| 类型名称       | 说明                 | 存储需求               |\n| -------------- | -------------------- | ---------------------- |\n| BIT(M)         | 位字段类型           | 大约 (M+7)/8 字节      |\n| BINARY(M)      | 固定长度二进制字符串 | M 字节                 |\n| VARBINARY (M)  | 可变长度二进制字符串 | M+1 字节               |\n| TINYBLOB (M)   | 非常小的BLOB         | L+1 字节，在此，L<2^8  |\n| BLOB (M)       | 小 BLOB              | L+2 字节，在此，L<2^16 |\n| MEDIUMBLOB (M) | 中等大小的BLOB       | L+3 字节，在此，L<2^24 |\n| LONGBLOB (M)   | 非常大的BLOB         | L+4 字节，在此，L<2^32 |\n\n# 权限一览表\n\n> 具体权限的作用详见[官方文档](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html \"官方文档\")\n\nGRANT 和 REVOKE 允许的静态权限\n\n| Privilege                                                    | Grant Table Column           | Context                               |\n| :----------------------------------------------------------- | :--------------------------- | :------------------------------------ |\n| [`ALL [PRIVILEGES]`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_all) | Synonym for “all privileges” | Server administration                 |\n| [`ALTER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter) | `Alter_priv`                 | Tables                                |\n| [`ALTER ROUTINE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter-routine) | `Alter_routine_priv`         | Stored routines                       |\n| [`CREATE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create) | `Create_priv`                | Databases, tables, or indexes         |\n| [`CREATE ROLE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-role) | `Create_role_priv`           | Server administration                 |\n| [`CREATE ROUTINE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-routine) | `Create_routine_priv`        | Stored routines                       |\n| [`CREATE TABLESPACE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-tablespace) | `Create_tablespace_priv`     | Server administration                 |\n| [`CREATE TEMPORARY TABLES`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-temporary-tables) | `Create_tmp_table_priv`      | Tables                                |\n| [`CREATE USER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-user) | `Create_user_priv`           | Server administration                 |\n| [`CREATE VIEW`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-view) | `Create_view_priv`           | Views                                 |\n| [`DELETE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_delete) | `Delete_priv`                | Tables                                |\n| [`DROP`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop) | `Drop_priv`                  | Databases, tables, or views           |\n| [`DROP ROLE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop-role) | `Drop_role_priv`             | Server administration                 |\n| [`EVENT`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_event) | `Event_priv`                 | Databases                             |\n| [`EXECUTE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_execute) | `Execute_priv`               | Stored routines                       |\n| [`FILE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_file) | `File_priv`                  | File access on server host            |\n| [`GRANT OPTION`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_grant-option) | `Grant_priv`                 | Databases, tables, or stored routines |\n| [`INDEX`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_index) | `Index_priv`                 | Tables                                |\n| [`INSERT`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_insert) | `Insert_priv`                | Tables or columns                     |\n| [`LOCK TABLES`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_lock-tables) | `Lock_tables_priv`           | Databases                             |\n| [`PROCESS`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_process) | `Process_priv`               | Server administration                 |\n| [`PROXY`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_proxy) | See `proxies_priv` table     | Server administration                 |\n| [`REFERENCES`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_references) | `References_priv`            | Databases or tables                   |\n| [`RELOAD`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_reload) | `Reload_priv`                | Server administration                 |\n| [`REPLICATION CLIENT`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-client) | `Repl_client_priv`           | Server administration                 |\n| [`REPLICATION SLAVE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave) | `Repl_slave_priv`            | Server administration                 |\n| [`SELECT`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_select) | `Select_priv`                | Tables or columns                     |\n| [`SHOW DATABASES`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-databases) | `Show_db_priv`               | Server administration                 |\n| [`SHOW VIEW`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-view) | `Show_view_priv`             | Views                                 |\n| [`SHUTDOWN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_shutdown) | `Shutdown_priv`              | Server administration                 |\n| [`SUPER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_super) | `Super_priv`                 | Server administration                 |\n| [`TRIGGER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_trigger) | `Trigger_priv`               | Tables                                |\n| [`UPDATE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_update) | `Update_priv`                | Tables or columns                     |\n| [`USAGE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_usage) | Synonym for “no privileges”  | Server administration                 |\n\nGRANT 和 REVOKE 允许的动态权限\n\n| Privilege                                                    | Context                                           |\n| :----------------------------------------------------------- | :------------------------------------------------ |\n| [`APPLICATION_PASSWORD_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_application-password-admin) | Dual password administration                      |\n| [`AUDIT_ABORT_EXEMPT`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-abort-exempt) | Allow queries blocked by audit log filter         |\n| [`AUDIT_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-admin) | Audit log administration                          |\n| [`AUTHENTICATION_POLICY_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_authentication-policy-admin) | Authentication administration                     |\n| [`BACKUP_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_backup-admin) | Backup administration                             |\n| [`BINLOG_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-admin) | Backup and Replication administration             |\n| [`BINLOG_ENCRYPTION_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-encryption-admin) | Backup and Replication administration             |\n| [`CLONE_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_clone-admin) | Clone administration                              |\n| [`CONNECTION_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_connection-admin) | Server administration                             |\n| [`ENCRYPTION_KEY_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_encryption-key-admin) | Server administration                             |\n| [`FIREWALL_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-admin) | Firewall administration                           |\n| [`FIREWALL_EXEMPT`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-exempt) | Firewall administration                           |\n| [`FIREWALL_USER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-user) | Firewall administration                           |\n| [`FLUSH_OPTIMIZER_COSTS`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-optimizer-costs) | Server administration                             |\n| [`FLUSH_STATUS`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-status) | Server administration                             |\n| [`FLUSH_TABLES`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-tables) | Server administration                             |\n| [`FLUSH_USER_RESOURCES`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-user-resources) | Server administration                             |\n| [`GROUP_REPLICATION_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-admin) | Replication administration                        |\n| [`GROUP_REPLICATION_STREAM`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-stream) | Replication administration                        |\n| [`INNODB_REDO_LOG_ARCHIVE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_innodb-redo-log-archive) | Redo log archiving administration                 |\n| [`NDB_STORED_USER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_ndb-stored-user) | NDB Cluster                                       |\n| [`PASSWORDLESS_USER_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_passwordless-user-admin) | Authentication administration                     |\n| [`PERSIST_RO_VARIABLES_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_persist-ro-variables-admin) | Server administration                             |\n| [`REPLICATION_APPLIER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-applier) | `PRIVILEGE_CHECKS_USER` for a replication channel |\n| [`REPLICATION_SLAVE_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave-admin) | Replication administration                        |\n| [`RESOURCE_GROUP_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-admin) | Resource group administration                     |\n| [`RESOURCE_GROUP_USER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-user) | Resource group administration                     |\n| [`ROLE_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_role-admin) | Server administration                             |\n| [`SESSION_VARIABLES_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_session-variables-admin) | Server administration                             |\n| [`SET_USER_ID`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_set-user-id) | Server administration                             |\n| [`SHOW_ROUTINE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-routine) | Server administration                             |\n| [`SYSTEM_USER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-user) | Server administration                             |\n| [`SYSTEM_VARIABLES_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-variables-admin) | Server administration                             |\n| [`TABLE_ENCRYPTION_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_table-encryption-admin) | Server administration                             |\n| [`VERSION_TOKEN_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_version-token-admin) | Server administration                             |\n| [`XA_RECOVER_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_xa-recover-admin) | Server administration                             |\n\n# 图形化界面工具\n\n- Workbench(免费): http://dev.mysql.com/downloads/workbench/\n- navicat(收费，试用版30天): https://www.navicat.com/en/download/navicat-for-mysql\n- Sequel Pro(开源免费，仅支持Mac OS): http://www.sequelpro.com/\n- HeidiSQL(免费): http://www.heidisql.com/\n- phpMyAdmin(免费): https://www.phpmyadmin.net/\n- SQLyog: https://sqlyog.en.softonic.com/\n\n# 安装\n\n# 小技巧\n\n1. 在SQL语句之后加上`\\G`会将结果的表格形式转换成行文本形式\n2. 查看Mysql数据库占用空间：\n```mysql\nSELECT table_schema \"Database Name\"\n     , SUM(data_length + index_length) / (1024 * 1024) \"Database Size in MB\"\nFROM information_schema.TABLES\nGROUP BY table_schema;\n```\n","source":"_posts/MySql.md","raw":"---\ntitle:  MySQL笔记\ntags: [数据库,学习,MySQL]\ncategories: [MySQL]\ndate: 2022-9-7\n\n---\n\n# 基础篇\n\n## 通用语法及分类\n\n- DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）\n- DML: 数据操作语言，用来对数据库表中的数据进行增删改\n- DQL: 数据查询语言，用来查询数据库中表的记录\n- DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限\n\n### DDL（数据定义语言）\n\n数据定义语言\n\n#### 数据库操作\n\n查询所有数据库：\n`SHOW DATABASES;`\n查询当前数据库：\n`SELECT DATABASE();`\n创建数据库：\n`CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];`\n删除数据库：\n`DROP DATABASE [ IF EXISTS ] 数据库名;`\n使用数据库：\n`USE 数据库名;`\n\n##### 注意事项\n\n- UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集\n\n#### 表操作\n\n查询当前数据库所有表：\n`SHOW TABLES;`\n查询表结构：\n`DESC 表名;`\n查询指定表的建表语句：\n`SHOW CREATE TABLE 表名;`\n\n创建表：\n```mysql\nCREATE TABLE 表名(\n\t字段1 字段1类型 [COMMENT 字段1注释],\n\t字段2 字段2类型 [COMMENT 字段2注释],\n\t字段3 字段3类型 [COMMENT 字段3注释],\n\t...\n\t字段n 字段n类型 [COMMENT 字段n注释]\n)[ COMMENT 表注释 ];\n```\n**最后一个字段后面没有逗号**\n\n添加字段：\n`ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];`\n例：`ALTER TABLE emp ADD nickname varchar(20) COMMENT '昵称';`\n\n修改数据类型：\n`ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);`\n修改字段名和字段类型：\n`ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];`\n例：将emp表的nickname字段修改为username，类型为varchar(30)\n`ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT '昵称';`\n\n删除字段：\n`ALTER TABLE 表名 DROP 字段名;`\n\n修改表名：\n`ALTER TABLE 表名 RENAME TO 新表名`\n\n删除表：\n`DROP TABLE [IF EXISTS] 表名;`\n删除表，并重新创建该表：\n`TRUNCATE TABLE 表名;`\n\n### DML（数据操作语言）\n\n#### 添加数据\n\n指定字段：\n`INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);`\n全部字段：\n`INSERT INTO 表名 VALUES (值1, 值2, ...);`\n\n批量添加数据：\n`INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);`\n`INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);`\n\n##### 注意事项\n\n- 字符串和日期类型数据应该包含在引号中\n- 插入的数据大小应该在字段的规定范围内\n\n#### 更新和删除数据\n\n修改数据：\n`UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];`\n例：\n`UPDATE emp SET name = 'Jack' WHERE id = 1;`\n\n删除数据：\n`DELETE FROM 表名 [ WHERE 条件 ];`\n\n### DQL（数据查询语言）\n\n语法：\n```mysql\nSELECT\n\t字段列表\nFROM\n\t表名字段\nWHERE\n\t条件列表\nGROUP BY\n\t分组字段列表\nHAVING\n\t分组后的条件列表\nORDER BY\n\t排序字段列表\nLIMIT\n\t分页参数\n```\n\n#### 基础查询\n\n查询多个字段：\n`SELECT 字段1, 字段2, 字段3, ... FROM 表名;`\n`SELECT * FROM 表名;`\n\n设置别名：\n`SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;`\n`SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;`\n\n去除重复记录：\n`SELECT DISTINCT 字段列表 FROM 表名;`\n\n转义：\n`SELECT * FROM 表名 WHERE name LIKE '/_张三' ESCAPE '/'`\n/ 之后的\\_不作为通配符\n\n#### 条件查询\n\n语法：\n`SELECT 字段列表 FROM 表名 WHERE 条件列表;`\n\n条件：\n\n| 比较运算符          | 功能                                        |\n| ------------------- | ------------------------------------------- |\n| >                   | 大于                                        |\n| >=                  | 大于等于                                    |\n| <                   | 小于                                        |\n| <=                  | 小于等于                                    |\n| =                   | 等于                                        |\n| <> 或 !=            | 不等于                                      |\n| BETWEEN ... AND ... | 在某个范围内（含最小、最大值）              |\n| IN(...)             | 在in之后的列表中的值，多选一                |\n| LIKE 占位符         | 模糊匹配（\\_匹配单个字符，%匹配任意个字符） |\n| IS NULL             | 是NULL                                      |\n\n| 逻辑运算符         | 功能                         |\n| ------------------ | ---------------------------- |\n| AND 或 &&          | 并且（多个条件同时成立）     |\n| OR 或 &#124;&#124; | 或者（多个条件任意一个成立） |\n| NOT 或 !           | 非，不是                     |\n\n例子：\n```mysql\n-- 年龄等于30\nselect * from employee where age = 30;\n-- 年龄小于30\nselect * from employee where age < 30;\n-- 小于等于\nselect * from employee where age <= 30;\n-- 没有身份证\nselect * from employee where idcard is null or idcard = '';\n-- 有身份证\nselect * from employee where idcard;\nselect * from employee where idcard is not null;\n-- 不等于\nselect * from employee where age != 30;\n-- 年龄在20到30之间\nselect * from employee where age between 20 and 30;\nselect * from employee where age >= 20 and age <= 30;\n-- 下面语句不报错，但查不到任何信息\nselect * from employee where age between 30 and 20;\n-- 性别为女且年龄小于30\nselect * from employee where age < 30 and gender = '女';\n-- 年龄等于25或30或35\nselect * from employee where age = 25 or age = 30 or age = 35;\nselect * from employee where age in (25, 30, 35);\n-- 姓名为两个字\nselect * from employee where name like '__';\n-- 身份证最后为X\nselect * from employee where idcard like '%X';\n```\n\n#### 聚合查询（聚合函数）\n\n常见聚合函数：\n\n| 函数  | 功能     |\n| ----- | -------- |\n| count | 统计数量 |\n| max   | 最大值   |\n| min   | 最小值   |\n| avg   | 平均值   |\n| sum   | 求和     |\n\n语法：\n`SELECT 聚合函数(字段列表) FROM 表名;`\n例：\n`SELECT count(id) from employee where workaddress = \"广东省\";`\n\n#### 分组查询\n\n语法：\n`SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];`\n\nwhere 和 having 的区别：\n\n- 执行时机不同：where是分组之前进行过滤，不满足where条件不参与分组；having是分组后对结果进行过滤。\n- 判断条件不同：where不能对聚合函数进行判断，而having可以。\n\n例子：\n\n```mysql\n-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）\nselect count(*) from employee group by gender;\n-- 根据性别分组，统计男性和女性数量\nselect gender, count(*) from employee group by gender;\n-- 根据性别分组，统计男性和女性的平均年龄\nselect gender, avg(age) from employee group by gender;\n-- 年龄小于45，并根据工作地址分组\nselect workaddress, count(*) from employee where age < 45 group by workaddress;\n-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址\nselect workaddress, count(*) address_count from employee where age < 45 group by workaddress having address_count >= 3;\n```\n\n##### 注意事项\n\n- 执行顺序：where > 聚合函数 > having\n- 分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义\n\n#### 排序查询\n\n语法：\n`SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;`\n\n排序方式：\n\n- ASC: 升序（默认）\n- DESC: 降序\n\n例子：\n\n```mysql\n-- 根据年龄升序排序\nSELECT * FROM employee ORDER BY age ASC;\nSELECT * FROM employee ORDER BY age;\n-- 两字段排序，根据年龄升序排序，入职时间降序排序\nSELECT * FROM employee ORDER BY age ASC, entrydate DESC;\n```\n\n##### 注意事项\n\n如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序\n\n#### 分页查询\n\n语法：\n`SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;`\n\n例子：\n\n```mysql\n-- 查询第一页数据，展示10条\nSELECT * FROM employee LIMIT 0, 10;\n-- 查询第二页\nSELECT * FROM employee LIMIT 10, 10;\n```\n\n##### 注意事项\n\n- 起始索引从0开始，起始索引 = （查询页码 - 1） * 每页显示记录数\n- 分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT\n- 如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10\n\n#### DQL执行顺序\n\nFROM -> WHERE -> GROUP BY -> SELECT -> ORDER BY -> LIMIT\n\n### DCL\n\n#### 管理用户\n\n查询用户：\n\n```mysql\nUSER mysql;\nSELECT * FROM user;\n```\n\n创建用户:\n`CREATE USER '用户名'@'主机名' IDENTIFIED BY '密码';`\n\n修改用户密码：\n`ALTER USER '用户名'@'主机名' IDENTIFIED WITH mysql_native_password BY '新密码';`\n\n删除用户：\n`DROP USER '用户名'@'主机名';`\n\n例子：\n\n```mysql\n-- 创建用户test，只能在当前主机localhost访问\ncreate user 'test'@'localhost' identified by '123456';\n-- 创建用户test，能在任意主机访问\ncreate user 'test'@'%' identified by '123456';\ncreate user 'test' identified by '123456';\n-- 修改密码\nalter user 'test'@'localhost' identified with mysql_native_password by '1234';\n-- 删除用户\ndrop user 'test'@'localhost';\n```\n\n##### 注意事项\n\n- 主机名可以使用 % 通配\n\n#### 权限控制\n\n常用权限：\n\n| 权限                | 说明               |\n| ------------------- | ------------------ |\n| ALL, ALL PRIVILEGES | 所有权限           |\n| SELECT              | 查询数据           |\n| INSERT              | 插入数据           |\n| UPDATE              | 修改数据           |\n| DELETE              | 删除数据           |\n| ALTER               | 修改表             |\n| DROP                | 删除数据库/表/视图 |\n| CREATE              | 创建数据库/表      |\n\n更多权限请看[权限一览表](#权限一览表 \"权限一览表\")\n\n查询权限：\n`SHOW GRANTS FOR '用户名'@'主机名';`\n\n授予权限：\n`GRANT 权限列表 ON 数据库名.表名 TO '用户名'@'主机名';`\n\n撤销权限：\n`REVOKE 权限列表 ON 数据库名.表名 FROM '用户名'@'主机名';`\n\n##### 注意事项\n\n- 多个权限用逗号分隔\n- 授权时，数据库名和表名可以用 * 进行通配，代表所有\n\n## 函数\n\n- 字符串函数\n- 数值函数\n- 日期函数\n- 流程函数\n\n### 字符串函数\n\n常用函数：\n\n| 函数  | 功能  |\n| ------------ | ------------ |\n| CONCAT(s1, s2, ..., sn)  | 字符串拼接，将s1, s2, ..., sn拼接成一个字符串  |\n| LOWER(str)  | 将字符串全部转为小写  |\n| UPPER(str)  | 将字符串全部转为大写  |\n| LPAD(str, n, pad)  | 左填充，用字符串pad对str的左边进行填充，达到n个字符串长度  |\n| RPAD(str, n, pad)  | 右填充，用字符串pad对str的右边进行填充，达到n个字符串长度  |\n| TRIM(str)  | 去掉字符串头部和尾部的空格  |\n| SUBSTRING(str, start, len)  | 返回从字符串str从start位置起的len个长度的字符串  |\n\n使用示例：\n\n```mysql\n-- 拼接\nSELECT CONCAT('Hello', 'World');\n-- 小写\nSELECT LOWER('Hello');\n-- 大写\nSELECT UPPER('Hello');\n-- 左填充\nSELECT LPAD('01', 5, '-');\n-- 右填充\nSELECT RPAD('01', 5, '-');\n-- 去除空格\nSELECT TRIM(' Hello World ');\n-- 切片（起始索引为1）\nSELECT SUBSTRING('Hello World', 1, 5);\n```\n\n### 数值函数\n\n常见函数：\n\n| 函数  | 功能  |\n| ------------ | ------------ |\n| CEIL(x)  | 向上取整  |\n| FLOOR(x)  | 向下取整  |\n| MOD(x, y)  | 返回x/y的模  |\n| RAND() | 返回0~1内的随机数 |\n| ROUND(x, y) | 求参数x的四舍五入值，保留y位小数 |\n\n### 日期函数\n\n常用函数：\n\n| 函数  | 功能  |\n| ------------ | ------------ |\n| CURDATE()  | 返回当前日期  |\n| CURTIME()  | 返回当前时间  |\n| NOW()  | 返回当前日期和时间  |\n| YEAR(date)  | 获取指定date的年份  |\n| MONTH(date)  | 获取指定date的月份  |\n| DAY(date)  | 获取指定date的日期  |\n| DATE_ADD(date, INTERVAL expr type)  | 返回一个日期/时间值加上一个时间间隔expr后的时间值  |\n| DATEDIFF(date1, date2)  | 返回起始时间date1和结束时间date2之间的天数  |\n\n例子：\n\n```mysql\n-- DATE_ADD\nSELECT DATE_ADD(NOW(), INTERVAL 70 YEAR);\n```\n\n### 流程函数\n\n常用函数：\n\n| 函数  | 功能  |\n| ------------ | ------------ |\n| IF(value, t, f)  | 如果value为true，则返回t，否则返回f  |\n| IFNULL(value1, value2)  | 如果value1不为空，返回value1，否则返回value2  |\n| CASE WHEN [ val1 ] THEN [ res1 ] ... ELSE [ default ] END  | 如果val1为true，返回res1，... 否则返回default默认值  |\n| CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] ... ELSE [ default ] END  | 如果expr的值等于val1，返回res1，... 否则返回default默认值  |\n\n例子：\n\n```mysql\nselect\n\tname,\n\t(case when age > 30 then '中年' else '青年' end)\nfrom employee;\nselect\n\tname,\n\t(case workaddress when '北京市' then '一线城市' when '上海市' then '一线城市' else '二线城市' end) as '工作地址'\nfrom employee;\n```\n\n## 约束\n\n分类：\n\n| 约束  | 描述  | 关键字  |\n| ------------ | ------------ | ------------ |\n| 非空约束  | 限制该字段的数据不能为null  | NOT NULL  |\n| 唯一约束  | 保证该字段的所有数据都是唯一、不重复的  | UNIQUE  |\n| 主键约束  | 主键是一行数据的唯一标识，要求非空且唯一  | PRIMARY KEY  |\n| 默认约束  | 保存数据时，如果未指定该字段的值，则采用默认值  | DEFAULT  |\n| 检查约束（8.0.1版本后）  | 保证字段值满足某一个条件  | CHECK  |\n| 外键约束  | 用来让两张图的数据之间建立连接，保证数据的一致性和完整性  | FOREIGN KEY  |\n\n约束是作用于表中字段上的，可以再创建表/修改表的时候添加约束。\n\n### 常用约束\n\n| 约束条件  | 关键字  |\n| ------------ | ------------ |\n| 主键  | PRIMARY KEY  |\n| 自动增长  | AUTO_INCREMENT  |\n| 不为空  | NOT NULL  |\n| 唯一  | UNIQUE  |\n| 逻辑条件  | CHECK  |\n| 默认值  | DEFAULT  |\n\n例子：\n\n```mysql\ncreate table user(\n\tid int primary key auto_increment,\n\tname varchar(10) not null unique,\n\tage int check(age > 0 and age < 120),\n\tstatus char(1) default '1',\n\tgender char(1)\n);\n```\n\n### 外键约束\n\n添加外键：\n\n```mysql\nCREATE TABLE 表名(\n\t字段名 字段类型,\n\t...\n\t[CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名)\n);\nALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);\n\n-- 例子\nalter table emp add constraint fk_emp_dept_id foreign key(dept_id) references dept(id);\n```\n\n删除外键：\n`ALTER TABLE 表名 DROP FOREIGN KEY 外键名;`\n\n#### 删除/更新行为\n\n| 行为  | 说明  |\n| ------------ | ------------ |\n| NO ACTION  | 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与RESTRICT一致）  |\n| RESTRICT  | 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与NO ACTION一致）  |\n| CASCADE  | 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除/更新外键在子表中的记录  |\n| SET NULL  | 当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（要求该外键允许为null）  |\n| SET DEFAULT  | 父表有变更时，子表将外键设为一个默认值（Innodb不支持）  |\n\n更改删除/更新行为：\n`ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为;`\n\n## 多表查询\n\n### 多表关系\n\n- 一对多（多对一）\n- 多对多\n- 一对一\n\n#### 一对多\n\n案例：部门与员工\n关系：一个部门对应多个员工，一个员工对应一个部门\n实现：在多的一方建立外键，指向一的一方的主键\n\n#### 多对多\n\n案例：学生与课程\n关系：一个学生可以选多门课程，一门课程也可以供多个学生选修\n实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键\n\n#### 一对一\n\n案例：用户与用户详情\n关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率\n实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）\n\n### 查询\n\n合并查询（笛卡尔积，会展示所有组合结果）：\n`select * from employee, dept;`\n\n> 笛卡尔积：两个集合A集合和B集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）\n\n消除无效笛卡尔积：\n`select * from employee, dept where employee.dept = dept.id;`\n\n### 内连接查询\n\n内连接查询的是两张表交集的部分\n\n隐式内连接：\n`SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;`\n\n显式内连接：\n`SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;`\n\n显式性能比隐式高\n\n例子：\n\n```mysql\n-- 查询员工姓名，及关联的部门的名称\n-- 隐式\nselect e.name, d.name from employee as e, dept as d where e.dept = d.id;\n-- 显式\nselect e.name, d.name from employee as e inner join dept as d on e.dept = d.id;\n```\n\n### 外连接查询\n\n左外连接：\n查询左表所有数据，以及两张表交集部分数据\n`SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;`\n相当于查询表1的所有数据，包含表1和表2交集部分数据\n\n右外连接：\n查询右表所有数据，以及两张表交集部分数据\n`SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;`\n\n例子：\n\n```mysql\n-- 左\nselect e.*, d.name from employee as e left outer join dept as d on e.dept = d.id;\nselect d.name, e.* from dept d left outer join emp e on e.dept = d.id;  -- 这条语句与下面的语句效果一样\n-- 右\nselect d.name, e.* from employee as e right outer join dept as d on e.dept = d.id;\n```\n\n左连接可以查询到没有dept的employee，右连接可以查询到没有employee的dept\n\n### 自连接查询\n\n当前表与自身的连接查询，自连接必须使用表别名\n\n语法：\n`SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;`\n\n自连接查询，可以是内连接查询，也可以是外连接查询\n\n例子：\n\n```mysql\n-- 查询员工及其所属领导的名字\nselect a.name, b.name from employee a, employee b where a.manager = b.id;\n-- 没有领导的也查询出来\nselect a.name, b.name from employee a left join employee b on a.manager = b.id;\n```\n\n### 联合查询 union, union all\n\n把多次查询的结果合并，形成一个新的查询集\n\n语法：\n\n```mysql\nSELECT 字段列表 FROM 表A ...\nUNION [ALL]\nSELECT 字段列表 FROM 表B ...\n```\n\n#### 注意事项\n\n- UNION ALL 会有重复结果，UNION 不会\n- 联合查询比使用or效率高，不会使索引失效\n\n### 子查询\n\nSQL语句中嵌套SELECT语句，称谓嵌套查询，又称子查询。\n`SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);`\n**子查询外部的语句可以是 INSERT / UPDATE / DELETE / SELECT 的任何一个**\n\n根据子查询结果可以分为：\n\n- 标量子查询（子查询结果为单个值）\n- 列子查询（子查询结果为一列）\n- 行子查询（子查询结果为一行）\n- 表子查询（子查询结果为多行多列）\n\n根据子查询位置可分为：\n\n- WHERE 之后\n- FROM 之后\n- SELECT 之后\n\n#### 标量子查询\n\n子查询返回的结果是单个值（数字、字符串、日期等）。\n常用操作符：- < > > >= < <=\n\n例子：\n\n```mysql\n-- 查询销售部所有员工\nselect id from dept where name = '销售部';\n-- 根据销售部部门ID，查询员工信息\nselect * from employee where dept = 4;\n-- 合并（子查询）\nselect * from employee where dept = (select id from dept where name = '销售部');\n\n-- 查询xxx入职之后的员工信息\nselect * from employee where entrydate > (select entrydate from employee where name = 'xxx');\n```\n\n#### 列子查询\n\n返回的结果是一列（可以是多行）。\n\n常用操作符：\n\n| 操作符  | 描述  |\n| ------------ | ------------ |\n| IN  | 在指定的集合范围内，多选一  |\n| NOT IN  | 不在指定的集合范围内  |\n| ANY  | 子查询返回列表中，有任意一个满足即可  |\n| SOME  | 与ANY等同，使用SOME的地方都可以使用ANY  |\n| ALL  | 子查询返回列表的所有值都必须满足  |\n\n例子：\n\n```mysql\n-- 查询销售部和市场部的所有员工信息\nselect * from employee where dept in (select id from dept where name = '销售部' or name = '市场部');\n-- 查询比财务部所有人工资都高的员工信息\nselect * from employee where salary > all(select salary from employee where dept = (select id from dept where name = '财务部'));\n-- 查询比研发部任意一人工资高的员工信息\nselect * from employee where salary > any (select salary from employee where dept = (select id from dept where name = '研发部'));\n```\n\n#### 行子查询\n\n返回的结果是一行（可以是多列）。\n常用操作符：=, <, >, IN, NOT IN\n\n例子：\n\n```mysql\n-- 查询与xxx的薪资及直属领导相同的员工信息\nselect * from employee where (salary, manager) = (12500, 1);\nselect * from employee where (salary, manager) = (select salary, manager from employee where name = 'xxx');\n```\n\n#### 表子查询\n\n返回的结果是多行多列\n常用操作符：IN\n\n例子：\n\n```mysql\n-- 查询与xxx1，xxx2的职位和薪资相同的员工\nselect * from employee where (job, salary) in (select job, salary from employee where name = 'xxx1' or name = 'xxx2');\n-- 查询入职日期是2006-01-01之后的员工，及其部门信息\nselect e.*, d.* from (select * from employee where entrydate > '2006-01-01') as e left join dept as d on e.dept = d.id;\n```\n\n## 事务\n\n事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。\n\n基本操作：\n\n```mysql\n-- 1. 查询张三账户余额\nselect * from account where name = '张三';\n-- 2. 将张三账户余额-1000\nupdate account set money = money - 1000 where name = '张三';\n-- 此语句出错后张三钱减少但是李四钱没有增加\n模拟sql语句错误\n-- 3. 将李四账户余额+1000\nupdate account set money = money + 1000 where name = '李四';\n\n-- 查看事务提交方式\nSELECT @@AUTOCOMMIT;\n-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效\nSET @@AUTOCOMMIT = 0;\n-- 提交事务\nCOMMIT;\n-- 回滚事务\nROLLBACK;\n\n-- 设置手动提交后上面代码改为：\nselect * from account where name = '张三';\nupdate account set money = money - 1000 where name = '张三';\nupdate account set money = money + 1000 where name = '李四';\ncommit;\n```\n\n操作方式二：\n\n开启事务：\n`START TRANSACTION 或 BEGIN TRANSACTION;`\n提交事务：\n`COMMIT;`\n回滚事务：\n`ROLLBACK;`\n\n操作实例：\n\n```mysql\nstart transaction;\nselect * from account where name = '张三';\nupdate account set money = money - 1000 where name = '张三';\nupdate account set money = money + 1000 where name = '李四';\ncommit;\n```\n\n### 四大特性ACID\n\n- 原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败\n- 一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态\n- 隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行\n- 持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的\n\n### 并发事务\n\n| 问题  | 描述  |\n| ------------ | ------------ |\n| 脏读  | 一个事务读到另一个事务还没提交的数据  |\n| 不可重复读  | 一个事务先后读取同一条记录，但两次读取的数据不同  |\n| 幻读  | 一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在  |\n\n> 这三个问题的详细演示：https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd \n\n并发事务隔离级别：\n\n| 隔离级别  | 脏读  | 不可重复读  | 幻读  |\n| ------------ | ------------ | ------------ | ------------ |\n| Read uncommitted  | √  | √  | √  |\n| Read committed  | ×  | √  | √  |\n| Repeatable Read(默认)  | ×  | ×  | √  |\n| Serializable  | ×  | ×  | ×  |\n\n- √表示在当前隔离级别下该问题会出现\n- Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差\n\n查看事务隔离级别：\n`SELECT @@TRANSACTION_ISOLATION;`\n设置事务隔离级别：\n`SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE };`\nSESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效\n\n# 进阶篇\n\n## 存储引擎\n\nMySQL体系结构：\n\n![结构图](https://dhc.pythonanywhere.com/media/editor/MySQL体系结构_20220315034329549927.png \"结构图\")\n![层级描述](https://dhc.pythonanywhere.com/media/editor/MySQL体系结构层级含义_20220315034359342837.png \"层级描述\")\n\n存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。\n默认存储引擎是InnoDB。\n\n相关操作：\n\n```mysql\n-- 查询建表语句\nshow create table account;\n-- 建表时指定存储引擎\nCREATE TABLE 表名(\n\t...\n) ENGINE=INNODB;\n-- 查看当前数据库支持的存储引擎\nshow engines;\n```\n\n### InnoDB\n\nInnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。\n\n特点：\n\n- DML 操作遵循 ACID 模型，支持**事务**\n- **行级锁**，提高并发访问性能\n- 支持**外键**约束，保证数据的完整性和正确性\n\n文件：\n\n- xxx.ibd: xxx代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。\n\n参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间\n\n知识点：\n\n查看 Mysql 变量：\n`show variables like 'innodb_file_per_table';`\n\n从idb文件提取表结构数据：\n（在cmd运行）\n`ibd2sdi xxx.ibd`\n\nInnoDB 逻辑存储结构：\n![InnoDB逻辑存储结构](https://dhc.pythonanywhere.com/media/editor/逻辑存储结构_20220316030616590001.png \"InnoDB逻辑存储结构\")\n\n### MyISAM\n\nMyISAM 是 MySQL 早期的默认存储引擎。\n\n特点：\n\n- 不支持事务，不支持外键\n- 支持表锁，不支持行锁\n- 访问速度快\n\n文件：\n\n- xxx.sdi: 存储表结构信息\n- xxx.MYD: 存储数据\n- xxx.MYI: 存储索引\n\n### Memory\n\nMemory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。\n\n特点：\n\n- 存放在内存中，速度快\n- hash索引（默认）\n\n文件：\n\n- xxx.sdi: 存储表结构信息\n\n### 存储引擎特点\n\n| 特点  | InnoDB  | MyISAM  | Memory  |\n| ------------ | ------------ | ------------ | ------------ |\n| 存储限制  | 64TB  | 有  | 有  |\n| 事务安全  | 支持  | -  | -  |\n| 锁机制  | 行锁  | 表锁  | 表锁  |\n| B+tree索引  | 支持  | 支持  | 支持  |\n| Hash索引  | -  | -  | 支持  |\n| 全文索引  | 支持（5.6版本之后）  | 支持  | -  |\n| 空间使用  | 高  | 低  | N/A  |\n| 内存使用  | 高  | 低  | 中等  |\n| 批量插入速度  | 低  | 高  | 高  |\n| 支持外键  | 支持  | -  | -  |\n\n### 存储引擎的选择\n\n在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。\n\n- InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择\n- MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。\n- Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性\n\n电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。\n\n## 性能分析\n\n### 查看执行频次\n\n查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：\n`SHOW GLOBAL STATUS LIKE 'Com_______';` 或者 `SHOW SESSION STATUS LIKE 'Com_______';`\n例：`show global status like 'Com_______'`\n\n### 慢查询日志\n\n慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。\nMySQL的慢查询日志默认没有开启，需要在MySQL的配置文件（/etc/my.cnf）中配置如下信息：\n\t# 开启慢查询日志开关\n\tslow_query_log=1\n\t# 设置慢查询日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志\n\tlong_query_time=2\n更改后记得重启MySQL服务，日志文件位置：/var/lib/mysql/localhost-slow.log\n\n查看慢查询日志开关状态：\n`show variables like 'slow_query_log';`\n\n### profile\n\nshow profile 能在做SQL优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：\n`SELECT @@have_profiling;`\nprofiling 默认关闭，可以通过set语句在session/global级别开启 profiling：\n`SET profiling = 1;`\n查看所有语句的耗时：\n`show profiles;`\n查看指定query_id的SQL语句各个阶段的耗时：\n`show profile for query query_id;`\n查看指定query_id的SQL语句CPU的使用情况\n`show profile cpu for query query_id;`\n\n### explain\n\nEXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。\n语法：\n\t# 直接在select语句之前加上关键字 explain / desc\n\tEXPLAIN SELECT 字段列表 FROM 表名 HWERE 条件;\n\nEXPLAIN 各字段含义：\n\n- id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id相同，执行顺序从上到下；id不同，值越大越先执行）\n- select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（SELECT/WHERE之后包含了子查询）等\n- type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all\n- possible_key：可能应用在这张表上的索引，一个或多个\n- Key：实际使用的索引，如果为 NULL，则没有使用索引\n- Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好\n- rows：MySQL认为必须要执行的行数，在InnoDB引擎的表中，是一个估计值，可能并不总是准确的\n- filtered：表示返回结果的行数占需读取行数的百分比，filtered的值越大越好\n\n## 索引\n\n索引是帮助 MySQL **高效获取数据**的**数据结构（有序）**。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。\n\n优缺点：\n\n优点：\n\n- 提高数据检索效率，降低数据库的IO成本\n- 通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗\n\n缺点：\n\n- 索引列也是要占用空间的\n- 索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE\n\n### 索引结构\n\n| 索引结构  | 描述  |\n| ------------ | ------------ |\n| B+Tree  | 最常见的索引类型，大部分引擎都支持B+树索引  |\n| Hash  | 底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询  |\n| R-Tree(空间索引)  | 空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少  |\n| Full-Text(全文索引)  | 是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES  |\n\n| 索引  | InnoDB  | MyISAM  | Memory  |\n| ------------ | ------------ | ------------ | ------------ |\n| B+Tree索引  | 支持  | 支持  | 支持  |\n| Hash索引  | 不支持  | 不支持  | 支持  |\n| R-Tree索引  | 不支持  | 支持  | 不支持  |\n| Full-text  | 5.6版本后支持  | 支持  | 不支持  |\n\n#### B-Tree\n\n![二叉树](https://dhc.pythonanywhere.com/media/editor/二叉树_20220316153214227108.png \"二叉树\")\n\n二叉树的缺点可以用红黑树来解决：\n![红黑树](https://dhc.pythonanywhere.com/media/editor/红黑树_20220316163142686602.png \"红黑树\")\n红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。\n\n为了解决上述问题，可以使用 B-Tree 结构。\nB-Tree (多路平衡查找树) 以一棵最大度数（max-degree，指一个节点的子节点个数）为5（5阶）的 b-tree 为例（每个节点最多存储4个key，5个指针）\n\n![B-Tree结构](https://dhc.pythonanywhere.com/media/editor/B-Tree结构_20220316163813441163.png \"B-Tree结构\")\n\n> B-Tree 的数据插入过程动画参照：https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68\n演示地址：https://www.cs.usfca.edu/~galles/visualization/BTree.html\n\n#### B+Tree\n\n结构图：\n\n![B+Tree结构图](https://dhc.pythonanywhere.com/media/editor/B+Tree结构图_20220316170700591277.png \"B+Tree结构图\")\n\n> 演示地址：https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html\n\n与 B-Tree 的区别：\n\n- 所有的数据都会出现在叶子节点\n- 叶子节点形成一个单向链表\n\nMySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。\n\n![MySQL B+Tree 结构图](https://dhc.pythonanywhere.com/media/editor/结构图_20220316171730865611.png \"MySQL B+Tree 结构图\")\n\n#### Hash\n\n哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。\n如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可以通过链表来解决。\n\n![Hash索引原理图](https://dhc.pythonanywhere.com/media/editor/Hash索引原理图_20220317143226150679.png \"Hash索引原理图\")\n\n特点：\n\n- Hash索引只能用于对等比较（=、in），不支持范围查询（betwwn、>、<、...）\n- 无法利用索引完成排序操作\n- 查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引\n\n存储引擎支持：\n\n- Memory\n- InnoDB: 具有自适应hash功能，hash索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的\n\n#### 面试题\n\n1. 为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？\n\n- 相对于二叉树，层级更少，搜索效率高\n- 对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低\n- 相对于 Hash 索引，B+Tree 支持范围匹配及排序操作\n\n### 索引分类\n\n| 分类  | 含义  | 特点  | 关键字  |\n| ------------ | ------------ | ------------ | ------------ |\n| 主键索引  | 针对于表中主键创建的索引  | 默认自动创建，只能有一个  | PRIMARY  |\n| 唯一索引  | 避免同一个表中某数据列中的值重复  | 可以有多个  | UNIQUE  |\n| 常规索引  | 快速定位特定数据  | 可以有多个  |   |\n| 全文索引  | 全文索引查找的是文本中的关键词，而不是比较索引中的值  | 可以有多个  | FULLTEXT  |\n\n在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：\n\n| 分类  | 含义  | 特点  |\n| ------------ | ------------ | ------------ |\n| 聚集索引(Clustered Index)  | 将数据存储与索引放一块，索引结构的叶子节点保存了行数据  | 必须有，而且只有一个  |\n| 二级索引(Secondary Index)  | 将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键  | 可以存在多个  |\n\n演示图：\n\n![大致原理](https://dhc.pythonanywhere.com/media/editor/原理图_20220318194454880073.png \"大致原理\")\n![演示图](https://dhc.pythonanywhere.com/media/editor/演示图_20220319215403721066.png \"演示图\")\n\n聚集索引选取规则：\n\n- 如果存在主键，主键索引就是聚集索引\n- 如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引\n- 如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引\n\n#### 思考题\n\n1\\. 以下 SQL 语句，哪个执行效率高？为什么？\n\n```mysql\nselect * from user where id = 10;\nselect * from user where name = 'Arm';\n-- 备注：id为主键，name字段创建的有索引\n```\n\n答：第一条语句，因为第二条需要回表查询，相当于两个步骤。\n\n2\\. InnoDB 主键索引的 B+Tree 高度为多少？\n\n答：假设一行数据大小为1k，一页中可以存储16行这样的数据。InnoDB 的指针占用6个字节的空间，主键假设为bigint，占用字节数为8.\n可得公式：`n * 8 + (n + 1) * 6 = 16 * 1024`，其中 8 表示 bigint 占用的字节数，n 表示当前节点存储的key的数量，(n + 1) 表示指针数量（比key多一个）。算出n约为1170。\n\n如果树的高度为2，那么他能存储的数据量大概为：`1171 * 16 = 18736`；\n如果树的高度为3，那么他能存储的数据量大概为：`1171 * 1171 * 16 = 21939856`。\n\n另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。\n\n### 语法\n\n创建索引：\n`CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...);`\n如果不加 CREATE 后面不加索引类型参数，则创建的是常规索引\n\n查看索引：\n`SHOW INDEX FROM table_name;`\n\n删除索引：\n`DROP INDEX index_name ON table_name;`\n\n案例：\n\n```mysql\n-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引\ncreate index idx_user_name on tb_user(name);\n-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引\ncreate unique index idx_user_phone on tb_user (phone);\n-- 为profession, age, status创建联合索引\ncreate index idx_user_pro_age_stat on tb_user(profession, age, status);\n-- 为email建立合适的索引来提升查询效率\ncreate index idx_user_email on tb_user(email);\n\n-- 删除索引\ndrop index idx_user_email on tb_user;\n```\n\n### 使用规则\n\n#### 最左前缀法则\n\n如果索引关联了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。\n如果跳跃某一列，索引将部分失效（后面的字段索引失效）。\n\n联合索引中，出现范围查询（<, >），范围查询右侧的列索引失效。可以用>=或者<=来规避索引失效问题。\n\n#### 索引失效情况\n\n1. 在索引列上进行运算操作，索引将失效。如：`explain select * from tb_user where substring(phone, 10, 2) = '15';`\n2. 字符串类型字段使用时，不加引号，索引将失效。如：`explain select * from tb_user where phone = 17799990015;`，此处phone的值没有加引号\n3. 模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如：`explain select * from tb_user where profession like '%工程';`，前后都有 % 也会失效。\n4. 用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。\n5. 如果 MySQL 评估使用索引比全表更慢，则不使用索引。\n\n#### SQL 提示\n\n是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。\n\n例如，使用索引：\n`explain select * from tb_user use index(idx_user_pro) where profession=\"软件工程\";`\n不使用哪个索引：\n`explain select * from tb_user ignore index(idx_user_pro) where profession=\"软件工程\";`\n必须使用哪个索引：\n`explain select * from tb_user force index(idx_user_pro) where profession=\"软件工程\";`\n\nuse 是建议，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，force就是无论如何都强制使用该索引。\n\n#### 覆盖索引&回表查询\n\n尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。\n\nexplain 中 extra 字段含义：\n`using index condition`：查找使用了索引，但是需要回表查询数据\n`using where; using index;`：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询\n\n如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是select \\*；如果在辅助索引中找聚集索引，如`select id, name from xxx where name='xxx';`，也只需要通过辅助索引(name)查找到对应的id，返回name和name索引对应的id即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如`select id, name, gender from xxx where name='xxx';`\n\n所以尽量不要用`select *`，容易出现回表查询，降低效率，除非有联合索引包含了所有字段\n\n面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下SQL语句进行优化，该如何进行才是最优方案：\n`select id, username, password from tb_user where username='itcast';`\n\n解：给username和password字段建立联合索引，则不需要回表查询，直接覆盖索引\n\n#### 前缀索引\n\n当字段类型为字符串（varchar, text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。\n\n语法：`create index idx_xxxx on table_name(columnn(n));`\n前缀长度：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。\n求选择性公式：\n```mysql\nselect count(distinct email) / count(*) from tb_user;\nselect count(distinct substring(email, 1, 5)) / count(*) from tb_user;\n```\n\nshow index 里面的sub_part可以看到接取的长度\n\n#### 单列索引&联合索引\n\n单列索引：即一个索引只包含单个列\n联合索引：即一个索引包含了多个列\n在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。\n\n单列索引情况：\n`explain select id, phone, name from tb_user where phone = '17799990010' and name = '韩信';`\n这句只会用到phone索引字段\n\n##### 注意事项\n\n- 多条件联合查询时，MySQL优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询\n\n### 设计原则\n\n1. 针对于数据量较大，且查询比较频繁的表建立索引\n2. 针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引\n3. 尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高\n4. 如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引\n5. 尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率\n6. 要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率\n7. 如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询\n\n## SQL 优化\n\n### 插入数据\n\n普通插入：\n\n1. 采用批量插入（一次插入的数据不建议超过1000条）\n2. 手动提交事务\n3. 主键顺序插入\n\n大批量插入：\n如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令插入。\n\n```mysql\n# 客户端连接服务端时，加上参数 --local-infile（这一行在bash/cmd界面输入）\nmysql --local-infile -u root -p\n# 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关\nset global local_infile = 1;\nselect @@local_infile;\n# 执行load指令将准备好的数据，加载到表结构中\nload data local infile '/root/sql1.log' into table 'tb_user' fields terminated by ',' lines terminated by '\\n';\n```\n\n### 主键优化\n\n数据组织方式：在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（Index organized table, IOT）\n\n页分裂：页可以为空，也可以填充一般，也可以填充100%，每个页包含了2-N行数据（如果一行数据过大，会行溢出），根据主键排列。\n页合并：当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录到达 MERGE_THRESHOLD（默认为页的50%），InnoDB会开始寻找最靠近的页（前后）看看是否可以将这两个页合并以优化空间使用。\n\nMERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或创建索引时指定\n\n> 文字说明不够清晰明了，具体可以看视频里的PPT演示过程：https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90\n\n主键设计原则：\n\n- 满足业务需求的情况下，尽量降低主键的长度\n- 插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键\n- 尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号\n- 业务操作时，避免对主键的修改\n\n### order by优化\n\n1. Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序\n2. Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高\n\n如果order by字段全部使用升序排序或者降序排序，则都会走索引，但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain的extra信息显示的是`Using index, Using filesort`，如果要优化掉Using filesort，则需要另外再创建一个索引，如：`create index idx_user_age_phone_ad on tb_user(age asc, phone desc);`，此时使用`select id, age, phone from tb_user order by age asc, phone desc;`会全部走索引\n\n总结：\n\n- 根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则\n- 尽量使用覆盖索引\n- 多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC/DESC）\n- 如果不可避免出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认256k）\n\n### group by优化\n\n- 在分组操作时，可以通过索引来提高效率\n- 分组操作时，索引的使用也是满足最左前缀法则的\n\n如索引为`idx_user_pro_age_stat`，则句式可以是`select ... where profession order by age`，这样也符合最左前缀法则\n\n### limit优化\n\n常见的问题如`limit 2000000, 10`，此时需要 MySQL 排序前2000000条记录，但仅仅返回2000000 - 2000010的记录，其他记录丢弃，查询排序的代价非常大。\n优化方案：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化\n\n例如：\n\n```mysql\n-- 此语句耗时很长\nselect * from tb_sku limit 9000000, 10;\n-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询\nselect id from tb_sku order by id limit 9000000, 10;\n-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit\n-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);\n-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度\nselect * from tb_sku as s, (select id from tb_sku order by id limit 9000000, 10) as a where s.id = a.id;\n```\n\n### count优化\n\nMyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(\\*) 的时候会直接返回这个数，效率很高（前提是不适用where）；\nInnoDB 在执行 count(\\*) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。\n优化方案：自己计数，如创建key-value表存储在内存或硬盘，或者是用redis\n\ncount的几种用法：\n\n- 如果count函数的参数（count里面写的那个字段）不是NULL（字段值不为NULL），累计值就加一，最后返回累计值\n- 用法：count(\\*)、count(主键)、count(字段)、count(1)\n- count(主键)跟count(\\*)一样，因为主键不能为空；count(字段)只计算字段值不为NULL的行；count(1)引擎会为每行添加一个1，然后就count这个1，返回结果也跟count(\\*)一样；count(null)返回0\n\n各种用法的性能：\n\n- count(主键)：InnoDB引擎会遍历整张表，把每行的主键id值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）\n- count(字段)：没有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加；有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加\n- count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加\n- count(\\*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加\n\n按效率排序：count(字段) < count(主键) < count(1) < count(\\*)，所以尽量使用 count(\\*)\n\n### update优化（避免行锁升级为表锁）\n\nInnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。\n\n如以下两条语句：\n`update student set no = '123' where id = 1;`，这句由于id有主键索引，所以只会锁这一行；\n`update student set no = '123' where name = 'test';`，这句由于name没有索引，所以会把整张表都锁住进行数据更新，解决方法是给name字段添加索引\n\n# 数据类型\n\n## 整型\n\n| 类型名称      | 取值范围                                  | 大小    |\n| ------------- | ----------------------------------------- | ------- |\n| TINYINT       | -128〜127                                 | 1个字节 |\n| SMALLINT      | -32768〜32767                             | 2个宇节 |\n| MEDIUMINT     | -8388608〜8388607                         | 3个字节 |\n| INT (INTEGHR) | -2147483648〜2147483647                   | 4个字节 |\n| BIGINT        | -9223372036854775808〜9223372036854775807 | 8个字节 |\n\n无符号在数据类型后加 unsigned 关键字。\n\n## 浮点型\n\n| 类型名称            | 说明               | 存储需求   |\n| ------------------- | ------------------ | ---------- |\n| FLOAT               | 单精度浮点数       | 4 个字节   |\n| DOUBLE              | 双精度浮点数       | 8 个字节   |\n| DECIMAL (M, D)，DEC | 压缩的“严格”定点数 | M+2 个字节 |\n\n## 日期和时间\n\n| 类型名称  | 日期格式            | 日期范围                                          | 存储需求 |\n| --------- | ------------------- | ------------------------------------------------- | -------- |\n| YEAR      | YYYY                | 1901 ~ 2155                                       | 1 个字节 |\n| TIME      | HH:MM:SS            | -838:59:59 ~ 838:59:59                            | 3 个字节 |\n| DATE      | YYYY-MM-DD          | 1000-01-01 ~ 9999-12-3                            | 3 个字节 |\n| DATETIME  | YYYY-MM-DD HH:MM:SS | 1000-01-01 00:00:00 ~ 9999-12-31 23:59:59         | 8 个字节 |\n| TIMESTAMP | YYYY-MM-DD HH:MM:SS | 1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC | 4 个字节 |\n\n## 字符串\n\n| 类型名称   | 说明                                         | 存储需求                                                   |\n| ---------- | -------------------------------------------- | ---------------------------------------------------------- |\n| CHAR(M)    | 固定长度非二进制字符串                       | M 字节，1<=M<=255                                          |\n| VARCHAR(M) | 变长非二进制字符串                           | L+1字节，在此，L< = M和 1<=M<=255                          |\n| TINYTEXT   | 非常小的非二进制字符串                       | L+1字节，在此，L<2^8                                       |\n| TEXT       | 小的非二进制字符串                           | L+2字节，在此，L<2^16                                      |\n| MEDIUMTEXT | 中等大小的非二进制字符串                     | L+3字节，在此，L<2^24                                      |\n| LONGTEXT   | 大的非二进制字符串                           | L+4字节，在此，L<2^32                                      |\n| ENUM       | 枚举类型，只能有一个枚举字符串值             | 1或2个字节，取决于枚举值的数目 (最大值为65535)             |\n| SET        | 一个设置，字符串对象可以有零个或 多个SET成员 | 1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员） |\n\n## 二进制类型\n\n| 类型名称       | 说明                 | 存储需求               |\n| -------------- | -------------------- | ---------------------- |\n| BIT(M)         | 位字段类型           | 大约 (M+7)/8 字节      |\n| BINARY(M)      | 固定长度二进制字符串 | M 字节                 |\n| VARBINARY (M)  | 可变长度二进制字符串 | M+1 字节               |\n| TINYBLOB (M)   | 非常小的BLOB         | L+1 字节，在此，L<2^8  |\n| BLOB (M)       | 小 BLOB              | L+2 字节，在此，L<2^16 |\n| MEDIUMBLOB (M) | 中等大小的BLOB       | L+3 字节，在此，L<2^24 |\n| LONGBLOB (M)   | 非常大的BLOB         | L+4 字节，在此，L<2^32 |\n\n# 权限一览表\n\n> 具体权限的作用详见[官方文档](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html \"官方文档\")\n\nGRANT 和 REVOKE 允许的静态权限\n\n| Privilege                                                    | Grant Table Column           | Context                               |\n| :----------------------------------------------------------- | :--------------------------- | :------------------------------------ |\n| [`ALL [PRIVILEGES]`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_all) | Synonym for “all privileges” | Server administration                 |\n| [`ALTER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter) | `Alter_priv`                 | Tables                                |\n| [`ALTER ROUTINE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter-routine) | `Alter_routine_priv`         | Stored routines                       |\n| [`CREATE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create) | `Create_priv`                | Databases, tables, or indexes         |\n| [`CREATE ROLE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-role) | `Create_role_priv`           | Server administration                 |\n| [`CREATE ROUTINE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-routine) | `Create_routine_priv`        | Stored routines                       |\n| [`CREATE TABLESPACE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-tablespace) | `Create_tablespace_priv`     | Server administration                 |\n| [`CREATE TEMPORARY TABLES`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-temporary-tables) | `Create_tmp_table_priv`      | Tables                                |\n| [`CREATE USER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-user) | `Create_user_priv`           | Server administration                 |\n| [`CREATE VIEW`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-view) | `Create_view_priv`           | Views                                 |\n| [`DELETE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_delete) | `Delete_priv`                | Tables                                |\n| [`DROP`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop) | `Drop_priv`                  | Databases, tables, or views           |\n| [`DROP ROLE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop-role) | `Drop_role_priv`             | Server administration                 |\n| [`EVENT`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_event) | `Event_priv`                 | Databases                             |\n| [`EXECUTE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_execute) | `Execute_priv`               | Stored routines                       |\n| [`FILE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_file) | `File_priv`                  | File access on server host            |\n| [`GRANT OPTION`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_grant-option) | `Grant_priv`                 | Databases, tables, or stored routines |\n| [`INDEX`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_index) | `Index_priv`                 | Tables                                |\n| [`INSERT`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_insert) | `Insert_priv`                | Tables or columns                     |\n| [`LOCK TABLES`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_lock-tables) | `Lock_tables_priv`           | Databases                             |\n| [`PROCESS`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_process) | `Process_priv`               | Server administration                 |\n| [`PROXY`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_proxy) | See `proxies_priv` table     | Server administration                 |\n| [`REFERENCES`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_references) | `References_priv`            | Databases or tables                   |\n| [`RELOAD`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_reload) | `Reload_priv`                | Server administration                 |\n| [`REPLICATION CLIENT`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-client) | `Repl_client_priv`           | Server administration                 |\n| [`REPLICATION SLAVE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave) | `Repl_slave_priv`            | Server administration                 |\n| [`SELECT`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_select) | `Select_priv`                | Tables or columns                     |\n| [`SHOW DATABASES`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-databases) | `Show_db_priv`               | Server administration                 |\n| [`SHOW VIEW`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-view) | `Show_view_priv`             | Views                                 |\n| [`SHUTDOWN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_shutdown) | `Shutdown_priv`              | Server administration                 |\n| [`SUPER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_super) | `Super_priv`                 | Server administration                 |\n| [`TRIGGER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_trigger) | `Trigger_priv`               | Tables                                |\n| [`UPDATE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_update) | `Update_priv`                | Tables or columns                     |\n| [`USAGE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_usage) | Synonym for “no privileges”  | Server administration                 |\n\nGRANT 和 REVOKE 允许的动态权限\n\n| Privilege                                                    | Context                                           |\n| :----------------------------------------------------------- | :------------------------------------------------ |\n| [`APPLICATION_PASSWORD_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_application-password-admin) | Dual password administration                      |\n| [`AUDIT_ABORT_EXEMPT`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-abort-exempt) | Allow queries blocked by audit log filter         |\n| [`AUDIT_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-admin) | Audit log administration                          |\n| [`AUTHENTICATION_POLICY_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_authentication-policy-admin) | Authentication administration                     |\n| [`BACKUP_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_backup-admin) | Backup administration                             |\n| [`BINLOG_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-admin) | Backup and Replication administration             |\n| [`BINLOG_ENCRYPTION_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-encryption-admin) | Backup and Replication administration             |\n| [`CLONE_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_clone-admin) | Clone administration                              |\n| [`CONNECTION_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_connection-admin) | Server administration                             |\n| [`ENCRYPTION_KEY_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_encryption-key-admin) | Server administration                             |\n| [`FIREWALL_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-admin) | Firewall administration                           |\n| [`FIREWALL_EXEMPT`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-exempt) | Firewall administration                           |\n| [`FIREWALL_USER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-user) | Firewall administration                           |\n| [`FLUSH_OPTIMIZER_COSTS`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-optimizer-costs) | Server administration                             |\n| [`FLUSH_STATUS`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-status) | Server administration                             |\n| [`FLUSH_TABLES`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-tables) | Server administration                             |\n| [`FLUSH_USER_RESOURCES`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-user-resources) | Server administration                             |\n| [`GROUP_REPLICATION_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-admin) | Replication administration                        |\n| [`GROUP_REPLICATION_STREAM`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-stream) | Replication administration                        |\n| [`INNODB_REDO_LOG_ARCHIVE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_innodb-redo-log-archive) | Redo log archiving administration                 |\n| [`NDB_STORED_USER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_ndb-stored-user) | NDB Cluster                                       |\n| [`PASSWORDLESS_USER_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_passwordless-user-admin) | Authentication administration                     |\n| [`PERSIST_RO_VARIABLES_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_persist-ro-variables-admin) | Server administration                             |\n| [`REPLICATION_APPLIER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-applier) | `PRIVILEGE_CHECKS_USER` for a replication channel |\n| [`REPLICATION_SLAVE_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave-admin) | Replication administration                        |\n| [`RESOURCE_GROUP_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-admin) | Resource group administration                     |\n| [`RESOURCE_GROUP_USER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-user) | Resource group administration                     |\n| [`ROLE_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_role-admin) | Server administration                             |\n| [`SESSION_VARIABLES_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_session-variables-admin) | Server administration                             |\n| [`SET_USER_ID`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_set-user-id) | Server administration                             |\n| [`SHOW_ROUTINE`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-routine) | Server administration                             |\n| [`SYSTEM_USER`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-user) | Server administration                             |\n| [`SYSTEM_VARIABLES_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-variables-admin) | Server administration                             |\n| [`TABLE_ENCRYPTION_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_table-encryption-admin) | Server administration                             |\n| [`VERSION_TOKEN_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_version-token-admin) | Server administration                             |\n| [`XA_RECOVER_ADMIN`](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_xa-recover-admin) | Server administration                             |\n\n# 图形化界面工具\n\n- Workbench(免费): http://dev.mysql.com/downloads/workbench/\n- navicat(收费，试用版30天): https://www.navicat.com/en/download/navicat-for-mysql\n- Sequel Pro(开源免费，仅支持Mac OS): http://www.sequelpro.com/\n- HeidiSQL(免费): http://www.heidisql.com/\n- phpMyAdmin(免费): https://www.phpmyadmin.net/\n- SQLyog: https://sqlyog.en.softonic.com/\n\n# 安装\n\n# 小技巧\n\n1. 在SQL语句之后加上`\\G`会将结果的表格形式转换成行文本形式\n2. 查看Mysql数据库占用空间：\n```mysql\nSELECT table_schema \"Database Name\"\n     , SUM(data_length + index_length) / (1024 * 1024) \"Database Size in MB\"\nFROM information_schema.TABLES\nGROUP BY table_schema;\n```\n","slug":"MySql","published":1,"updated":"2022-09-07T05:03:43.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claajxdpy00f6a8vwbhiy5no9","content":"<script src=\"/assets/js/APlayer.min.js\"> </script><h1 id=\"基础篇\"><a href=\"#基础篇\" class=\"headerlink\" title=\"基础篇\"></a>基础篇</h1><h2 id=\"通用语法及分类\"><a href=\"#通用语法及分类\" class=\"headerlink\" title=\"通用语法及分类\"></a>通用语法及分类</h2><ul>\n<li>DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）</li>\n<li>DML: 数据操作语言，用来对数据库表中的数据进行增删改</li>\n<li>DQL: 数据查询语言，用来查询数据库中表的记录</li>\n<li>DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限</li>\n</ul>\n<h3 id=\"DDL（数据定义语言）\"><a href=\"#DDL（数据定义语言）\" class=\"headerlink\" title=\"DDL（数据定义语言）\"></a>DDL（数据定义语言）</h3><p>数据定义语言</p>\n<h4 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h4><p>查询所有数据库：<br><code>SHOW DATABASES;</code><br>查询当前数据库：<br><code>SELECT DATABASE();</code><br>创建数据库：<br><code>CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];</code><br>删除数据库：<br><code>DROP DATABASE [ IF EXISTS ] 数据库名;</code><br>使用数据库：<br><code>USE 数据库名;</code></p>\n<h5 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li>UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集</li>\n</ul>\n<h4 id=\"表操作\"><a href=\"#表操作\" class=\"headerlink\" title=\"表操作\"></a>表操作</h4><p>查询当前数据库所有表：<br><code>SHOW TABLES;</code><br>查询表结构：<br><code>DESC 表名;</code><br>查询指定表的建表语句：<br><code>SHOW CREATE TABLE 表名;</code></p>\n<p>创建表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE 表名(</span><br><span class=\"line\">\t字段1 字段1类型 [COMMENT 字段1注释],</span><br><span class=\"line\">\t字段2 字段2类型 [COMMENT 字段2注释],</span><br><span class=\"line\">\t字段3 字段3类型 [COMMENT 字段3注释],</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t字段n 字段n类型 [COMMENT 字段n注释]</span><br><span class=\"line\">)[ COMMENT 表注释 ];</span><br></pre></td></tr></table></figure>\n\n<p><strong>最后一个字段后面没有逗号</strong></p>\n<p>添加字段：<br><code>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：<code>ALTER TABLE emp ADD nickname varchar(20) COMMENT &#39;昵称&#39;;</code></p>\n<p>修改数据类型：<br><code>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</code><br>修改字段名和字段类型：<br><code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：将emp表的nickname字段修改为username，类型为varchar(30)<br><code>ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT &#39;昵称&#39;;</code></p>\n<p>删除字段：<br><code>ALTER TABLE 表名 DROP 字段名;</code></p>\n<p>修改表名：<br><code>ALTER TABLE 表名 RENAME TO 新表名</code></p>\n<p>删除表：<br><code>DROP TABLE [IF EXISTS] 表名;</code><br>删除表，并重新创建该表：<br><code>TRUNCATE TABLE 表名;</code></p>\n<h3 id=\"DML（数据操作语言）\"><a href=\"#DML（数据操作语言）\" class=\"headerlink\" title=\"DML（数据操作语言）\"></a>DML（数据操作语言）</h3><h4 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a>添加数据</h4><p>指定字段：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</code><br>全部字段：<br><code>INSERT INTO 表名 VALUES (值1, 值2, ...);</code></p>\n<p>批量添加数据：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code><br><code>INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code></p>\n<h5 id=\"注意事项-1\"><a href=\"#注意事项-1\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li>字符串和日期类型数据应该包含在引号中</li>\n<li>插入的数据大小应该在字段的规定范围内</li>\n</ul>\n<h4 id=\"更新和删除数据\"><a href=\"#更新和删除数据\" class=\"headerlink\" title=\"更新和删除数据\"></a>更新和删除数据</h4><p>修改数据：<br><code>UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];</code><br>例：<br><code>UPDATE emp SET name = &#39;Jack&#39; WHERE id = 1;</code></p>\n<p>删除数据：<br><code>DELETE FROM 表名 [ WHERE 条件 ];</code></p>\n<h3 id=\"DQL（数据查询语言）\"><a href=\"#DQL（数据查询语言）\" class=\"headerlink\" title=\"DQL（数据查询语言）\"></a>DQL（数据查询语言）</h3><p>语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">\t字段列表</span><br><span class=\"line\">FROM</span><br><span class=\"line\">\t表名字段</span><br><span class=\"line\">WHERE</span><br><span class=\"line\">\t条件列表</span><br><span class=\"line\">GROUP BY</span><br><span class=\"line\">\t分组字段列表</span><br><span class=\"line\">HAVING</span><br><span class=\"line\">\t分组后的条件列表</span><br><span class=\"line\">ORDER BY</span><br><span class=\"line\">\t排序字段列表</span><br><span class=\"line\">LIMIT</span><br><span class=\"line\">\t分页参数</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"基础查询\"><a href=\"#基础查询\" class=\"headerlink\" title=\"基础查询\"></a>基础查询</h4><p>查询多个字段：<br><code>SELECT 字段1, 字段2, 字段3, ... FROM 表名;</code><br><code>SELECT * FROM 表名;</code></p>\n<p>设置别名：<br><code>SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;</code><br><code>SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;</code></p>\n<p>去除重复记录：<br><code>SELECT DISTINCT 字段列表 FROM 表名;</code></p>\n<p>转义：<br><code>SELECT * FROM 表名 WHERE name LIKE &#39;/_张三&#39; ESCAPE &#39;/&#39;</code><br>/ 之后的_不作为通配符</p>\n<h4 id=\"条件查询\"><a href=\"#条件查询\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code></p>\n<p>条件：</p>\n<table>\n<thead>\n<tr>\n<th>比较运算符</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&gt;</td>\n<td>大于</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于</td>\n</tr>\n<tr>\n<td>=</td>\n<td>等于</td>\n</tr>\n<tr>\n<td>&lt;&gt; 或 !=</td>\n<td>不等于</td>\n</tr>\n<tr>\n<td>BETWEEN … AND …</td>\n<td>在某个范围内（含最小、最大值）</td>\n</tr>\n<tr>\n<td>IN(…)</td>\n<td>在in之后的列表中的值，多选一</td>\n</tr>\n<tr>\n<td>LIKE 占位符</td>\n<td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td>\n</tr>\n<tr>\n<td>IS NULL</td>\n<td>是NULL</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>逻辑运算符</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>AND 或 &amp;&amp;</td>\n<td>并且（多个条件同时成立）</td>\n</tr>\n<tr>\n<td>OR 或 &#124;&#124;</td>\n<td>或者（多个条件任意一个成立）</td>\n</tr>\n<tr>\n<td>NOT 或 !</td>\n<td>非，不是</td>\n</tr>\n</tbody></table>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 年龄等于30</span><br><span class=\"line\">select * from employee where age = 30;</span><br><span class=\"line\">-- 年龄小于30</span><br><span class=\"line\">select * from employee where age &lt; 30;</span><br><span class=\"line\">-- 小于等于</span><br><span class=\"line\">select * from employee where age &lt;= 30;</span><br><span class=\"line\">-- 没有身份证</span><br><span class=\"line\">select * from employee where idcard is null or idcard = &apos;&apos;;</span><br><span class=\"line\">-- 有身份证</span><br><span class=\"line\">select * from employee where idcard;</span><br><span class=\"line\">select * from employee where idcard is not null;</span><br><span class=\"line\">-- 不等于</span><br><span class=\"line\">select * from employee where age != 30;</span><br><span class=\"line\">-- 年龄在20到30之间</span><br><span class=\"line\">select * from employee where age between 20 and 30;</span><br><span class=\"line\">select * from employee where age &gt;= 20 and age &lt;= 30;</span><br><span class=\"line\">-- 下面语句不报错，但查不到任何信息</span><br><span class=\"line\">select * from employee where age between 30 and 20;</span><br><span class=\"line\">-- 性别为女且年龄小于30</span><br><span class=\"line\">select * from employee where age &lt; 30 and gender = &apos;女&apos;;</span><br><span class=\"line\">-- 年龄等于25或30或35</span><br><span class=\"line\">select * from employee where age = 25 or age = 30 or age = 35;</span><br><span class=\"line\">select * from employee where age in (25, 30, 35);</span><br><span class=\"line\">-- 姓名为两个字</span><br><span class=\"line\">select * from employee where name like &apos;__&apos;;</span><br><span class=\"line\">-- 身份证最后为X</span><br><span class=\"line\">select * from employee where idcard like &apos;%X&apos;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"聚合查询（聚合函数）\"><a href=\"#聚合查询（聚合函数）\" class=\"headerlink\" title=\"聚合查询（聚合函数）\"></a>聚合查询（聚合函数）</h4><p>常见聚合函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>count</td>\n<td>统计数量</td>\n</tr>\n<tr>\n<td>max</td>\n<td>最大值</td>\n</tr>\n<tr>\n<td>min</td>\n<td>最小值</td>\n</tr>\n<tr>\n<td>avg</td>\n<td>平均值</td>\n</tr>\n<tr>\n<td>sum</td>\n<td>求和</td>\n</tr>\n</tbody></table>\n<p>语法：<br><code>SELECT 聚合函数(字段列表) FROM 表名;</code><br>例：<br><code>SELECT count(id) from employee where workaddress = &quot;广东省&quot;;</code></p>\n<h4 id=\"分组查询\"><a href=\"#分组查询\" class=\"headerlink\" title=\"分组查询\"></a>分组查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];</code></p>\n<p>where 和 having 的区别：</p>\n<ul>\n<li>执行时机不同：where是分组之前进行过滤，不满足where条件不参与分组；having是分组后对结果进行过滤。</li>\n<li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li>\n</ul>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）</span><br><span class=\"line\">select count(*) from employee group by gender;</span><br><span class=\"line\">-- 根据性别分组，统计男性和女性数量</span><br><span class=\"line\">select gender, count(*) from employee group by gender;</span><br><span class=\"line\">-- 根据性别分组，统计男性和女性的平均年龄</span><br><span class=\"line\">select gender, avg(age) from employee group by gender;</span><br><span class=\"line\">-- 年龄小于45，并根据工作地址分组</span><br><span class=\"line\">select workaddress, count(*) from employee where age &lt; 45 group by workaddress;</span><br><span class=\"line\">-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址</span><br><span class=\"line\">select workaddress, count(*) address_count from employee where age &lt; 45 group by workaddress having address_count &gt;= 3;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意事项-2\"><a href=\"#注意事项-2\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li>执行顺序：where &gt; 聚合函数 &gt; having</li>\n<li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li>\n</ul>\n<h4 id=\"排序查询\"><a href=\"#排序查询\" class=\"headerlink\" title=\"排序查询\"></a>排序查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;</code></p>\n<p>排序方式：</p>\n<ul>\n<li>ASC: 升序（默认）</li>\n<li>DESC: 降序</li>\n</ul>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 根据年龄升序排序</span><br><span class=\"line\">SELECT * FROM employee ORDER BY age ASC;</span><br><span class=\"line\">SELECT * FROM employee ORDER BY age;</span><br><span class=\"line\">-- 两字段排序，根据年龄升序排序，入职时间降序排序</span><br><span class=\"line\">SELECT * FROM employee ORDER BY age ASC, entrydate DESC;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意事项-3\"><a href=\"#注意事项-3\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p>\n<h4 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;</code></p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询第一页数据，展示10条</span><br><span class=\"line\">SELECT * FROM employee LIMIT 0, 10;</span><br><span class=\"line\">-- 查询第二页</span><br><span class=\"line\">SELECT * FROM employee LIMIT 10, 10;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意事项-4\"><a href=\"#注意事项-4\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li>起始索引从0开始，起始索引 = （查询页码 - 1） * 每页显示记录数</li>\n<li>分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT</li>\n<li>如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10</li>\n</ul>\n<h4 id=\"DQL执行顺序\"><a href=\"#DQL执行顺序\" class=\"headerlink\" title=\"DQL执行顺序\"></a>DQL执行顺序</h4><p>FROM -&gt; WHERE -&gt; GROUP BY -&gt; SELECT -&gt; ORDER BY -&gt; LIMIT</p>\n<h3 id=\"DCL\"><a href=\"#DCL\" class=\"headerlink\" title=\"DCL\"></a>DCL</h3><h4 id=\"管理用户\"><a href=\"#管理用户\" class=\"headerlink\" title=\"管理用户\"></a>管理用户</h4><p>查询用户：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USER mysql;</span><br><span class=\"line\">SELECT * FROM user;</span><br></pre></td></tr></table></figure>\n\n<p>创建用户:<br><code>CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;</code></p>\n<p>修改用户密码：<br><code>ALTER USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;;</code></p>\n<p>删除用户：<br><code>DROP USER &#39;用户名&#39;@&#39;主机名&#39;;</code></p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 创建用户test，只能在当前主机localhost访问</span><br><span class=\"line\">create user &apos;test&apos;@&apos;localhost&apos; identified by &apos;123456&apos;;</span><br><span class=\"line\">-- 创建用户test，能在任意主机访问</span><br><span class=\"line\">create user &apos;test&apos;@&apos;%&apos; identified by &apos;123456&apos;;</span><br><span class=\"line\">create user &apos;test&apos; identified by &apos;123456&apos;;</span><br><span class=\"line\">-- 修改密码</span><br><span class=\"line\">alter user &apos;test&apos;@&apos;localhost&apos; identified with mysql_native_password by &apos;1234&apos;;</span><br><span class=\"line\">-- 删除用户</span><br><span class=\"line\">drop user &apos;test&apos;@&apos;localhost&apos;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意事项-5\"><a href=\"#注意事项-5\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li>主机名可以使用 % 通配</li>\n</ul>\n<h4 id=\"权限控制\"><a href=\"#权限控制\" class=\"headerlink\" title=\"权限控制\"></a>权限控制</h4><p>常用权限：</p>\n<table>\n<thead>\n<tr>\n<th>权限</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ALL, ALL PRIVILEGES</td>\n<td>所有权限</td>\n</tr>\n<tr>\n<td>SELECT</td>\n<td>查询数据</td>\n</tr>\n<tr>\n<td>INSERT</td>\n<td>插入数据</td>\n</tr>\n<tr>\n<td>UPDATE</td>\n<td>修改数据</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>删除数据</td>\n</tr>\n<tr>\n<td>ALTER</td>\n<td>修改表</td>\n</tr>\n<tr>\n<td>DROP</td>\n<td>删除数据库/表/视图</td>\n</tr>\n<tr>\n<td>CREATE</td>\n<td>创建数据库/表</td>\n</tr>\n</tbody></table>\n<p>更多权限请看<a href=\"#权限一览表\" title=\"权限一览表\">权限一览表</a></p>\n<p>查询权限：<br><code>SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39;;</code></p>\n<p>授予权限：<br><code>GRANT 权限列表 ON 数据库名.表名 TO &#39;用户名&#39;@&#39;主机名&#39;;</code></p>\n<p>撤销权限：<br><code>REVOKE 权限列表 ON 数据库名.表名 FROM &#39;用户名&#39;@&#39;主机名&#39;;</code></p>\n<h5 id=\"注意事项-6\"><a href=\"#注意事项-6\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li>多个权限用逗号分隔</li>\n<li>授权时，数据库名和表名可以用 * 进行通配，代表所有</li>\n</ul>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ul>\n<li>字符串函数</li>\n<li>数值函数</li>\n<li>日期函数</li>\n<li>流程函数</li>\n</ul>\n<h3 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"字符串函数\"></a>字符串函数</h3><p>常用函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CONCAT(s1, s2, …, sn)</td>\n<td>字符串拼接，将s1, s2, …, sn拼接成一个字符串</td>\n</tr>\n<tr>\n<td>LOWER(str)</td>\n<td>将字符串全部转为小写</td>\n</tr>\n<tr>\n<td>UPPER(str)</td>\n<td>将字符串全部转为大写</td>\n</tr>\n<tr>\n<td>LPAD(str, n, pad)</td>\n<td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td>\n</tr>\n<tr>\n<td>RPAD(str, n, pad)</td>\n<td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td>\n</tr>\n<tr>\n<td>TRIM(str)</td>\n<td>去掉字符串头部和尾部的空格</td>\n</tr>\n<tr>\n<td>SUBSTRING(str, start, len)</td>\n<td>返回从字符串str从start位置起的len个长度的字符串</td>\n</tr>\n</tbody></table>\n<p>使用示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 拼接</span><br><span class=\"line\">SELECT CONCAT(&apos;Hello&apos;, &apos;World&apos;);</span><br><span class=\"line\">-- 小写</span><br><span class=\"line\">SELECT LOWER(&apos;Hello&apos;);</span><br><span class=\"line\">-- 大写</span><br><span class=\"line\">SELECT UPPER(&apos;Hello&apos;);</span><br><span class=\"line\">-- 左填充</span><br><span class=\"line\">SELECT LPAD(&apos;01&apos;, 5, &apos;-&apos;);</span><br><span class=\"line\">-- 右填充</span><br><span class=\"line\">SELECT RPAD(&apos;01&apos;, 5, &apos;-&apos;);</span><br><span class=\"line\">-- 去除空格</span><br><span class=\"line\">SELECT TRIM(&apos; Hello World &apos;);</span><br><span class=\"line\">-- 切片（起始索引为1）</span><br><span class=\"line\">SELECT SUBSTRING(&apos;Hello World&apos;, 1, 5);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数值函数\"><a href=\"#数值函数\" class=\"headerlink\" title=\"数值函数\"></a>数值函数</h3><p>常见函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CEIL(x)</td>\n<td>向上取整</td>\n</tr>\n<tr>\n<td>FLOOR(x)</td>\n<td>向下取整</td>\n</tr>\n<tr>\n<td>MOD(x, y)</td>\n<td>返回x/y的模</td>\n</tr>\n<tr>\n<td>RAND()</td>\n<td>返回0~1内的随机数</td>\n</tr>\n<tr>\n<td>ROUND(x, y)</td>\n<td>求参数x的四舍五入值，保留y位小数</td>\n</tr>\n</tbody></table>\n<h3 id=\"日期函数\"><a href=\"#日期函数\" class=\"headerlink\" title=\"日期函数\"></a>日期函数</h3><p>常用函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CURDATE()</td>\n<td>返回当前日期</td>\n</tr>\n<tr>\n<td>CURTIME()</td>\n<td>返回当前时间</td>\n</tr>\n<tr>\n<td>NOW()</td>\n<td>返回当前日期和时间</td>\n</tr>\n<tr>\n<td>YEAR(date)</td>\n<td>获取指定date的年份</td>\n</tr>\n<tr>\n<td>MONTH(date)</td>\n<td>获取指定date的月份</td>\n</tr>\n<tr>\n<td>DAY(date)</td>\n<td>获取指定date的日期</td>\n</tr>\n<tr>\n<td>DATE_ADD(date, INTERVAL expr type)</td>\n<td>返回一个日期/时间值加上一个时间间隔expr后的时间值</td>\n</tr>\n<tr>\n<td>DATEDIFF(date1, date2)</td>\n<td>返回起始时间date1和结束时间date2之间的天数</td>\n</tr>\n</tbody></table>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- DATE_ADD</span><br><span class=\"line\">SELECT DATE_ADD(NOW(), INTERVAL 70 YEAR);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"流程函数\"><a href=\"#流程函数\" class=\"headerlink\" title=\"流程函数\"></a>流程函数</h3><p>常用函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IF(value, t, f)</td>\n<td>如果value为true，则返回t，否则返回f</td>\n</tr>\n<tr>\n<td>IFNULL(value1, value2)</td>\n<td>如果value1不为空，返回value1，否则返回value2</td>\n</tr>\n<tr>\n<td>CASE WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td>\n<td>如果val1为true，返回res1，… 否则返回default默认值</td>\n</tr>\n<tr>\n<td>CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td>\n<td>如果expr的值等于val1，返回res1，… 否则返回default默认值</td>\n</tr>\n</tbody></table>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select</span><br><span class=\"line\">\tname,</span><br><span class=\"line\">\t(case when age &gt; 30 then &apos;中年&apos; else &apos;青年&apos; end)</span><br><span class=\"line\">from employee;</span><br><span class=\"line\">select</span><br><span class=\"line\">\tname,</span><br><span class=\"line\">\t(case workaddress when &apos;北京市&apos; then &apos;一线城市&apos; when &apos;上海市&apos; then &apos;一线城市&apos; else &apos;二线城市&apos; end) as &apos;工作地址&apos;</span><br><span class=\"line\">from employee;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"约束\"><a href=\"#约束\" class=\"headerlink\" title=\"约束\"></a>约束</h2><p>分类：</p>\n<table>\n<thead>\n<tr>\n<th>约束</th>\n<th>描述</th>\n<th>关键字</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>非空约束</td>\n<td>限制该字段的数据不能为null</td>\n<td>NOT NULL</td>\n</tr>\n<tr>\n<td>唯一约束</td>\n<td>保证该字段的所有数据都是唯一、不重复的</td>\n<td>UNIQUE</td>\n</tr>\n<tr>\n<td>主键约束</td>\n<td>主键是一行数据的唯一标识，要求非空且唯一</td>\n<td>PRIMARY KEY</td>\n</tr>\n<tr>\n<td>默认约束</td>\n<td>保存数据时，如果未指定该字段的值，则采用默认值</td>\n<td>DEFAULT</td>\n</tr>\n<tr>\n<td>检查约束（8.0.1版本后）</td>\n<td>保证字段值满足某一个条件</td>\n<td>CHECK</td>\n</tr>\n<tr>\n<td>外键约束</td>\n<td>用来让两张图的数据之间建立连接，保证数据的一致性和完整性</td>\n<td>FOREIGN KEY</td>\n</tr>\n</tbody></table>\n<p>约束是作用于表中字段上的，可以再创建表/修改表的时候添加约束。</p>\n<h3 id=\"常用约束\"><a href=\"#常用约束\" class=\"headerlink\" title=\"常用约束\"></a>常用约束</h3><table>\n<thead>\n<tr>\n<th>约束条件</th>\n<th>关键字</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>主键</td>\n<td>PRIMARY KEY</td>\n</tr>\n<tr>\n<td>自动增长</td>\n<td>AUTO_INCREMENT</td>\n</tr>\n<tr>\n<td>不为空</td>\n<td>NOT NULL</td>\n</tr>\n<tr>\n<td>唯一</td>\n<td>UNIQUE</td>\n</tr>\n<tr>\n<td>逻辑条件</td>\n<td>CHECK</td>\n</tr>\n<tr>\n<td>默认值</td>\n<td>DEFAULT</td>\n</tr>\n</tbody></table>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table user(</span><br><span class=\"line\">\tid int primary key auto_increment,</span><br><span class=\"line\">\tname varchar(10) not null unique,</span><br><span class=\"line\">\tage int check(age &gt; 0 and age &lt; 120),</span><br><span class=\"line\">\tstatus char(1) default &apos;1&apos;,</span><br><span class=\"line\">\tgender char(1)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"外键约束\"><a href=\"#外键约束\" class=\"headerlink\" title=\"外键约束\"></a>外键约束</h3><p>添加外键：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE 表名(</span><br><span class=\"line\">\t字段名 字段类型,</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t[CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名)</span><br><span class=\"line\">);</span><br><span class=\"line\">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);</span><br><span class=\"line\"></span><br><span class=\"line\">-- 例子</span><br><span class=\"line\">alter table emp add constraint fk_emp_dept_id foreign key(dept_id) references dept(id);</span><br></pre></td></tr></table></figure>\n\n<p>删除外键：<br><code>ALTER TABLE 表名 DROP FOREIGN KEY 外键名;</code></p>\n<h4 id=\"删除-更新行为\"><a href=\"#删除-更新行为\" class=\"headerlink\" title=\"删除/更新行为\"></a>删除/更新行为</h4><table>\n<thead>\n<tr>\n<th>行为</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NO ACTION</td>\n<td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与RESTRICT一致）</td>\n</tr>\n<tr>\n<td>RESTRICT</td>\n<td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与NO ACTION一致）</td>\n</tr>\n<tr>\n<td>CASCADE</td>\n<td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除/更新外键在子表中的记录</td>\n</tr>\n<tr>\n<td>SET NULL</td>\n<td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（要求该外键允许为null）</td>\n</tr>\n<tr>\n<td>SET DEFAULT</td>\n<td>父表有变更时，子表将外键设为一个默认值（Innodb不支持）</td>\n</tr>\n</tbody></table>\n<p>更改删除/更新行为：<br><code>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为;</code></p>\n<h2 id=\"多表查询\"><a href=\"#多表查询\" class=\"headerlink\" title=\"多表查询\"></a>多表查询</h2><h3 id=\"多表关系\"><a href=\"#多表关系\" class=\"headerlink\" title=\"多表关系\"></a>多表关系</h3><ul>\n<li>一对多（多对一）</li>\n<li>多对多</li>\n<li>一对一</li>\n</ul>\n<h4 id=\"一对多\"><a href=\"#一对多\" class=\"headerlink\" title=\"一对多\"></a>一对多</h4><p>案例：部门与员工<br>关系：一个部门对应多个员工，一个员工对应一个部门<br>实现：在多的一方建立外键，指向一的一方的主键</p>\n<h4 id=\"多对多\"><a href=\"#多对多\" class=\"headerlink\" title=\"多对多\"></a>多对多</h4><p>案例：学生与课程<br>关系：一个学生可以选多门课程，一门课程也可以供多个学生选修<br>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p>\n<h4 id=\"一对一\"><a href=\"#一对一\" class=\"headerlink\" title=\"一对一\"></a>一对一</h4><p>案例：用户与用户详情<br>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率<br>实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）</p>\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><p>合并查询（笛卡尔积，会展示所有组合结果）：<br><code>select * from employee, dept;</code></p>\n<blockquote>\n<p>笛卡尔积：两个集合A集合和B集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）</p>\n</blockquote>\n<p>消除无效笛卡尔积：<br><code>select * from employee, dept where employee.dept = dept.id;</code></p>\n<h3 id=\"内连接查询\"><a href=\"#内连接查询\" class=\"headerlink\" title=\"内连接查询\"></a>内连接查询</h3><p>内连接查询的是两张表交集的部分</p>\n<p>隐式内连接：<br><code>SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;</code></p>\n<p>显式内连接：<br><code>SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;</code></p>\n<p>显式性能比隐式高</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询员工姓名，及关联的部门的名称</span><br><span class=\"line\">-- 隐式</span><br><span class=\"line\">select e.name, d.name from employee as e, dept as d where e.dept = d.id;</span><br><span class=\"line\">-- 显式</span><br><span class=\"line\">select e.name, d.name from employee as e inner join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"外连接查询\"><a href=\"#外连接查询\" class=\"headerlink\" title=\"外连接查询\"></a>外连接查询</h3><p>左外连接：<br>查询左表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;</code><br>相当于查询表1的所有数据，包含表1和表2交集部分数据</p>\n<p>右外连接：<br>查询右表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;</code></p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 左</span><br><span class=\"line\">select e.*, d.name from employee as e left outer join dept as d on e.dept = d.id;</span><br><span class=\"line\">select d.name, e.* from dept d left outer join emp e on e.dept = d.id;  -- 这条语句与下面的语句效果一样</span><br><span class=\"line\">-- 右</span><br><span class=\"line\">select d.name, e.* from employee as e right outer join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure>\n\n<p>左连接可以查询到没有dept的employee，右连接可以查询到没有employee的dept</p>\n<h3 id=\"自连接查询\"><a href=\"#自连接查询\" class=\"headerlink\" title=\"自连接查询\"></a>自连接查询</h3><p>当前表与自身的连接查询，自连接必须使用表别名</p>\n<p>语法：<br><code>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;</code></p>\n<p>自连接查询，可以是内连接查询，也可以是外连接查询</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询员工及其所属领导的名字</span><br><span class=\"line\">select a.name, b.name from employee a, employee b where a.manager = b.id;</span><br><span class=\"line\">-- 没有领导的也查询出来</span><br><span class=\"line\">select a.name, b.name from employee a left join employee b on a.manager = b.id;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"联合查询-union-union-all\"><a href=\"#联合查询-union-union-all\" class=\"headerlink\" title=\"联合查询 union, union all\"></a>联合查询 union, union all</h3><p>把多次查询的结果合并，形成一个新的查询集</p>\n<p>语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT 字段列表 FROM 表A ...</span><br><span class=\"line\">UNION [ALL]</span><br><span class=\"line\">SELECT 字段列表 FROM 表B ...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意事项-7\"><a href=\"#注意事项-7\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><ul>\n<li>UNION ALL 会有重复结果，UNION 不会</li>\n<li>联合查询比使用or效率高，不会使索引失效</li>\n</ul>\n<h3 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h3><p>SQL语句中嵌套SELECT语句，称谓嵌套查询，又称子查询。<br><code>SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);</code><br><strong>子查询外部的语句可以是 INSERT / UPDATE / DELETE / SELECT 的任何一个</strong></p>\n<p>根据子查询结果可以分为：</p>\n<ul>\n<li>标量子查询（子查询结果为单个值）</li>\n<li>列子查询（子查询结果为一列）</li>\n<li>行子查询（子查询结果为一行）</li>\n<li>表子查询（子查询结果为多行多列）</li>\n</ul>\n<p>根据子查询位置可分为：</p>\n<ul>\n<li>WHERE 之后</li>\n<li>FROM 之后</li>\n<li>SELECT 之后</li>\n</ul>\n<h4 id=\"标量子查询\"><a href=\"#标量子查询\" class=\"headerlink\" title=\"标量子查询\"></a>标量子查询</h4><p>子查询返回的结果是单个值（数字、字符串、日期等）。<br>常用操作符：- &lt; &gt; &gt; &gt;= &lt; &lt;=</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询销售部所有员工</span><br><span class=\"line\">select id from dept where name = &apos;销售部&apos;;</span><br><span class=\"line\">-- 根据销售部部门ID，查询员工信息</span><br><span class=\"line\">select * from employee where dept = 4;</span><br><span class=\"line\">-- 合并（子查询）</span><br><span class=\"line\">select * from employee where dept = (select id from dept where name = &apos;销售部&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">-- 查询xxx入职之后的员工信息</span><br><span class=\"line\">select * from employee where entrydate &gt; (select entrydate from employee where name = &apos;xxx&apos;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"列子查询\"><a href=\"#列子查询\" class=\"headerlink\" title=\"列子查询\"></a>列子查询</h4><p>返回的结果是一列（可以是多行）。</p>\n<p>常用操作符：</p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IN</td>\n<td>在指定的集合范围内，多选一</td>\n</tr>\n<tr>\n<td>NOT IN</td>\n<td>不在指定的集合范围内</td>\n</tr>\n<tr>\n<td>ANY</td>\n<td>子查询返回列表中，有任意一个满足即可</td>\n</tr>\n<tr>\n<td>SOME</td>\n<td>与ANY等同，使用SOME的地方都可以使用ANY</td>\n</tr>\n<tr>\n<td>ALL</td>\n<td>子查询返回列表的所有值都必须满足</td>\n</tr>\n</tbody></table>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询销售部和市场部的所有员工信息</span><br><span class=\"line\">select * from employee where dept in (select id from dept where name = &apos;销售部&apos; or name = &apos;市场部&apos;);</span><br><span class=\"line\">-- 查询比财务部所有人工资都高的员工信息</span><br><span class=\"line\">select * from employee where salary &gt; all(select salary from employee where dept = (select id from dept where name = &apos;财务部&apos;));</span><br><span class=\"line\">-- 查询比研发部任意一人工资高的员工信息</span><br><span class=\"line\">select * from employee where salary &gt; any (select salary from employee where dept = (select id from dept where name = &apos;研发部&apos;));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"行子查询\"><a href=\"#行子查询\" class=\"headerlink\" title=\"行子查询\"></a>行子查询</h4><p>返回的结果是一行（可以是多列）。<br>常用操作符：=, &lt;, &gt;, IN, NOT IN</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询与xxx的薪资及直属领导相同的员工信息</span><br><span class=\"line\">select * from employee where (salary, manager) = (12500, 1);</span><br><span class=\"line\">select * from employee where (salary, manager) = (select salary, manager from employee where name = &apos;xxx&apos;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"表子查询\"><a href=\"#表子查询\" class=\"headerlink\" title=\"表子查询\"></a>表子查询</h4><p>返回的结果是多行多列<br>常用操作符：IN</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询与xxx1，xxx2的职位和薪资相同的员工</span><br><span class=\"line\">select * from employee where (job, salary) in (select job, salary from employee where name = &apos;xxx1&apos; or name = &apos;xxx2&apos;);</span><br><span class=\"line\">-- 查询入职日期是2006-01-01之后的员工，及其部门信息</span><br><span class=\"line\">select e.*, d.* from (select * from employee where entrydate &gt; &apos;2006-01-01&apos;) as e left join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><p>事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p>\n<p>基本操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 1. 查询张三账户余额</span><br><span class=\"line\">select * from account where name = &apos;张三&apos;;</span><br><span class=\"line\">-- 2. 将张三账户余额-1000</span><br><span class=\"line\">update account set money = money - 1000 where name = &apos;张三&apos;;</span><br><span class=\"line\">-- 此语句出错后张三钱减少但是李四钱没有增加</span><br><span class=\"line\">模拟sql语句错误</span><br><span class=\"line\">-- 3. 将李四账户余额+1000</span><br><span class=\"line\">update account set money = money + 1000 where name = &apos;李四&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 查看事务提交方式</span><br><span class=\"line\">SELECT @@AUTOCOMMIT;</span><br><span class=\"line\">-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效</span><br><span class=\"line\">SET @@AUTOCOMMIT = 0;</span><br><span class=\"line\">-- 提交事务</span><br><span class=\"line\">COMMIT;</span><br><span class=\"line\">-- 回滚事务</span><br><span class=\"line\">ROLLBACK;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 设置手动提交后上面代码改为：</span><br><span class=\"line\">select * from account where name = &apos;张三&apos;;</span><br><span class=\"line\">update account set money = money - 1000 where name = &apos;张三&apos;;</span><br><span class=\"line\">update account set money = money + 1000 where name = &apos;李四&apos;;</span><br><span class=\"line\">commit;</span><br></pre></td></tr></table></figure>\n\n<p>操作方式二：</p>\n<p>开启事务：<br><code>START TRANSACTION 或 BEGIN TRANSACTION;</code><br>提交事务：<br><code>COMMIT;</code><br>回滚事务：<br><code>ROLLBACK;</code></p>\n<p>操作实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start transaction;</span><br><span class=\"line\">select * from account where name = &apos;张三&apos;;</span><br><span class=\"line\">update account set money = money - 1000 where name = &apos;张三&apos;;</span><br><span class=\"line\">update account set money = money + 1000 where name = &apos;李四&apos;;</span><br><span class=\"line\">commit;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四大特性ACID\"><a href=\"#四大特性ACID\" class=\"headerlink\" title=\"四大特性ACID\"></a>四大特性ACID</h3><ul>\n<li>原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败</li>\n<li>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</li>\n<li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li>\n<li>持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li>\n</ul>\n<h3 id=\"并发事务\"><a href=\"#并发事务\" class=\"headerlink\" title=\"并发事务\"></a>并发事务</h3><table>\n<thead>\n<tr>\n<th>问题</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>脏读</td>\n<td>一个事务读到另一个事务还没提交的数据</td>\n</tr>\n<tr>\n<td>不可重复读</td>\n<td>一个事务先后读取同一条记录，但两次读取的数据不同</td>\n</tr>\n<tr>\n<td>幻读</td>\n<td>一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>这三个问题的详细演示：<a href=\"https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd</a> </p>\n</blockquote>\n<p>并发事务隔离级别：</p>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Read uncommitted</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>Read committed</td>\n<td>×</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>Repeatable Read(默认)</td>\n<td>×</td>\n<td>×</td>\n<td>√</td>\n</tr>\n<tr>\n<td>Serializable</td>\n<td>×</td>\n<td>×</td>\n<td>×</td>\n</tr>\n</tbody></table>\n<ul>\n<li>√表示在当前隔离级别下该问题会出现</li>\n<li>Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差</li>\n</ul>\n<p>查看事务隔离级别：<br><code>SELECT @@TRANSACTION_ISOLATION;</code><br>设置事务隔离级别：<br><code>SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE };</code><br>SESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效</p>\n<h1 id=\"进阶篇\"><a href=\"#进阶篇\" class=\"headerlink\" title=\"进阶篇\"></a>进阶篇</h1><h2 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h2><p>MySQL体系结构：</p>\n<p><img src=\"https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_20220315034329549927.png\" alt=\"结构图\" title=\"结构图\"><br><img src=\"https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%B1%82%E7%BA%A7%E5%90%AB%E4%B9%89_20220315034359342837.png\" alt=\"层级描述\" title=\"层级描述\"></p>\n<p>存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。<br>默认存储引擎是InnoDB。</p>\n<p>相关操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询建表语句</span><br><span class=\"line\">show create table account;</span><br><span class=\"line\">-- 建表时指定存储引擎</span><br><span class=\"line\">CREATE TABLE 表名(</span><br><span class=\"line\">\t...</span><br><span class=\"line\">) ENGINE=INNODB;</span><br><span class=\"line\">-- 查看当前数据库支持的存储引擎</span><br><span class=\"line\">show engines;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h3><p>InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。</p>\n<p>特点：</p>\n<ul>\n<li>DML 操作遵循 ACID 模型，支持<strong>事务</strong></li>\n<li><strong>行级锁</strong>，提高并发访问性能</li>\n<li>支持<strong>外键</strong>约束，保证数据的完整性和正确性</li>\n</ul>\n<p>文件：</p>\n<ul>\n<li>xxx.ibd: xxx代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。</li>\n</ul>\n<p>参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间</p>\n<p>知识点：</p>\n<p>查看 Mysql 变量：<br><code>show variables like &#39;innodb_file_per_table&#39;;</code></p>\n<p>从idb文件提取表结构数据：<br>（在cmd运行）<br><code>ibd2sdi xxx.ibd</code></p>\n<p>InnoDB 逻辑存储结构：<br><img src=\"https://dhc.pythonanywhere.com/media/editor/%E9%80%BB%E8%BE%91%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84_20220316030616590001.png\" alt=\"InnoDB逻辑存储结构\" title=\"InnoDB逻辑存储结构\"></p>\n<h3 id=\"MyISAM\"><a href=\"#MyISAM\" class=\"headerlink\" title=\"MyISAM\"></a>MyISAM</h3><p>MyISAM 是 MySQL 早期的默认存储引擎。</p>\n<p>特点：</p>\n<ul>\n<li>不支持事务，不支持外键</li>\n<li>支持表锁，不支持行锁</li>\n<li>访问速度快</li>\n</ul>\n<p>文件：</p>\n<ul>\n<li>xxx.sdi: 存储表结构信息</li>\n<li>xxx.MYD: 存储数据</li>\n<li>xxx.MYI: 存储索引</li>\n</ul>\n<h3 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory\"></a>Memory</h3><p>Memory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。</p>\n<p>特点：</p>\n<ul>\n<li>存放在内存中，速度快</li>\n<li>hash索引（默认）</li>\n</ul>\n<p>文件：</p>\n<ul>\n<li>xxx.sdi: 存储表结构信息</li>\n</ul>\n<h3 id=\"存储引擎特点\"><a href=\"#存储引擎特点\" class=\"headerlink\" title=\"存储引擎特点\"></a>存储引擎特点</h3><table>\n<thead>\n<tr>\n<th>特点</th>\n<th>InnoDB</th>\n<th>MyISAM</th>\n<th>Memory</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>存储限制</td>\n<td>64TB</td>\n<td>有</td>\n<td>有</td>\n</tr>\n<tr>\n<td>事务安全</td>\n<td>支持</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>锁机制</td>\n<td>行锁</td>\n<td>表锁</td>\n<td>表锁</td>\n</tr>\n<tr>\n<td>B+tree索引</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>Hash索引</td>\n<td>-</td>\n<td>-</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>全文索引</td>\n<td>支持（5.6版本之后）</td>\n<td>支持</td>\n<td>-</td>\n</tr>\n<tr>\n<td>空间使用</td>\n<td>高</td>\n<td>低</td>\n<td>N/A</td>\n</tr>\n<tr>\n<td>内存使用</td>\n<td>高</td>\n<td>低</td>\n<td>中等</td>\n</tr>\n<tr>\n<td>批量插入速度</td>\n<td>低</td>\n<td>高</td>\n<td>高</td>\n</tr>\n<tr>\n<td>支持外键</td>\n<td>支持</td>\n<td>-</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<h3 id=\"存储引擎的选择\"><a href=\"#存储引擎的选择\" class=\"headerlink\" title=\"存储引擎的选择\"></a>存储引擎的选择</h3><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。</p>\n<ul>\n<li>InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择</li>\n<li>MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。</li>\n<li>Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li>\n</ul>\n<p>电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。</p>\n<h2 id=\"性能分析\"><a href=\"#性能分析\" class=\"headerlink\" title=\"性能分析\"></a>性能分析</h2><h3 id=\"查看执行频次\"><a href=\"#查看执行频次\" class=\"headerlink\" title=\"查看执行频次\"></a>查看执行频次</h3><p>查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：<br><code>SHOW GLOBAL STATUS LIKE &#39;Com_______&#39;;</code> 或者 <code>SHOW SESSION STATUS LIKE &#39;Com_______&#39;;</code><br>例：<code>show global status like &#39;Com_______&#39;</code></p>\n<h3 id=\"慢查询日志\"><a href=\"#慢查询日志\" class=\"headerlink\" title=\"慢查询日志\"></a>慢查询日志</h3><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。<br>MySQL的慢查询日志默认没有开启，需要在MySQL的配置文件（/etc/my.cnf）中配置如下信息：<br>    # 开启慢查询日志开关<br>    slow_query_log=1<br>    # 设置慢查询日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志<br>    long_query_time=2</p>\n<p>更改后记得重启MySQL服务，日志文件位置：/var/lib/mysql/localhost-slow.log</p>\n<p>查看慢查询日志开关状态：<br><code>show variables like &#39;slow_query_log&#39;;</code></p>\n<h3 id=\"profile\"><a href=\"#profile\" class=\"headerlink\" title=\"profile\"></a>profile</h3><p>show profile 能在做SQL优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：<br><code>SELECT @@have_profiling;</code><br>profiling 默认关闭，可以通过set语句在session/global级别开启 profiling：<br><code>SET profiling = 1;</code><br>查看所有语句的耗时：<br><code>show profiles;</code><br>查看指定query_id的SQL语句各个阶段的耗时：<br><code>show profile for query query_id;</code><br>查看指定query_id的SQL语句CPU的使用情况<br><code>show profile cpu for query query_id;</code></p>\n<h3 id=\"explain\"><a href=\"#explain\" class=\"headerlink\" title=\"explain\"></a>explain</h3><p>EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。<br>语法：<br>    # 直接在select语句之前加上关键字 explain / desc<br>    EXPLAIN SELECT 字段列表 FROM 表名 HWERE 条件;</p>\n<p>EXPLAIN 各字段含义：</p>\n<ul>\n<li>id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id相同，执行顺序从上到下；id不同，值越大越先执行）</li>\n<li>select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（SELECT/WHERE之后包含了子查询）等</li>\n<li>type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all</li>\n<li>possible_key：可能应用在这张表上的索引，一个或多个</li>\n<li>Key：实际使用的索引，如果为 NULL，则没有使用索引</li>\n<li>Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</li>\n<li>rows：MySQL认为必须要执行的行数，在InnoDB引擎的表中，是一个估计值，可能并不总是准确的</li>\n<li>filtered：表示返回结果的行数占需读取行数的百分比，filtered的值越大越好</li>\n</ul>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><p>索引是帮助 MySQL <strong>高效获取数据</strong>的<strong>数据结构（有序）</strong>。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。</p>\n<p>优缺点：</p>\n<p>优点：</p>\n<ul>\n<li>提高数据检索效率，降低数据库的IO成本</li>\n<li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>索引列也是要占用空间的</li>\n<li>索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE</li>\n</ul>\n<h3 id=\"索引结构\"><a href=\"#索引结构\" class=\"headerlink\" title=\"索引结构\"></a>索引结构</h3><table>\n<thead>\n<tr>\n<th>索引结构</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>B+Tree</td>\n<td>最常见的索引类型，大部分引擎都支持B+树索引</td>\n</tr>\n<tr>\n<td>Hash</td>\n<td>底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询</td>\n</tr>\n<tr>\n<td>R-Tree(空间索引)</td>\n<td>空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td>\n</tr>\n<tr>\n<td>Full-Text(全文索引)</td>\n<td>是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>索引</th>\n<th>InnoDB</th>\n<th>MyISAM</th>\n<th>Memory</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>B+Tree索引</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>Hash索引</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>R-Tree索引</td>\n<td>不支持</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>Full-text</td>\n<td>5.6版本后支持</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n</tbody></table>\n<h4 id=\"B-Tree\"><a href=\"#B-Tree\" class=\"headerlink\" title=\"B-Tree\"></a>B-Tree</h4><p><img src=\"https://dhc.pythonanywhere.com/media/editor/%E4%BA%8C%E5%8F%89%E6%A0%91_20220316153214227108.png\" alt=\"二叉树\" title=\"二叉树\"></p>\n<p>二叉树的缺点可以用红黑树来解决：<br><img src=\"https://dhc.pythonanywhere.com/media/editor/%E7%BA%A2%E9%BB%91%E6%A0%91_20220316163142686602.png\" alt=\"红黑树\" title=\"红黑树\"><br>红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。</p>\n<p>为了解决上述问题，可以使用 B-Tree 结构。<br>B-Tree (多路平衡查找树) 以一棵最大度数（max-degree，指一个节点的子节点个数）为5（5阶）的 b-tree 为例（每个节点最多存储4个key，5个指针）</p>\n<p><img src=\"https://dhc.pythonanywhere.com/media/editor/B-Tree%E7%BB%93%E6%9E%84_20220316163813441163.png\" alt=\"B-Tree结构\" title=\"B-Tree结构\"></p>\n<blockquote>\n<p>B-Tree 的数据插入过程动画参照：<a href=\"https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68</a><br>演示地址：<a href=\"https://www.cs.usfca.edu/~galles/visualization/BTree.html\" target=\"_blank\" rel=\"noopener\">https://www.cs.usfca.edu/~galles/visualization/BTree.html</a></p>\n</blockquote>\n<h4 id=\"B-Tree-1\"><a href=\"#B-Tree-1\" class=\"headerlink\" title=\"B+Tree\"></a>B+Tree</h4><p>结构图：</p>\n<p><img src=\"https://dhc.pythonanywhere.com/media/editor/B+Tree%E7%BB%93%E6%9E%84%E5%9B%BE_20220316170700591277.png\" alt=\"B+Tree结构图\" title=\"B+Tree结构图\"></p>\n<blockquote>\n<p>演示地址：<a href=\"https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html\" target=\"_blank\" rel=\"noopener\">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</a></p>\n</blockquote>\n<p>与 B-Tree 的区别：</p>\n<ul>\n<li>所有的数据都会出现在叶子节点</li>\n<li>叶子节点形成一个单向链表</li>\n</ul>\n<p>MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。</p>\n<p><img src=\"https://dhc.pythonanywhere.com/media/editor/%E7%BB%93%E6%9E%84%E5%9B%BE_20220316171730865611.png\" alt=\"MySQL B+Tree 结构图\" title=\"MySQL B+Tree 结构图\"></p>\n<h4 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h4><p>哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。<br>如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可以通过链表来解决。</p>\n<p><img src=\"https://dhc.pythonanywhere.com/media/editor/Hash%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86%E5%9B%BE_20220317143226150679.png\" alt=\"Hash索引原理图\" title=\"Hash索引原理图\"></p>\n<p>特点：</p>\n<ul>\n<li>Hash索引只能用于对等比较（=、in），不支持范围查询（betwwn、&gt;、&lt;、…）</li>\n<li>无法利用索引完成排序操作</li>\n<li>查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引</li>\n</ul>\n<p>存储引擎支持：</p>\n<ul>\n<li>Memory</li>\n<li>InnoDB: 具有自适应hash功能，hash索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的</li>\n</ul>\n<h4 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h4><ol>\n<li>为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？</li>\n</ol>\n<ul>\n<li>相对于二叉树，层级更少，搜索效率高</li>\n<li>对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li>\n<li>相对于 Hash 索引，B+Tree 支持范围匹配及排序操作</li>\n</ul>\n<h3 id=\"索引分类\"><a href=\"#索引分类\" class=\"headerlink\" title=\"索引分类\"></a>索引分类</h3><table>\n<thead>\n<tr>\n<th>分类</th>\n<th>含义</th>\n<th>特点</th>\n<th>关键字</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>主键索引</td>\n<td>针对于表中主键创建的索引</td>\n<td>默认自动创建，只能有一个</td>\n<td>PRIMARY</td>\n</tr>\n<tr>\n<td>唯一索引</td>\n<td>避免同一个表中某数据列中的值重复</td>\n<td>可以有多个</td>\n<td>UNIQUE</td>\n</tr>\n<tr>\n<td>常规索引</td>\n<td>快速定位特定数据</td>\n<td>可以有多个</td>\n<td></td>\n</tr>\n<tr>\n<td>全文索引</td>\n<td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td>\n<td>可以有多个</td>\n<td>FULLTEXT</td>\n</tr>\n</tbody></table>\n<p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：</p>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>含义</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>聚集索引(Clustered Index)</td>\n<td>将数据存储与索引放一块，索引结构的叶子节点保存了行数据</td>\n<td>必须有，而且只有一个</td>\n</tr>\n<tr>\n<td>二级索引(Secondary Index)</td>\n<td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td>\n<td>可以存在多个</td>\n</tr>\n</tbody></table>\n<p>演示图：</p>\n<p><img src=\"https://dhc.pythonanywhere.com/media/editor/%E5%8E%9F%E7%90%86%E5%9B%BE_20220318194454880073.png\" alt=\"大致原理\" title=\"大致原理\"><br><img src=\"https://dhc.pythonanywhere.com/media/editor/%E6%BC%94%E7%A4%BA%E5%9B%BE_20220319215403721066.png\" alt=\"演示图\" title=\"演示图\"></p>\n<p>聚集索引选取规则：</p>\n<ul>\n<li>如果存在主键，主键索引就是聚集索引</li>\n<li>如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引</li>\n<li>如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引</li>\n</ul>\n<h4 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h4><p>1. 以下 SQL 语句，哪个执行效率高？为什么？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from user where id = 10;</span><br><span class=\"line\">select * from user where name = &apos;Arm&apos;;</span><br><span class=\"line\">-- 备注：id为主键，name字段创建的有索引</span><br></pre></td></tr></table></figure>\n\n<p>答：第一条语句，因为第二条需要回表查询，相当于两个步骤。</p>\n<p>2. InnoDB 主键索引的 B+Tree 高度为多少？</p>\n<p>答：假设一行数据大小为1k，一页中可以存储16行这样的数据。InnoDB 的指针占用6个字节的空间，主键假设为bigint，占用字节数为8.<br>可得公式：<code>n * 8 + (n + 1) * 6 = 16 * 1024</code>，其中 8 表示 bigint 占用的字节数，n 表示当前节点存储的key的数量，(n + 1) 表示指针数量（比key多一个）。算出n约为1170。</p>\n<p>如果树的高度为2，那么他能存储的数据量大概为：<code>1171 * 16 = 18736</code>；<br>如果树的高度为3，那么他能存储的数据量大概为：<code>1171 * 1171 * 16 = 21939856</code>。</p>\n<p>另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>创建索引：<br><code>CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...);</code><br>如果不加 CREATE 后面不加索引类型参数，则创建的是常规索引</p>\n<p>查看索引：<br><code>SHOW INDEX FROM table_name;</code></p>\n<p>删除索引：<br><code>DROP INDEX index_name ON table_name;</code></p>\n<p>案例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引</span><br><span class=\"line\">create index idx_user_name on tb_user(name);</span><br><span class=\"line\">-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引</span><br><span class=\"line\">create unique index idx_user_phone on tb_user (phone);</span><br><span class=\"line\">-- 为profession, age, status创建联合索引</span><br><span class=\"line\">create index idx_user_pro_age_stat on tb_user(profession, age, status);</span><br><span class=\"line\">-- 为email建立合适的索引来提升查询效率</span><br><span class=\"line\">create index idx_user_email on tb_user(email);</span><br><span class=\"line\"></span><br><span class=\"line\">-- 删除索引</span><br><span class=\"line\">drop index idx_user_email on tb_user;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用规则\"><a href=\"#使用规则\" class=\"headerlink\" title=\"使用规则\"></a>使用规则</h3><h4 id=\"最左前缀法则\"><a href=\"#最左前缀法则\" class=\"headerlink\" title=\"最左前缀法则\"></a>最左前缀法则</h4><p>如果索引关联了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。<br>如果跳跃某一列，索引将部分失效（后面的字段索引失效）。</p>\n<p>联合索引中，出现范围查询（&lt;, &gt;），范围查询右侧的列索引失效。可以用&gt;=或者&lt;=来规避索引失效问题。</p>\n<h4 id=\"索引失效情况\"><a href=\"#索引失效情况\" class=\"headerlink\" title=\"索引失效情况\"></a>索引失效情况</h4><ol>\n<li>在索引列上进行运算操作，索引将失效。如：<code>explain select * from tb_user where substring(phone, 10, 2) = &#39;15&#39;;</code></li>\n<li>字符串类型字段使用时，不加引号，索引将失效。如：<code>explain select * from tb_user where phone = 17799990015;</code>，此处phone的值没有加引号</li>\n<li>模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如：<code>explain select * from tb_user where profession like &#39;%工程&#39;;</code>，前后都有 % 也会失效。</li>\n<li>用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。</li>\n<li>如果 MySQL 评估使用索引比全表更慢，则不使用索引。</li>\n</ol>\n<h4 id=\"SQL-提示\"><a href=\"#SQL-提示\" class=\"headerlink\" title=\"SQL 提示\"></a>SQL 提示</h4><p>是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</p>\n<p>例如，使用索引：<br><code>explain select * from tb_user use index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>不使用哪个索引：<br><code>explain select * from tb_user ignore index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>必须使用哪个索引：<br><code>explain select * from tb_user force index(idx_user_pro) where profession=&quot;软件工程&quot;;</code></p>\n<p>use 是建议，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，force就是无论如何都强制使用该索引。</p>\n<h4 id=\"覆盖索引-amp-回表查询\"><a href=\"#覆盖索引-amp-回表查询\" class=\"headerlink\" title=\"覆盖索引&amp;回表查询\"></a>覆盖索引&amp;回表查询</h4><p>尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。</p>\n<p>explain 中 extra 字段含义：<br><code>using index condition</code>：查找使用了索引，但是需要回表查询数据<br><code>using where; using index;</code>：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询</p>\n<p>如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是select *；如果在辅助索引中找聚集索引，如<code>select id, name from xxx where name=&#39;xxx&#39;;</code>，也只需要通过辅助索引(name)查找到对应的id，返回name和name索引对应的id即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如<code>select id, name, gender from xxx where name=&#39;xxx&#39;;</code></p>\n<p>所以尽量不要用<code>select *</code>，容易出现回表查询，降低效率，除非有联合索引包含了所有字段</p>\n<p>面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下SQL语句进行优化，该如何进行才是最优方案：<br><code>select id, username, password from tb_user where username=&#39;itcast&#39;;</code></p>\n<p>解：给username和password字段建立联合索引，则不需要回表查询，直接覆盖索引</p>\n<h4 id=\"前缀索引\"><a href=\"#前缀索引\" class=\"headerlink\" title=\"前缀索引\"></a>前缀索引</h4><p>当字段类型为字符串（varchar, text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</p>\n<p>语法：<code>create index idx_xxxx on table_name(columnn(n));</code><br>前缀长度：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。<br>求选择性公式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select count(distinct email) / count(*) from tb_user;</span><br><span class=\"line\">select count(distinct substring(email, 1, 5)) / count(*) from tb_user;</span><br></pre></td></tr></table></figure>\n\n<p>show index 里面的sub_part可以看到接取的长度</p>\n<h4 id=\"单列索引-amp-联合索引\"><a href=\"#单列索引-amp-联合索引\" class=\"headerlink\" title=\"单列索引&amp;联合索引\"></a>单列索引&amp;联合索引</h4><p>单列索引：即一个索引只包含单个列<br>联合索引：即一个索引包含了多个列<br>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。</p>\n<p>单列索引情况：<br><code>explain select id, phone, name from tb_user where phone = &#39;17799990010&#39; and name = &#39;韩信&#39;;</code><br>这句只会用到phone索引字段</p>\n<h5 id=\"注意事项-8\"><a href=\"#注意事项-8\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li>多条件联合查询时，MySQL优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询</li>\n</ul>\n<h3 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h3><ol>\n<li>针对于数据量较大，且查询比较频繁的表建立索引</li>\n<li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li>\n<li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li>\n<li>如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引</li>\n<li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li>\n<li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率</li>\n<li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询</li>\n</ol>\n<h2 id=\"SQL-优化\"><a href=\"#SQL-优化\" class=\"headerlink\" title=\"SQL 优化\"></a>SQL 优化</h2><h3 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h3><p>普通插入：</p>\n<ol>\n<li>采用批量插入（一次插入的数据不建议超过1000条）</li>\n<li>手动提交事务</li>\n<li>主键顺序插入</li>\n</ol>\n<p>大批量插入：<br>如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令插入。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 客户端连接服务端时，加上参数 --local-infile（这一行在bash/cmd界面输入）</span><br><span class=\"line\">mysql --local-infile -u root -p</span><br><span class=\"line\"># 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关</span><br><span class=\"line\">set global local_infile = 1;</span><br><span class=\"line\">select @@local_infile;</span><br><span class=\"line\"># 执行load指令将准备好的数据，加载到表结构中</span><br><span class=\"line\">load data local infile &apos;/root/sql1.log&apos; into table &apos;tb_user&apos; fields terminated by &apos;,&apos; lines terminated by &apos;\\n&apos;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"主键优化\"><a href=\"#主键优化\" class=\"headerlink\" title=\"主键优化\"></a>主键优化</h3><p>数据组织方式：在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（Index organized table, IOT）</p>\n<p>页分裂：页可以为空，也可以填充一般，也可以填充100%，每个页包含了2-N行数据（如果一行数据过大，会行溢出），根据主键排列。<br>页合并：当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录到达 MERGE_THRESHOLD（默认为页的50%），InnoDB会开始寻找最靠近的页（前后）看看是否可以将这两个页合并以优化空间使用。</p>\n<p>MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或创建索引时指定</p>\n<blockquote>\n<p>文字说明不够清晰明了，具体可以看视频里的PPT演示过程：<a href=\"https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90</a></p>\n</blockquote>\n<p>主键设计原则：</p>\n<ul>\n<li>满足业务需求的情况下，尽量降低主键的长度</li>\n<li>插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键</li>\n<li>尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号</li>\n<li>业务操作时，避免对主键的修改</li>\n</ul>\n<h3 id=\"order-by优化\"><a href=\"#order-by优化\" class=\"headerlink\" title=\"order by优化\"></a>order by优化</h3><ol>\n<li>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序</li>\n<li>Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</li>\n</ol>\n<p>如果order by字段全部使用升序排序或者降序排序，则都会走索引，但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain的extra信息显示的是<code>Using index, Using filesort</code>，如果要优化掉Using filesort，则需要另外再创建一个索引，如：<code>create index idx_user_age_phone_ad on tb_user(age asc, phone desc);</code>，此时使用<code>select id, age, phone from tb_user order by age asc, phone desc;</code>会全部走索引</p>\n<p>总结：</p>\n<ul>\n<li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li>\n<li>尽量使用覆盖索引</li>\n<li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC/DESC）</li>\n<li>如果不可避免出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认256k）</li>\n</ul>\n<h3 id=\"group-by优化\"><a href=\"#group-by优化\" class=\"headerlink\" title=\"group by优化\"></a>group by优化</h3><ul>\n<li>在分组操作时，可以通过索引来提高效率</li>\n<li>分组操作时，索引的使用也是满足最左前缀法则的</li>\n</ul>\n<p>如索引为<code>idx_user_pro_age_stat</code>，则句式可以是<code>select ... where profession order by age</code>，这样也符合最左前缀法则</p>\n<h3 id=\"limit优化\"><a href=\"#limit优化\" class=\"headerlink\" title=\"limit优化\"></a>limit优化</h3><p>常见的问题如<code>limit 2000000, 10</code>，此时需要 MySQL 排序前2000000条记录，但仅仅返回2000000 - 2000010的记录，其他记录丢弃，查询排序的代价非常大。<br>优化方案：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化</p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 此语句耗时很长</span><br><span class=\"line\">select * from tb_sku limit 9000000, 10;</span><br><span class=\"line\">-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询</span><br><span class=\"line\">select id from tb_sku order by id limit 9000000, 10;</span><br><span class=\"line\">-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit</span><br><span class=\"line\">-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);</span><br><span class=\"line\">-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度</span><br><span class=\"line\">select * from tb_sku as s, (select id from tb_sku order by id limit 9000000, 10) as a where s.id = a.id;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"count优化\"><a href=\"#count优化\" class=\"headerlink\" title=\"count优化\"></a>count优化</h3><p>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高（前提是不适用where）；<br>InnoDB 在执行 count(*) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。<br>优化方案：自己计数，如创建key-value表存储在内存或硬盘，或者是用redis</p>\n<p>count的几种用法：</p>\n<ul>\n<li>如果count函数的参数（count里面写的那个字段）不是NULL（字段值不为NULL），累计值就加一，最后返回累计值</li>\n<li>用法：count(*)、count(主键)、count(字段)、count(1)</li>\n<li>count(主键)跟count(*)一样，因为主键不能为空；count(字段)只计算字段值不为NULL的行；count(1)引擎会为每行添加一个1，然后就count这个1，返回结果也跟count(*)一样；count(null)返回0</li>\n</ul>\n<p>各种用法的性能：</p>\n<ul>\n<li>count(主键)：InnoDB引擎会遍历整张表，把每行的主键id值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）</li>\n<li>count(字段)：没有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加；有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加</li>\n<li>count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加</li>\n<li>count(*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加</li>\n</ul>\n<p>按效率排序：count(字段) &lt; count(主键) &lt; count(1) &lt; count(*)，所以尽量使用 count(*)</p>\n<h3 id=\"update优化（避免行锁升级为表锁）\"><a href=\"#update优化（避免行锁升级为表锁）\" class=\"headerlink\" title=\"update优化（避免行锁升级为表锁）\"></a>update优化（避免行锁升级为表锁）</h3><p>InnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。</p>\n<p>如以下两条语句：<br><code>update student set no = &#39;123&#39; where id = 1;</code>，这句由于id有主键索引，所以只会锁这一行；<br><code>update student set no = &#39;123&#39; where name = &#39;test&#39;;</code>，这句由于name没有索引，所以会把整张表都锁住进行数据更新，解决方法是给name字段添加索引</p>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><h2 id=\"整型\"><a href=\"#整型\" class=\"headerlink\" title=\"整型\"></a>整型</h2><table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>取值范围</th>\n<th>大小</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>TINYINT</td>\n<td>-128〜127</td>\n<td>1个字节</td>\n</tr>\n<tr>\n<td>SMALLINT</td>\n<td>-32768〜32767</td>\n<td>2个宇节</td>\n</tr>\n<tr>\n<td>MEDIUMINT</td>\n<td>-8388608〜8388607</td>\n<td>3个字节</td>\n</tr>\n<tr>\n<td>INT (INTEGHR)</td>\n<td>-2147483648〜2147483647</td>\n<td>4个字节</td>\n</tr>\n<tr>\n<td>BIGINT</td>\n<td>-9223372036854775808〜9223372036854775807</td>\n<td>8个字节</td>\n</tr>\n</tbody></table>\n<p>无符号在数据类型后加 unsigned 关键字。</p>\n<h2 id=\"浮点型\"><a href=\"#浮点型\" class=\"headerlink\" title=\"浮点型\"></a>浮点型</h2><table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>FLOAT</td>\n<td>单精度浮点数</td>\n<td>4 个字节</td>\n</tr>\n<tr>\n<td>DOUBLE</td>\n<td>双精度浮点数</td>\n<td>8 个字节</td>\n</tr>\n<tr>\n<td>DECIMAL (M, D)，DEC</td>\n<td>压缩的“严格”定点数</td>\n<td>M+2 个字节</td>\n</tr>\n</tbody></table>\n<h2 id=\"日期和时间\"><a href=\"#日期和时间\" class=\"headerlink\" title=\"日期和时间\"></a>日期和时间</h2><table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>日期格式</th>\n<th>日期范围</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>YEAR</td>\n<td>YYYY</td>\n<td>1901 ~ 2155</td>\n<td>1 个字节</td>\n</tr>\n<tr>\n<td>TIME</td>\n<td>HH:MM:SS</td>\n<td>-838:59:59 ~ 838:59:59</td>\n<td>3 个字节</td>\n</tr>\n<tr>\n<td>DATE</td>\n<td>YYYY-MM-DD</td>\n<td>1000-01-01 ~ 9999-12-3</td>\n<td>3 个字节</td>\n</tr>\n<tr>\n<td>DATETIME</td>\n<td>YYYY-MM-DD HH:MM:SS</td>\n<td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td>\n<td>8 个字节</td>\n</tr>\n<tr>\n<td>TIMESTAMP</td>\n<td>YYYY-MM-DD HH:MM:SS</td>\n<td>1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td>\n<td>4 个字节</td>\n</tr>\n</tbody></table>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CHAR(M)</td>\n<td>固定长度非二进制字符串</td>\n<td>M 字节，1&lt;=M&lt;=255</td>\n</tr>\n<tr>\n<td>VARCHAR(M)</td>\n<td>变长非二进制字符串</td>\n<td>L+1字节，在此，L&lt; = M和 1&lt;=M&lt;=255</td>\n</tr>\n<tr>\n<td>TINYTEXT</td>\n<td>非常小的非二进制字符串</td>\n<td>L+1字节，在此，L&lt;2^8</td>\n</tr>\n<tr>\n<td>TEXT</td>\n<td>小的非二进制字符串</td>\n<td>L+2字节，在此，L&lt;2^16</td>\n</tr>\n<tr>\n<td>MEDIUMTEXT</td>\n<td>中等大小的非二进制字符串</td>\n<td>L+3字节，在此，L&lt;2^24</td>\n</tr>\n<tr>\n<td>LONGTEXT</td>\n<td>大的非二进制字符串</td>\n<td>L+4字节，在此，L&lt;2^32</td>\n</tr>\n<tr>\n<td>ENUM</td>\n<td>枚举类型，只能有一个枚举字符串值</td>\n<td>1或2个字节，取决于枚举值的数目 (最大值为65535)</td>\n</tr>\n<tr>\n<td>SET</td>\n<td>一个设置，字符串对象可以有零个或 多个SET成员</td>\n<td>1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员）</td>\n</tr>\n</tbody></table>\n<h2 id=\"二进制类型\"><a href=\"#二进制类型\" class=\"headerlink\" title=\"二进制类型\"></a>二进制类型</h2><table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BIT(M)</td>\n<td>位字段类型</td>\n<td>大约 (M+7)/8 字节</td>\n</tr>\n<tr>\n<td>BINARY(M)</td>\n<td>固定长度二进制字符串</td>\n<td>M 字节</td>\n</tr>\n<tr>\n<td>VARBINARY (M)</td>\n<td>可变长度二进制字符串</td>\n<td>M+1 字节</td>\n</tr>\n<tr>\n<td>TINYBLOB (M)</td>\n<td>非常小的BLOB</td>\n<td>L+1 字节，在此，L&lt;2^8</td>\n</tr>\n<tr>\n<td>BLOB (M)</td>\n<td>小 BLOB</td>\n<td>L+2 字节，在此，L&lt;2^16</td>\n</tr>\n<tr>\n<td>MEDIUMBLOB (M)</td>\n<td>中等大小的BLOB</td>\n<td>L+3 字节，在此，L&lt;2^24</td>\n</tr>\n<tr>\n<td>LONGBLOB (M)</td>\n<td>非常大的BLOB</td>\n<td>L+4 字节，在此，L&lt;2^32</td>\n</tr>\n</tbody></table>\n<h1 id=\"权限一览表\"><a href=\"#权限一览表\" class=\"headerlink\" title=\"权限一览表\"></a>权限一览表</h1><blockquote>\n<p>具体权限的作用详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html\" title=\"官方文档\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n</blockquote>\n<p>GRANT 和 REVOKE 允许的静态权限</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Privilege</th>\n<th align=\"left\">Grant Table Column</th>\n<th align=\"left\">Context</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_all\" target=\"_blank\" rel=\"noopener\"><code>ALL [PRIVILEGES]</code></a></td>\n<td align=\"left\">Synonym for “all privileges”</td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter\" target=\"_blank\" rel=\"noopener\"><code>ALTER</code></a></td>\n<td align=\"left\"><code>Alter_priv</code></td>\n<td align=\"left\">Tables</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter-routine\" target=\"_blank\" rel=\"noopener\"><code>ALTER ROUTINE</code></a></td>\n<td align=\"left\"><code>Alter_routine_priv</code></td>\n<td align=\"left\">Stored routines</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create\" target=\"_blank\" rel=\"noopener\"><code>CREATE</code></a></td>\n<td align=\"left\"><code>Create_priv</code></td>\n<td align=\"left\">Databases, tables, or indexes</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-role\" target=\"_blank\" rel=\"noopener\"><code>CREATE ROLE</code></a></td>\n<td align=\"left\"><code>Create_role_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-routine\" target=\"_blank\" rel=\"noopener\"><code>CREATE ROUTINE</code></a></td>\n<td align=\"left\"><code>Create_routine_priv</code></td>\n<td align=\"left\">Stored routines</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-tablespace\" target=\"_blank\" rel=\"noopener\"><code>CREATE TABLESPACE</code></a></td>\n<td align=\"left\"><code>Create_tablespace_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-temporary-tables\" target=\"_blank\" rel=\"noopener\"><code>CREATE TEMPORARY TABLES</code></a></td>\n<td align=\"left\"><code>Create_tmp_table_priv</code></td>\n<td align=\"left\">Tables</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-user\" target=\"_blank\" rel=\"noopener\"><code>CREATE USER</code></a></td>\n<td align=\"left\"><code>Create_user_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-view\" target=\"_blank\" rel=\"noopener\"><code>CREATE VIEW</code></a></td>\n<td align=\"left\"><code>Create_view_priv</code></td>\n<td align=\"left\">Views</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_delete\" target=\"_blank\" rel=\"noopener\"><code>DELETE</code></a></td>\n<td align=\"left\"><code>Delete_priv</code></td>\n<td align=\"left\">Tables</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop\" target=\"_blank\" rel=\"noopener\"><code>DROP</code></a></td>\n<td align=\"left\"><code>Drop_priv</code></td>\n<td align=\"left\">Databases, tables, or views</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop-role\" target=\"_blank\" rel=\"noopener\"><code>DROP ROLE</code></a></td>\n<td align=\"left\"><code>Drop_role_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_event\" target=\"_blank\" rel=\"noopener\"><code>EVENT</code></a></td>\n<td align=\"left\"><code>Event_priv</code></td>\n<td align=\"left\">Databases</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_execute\" target=\"_blank\" rel=\"noopener\"><code>EXECUTE</code></a></td>\n<td align=\"left\"><code>Execute_priv</code></td>\n<td align=\"left\">Stored routines</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_file\" target=\"_blank\" rel=\"noopener\"><code>FILE</code></a></td>\n<td align=\"left\"><code>File_priv</code></td>\n<td align=\"left\">File access on server host</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_grant-option\" target=\"_blank\" rel=\"noopener\"><code>GRANT OPTION</code></a></td>\n<td align=\"left\"><code>Grant_priv</code></td>\n<td align=\"left\">Databases, tables, or stored routines</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_index\" target=\"_blank\" rel=\"noopener\"><code>INDEX</code></a></td>\n<td align=\"left\"><code>Index_priv</code></td>\n<td align=\"left\">Tables</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_insert\" target=\"_blank\" rel=\"noopener\"><code>INSERT</code></a></td>\n<td align=\"left\"><code>Insert_priv</code></td>\n<td align=\"left\">Tables or columns</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_lock-tables\" target=\"_blank\" rel=\"noopener\"><code>LOCK TABLES</code></a></td>\n<td align=\"left\"><code>Lock_tables_priv</code></td>\n<td align=\"left\">Databases</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_process\" target=\"_blank\" rel=\"noopener\"><code>PROCESS</code></a></td>\n<td align=\"left\"><code>Process_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_proxy\" target=\"_blank\" rel=\"noopener\"><code>PROXY</code></a></td>\n<td align=\"left\">See <code>proxies_priv</code> table</td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_references\" target=\"_blank\" rel=\"noopener\"><code>REFERENCES</code></a></td>\n<td align=\"left\"><code>References_priv</code></td>\n<td align=\"left\">Databases or tables</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_reload\" target=\"_blank\" rel=\"noopener\"><code>RELOAD</code></a></td>\n<td align=\"left\"><code>Reload_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-client\" target=\"_blank\" rel=\"noopener\"><code>REPLICATION CLIENT</code></a></td>\n<td align=\"left\"><code>Repl_client_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave\" target=\"_blank\" rel=\"noopener\"><code>REPLICATION SLAVE</code></a></td>\n<td align=\"left\"><code>Repl_slave_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_select\" target=\"_blank\" rel=\"noopener\"><code>SELECT</code></a></td>\n<td align=\"left\"><code>Select_priv</code></td>\n<td align=\"left\">Tables or columns</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-databases\" target=\"_blank\" rel=\"noopener\"><code>SHOW DATABASES</code></a></td>\n<td align=\"left\"><code>Show_db_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-view\" target=\"_blank\" rel=\"noopener\"><code>SHOW VIEW</code></a></td>\n<td align=\"left\"><code>Show_view_priv</code></td>\n<td align=\"left\">Views</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_shutdown\" target=\"_blank\" rel=\"noopener\"><code>SHUTDOWN</code></a></td>\n<td align=\"left\"><code>Shutdown_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_super\" target=\"_blank\" rel=\"noopener\"><code>SUPER</code></a></td>\n<td align=\"left\"><code>Super_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_trigger\" target=\"_blank\" rel=\"noopener\"><code>TRIGGER</code></a></td>\n<td align=\"left\"><code>Trigger_priv</code></td>\n<td align=\"left\">Tables</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_update\" target=\"_blank\" rel=\"noopener\"><code>UPDATE</code></a></td>\n<td align=\"left\"><code>Update_priv</code></td>\n<td align=\"left\">Tables or columns</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_usage\" target=\"_blank\" rel=\"noopener\"><code>USAGE</code></a></td>\n<td align=\"left\">Synonym for “no privileges”</td>\n<td align=\"left\">Server administration</td>\n</tr>\n</tbody></table>\n<p>GRANT 和 REVOKE 允许的动态权限</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Privilege</th>\n<th align=\"left\">Context</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_application-password-admin\" target=\"_blank\" rel=\"noopener\"><code>APPLICATION_PASSWORD_ADMIN</code></a></td>\n<td align=\"left\">Dual password administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-abort-exempt\" target=\"_blank\" rel=\"noopener\"><code>AUDIT_ABORT_EXEMPT</code></a></td>\n<td align=\"left\">Allow queries blocked by audit log filter</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-admin\" target=\"_blank\" rel=\"noopener\"><code>AUDIT_ADMIN</code></a></td>\n<td align=\"left\">Audit log administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_authentication-policy-admin\" target=\"_blank\" rel=\"noopener\"><code>AUTHENTICATION_POLICY_ADMIN</code></a></td>\n<td align=\"left\">Authentication administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_backup-admin\" target=\"_blank\" rel=\"noopener\"><code>BACKUP_ADMIN</code></a></td>\n<td align=\"left\">Backup administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-admin\" target=\"_blank\" rel=\"noopener\"><code>BINLOG_ADMIN</code></a></td>\n<td align=\"left\">Backup and Replication administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-encryption-admin\" target=\"_blank\" rel=\"noopener\"><code>BINLOG_ENCRYPTION_ADMIN</code></a></td>\n<td align=\"left\">Backup and Replication administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_clone-admin\" target=\"_blank\" rel=\"noopener\"><code>CLONE_ADMIN</code></a></td>\n<td align=\"left\">Clone administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_connection-admin\" target=\"_blank\" rel=\"noopener\"><code>CONNECTION_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_encryption-key-admin\" target=\"_blank\" rel=\"noopener\"><code>ENCRYPTION_KEY_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-admin\" target=\"_blank\" rel=\"noopener\"><code>FIREWALL_ADMIN</code></a></td>\n<td align=\"left\">Firewall administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-exempt\" target=\"_blank\" rel=\"noopener\"><code>FIREWALL_EXEMPT</code></a></td>\n<td align=\"left\">Firewall administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-user\" target=\"_blank\" rel=\"noopener\"><code>FIREWALL_USER</code></a></td>\n<td align=\"left\">Firewall administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-optimizer-costs\" target=\"_blank\" rel=\"noopener\"><code>FLUSH_OPTIMIZER_COSTS</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-status\" target=\"_blank\" rel=\"noopener\"><code>FLUSH_STATUS</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-tables\" target=\"_blank\" rel=\"noopener\"><code>FLUSH_TABLES</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-user-resources\" target=\"_blank\" rel=\"noopener\"><code>FLUSH_USER_RESOURCES</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-admin\" target=\"_blank\" rel=\"noopener\"><code>GROUP_REPLICATION_ADMIN</code></a></td>\n<td align=\"left\">Replication administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-stream\" target=\"_blank\" rel=\"noopener\"><code>GROUP_REPLICATION_STREAM</code></a></td>\n<td align=\"left\">Replication administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_innodb-redo-log-archive\" target=\"_blank\" rel=\"noopener\"><code>INNODB_REDO_LOG_ARCHIVE</code></a></td>\n<td align=\"left\">Redo log archiving administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_ndb-stored-user\" target=\"_blank\" rel=\"noopener\"><code>NDB_STORED_USER</code></a></td>\n<td align=\"left\">NDB Cluster</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_passwordless-user-admin\" target=\"_blank\" rel=\"noopener\"><code>PASSWORDLESS_USER_ADMIN</code></a></td>\n<td align=\"left\">Authentication administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_persist-ro-variables-admin\" target=\"_blank\" rel=\"noopener\"><code>PERSIST_RO_VARIABLES_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-applier\" target=\"_blank\" rel=\"noopener\"><code>REPLICATION_APPLIER</code></a></td>\n<td align=\"left\"><code>PRIVILEGE_CHECKS_USER</code> for a replication channel</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave-admin\" target=\"_blank\" rel=\"noopener\"><code>REPLICATION_SLAVE_ADMIN</code></a></td>\n<td align=\"left\">Replication administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-admin\" target=\"_blank\" rel=\"noopener\"><code>RESOURCE_GROUP_ADMIN</code></a></td>\n<td align=\"left\">Resource group administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-user\" target=\"_blank\" rel=\"noopener\"><code>RESOURCE_GROUP_USER</code></a></td>\n<td align=\"left\">Resource group administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_role-admin\" target=\"_blank\" rel=\"noopener\"><code>ROLE_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_session-variables-admin\" target=\"_blank\" rel=\"noopener\"><code>SESSION_VARIABLES_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_set-user-id\" target=\"_blank\" rel=\"noopener\"><code>SET_USER_ID</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-routine\" target=\"_blank\" rel=\"noopener\"><code>SHOW_ROUTINE</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-user\" target=\"_blank\" rel=\"noopener\"><code>SYSTEM_USER</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-variables-admin\" target=\"_blank\" rel=\"noopener\"><code>SYSTEM_VARIABLES_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_table-encryption-admin\" target=\"_blank\" rel=\"noopener\"><code>TABLE_ENCRYPTION_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_version-token-admin\" target=\"_blank\" rel=\"noopener\"><code>VERSION_TOKEN_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_xa-recover-admin\" target=\"_blank\" rel=\"noopener\"><code>XA_RECOVER_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n</tbody></table>\n<h1 id=\"图形化界面工具\"><a href=\"#图形化界面工具\" class=\"headerlink\" title=\"图形化界面工具\"></a>图形化界面工具</h1><ul>\n<li>Workbench(免费): <a href=\"http://dev.mysql.com/downloads/workbench/\" target=\"_blank\" rel=\"noopener\">http://dev.mysql.com/downloads/workbench/</a></li>\n<li>navicat(收费，试用版30天): <a href=\"https://www.navicat.com/en/download/navicat-for-mysql\" target=\"_blank\" rel=\"noopener\">https://www.navicat.com/en/download/navicat-for-mysql</a></li>\n<li>Sequel Pro(开源免费，仅支持Mac OS): <a href=\"http://www.sequelpro.com/\" target=\"_blank\" rel=\"noopener\">http://www.sequelpro.com/</a></li>\n<li>HeidiSQL(免费): <a href=\"http://www.heidisql.com/\" target=\"_blank\" rel=\"noopener\">http://www.heidisql.com/</a></li>\n<li>phpMyAdmin(免费): <a href=\"https://www.phpmyadmin.net/\" target=\"_blank\" rel=\"noopener\">https://www.phpmyadmin.net/</a></li>\n<li>SQLyog: <a href=\"https://sqlyog.en.softonic.com/\" target=\"_blank\" rel=\"noopener\">https://sqlyog.en.softonic.com/</a></li>\n</ul>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><h1 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h1><ol>\n<li>在SQL语句之后加上<code>\\G</code>会将结果的表格形式转换成行文本形式</li>\n<li>查看Mysql数据库占用空间：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT table_schema &quot;Database Name&quot;</span><br><span class=\"line\">     , SUM(data_length + index_length) / (1024 * 1024) &quot;Database Size in MB&quot;</span><br><span class=\"line\">FROM information_schema.TABLES</span><br><span class=\"line\">GROUP BY table_schema;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#004600","paginator":"#004600","button_hover":"#003300","text_selection":"#003300","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#1B9EF3","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"Home":"/","Archives":"/archives","Tags":"/tags","Categories":"/categories","About":"/about"},"favicon":"/favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"pale night","social":null,"github fa":"https://github.com/NUISTGY","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"},"hide_scrollbar":true},"fireworks":true,"baidu_analytics":null,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":"http://r.photo.store.qq.com/psc?/V14eJTFY137vJk/cnQ2D7YjAZ5R6pY0fmc9jgCqVB3ImjsxGUOZ.vc77kDsEnIVTLf2mSSJ6Y6vFW94Mcab*2OmXqY9iWaksXwrBNsvyKd0aWWJwyMTtKd1DOQ!/r","top_img":"https://w.wallhaven.cc/full/ex/wallhaven-exooer.png","post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":"ture"},"toc":{"enable":true,"number":true},"post_copyright":{"enable":true,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":true,"pubid":"ra-5befa2f76de7c6b5"},"disqus":{"enable":false,"shortname":"disqus_hi07PQLiZw","count":true},"since":2015,"footer_custom_text":"Enjoy the cyber world!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":false,"page_pv_header":"<i class=\"fa fa-file\"></i>","page_pv_footer":null},"canvas_ribbon":{"enable":true,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false},"follow":{"enable":true,"url":"https://github.com/NUISTGY","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"google_site_verification":null,"bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"disable_baidu_transformation":true,"rootConfig":{"title":"Yu's Blog","subtitle":"Do not go gentle into that good night ~","description":"Do what you want to do !","author":"GeYu","language":"zh-Hans","timezone":null,"url":"https://github.com/NUISTGY","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":true,"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":null,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","per_page":5,"pagination_dir":"page","theme":"melody","deploy":{"type":"git","repo":"git@github.com:NUISTGY/NUISTGY.github.io.git","branch":"master"},"ignore":[],"keywords":null,"index_generator":{"per_page":5,"order_by":"-date","path":""},"archive_generator":{"per_page":5,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":5},"search":{"path":"search.xml","field":"post"},"tag_generator":{"per_page":5},"marked":{"gfm":true,"pedantic":false,"sanitize":false,"tables":true,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"","more":"<h1 id=\"基础篇\"><a href=\"#基础篇\" class=\"headerlink\" title=\"基础篇\"></a>基础篇</h1><h2 id=\"通用语法及分类\"><a href=\"#通用语法及分类\" class=\"headerlink\" title=\"通用语法及分类\"></a>通用语法及分类</h2><ul>\n<li>DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）</li>\n<li>DML: 数据操作语言，用来对数据库表中的数据进行增删改</li>\n<li>DQL: 数据查询语言，用来查询数据库中表的记录</li>\n<li>DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限</li>\n</ul>\n<h3 id=\"DDL（数据定义语言）\"><a href=\"#DDL（数据定义语言）\" class=\"headerlink\" title=\"DDL（数据定义语言）\"></a>DDL（数据定义语言）</h3><p>数据定义语言</p>\n<h4 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h4><p>查询所有数据库：<br><code>SHOW DATABASES;</code><br>查询当前数据库：<br><code>SELECT DATABASE();</code><br>创建数据库：<br><code>CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];</code><br>删除数据库：<br><code>DROP DATABASE [ IF EXISTS ] 数据库名;</code><br>使用数据库：<br><code>USE 数据库名;</code></p>\n<h5 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li>UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集</li>\n</ul>\n<h4 id=\"表操作\"><a href=\"#表操作\" class=\"headerlink\" title=\"表操作\"></a>表操作</h4><p>查询当前数据库所有表：<br><code>SHOW TABLES;</code><br>查询表结构：<br><code>DESC 表名;</code><br>查询指定表的建表语句：<br><code>SHOW CREATE TABLE 表名;</code></p>\n<p>创建表：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE 表名(</span><br><span class=\"line\">\t字段1 字段1类型 [COMMENT 字段1注释],</span><br><span class=\"line\">\t字段2 字段2类型 [COMMENT 字段2注释],</span><br><span class=\"line\">\t字段3 字段3类型 [COMMENT 字段3注释],</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t字段n 字段n类型 [COMMENT 字段n注释]</span><br><span class=\"line\">)[ COMMENT 表注释 ];</span><br></pre></td></tr></table></figure>\n\n<p><strong>最后一个字段后面没有逗号</strong></p>\n<p>添加字段：<br><code>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：<code>ALTER TABLE emp ADD nickname varchar(20) COMMENT &#39;昵称&#39;;</code></p>\n<p>修改数据类型：<br><code>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</code><br>修改字段名和字段类型：<br><code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：将emp表的nickname字段修改为username，类型为varchar(30)<br><code>ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT &#39;昵称&#39;;</code></p>\n<p>删除字段：<br><code>ALTER TABLE 表名 DROP 字段名;</code></p>\n<p>修改表名：<br><code>ALTER TABLE 表名 RENAME TO 新表名</code></p>\n<p>删除表：<br><code>DROP TABLE [IF EXISTS] 表名;</code><br>删除表，并重新创建该表：<br><code>TRUNCATE TABLE 表名;</code></p>\n<h3 id=\"DML（数据操作语言）\"><a href=\"#DML（数据操作语言）\" class=\"headerlink\" title=\"DML（数据操作语言）\"></a>DML（数据操作语言）</h3><h4 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a>添加数据</h4><p>指定字段：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</code><br>全部字段：<br><code>INSERT INTO 表名 VALUES (值1, 值2, ...);</code></p>\n<p>批量添加数据：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code><br><code>INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code></p>\n<h5 id=\"注意事项-1\"><a href=\"#注意事项-1\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li>字符串和日期类型数据应该包含在引号中</li>\n<li>插入的数据大小应该在字段的规定范围内</li>\n</ul>\n<h4 id=\"更新和删除数据\"><a href=\"#更新和删除数据\" class=\"headerlink\" title=\"更新和删除数据\"></a>更新和删除数据</h4><p>修改数据：<br><code>UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];</code><br>例：<br><code>UPDATE emp SET name = &#39;Jack&#39; WHERE id = 1;</code></p>\n<p>删除数据：<br><code>DELETE FROM 表名 [ WHERE 条件 ];</code></p>\n<h3 id=\"DQL（数据查询语言）\"><a href=\"#DQL（数据查询语言）\" class=\"headerlink\" title=\"DQL（数据查询语言）\"></a>DQL（数据查询语言）</h3><p>语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">\t字段列表</span><br><span class=\"line\">FROM</span><br><span class=\"line\">\t表名字段</span><br><span class=\"line\">WHERE</span><br><span class=\"line\">\t条件列表</span><br><span class=\"line\">GROUP BY</span><br><span class=\"line\">\t分组字段列表</span><br><span class=\"line\">HAVING</span><br><span class=\"line\">\t分组后的条件列表</span><br><span class=\"line\">ORDER BY</span><br><span class=\"line\">\t排序字段列表</span><br><span class=\"line\">LIMIT</span><br><span class=\"line\">\t分页参数</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"基础查询\"><a href=\"#基础查询\" class=\"headerlink\" title=\"基础查询\"></a>基础查询</h4><p>查询多个字段：<br><code>SELECT 字段1, 字段2, 字段3, ... FROM 表名;</code><br><code>SELECT * FROM 表名;</code></p>\n<p>设置别名：<br><code>SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;</code><br><code>SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;</code></p>\n<p>去除重复记录：<br><code>SELECT DISTINCT 字段列表 FROM 表名;</code></p>\n<p>转义：<br><code>SELECT * FROM 表名 WHERE name LIKE &#39;/_张三&#39; ESCAPE &#39;/&#39;</code><br>/ 之后的_不作为通配符</p>\n<h4 id=\"条件查询\"><a href=\"#条件查询\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code></p>\n<p>条件：</p>\n<table>\n<thead>\n<tr>\n<th>比较运算符</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&gt;</td>\n<td>大于</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于</td>\n</tr>\n<tr>\n<td>=</td>\n<td>等于</td>\n</tr>\n<tr>\n<td>&lt;&gt; 或 !=</td>\n<td>不等于</td>\n</tr>\n<tr>\n<td>BETWEEN … AND …</td>\n<td>在某个范围内（含最小、最大值）</td>\n</tr>\n<tr>\n<td>IN(…)</td>\n<td>在in之后的列表中的值，多选一</td>\n</tr>\n<tr>\n<td>LIKE 占位符</td>\n<td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td>\n</tr>\n<tr>\n<td>IS NULL</td>\n<td>是NULL</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>逻辑运算符</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>AND 或 &amp;&amp;</td>\n<td>并且（多个条件同时成立）</td>\n</tr>\n<tr>\n<td>OR 或 &#124;&#124;</td>\n<td>或者（多个条件任意一个成立）</td>\n</tr>\n<tr>\n<td>NOT 或 !</td>\n<td>非，不是</td>\n</tr>\n</tbody></table>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 年龄等于30</span><br><span class=\"line\">select * from employee where age = 30;</span><br><span class=\"line\">-- 年龄小于30</span><br><span class=\"line\">select * from employee where age &lt; 30;</span><br><span class=\"line\">-- 小于等于</span><br><span class=\"line\">select * from employee where age &lt;= 30;</span><br><span class=\"line\">-- 没有身份证</span><br><span class=\"line\">select * from employee where idcard is null or idcard = &apos;&apos;;</span><br><span class=\"line\">-- 有身份证</span><br><span class=\"line\">select * from employee where idcard;</span><br><span class=\"line\">select * from employee where idcard is not null;</span><br><span class=\"line\">-- 不等于</span><br><span class=\"line\">select * from employee where age != 30;</span><br><span class=\"line\">-- 年龄在20到30之间</span><br><span class=\"line\">select * from employee where age between 20 and 30;</span><br><span class=\"line\">select * from employee where age &gt;= 20 and age &lt;= 30;</span><br><span class=\"line\">-- 下面语句不报错，但查不到任何信息</span><br><span class=\"line\">select * from employee where age between 30 and 20;</span><br><span class=\"line\">-- 性别为女且年龄小于30</span><br><span class=\"line\">select * from employee where age &lt; 30 and gender = &apos;女&apos;;</span><br><span class=\"line\">-- 年龄等于25或30或35</span><br><span class=\"line\">select * from employee where age = 25 or age = 30 or age = 35;</span><br><span class=\"line\">select * from employee where age in (25, 30, 35);</span><br><span class=\"line\">-- 姓名为两个字</span><br><span class=\"line\">select * from employee where name like &apos;__&apos;;</span><br><span class=\"line\">-- 身份证最后为X</span><br><span class=\"line\">select * from employee where idcard like &apos;%X&apos;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"聚合查询（聚合函数）\"><a href=\"#聚合查询（聚合函数）\" class=\"headerlink\" title=\"聚合查询（聚合函数）\"></a>聚合查询（聚合函数）</h4><p>常见聚合函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>count</td>\n<td>统计数量</td>\n</tr>\n<tr>\n<td>max</td>\n<td>最大值</td>\n</tr>\n<tr>\n<td>min</td>\n<td>最小值</td>\n</tr>\n<tr>\n<td>avg</td>\n<td>平均值</td>\n</tr>\n<tr>\n<td>sum</td>\n<td>求和</td>\n</tr>\n</tbody></table>\n<p>语法：<br><code>SELECT 聚合函数(字段列表) FROM 表名;</code><br>例：<br><code>SELECT count(id) from employee where workaddress = &quot;广东省&quot;;</code></p>\n<h4 id=\"分组查询\"><a href=\"#分组查询\" class=\"headerlink\" title=\"分组查询\"></a>分组查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];</code></p>\n<p>where 和 having 的区别：</p>\n<ul>\n<li>执行时机不同：where是分组之前进行过滤，不满足where条件不参与分组；having是分组后对结果进行过滤。</li>\n<li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li>\n</ul>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）</span><br><span class=\"line\">select count(*) from employee group by gender;</span><br><span class=\"line\">-- 根据性别分组，统计男性和女性数量</span><br><span class=\"line\">select gender, count(*) from employee group by gender;</span><br><span class=\"line\">-- 根据性别分组，统计男性和女性的平均年龄</span><br><span class=\"line\">select gender, avg(age) from employee group by gender;</span><br><span class=\"line\">-- 年龄小于45，并根据工作地址分组</span><br><span class=\"line\">select workaddress, count(*) from employee where age &lt; 45 group by workaddress;</span><br><span class=\"line\">-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址</span><br><span class=\"line\">select workaddress, count(*) address_count from employee where age &lt; 45 group by workaddress having address_count &gt;= 3;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意事项-2\"><a href=\"#注意事项-2\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li>执行顺序：where &gt; 聚合函数 &gt; having</li>\n<li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li>\n</ul>\n<h4 id=\"排序查询\"><a href=\"#排序查询\" class=\"headerlink\" title=\"排序查询\"></a>排序查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;</code></p>\n<p>排序方式：</p>\n<ul>\n<li>ASC: 升序（默认）</li>\n<li>DESC: 降序</li>\n</ul>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 根据年龄升序排序</span><br><span class=\"line\">SELECT * FROM employee ORDER BY age ASC;</span><br><span class=\"line\">SELECT * FROM employee ORDER BY age;</span><br><span class=\"line\">-- 两字段排序，根据年龄升序排序，入职时间降序排序</span><br><span class=\"line\">SELECT * FROM employee ORDER BY age ASC, entrydate DESC;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意事项-3\"><a href=\"#注意事项-3\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p>\n<h4 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;</code></p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询第一页数据，展示10条</span><br><span class=\"line\">SELECT * FROM employee LIMIT 0, 10;</span><br><span class=\"line\">-- 查询第二页</span><br><span class=\"line\">SELECT * FROM employee LIMIT 10, 10;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意事项-4\"><a href=\"#注意事项-4\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li>起始索引从0开始，起始索引 = （查询页码 - 1） * 每页显示记录数</li>\n<li>分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT</li>\n<li>如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10</li>\n</ul>\n<h4 id=\"DQL执行顺序\"><a href=\"#DQL执行顺序\" class=\"headerlink\" title=\"DQL执行顺序\"></a>DQL执行顺序</h4><p>FROM -&gt; WHERE -&gt; GROUP BY -&gt; SELECT -&gt; ORDER BY -&gt; LIMIT</p>\n<h3 id=\"DCL\"><a href=\"#DCL\" class=\"headerlink\" title=\"DCL\"></a>DCL</h3><h4 id=\"管理用户\"><a href=\"#管理用户\" class=\"headerlink\" title=\"管理用户\"></a>管理用户</h4><p>查询用户：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USER mysql;</span><br><span class=\"line\">SELECT * FROM user;</span><br></pre></td></tr></table></figure>\n\n<p>创建用户:<br><code>CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;</code></p>\n<p>修改用户密码：<br><code>ALTER USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;;</code></p>\n<p>删除用户：<br><code>DROP USER &#39;用户名&#39;@&#39;主机名&#39;;</code></p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 创建用户test，只能在当前主机localhost访问</span><br><span class=\"line\">create user &apos;test&apos;@&apos;localhost&apos; identified by &apos;123456&apos;;</span><br><span class=\"line\">-- 创建用户test，能在任意主机访问</span><br><span class=\"line\">create user &apos;test&apos;@&apos;%&apos; identified by &apos;123456&apos;;</span><br><span class=\"line\">create user &apos;test&apos; identified by &apos;123456&apos;;</span><br><span class=\"line\">-- 修改密码</span><br><span class=\"line\">alter user &apos;test&apos;@&apos;localhost&apos; identified with mysql_native_password by &apos;1234&apos;;</span><br><span class=\"line\">-- 删除用户</span><br><span class=\"line\">drop user &apos;test&apos;@&apos;localhost&apos;;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"注意事项-5\"><a href=\"#注意事项-5\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li>主机名可以使用 % 通配</li>\n</ul>\n<h4 id=\"权限控制\"><a href=\"#权限控制\" class=\"headerlink\" title=\"权限控制\"></a>权限控制</h4><p>常用权限：</p>\n<table>\n<thead>\n<tr>\n<th>权限</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ALL, ALL PRIVILEGES</td>\n<td>所有权限</td>\n</tr>\n<tr>\n<td>SELECT</td>\n<td>查询数据</td>\n</tr>\n<tr>\n<td>INSERT</td>\n<td>插入数据</td>\n</tr>\n<tr>\n<td>UPDATE</td>\n<td>修改数据</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>删除数据</td>\n</tr>\n<tr>\n<td>ALTER</td>\n<td>修改表</td>\n</tr>\n<tr>\n<td>DROP</td>\n<td>删除数据库/表/视图</td>\n</tr>\n<tr>\n<td>CREATE</td>\n<td>创建数据库/表</td>\n</tr>\n</tbody></table>\n<p>更多权限请看<a href=\"#权限一览表\" title=\"权限一览表\">权限一览表</a></p>\n<p>查询权限：<br><code>SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39;;</code></p>\n<p>授予权限：<br><code>GRANT 权限列表 ON 数据库名.表名 TO &#39;用户名&#39;@&#39;主机名&#39;;</code></p>\n<p>撤销权限：<br><code>REVOKE 权限列表 ON 数据库名.表名 FROM &#39;用户名&#39;@&#39;主机名&#39;;</code></p>\n<h5 id=\"注意事项-6\"><a href=\"#注意事项-6\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li>多个权限用逗号分隔</li>\n<li>授权时，数据库名和表名可以用 * 进行通配，代表所有</li>\n</ul>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ul>\n<li>字符串函数</li>\n<li>数值函数</li>\n<li>日期函数</li>\n<li>流程函数</li>\n</ul>\n<h3 id=\"字符串函数\"><a href=\"#字符串函数\" class=\"headerlink\" title=\"字符串函数\"></a>字符串函数</h3><p>常用函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CONCAT(s1, s2, …, sn)</td>\n<td>字符串拼接，将s1, s2, …, sn拼接成一个字符串</td>\n</tr>\n<tr>\n<td>LOWER(str)</td>\n<td>将字符串全部转为小写</td>\n</tr>\n<tr>\n<td>UPPER(str)</td>\n<td>将字符串全部转为大写</td>\n</tr>\n<tr>\n<td>LPAD(str, n, pad)</td>\n<td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td>\n</tr>\n<tr>\n<td>RPAD(str, n, pad)</td>\n<td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td>\n</tr>\n<tr>\n<td>TRIM(str)</td>\n<td>去掉字符串头部和尾部的空格</td>\n</tr>\n<tr>\n<td>SUBSTRING(str, start, len)</td>\n<td>返回从字符串str从start位置起的len个长度的字符串</td>\n</tr>\n</tbody></table>\n<p>使用示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 拼接</span><br><span class=\"line\">SELECT CONCAT(&apos;Hello&apos;, &apos;World&apos;);</span><br><span class=\"line\">-- 小写</span><br><span class=\"line\">SELECT LOWER(&apos;Hello&apos;);</span><br><span class=\"line\">-- 大写</span><br><span class=\"line\">SELECT UPPER(&apos;Hello&apos;);</span><br><span class=\"line\">-- 左填充</span><br><span class=\"line\">SELECT LPAD(&apos;01&apos;, 5, &apos;-&apos;);</span><br><span class=\"line\">-- 右填充</span><br><span class=\"line\">SELECT RPAD(&apos;01&apos;, 5, &apos;-&apos;);</span><br><span class=\"line\">-- 去除空格</span><br><span class=\"line\">SELECT TRIM(&apos; Hello World &apos;);</span><br><span class=\"line\">-- 切片（起始索引为1）</span><br><span class=\"line\">SELECT SUBSTRING(&apos;Hello World&apos;, 1, 5);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数值函数\"><a href=\"#数值函数\" class=\"headerlink\" title=\"数值函数\"></a>数值函数</h3><p>常见函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CEIL(x)</td>\n<td>向上取整</td>\n</tr>\n<tr>\n<td>FLOOR(x)</td>\n<td>向下取整</td>\n</tr>\n<tr>\n<td>MOD(x, y)</td>\n<td>返回x/y的模</td>\n</tr>\n<tr>\n<td>RAND()</td>\n<td>返回0~1内的随机数</td>\n</tr>\n<tr>\n<td>ROUND(x, y)</td>\n<td>求参数x的四舍五入值，保留y位小数</td>\n</tr>\n</tbody></table>\n<h3 id=\"日期函数\"><a href=\"#日期函数\" class=\"headerlink\" title=\"日期函数\"></a>日期函数</h3><p>常用函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CURDATE()</td>\n<td>返回当前日期</td>\n</tr>\n<tr>\n<td>CURTIME()</td>\n<td>返回当前时间</td>\n</tr>\n<tr>\n<td>NOW()</td>\n<td>返回当前日期和时间</td>\n</tr>\n<tr>\n<td>YEAR(date)</td>\n<td>获取指定date的年份</td>\n</tr>\n<tr>\n<td>MONTH(date)</td>\n<td>获取指定date的月份</td>\n</tr>\n<tr>\n<td>DAY(date)</td>\n<td>获取指定date的日期</td>\n</tr>\n<tr>\n<td>DATE_ADD(date, INTERVAL expr type)</td>\n<td>返回一个日期/时间值加上一个时间间隔expr后的时间值</td>\n</tr>\n<tr>\n<td>DATEDIFF(date1, date2)</td>\n<td>返回起始时间date1和结束时间date2之间的天数</td>\n</tr>\n</tbody></table>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- DATE_ADD</span><br><span class=\"line\">SELECT DATE_ADD(NOW(), INTERVAL 70 YEAR);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"流程函数\"><a href=\"#流程函数\" class=\"headerlink\" title=\"流程函数\"></a>流程函数</h3><p>常用函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IF(value, t, f)</td>\n<td>如果value为true，则返回t，否则返回f</td>\n</tr>\n<tr>\n<td>IFNULL(value1, value2)</td>\n<td>如果value1不为空，返回value1，否则返回value2</td>\n</tr>\n<tr>\n<td>CASE WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td>\n<td>如果val1为true，返回res1，… 否则返回default默认值</td>\n</tr>\n<tr>\n<td>CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td>\n<td>如果expr的值等于val1，返回res1，… 否则返回default默认值</td>\n</tr>\n</tbody></table>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select</span><br><span class=\"line\">\tname,</span><br><span class=\"line\">\t(case when age &gt; 30 then &apos;中年&apos; else &apos;青年&apos; end)</span><br><span class=\"line\">from employee;</span><br><span class=\"line\">select</span><br><span class=\"line\">\tname,</span><br><span class=\"line\">\t(case workaddress when &apos;北京市&apos; then &apos;一线城市&apos; when &apos;上海市&apos; then &apos;一线城市&apos; else &apos;二线城市&apos; end) as &apos;工作地址&apos;</span><br><span class=\"line\">from employee;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"约束\"><a href=\"#约束\" class=\"headerlink\" title=\"约束\"></a>约束</h2><p>分类：</p>\n<table>\n<thead>\n<tr>\n<th>约束</th>\n<th>描述</th>\n<th>关键字</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>非空约束</td>\n<td>限制该字段的数据不能为null</td>\n<td>NOT NULL</td>\n</tr>\n<tr>\n<td>唯一约束</td>\n<td>保证该字段的所有数据都是唯一、不重复的</td>\n<td>UNIQUE</td>\n</tr>\n<tr>\n<td>主键约束</td>\n<td>主键是一行数据的唯一标识，要求非空且唯一</td>\n<td>PRIMARY KEY</td>\n</tr>\n<tr>\n<td>默认约束</td>\n<td>保存数据时，如果未指定该字段的值，则采用默认值</td>\n<td>DEFAULT</td>\n</tr>\n<tr>\n<td>检查约束（8.0.1版本后）</td>\n<td>保证字段值满足某一个条件</td>\n<td>CHECK</td>\n</tr>\n<tr>\n<td>外键约束</td>\n<td>用来让两张图的数据之间建立连接，保证数据的一致性和完整性</td>\n<td>FOREIGN KEY</td>\n</tr>\n</tbody></table>\n<p>约束是作用于表中字段上的，可以再创建表/修改表的时候添加约束。</p>\n<h3 id=\"常用约束\"><a href=\"#常用约束\" class=\"headerlink\" title=\"常用约束\"></a>常用约束</h3><table>\n<thead>\n<tr>\n<th>约束条件</th>\n<th>关键字</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>主键</td>\n<td>PRIMARY KEY</td>\n</tr>\n<tr>\n<td>自动增长</td>\n<td>AUTO_INCREMENT</td>\n</tr>\n<tr>\n<td>不为空</td>\n<td>NOT NULL</td>\n</tr>\n<tr>\n<td>唯一</td>\n<td>UNIQUE</td>\n</tr>\n<tr>\n<td>逻辑条件</td>\n<td>CHECK</td>\n</tr>\n<tr>\n<td>默认值</td>\n<td>DEFAULT</td>\n</tr>\n</tbody></table>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table user(</span><br><span class=\"line\">\tid int primary key auto_increment,</span><br><span class=\"line\">\tname varchar(10) not null unique,</span><br><span class=\"line\">\tage int check(age &gt; 0 and age &lt; 120),</span><br><span class=\"line\">\tstatus char(1) default &apos;1&apos;,</span><br><span class=\"line\">\tgender char(1)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"外键约束\"><a href=\"#外键约束\" class=\"headerlink\" title=\"外键约束\"></a>外键约束</h3><p>添加外键：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE 表名(</span><br><span class=\"line\">\t字段名 字段类型,</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t[CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名)</span><br><span class=\"line\">);</span><br><span class=\"line\">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);</span><br><span class=\"line\"></span><br><span class=\"line\">-- 例子</span><br><span class=\"line\">alter table emp add constraint fk_emp_dept_id foreign key(dept_id) references dept(id);</span><br></pre></td></tr></table></figure>\n\n<p>删除外键：<br><code>ALTER TABLE 表名 DROP FOREIGN KEY 外键名;</code></p>\n<h4 id=\"删除-更新行为\"><a href=\"#删除-更新行为\" class=\"headerlink\" title=\"删除/更新行为\"></a>删除/更新行为</h4><table>\n<thead>\n<tr>\n<th>行为</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NO ACTION</td>\n<td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与RESTRICT一致）</td>\n</tr>\n<tr>\n<td>RESTRICT</td>\n<td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与NO ACTION一致）</td>\n</tr>\n<tr>\n<td>CASCADE</td>\n<td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除/更新外键在子表中的记录</td>\n</tr>\n<tr>\n<td>SET NULL</td>\n<td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（要求该外键允许为null）</td>\n</tr>\n<tr>\n<td>SET DEFAULT</td>\n<td>父表有变更时，子表将外键设为一个默认值（Innodb不支持）</td>\n</tr>\n</tbody></table>\n<p>更改删除/更新行为：<br><code>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为;</code></p>\n<h2 id=\"多表查询\"><a href=\"#多表查询\" class=\"headerlink\" title=\"多表查询\"></a>多表查询</h2><h3 id=\"多表关系\"><a href=\"#多表关系\" class=\"headerlink\" title=\"多表关系\"></a>多表关系</h3><ul>\n<li>一对多（多对一）</li>\n<li>多对多</li>\n<li>一对一</li>\n</ul>\n<h4 id=\"一对多\"><a href=\"#一对多\" class=\"headerlink\" title=\"一对多\"></a>一对多</h4><p>案例：部门与员工<br>关系：一个部门对应多个员工，一个员工对应一个部门<br>实现：在多的一方建立外键，指向一的一方的主键</p>\n<h4 id=\"多对多\"><a href=\"#多对多\" class=\"headerlink\" title=\"多对多\"></a>多对多</h4><p>案例：学生与课程<br>关系：一个学生可以选多门课程，一门课程也可以供多个学生选修<br>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p>\n<h4 id=\"一对一\"><a href=\"#一对一\" class=\"headerlink\" title=\"一对一\"></a>一对一</h4><p>案例：用户与用户详情<br>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率<br>实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）</p>\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><p>合并查询（笛卡尔积，会展示所有组合结果）：<br><code>select * from employee, dept;</code></p>\n<blockquote>\n<p>笛卡尔积：两个集合A集合和B集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）</p>\n</blockquote>\n<p>消除无效笛卡尔积：<br><code>select * from employee, dept where employee.dept = dept.id;</code></p>\n<h3 id=\"内连接查询\"><a href=\"#内连接查询\" class=\"headerlink\" title=\"内连接查询\"></a>内连接查询</h3><p>内连接查询的是两张表交集的部分</p>\n<p>隐式内连接：<br><code>SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;</code></p>\n<p>显式内连接：<br><code>SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;</code></p>\n<p>显式性能比隐式高</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询员工姓名，及关联的部门的名称</span><br><span class=\"line\">-- 隐式</span><br><span class=\"line\">select e.name, d.name from employee as e, dept as d where e.dept = d.id;</span><br><span class=\"line\">-- 显式</span><br><span class=\"line\">select e.name, d.name from employee as e inner join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"外连接查询\"><a href=\"#外连接查询\" class=\"headerlink\" title=\"外连接查询\"></a>外连接查询</h3><p>左外连接：<br>查询左表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;</code><br>相当于查询表1的所有数据，包含表1和表2交集部分数据</p>\n<p>右外连接：<br>查询右表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;</code></p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 左</span><br><span class=\"line\">select e.*, d.name from employee as e left outer join dept as d on e.dept = d.id;</span><br><span class=\"line\">select d.name, e.* from dept d left outer join emp e on e.dept = d.id;  -- 这条语句与下面的语句效果一样</span><br><span class=\"line\">-- 右</span><br><span class=\"line\">select d.name, e.* from employee as e right outer join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure>\n\n<p>左连接可以查询到没有dept的employee，右连接可以查询到没有employee的dept</p>\n<h3 id=\"自连接查询\"><a href=\"#自连接查询\" class=\"headerlink\" title=\"自连接查询\"></a>自连接查询</h3><p>当前表与自身的连接查询，自连接必须使用表别名</p>\n<p>语法：<br><code>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;</code></p>\n<p>自连接查询，可以是内连接查询，也可以是外连接查询</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询员工及其所属领导的名字</span><br><span class=\"line\">select a.name, b.name from employee a, employee b where a.manager = b.id;</span><br><span class=\"line\">-- 没有领导的也查询出来</span><br><span class=\"line\">select a.name, b.name from employee a left join employee b on a.manager = b.id;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"联合查询-union-union-all\"><a href=\"#联合查询-union-union-all\" class=\"headerlink\" title=\"联合查询 union, union all\"></a>联合查询 union, union all</h3><p>把多次查询的结果合并，形成一个新的查询集</p>\n<p>语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT 字段列表 FROM 表A ...</span><br><span class=\"line\">UNION [ALL]</span><br><span class=\"line\">SELECT 字段列表 FROM 表B ...</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意事项-7\"><a href=\"#注意事项-7\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><ul>\n<li>UNION ALL 会有重复结果，UNION 不会</li>\n<li>联合查询比使用or效率高，不会使索引失效</li>\n</ul>\n<h3 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h3><p>SQL语句中嵌套SELECT语句，称谓嵌套查询，又称子查询。<br><code>SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);</code><br><strong>子查询外部的语句可以是 INSERT / UPDATE / DELETE / SELECT 的任何一个</strong></p>\n<p>根据子查询结果可以分为：</p>\n<ul>\n<li>标量子查询（子查询结果为单个值）</li>\n<li>列子查询（子查询结果为一列）</li>\n<li>行子查询（子查询结果为一行）</li>\n<li>表子查询（子查询结果为多行多列）</li>\n</ul>\n<p>根据子查询位置可分为：</p>\n<ul>\n<li>WHERE 之后</li>\n<li>FROM 之后</li>\n<li>SELECT 之后</li>\n</ul>\n<h4 id=\"标量子查询\"><a href=\"#标量子查询\" class=\"headerlink\" title=\"标量子查询\"></a>标量子查询</h4><p>子查询返回的结果是单个值（数字、字符串、日期等）。<br>常用操作符：- &lt; &gt; &gt; &gt;= &lt; &lt;=</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询销售部所有员工</span><br><span class=\"line\">select id from dept where name = &apos;销售部&apos;;</span><br><span class=\"line\">-- 根据销售部部门ID，查询员工信息</span><br><span class=\"line\">select * from employee where dept = 4;</span><br><span class=\"line\">-- 合并（子查询）</span><br><span class=\"line\">select * from employee where dept = (select id from dept where name = &apos;销售部&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">-- 查询xxx入职之后的员工信息</span><br><span class=\"line\">select * from employee where entrydate &gt; (select entrydate from employee where name = &apos;xxx&apos;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"列子查询\"><a href=\"#列子查询\" class=\"headerlink\" title=\"列子查询\"></a>列子查询</h4><p>返回的结果是一列（可以是多行）。</p>\n<p>常用操作符：</p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IN</td>\n<td>在指定的集合范围内，多选一</td>\n</tr>\n<tr>\n<td>NOT IN</td>\n<td>不在指定的集合范围内</td>\n</tr>\n<tr>\n<td>ANY</td>\n<td>子查询返回列表中，有任意一个满足即可</td>\n</tr>\n<tr>\n<td>SOME</td>\n<td>与ANY等同，使用SOME的地方都可以使用ANY</td>\n</tr>\n<tr>\n<td>ALL</td>\n<td>子查询返回列表的所有值都必须满足</td>\n</tr>\n</tbody></table>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询销售部和市场部的所有员工信息</span><br><span class=\"line\">select * from employee where dept in (select id from dept where name = &apos;销售部&apos; or name = &apos;市场部&apos;);</span><br><span class=\"line\">-- 查询比财务部所有人工资都高的员工信息</span><br><span class=\"line\">select * from employee where salary &gt; all(select salary from employee where dept = (select id from dept where name = &apos;财务部&apos;));</span><br><span class=\"line\">-- 查询比研发部任意一人工资高的员工信息</span><br><span class=\"line\">select * from employee where salary &gt; any (select salary from employee where dept = (select id from dept where name = &apos;研发部&apos;));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"行子查询\"><a href=\"#行子查询\" class=\"headerlink\" title=\"行子查询\"></a>行子查询</h4><p>返回的结果是一行（可以是多列）。<br>常用操作符：=, &lt;, &gt;, IN, NOT IN</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询与xxx的薪资及直属领导相同的员工信息</span><br><span class=\"line\">select * from employee where (salary, manager) = (12500, 1);</span><br><span class=\"line\">select * from employee where (salary, manager) = (select salary, manager from employee where name = &apos;xxx&apos;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"表子查询\"><a href=\"#表子查询\" class=\"headerlink\" title=\"表子查询\"></a>表子查询</h4><p>返回的结果是多行多列<br>常用操作符：IN</p>\n<p>例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询与xxx1，xxx2的职位和薪资相同的员工</span><br><span class=\"line\">select * from employee where (job, salary) in (select job, salary from employee where name = &apos;xxx1&apos; or name = &apos;xxx2&apos;);</span><br><span class=\"line\">-- 查询入职日期是2006-01-01之后的员工，及其部门信息</span><br><span class=\"line\">select e.*, d.* from (select * from employee where entrydate &gt; &apos;2006-01-01&apos;) as e left join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2><p>事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p>\n<p>基本操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 1. 查询张三账户余额</span><br><span class=\"line\">select * from account where name = &apos;张三&apos;;</span><br><span class=\"line\">-- 2. 将张三账户余额-1000</span><br><span class=\"line\">update account set money = money - 1000 where name = &apos;张三&apos;;</span><br><span class=\"line\">-- 此语句出错后张三钱减少但是李四钱没有增加</span><br><span class=\"line\">模拟sql语句错误</span><br><span class=\"line\">-- 3. 将李四账户余额+1000</span><br><span class=\"line\">update account set money = money + 1000 where name = &apos;李四&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 查看事务提交方式</span><br><span class=\"line\">SELECT @@AUTOCOMMIT;</span><br><span class=\"line\">-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效</span><br><span class=\"line\">SET @@AUTOCOMMIT = 0;</span><br><span class=\"line\">-- 提交事务</span><br><span class=\"line\">COMMIT;</span><br><span class=\"line\">-- 回滚事务</span><br><span class=\"line\">ROLLBACK;</span><br><span class=\"line\"></span><br><span class=\"line\">-- 设置手动提交后上面代码改为：</span><br><span class=\"line\">select * from account where name = &apos;张三&apos;;</span><br><span class=\"line\">update account set money = money - 1000 where name = &apos;张三&apos;;</span><br><span class=\"line\">update account set money = money + 1000 where name = &apos;李四&apos;;</span><br><span class=\"line\">commit;</span><br></pre></td></tr></table></figure>\n\n<p>操作方式二：</p>\n<p>开启事务：<br><code>START TRANSACTION 或 BEGIN TRANSACTION;</code><br>提交事务：<br><code>COMMIT;</code><br>回滚事务：<br><code>ROLLBACK;</code></p>\n<p>操作实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start transaction;</span><br><span class=\"line\">select * from account where name = &apos;张三&apos;;</span><br><span class=\"line\">update account set money = money - 1000 where name = &apos;张三&apos;;</span><br><span class=\"line\">update account set money = money + 1000 where name = &apos;李四&apos;;</span><br><span class=\"line\">commit;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四大特性ACID\"><a href=\"#四大特性ACID\" class=\"headerlink\" title=\"四大特性ACID\"></a>四大特性ACID</h3><ul>\n<li>原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败</li>\n<li>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</li>\n<li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li>\n<li>持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li>\n</ul>\n<h3 id=\"并发事务\"><a href=\"#并发事务\" class=\"headerlink\" title=\"并发事务\"></a>并发事务</h3><table>\n<thead>\n<tr>\n<th>问题</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>脏读</td>\n<td>一个事务读到另一个事务还没提交的数据</td>\n</tr>\n<tr>\n<td>不可重复读</td>\n<td>一个事务先后读取同一条记录，但两次读取的数据不同</td>\n</tr>\n<tr>\n<td>幻读</td>\n<td>一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>这三个问题的详细演示：<a href=\"https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd</a> </p>\n</blockquote>\n<p>并发事务隔离级别：</p>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Read uncommitted</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>Read committed</td>\n<td>×</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>Repeatable Read(默认)</td>\n<td>×</td>\n<td>×</td>\n<td>√</td>\n</tr>\n<tr>\n<td>Serializable</td>\n<td>×</td>\n<td>×</td>\n<td>×</td>\n</tr>\n</tbody></table>\n<ul>\n<li>√表示在当前隔离级别下该问题会出现</li>\n<li>Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差</li>\n</ul>\n<p>查看事务隔离级别：<br><code>SELECT @@TRANSACTION_ISOLATION;</code><br>设置事务隔离级别：<br><code>SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE };</code><br>SESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效</p>\n<h1 id=\"进阶篇\"><a href=\"#进阶篇\" class=\"headerlink\" title=\"进阶篇\"></a>进阶篇</h1><h2 id=\"存储引擎\"><a href=\"#存储引擎\" class=\"headerlink\" title=\"存储引擎\"></a>存储引擎</h2><p>MySQL体系结构：</p>\n<p><img src=\"https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_20220315034329549927.png\" alt=\"结构图\" title=\"结构图\"><br><img src=\"https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%B1%82%E7%BA%A7%E5%90%AB%E4%B9%89_20220315034359342837.png\" alt=\"层级描述\" title=\"层级描述\"></p>\n<p>存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。<br>默认存储引擎是InnoDB。</p>\n<p>相关操作：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 查询建表语句</span><br><span class=\"line\">show create table account;</span><br><span class=\"line\">-- 建表时指定存储引擎</span><br><span class=\"line\">CREATE TABLE 表名(</span><br><span class=\"line\">\t...</span><br><span class=\"line\">) ENGINE=INNODB;</span><br><span class=\"line\">-- 查看当前数据库支持的存储引擎</span><br><span class=\"line\">show engines;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h3><p>InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。</p>\n<p>特点：</p>\n<ul>\n<li>DML 操作遵循 ACID 模型，支持<strong>事务</strong></li>\n<li><strong>行级锁</strong>，提高并发访问性能</li>\n<li>支持<strong>外键</strong>约束，保证数据的完整性和正确性</li>\n</ul>\n<p>文件：</p>\n<ul>\n<li>xxx.ibd: xxx代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。</li>\n</ul>\n<p>参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间</p>\n<p>知识点：</p>\n<p>查看 Mysql 变量：<br><code>show variables like &#39;innodb_file_per_table&#39;;</code></p>\n<p>从idb文件提取表结构数据：<br>（在cmd运行）<br><code>ibd2sdi xxx.ibd</code></p>\n<p>InnoDB 逻辑存储结构：<br><img src=\"https://dhc.pythonanywhere.com/media/editor/%E9%80%BB%E8%BE%91%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84_20220316030616590001.png\" alt=\"InnoDB逻辑存储结构\" title=\"InnoDB逻辑存储结构\"></p>\n<h3 id=\"MyISAM\"><a href=\"#MyISAM\" class=\"headerlink\" title=\"MyISAM\"></a>MyISAM</h3><p>MyISAM 是 MySQL 早期的默认存储引擎。</p>\n<p>特点：</p>\n<ul>\n<li>不支持事务，不支持外键</li>\n<li>支持表锁，不支持行锁</li>\n<li>访问速度快</li>\n</ul>\n<p>文件：</p>\n<ul>\n<li>xxx.sdi: 存储表结构信息</li>\n<li>xxx.MYD: 存储数据</li>\n<li>xxx.MYI: 存储索引</li>\n</ul>\n<h3 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory\"></a>Memory</h3><p>Memory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。</p>\n<p>特点：</p>\n<ul>\n<li>存放在内存中，速度快</li>\n<li>hash索引（默认）</li>\n</ul>\n<p>文件：</p>\n<ul>\n<li>xxx.sdi: 存储表结构信息</li>\n</ul>\n<h3 id=\"存储引擎特点\"><a href=\"#存储引擎特点\" class=\"headerlink\" title=\"存储引擎特点\"></a>存储引擎特点</h3><table>\n<thead>\n<tr>\n<th>特点</th>\n<th>InnoDB</th>\n<th>MyISAM</th>\n<th>Memory</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>存储限制</td>\n<td>64TB</td>\n<td>有</td>\n<td>有</td>\n</tr>\n<tr>\n<td>事务安全</td>\n<td>支持</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>锁机制</td>\n<td>行锁</td>\n<td>表锁</td>\n<td>表锁</td>\n</tr>\n<tr>\n<td>B+tree索引</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>Hash索引</td>\n<td>-</td>\n<td>-</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>全文索引</td>\n<td>支持（5.6版本之后）</td>\n<td>支持</td>\n<td>-</td>\n</tr>\n<tr>\n<td>空间使用</td>\n<td>高</td>\n<td>低</td>\n<td>N/A</td>\n</tr>\n<tr>\n<td>内存使用</td>\n<td>高</td>\n<td>低</td>\n<td>中等</td>\n</tr>\n<tr>\n<td>批量插入速度</td>\n<td>低</td>\n<td>高</td>\n<td>高</td>\n</tr>\n<tr>\n<td>支持外键</td>\n<td>支持</td>\n<td>-</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<h3 id=\"存储引擎的选择\"><a href=\"#存储引擎的选择\" class=\"headerlink\" title=\"存储引擎的选择\"></a>存储引擎的选择</h3><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。</p>\n<ul>\n<li>InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择</li>\n<li>MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。</li>\n<li>Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li>\n</ul>\n<p>电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。</p>\n<h2 id=\"性能分析\"><a href=\"#性能分析\" class=\"headerlink\" title=\"性能分析\"></a>性能分析</h2><h3 id=\"查看执行频次\"><a href=\"#查看执行频次\" class=\"headerlink\" title=\"查看执行频次\"></a>查看执行频次</h3><p>查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：<br><code>SHOW GLOBAL STATUS LIKE &#39;Com_______&#39;;</code> 或者 <code>SHOW SESSION STATUS LIKE &#39;Com_______&#39;;</code><br>例：<code>show global status like &#39;Com_______&#39;</code></p>\n<h3 id=\"慢查询日志\"><a href=\"#慢查询日志\" class=\"headerlink\" title=\"慢查询日志\"></a>慢查询日志</h3><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。<br>MySQL的慢查询日志默认没有开启，需要在MySQL的配置文件（/etc/my.cnf）中配置如下信息：<br>    # 开启慢查询日志开关<br>    slow_query_log=1<br>    # 设置慢查询日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志<br>    long_query_time=2</p>\n<p>更改后记得重启MySQL服务，日志文件位置：/var/lib/mysql/localhost-slow.log</p>\n<p>查看慢查询日志开关状态：<br><code>show variables like &#39;slow_query_log&#39;;</code></p>\n<h3 id=\"profile\"><a href=\"#profile\" class=\"headerlink\" title=\"profile\"></a>profile</h3><p>show profile 能在做SQL优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：<br><code>SELECT @@have_profiling;</code><br>profiling 默认关闭，可以通过set语句在session/global级别开启 profiling：<br><code>SET profiling = 1;</code><br>查看所有语句的耗时：<br><code>show profiles;</code><br>查看指定query_id的SQL语句各个阶段的耗时：<br><code>show profile for query query_id;</code><br>查看指定query_id的SQL语句CPU的使用情况<br><code>show profile cpu for query query_id;</code></p>\n<h3 id=\"explain\"><a href=\"#explain\" class=\"headerlink\" title=\"explain\"></a>explain</h3><p>EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。<br>语法：<br>    # 直接在select语句之前加上关键字 explain / desc<br>    EXPLAIN SELECT 字段列表 FROM 表名 HWERE 条件;</p>\n<p>EXPLAIN 各字段含义：</p>\n<ul>\n<li>id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id相同，执行顺序从上到下；id不同，值越大越先执行）</li>\n<li>select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（SELECT/WHERE之后包含了子查询）等</li>\n<li>type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all</li>\n<li>possible_key：可能应用在这张表上的索引，一个或多个</li>\n<li>Key：实际使用的索引，如果为 NULL，则没有使用索引</li>\n<li>Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</li>\n<li>rows：MySQL认为必须要执行的行数，在InnoDB引擎的表中，是一个估计值，可能并不总是准确的</li>\n<li>filtered：表示返回结果的行数占需读取行数的百分比，filtered的值越大越好</li>\n</ul>\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><p>索引是帮助 MySQL <strong>高效获取数据</strong>的<strong>数据结构（有序）</strong>。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。</p>\n<p>优缺点：</p>\n<p>优点：</p>\n<ul>\n<li>提高数据检索效率，降低数据库的IO成本</li>\n<li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>索引列也是要占用空间的</li>\n<li>索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE</li>\n</ul>\n<h3 id=\"索引结构\"><a href=\"#索引结构\" class=\"headerlink\" title=\"索引结构\"></a>索引结构</h3><table>\n<thead>\n<tr>\n<th>索引结构</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>B+Tree</td>\n<td>最常见的索引类型，大部分引擎都支持B+树索引</td>\n</tr>\n<tr>\n<td>Hash</td>\n<td>底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询</td>\n</tr>\n<tr>\n<td>R-Tree(空间索引)</td>\n<td>空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td>\n</tr>\n<tr>\n<td>Full-Text(全文索引)</td>\n<td>是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>索引</th>\n<th>InnoDB</th>\n<th>MyISAM</th>\n<th>Memory</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>B+Tree索引</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>Hash索引</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>R-Tree索引</td>\n<td>不支持</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>Full-text</td>\n<td>5.6版本后支持</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n</tbody></table>\n<h4 id=\"B-Tree\"><a href=\"#B-Tree\" class=\"headerlink\" title=\"B-Tree\"></a>B-Tree</h4><p><img src=\"https://dhc.pythonanywhere.com/media/editor/%E4%BA%8C%E5%8F%89%E6%A0%91_20220316153214227108.png\" alt=\"二叉树\" title=\"二叉树\"></p>\n<p>二叉树的缺点可以用红黑树来解决：<br><img src=\"https://dhc.pythonanywhere.com/media/editor/%E7%BA%A2%E9%BB%91%E6%A0%91_20220316163142686602.png\" alt=\"红黑树\" title=\"红黑树\"><br>红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。</p>\n<p>为了解决上述问题，可以使用 B-Tree 结构。<br>B-Tree (多路平衡查找树) 以一棵最大度数（max-degree，指一个节点的子节点个数）为5（5阶）的 b-tree 为例（每个节点最多存储4个key，5个指针）</p>\n<p><img src=\"https://dhc.pythonanywhere.com/media/editor/B-Tree%E7%BB%93%E6%9E%84_20220316163813441163.png\" alt=\"B-Tree结构\" title=\"B-Tree结构\"></p>\n<blockquote>\n<p>B-Tree 的数据插入过程动画参照：<a href=\"https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68</a><br>演示地址：<a href=\"https://www.cs.usfca.edu/~galles/visualization/BTree.html\" target=\"_blank\" rel=\"noopener\">https://www.cs.usfca.edu/~galles/visualization/BTree.html</a></p>\n</blockquote>\n<h4 id=\"B-Tree-1\"><a href=\"#B-Tree-1\" class=\"headerlink\" title=\"B+Tree\"></a>B+Tree</h4><p>结构图：</p>\n<p><img src=\"https://dhc.pythonanywhere.com/media/editor/B+Tree%E7%BB%93%E6%9E%84%E5%9B%BE_20220316170700591277.png\" alt=\"B+Tree结构图\" title=\"B+Tree结构图\"></p>\n<blockquote>\n<p>演示地址：<a href=\"https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html\" target=\"_blank\" rel=\"noopener\">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</a></p>\n</blockquote>\n<p>与 B-Tree 的区别：</p>\n<ul>\n<li>所有的数据都会出现在叶子节点</li>\n<li>叶子节点形成一个单向链表</li>\n</ul>\n<p>MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。</p>\n<p><img src=\"https://dhc.pythonanywhere.com/media/editor/%E7%BB%93%E6%9E%84%E5%9B%BE_20220316171730865611.png\" alt=\"MySQL B+Tree 结构图\" title=\"MySQL B+Tree 结构图\"></p>\n<h4 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h4><p>哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。<br>如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可以通过链表来解决。</p>\n<p><img src=\"https://dhc.pythonanywhere.com/media/editor/Hash%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86%E5%9B%BE_20220317143226150679.png\" alt=\"Hash索引原理图\" title=\"Hash索引原理图\"></p>\n<p>特点：</p>\n<ul>\n<li>Hash索引只能用于对等比较（=、in），不支持范围查询（betwwn、&gt;、&lt;、…）</li>\n<li>无法利用索引完成排序操作</li>\n<li>查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引</li>\n</ul>\n<p>存储引擎支持：</p>\n<ul>\n<li>Memory</li>\n<li>InnoDB: 具有自适应hash功能，hash索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的</li>\n</ul>\n<h4 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h4><ol>\n<li>为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？</li>\n</ol>\n<ul>\n<li>相对于二叉树，层级更少，搜索效率高</li>\n<li>对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li>\n<li>相对于 Hash 索引，B+Tree 支持范围匹配及排序操作</li>\n</ul>\n<h3 id=\"索引分类\"><a href=\"#索引分类\" class=\"headerlink\" title=\"索引分类\"></a>索引分类</h3><table>\n<thead>\n<tr>\n<th>分类</th>\n<th>含义</th>\n<th>特点</th>\n<th>关键字</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>主键索引</td>\n<td>针对于表中主键创建的索引</td>\n<td>默认自动创建，只能有一个</td>\n<td>PRIMARY</td>\n</tr>\n<tr>\n<td>唯一索引</td>\n<td>避免同一个表中某数据列中的值重复</td>\n<td>可以有多个</td>\n<td>UNIQUE</td>\n</tr>\n<tr>\n<td>常规索引</td>\n<td>快速定位特定数据</td>\n<td>可以有多个</td>\n<td></td>\n</tr>\n<tr>\n<td>全文索引</td>\n<td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td>\n<td>可以有多个</td>\n<td>FULLTEXT</td>\n</tr>\n</tbody></table>\n<p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：</p>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>含义</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>聚集索引(Clustered Index)</td>\n<td>将数据存储与索引放一块，索引结构的叶子节点保存了行数据</td>\n<td>必须有，而且只有一个</td>\n</tr>\n<tr>\n<td>二级索引(Secondary Index)</td>\n<td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td>\n<td>可以存在多个</td>\n</tr>\n</tbody></table>\n<p>演示图：</p>\n<p><img src=\"https://dhc.pythonanywhere.com/media/editor/%E5%8E%9F%E7%90%86%E5%9B%BE_20220318194454880073.png\" alt=\"大致原理\" title=\"大致原理\"><br><img src=\"https://dhc.pythonanywhere.com/media/editor/%E6%BC%94%E7%A4%BA%E5%9B%BE_20220319215403721066.png\" alt=\"演示图\" title=\"演示图\"></p>\n<p>聚集索引选取规则：</p>\n<ul>\n<li>如果存在主键，主键索引就是聚集索引</li>\n<li>如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引</li>\n<li>如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引</li>\n</ul>\n<h4 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h4><p>1. 以下 SQL 语句，哪个执行效率高？为什么？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select * from user where id = 10;</span><br><span class=\"line\">select * from user where name = &apos;Arm&apos;;</span><br><span class=\"line\">-- 备注：id为主键，name字段创建的有索引</span><br></pre></td></tr></table></figure>\n\n<p>答：第一条语句，因为第二条需要回表查询，相当于两个步骤。</p>\n<p>2. InnoDB 主键索引的 B+Tree 高度为多少？</p>\n<p>答：假设一行数据大小为1k，一页中可以存储16行这样的数据。InnoDB 的指针占用6个字节的空间，主键假设为bigint，占用字节数为8.<br>可得公式：<code>n * 8 + (n + 1) * 6 = 16 * 1024</code>，其中 8 表示 bigint 占用的字节数，n 表示当前节点存储的key的数量，(n + 1) 表示指针数量（比key多一个）。算出n约为1170。</p>\n<p>如果树的高度为2，那么他能存储的数据量大概为：<code>1171 * 16 = 18736</code>；<br>如果树的高度为3，那么他能存储的数据量大概为：<code>1171 * 1171 * 16 = 21939856</code>。</p>\n<p>另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>创建索引：<br><code>CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...);</code><br>如果不加 CREATE 后面不加索引类型参数，则创建的是常规索引</p>\n<p>查看索引：<br><code>SHOW INDEX FROM table_name;</code></p>\n<p>删除索引：<br><code>DROP INDEX index_name ON table_name;</code></p>\n<p>案例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引</span><br><span class=\"line\">create index idx_user_name on tb_user(name);</span><br><span class=\"line\">-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引</span><br><span class=\"line\">create unique index idx_user_phone on tb_user (phone);</span><br><span class=\"line\">-- 为profession, age, status创建联合索引</span><br><span class=\"line\">create index idx_user_pro_age_stat on tb_user(profession, age, status);</span><br><span class=\"line\">-- 为email建立合适的索引来提升查询效率</span><br><span class=\"line\">create index idx_user_email on tb_user(email);</span><br><span class=\"line\"></span><br><span class=\"line\">-- 删除索引</span><br><span class=\"line\">drop index idx_user_email on tb_user;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用规则\"><a href=\"#使用规则\" class=\"headerlink\" title=\"使用规则\"></a>使用规则</h3><h4 id=\"最左前缀法则\"><a href=\"#最左前缀法则\" class=\"headerlink\" title=\"最左前缀法则\"></a>最左前缀法则</h4><p>如果索引关联了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。<br>如果跳跃某一列，索引将部分失效（后面的字段索引失效）。</p>\n<p>联合索引中，出现范围查询（&lt;, &gt;），范围查询右侧的列索引失效。可以用&gt;=或者&lt;=来规避索引失效问题。</p>\n<h4 id=\"索引失效情况\"><a href=\"#索引失效情况\" class=\"headerlink\" title=\"索引失效情况\"></a>索引失效情况</h4><ol>\n<li>在索引列上进行运算操作，索引将失效。如：<code>explain select * from tb_user where substring(phone, 10, 2) = &#39;15&#39;;</code></li>\n<li>字符串类型字段使用时，不加引号，索引将失效。如：<code>explain select * from tb_user where phone = 17799990015;</code>，此处phone的值没有加引号</li>\n<li>模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如：<code>explain select * from tb_user where profession like &#39;%工程&#39;;</code>，前后都有 % 也会失效。</li>\n<li>用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。</li>\n<li>如果 MySQL 评估使用索引比全表更慢，则不使用索引。</li>\n</ol>\n<h4 id=\"SQL-提示\"><a href=\"#SQL-提示\" class=\"headerlink\" title=\"SQL 提示\"></a>SQL 提示</h4><p>是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</p>\n<p>例如，使用索引：<br><code>explain select * from tb_user use index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>不使用哪个索引：<br><code>explain select * from tb_user ignore index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>必须使用哪个索引：<br><code>explain select * from tb_user force index(idx_user_pro) where profession=&quot;软件工程&quot;;</code></p>\n<p>use 是建议，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，force就是无论如何都强制使用该索引。</p>\n<h4 id=\"覆盖索引-amp-回表查询\"><a href=\"#覆盖索引-amp-回表查询\" class=\"headerlink\" title=\"覆盖索引&amp;回表查询\"></a>覆盖索引&amp;回表查询</h4><p>尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。</p>\n<p>explain 中 extra 字段含义：<br><code>using index condition</code>：查找使用了索引，但是需要回表查询数据<br><code>using where; using index;</code>：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询</p>\n<p>如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是select *；如果在辅助索引中找聚集索引，如<code>select id, name from xxx where name=&#39;xxx&#39;;</code>，也只需要通过辅助索引(name)查找到对应的id，返回name和name索引对应的id即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如<code>select id, name, gender from xxx where name=&#39;xxx&#39;;</code></p>\n<p>所以尽量不要用<code>select *</code>，容易出现回表查询，降低效率，除非有联合索引包含了所有字段</p>\n<p>面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下SQL语句进行优化，该如何进行才是最优方案：<br><code>select id, username, password from tb_user where username=&#39;itcast&#39;;</code></p>\n<p>解：给username和password字段建立联合索引，则不需要回表查询，直接覆盖索引</p>\n<h4 id=\"前缀索引\"><a href=\"#前缀索引\" class=\"headerlink\" title=\"前缀索引\"></a>前缀索引</h4><p>当字段类型为字符串（varchar, text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</p>\n<p>语法：<code>create index idx_xxxx on table_name(columnn(n));</code><br>前缀长度：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。<br>求选择性公式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select count(distinct email) / count(*) from tb_user;</span><br><span class=\"line\">select count(distinct substring(email, 1, 5)) / count(*) from tb_user;</span><br></pre></td></tr></table></figure>\n\n<p>show index 里面的sub_part可以看到接取的长度</p>\n<h4 id=\"单列索引-amp-联合索引\"><a href=\"#单列索引-amp-联合索引\" class=\"headerlink\" title=\"单列索引&amp;联合索引\"></a>单列索引&amp;联合索引</h4><p>单列索引：即一个索引只包含单个列<br>联合索引：即一个索引包含了多个列<br>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。</p>\n<p>单列索引情况：<br><code>explain select id, phone, name from tb_user where phone = &#39;17799990010&#39; and name = &#39;韩信&#39;;</code><br>这句只会用到phone索引字段</p>\n<h5 id=\"注意事项-8\"><a href=\"#注意事项-8\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h5><ul>\n<li>多条件联合查询时，MySQL优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询</li>\n</ul>\n<h3 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h3><ol>\n<li>针对于数据量较大，且查询比较频繁的表建立索引</li>\n<li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li>\n<li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li>\n<li>如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引</li>\n<li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li>\n<li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率</li>\n<li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询</li>\n</ol>\n<h2 id=\"SQL-优化\"><a href=\"#SQL-优化\" class=\"headerlink\" title=\"SQL 优化\"></a>SQL 优化</h2><h3 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h3><p>普通插入：</p>\n<ol>\n<li>采用批量插入（一次插入的数据不建议超过1000条）</li>\n<li>手动提交事务</li>\n<li>主键顺序插入</li>\n</ol>\n<p>大批量插入：<br>如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令插入。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 客户端连接服务端时，加上参数 --local-infile（这一行在bash/cmd界面输入）</span><br><span class=\"line\">mysql --local-infile -u root -p</span><br><span class=\"line\"># 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关</span><br><span class=\"line\">set global local_infile = 1;</span><br><span class=\"line\">select @@local_infile;</span><br><span class=\"line\"># 执行load指令将准备好的数据，加载到表结构中</span><br><span class=\"line\">load data local infile &apos;/root/sql1.log&apos; into table &apos;tb_user&apos; fields terminated by &apos;,&apos; lines terminated by &apos;\\n&apos;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"主键优化\"><a href=\"#主键优化\" class=\"headerlink\" title=\"主键优化\"></a>主键优化</h3><p>数据组织方式：在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（Index organized table, IOT）</p>\n<p>页分裂：页可以为空，也可以填充一般，也可以填充100%，每个页包含了2-N行数据（如果一行数据过大，会行溢出），根据主键排列。<br>页合并：当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录到达 MERGE_THRESHOLD（默认为页的50%），InnoDB会开始寻找最靠近的页（前后）看看是否可以将这两个页合并以优化空间使用。</p>\n<p>MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或创建索引时指定</p>\n<blockquote>\n<p>文字说明不够清晰明了，具体可以看视频里的PPT演示过程：<a href=\"https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90\" target=\"_blank\" rel=\"noopener\">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90</a></p>\n</blockquote>\n<p>主键设计原则：</p>\n<ul>\n<li>满足业务需求的情况下，尽量降低主键的长度</li>\n<li>插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键</li>\n<li>尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号</li>\n<li>业务操作时，避免对主键的修改</li>\n</ul>\n<h3 id=\"order-by优化\"><a href=\"#order-by优化\" class=\"headerlink\" title=\"order by优化\"></a>order by优化</h3><ol>\n<li>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序</li>\n<li>Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</li>\n</ol>\n<p>如果order by字段全部使用升序排序或者降序排序，则都会走索引，但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain的extra信息显示的是<code>Using index, Using filesort</code>，如果要优化掉Using filesort，则需要另外再创建一个索引，如：<code>create index idx_user_age_phone_ad on tb_user(age asc, phone desc);</code>，此时使用<code>select id, age, phone from tb_user order by age asc, phone desc;</code>会全部走索引</p>\n<p>总结：</p>\n<ul>\n<li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li>\n<li>尽量使用覆盖索引</li>\n<li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC/DESC）</li>\n<li>如果不可避免出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认256k）</li>\n</ul>\n<h3 id=\"group-by优化\"><a href=\"#group-by优化\" class=\"headerlink\" title=\"group by优化\"></a>group by优化</h3><ul>\n<li>在分组操作时，可以通过索引来提高效率</li>\n<li>分组操作时，索引的使用也是满足最左前缀法则的</li>\n</ul>\n<p>如索引为<code>idx_user_pro_age_stat</code>，则句式可以是<code>select ... where profession order by age</code>，这样也符合最左前缀法则</p>\n<h3 id=\"limit优化\"><a href=\"#limit优化\" class=\"headerlink\" title=\"limit优化\"></a>limit优化</h3><p>常见的问题如<code>limit 2000000, 10</code>，此时需要 MySQL 排序前2000000条记录，但仅仅返回2000000 - 2000010的记录，其他记录丢弃，查询排序的代价非常大。<br>优化方案：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化</p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-- 此语句耗时很长</span><br><span class=\"line\">select * from tb_sku limit 9000000, 10;</span><br><span class=\"line\">-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询</span><br><span class=\"line\">select id from tb_sku order by id limit 9000000, 10;</span><br><span class=\"line\">-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit</span><br><span class=\"line\">-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);</span><br><span class=\"line\">-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度</span><br><span class=\"line\">select * from tb_sku as s, (select id from tb_sku order by id limit 9000000, 10) as a where s.id = a.id;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"count优化\"><a href=\"#count优化\" class=\"headerlink\" title=\"count优化\"></a>count优化</h3><p>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高（前提是不适用where）；<br>InnoDB 在执行 count(*) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。<br>优化方案：自己计数，如创建key-value表存储在内存或硬盘，或者是用redis</p>\n<p>count的几种用法：</p>\n<ul>\n<li>如果count函数的参数（count里面写的那个字段）不是NULL（字段值不为NULL），累计值就加一，最后返回累计值</li>\n<li>用法：count(*)、count(主键)、count(字段)、count(1)</li>\n<li>count(主键)跟count(*)一样，因为主键不能为空；count(字段)只计算字段值不为NULL的行；count(1)引擎会为每行添加一个1，然后就count这个1，返回结果也跟count(*)一样；count(null)返回0</li>\n</ul>\n<p>各种用法的性能：</p>\n<ul>\n<li>count(主键)：InnoDB引擎会遍历整张表，把每行的主键id值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）</li>\n<li>count(字段)：没有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加；有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加</li>\n<li>count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加</li>\n<li>count(*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加</li>\n</ul>\n<p>按效率排序：count(字段) &lt; count(主键) &lt; count(1) &lt; count(*)，所以尽量使用 count(*)</p>\n<h3 id=\"update优化（避免行锁升级为表锁）\"><a href=\"#update优化（避免行锁升级为表锁）\" class=\"headerlink\" title=\"update优化（避免行锁升级为表锁）\"></a>update优化（避免行锁升级为表锁）</h3><p>InnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。</p>\n<p>如以下两条语句：<br><code>update student set no = &#39;123&#39; where id = 1;</code>，这句由于id有主键索引，所以只会锁这一行；<br><code>update student set no = &#39;123&#39; where name = &#39;test&#39;;</code>，这句由于name没有索引，所以会把整张表都锁住进行数据更新，解决方法是给name字段添加索引</p>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><h2 id=\"整型\"><a href=\"#整型\" class=\"headerlink\" title=\"整型\"></a>整型</h2><table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>取值范围</th>\n<th>大小</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>TINYINT</td>\n<td>-128〜127</td>\n<td>1个字节</td>\n</tr>\n<tr>\n<td>SMALLINT</td>\n<td>-32768〜32767</td>\n<td>2个宇节</td>\n</tr>\n<tr>\n<td>MEDIUMINT</td>\n<td>-8388608〜8388607</td>\n<td>3个字节</td>\n</tr>\n<tr>\n<td>INT (INTEGHR)</td>\n<td>-2147483648〜2147483647</td>\n<td>4个字节</td>\n</tr>\n<tr>\n<td>BIGINT</td>\n<td>-9223372036854775808〜9223372036854775807</td>\n<td>8个字节</td>\n</tr>\n</tbody></table>\n<p>无符号在数据类型后加 unsigned 关键字。</p>\n<h2 id=\"浮点型\"><a href=\"#浮点型\" class=\"headerlink\" title=\"浮点型\"></a>浮点型</h2><table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>FLOAT</td>\n<td>单精度浮点数</td>\n<td>4 个字节</td>\n</tr>\n<tr>\n<td>DOUBLE</td>\n<td>双精度浮点数</td>\n<td>8 个字节</td>\n</tr>\n<tr>\n<td>DECIMAL (M, D)，DEC</td>\n<td>压缩的“严格”定点数</td>\n<td>M+2 个字节</td>\n</tr>\n</tbody></table>\n<h2 id=\"日期和时间\"><a href=\"#日期和时间\" class=\"headerlink\" title=\"日期和时间\"></a>日期和时间</h2><table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>日期格式</th>\n<th>日期范围</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>YEAR</td>\n<td>YYYY</td>\n<td>1901 ~ 2155</td>\n<td>1 个字节</td>\n</tr>\n<tr>\n<td>TIME</td>\n<td>HH:MM:SS</td>\n<td>-838:59:59 ~ 838:59:59</td>\n<td>3 个字节</td>\n</tr>\n<tr>\n<td>DATE</td>\n<td>YYYY-MM-DD</td>\n<td>1000-01-01 ~ 9999-12-3</td>\n<td>3 个字节</td>\n</tr>\n<tr>\n<td>DATETIME</td>\n<td>YYYY-MM-DD HH:MM:SS</td>\n<td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td>\n<td>8 个字节</td>\n</tr>\n<tr>\n<td>TIMESTAMP</td>\n<td>YYYY-MM-DD HH:MM:SS</td>\n<td>1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td>\n<td>4 个字节</td>\n</tr>\n</tbody></table>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CHAR(M)</td>\n<td>固定长度非二进制字符串</td>\n<td>M 字节，1&lt;=M&lt;=255</td>\n</tr>\n<tr>\n<td>VARCHAR(M)</td>\n<td>变长非二进制字符串</td>\n<td>L+1字节，在此，L&lt; = M和 1&lt;=M&lt;=255</td>\n</tr>\n<tr>\n<td>TINYTEXT</td>\n<td>非常小的非二进制字符串</td>\n<td>L+1字节，在此，L&lt;2^8</td>\n</tr>\n<tr>\n<td>TEXT</td>\n<td>小的非二进制字符串</td>\n<td>L+2字节，在此，L&lt;2^16</td>\n</tr>\n<tr>\n<td>MEDIUMTEXT</td>\n<td>中等大小的非二进制字符串</td>\n<td>L+3字节，在此，L&lt;2^24</td>\n</tr>\n<tr>\n<td>LONGTEXT</td>\n<td>大的非二进制字符串</td>\n<td>L+4字节，在此，L&lt;2^32</td>\n</tr>\n<tr>\n<td>ENUM</td>\n<td>枚举类型，只能有一个枚举字符串值</td>\n<td>1或2个字节，取决于枚举值的数目 (最大值为65535)</td>\n</tr>\n<tr>\n<td>SET</td>\n<td>一个设置，字符串对象可以有零个或 多个SET成员</td>\n<td>1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员）</td>\n</tr>\n</tbody></table>\n<h2 id=\"二进制类型\"><a href=\"#二进制类型\" class=\"headerlink\" title=\"二进制类型\"></a>二进制类型</h2><table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BIT(M)</td>\n<td>位字段类型</td>\n<td>大约 (M+7)/8 字节</td>\n</tr>\n<tr>\n<td>BINARY(M)</td>\n<td>固定长度二进制字符串</td>\n<td>M 字节</td>\n</tr>\n<tr>\n<td>VARBINARY (M)</td>\n<td>可变长度二进制字符串</td>\n<td>M+1 字节</td>\n</tr>\n<tr>\n<td>TINYBLOB (M)</td>\n<td>非常小的BLOB</td>\n<td>L+1 字节，在此，L&lt;2^8</td>\n</tr>\n<tr>\n<td>BLOB (M)</td>\n<td>小 BLOB</td>\n<td>L+2 字节，在此，L&lt;2^16</td>\n</tr>\n<tr>\n<td>MEDIUMBLOB (M)</td>\n<td>中等大小的BLOB</td>\n<td>L+3 字节，在此，L&lt;2^24</td>\n</tr>\n<tr>\n<td>LONGBLOB (M)</td>\n<td>非常大的BLOB</td>\n<td>L+4 字节，在此，L&lt;2^32</td>\n</tr>\n</tbody></table>\n<h1 id=\"权限一览表\"><a href=\"#权限一览表\" class=\"headerlink\" title=\"权限一览表\"></a>权限一览表</h1><blockquote>\n<p>具体权限的作用详见<a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html\" title=\"官方文档\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n</blockquote>\n<p>GRANT 和 REVOKE 允许的静态权限</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Privilege</th>\n<th align=\"left\">Grant Table Column</th>\n<th align=\"left\">Context</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_all\" target=\"_blank\" rel=\"noopener\"><code>ALL [PRIVILEGES]</code></a></td>\n<td align=\"left\">Synonym for “all privileges”</td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter\" target=\"_blank\" rel=\"noopener\"><code>ALTER</code></a></td>\n<td align=\"left\"><code>Alter_priv</code></td>\n<td align=\"left\">Tables</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter-routine\" target=\"_blank\" rel=\"noopener\"><code>ALTER ROUTINE</code></a></td>\n<td align=\"left\"><code>Alter_routine_priv</code></td>\n<td align=\"left\">Stored routines</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create\" target=\"_blank\" rel=\"noopener\"><code>CREATE</code></a></td>\n<td align=\"left\"><code>Create_priv</code></td>\n<td align=\"left\">Databases, tables, or indexes</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-role\" target=\"_blank\" rel=\"noopener\"><code>CREATE ROLE</code></a></td>\n<td align=\"left\"><code>Create_role_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-routine\" target=\"_blank\" rel=\"noopener\"><code>CREATE ROUTINE</code></a></td>\n<td align=\"left\"><code>Create_routine_priv</code></td>\n<td align=\"left\">Stored routines</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-tablespace\" target=\"_blank\" rel=\"noopener\"><code>CREATE TABLESPACE</code></a></td>\n<td align=\"left\"><code>Create_tablespace_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-temporary-tables\" target=\"_blank\" rel=\"noopener\"><code>CREATE TEMPORARY TABLES</code></a></td>\n<td align=\"left\"><code>Create_tmp_table_priv</code></td>\n<td align=\"left\">Tables</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-user\" target=\"_blank\" rel=\"noopener\"><code>CREATE USER</code></a></td>\n<td align=\"left\"><code>Create_user_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-view\" target=\"_blank\" rel=\"noopener\"><code>CREATE VIEW</code></a></td>\n<td align=\"left\"><code>Create_view_priv</code></td>\n<td align=\"left\">Views</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_delete\" target=\"_blank\" rel=\"noopener\"><code>DELETE</code></a></td>\n<td align=\"left\"><code>Delete_priv</code></td>\n<td align=\"left\">Tables</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop\" target=\"_blank\" rel=\"noopener\"><code>DROP</code></a></td>\n<td align=\"left\"><code>Drop_priv</code></td>\n<td align=\"left\">Databases, tables, or views</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop-role\" target=\"_blank\" rel=\"noopener\"><code>DROP ROLE</code></a></td>\n<td align=\"left\"><code>Drop_role_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_event\" target=\"_blank\" rel=\"noopener\"><code>EVENT</code></a></td>\n<td align=\"left\"><code>Event_priv</code></td>\n<td align=\"left\">Databases</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_execute\" target=\"_blank\" rel=\"noopener\"><code>EXECUTE</code></a></td>\n<td align=\"left\"><code>Execute_priv</code></td>\n<td align=\"left\">Stored routines</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_file\" target=\"_blank\" rel=\"noopener\"><code>FILE</code></a></td>\n<td align=\"left\"><code>File_priv</code></td>\n<td align=\"left\">File access on server host</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_grant-option\" target=\"_blank\" rel=\"noopener\"><code>GRANT OPTION</code></a></td>\n<td align=\"left\"><code>Grant_priv</code></td>\n<td align=\"left\">Databases, tables, or stored routines</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_index\" target=\"_blank\" rel=\"noopener\"><code>INDEX</code></a></td>\n<td align=\"left\"><code>Index_priv</code></td>\n<td align=\"left\">Tables</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_insert\" target=\"_blank\" rel=\"noopener\"><code>INSERT</code></a></td>\n<td align=\"left\"><code>Insert_priv</code></td>\n<td align=\"left\">Tables or columns</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_lock-tables\" target=\"_blank\" rel=\"noopener\"><code>LOCK TABLES</code></a></td>\n<td align=\"left\"><code>Lock_tables_priv</code></td>\n<td align=\"left\">Databases</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_process\" target=\"_blank\" rel=\"noopener\"><code>PROCESS</code></a></td>\n<td align=\"left\"><code>Process_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_proxy\" target=\"_blank\" rel=\"noopener\"><code>PROXY</code></a></td>\n<td align=\"left\">See <code>proxies_priv</code> table</td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_references\" target=\"_blank\" rel=\"noopener\"><code>REFERENCES</code></a></td>\n<td align=\"left\"><code>References_priv</code></td>\n<td align=\"left\">Databases or tables</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_reload\" target=\"_blank\" rel=\"noopener\"><code>RELOAD</code></a></td>\n<td align=\"left\"><code>Reload_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-client\" target=\"_blank\" rel=\"noopener\"><code>REPLICATION CLIENT</code></a></td>\n<td align=\"left\"><code>Repl_client_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave\" target=\"_blank\" rel=\"noopener\"><code>REPLICATION SLAVE</code></a></td>\n<td align=\"left\"><code>Repl_slave_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_select\" target=\"_blank\" rel=\"noopener\"><code>SELECT</code></a></td>\n<td align=\"left\"><code>Select_priv</code></td>\n<td align=\"left\">Tables or columns</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-databases\" target=\"_blank\" rel=\"noopener\"><code>SHOW DATABASES</code></a></td>\n<td align=\"left\"><code>Show_db_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-view\" target=\"_blank\" rel=\"noopener\"><code>SHOW VIEW</code></a></td>\n<td align=\"left\"><code>Show_view_priv</code></td>\n<td align=\"left\">Views</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_shutdown\" target=\"_blank\" rel=\"noopener\"><code>SHUTDOWN</code></a></td>\n<td align=\"left\"><code>Shutdown_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_super\" target=\"_blank\" rel=\"noopener\"><code>SUPER</code></a></td>\n<td align=\"left\"><code>Super_priv</code></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_trigger\" target=\"_blank\" rel=\"noopener\"><code>TRIGGER</code></a></td>\n<td align=\"left\"><code>Trigger_priv</code></td>\n<td align=\"left\">Tables</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_update\" target=\"_blank\" rel=\"noopener\"><code>UPDATE</code></a></td>\n<td align=\"left\"><code>Update_priv</code></td>\n<td align=\"left\">Tables or columns</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_usage\" target=\"_blank\" rel=\"noopener\"><code>USAGE</code></a></td>\n<td align=\"left\">Synonym for “no privileges”</td>\n<td align=\"left\">Server administration</td>\n</tr>\n</tbody></table>\n<p>GRANT 和 REVOKE 允许的动态权限</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Privilege</th>\n<th align=\"left\">Context</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_application-password-admin\" target=\"_blank\" rel=\"noopener\"><code>APPLICATION_PASSWORD_ADMIN</code></a></td>\n<td align=\"left\">Dual password administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-abort-exempt\" target=\"_blank\" rel=\"noopener\"><code>AUDIT_ABORT_EXEMPT</code></a></td>\n<td align=\"left\">Allow queries blocked by audit log filter</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-admin\" target=\"_blank\" rel=\"noopener\"><code>AUDIT_ADMIN</code></a></td>\n<td align=\"left\">Audit log administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_authentication-policy-admin\" target=\"_blank\" rel=\"noopener\"><code>AUTHENTICATION_POLICY_ADMIN</code></a></td>\n<td align=\"left\">Authentication administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_backup-admin\" target=\"_blank\" rel=\"noopener\"><code>BACKUP_ADMIN</code></a></td>\n<td align=\"left\">Backup administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-admin\" target=\"_blank\" rel=\"noopener\"><code>BINLOG_ADMIN</code></a></td>\n<td align=\"left\">Backup and Replication administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-encryption-admin\" target=\"_blank\" rel=\"noopener\"><code>BINLOG_ENCRYPTION_ADMIN</code></a></td>\n<td align=\"left\">Backup and Replication administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_clone-admin\" target=\"_blank\" rel=\"noopener\"><code>CLONE_ADMIN</code></a></td>\n<td align=\"left\">Clone administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_connection-admin\" target=\"_blank\" rel=\"noopener\"><code>CONNECTION_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_encryption-key-admin\" target=\"_blank\" rel=\"noopener\"><code>ENCRYPTION_KEY_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-admin\" target=\"_blank\" rel=\"noopener\"><code>FIREWALL_ADMIN</code></a></td>\n<td align=\"left\">Firewall administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-exempt\" target=\"_blank\" rel=\"noopener\"><code>FIREWALL_EXEMPT</code></a></td>\n<td align=\"left\">Firewall administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-user\" target=\"_blank\" rel=\"noopener\"><code>FIREWALL_USER</code></a></td>\n<td align=\"left\">Firewall administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-optimizer-costs\" target=\"_blank\" rel=\"noopener\"><code>FLUSH_OPTIMIZER_COSTS</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-status\" target=\"_blank\" rel=\"noopener\"><code>FLUSH_STATUS</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-tables\" target=\"_blank\" rel=\"noopener\"><code>FLUSH_TABLES</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-user-resources\" target=\"_blank\" rel=\"noopener\"><code>FLUSH_USER_RESOURCES</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-admin\" target=\"_blank\" rel=\"noopener\"><code>GROUP_REPLICATION_ADMIN</code></a></td>\n<td align=\"left\">Replication administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-stream\" target=\"_blank\" rel=\"noopener\"><code>GROUP_REPLICATION_STREAM</code></a></td>\n<td align=\"left\">Replication administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_innodb-redo-log-archive\" target=\"_blank\" rel=\"noopener\"><code>INNODB_REDO_LOG_ARCHIVE</code></a></td>\n<td align=\"left\">Redo log archiving administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_ndb-stored-user\" target=\"_blank\" rel=\"noopener\"><code>NDB_STORED_USER</code></a></td>\n<td align=\"left\">NDB Cluster</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_passwordless-user-admin\" target=\"_blank\" rel=\"noopener\"><code>PASSWORDLESS_USER_ADMIN</code></a></td>\n<td align=\"left\">Authentication administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_persist-ro-variables-admin\" target=\"_blank\" rel=\"noopener\"><code>PERSIST_RO_VARIABLES_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-applier\" target=\"_blank\" rel=\"noopener\"><code>REPLICATION_APPLIER</code></a></td>\n<td align=\"left\"><code>PRIVILEGE_CHECKS_USER</code> for a replication channel</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave-admin\" target=\"_blank\" rel=\"noopener\"><code>REPLICATION_SLAVE_ADMIN</code></a></td>\n<td align=\"left\">Replication administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-admin\" target=\"_blank\" rel=\"noopener\"><code>RESOURCE_GROUP_ADMIN</code></a></td>\n<td align=\"left\">Resource group administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-user\" target=\"_blank\" rel=\"noopener\"><code>RESOURCE_GROUP_USER</code></a></td>\n<td align=\"left\">Resource group administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_role-admin\" target=\"_blank\" rel=\"noopener\"><code>ROLE_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_session-variables-admin\" target=\"_blank\" rel=\"noopener\"><code>SESSION_VARIABLES_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_set-user-id\" target=\"_blank\" rel=\"noopener\"><code>SET_USER_ID</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-routine\" target=\"_blank\" rel=\"noopener\"><code>SHOW_ROUTINE</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-user\" target=\"_blank\" rel=\"noopener\"><code>SYSTEM_USER</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-variables-admin\" target=\"_blank\" rel=\"noopener\"><code>SYSTEM_VARIABLES_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_table-encryption-admin\" target=\"_blank\" rel=\"noopener\"><code>TABLE_ENCRYPTION_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_version-token-admin\" target=\"_blank\" rel=\"noopener\"><code>VERSION_TOKEN_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_xa-recover-admin\" target=\"_blank\" rel=\"noopener\"><code>XA_RECOVER_ADMIN</code></a></td>\n<td align=\"left\">Server administration</td>\n</tr>\n</tbody></table>\n<h1 id=\"图形化界面工具\"><a href=\"#图形化界面工具\" class=\"headerlink\" title=\"图形化界面工具\"></a>图形化界面工具</h1><ul>\n<li>Workbench(免费): <a href=\"http://dev.mysql.com/downloads/workbench/\" target=\"_blank\" rel=\"noopener\">http://dev.mysql.com/downloads/workbench/</a></li>\n<li>navicat(收费，试用版30天): <a href=\"https://www.navicat.com/en/download/navicat-for-mysql\" target=\"_blank\" rel=\"noopener\">https://www.navicat.com/en/download/navicat-for-mysql</a></li>\n<li>Sequel Pro(开源免费，仅支持Mac OS): <a href=\"http://www.sequelpro.com/\" target=\"_blank\" rel=\"noopener\">http://www.sequelpro.com/</a></li>\n<li>HeidiSQL(免费): <a href=\"http://www.heidisql.com/\" target=\"_blank\" rel=\"noopener\">http://www.heidisql.com/</a></li>\n<li>phpMyAdmin(免费): <a href=\"https://www.phpmyadmin.net/\" target=\"_blank\" rel=\"noopener\">https://www.phpmyadmin.net/</a></li>\n<li>SQLyog: <a href=\"https://sqlyog.en.softonic.com/\" target=\"_blank\" rel=\"noopener\">https://sqlyog.en.softonic.com/</a></li>\n</ul>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><h1 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h1><ol>\n<li>在SQL语句之后加上<code>\\G</code>会将结果的表格形式转换成行文本形式</li>\n<li>查看Mysql数据库占用空间：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT table_schema &quot;Database Name&quot;</span><br><span class=\"line\">     , SUM(data_length + index_length) / (1024 * 1024) &quot;Database Size in MB&quot;</span><br><span class=\"line\">FROM information_schema.TABLES</span><br><span class=\"line\">GROUP BY table_schema;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"claajxb3g0000a8vw256wx2d9","category_id":"claajxb3w0002a8vwgmhi16xq","_id":"claajxb45000aa8vwruj527m9"},{"post_id":"claajxb3u0001a8vw1si5ppox","category_id":"claajxb420007a8vwpoi9yvh4","_id":"claajxb45000da8vwrtvil656"},{"post_id":"claajxb3z0004a8vwxcvqngf3","category_id":"claajxb45000ba8vwefoy9ycc","_id":"claajxb46000ga8vwhlpfsjub"},{"post_id":"claajxb400005a8vwtgltts7i","category_id":"claajxb46000ea8vwydghl77c","_id":"claajxb47000ja8vwj7ze6ea5"},{"post_id":"claajxb410006a8vw62iboym2","category_id":"claajxb46000ha8vw9kgyyqwd","_id":"claajxb49000oa8vwrbxtmke4"},{"post_id":"claajxb430009a8vwwwuxuncy","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb4a000ta8vwowhoum82"},{"post_id":"claajxb55001na8vw7ymsmg7c","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb5p001ta8vwcmbmfs5x"},{"post_id":"claajxb5e001oa8vw5e8cfy7m","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb5r001wa8vwwawwfl41"},{"post_id":"claajxb5g001qa8vw3x2ugae1","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb5s001za8vwoqbowxrr"},{"post_id":"claajxb5o001sa8vw6x63qeqf","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb5u0022a8vwkb7ube0g"},{"post_id":"claajxb5q001va8vwjnmqf911","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb5v0025a8vwz0lb5xj9"},{"post_id":"claajxb5r001ya8vwj1jlf9ia","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb5x0028a8vwdwidfkuw"},{"post_id":"claajxb5t0021a8vw2bfu0olr","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb5z002ba8vwfkwwru01"},{"post_id":"claajxb5u0024a8vwiktht57o","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb61002ea8vwr3l5vn3y"},{"post_id":"claajxb5w0027a8vwm7bnfuca","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb64002ha8vwl0b7gyey"},{"post_id":"claajxb5x002aa8vwod27cgrc","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb66002ka8vwn65l4eoj"},{"post_id":"claajxb60002da8vwqhvzps1x","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb67002na8vwwirhb692"},{"post_id":"claajxb62002ga8vwl18n0bzl","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb6b002qa8vw5cbetw3m"},{"post_id":"claajxb65002ja8vwmkajrowp","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb6c002ta8vw3mvoz3wc"},{"post_id":"claajxb66002ma8vwd400imgv","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb6e002wa8vwsgc2aeg2"},{"post_id":"claajxb68002pa8vwq92rz8m9","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb6g002za8vwn01fdyor"},{"post_id":"claajxb6b002sa8vwi12pemer","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb6h0032a8vwrzzaujew"},{"post_id":"claajxb6d002va8vw4h5gb72e","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb6j0035a8vwzhtc8rg6"},{"post_id":"claajxb6f002ya8vwf4h9l35a","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb6l0038a8vwke4ei12l"},{"post_id":"claajxb6g0031a8vwudshi7xf","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb6n003ba8vw6zya50vj"},{"post_id":"claajxb6i0034a8vwlqy2qiqy","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb6t003ea8vwos2l2r3f"},{"post_id":"claajxb6j0037a8vwpz10wpv7","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb6v003ha8vwt2ho306g"},{"post_id":"claajxb6m003aa8vwpscir2zb","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb6w003ka8vwmf25lmbm"},{"post_id":"claajxb6s003da8vwf2pcogk0","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb6z003na8vwuxd7gb3g"},{"post_id":"claajxb6u003ga8vw8t50ewl6","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb71003qa8vwpzsdyx15"},{"post_id":"claajxb6w003ja8vwv54i46m1","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb72003ta8vw46qooujl"},{"post_id":"claajxb6x003ma8vw039ekwj8","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb74003wa8vw94wttjxj"},{"post_id":"claajxb70003pa8vw2vqgcwit","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb75003za8vwojpl44qy"},{"post_id":"claajxb71003sa8vwd8qy2svh","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb780042a8vwkqx4ew46"},{"post_id":"claajxb73003va8vwkger7t2r","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb790044a8vwoywxkv7k"},{"post_id":"claajxb74003ya8vwlndpu9rw","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb7k0047a8vwpsmolpon"},{"post_id":"claajxb770041a8vw5jd8gfhl","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxb7l0049a8vw3203f09d"},{"post_id":"claajxdjd0060a8vw77g5t800","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxdjv0069a8vw9hkbwfdp"},{"post_id":"claajxdjg0062a8vwbadpkpjt","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxdjx006ca8vwwfhwfxiw"},{"post_id":"claajxdjk0065a8vw7pkds9wd","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxdjz006fa8vwc0wk05s7"},{"post_id":"claajxdju0068a8vw6pkm7q7p","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxdk3006ia8vwtprihgp0"},{"post_id":"claajxdjw006ba8vwrzzgovwg","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxdk4006la8vwg6ec6kwa"},{"post_id":"claajxdjy006ea8vwatvudnto","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxdkl006oa8vwx2zbrinr"},{"post_id":"claajxdjz006ha8vw3l61p1xk","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxdkn006ra8vw8iyyc1hl"},{"post_id":"claajxdk3006ka8vw2izp8r0w","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxdko006ua8vwsnghxs2c"},{"post_id":"claajxdk5006na8vwfg88codd","category_id":"claajxb47000ka8vwaz1kxa0v","_id":"claajxdkq006za8vwljjm58ki"},{"post_id":"claajxdkm006qa8vwnxlukb9v","category_id":"claajxdko006va8vwvczbl2iu","_id":"claajxdl5007ba8vwby841z97"},{"post_id":"claajxdkn006ta8vww7oon8nq","category_id":"claajxdko006va8vwvczbl2iu","_id":"claajxdlc007ha8vwhhgox6es"},{"post_id":"claajxdkp006ya8vwvahbphxw","category_id":"claajxdl4007aa8vw0xbq1y8v","_id":"claajxdlf007oa8vwskpxj3bk"},{"post_id":"claajxdkx0071a8vw99efd0hq","category_id":"claajxdlc007ia8vw2tz5w523","_id":"claajxdll007va8vwpqfzkeg1"},{"post_id":"claajxdky0073a8vw9hr2f1dn","category_id":"claajxdlf007qa8vwsmlrucak","_id":"claajxdlu0083a8vw0xxqb3fh"},{"post_id":"claajxdl00077a8vw15pvx3tx","category_id":"claajxdlf007qa8vwsmlrucak","_id":"claajxdlx008aa8vwv30uwamt"},{"post_id":"claajxdl10079a8vw0u2y7n3p","category_id":"claajxdlf007qa8vwsmlrucak","_id":"claajxdm1008ha8vw6gjkj00z"},{"post_id":"claajxdl5007ea8vwxcux35qn","category_id":"claajxdlf007qa8vwsmlrucak","_id":"claajxdm4008oa8vw8i2c42gb"},{"post_id":"claajxdl7007ga8vwyrl9t5c3","category_id":"claajxdlf007qa8vwsmlrucak","_id":"claajxdm8008va8vwp1ab30tr"},{"post_id":"claajxdld007la8vw6n61f4bk","category_id":"claajxdlf007qa8vwsmlrucak","_id":"claajxdma0091a8vw0gs601g9"},{"post_id":"claajxdle007na8vwug0axzy3","category_id":"claajxdm7008ua8vwnybqdfz8","_id":"claajxdme009aa8vwb83m5u78"},{"post_id":"claajxdlg007sa8vwqjgcf8iy","category_id":"claajxdmb0094a8vwupvdgauj","_id":"claajxdmh009ha8vw0kx6fmrl"},{"post_id":"claajxdlh007ua8vwdr3vd40k","category_id":"claajxdme009ba8vwt3wz1tm6","_id":"claajxdmk009oa8vw0wqef00s"},{"post_id":"claajxdls007za8vws37bhlnk","category_id":"claajxdmh009ia8vwhoek7va1","_id":"claajxdmn009wa8vw3c5z68il"},{"post_id":"claajxdlu0086a8vw0q8zy83v","category_id":"claajxdmb0094a8vwupvdgauj","_id":"claajxdmq00a2a8vwts0uchfn"},{"post_id":"claajxdlw0088a8vw59fjhjwn","category_id":"claajxdmb0094a8vwupvdgauj","_id":"claajxdmq00a6a8vw0413702d"},{"post_id":"claajxdlx008ca8vwz41w9c84","category_id":"claajxdmp00a1a8vw1frne1yb","_id":"claajxdmt00aca8vwvte5igmt"},{"post_id":"claajxdm0008fa8vwc669b18w","category_id":"claajxdmr00a8a8vwn1r73d7m","_id":"claajxdmv00aha8vw6jf5v5pc"},{"post_id":"claajxdm1008ja8vwjnysm3ri","category_id":"claajxdmr00a8a8vwn1r73d7m","_id":"claajxdn800aka8vwuxm6pjks"},{"post_id":"claajxdm3008ma8vwux826g9v","category_id":"claajxdme009ba8vwt3wz1tm6","_id":"claajxdn900aoa8vwr92n8ipj"},{"post_id":"claajxdm4008qa8vwfu6h2sko","category_id":"claajxdn800aja8vwqg2u6fdo","_id":"claajxdna00asa8vwha9fneo0"},{"post_id":"claajxdm6008ta8vwkf1srdc2","category_id":"claajxdn900apa8vw8d6divfu","_id":"claajxdnc00axa8vwgt3chz3f"},{"post_id":"claajxdm8008xa8vwwxbqkqir","category_id":"claajxdn900apa8vw8d6divfu","_id":"claajxdnd00b2a8vw4v135pl4"},{"post_id":"claajxdm90090a8vwv2w2cglv","category_id":"claajxdme009ba8vwt3wz1tm6","_id":"claajxdne00b5a8vwr3ydsdwl"},{"post_id":"claajxdma0093a8vwahwnnsr9","category_id":"claajxdn900apa8vw8d6divfu","_id":"claajxdnf00b9a8vwbh4hmyxo"},{"post_id":"claajxdmc0097a8vwb83n7x9g","category_id":"claajxdn900apa8vw8d6divfu","_id":"claajxdnf00bda8vwzbey3lk1"},{"post_id":"claajxdmd0099a8vwupfbq0lx","category_id":"claajxdnf00b8a8vwrt918hvl","_id":"claajxdnh00bha8vwh53a4p38"},{"post_id":"claajxdmf009ea8vwkldpwqpa","category_id":"claajxdnf00b8a8vwrt918hvl","_id":"claajxdni00bma8vwz8gkls2n"},{"post_id":"claajxdmg009ga8vw7bser6e4","category_id":"claajxdnf00b8a8vwrt918hvl","_id":"claajxdnk00bpa8vwvjq64shk"},{"post_id":"claajxdmi009la8vwrxgi4979","category_id":"claajxdnf00b8a8vwrt918hvl","_id":"claajxdnk00bta8vws3bq8huz"},{"post_id":"claajxdmj009na8vwguu89dqu","category_id":"claajxdnk00boa8vwj5dcmvpg","_id":"claajxdnr00bxa8vw0zz90g9e"},{"post_id":"claajxdmk009sa8vw79q5f5n8","category_id":"claajxdnk00boa8vwj5dcmvpg","_id":"claajxdns00c0a8vw9uc518j7"},{"post_id":"claajxdmm009ua8vwqplbawfd","category_id":"claajxdnf00b8a8vwrt918hvl","_id":"claajxdns00c1a8vwqz6dtcre"},{"post_id":"claajxdmo009za8vwk3omganq","category_id":"claajxdn900apa8vw8d6divfu","_id":"claajxdnt00c5a8vwv9xujmzq"},{"post_id":"claajxdpy00f6a8vwbhiy5no9","category_id":"claajxdq000f7a8vwindp91j3","_id":"claajxdq500fba8vwd4l2r0z6"}],"PostTag":[{"post_id":"claajxb3g0000a8vw256wx2d9","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb48000ma8vw2en35uhs"},{"post_id":"claajxb3g0000a8vw256wx2d9","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb49000na8vwwxkxo5xs"},{"post_id":"claajxb3g0000a8vw256wx2d9","tag_id":"claajxb45000ca8vw3wz14gds","_id":"claajxb4a000qa8vwdw787krw"},{"post_id":"claajxb3g0000a8vw256wx2d9","tag_id":"claajxb46000fa8vwp4fchs8r","_id":"claajxb4a000ra8vwpoz83u3l"},{"post_id":"claajxb3g0000a8vw256wx2d9","tag_id":"claajxb46000ia8vwx4d1owxw","_id":"claajxb4a000ua8vwtpu2jhut"},{"post_id":"claajxb3u0001a8vw1si5ppox","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb4c000xa8vwb9u1zlzm"},{"post_id":"claajxb3u0001a8vw1si5ppox","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb4c000ya8vw4kjl6n27"},{"post_id":"claajxb3u0001a8vw1si5ppox","tag_id":"claajxb4a000sa8vwfwtuwp4u","_id":"claajxb4c0010a8vwdzcxi5hl"},{"post_id":"claajxb3u0001a8vw1si5ppox","tag_id":"claajxb46000ia8vwx4d1owxw","_id":"claajxb4c0011a8vwtgg8pm39"},{"post_id":"claajxb3z0004a8vwxcvqngf3","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb4e0015a8vwg7voz5cr"},{"post_id":"claajxb3z0004a8vwxcvqngf3","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb4e0016a8vwpyjt5pat"},{"post_id":"claajxb3z0004a8vwxcvqngf3","tag_id":"claajxb4c0012a8vwwtkfy992","_id":"claajxb4e0018a8vw26ve1906"},{"post_id":"claajxb3z0004a8vwxcvqngf3","tag_id":"claajxb46000ia8vwx4d1owxw","_id":"claajxb4e0019a8vwniat9xoh"},{"post_id":"claajxb400005a8vwtgltts7i","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb4f001ca8vw4v8vvi2r"},{"post_id":"claajxb400005a8vwtgltts7i","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb4f001da8vwwugi4z3r"},{"post_id":"claajxb400005a8vwtgltts7i","tag_id":"claajxb4e0017a8vwczafrag6","_id":"claajxb4g001fa8vwcnoml2nn"},{"post_id":"claajxb400005a8vwtgltts7i","tag_id":"claajxb46000ia8vwx4d1owxw","_id":"claajxb4g001ga8vw3utcy8lu"},{"post_id":"claajxb410006a8vw62iboym2","tag_id":"claajxb4f001ba8vw8pni0ws6","_id":"claajxb4g001ia8vwpb0kgdo6"},{"post_id":"claajxb410006a8vw62iboym2","tag_id":"claajxb4g001ea8vw1owagwy6","_id":"claajxb4g001ja8vwecrjgz02"},{"post_id":"claajxb430009a8vwwwuxuncy","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb4h001ka8vw66pbp384"},{"post_id":"claajxb430009a8vwwwuxuncy","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb4h001la8vw9h5itt6f"},{"post_id":"claajxb430009a8vwwwuxuncy","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb4h001ma8vw2vq7p3ti"},{"post_id":"claajxb55001na8vw7ymsmg7c","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb5g001pa8vwcndt819t"},{"post_id":"claajxb55001na8vw7ymsmg7c","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb5o001ra8vw5rsorsp0"},{"post_id":"claajxb55001na8vw7ymsmg7c","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb5q001ua8vwx3m5djfa"},{"post_id":"claajxb5e001oa8vw5e8cfy7m","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb5r001xa8vwvb7uby5z"},{"post_id":"claajxb5e001oa8vw5e8cfy7m","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb5t0020a8vw8m6fe0jm"},{"post_id":"claajxb5e001oa8vw5e8cfy7m","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb5u0023a8vwmbf3shj4"},{"post_id":"claajxb5g001qa8vw3x2ugae1","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb5w0026a8vwqrbl6cth"},{"post_id":"claajxb5g001qa8vw3x2ugae1","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb5x0029a8vw2i6a138u"},{"post_id":"claajxb5g001qa8vw3x2ugae1","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb60002ca8vwtqynvet8"},{"post_id":"claajxb5o001sa8vw6x63qeqf","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb62002fa8vw0hhb0u3z"},{"post_id":"claajxb5o001sa8vw6x63qeqf","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb65002ia8vwch5yuo8r"},{"post_id":"claajxb5o001sa8vw6x63qeqf","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb66002la8vw04q9hrdq"},{"post_id":"claajxb5q001va8vwjnmqf911","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb68002oa8vwf43c4ete"},{"post_id":"claajxb5q001va8vwjnmqf911","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb6b002ra8vwane50yib"},{"post_id":"claajxb5q001va8vwjnmqf911","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb6d002ua8vw7s095sgm"},{"post_id":"claajxb5r001ya8vwj1jlf9ia","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb6f002xa8vw8chwsdxc"},{"post_id":"claajxb5r001ya8vwj1jlf9ia","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb6g0030a8vwedhojuq1"},{"post_id":"claajxb5r001ya8vwj1jlf9ia","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb6i0033a8vwhh3ozscq"},{"post_id":"claajxb5t0021a8vw2bfu0olr","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb6j0036a8vwj6f64c6n"},{"post_id":"claajxb5t0021a8vw2bfu0olr","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb6m0039a8vwsr745ai2"},{"post_id":"claajxb5t0021a8vw2bfu0olr","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb6n003ca8vwgd686f9r"},{"post_id":"claajxb5u0024a8vwiktht57o","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb6u003fa8vwaxv77t6h"},{"post_id":"claajxb5u0024a8vwiktht57o","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb6v003ia8vwwfl5lxrc"},{"post_id":"claajxb5u0024a8vwiktht57o","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb6x003la8vwn5rij0kx"},{"post_id":"claajxb5w0027a8vwm7bnfuca","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb70003oa8vwbxyfbk7m"},{"post_id":"claajxb5w0027a8vwm7bnfuca","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb71003ra8vwmgdzvkjf"},{"post_id":"claajxb5w0027a8vwm7bnfuca","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb73003ua8vwrs0c4e6b"},{"post_id":"claajxb5x002aa8vwod27cgrc","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb74003xa8vw0jcpbsph"},{"post_id":"claajxb5x002aa8vwod27cgrc","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb770040a8vw8hp5arwj"},{"post_id":"claajxb5x002aa8vwod27cgrc","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb780043a8vwriwkpw6u"},{"post_id":"claajxb60002da8vwqhvzps1x","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb7k0046a8vwp8yhphj4"},{"post_id":"claajxb60002da8vwqhvzps1x","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb7l0048a8vw08kodoa6"},{"post_id":"claajxb60002da8vwqhvzps1x","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb7l004aa8vww32ga3oi"},{"post_id":"claajxb62002ga8vwl18n0bzl","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb7l004ba8vwjiaignlm"},{"post_id":"claajxb62002ga8vwl18n0bzl","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb7m004ca8vwvrf2qydl"},{"post_id":"claajxb62002ga8vwl18n0bzl","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb7m004da8vws945vh4q"},{"post_id":"claajxb65002ja8vwmkajrowp","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb7m004ea8vwxwtowulu"},{"post_id":"claajxb65002ja8vwmkajrowp","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb7m004fa8vw73du3tur"},{"post_id":"claajxb65002ja8vwmkajrowp","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb7m004ga8vwnuiwotwh"},{"post_id":"claajxb66002ma8vwd400imgv","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb7m004ha8vws1u77pwy"},{"post_id":"claajxb66002ma8vwd400imgv","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb7n004ia8vwp0ven9oj"},{"post_id":"claajxb66002ma8vwd400imgv","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb7n004ja8vwxm0jkcx4"},{"post_id":"claajxb68002pa8vwq92rz8m9","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb7n004ka8vwqjrmiatf"},{"post_id":"claajxb68002pa8vwq92rz8m9","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb7o004la8vwtwjvh828"},{"post_id":"claajxb68002pa8vwq92rz8m9","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb7o004ma8vwavogx1pv"},{"post_id":"claajxb6b002sa8vwi12pemer","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb7o004na8vwawwl91ym"},{"post_id":"claajxb6b002sa8vwi12pemer","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb7o004oa8vwtpm2ipx6"},{"post_id":"claajxb6b002sa8vwi12pemer","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb7o004pa8vww5vj6c4k"},{"post_id":"claajxb6d002va8vw4h5gb72e","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb7o004qa8vwrgzigxtz"},{"post_id":"claajxb6d002va8vw4h5gb72e","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb7p004ra8vwygxi2dts"},{"post_id":"claajxb6d002va8vw4h5gb72e","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb7p004sa8vwgbkeocsn"},{"post_id":"claajxb6f002ya8vwf4h9l35a","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb7p004ta8vwy1ovo1zv"},{"post_id":"claajxb6f002ya8vwf4h9l35a","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb7p004ua8vwetub4fj1"},{"post_id":"claajxb6f002ya8vwf4h9l35a","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb7p004va8vwylq883lf"},{"post_id":"claajxb6g0031a8vwudshi7xf","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb7p004wa8vwqre4mula"},{"post_id":"claajxb6g0031a8vwudshi7xf","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb7p004xa8vwhqe0ybzt"},{"post_id":"claajxb6g0031a8vwudshi7xf","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb7p004ya8vwee39mdeh"},{"post_id":"claajxb6i0034a8vwlqy2qiqy","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb7p004za8vwqhfqj86i"},{"post_id":"claajxb6i0034a8vwlqy2qiqy","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb7p0050a8vw6km29a5e"},{"post_id":"claajxb6i0034a8vwlqy2qiqy","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb7p0051a8vww66m2bl0"},{"post_id":"claajxb6j0037a8vwpz10wpv7","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb7p0052a8vw08wvf772"},{"post_id":"claajxb6j0037a8vwpz10wpv7","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb7q0053a8vwfyw7miz6"},{"post_id":"claajxb6j0037a8vwpz10wpv7","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb7q0054a8vw3rm0ecgl"},{"post_id":"claajxb6m003aa8vwpscir2zb","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb7q0055a8vw0l2ikoq0"},{"post_id":"claajxb6m003aa8vwpscir2zb","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb7q0056a8vwqsftqukl"},{"post_id":"claajxb6m003aa8vwpscir2zb","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb7q0057a8vwrka73jjn"},{"post_id":"claajxb6s003da8vwf2pcogk0","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb7q0058a8vwg66m5nok"},{"post_id":"claajxb6s003da8vwf2pcogk0","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb7q0059a8vww292i9h8"},{"post_id":"claajxb6s003da8vwf2pcogk0","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb7q005aa8vwx9kca55g"},{"post_id":"claajxb6u003ga8vw8t50ewl6","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb7q005ba8vwd3b25zku"},{"post_id":"claajxb6u003ga8vw8t50ewl6","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb7q005ca8vwu3lj2ok0"},{"post_id":"claajxb6u003ga8vw8t50ewl6","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb7q005da8vwv4todvjt"},{"post_id":"claajxb6w003ja8vwv54i46m1","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb7q005ea8vwv7z0cbxa"},{"post_id":"claajxb6w003ja8vwv54i46m1","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb7q005fa8vw9bluakft"},{"post_id":"claajxb6w003ja8vwv54i46m1","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb7q005ga8vwby4zzz2q"},{"post_id":"claajxb6x003ma8vw039ekwj8","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb7r005ha8vw4mry1r9n"},{"post_id":"claajxb6x003ma8vw039ekwj8","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb7r005ia8vwyjudm02m"},{"post_id":"claajxb6x003ma8vw039ekwj8","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb7r005ja8vwwatg0d3y"},{"post_id":"claajxb70003pa8vw2vqgcwit","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb7r005ka8vwz7k0eldv"},{"post_id":"claajxb70003pa8vw2vqgcwit","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb7r005la8vwgmqkkqv0"},{"post_id":"claajxb70003pa8vw2vqgcwit","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb7r005ma8vw2z0ftc79"},{"post_id":"claajxb71003sa8vwd8qy2svh","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb7r005na8vw35iw74r0"},{"post_id":"claajxb71003sa8vwd8qy2svh","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb7r005oa8vw1umvulzk"},{"post_id":"claajxb71003sa8vwd8qy2svh","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb7r005pa8vwxq5mzmio"},{"post_id":"claajxb73003va8vwkger7t2r","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb7r005qa8vw3xm3eclq"},{"post_id":"claajxb73003va8vwkger7t2r","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb7r005ra8vwpgqqy3ey"},{"post_id":"claajxb73003va8vwkger7t2r","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb7r005sa8vwc4ta4zu5"},{"post_id":"claajxb74003ya8vwlndpu9rw","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb7r005ta8vw8yuouvaz"},{"post_id":"claajxb74003ya8vwlndpu9rw","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb7r005ua8vwhou3zh2c"},{"post_id":"claajxb74003ya8vwlndpu9rw","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb7s005va8vwam4ymvm4"},{"post_id":"claajxb770041a8vw5jd8gfhl","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxb7s005wa8vwkhrbumj0"},{"post_id":"claajxb770041a8vw5jd8gfhl","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxb7s005xa8vwov39l4lt"},{"post_id":"claajxb770041a8vw5jd8gfhl","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxb7t005ya8vw8w6jsjb0"},{"post_id":"claajxb770041a8vw5jd8gfhl","tag_id":"claajxb7k0045a8vwne35gqav","_id":"claajxb7t005za8vw0838eikh"},{"post_id":"claajxdjd0060a8vw77g5t800","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxdjj0064a8vwhtss3y15"},{"post_id":"claajxdjd0060a8vw77g5t800","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxdju0067a8vw8kce4qji"},{"post_id":"claajxdjd0060a8vw77g5t800","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxdjw006aa8vwr0ilbfgb"},{"post_id":"claajxdjg0062a8vwbadpkpjt","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxdjy006da8vwv1d1cj0u"},{"post_id":"claajxdjg0062a8vwbadpkpjt","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxdjz006ga8vwue9p3acu"},{"post_id":"claajxdjg0062a8vwbadpkpjt","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxdk3006ja8vwdtyximhl"},{"post_id":"claajxdjk0065a8vw7pkds9wd","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxdk5006ma8vwvcebpgds"},{"post_id":"claajxdjk0065a8vw7pkds9wd","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxdkm006pa8vwr5sntsdr"},{"post_id":"claajxdjk0065a8vw7pkds9wd","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxdkn006sa8vwzuv1iiw2"},{"post_id":"claajxdju0068a8vw6pkm7q7p","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxdkp006xa8vwr5rssq4a"},{"post_id":"claajxdju0068a8vw6pkm7q7p","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxdkw0070a8vw67qat7hl"},{"post_id":"claajxdju0068a8vw6pkm7q7p","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxdky0072a8vw8ej8ma8s"},{"post_id":"claajxdjw006ba8vwrzzgovwg","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxdl00076a8vwjp8wieuz"},{"post_id":"claajxdjw006ba8vwrzzgovwg","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxdl10078a8vwbz4u9tq5"},{"post_id":"claajxdjw006ba8vwrzzgovwg","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxdl5007da8vwz49kthcp"},{"post_id":"claajxdjy006ea8vwatvudnto","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxdl6007fa8vw2d41hit7"},{"post_id":"claajxdjy006ea8vwatvudnto","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxdld007ka8vwj7ta89lc"},{"post_id":"claajxdjy006ea8vwatvudnto","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxdle007ma8vwdsr0zae5"},{"post_id":"claajxdjz006ha8vw3l61p1xk","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxdlg007ra8vworu7miv1"},{"post_id":"claajxdjz006ha8vw3l61p1xk","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxdlh007ta8vw42e0ps1z"},{"post_id":"claajxdjz006ha8vw3l61p1xk","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxdlm007ya8vwojlclvhz"},{"post_id":"claajxdk3006ka8vw2izp8r0w","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxdlt0080a8vwh745q6w5"},{"post_id":"claajxdk3006ka8vw2izp8r0w","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxdlu0085a8vwux3sof5t"},{"post_id":"claajxdk3006ka8vw2izp8r0w","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxdlw0087a8vw56ztq2id"},{"post_id":"claajxdk5006na8vwfg88codd","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxdlx008ba8vw2jrscd76"},{"post_id":"claajxdk5006na8vwfg88codd","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxdm0008ea8vw688v9beb"},{"post_id":"claajxdk5006na8vwfg88codd","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxdm1008ia8vw5jvjc0p1"},{"post_id":"claajxdkm006qa8vwnxlukb9v","tag_id":"claajxdkp006wa8vw56tbkvem","_id":"claajxdm3008la8vwzrz6vzmd"},{"post_id":"claajxdkm006qa8vwnxlukb9v","tag_id":"claajxdkz0075a8vwpxeva38y","_id":"claajxdm4008pa8vwej5oh4v1"},{"post_id":"claajxdkn006ta8vww7oon8nq","tag_id":"claajxdkp006wa8vw56tbkvem","_id":"claajxdm6008sa8vw4746ygjt"},{"post_id":"claajxdkn006ta8vww7oon8nq","tag_id":"claajxdkz0075a8vwpxeva38y","_id":"claajxdm8008wa8vwwjqsq3k2"},{"post_id":"claajxdkp006ya8vwvahbphxw","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxdm9008za8vw4pomsn4p"},{"post_id":"claajxdkp006ya8vwvahbphxw","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxdma0092a8vwjscy10f6"},{"post_id":"claajxdkp006ya8vwvahbphxw","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxdmc0096a8vwgo0itdzt"},{"post_id":"claajxdkp006ya8vwvahbphxw","tag_id":"claajxdlf007pa8vwyrwk9aay","_id":"claajxdmd0098a8vwottphvi7"},{"post_id":"claajxdkx0071a8vw99efd0hq","tag_id":"claajxdll007wa8vwe5ls7pt6","_id":"claajxdmf009da8vwr98rfpv7"},{"post_id":"claajxdkx0071a8vw99efd0hq","tag_id":"claajxb4g001ea8vw1owagwy6","_id":"claajxdmg009fa8vw8cgf2jkf"},{"post_id":"claajxdkx0071a8vw99efd0hq","tag_id":"claajxdlu0084a8vw1ti5fcva","_id":"claajxdmi009ka8vwqhqod5nj"},{"post_id":"claajxdkx0071a8vw99efd0hq","tag_id":"claajxdlz008da8vwzv19vl4i","_id":"claajxdmj009ma8vwbxhip4mb"},{"post_id":"claajxdky0073a8vw9hr2f1dn","tag_id":"claajxdm2008ka8vwx967mr0f","_id":"claajxdmk009ra8vwn8goebql"},{"post_id":"claajxdky0073a8vw9hr2f1dn","tag_id":"claajxdm6008ra8vwj2u77r4w","_id":"claajxdmm009ta8vwsqix8n6g"},{"post_id":"claajxdky0073a8vw9hr2f1dn","tag_id":"claajxdlz008da8vwzv19vl4i","_id":"claajxdmo009ya8vwvzxdbfyv"},{"post_id":"claajxdl00077a8vw15pvx3tx","tag_id":"claajxdm2008ka8vwx967mr0f","_id":"claajxdmp00a0a8vw3mvc4w4h"},{"post_id":"claajxdl00077a8vw15pvx3tx","tag_id":"claajxdm6008ra8vwj2u77r4w","_id":"claajxdmq00a4a8vwnzg9hnuu"},{"post_id":"claajxdl00077a8vw15pvx3tx","tag_id":"claajxdlz008da8vwzv19vl4i","_id":"claajxdmq00a5a8vwuf8lhq1t"},{"post_id":"claajxdl10079a8vw0u2y7n3p","tag_id":"claajxdm2008ka8vwx967mr0f","_id":"claajxdmr00a9a8vwo7b0vxci"},{"post_id":"claajxdl10079a8vw0u2y7n3p","tag_id":"claajxdm6008ra8vwj2u77r4w","_id":"claajxdmr00aaa8vw3ai0yull"},{"post_id":"claajxdl10079a8vw0u2y7n3p","tag_id":"claajxdlz008da8vwzv19vl4i","_id":"claajxdmu00aea8vwaok6v2nf"},{"post_id":"claajxdl5007ea8vwxcux35qn","tag_id":"claajxdm2008ka8vwx967mr0f","_id":"claajxdn800ala8vwenvidy06"},{"post_id":"claajxdl5007ea8vwxcux35qn","tag_id":"claajxdm6008ra8vwj2u77r4w","_id":"claajxdn900ama8vwgxciruqv"},{"post_id":"claajxdl5007ea8vwxcux35qn","tag_id":"claajxdlz008da8vwzv19vl4i","_id":"claajxdn900aqa8vw57uq7d0w"},{"post_id":"claajxdl7007ga8vwyrl9t5c3","tag_id":"claajxdm2008ka8vwx967mr0f","_id":"claajxdnb00ava8vwjdwh6st6"},{"post_id":"claajxdl7007ga8vwyrl9t5c3","tag_id":"claajxdm6008ra8vwj2u77r4w","_id":"claajxdnc00aya8vwqhtrwyvq"},{"post_id":"claajxdl7007ga8vwyrl9t5c3","tag_id":"claajxdlz008da8vwzv19vl4i","_id":"claajxdnd00b0a8vwh2gl9pl5"},{"post_id":"claajxdld007la8vw6n61f4bk","tag_id":"claajxdm2008ka8vwx967mr0f","_id":"claajxdnf00b7a8vwbhnlis36"},{"post_id":"claajxdld007la8vw6n61f4bk","tag_id":"claajxdm6008ra8vwj2u77r4w","_id":"claajxdnf00baa8vwd6wwggdx"},{"post_id":"claajxdld007la8vw6n61f4bk","tag_id":"claajxdlz008da8vwzv19vl4i","_id":"claajxdnf00bca8vwmixq0gs4"},{"post_id":"claajxdle007na8vwug0axzy3","tag_id":"claajxdne00b6a8vw3qtqd427","_id":"claajxdnh00bia8vwl1ismiz3"},{"post_id":"claajxdle007na8vwug0axzy3","tag_id":"claajxdnf00bba8vwap1qovy9","_id":"claajxdnh00bja8vwbjs2vmam"},{"post_id":"claajxdlg007sa8vwqjgcf8iy","tag_id":"claajxdne00b6a8vw3qtqd427","_id":"claajxdnk00bqa8vwph6mbd57"},{"post_id":"claajxdlg007sa8vwqjgcf8iy","tag_id":"claajxdnh00bka8vwgx1tarpl","_id":"claajxdnk00bra8vw98l5iv7i"},{"post_id":"claajxdlh007ua8vwdr3vd40k","tag_id":"claajxdnj00bna8vwgugern1d","_id":"claajxdnt00c3a8vw2120dzn3"},{"post_id":"claajxdlh007ua8vwdr3vd40k","tag_id":"claajxdlz008da8vwzv19vl4i","_id":"claajxdnt00c4a8vwhqjuyqms"},{"post_id":"claajxdlh007ua8vwdr3vd40k","tag_id":"claajxdnq00bva8vwhlsux1rp","_id":"claajxdnt00c7a8vwqmiucunv"},{"post_id":"claajxdlh007ua8vwdr3vd40k","tag_id":"claajxdnr00bya8vwhb1722h0","_id":"claajxdnt00c8a8vw9q79p4nn"},{"post_id":"claajxdls007za8vws37bhlnk","tag_id":"claajxdns00c2a8vw534x253g","_id":"claajxdnu00caa8vwgpjnjhp0"},{"post_id":"claajxdlu0086a8vw0q8zy83v","tag_id":"claajxdnt00c6a8vwcj4ddo2n","_id":"claajxdnv00cea8vwdfoo84vm"},{"post_id":"claajxdlu0086a8vw0q8zy83v","tag_id":"claajxdnt00c9a8vw0q6hw79m","_id":"claajxdnv00cfa8vwrybnyt5h"},{"post_id":"claajxdlu0086a8vw0q8zy83v","tag_id":"claajxdnu00cba8vwlbwkofgf","_id":"claajxdnv00cha8vw3nqlv9db"},{"post_id":"claajxdlu0086a8vw0q8zy83v","tag_id":"claajxdnu00cca8vwc4ys3bfw","_id":"claajxdnw00cia8vwbvur16x1"},{"post_id":"claajxdlw0088a8vw59fjhjwn","tag_id":"claajxdnt00c9a8vw0q6hw79m","_id":"claajxdnw00cka8vwe52edbvh"},{"post_id":"claajxdlw0088a8vw59fjhjwn","tag_id":"claajxdnu00cba8vwlbwkofgf","_id":"claajxdnw00cla8vwrjqeuub6"},{"post_id":"claajxdlx008ca8vwz41w9c84","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxdnx00cna8vw1j9buw39"},{"post_id":"claajxdlx008ca8vwz41w9c84","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxdnx00coa8vwodosh59x"},{"post_id":"claajxdlx008ca8vwz41w9c84","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxdnx00cqa8vwbeit48y2"},{"post_id":"claajxdlx008ca8vwz41w9c84","tag_id":"claajxdnw00cja8vwbiy0tnx4","_id":"claajxdnx00cra8vwayh0iffc"},{"post_id":"claajxdm0008fa8vwc669b18w","tag_id":"claajxdnt00c6a8vwcj4ddo2n","_id":"claajxdny00cta8vw6ecifi70"},{"post_id":"claajxdm0008fa8vwc669b18w","tag_id":"claajxdnx00cpa8vwyaoqvsgq","_id":"claajxdny00cua8vwwmtwal4x"},{"post_id":"claajxdm1008ja8vwjnysm3ri","tag_id":"claajxdnt00c6a8vwcj4ddo2n","_id":"claajxdnz00cxa8vwg7vh8fny"},{"post_id":"claajxdm1008ja8vwjnysm3ri","tag_id":"claajxdnx00cpa8vwyaoqvsgq","_id":"claajxdo000cya8vwfubnavjx"},{"post_id":"claajxdm3008ma8vwux826g9v","tag_id":"claajxdnj00bna8vwgugern1d","_id":"claajxdo100d3a8vwpkwggbxl"},{"post_id":"claajxdm3008ma8vwux826g9v","tag_id":"claajxdlz008da8vwzv19vl4i","_id":"claajxdo100d4a8vwwnw579bh"},{"post_id":"claajxdm3008ma8vwux826g9v","tag_id":"claajxdo000cza8vwjkyxcuef","_id":"claajxdo200d6a8vwsiyx0fyy"},{"post_id":"claajxdm3008ma8vwux826g9v","tag_id":"claajxdnq00bva8vwhlsux1rp","_id":"claajxdo200d7a8vwt13c9woj"},{"post_id":"claajxdm3008ma8vwux826g9v","tag_id":"claajxdo000d1a8vwyj53dhfu","_id":"claajxdo200d9a8vwq7ynftrf"},{"post_id":"claajxdm4008qa8vwfu6h2sko","tag_id":"claajxb4g001ha8vw743kuods","_id":"claajxdo200daa8vwgx3thgt4"},{"post_id":"claajxdm4008qa8vwfu6h2sko","tag_id":"claajxdo100d2a8vwgzsppy8i","_id":"claajxdo200dca8vwx66unuri"},{"post_id":"claajxdm4008qa8vwfu6h2sko","tag_id":"claajxdo100d5a8vw4d411o8k","_id":"claajxdo300dda8vwx0dedy7x"},{"post_id":"claajxdm6008ta8vwkf1srdc2","tag_id":"claajxdo200d8a8vwi9ivj0qz","_id":"claajxdo400dga8vwhq6h3dd7"},{"post_id":"claajxdm6008ta8vwkf1srdc2","tag_id":"claajxdo200dba8vw940ujwpr","_id":"claajxdo400dha8vwhyp2n2z2"},{"post_id":"claajxdm6008ta8vwkf1srdc2","tag_id":"claajxdo300dea8vw6i5e37ri","_id":"claajxdo400dja8vwfkpqqd7a"},{"post_id":"claajxdm8008xa8vwwxbqkqir","tag_id":"claajxdo300dfa8vwgwm521ec","_id":"claajxdo400dka8vwh73zk1zs"},{"post_id":"claajxdm90090a8vwv2w2cglv","tag_id":"claajxb3y0003a8vwjia2pk04","_id":"claajxdo500dma8vwkojspz1e"},{"post_id":"claajxdm90090a8vwv2w2cglv","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxdo600dna8vwe2yp4unv"},{"post_id":"claajxdm90090a8vwv2w2cglv","tag_id":"claajxdlz008da8vwzv19vl4i","_id":"claajxdo700dpa8vwfv0oxlo2"},{"post_id":"claajxdm90090a8vwv2w2cglv","tag_id":"claajxdo400dia8vwwz67pued","_id":"claajxdo700dqa8vw5urwsqhm"},{"post_id":"claajxdma0093a8vwahwnnsr9","tag_id":"claajxdo200d8a8vwi9ivj0qz","_id":"claajxdo800dsa8vwhbh0667p"},{"post_id":"claajxdma0093a8vwahwnnsr9","tag_id":"claajxdo200dba8vw940ujwpr","_id":"claajxdo800dta8vwfr1joa12"},{"post_id":"claajxdmc0097a8vwb83n7x9g","tag_id":"claajxdo200d8a8vwi9ivj0qz","_id":"claajxdo900dwa8vwxv9esjqm"},{"post_id":"claajxdmc0097a8vwb83n7x9g","tag_id":"claajxdnt00c6a8vwcj4ddo2n","_id":"claajxdo900dxa8vwaifajcwu"},{"post_id":"claajxdmd0099a8vwupfbq0lx","tag_id":"claajxdne00b6a8vw3qtqd427","_id":"claajxdob00e1a8vw70w1gdmn"},{"post_id":"claajxdmd0099a8vwupfbq0lx","tag_id":"claajxdo900dya8vwliz8g6fb","_id":"claajxdob00e2a8vwzscrch31"},{"post_id":"claajxdmd0099a8vwupfbq0lx","tag_id":"claajxdoa00dza8vwk4hnlbvo","_id":"claajxdob00e4a8vw6y6j8fqw"},{"post_id":"claajxdmf009ea8vwkldpwqpa","tag_id":"claajxdne00b6a8vw3qtqd427","_id":"claajxdod00e7a8vwjawjy98s"},{"post_id":"claajxdmf009ea8vwkldpwqpa","tag_id":"claajxdo900dya8vwliz8g6fb","_id":"claajxdod00e8a8vw2v8uxexi"},{"post_id":"claajxdmf009ea8vwkldpwqpa","tag_id":"claajxdoa00dza8vwk4hnlbvo","_id":"claajxdod00eaa8vw7fjgj01v"},{"post_id":"claajxdmg009ga8vw7bser6e4","tag_id":"claajxdne00b6a8vw3qtqd427","_id":"claajxdof00eda8vw1gipjt30"},{"post_id":"claajxdmg009ga8vw7bser6e4","tag_id":"claajxdo900dya8vwliz8g6fb","_id":"claajxdof00eea8vw4tsomf8g"},{"post_id":"claajxdmg009ga8vw7bser6e4","tag_id":"claajxdoa00dza8vwk4hnlbvo","_id":"claajxdof00ega8vwn1ugaro9"},{"post_id":"claajxdmi009la8vwrxgi4979","tag_id":"claajxdne00b6a8vw3qtqd427","_id":"claajxdoj00eja8vw49eabfai"},{"post_id":"claajxdmi009la8vwrxgi4979","tag_id":"claajxdo900dya8vwliz8g6fb","_id":"claajxdoj00eka8vwobv4pcf8"},{"post_id":"claajxdmi009la8vwrxgi4979","tag_id":"claajxdoa00dza8vwk4hnlbvo","_id":"claajxdoj00ema8vww0uirp9h"},{"post_id":"claajxdmj009na8vwguu89dqu","tag_id":"claajxdne00b6a8vw3qtqd427","_id":"claajxdok00eoa8vw23b43azh"},{"post_id":"claajxdmj009na8vwguu89dqu","tag_id":"claajxdnf00bba8vwap1qovy9","_id":"claajxdok00epa8vw4oq6dnf0"},{"post_id":"claajxdmk009sa8vw79q5f5n8","tag_id":"claajxdne00b6a8vw3qtqd427","_id":"claajxdom00eta8vwnszvncax"},{"post_id":"claajxdmk009sa8vw79q5f5n8","tag_id":"claajxdo900dya8vwliz8g6fb","_id":"claajxdom00eua8vwilwb9xty"},{"post_id":"claajxdmk009sa8vw79q5f5n8","tag_id":"claajxdoa00dza8vwk4hnlbvo","_id":"claajxdom00ewa8vwnhvf8tn6"},{"post_id":"claajxdmm009ua8vwqplbawfd","tag_id":"claajxdol00esa8vwsarofi49","_id":"claajxdoo00eza8vwmkd2ybb7"},{"post_id":"claajxdmm009ua8vwqplbawfd","tag_id":"claajxdo900dya8vwliz8g6fb","_id":"claajxdoo00f0a8vwg2lt3z26"},{"post_id":"claajxdmm009ua8vwqplbawfd","tag_id":"claajxdoa00dza8vwk4hnlbvo","_id":"claajxdoo00f2a8vwxeciwv9u"},{"post_id":"claajxdmo009za8vwk3omganq","tag_id":"claajxdo200d8a8vwi9ivj0qz","_id":"claajxdop00f3a8vw0309qe9y"},{"post_id":"claajxdmo009za8vwk3omganq","tag_id":"claajxdnt00c6a8vwcj4ddo2n","_id":"claajxdop00f4a8vwhm9bf0qi"},{"post_id":"claajxdmo009za8vwk3omganq","tag_id":"claajxb7k0045a8vwne35gqav","_id":"claajxdop00f5a8vwfm6ghs5b"},{"post_id":"claajxdpy00f6a8vwbhiy5no9","tag_id":"claajxdlu0084a8vw1ti5fcva","_id":"claajxdq500f9a8vwfpq1oa44"},{"post_id":"claajxdpy00f6a8vwbhiy5no9","tag_id":"claajxb430008a8vwg6o99n2s","_id":"claajxdq500faa8vwpw6l76p8"},{"post_id":"claajxdpy00f6a8vwbhiy5no9","tag_id":"claajxdq000f8a8vw6qc7ivhz","_id":"claajxdq500fca8vw3megjqeq"}],"Tag":[{"name":"编程","_id":"claajxb3y0003a8vwjia2pk04"},{"name":"学习","_id":"claajxb430008a8vwg6o99n2s"},{"name":"HTML","_id":"claajxb45000ca8vw3wz14gds"},{"name":"CSS","_id":"claajxb46000fa8vwp4fchs8r"},{"name":"前端","_id":"claajxb46000ia8vwx4d1owxw"},{"name":"Javascript","_id":"claajxb4a000sa8vwfwtuwp4u"},{"name":"Typescript","_id":"claajxb4c0012a8vwwtkfy992"},{"name":"Vue2","_id":"claajxb4e0017a8vwczafrag6"},{"name":"Redis","_id":"claajxb4f001ba8vw8pni0ws6"},{"name":"Docker","_id":"claajxb4g001ea8vw1owagwy6"},{"name":"Java","_id":"claajxb4g001ha8vw743kuods"},{"name":"坑","_id":"claajxb7k0045a8vwne35gqav"},{"name":"Matlab","_id":"claajxdkp006wa8vw56tbkvem"},{"name":"数学建模","_id":"claajxdkz0075a8vwpxeva38y"},{"name":"Maven","_id":"claajxdlf007pa8vwyrwk9aay"},{"name":"Mysql","_id":"claajxdll007wa8vwe5ls7pt6"},{"name":"数据库","_id":"claajxdlu0084a8vw1ti5fcva"},{"name":"后端","_id":"claajxdlz008da8vwzv19vl4i"},{"name":"Nginx","_id":"claajxdm2008ka8vwx967mr0f"},{"name":"中间件","_id":"claajxdm6008ra8vwj2u77r4w"},{"name":"行人重识别","_id":"claajxdne00b6a8vw3qtqd427"},{"name":"论文","_id":"claajxdnf00bba8vwap1qovy9"},{"name":"数据集","_id":"claajxdnh00bka8vwgx1tarpl"},{"name":"JavaWeb","_id":"claajxdnj00bna8vwgugern1d"},{"name":"SpringMVC","_id":"claajxdnq00bva8vwhlsux1rp"},{"name":"RESTful","_id":"claajxdnr00bya8vwhb1722h0"},{"name":"git","_id":"claajxdns00c2a8vw534x253g"},{"name":"python","_id":"claajxdnt00c6a8vwcj4ddo2n"},{"name":"手写识别","_id":"claajxdnt00c9a8vw0q6hw79m"},{"name":"MNIST","_id":"claajxdnu00cba8vwlbwkofgf"},{"name":"图像识别","_id":"claajxdnu00cca8vwc4ys3bfw"},{"name":"MyBatis","_id":"claajxdnw00cja8vwbiy0tnx4"},{"name":"numpy","_id":"claajxdnx00cpa8vwyaoqvsgq"},{"name":"Servlet","_id":"claajxdo000cza8vwjkyxcuef"},{"name":"Tomcat","_id":"claajxdo000d1a8vwyj53dhfu"},{"name":"设计模式","_id":"claajxdo100d2a8vwgzsppy8i"},{"name":"代理模式","_id":"claajxdo100d5a8vw4d411o8k"},{"name":"神经网络","_id":"claajxdo200d8a8vwi9ivj0qz"},{"name":"激活函数","_id":"claajxdo200dba8vw940ujwpr"},{"name":"代数系统","_id":"claajxdo300dea8vw6i5e37ri"},{"name":"感知机","_id":"claajxdo300dfa8vwgwm521ec"},{"name":"Web服务器","_id":"claajxdo400dia8vwwz67pued"},{"name":"深度学习","_id":"claajxdo900dya8vwliz8g6fb"},{"name":"图像处理","_id":"claajxdoa00dza8vwk4hnlbvo"},{"name":"目标检测","_id":"claajxdol00esa8vwsarofi49"},{"name":"MySQL","_id":"claajxdq000f8a8vw6qc7ivhz"}]}}