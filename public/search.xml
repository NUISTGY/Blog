<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java核心知识--缓冲流、转换流、序列化流</title>
      <link href="/2022/12/31/java%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86-%E6%B5%81/"/>
      <url>/2022/12/31/java%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86-%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="今日目标"><a href="#今日目标" class="headerlink" title="今日目标"></a>今日目标</h2><ul><li>IO资源的处理。<br> finnally释放资源<br> jdk 1.7开始的新技术 try-with-resources</li><li>缓冲流<br> 提高字节流和字符流读写数据的性能的。</li><li>转换流<br> 可以解决不同编码读取乱码的问题。</li><li>序列化<br> 可以实现把Java对象存储到文件中去。 </li><li>打印流<br> 可以方便的写数据出去，支持写任意类型的数据到文件中去，非常方便和简单以及强大。</li><li>属性集<br> 是一种Map集合。</li></ul><h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul><li><p>能够使用字节输入流读取数据到程序 </p><ul><li>InputStream is = new FileInputStream(“文件路径”);</li><li>is.read():读取一个字节</li><li>is.read(byte[] buffer):读取一个字节数组。</li></ul></li><li><p>能够理解读取数据read(byte[])方法的原理 </p><ul><li>read(byte[])：读取字节数据到一个字节数组中去，返回读取的字节数量，读取完毕返回-1</li></ul></li><li><p>能够使用字节流完成文件的复制 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（1）创建一个字节输入流管道与源文件接通。</span><br><span class="line">（2）创建一个字节输出流与目标文件接通。</span><br><span class="line">（3）创建一个字节数组作为桶</span><br><span class="line">（4）从字节输入流管道中读取数据，写出到字节输出流管道即可。</span><br><span class="line">（5）关闭资源！</span><br></pre></td></tr></table></figure></li><li><p>能够使用FileWriter写数据的5个方法 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a.public void write(int c):写一个字符出去</span><br><span class="line">b.public void write(String c)写一个字符串出去：</span><br><span class="line">c.public void write(char[] buffer):写一个字符数组出去</span><br><span class="line">d.public void write(String c ,int pos ,int len):写字符串的一部分出去</span><br><span class="line">e.public void write(char[] buffer,int pos ,int len):写一个字符数组的一部分出去</span><br></pre></td></tr></table></figure></li><li><p>能够说出FileWriter中关闭和刷新方法的区别 </p><ul><li>关闭包含刷新</li><li>关闭后流无法继续使用</li><li>刷新后流可以继续使用</li></ul></li><li><p>能够使用FileWriter写数据实现换行和追加写 </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">追加管道是： Writer fw = <span class="keyword">new</span> FileWriter(<span class="string">"Day10Demo/out03.txt"</span> , <span class="keyword">true</span>); <span class="comment">// 追加管道！！</span></span><br><span class="line">换行： fw.write(<span class="string">"\r\n"</span>); <span class="comment">// 写一个字符串的换行符！</span></span><br></pre></td></tr></table></figure></li><li><p>能够使用FileReader读数据一次一个字符 </p></li></ul><ul><li><p>能够使用FileReader读数据一次一个字符数组 </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Reader fr = <span class="keyword">new</span> FileReader(<span class="string">"Day10Demo/dlei02.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>[] buffer = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>]; <span class="comment">// 定义一个桶   // 3 + 3 + 1</span></span><br><span class="line"><span class="keyword">int</span> len ;  <span class="comment">// 记录每次读取的字符数量</span></span><br><span class="line"><span class="keyword">while</span>((len = fr.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">     String rs = <span class="keyword">new</span> String(buffer,<span class="number">0</span>,len);</span><br><span class="line">     System.out.print(rs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>能够使用Properties的load方法加载文件中配置信息 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.定义一个字节输入流管道与属性源文件接通</span></span><br><span class="line">InputStream is = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"Day10Demo/users.properties"</span>));</span><br><span class="line"><span class="comment">// 2.创建一个属性集对象加载文件中的数据。</span></span><br><span class="line">Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">System.out.println(pro);</span><br><span class="line"><span class="comment">// 3.把属性集对象的字节输入流文件数据加载到属性集对象pro中去。</span></span><br><span class="line">pro.load(is);</span><br><span class="line">System.out.println(pro);</span><br><span class="line"></span><br><span class="line">System.out.println(pro.getProperty(<span class="string">"dlei"</span>));</span><br><span class="line">System.out.println(pro.getProperty(<span class="string">"admin"</span>));</span><br></pre></td></tr></table></figure></li><li><p>能够使用字节缓冲流读取数据到程序 </p><ul><li>把之前的流包装就可以了！！</li></ul></li><li><p>能够使用字节缓冲流写出数据到文件</p><ul><li>把之前的流包装就可以了！！</li></ul></li><li><p>能够明确字符缓冲流的作用和基本用法 </p><ul><li>提高性能！读写字符的性能。</li></ul></li><li><p>能够使用缓冲流的特殊功能 </p><ul><li>字符输入缓冲流BufferedReader多了按照行读取：readLine();</li><li>字符输出缓冲流BufferedWriter多了换行方法：newLine();</li></ul></li><li><p>能够阐述编码表的意义 </p><ul><li>相同编码读取不会乱码</li><li>不同编码读取会乱码</li></ul></li><li><p>能够使用转换流读取指定编码的文本文件 </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码：UTF-8    文件：GBK(ab我爱你)</span></span><br><span class="line"><span class="comment">// 1.先提取文件的原始字节流: o o oo oo oo</span></span><br><span class="line">InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"D:\\itcast\\网络编程公开课\\Netty.txt"</span>);</span><br><span class="line"><span class="comment">// 2.把字节输入流转换成字符输入流：使用字符输入转换流。</span></span><br><span class="line"><span class="comment">//Reader isr = new InputStreamReader(is); // 默认编码UTF-8转字符流。</span></span><br><span class="line">Reader isr = <span class="keyword">new</span> InputStreamReader(is ,<span class="string">"GBK"</span>); <span class="comment">// 指定编码把字节流转换成字符流</span></span><br><span class="line"><span class="comment">// 3.把字符流包装成高级的缓冲字符输入流</span></span><br><span class="line">BufferedReader  br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line"><span class="comment">// 4.按照行读取</span></span><br><span class="line">String line ;</span><br><span class="line"><span class="keyword">while</span>((line = br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    System.out.println(line);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>能够使用转换流写入指定编码的文本文件 </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.写一个字节输出流通向文件</span></span><br><span class="line">OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"Day10Demo/out05.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.把字节输出流转换成字符输出流:以默认编码转换！！</span></span><br><span class="line"><span class="comment">// Writer fw = new OutputStreamWriter(os);  // 字符：UTF-8</span></span><br><span class="line">Writer fw = <span class="keyword">new</span> OutputStreamWriter(os,<span class="string">"GBK"</span>);  <span class="comment">// 字符：GBK</span></span><br><span class="line"><span class="comment">// 3.把字符输出流包装成缓冲字符输出流</span></span><br><span class="line">BufferedWriter  bw = <span class="keyword">new</span> BufferedWriter(fw);</span><br><span class="line"></span><br><span class="line">bw.write(<span class="string">"我爱你中国！"</span>);</span><br><span class="line">bw.write(<span class="string">"我爱你中国！"</span>);</span><br><span class="line">bw.close();</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>能够使用序列化流写出对象到文件 </p><ul><li><p>ObjectOutputStream</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建一个User对象</span></span><br><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"泷泽萝拉"</span>,<span class="string">"dongjing-lzll"</span>,<span class="string">"15longze"</span>,<span class="number">21</span>);</span><br><span class="line"><span class="comment">// 需求：把Java对象序列化到本地文件中去。</span></span><br><span class="line"><span class="comment">// 2.创建一个低级的字节输出流通向目标文件。</span></span><br><span class="line">OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"Day10Demo/obj.dat"</span>);</span><br><span class="line"><span class="comment">// 3.把低级的字节输出流包装成高级的对象字节输出流：</span></span><br><span class="line"><span class="comment">// 因为只有对象字节输出流才能够在这里做对象系列化！</span></span><br><span class="line">ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(os);</span><br><span class="line"><span class="comment">// 4.开始使用对象序列化流序列化对象。</span></span><br><span class="line">oos.writeObject(user);</span><br><span class="line">oos.close();</span><br><span class="line">System.out.println(<span class="string">"序列化成功！"</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>能够使用反序列化流读取文件到程序中 </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.定义一个字节输入流与Java对象的源文件接通</span></span><br><span class="line">InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">"Day10Demo/obj.dat"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.把低级的字节输入流包装成高级的对象字节输入流</span></span><br><span class="line">ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(is);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.反序列对象出来</span></span><br><span class="line">User user = (User) ois.readObject();</span><br><span class="line"></span><br><span class="line">System.out.println(user);</span><br></pre></td></tr></table></figure></li></ul><h1 id="第一章-字符流"><a href="#第一章-字符流" class="headerlink" title="第一章 字符流"></a>第一章 字符流</h1><p>当使用字节流读取文本文件时，可能会有一个小问题。就是遇到中文字符时，可能不会显示完整的字符，那是因为一个中文字符可能占用多个字节存储。所以Java提供一些字符流类，以字符为单位读写数据，专门用于处理文本文件。</p><h2 id="1-1-字符输入流【Reader】"><a href="#1-1-字符输入流【Reader】" class="headerlink" title="1.1 字符输入流【Reader】"></a>1.1 字符输入流【Reader】</h2><p><code>java.io.Reader</code>抽象类是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法。</p><ul><li><code>public void close()</code> ：关闭此流并释放与此流相关联的任何系统资源。    </li><li><code>public int read()</code>： 从输入流读取一个字符。 </li><li><code>public int read(char[] cbuf)</code>： 从输入流中读取一些字符，并将它们存储到字符数组 cbuf中 。</li></ul><h2 id="1-2-FileReader类"><a href="#1-2-FileReader类" class="headerlink" title="1.2 FileReader类"></a>1.2 FileReader类</h2><p><code>java.io.FileReader</code>类是读取字符文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p><blockquote><p>小贴士：</p><ol><li>字符编码：字节与字符的对应规则。Windows系统的中文编码默认是GBK编码表。</li></ol><p>idea中UTF-8</p><ol start="2"><li>字节缓冲区：一个字节数组，用来临时存储字节数据。</li></ol></blockquote><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>FileReader(File file)</code>： 创建一个新的 FileReader ，给定要读取的File对象。   </li><li><code>FileReader(String fileName)</code>： 创建一个新的 FileReader ，给定要读取的文件的名称。  </li></ul><p>当你创建一个流对象时，必须传入一个文件路径。类似于FileInputStream 。</p><ul><li>构造举例，代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReaderConstructor</span> <span class="title">throws</span> <span class="title">IOException</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"a.txt"</span>);</span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"b.txt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取字符数据"><a href="#读取字符数据" class="headerlink" title="读取字符数据"></a>读取字符数据</h3><ol><li><strong>读取字符</strong>：<code>read</code>方法，每次可以读取一个字符的数据，提升为int类型，读取到文件末尾，返回<code>-1</code>，循环读取，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FRRead</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">       FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"read.txt"</span>);</span><br><span class="line">      <span class="comment">// 定义变量，保存数据</span></span><br><span class="line">        <span class="keyword">int</span> b ；</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((b = fr.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>)b);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">黑</span><br><span class="line">马</span><br><span class="line">程</span><br><span class="line">序</span><br><span class="line">员</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：虽然读取了一个字符，但是会自动提升为int类型。</p></blockquote><ol><li><strong>使用字符数组读取</strong>：<code>read(char[] cbuf)</code>，每次读取b的长度个字符到数组中，返回读取到的有效字符个数，读取到末尾时，返回<code>-1</code> ，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FRRead</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">       FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"read.txt"</span>);</span><br><span class="line">      <span class="comment">// 定义变量，保存有效字符个数</span></span><br><span class="line">        <span class="keyword">int</span> len ；</span><br><span class="line">        <span class="comment">// 定义字符数组，作为装字符数据的容器</span></span><br><span class="line">         <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fr.read(cbuf))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(cbuf));</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">黑马</span><br><span class="line">程序</span><br><span class="line">员序</span><br></pre></td></tr></table></figure><p>获取有效的字符改进，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FISRead</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">       FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"read.txt"</span>);</span><br><span class="line">      <span class="comment">// 定义变量，保存有效字符个数</span></span><br><span class="line">        <span class="keyword">int</span> len ；</span><br><span class="line">        <span class="comment">// 定义字符数组，作为装字符数据的容器</span></span><br><span class="line">        <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fr.read(cbuf))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(cbuf,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 关闭资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">黑马</span><br><span class="line">程序</span><br><span class="line">员</span><br></pre></td></tr></table></figure><h2 id="1-3-字符输出流【Writer】"><a href="#1-3-字符输出流【Writer】" class="headerlink" title="1.3 字符输出流【Writer】"></a>1.3 字符输出流【Writer】</h2><p><code>java.io.Writer</code>抽象类是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li><code>public abstract void close()</code> ：关闭此输出流并释放与此流相关联的任何系统资源。  </li><li><code>public abstract void flush()</code> ：刷新此输出流并强制任何缓冲的输出字符被写出。  </li><li><code>public void write(int c)</code> ：写出一个字符。</li><li><code>public void write(char[] cbuf)</code>：将 b.length字符从指定的字符数组写出此输出流。  </li><li><code>public abstract void write(char[] b, int off, int len)</code> ：从指定的字符数组写出 len字符，从偏移量 off开始输出到此输出流。  </li><li><code>public void write(String str)</code> ：写出一个字符串。</li></ul><h2 id="1-4-FileWriter类"><a href="#1-4-FileWriter类" class="headerlink" title="1.4 FileWriter类"></a>1.4 FileWriter类</h2><p><code>java.io.FileWriter</code>类是写出字符到文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。</p><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>FileWriter(File file)</code>： 创建一个新的 FileWriter，给定要读取的File对象。   </li><li><code>FileWriter(String fileName)</code>： 创建一个新的 FileWriter，给定要读取的文件的名称。  </li></ul><p>当你创建一个流对象时，必须传入一个文件路径，类似于FileOutputStream。</p><ul><li>构造举例，代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileWriterConstructor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"a.txt"</span>);</span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(file);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"b.txt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基本写出数据"><a href="#基本写出数据" class="headerlink" title="基本写出数据"></a>基本写出数据</h3><p><strong>写出字符</strong>：<code>write(int b)</code> 方法，每次可以写出一个字符数据，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FWWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"fw.txt"</span>);     </span><br><span class="line">      <span class="comment">// 写出数据</span></span><br><span class="line">      fw.write(<span class="number">97</span>); <span class="comment">// 写出第1个字符</span></span><br><span class="line">      fw.write(<span class="string">'b'</span>); <span class="comment">// 写出第2个字符</span></span><br><span class="line">      fw.write(<span class="string">'C'</span>); <span class="comment">// 写出第3个字符</span></span><br><span class="line">      fw.write(<span class="number">30000</span>); <span class="comment">// 写出第4个字符，中文编码表中30000对应一个汉字。</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        【注意】关闭资源时,与FileOutputStream不同。</span></span><br><span class="line"><span class="comment">       如果不关闭,数据只是保存到缓冲区，并未保存到文件。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">// fw.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">abC田</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：</p><ol><li>虽然参数为int类型四个字节，但是只会保留一个字符的信息写出。</li><li>未调用close方法，数据只是保存到了缓冲区，并未写出到文件中。</li></ol></blockquote><h3 id="关闭和刷新"><a href="#关闭和刷新" class="headerlink" title="关闭和刷新"></a>关闭和刷新</h3><p>因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要<code>flush</code> 方法了。</p><ul><li><code>flush</code> ：刷新缓冲区，流对象可以继续使用。</li><li><code>close</code> ：关闭流，释放系统资源。关闭前会刷新缓冲区。</li></ul><p>代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FWWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"fw.txt"</span>);</span><br><span class="line">        <span class="comment">// 写出数据，通过flush</span></span><br><span class="line">        fw.write(<span class="string">'刷'</span>); <span class="comment">// 写出第1个字符</span></span><br><span class="line">        fw.flush();</span><br><span class="line">        fw.write(<span class="string">'新'</span>); <span class="comment">// 继续写出第2个字符，写出成功</span></span><br><span class="line">        fw.flush();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 写出数据，通过close</span></span><br><span class="line">        fw.write(<span class="string">'关'</span>); <span class="comment">// 写出第1个字符</span></span><br><span class="line">        fw.close();</span><br><span class="line">        fw.write(<span class="string">'闭'</span>); <span class="comment">// 继续写出第2个字符,【报错】java.io.IOException: Stream closed</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：即便是flush方法写出了数据，操作的最后还是要调用close方法，释放系统资源。</p></blockquote><h3 id="写出其他数据"><a href="#写出其他数据" class="headerlink" title="写出其他数据"></a>写出其他数据</h3><ol><li><strong>写出字符数组</strong> ：<code>write(char[] cbuf)</code> 和 <code>write(char[] cbuf, int off, int len)</code> ，每次可以写出字符数组中的数据，用法类似FileOutputStream，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FWWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"fw.txt"</span>);     </span><br><span class="line">      <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">      <span class="keyword">char</span>[] chars = <span class="string">"黑马程序员"</span>.toCharArray();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 写出字符数组</span></span><br><span class="line">      fw.write(chars); <span class="comment">// 黑马程序员</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">// 写出从索引2开始，2个字节。索引2是'程'，两个字节，也就是'程序'。</span></span><br><span class="line">        fw.write(b,<span class="number">2</span>,<span class="number">2</span>); <span class="comment">// 程序</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>写出字符串</strong>：<code>write(String str)</code> 和 <code>write(String str, int off, int len)</code> ，每次可以写出字符串中的数据，更为方便，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FWWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"fw.txt"</span>);     </span><br><span class="line">      <span class="comment">// 字符串</span></span><br><span class="line">      String msg = <span class="string">"黑马程序员"</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 写出字符数组</span></span><br><span class="line">      fw.write(msg); <span class="comment">//黑马程序员</span></span><br><span class="line">      </span><br><span class="line"><span class="comment">// 写出从索引2开始，2个字节。索引2是'程'，两个字节，也就是'程序'。</span></span><br><span class="line">        fw.write(msg,<span class="number">2</span>,<span class="number">2</span>);<span class="comment">// 程序</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>续写和换行</strong>：操作类似于FileOutputStream。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FWWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象，可以续写数据</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"fw.txt"</span>，<span class="keyword">true</span>);     </span><br><span class="line">      <span class="comment">// 写出字符串</span></span><br><span class="line">        fw.write(<span class="string">"黑马"</span>);</span><br><span class="line">      <span class="comment">// 写出换行</span></span><br><span class="line">      fw.write(<span class="string">"\r\n"</span>);</span><br><span class="line">      <span class="comment">// 写出字符串</span></span><br><span class="line">  fw.write(<span class="string">"程序员"</span>);</span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果:</span><br><span class="line">黑马</span><br><span class="line">程序员</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：字符流，只能操作文本文件，不能操作图片，视频等非文本文件。</p><p>当我们单纯读或者写文本文件时  使用字符流 其他情况使用字节流</p></blockquote><h1 id="第二章-IO资源的处理"><a href="#第二章-IO资源的处理" class="headerlink" title="第二章 IO资源的处理"></a>第二章 IO资源的处理</h1><h2 id="1-2-JDK7前处理"><a href="#1-2-JDK7前处理" class="headerlink" title="1.2 JDK7前处理"></a>1.2 JDK7前处理</h2><p>之前的入门练习，我们一直把异常抛出，而实际开发中并不能这样处理，建议使用<code>try...catch...finally</code> 代码块，处理异常部分，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandleException1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 声明变量</span></span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建流对象</span></span><br><span class="line">            fw = <span class="keyword">new</span> FileWriter(<span class="string">"fw.txt"</span>);</span><br><span class="line">            <span class="comment">// 写出数据</span></span><br><span class="line">            fw.write(<span class="string">"黑马程序员"</span>); <span class="comment">//黑马程序员</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fw != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fw.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-JDK7的处理"><a href="#1-3-JDK7的处理" class="headerlink" title="1.3 JDK7的处理"></a>1.3 JDK7的处理</h2><p>还可以使用JDK7优化后的<code>try-with-resource</code> 语句，该语句确保了每个资源在语句结束时关闭。所谓的资源（resource）是指在程序完成后，必须关闭的对象。</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (创建流对象语句，如果多个,使用<span class="string">';'</span>隔开) &#123;</span><br><span class="line"><span class="comment">// 读写数据</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandleException2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 创建流对象</span></span><br><span class="line">        <span class="keyword">try</span> ( FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"fw.txt"</span>); ) &#123;</span><br><span class="line">            <span class="comment">// 写出数据</span></span><br><span class="line">            fw.write(<span class="string">"黑马程序员"</span>); <span class="comment">//黑马程序员</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第三章-属性集"><a href="#第三章-属性集" class="headerlink" title="第三章 属性集"></a>第三章 属性集</h1><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><p><code>java.util.Properties</code> 继承于<code>Hashtable</code> ，来表示一个持久的属性集。它使用键值结构存储数据，每个键及其对应值都是一个字符串。该类也被许多Java类使用，比如获取系统属性时，<code>System.getProperties</code> 方法就是返回一个<code>Properties</code>对象。</p><h2 id="3-2-Properties类"><a href="#3-2-Properties类" class="headerlink" title="3.2 Properties类"></a>3.2 Properties类</h2><h3 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public Properties()</code> :创建一个空的属性列表。</li></ul><h3 id="基本的存储方法"><a href="#基本的存储方法" class="headerlink" title="基本的存储方法"></a>基本的存储方法</h3><ul><li><code>public Object setProperty(String key, String value)</code> ： 保存一对属性。  </li><li><code>public String getProperty(String key)</code> ：使用此属性列表中指定的键搜索属性值。</li><li><code>public Set&lt;String&gt; stringPropertyNames()</code> ：所有键的名称的集合。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建属性集对象</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 添加键值对元素</span></span><br><span class="line">        properties.setProperty(<span class="string">"filename"</span>, <span class="string">"a.txt"</span>);</span><br><span class="line">        properties.setProperty(<span class="string">"length"</span>, <span class="string">"209385038"</span>);</span><br><span class="line">        properties.setProperty(<span class="string">"location"</span>, <span class="string">"D:\\a.txt"</span>);</span><br><span class="line">        <span class="comment">// 打印属性集对象</span></span><br><span class="line">        System.out.println(properties);</span><br><span class="line">        <span class="comment">// 通过键,获取属性值</span></span><br><span class="line">        System.out.println(properties.getProperty(<span class="string">"filename"</span>));</span><br><span class="line">        System.out.println(properties.getProperty(<span class="string">"length"</span>));</span><br><span class="line">        System.out.println(properties.getProperty(<span class="string">"location"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历属性集,获取所有键的集合</span></span><br><span class="line">        Set&lt;String&gt; strings = properties.stringPropertyNames();</span><br><span class="line">        <span class="comment">// 打印键值对</span></span><br><span class="line">        <span class="keyword">for</span> (String key : strings ) &#123;</span><br><span class="line">          System.out.println(key+<span class="string">" -- "</span>+properties.getProperty(key));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">&#123;filename=a.txt, length=<span class="number">209385038</span>, location=D:\a.txt&#125;</span><br><span class="line">a.txt</span><br><span class="line"><span class="number">209385038</span></span><br><span class="line">D:\a.txt</span><br><span class="line">filename -- a.txt</span><br><span class="line">length -- <span class="number">209385038</span></span><br><span class="line">location -- D:\a.txt</span><br></pre></td></tr></table></figure><h3 id="与流相关的方法"><a href="#与流相关的方法" class="headerlink" title="与流相关的方法"></a>与流相关的方法</h3><ul><li><code>public void load(InputStream inStream)</code>： 从字节输入流中读取键值对。 </li></ul><p>参数中使用了字节输入流，通过流对象，可以关联到某文件上，这样就能够加载文本中的数据了。文本数据格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">filename=a.txt</span><br><span class="line">length=209385038</span><br><span class="line">location=D:\a.txt</span><br></pre></td></tr></table></figure><p>加载代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建属性集对象</span></span><br><span class="line">        Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 加载文本中信息到属性集</span></span><br><span class="line">        pro.load(<span class="keyword">new</span> FileInputStream(<span class="string">"read.txt"</span>));</span><br><span class="line">        <span class="comment">// 遍历集合并打印</span></span><br><span class="line">        Set&lt;String&gt; strings = pro.stringPropertyNames();</span><br><span class="line">        <span class="keyword">for</span> (String key : strings ) &#123;</span><br><span class="line">          System.out.println(key+<span class="string">" -- "</span>+pro.getProperty(key));</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">filename -- a.txt</span><br><span class="line">length -- <span class="number">209385038</span></span><br><span class="line">location -- D:\a.txt</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：文本中的数据，必须是键值对形式，可以使用空格、等号、冒号等符号分隔。</p></blockquote><h1 id="第四章-缓冲流"><a href="#第四章-缓冲流" class="headerlink" title="第四章 缓冲流"></a>第四章 缓冲流</h1><p>昨天学习了基本的一些流，作为IO流的入门，今天我们要见识一些更强大的流。比如能够高效读写的缓冲流，能够转换编码的转换流，能够持久化存储对象的序列化流等等。这些功能更为强大的流，都是在基本的流对象基础之上创建而来的，就像穿上铠甲的武士一样，相当于是对基本流对象的一种增强。</p><h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h2><p>缓冲流,也叫高效流，是对4个基本的<code>FileXxx</code> 流的增强，所以也是4个流，按照数据类型分类：</p><ul><li><strong>字节缓冲流</strong>：<code>BufferedInputStream</code>，<code>BufferedOutputStream</code> </li><li><strong>字符缓冲流</strong>：<code>BufferedReader</code>，<code>BufferedWriter</code></li></ul><p>缓冲流的基本原理，是在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统IO次数，从而提高读写的效率。</p><h2 id="4-2-字节缓冲流"><a href="#4-2-字节缓冲流" class="headerlink" title="4.2 字节缓冲流"></a>4.2 字节缓冲流</h2><h3 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public BufferedInputStream(InputStream in)</code> ：创建一个 新的缓冲输入流。 </li><li><code>public BufferedOutputStream(OutputStream out)</code>： 创建一个新的缓冲输出流。</li></ul><p>构造举例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建字节缓冲输入流</span></span><br><span class="line">BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"bis.txt"</span>));</span><br><span class="line"><span class="comment">// 创建字节缓冲输出流</span></span><br><span class="line">BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"bos.txt"</span>));</span><br></pre></td></tr></table></figure><h3 id="效率测试"><a href="#效率测试" class="headerlink" title="效率测试"></a>效率测试</h3><p>查询API，缓冲流读写方法与基本的流是一致的，我们通过复制大文件（375MB），测试它的效率。</p><ol><li>基本流，代码如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 记录开始时间</span></span><br><span class="line">      <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"><span class="comment">// 创建流对象</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"jdk8.exe"</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"copy.exe"</span>)</span><br><span class="line">        )&#123;</span><br><span class="line">        <span class="comment">// 读写数据</span></span><br><span class="line">            <span class="keyword">int</span> b;</span><br><span class="line">            <span class="keyword">while</span> ((b = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fos.write(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"普通流复制时间:"</span>+(end - start)+<span class="string">" 毫秒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">十几分钟过去了...</span><br></pre></td></tr></table></figure><ol start="2"><li>缓冲流，代码如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 记录开始时间</span></span><br><span class="line">      <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"><span class="comment">// 创建流对象</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"jdk8.exe"</span>));</span><br><span class="line">     BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"copy.exe"</span>));</span><br><span class="line">        )&#123;</span><br><span class="line">        <span class="comment">// 读写数据</span></span><br><span class="line">            <span class="keyword">int</span> b;</span><br><span class="line">            <span class="keyword">while</span> ((b = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"缓冲流复制时间:"</span>+(end - start)+<span class="string">" 毫秒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">缓冲流复制时间:<span class="number">8016</span> 毫秒</span><br></pre></td></tr></table></figure><p>如何更快呢？</p><p>使用数组的方式，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">      <span class="comment">// 记录开始时间</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"><span class="comment">// 创建流对象</span></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"jdk8.exe"</span>));</span><br><span class="line"> BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"copy.exe"</span>));</span><br><span class="line">        )&#123;</span><br><span class="line">          <span class="comment">// 读写数据</span></span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">8</span>*<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(bytes, <span class="number">0</span> , len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 记录结束时间</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"缓冲流使用数组复制时间:"</span>+(end - start)+<span class="string">" 毫秒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">缓冲流使用数组复制时间:<span class="number">666</span> 毫秒</span><br></pre></td></tr></table></figure><h2 id="4-3-字符缓冲流"><a href="#4-3-字符缓冲流" class="headerlink" title="4.3 字符缓冲流"></a>4.3 字符缓冲流</h2><h3 id="构造方法-4"><a href="#构造方法-4" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public BufferedReader(Reader in)</code> ：创建一个 新的缓冲输入流。 </li><li><code>public BufferedWriter(Writer out)</code>： 创建一个新的缓冲输出流。</li></ul><p>构造举例，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建字符缓冲输入流</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"br.txt"</span>));</span><br><span class="line"><span class="comment">// 创建字符缓冲输出流</span></span><br><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"bw.txt"</span>));</span><br></pre></td></tr></table></figure><h3 id="特有方法"><a href="#特有方法" class="headerlink" title="特有方法"></a>特有方法</h3><p>字符缓冲流的基本方法与普通字符流调用方式一致，不再阐述，我们来看它们具备的特有方法。</p><ul><li>BufferedReader：<code>public String readLine()</code>: 读一行文字。 </li><li>BufferedWriter：<code>public void newLine()</code>: 写一行行分隔符,由系统属性定义符号。 </li></ul><p><code>readLine</code>方法演示，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedReaderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="comment">// 创建流对象</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"in.txt"</span>));</span><br><span class="line"><span class="comment">// 定义字符串,保存读取的一行文字</span></span><br><span class="line">        String line  = <span class="keyword">null</span>;</span><br><span class="line">      <span class="comment">// 循环读取,读取到最后返回null</span></span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(line);</span><br><span class="line">            System.out.println(<span class="string">"------"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>newLine</code>方法演示，代码如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedWriterDemo</span> <span class="title">throws</span> <span class="title">IOException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException  </span>&#123;</span><br><span class="line">      <span class="comment">// 创建流对象</span></span><br><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"out.txt"</span>));</span><br><span class="line">      <span class="comment">// 写出数据</span></span><br><span class="line">        bw.write(<span class="string">"黑马"</span>);</span><br><span class="line">      <span class="comment">// 写出换行</span></span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.write(<span class="string">"程序"</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.write(<span class="string">"员"</span>);</span><br><span class="line">        bw.newLine();</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出效果:</span><br><span class="line">黑马</span><br><span class="line">程序</span><br><span class="line">员</span><br></pre></td></tr></table></figure><h2 id="4-4-练习-文本排序"><a href="#4-4-练习-文本排序" class="headerlink" title="4.4 练习:文本排序"></a>4.4 练习:文本排序</h2><p>请将文本信息恢复顺序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">3.侍中、侍郎郭攸之、费祎、董允等，此皆良实，志虑忠纯，是以先帝简拔以遗陛下。愚以为宫中之事，事无大小，悉以咨之，然后施行，必得裨补阙漏，有所广益。</span><br><span class="line">8.愿陛下托臣以讨贼兴复之效，不效，则治臣之罪，以告先帝之灵。若无兴德之言，则责攸之、祎、允等之慢，以彰其咎；陛下亦宜自谋，以咨诹善道，察纳雅言，深追先帝遗诏，臣不胜受恩感激。</span><br><span class="line">4.将军向宠，性行淑均，晓畅军事，试用之于昔日，先帝称之曰能，是以众议举宠为督。愚以为营中之事，悉以咨之，必能使行阵和睦，优劣得所。</span><br><span class="line">2.宫中府中，俱为一体，陟罚臧否，不宜异同。若有作奸犯科及为忠善者，宜付有司论其刑赏，以昭陛下平明之理，不宜偏私，使内外异法也。</span><br><span class="line">1.先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。然侍卫之臣不懈于内，忠志之士忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气，不宜妄自菲薄，引喻失义，以塞忠谏之路也。</span><br><span class="line">9.今当远离，临表涕零，不知所言。</span><br><span class="line">6.臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。先帝不以臣卑鄙，猥自枉屈，三顾臣于草庐之中，咨臣以当世之事，由是感激，遂许先帝以驱驰。后值倾覆，受任于败军之际，奉命于危难之间，尔来二十有一年矣。</span><br><span class="line">7.先帝知臣谨慎，故临崩寄臣以大事也。受命以来，夙夜忧叹，恐付托不效，以伤先帝之明，故五月渡泸，深入不毛。今南方已定，兵甲已足，当奖率三军，北定中原，庶竭驽钝，攘除奸凶，兴复汉室，还于旧都。此臣所以报先帝而忠陛下之职分也。至于斟酌损益，进尽忠言，则攸之、祎、允之任也。</span><br><span class="line">5.亲贤臣，远小人，此先汉所以兴隆也；亲小人，远贤臣，此后汉所以倾颓也。先帝在时，每与臣论此事，未尝不叹息痛恨于桓、灵也。侍中、尚书、长史、参军，此悉贞良死节之臣，愿陛下亲之信之，则汉室之隆，可计日而待也。</span><br></pre></td></tr></table></figure><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><ol><li>逐行读取文本信息。</li><li>解析文本信息到集合中。</li><li>遍历集合，按顺序，写出文本信息。</li></ol><h3 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建map集合,保存文本数据,键为序号,值为文字</span></span><br><span class="line">        HashMap&lt;String, String&gt; lineMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建流对象</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"in.txt"</span>));</span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"out.txt"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取数据</span></span><br><span class="line">        String line  = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 解析文本</span></span><br><span class="line">            String[] split = line.split(<span class="string">"\\."</span>);</span><br><span class="line">            <span class="comment">// 保存到集合</span></span><br><span class="line">            lineMap.put(split[<span class="number">0</span>],split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历map集合</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lineMap.size(); i++) &#123;</span><br><span class="line">            String key = String.valueOf(i);</span><br><span class="line">            <span class="comment">// 获取map中文本</span></span><br><span class="line">            String value = lineMap.get(key);</span><br><span class="line">          <span class="comment">// 写出拼接文本</span></span><br><span class="line">            bw.write(key+<span class="string">"."</span>+value);</span><br><span class="line">          <span class="comment">// 写出换行</span></span><br><span class="line">            bw.newLine();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第五章-转换流"><a href="#第五章-转换流" class="headerlink" title="第五章 转换流"></a>第五章 转换流</h1><h2 id="5-1-字符编码和字符集"><a href="#5-1-字符编码和字符集" class="headerlink" title="5.1 字符编码和字符集"></a>5.1 字符编码和字符集</h2><h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><p>计算机中储存的信息都是用二进制数表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符存储到计算机中，称为<strong>编码</strong> 。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为<strong>解码</strong> 。比如说，按照A规则存储，同样按照A规则解析，那么就能显示正确的文本f符号。反之，按照A规则存储，再按照B规则解析，就会导致乱码现象。</p><ul><li><strong>字符编码<code>Character Encoding</code></strong> : 就是一套自然语言的字符与二进制数之间的对应规则。</li></ul><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><ul><li><strong>字符集 <code>Charset</code></strong>：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</li></ul><p>计算机要准确的存储和识别各种字符集符号，需要进行字符编码，一套字符集必然至少有一套字符编码。常见字符集有ASCII字符集、GBK字符集、Unicode字符集等。<img src="https://i.328888.xyz/2022/12/31/nGt9J.jpeg" alt></p><p>可见，当指定了<strong>编码</strong>，它所对应的<strong>字符集</strong>自然就指定了，所以<strong>编码</strong>才是我们最终要关心的。</p><ul><li><strong>ASCII字符集</strong> ：<ul><li>ASCII（American Standard Code for Information Interchange，美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统，用于显示现代英语，主要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）。</li><li>基本的ASCII字符集，使用7位（bits）表示一个字符，共128字符。ASCII的扩展字符集使用8位（bits）表示一个字符，共256字符，方便支持欧洲常用字符。</li></ul></li><li><strong>ISO-8859-1字符集</strong>：<ul><li>拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰、丹麦、德语、意大利语、西班牙语等。</li><li>ISO-5559-1使用单字节编码，兼容ASCII编码。</li></ul></li><li><strong>GBxxx字符集</strong>：<ul><li>GB就是国标的意思，是为了显示中文而设计的一套字符集。</li><li><strong>GB2312</strong>：简体中文码表。一个小于127的字符的意义与原来相同。但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含7000多个简体汉字，此外数学符号、罗马希腊的字母、日文的假名们都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。</li><li><strong>GBK</strong>：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了双字节编码方案，共收录了21003个汉字，完全兼容GB2312标准，同时支持繁体汉字以及日韩汉字等。</li><li><strong>GB18030</strong>：最新的中文码表。收录汉字70244个，采用多字节编码，每个字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。</li></ul></li><li><strong>Unicode字符集</strong> ：<ul><li>Unicode编码系统为表达任意语言的任意字符而设计，是业界的一种标准，也称为统一码、标准万国码。</li><li>它最多使用4个字节的数字来表达每个字母、符号，或者文字。有三种编码方案，UTF-8、UTF-16和UTF-32。最为常用的UTF-8编码。</li><li>UTF-8编码，可以用来表示Unicode标准中任何字符，它是电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。所以，我们开发Web应用，也要使用UTF-8编码。它使用一至四个字节为每个字符编码，编码规则：<ol><li>128个US-ASCII字符，只需一个字节编码。</li><li>拉丁文等字符，需要二个字节编码。 </li><li>大部分常用字（含中文），使用三个字节编码。</li><li>其他极少使用的Unicode辅助字符，使用四字节编码。</li></ol></li></ul></li></ul><h2 id="5-2-编码引出的问题"><a href="#5-2-编码引出的问题" class="headerlink" title="5.2 编码引出的问题"></a>5.2 编码引出的问题</h2><p>在IDEA中，使用<code>FileReader</code> 读取项目中的文本文件。由于IDEA的设置，都是默认的<code>UTF-8</code>编码，所以没有任何问题。但是，当读取Windows系统中创建的文本文件时，由于Windows系统的默认是GBK编码，就会出现乱码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReaderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileReader fileReader = <span class="keyword">new</span> FileReader(<span class="string">"E:\\File_GBK.txt"</span>);</span><br><span class="line">        <span class="keyword">int</span> read;</span><br><span class="line">        <span class="keyword">while</span> ((read = fileReader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)read);</span><br><span class="line">        &#125;</span><br><span class="line">        fileReader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">���</span><br></pre></td></tr></table></figure><p>那么如何读取GBK编码的文件呢？ </p><h2 id="5-3-InputStreamReader类"><a href="#5-3-InputStreamReader类" class="headerlink" title="5.3 InputStreamReader类"></a>5.3 InputStreamReader类</h2><p>转换流<code>java.io.InputStreamReader</code>，是Reader的子类，是从字节流到字符流的桥梁。它读取字节，并使用指定的字符集将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。 </p><h3 id="构造方法-5"><a href="#构造方法-5" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>InputStreamReader(InputStream in)</code>: 创建一个使用默认字符集的字符流。 </li><li><code>InputStreamReader(InputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</li></ul><p>构造举例，代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"in.txt"</span>));</span><br><span class="line">InputStreamReader isr2 = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"in.txt"</span>) , <span class="string">"GBK"</span>);</span><br></pre></td></tr></table></figure><h3 id="指定编码读取"><a href="#指定编码读取" class="headerlink" title="指定编码读取"></a>指定编码读取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReaderDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">// 定义文件路径,文件为gbk编码</span></span><br><span class="line">        String FileName = <span class="string">"E:\\file_gbk.txt"</span>;</span><br><span class="line">      <span class="comment">// 创建流对象,默认UTF8编码</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(FileName));</span><br><span class="line">      <span class="comment">// 创建流对象,指定GBK编码</span></span><br><span class="line">        InputStreamReader isr2 = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(FileName) , <span class="string">"GBK"</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment">// 定义变量,保存字符</span></span><br><span class="line">        <span class="keyword">int</span> read;</span><br><span class="line">      <span class="comment">// 使用默认编码字符流读取,乱码</span></span><br><span class="line">        <span class="keyword">while</span> ((read = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)read); <span class="comment">// ��Һ�</span></span><br><span class="line">        &#125;</span><br><span class="line">        isr.close();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 使用指定编码字符流读取,正常解析</span></span><br><span class="line">        <span class="keyword">while</span> ((read = isr2.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)read);<span class="comment">// 大家好</span></span><br><span class="line">        &#125;</span><br><span class="line">        isr2.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-4-OutputStreamWriter类"><a href="#5-4-OutputStreamWriter类" class="headerlink" title="5.4 OutputStreamWriter类"></a>5.4 OutputStreamWriter类</h2><p>转换流<code>java.io.OutputStreamWriter</code> ，是Writer的子类，是从字符流到字节流的桥梁。使用指定的字符集将字符编码为字节。它的字符集可以由名称指定，也可以接受平台的默认字符集。 </p><h3 id="构造方法-6"><a href="#构造方法-6" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>OutputStreamWriter(OutputStream in)</code>: 创建一个使用默认字符集的字符流。 </li><li><code>OutputStreamWriter(OutputStream in, String charsetName)</code>: 创建一个指定字符集的字符流。</li></ul><p>构造举例，代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OutputStreamWriter isr = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.txt"</span>));</span><br><span class="line">OutputStreamWriter isr2 = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"out.txt"</span>) , <span class="string">"GBK"</span>);</span><br></pre></td></tr></table></figure><h3 id="指定编码写出"><a href="#指定编码写出" class="headerlink" title="指定编码写出"></a>指定编码写出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">// 定义文件路径</span></span><br><span class="line">        String FileName = <span class="string">"E:\\out.txt"</span>;</span><br><span class="line">      <span class="comment">// 创建流对象,默认UTF8编码</span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(FileName));</span><br><span class="line">        <span class="comment">// 写出数据</span></span><br><span class="line">      osw.write(<span class="string">"你好"</span>); <span class="comment">// 保存为6个字节</span></span><br><span class="line">        osw.close();</span><br><span class="line">      </span><br><span class="line"><span class="comment">// 定义文件路径</span></span><br><span class="line">String FileName2 = <span class="string">"E:\\out2.txt"</span>;</span><br><span class="line">     <span class="comment">// 创建流对象,指定GBK编码</span></span><br><span class="line">        OutputStreamWriter osw2 = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(FileName2),<span class="string">"GBK"</span>);</span><br><span class="line">        <span class="comment">// 写出数据</span></span><br><span class="line">      osw2.write(<span class="string">"你好"</span>);<span class="comment">// 保存为4个字节</span></span><br><span class="line">        osw2.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="转换流理解图解"><a href="#转换流理解图解" class="headerlink" title="转换流理解图解"></a>转换流理解图解</h3><p><strong>转换流是字节与字符间的桥梁！</strong><img src="https://i.328888.xyz/2022/12/31/nGUkX.jpeg" alt></p><h2 id="5-5-练习：转换文件编码"><a href="#5-5-练习：转换文件编码" class="headerlink" title="5.5 练习：转换文件编码"></a>5.5 练习：转换文件编码</h2><p>将GBK编码的文本文件，转换为UTF-8编码的文本文件。</p><h3 id="案例分析-1"><a href="#案例分析-1" class="headerlink" title="案例分析"></a>案例分析</h3><ol><li>指定GBK编码的转换流，读取文本文件。</li><li>使用UTF-8编码的转换流，写出文本文件。</li></ol><h3 id="案例实现-1"><a href="#案例实现-1" class="headerlink" title="案例实现"></a>案例实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;      </span><br><span class="line">    <span class="comment">// 1.定义文件路径</span></span><br><span class="line">     String srcFile = <span class="string">"file_gbk.txt"</span>;</span><br><span class="line">        String destFile = <span class="string">"file_utf8.txt"</span>;</span><br><span class="line"><span class="comment">// 2.创建流对象</span></span><br><span class="line">    <span class="comment">// 2.1 转换输入流,指定GBK编码</span></span><br><span class="line">        Reader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(srcFile) , <span class="string">"GBK"</span>);</span><br><span class="line">    <span class="comment">// 2.2 转换输出流,默认utf8编码</span></span><br><span class="line">        Writer osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(destFile));</span><br><span class="line"><span class="comment">// 3.读写数据</span></span><br><span class="line">    <span class="comment">// 3.1 定义数组</span></span><br><span class="line">        <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="comment">// 3.2 定义长度</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">    <span class="comment">// 3.3 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((len = isr.read(cbuf))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 循环写出</span></span><br><span class="line">          osw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">// 4.释放资源</span></span><br><span class="line">        osw.close();</span><br><span class="line">        isr.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第六章-序列化"><a href="#第六章-序列化" class="headerlink" title="第六章 序列化"></a>第六章 序列化</h1><h2 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h2><p>​        Java 提供了一种对象<strong>序列化</strong>的机制。用一个字节序列可以表示一个对象，该字节序列包含该<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的属性</code>等信息。字节序列写出到文件之后，相当于文件中<strong>持久保存</strong>了一个对象的信息。 </p><p>​        反之，该字节序列还可以从文件中读取回来，重构对象，对它进行<strong>反序列化</strong>。<code>对象的数据</code>、<code>对象的类型</code>和<code>对象中存储的数据</code>信息，都可以用来在内存中创建对象。看图理解序列化： <img src="https://i.328888.xyz/2022/12/31/nGnBt.jpeg" alt></p><h2 id="6-2-ObjectOutputStream类"><a href="#6-2-ObjectOutputStream类" class="headerlink" title="6.2 ObjectOutputStream类"></a>6.2 ObjectOutputStream类</h2><p><code>java.io.ObjectOutputStream</code> 类，将Java对象的原始数据类型写出到文件,实现对象的持久存储。</p><h3 id="构造方法-7"><a href="#构造方法-7" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public ObjectOutputStream(OutputStream out)</code>： 创建一个指定OutputStream的ObjectOutputStream。</li></ul><p>构造举例，代码如下：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileOutputStream fileOut = <span class="keyword">new</span> FileOutputStream(<span class="string">"employee.txt"</span>);</span><br><span class="line">ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(fileOut);</span><br></pre></td></tr></table></figure><h3 id="序列化操作"><a href="#序列化操作" class="headerlink" title="序列化操作"></a>序列化操作</h3><ol><li>一个对象要想序列化，必须满足两个条件:</li></ol><ul><li>该类必须实现<code>java.io.Serializable</code> 接口，<code>Serializable</code> 是一个标记接口，不实现此接口的类将不会使任何状态序列化或反序列化，会抛出<code>NotSerializableException</code> 。</li><li>该类的所有属性必须是可序列化的。如果有一个属性不需要可序列化的，则该属性必须注明是瞬态的，使用<code>transient</code> 关键字修饰。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String address;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">transient</span> <span class="keyword">int</span> age; <span class="comment">// transient瞬态修饰成员,不会被序列化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addressCheck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Address  check : "</span> + name + <span class="string">" -- "</span> + address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.写出对象方法</p><ul><li><code>public final void writeObject (Object obj)</code> : 将指定的对象写出。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeDemo</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span>   </span>&#123;</span><br><span class="line">    Employee e = <span class="keyword">new</span> Employee();</span><br><span class="line">    e.name = <span class="string">"zhangsan"</span>;</span><br><span class="line">    e.address = <span class="string">"beiqinglu"</span>;</span><br><span class="line">    e.age = <span class="number">20</span>; </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 创建序列化流对象</span></span><br><span class="line">          ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"employee.txt"</span>));</span><br><span class="line">        <span class="comment">// 写出对象</span></span><br><span class="line">        out.writeObject(e);</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        out.close();</span><br><span class="line">        fileOut.close();</span><br><span class="line">        System.out.println(<span class="string">"Serialized data is saved"</span>); <span class="comment">// 姓名，地址被序列化，年龄没有被序列化。</span></span><br><span class="line">        &#125; <span class="keyword">catch</span>(IOException i)   &#123;</span><br><span class="line">            i.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">Serialized data is saved</span><br></pre></td></tr></table></figure><h2 id="6-3-ObjectInputStream类"><a href="#6-3-ObjectInputStream类" class="headerlink" title="6.3 ObjectInputStream类"></a>6.3 ObjectInputStream类</h2><p>ObjectInputStream反序列化流，将之前使用ObjectOutputStream序列化的原始数据恢复为对象。 </p><h3 id="构造方法-8"><a href="#构造方法-8" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public ObjectInputStream(InputStream in)</code>： 创建一个指定InputStream的ObjectInputStream。</li></ul><h3 id="反序列化操作1"><a href="#反序列化操作1" class="headerlink" title="反序列化操作1"></a>反序列化操作1</h3><p>如果能找到一个对象的class文件，我们可以进行反序列化操作，调用<code>ObjectInputStream</code>读取对象的方法：</p><ul><li><code>public final Object readObject ()</code> : 读取一个对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeserializeDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span>   </span>&#123;</span><br><span class="line">        Employee e = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="comment">// 创建反序列化流</span></span><br><span class="line">             FileInputStream fileIn = <span class="keyword">new</span> FileInputStream(<span class="string">"employee.txt"</span>);</span><br><span class="line">             ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(fileIn);</span><br><span class="line">             <span class="comment">// 读取一个对象</span></span><br><span class="line">             e = (Employee) in.readObject();</span><br><span class="line">             <span class="comment">// 释放资源</span></span><br><span class="line">             in.close();</span><br><span class="line">             fileIn.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException i) &#123;</span><br><span class="line">             <span class="comment">// 捕获其他异常</span></span><br><span class="line">             i.printStackTrace();</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(ClassNotFoundException c)  &#123;</span><br><span class="line">        <span class="comment">// 捕获类找不到异常</span></span><br><span class="line">             System.out.println(<span class="string">"Employee class not found"</span>);</span><br><span class="line">             c.printStackTrace();</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 无异常,直接打印输出</span></span><br><span class="line">        System.out.println(<span class="string">"Name: "</span> + e.name);<span class="comment">// zhangsan</span></span><br><span class="line">        System.out.println(<span class="string">"Address: "</span> + e.address); <span class="comment">// beiqinglu</span></span><br><span class="line">        System.out.println(<span class="string">"age: "</span> + e.age); <span class="comment">// 0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对于JVM可以反序列化对象，它必须是能够找到class文件的类。如果找不到该类的class文件，则抛出一个 <code>ClassNotFoundException</code> 异常。</strong>  </p><h3 id="反序列化操作2"><a href="#反序列化操作2" class="headerlink" title="反序列化操作2"></a><strong>反序列化操作2</strong></h3><p><strong>另外，当JVM反序列化对象时，能找到class文件，但是class文件在序列化对象之后发生了修改，那么反序列化操作也会失败，抛出一个<code>InvalidClassException</code>异常。</strong>发生这个异常的原因如下：</p><ul><li>该类的序列版本号与从流中读取的类描述符的版本号不匹配 </li><li>该类包含未知数据类型 </li><li>该类没有可访问的无参数构造方法 </li></ul><p><code>Serializable</code> 接口给需要序列化的类，提供了一个序列版本号。<code>serialVersionUID</code> 该版本号的目的在于验证序列化的对象和对应类是否版本匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 加入序列版本号</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">     <span class="keyword">public</span> String name;</span><br><span class="line">     <span class="keyword">public</span> String address;</span><br><span class="line">     <span class="comment">// 添加新的属性 ,重新编译, 可以反序列化,该属性赋为默认值.</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">int</span> eid; </span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addressCheck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"Address  check : "</span> + name + <span class="string">" -- "</span> + address);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-4-练习：序列化集合"><a href="#6-4-练习：序列化集合" class="headerlink" title="6.4 练习：序列化集合"></a>6.4 练习：序列化集合</h2><ol><li>将存有多个自定义对象的集合序列化操作，保存到<code>list.txt</code>文件中。</li><li>反序列化<code>list.txt</code> ，并遍历集合，打印对象信息。</li></ol><h3 id="案例分析-2"><a href="#案例分析-2" class="headerlink" title="案例分析"></a>案例分析</h3><ol><li>把若干学生对象 ，保存到集合中。</li><li>把集合序列化。</li><li>反序列化读取时，只需要读取一次，转换为集合类型。</li><li>遍历集合，可以打印所有的学生信息</li></ol><h3 id="案例实现-2"><a href="#案例实现-2" class="headerlink" title="案例实现"></a>案例实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 创建 学生对象</span></span><br><span class="line">Student student = <span class="keyword">new</span> Student(<span class="string">"老王"</span>, <span class="string">"laow"</span>);</span><br><span class="line">Student student2 = <span class="keyword">new</span> Student(<span class="string">"老张"</span>, <span class="string">"laoz"</span>);</span><br><span class="line">Student student3 = <span class="keyword">new</span> Student(<span class="string">"老李"</span>, <span class="string">"laol"</span>);</span><br><span class="line"></span><br><span class="line">ArrayList&lt;Student&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">arrayList.add(student);</span><br><span class="line">arrayList.add(student2);</span><br><span class="line">arrayList.add(student3);</span><br><span class="line"><span class="comment">// 序列化操作</span></span><br><span class="line"><span class="comment">// serializ(arrayList);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 反序列化  </span></span><br><span class="line">ObjectInputStream ois  = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"list.txt"</span>));</span><br><span class="line"><span class="comment">// 读取对象,强转为ArrayList类型</span></span><br><span class="line">ArrayList&lt;Student&gt; list  = (ArrayList&lt;Student&gt;)ois.readObject();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++ )&#123;</span><br><span class="line">          Student s = list.get(i);</span><br><span class="line">        System.out.println(s.getName()+<span class="string">"--"</span>+ s.getPwd());</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serializ</span><span class="params">(ArrayList&lt;Student&gt; arrayList)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 创建 序列化流 </span></span><br><span class="line">ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"list.txt"</span>));</span><br><span class="line"><span class="comment">// 写出对象</span></span><br><span class="line">oos.writeObject(arrayList);</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">oos.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第七章-打印流"><a href="#第七章-打印流" class="headerlink" title="第七章 打印流"></a>第七章 打印流</h1><h2 id="7-1-概述"><a href="#7-1-概述" class="headerlink" title="7.1 概述"></a>7.1 概述</h2><p>平时我们在控制台打印输出，是调用<code>print</code>方法和<code>println</code>方法完成的，这两个方法都来自于<code>java.io.PrintStream</code>类，该类能够方便地打印各种数据类型的值，是一种便捷的输出方式。</p><h2 id="7-2-PrintStream类"><a href="#7-2-PrintStream类" class="headerlink" title="7.2 PrintStream类"></a>7.2 PrintStream类</h2><ul><li><code>public PrintStream(String fileName)</code>： 使用指定的文件名创建一个新的打印流。</li></ul><p>构造举例，代码如下：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">"ps.txt"</span>)；</span><br></pre></td></tr></table></figure><p><code>System.out</code>就是<code>PrintStream</code>类型的，只不过它的流向是系统规定的，打印在控制台上。不过，既然是流对象，我们就可以玩一个”小把戏”，将数据输出到指定文本文件中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 调用系统的打印流,控制台直接输出97</span></span><br><span class="line">        System.out.println(<span class="number">97</span>);</span><br><span class="line">      </span><br><span class="line"><span class="comment">// 创建打印流,指定文件的名称</span></span><br><span class="line">        PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">"ps.txt"</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 设置系统的打印流流向,输出到ps.txt</span></span><br><span class="line">        System.setOut(ps);</span><br><span class="line">      <span class="comment">// 调用系统的打印流,ps.txt中输出97</span></span><br><span class="line">        System.out.println(<span class="number">97</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java核心知识--方法引用, Stream流，File类, 递归，字节流</title>
      <link href="/2022/12/31/java-%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8,%20Stream%E6%B5%81%EF%BC%8CFile%E7%B1%BB%20%20,%20%E9%80%92%E5%BD%92%20%EF%BC%8C%E5%AD%97%E8%8A%82%E6%B5%81/"/>
      <url>/2022/12/31/java-%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8,%20Stream%E6%B5%81%EF%BC%8CFile%E7%B1%BB%20%20,%20%E9%80%92%E5%BD%92%20%EF%BC%8C%E5%AD%97%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="今日目标"><a href="#今日目标" class="headerlink" title="今日目标"></a>今日目标</h2><ul><li>线程状态</li><li>等待与唤醒</li><li>Lambda表达式</li><li>Stream流</li></ul><h1 id="第一章JDK8新特性"><a href="#第一章JDK8新特性" class="headerlink" title="第一章JDK8新特性"></a>第一章JDK8新特性</h1><blockquote><p>JDK新特性：</p><p><strong>Lambda 表达式</strong></p><p><strong>默认方法</strong>【已学习过】</p><p><strong>Stream API</strong> </p><p><strong>方法引用</strong></p><p><strong>Base64</strong></p></blockquote><h2 id="1-1-方法引用"><a href="#1-1-方法引用" class="headerlink" title="1.1 方法引用"></a>1.1 方法引用</h2><h3 id="5-1-1-方法引用概述"><a href="#5-1-1-方法引用概述" class="headerlink" title="5.1.1 方法引用概述"></a>5.1.1 方法引用概述</h3><p>方法引用使得开发者可以直接引用现存的方法、Java类的构造方法或者实例对象。方法引用和Lambda表达式配合使用，使得java类的构造方法看起来紧凑而简洁，没有很多复杂的模板代码。</p><h3 id="5-1-2-方法引用基本使用"><a href="#5-1-2-方法引用基本使用" class="headerlink" title="5.1.2 方法引用基本使用"></a>5.1.2 方法引用基本使用</h3><p>方法引用使用一对冒号 <strong>::</strong> 。</p><p>下面，我们在 Car 类中定义了 4 个方法作为例子来区分 Java 中 4 种不同方法的引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">create</span><span class="params">( <span class="keyword">final</span> Supplier&lt; Car &gt; supplier )</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> supplier.get();</span><br><span class="line">    &#125;              </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">collide</span><span class="params">( <span class="keyword">final</span> Car car )</span> </span>&#123;</span><br><span class="line">        System.out.println( <span class="string">"Collided "</span> + car.toString() );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">follow</span><span class="params">( <span class="keyword">final</span> Car another )</span> </span>&#123;</span><br><span class="line">        System.out.println( <span class="string">"Following the "</span> + another.toString() );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">repair</span><span class="params">()</span> </span>&#123;   </span><br><span class="line">        System.out.println( <span class="string">"Repaired "</span> + <span class="keyword">this</span>.toString() );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一种方法引用的类型是<strong>构造器引用</strong>，语法是<strong>Class::new</strong>，或者更一般的形式：<strong>Class<t>::new</t></strong>。注意：这个构造器没有参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Car car = Car.create( Car::<span class="keyword">new</span> );</span><br><span class="line"><span class="keyword">final</span> List&lt; Car &gt; cars = Arrays.asList( car );</span><br></pre></td></tr></table></figure><p>第二种方法引用的类型是<strong>静态方法引用</strong>，语法是<strong>Class::static_method</strong>。注意：这个方法接受一个Car类型的参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cars.forEach( Car::collide );</span><br></pre></td></tr></table></figure><p>第三种方法引用的类型是<strong>某个类的成员方法的引用</strong>，语法是<strong>Class::method</strong>，注意，这个方法没有定义入参：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cars.forEach( Car::repair );</span><br></pre></td></tr></table></figure><p>第四种方法引用的类型是<strong>某个实例对象的成员方法的引用</strong>，语法是<strong>instance::method</strong>。注意：这个方法接受一个Car类型的参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Car police = Car.create( Car::<span class="keyword">new</span> );</span><br><span class="line">cars.forEach( police::follow );</span><br></pre></td></tr></table></figure><h3 id="5-1-3-基于静态方法引用的代码演示"><a href="#5-1-3-基于静态方法引用的代码演示" class="headerlink" title="5.1.3 基于静态方法引用的代码演示"></a>5.1.3 基于静态方法引用的代码演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    List names = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">    names.add(<span class="string">"大明"</span>);</span><br><span class="line">    names.add(<span class="string">"二明"</span>);</span><br><span class="line">    names.add(<span class="string">"小明"</span>);</span><br><span class="line"></span><br><span class="line">    names.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码，我们将 System.out::println 方法作为静态方法来引用。</p><p>测试结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">大明</span><br><span class="line">二明</span><br><span class="line">小明</span><br></pre></td></tr></table></figure><h1 id="第二章-Lambda表达式，研究"><a href="#第二章-Lambda表达式，研究" class="headerlink" title="第二章  Lambda表达式，研究"></a>第二章  Lambda表达式，研究</h1><h2 id="2-1-函数式编程思想概述"><a href="#2-1-函数式编程思想概述" class="headerlink" title="2.1 函数式编程思想概述"></a>2.1 函数式编程思想概述</h2><p>在数学中，<strong>函数</strong>就是有输入量、输出量的一套计算方案，也就是“拿什么东西做什么事情”。相对而言，面向对象过分强调“必须通过对象的形式来做事情”，而函数式思想则尽量忽略面向对象的复杂语法——<strong>强调做什么，而不是以什么形式做</strong>。</p><p><strong>做什么，而不是怎么做</strong></p><p>我们真的希望创建一个匿名内部类对象吗？不。我们只是为了做这件事情而<strong>不得不</strong>创建一个对象。我们真正希望做的事情是：将<code>run</code>方法体内的代码传递给<code>Thread</code>类知晓。</p><p><strong>传递一段代码</strong>——这才是我们真正的目的。而创建对象只是受限于面向对象语法而不得不采取的一种手段方式。那，有没有更加简单的办法？如果我们将关注点从“怎么做”回归到“做什么”的本质上，就会发现只要能够更好地达到目的，过程与形式其实并不重要。</p><h2 id="2-2-Lambda的优化"><a href="#2-2-Lambda的优化" class="headerlink" title="2.2 Lambda的优化"></a>2.2 Lambda的优化</h2><p>当需要启动一个线程去完成任务时，通常会通过<code>java.lang.Runnable</code>接口来定义任务内容，并使用<code>java.lang.Thread</code>类来启动该线程。</p><p><strong>传统写法,代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ThreadNameless</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"多线程任务执行！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本着“一切皆对象”的思想，这种做法是无可厚非的：首先创建一个<code>Runnable</code>接口的匿名内部类对象来指定任务内容，再将其交给一个线程来启动。</p><p><strong>代码分析:</strong></p><p>对于<code>Runnable</code>的匿名内部类用法，可以分析出几点内容：</p><ul><li><code>Thread</code>类需要<code>Runnable</code>接口作为参数，其中的抽象<code>run</code>方法是用来指定线程任务内容的核心；</li><li>为了指定<code>run</code>的方法体，<strong>不得不</strong>需要<code>Runnable</code>接口的实现类；</li><li>为了省去定义一个<code>RunnableImpl</code>实现类的麻烦，<strong>不得不</strong>使用匿名内部类；</li><li>必须覆盖重写抽象<code>run</code>方法，所以方法名称、方法参数、方法返回值<strong>不得不</strong>再写一遍，且不能写错；</li><li>而实际上，<strong>似乎只有方法体才是关键所在</strong>。</li></ul><p><strong>Lambda表达式写法,代码如下：</strong></p><p>借助Java 8的全新语法，上述<code>Runnable</code>接口的匿名内部类写法可以通过更简单的Lambda表达式达到等效：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02LambdaRunnable</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"多线程任务执行！"</span>)).start(); <span class="comment">// 启动线程</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码和刚才的执行效果是完全一样的，可以在1.8或更高的编译级别下通过。从代码的语义中可以看出：我们启动了一个线程，而线程任务的内容以一种更加简洁的形式被指定。</p><p>不再有“不得不创建接口对象”的束缚，不再有“抽象方法覆盖重写”的负担，就是这么简单！</p><h2 id="2-3-Lambda的格式"><a href="#2-3-Lambda的格式" class="headerlink" title="2.3 Lambda的格式"></a>2.3 Lambda的格式</h2><h3 id="标准格式"><a href="#标准格式" class="headerlink" title="标准格式:"></a>标准格式:</h3><p>Lambda省去面向对象的条条框框，格式由<strong>3个部分</strong>组成：</p><ul><li>一些参数</li><li>一个箭头</li><li>一段代码</li></ul><p>Lambda表达式的<strong>标准格式</strong>为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(参数类型 参数名称) -&gt; &#123; 代码语句 &#125;</span><br></pre></td></tr></table></figure><p><strong>格式说明：</strong></p><ul><li>小括号内的语法与传统方法参数列表一致：无参数则留空；多个参数则用逗号分隔。</li><li><code>-&gt;</code>是新引入的语法格式，代表指向动作。</li><li>大括号内的语法与传统方法体要求基本一致。</li></ul><p><strong>匿名内部类与lambda对比:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"多线程任务执行！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><p>仔细分析该代码中，<code>Runnable</code>接口只有一个<code>run</code>方法的定义：</p><ul><li><code>public abstract void run();</code></li></ul><p>即制定了一种做事情的方案（其实就是一个方法）：</p><ul><li><strong>无参数</strong>：不需要任何条件即可执行该方案。</li><li><strong>无返回值</strong>：该方案不产生任何结果。</li><li><strong>代码块</strong>（方法体）：该方案的具体执行步骤。</li></ul><p>同样的语义体现在<code>Lambda</code>语法中，要更加简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">() -&gt; System.out.println(<span class="string">"多线程任务执行！"</span>)</span><br></pre></td></tr></table></figure><ul><li>前面的一对小括号即<code>run</code>方法的参数（无），代表不需要任何条件；</li><li>中间的一个箭头代表将前面的参数传递给后面的代码；</li><li>后面的输出语句即业务逻辑代码。</li></ul><h3 id="参数和返回值"><a href="#参数和返回值" class="headerlink" title="参数和返回值:"></a>参数和返回值:</h3><p>下面举例演示<code>java.util.Comparator&lt;T&gt;</code>接口的使用场景代码，其中的抽象方法定义为：</p><ul><li><code>public abstract int compare(T o1, T o2);</code></li></ul><p>当需要对一个对象数组进行排序时，<code>Arrays.sort</code>方法需要一个<code>Comparator</code>接口实例来指定排序的规则。假设有一个<code>Person</code>类，含有<code>String name</code>和<code>int age</code>两个成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略构造器、toString方法与Getter Setter </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>传统写法</strong></p><p>如果使用传统的代码对<code>Person[]</code>数组进行排序，写法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06Comparator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 本来年龄乱序的对象数组</span></span><br><span class="line">        Person[] array = &#123; <span class="keyword">new</span> Person(<span class="string">"古力娜扎"</span>, <span class="number">19</span>),        <span class="keyword">new</span> Person(<span class="string">"迪丽热巴"</span>, <span class="number">18</span>),       <span class="keyword">new</span> Person(<span class="string">"马尔扎哈"</span>, <span class="number">20</span>) &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 匿名内部类</span></span><br><span class="line">        Comparator&lt;Person&gt; comp = <span class="keyword">new</span> Comparator&lt;Person&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person o1, Person o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o1.getAge() - o2.getAge();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Arrays.sort(array, comp); <span class="comment">// 第二个参数为排序规则，即Comparator接口实例</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Person person : array) &#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种做法在面向对象的思想中，似乎也是“理所当然”的。其中<code>Comparator</code>接口的实例（使用了匿名内部类）代表了“按照年龄从小到大”的排序规则。</p><p><strong>代码分析</strong></p><p>下面我们来搞清楚上述代码真正要做什么事情。</p><ul><li>为了排序，<code>Arrays.sort</code>方法需要排序规则，即<code>Comparator</code>接口的实例，抽象方法<code>compare</code>是关键；</li><li>为了指定<code>compare</code>的方法体，<strong>不得不</strong>需要<code>Comparator</code>接口的实现类；</li><li>为了省去定义一个<code>ComparatorImpl</code>实现类的麻烦，<strong>不得不</strong>使用匿名内部类；</li><li>必须覆盖重写抽象<code>compare</code>方法，所以方法名称、方法参数、方法返回值<strong>不得不</strong>再写一遍，且不能写错；</li><li>实际上，<strong>只有参数和方法体才是关键</strong>。</li></ul><p><strong>Lambda写法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07ComparatorLambda</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person[] array = &#123;</span><br><span class="line">          <span class="keyword">new</span> Person(<span class="string">"古力娜扎"</span>, <span class="number">19</span>),</span><br><span class="line">          <span class="keyword">new</span> Person(<span class="string">"迪丽热巴"</span>, <span class="number">18</span>),</span><br><span class="line">          <span class="keyword">new</span> Person(<span class="string">"马尔扎哈"</span>, <span class="number">20</span>) &#125;;</span><br><span class="line"></span><br><span class="line">        Arrays.sort(array, (Person a, Person b) -&gt; &#123;</span><br><span class="line">          <span class="keyword">return</span> a.getAge() - b.getAge();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Person person : array) &#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="省略格式"><a href="#省略格式" class="headerlink" title="省略格式:"></a>省略格式:</h3><p><strong>省略规则</strong></p><p>在Lambda标准格式的基础上，使用省略写法的规则为：</p><ol><li>小括号内参数的类型可以省略；</li><li>如果小括号内<strong>有且仅有一个参</strong>，则小括号可以省略；</li><li>如果大括号内<strong>有且仅有一个语句</strong>，则无论是否有返回值，都可以省略大括号、return关键字及语句分号。</li></ol><blockquote><p>备注：掌握这些省略规则后，请对应地回顾本章开头的多线程案例。</p></blockquote><p><strong>可推导即可省略</strong></p><p>Lambda强调的是“做什么”而不是“怎么做”，所以凡是可以根据上下文推导得知的信息，都可以省略。例如上例还可以使用Lambda的省略写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Runnable接口简化:</span><br><span class="line"><span class="number">1</span>. () -&gt; System.out.println(<span class="string">"多线程任务执行！"</span>)</span><br><span class="line">Comparator接口简化:</span><br><span class="line"><span class="number">2</span>. Arrays.sort(array, (a, b) -&gt; a.getAge() - b.getAge());</span><br></pre></td></tr></table></figure><h2 id="2-4-Lambda的前提条件"><a href="#2-4-Lambda的前提条件" class="headerlink" title="2.4 Lambda的前提条件"></a>2.4 Lambda的前提条件</h2><p>Lambda的语法非常简洁，完全没有面向对象复杂的束缚。但是使用时有几个问题需要特别注意：</p><ol><li>使用Lambda必须具有接口，且要求<strong>接口中有且仅有一个抽象方法</strong>。<br>无论是JDK内置的<code>Runnable</code>、<code>Comparator</code>接口还是自定义的接口，只有当接口中的抽象方法存在且唯一时，才可以使用Lambda。</li><li>使用Lambda必须具有<strong>上下文推断</strong>。<br>也就是方法的参数或局部变量类型必须为Lambda对应的接口类型，才能使用Lambda作为该接口的实例。</li></ol><blockquote><p>备注：有且仅有一个抽象方法的接口，称为“<strong>函数式接口</strong>”。</p></blockquote><h1 id="第三章-Stream"><a href="#第三章-Stream" class="headerlink" title="第三章 Stream"></a>第三章 Stream</h1><p>在Java 8中，得益于Lambda所带来的函数式编程，引入了一个<strong>全新的Stream概念</strong>，用于解决已有集合类库既有的弊端。</p><h2 id="3-1-引言"><a href="#3-1-引言" class="headerlink" title="3.1 引言"></a>3.1 引言</h2><p><strong>传统集合的多步遍历代码</strong></p><p>几乎所有的集合（如<code>Collection</code>接口或<code>Map</code>接口等）都支持直接或间接的遍历操作。而当我们需要对集合中的元素进行操作的时候，除了必需的添加、删除、获取外，最典型的就是集合遍历。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ForEach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"张无忌"</span>);</span><br><span class="line">        list.add(<span class="string">"周芷若"</span>);</span><br><span class="line">        list.add(<span class="string">"赵敏"</span>);</span><br><span class="line">        list.add(<span class="string">"张强"</span>);</span><br><span class="line">        list.add(<span class="string">"张三丰"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String name : list) &#123;</span><br><span class="line">          System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一段非常简单的集合遍历操作：对集合中的每一个字符串都进行打印输出操作。</p><p><strong>循环遍历的弊端</strong></p><p>Java 8的Lambda让我们可以更加专注于<strong>做什么</strong>（What），而不是<strong>怎么做</strong>（How），这点此前已经结合内部类进行了对比说明。现在，我们仔细体会一下上例代码，可以发现：</p><ul><li>for循环的语法就是“<strong>怎么做</strong>”</li><li>for循环的循环体才是“<strong>做什么</strong>”</li></ul><p>为什么使用循环？因为要进行遍历。但循环是遍历的唯一方式吗？遍历是指每一个元素逐一进行处理，<strong>而并不是从第一个到最后一个顺次处理的循环</strong>。前者是目的，后者是方式。</p><p>试想一下，如果希望对集合中的元素进行筛选过滤：</p><ol><li>将集合A根据条件一过滤为<strong>子集B</strong>；</li><li>然后再根据条件二过滤为<strong>子集C</strong>。</li></ol><p>那怎么办？在Java 8之前的做法可能为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02NormalFilter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"张无忌"</span>);</span><br><span class="line">        list.add(<span class="string">"周芷若"</span>);</span><br><span class="line">        list.add(<span class="string">"赵敏"</span>);</span><br><span class="line">        list.add(<span class="string">"张强"</span>);</span><br><span class="line">        list.add(<span class="string">"张三丰"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; zhangList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String name : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (name.startsWith(<span class="string">"张"</span>)) &#123;</span><br><span class="line">              zhangList.add(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; shortList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String name : zhangList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (name.length() == <span class="number">3</span>) &#123;</span><br><span class="line">              shortList.add(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String name : shortList) &#123;</span><br><span class="line">          System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中含有三个循环，每一个作用不同：</p><ol><li>首先筛选所有姓张的人；</li><li>然后筛选名字有三个字的人；</li><li>最后进行对结果进行打印输出。</li></ol><p>每当我们需要对集合中的元素进行操作的时候，总是需要进行循环、循环、再循环。这是理所当然的么？<strong>不是。</strong>循环是做事情的方式，而不是目的。另一方面，使用线性循环就意味着只能遍历一次。如果希望再次遍历，只能再使用另一个循环从头开始。</p><p>那，Lambda的衍生物Stream能给我们带来怎样更加优雅的写法呢？</p><p><strong>Stream的更优写法</strong></p><p>下面来看一下借助Java 8的Stream API，什么才叫优雅：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03StreamFilter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"张无忌"</span>);</span><br><span class="line">        list.add(<span class="string">"周芷若"</span>);</span><br><span class="line">        list.add(<span class="string">"赵敏"</span>);</span><br><span class="line">        list.add(<span class="string">"张强"</span>);</span><br><span class="line">        list.add(<span class="string">"张三丰"</span>);</span><br><span class="line"></span><br><span class="line">        list.stream()</span><br><span class="line">          .filter(s -&gt; s.startsWith(<span class="string">"张"</span>))</span><br><span class="line">            .filter(s -&gt; s.length() == <span class="number">3</span>)</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接阅读代码的字面意思即可完美展示无关逻辑方式的语义：<strong>获取流、过滤姓张、过滤长度为3、逐一打印</strong>。代码中并没有体现使用线性循环或是其他任何算法进行遍历，我们真正要做的事情内容被更好地体现在代码中。</p><h2 id="3-2-流式思想概述"><a href="#3-2-流式思想概述" class="headerlink" title="3.2 流式思想概述"></a>3.2 流式思想概述</h2><p><strong>注意：请暂时忘记对传统IO流的固有印象！</strong></p><p>整体来看，流式思想类似于工厂车间的“<strong>生产流水线</strong>”。</p><p>当需要对多个元素进行操作（特别是多步操作）的时候，考虑到性能及便利性，我们应该首先拼好一个“模型”步骤方案，然后再按照方案去执行它。</p><p><img src="https://i.328888.xyz/2022/12/31/nG5zE.png" alt></p><p>这张图中展示了过滤、映射、跳过、计数等多步操作，这是一种集合元素的处理方案，而方案就是一种“函数模型”。图中的每一个方框都是一个“流”，调用指定的方法，可以从一个流模型转换为另一个流模型。而最右侧的数字3是最终结果。</p><p>这里的<code>filter</code>、<code>map</code>、<code>skip</code>都是在对函数模型进行操作，集合元素并没有真正被处理。只有当终结方法<code>count</code>执行的时候，整个模型才会按照指定策略执行操作。而这得益于Lambda的延迟执行特性。</p><blockquote><p>备注：“Stream流”其实是一个集合元素的函数模型，它并不是集合，也不是数据结构，其本身并不存储任何元素（或其地址值）。</p></blockquote><h2 id="3-3-获取流方式"><a href="#3-3-获取流方式" class="headerlink" title="3.3 获取流方式"></a>3.3 获取流方式</h2><p><code>java.util.stream.Stream&lt;T&gt;</code>是Java 8新加入的最常用的流接口。（这并不是一个函数式接口。）</p><p>获取一个流非常简单，有以下几种常用的方式：</p><ul><li>所有的<code>Collection</code>集合都可以通过<code>stream</code>默认方法获取流；</li><li><code>Stream</code>接口的静态方法<code>of</code>可以获取数组对应的流。</li></ul><p><strong>方式1 : 根据Collection获取流</strong></p><p>首先，<code>java.util.Collection</code>接口中加入了default方法<code>stream</code>用来获取流，所以其所有实现类均可获取流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04GetStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        Stream&lt;String&gt; stream1 = list.stream();</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        Stream&lt;String&gt; stream2 = set.stream();</span><br><span class="line"></span><br><span class="line">        Vector&lt;String&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        Stream&lt;String&gt; stream3 = vector.stream();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方式2 : 根据Map获取流</strong></p><p><code>java.util.Map</code>接口不是<code>Collection</code>的子接口，且其K-V数据结构不符合流元素的单一特征，所以获取对应的流需要分key、value或entry等情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05GetStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        Stream&lt;String&gt; keyStream = map.keySet().stream();</span><br><span class="line">        Stream&lt;String&gt; valueStream = map.values().stream();</span><br><span class="line">        Stream&lt;Map.Entry&lt;String, String&gt;&gt; entryStream = map.entrySet().stream();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方式3 : 根据数组获取流</strong></p><p>如果使用的不是集合或映射而是数组，由于数组对象不可能添加默认方法，所以<code>Stream</code>接口中提供了静态方法<code>of</code>，使用很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06GetStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] array = &#123; <span class="string">"张无忌"</span>, <span class="string">"张翠山"</span>, <span class="string">"张三丰"</span>, <span class="string">"张一元"</span> &#125;;</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(array);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>备注：<code>of</code>方法的参数其实是一个可变参数，所以支持数组。</p></blockquote><h2 id="3-4-常用方法"><a href="#3-4-常用方法" class="headerlink" title="3.4 常用方法"></a>3.4 常用方法</h2><p>流模型的操作很丰富，这里介绍一些常用的API。这些方法可以被分成两种：</p><ul><li><strong>终结方法</strong>：返回值类型不再是<code>Stream</code>接口自身类型的方法，因此不再支持类似<code>StringBuilder</code>那样的链式调用。本小节中，终结方法包括<code>count</code>和<code>forEach</code>方法。</li><li><strong>非终结方法</strong>：返回值类型仍然是<code>Stream</code>接口自身类型的方法，因此支持链式调用。（除了终结方法外，其余方法均为非终结方法。）</li></ul><h3 id="函数拼接与终结方法"><a href="#函数拼接与终结方法" class="headerlink" title="函数拼接与终结方法"></a>函数拼接与终结方法</h3><p>在上述介绍的各种方法中，凡是返回值仍然为<code>Stream</code>接口的为<strong>函数拼接方法</strong>，它们支持链式调用；而返回值不再为<code>Stream</code>接口的为<strong>终结方法</strong>，不再支持链式调用。如下表所示：</p><table><thead><tr><th>方法名</th><th>方法作用</th><th>方法种类</th><th>是否支持链式调用</th></tr></thead><tbody><tr><td>count</td><td>统计个数</td><td>终结</td><td>否</td></tr><tr><td>forEach</td><td>逐一处理</td><td>终结</td><td>否</td></tr><tr><td>filter</td><td>过滤</td><td>函数拼接</td><td>是</td></tr><tr><td>limit</td><td>取用前几个</td><td>函数拼接</td><td>是</td></tr><tr><td>skip</td><td>跳过前几个</td><td>函数拼接</td><td>是</td></tr><tr><td>map</td><td>映射</td><td>函数拼接</td><td>是</td></tr><tr><td>concat</td><td>组合</td><td>函数拼接</td><td>是</td></tr></tbody></table><blockquote><p>备注：本小节之外的更多方法，请自行参考API文档。</p></blockquote><h3 id="forEach-逐一处理"><a href="#forEach-逐一处理" class="headerlink" title="forEach : 逐一处理"></a>forEach : 逐一处理</h3><p>虽然方法名字叫<code>forEach</code>，但是与for循环中的“for-each”昵称不同，该方法<strong>并不保证元素的逐一消费动作在流中是被有序执行的</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span></span>;</span><br></pre></td></tr></table></figure><p>该方法接收一个<code>Consumer</code>接口函数，会将每一个流元素交给该函数进行处理。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo12StreamForEach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">"张无忌"</span>, <span class="string">"张三丰"</span>, <span class="string">"周芷若"</span>);</span><br><span class="line">        stream.forEach(s-&gt;System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="count：统计个数"><a href="#count：统计个数" class="headerlink" title="count：统计个数"></a>count：统计个数</h3><p>正如旧集合<code>Collection</code>当中的<code>size</code>方法一样，流提供<code>count</code>方法来数一数其中的元素个数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>该方法返回一个long值代表元素个数（不再像旧集合那样是int值）。基本使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo09StreamCount</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stream&lt;String&gt; original = Stream.of(<span class="string">"张无忌"</span>, <span class="string">"张三丰"</span>, <span class="string">"周芷若"</span>);</span><br><span class="line">        Stream&lt;String&gt; result = original.filter(s -&gt; s.startsWith(<span class="string">"张"</span>));</span><br><span class="line">        System.out.println(result.count()); <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="filter：过滤"><a href="#filter：过滤" class="headerlink" title="filter：过滤"></a>filter：过滤</h3><p>可以通过<code>filter</code>方法将一个流转换成另一个子集流。方法声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">filter</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> T&gt; predicate)</span></span>;</span><br></pre></td></tr></table></figure><p>该接口接收一个<code>Predicate</code>函数式接口参数（可以是一个Lambda或方法引用）作为筛选条件。</p><p><strong>基本使用</strong></p><p>Stream流中的<code>filter</code>方法基本使用的代码如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07StreamFilter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stream&lt;String&gt; original = Stream.of(<span class="string">"张无忌"</span>, <span class="string">"张三丰"</span>, <span class="string">"周芷若"</span>);</span><br><span class="line">        Stream&lt;String&gt; result = original.filter(s -&gt; s.startsWith(<span class="string">"张"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里通过Lambda表达式来指定了筛选的条件：必须姓张。</p><h3 id="limit：取用前几个"><a href="#limit：取用前几个" class="headerlink" title="limit：取用前几个"></a>limit：取用前几个</h3><p><code>limit</code>方法可以对流进行截取，只取用前n个。方法签名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">limit</span><span class="params">(<span class="keyword">long</span> maxSize)</span></span>;</span><br></pre></td></tr></table></figure><p>参数是一个long型，如果集合当前长度大于参数则进行截取；否则不进行操作。基本使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo10StreamLimit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stream&lt;String&gt; original = Stream.of(<span class="string">"张无忌"</span>, <span class="string">"张三丰"</span>, <span class="string">"周芷若"</span>);</span><br><span class="line">        Stream&lt;String&gt; result = original.limit(<span class="number">2</span>);</span><br><span class="line">        System.out.println(result.count()); <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="skip：跳过前几个"><a href="#skip：跳过前几个" class="headerlink" title="skip：跳过前几个"></a>skip：跳过前几个</h3><p>如果希望跳过前几个元素，可以使用<code>skip</code>方法获取一个截取之后的新流：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Stream&lt;T&gt; <span class="title">skip</span><span class="params">(<span class="keyword">long</span> n)</span></span>;</span><br></pre></td></tr></table></figure><p>如果流的当前长度大于n，则跳过前n个；否则将会得到一个长度为0的空流。基本使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo11StreamSkip</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stream&lt;String&gt; original = Stream.of(<span class="string">"张无忌"</span>, <span class="string">"张三丰"</span>, <span class="string">"周芷若"</span>);</span><br><span class="line">        Stream&lt;String&gt; result = original.skip(<span class="number">2</span>);</span><br><span class="line">        System.out.println(result.count()); <span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="map：映射"><a href="#map：映射" class="headerlink" title="map：映射"></a>map：映射</h3><p>如果需要将流中的元素映射到另一个流中，可以使用<code>map</code>方法。方法签名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;R&gt; <span class="function">Stream&lt;R&gt; <span class="title">map</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends R&gt; mapper)</span></span>;</span><br></pre></td></tr></table></figure><p>该接口需要一个<code>Function</code>函数式接口参数，可以将当前流中的T类型数据转换为另一种R类型的流。</p><p><strong>基本使用</strong></p><p>Stream流中的<code>map</code>方法基本使用的代码如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo08StreamMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stream&lt;String&gt; original = Stream.of(<span class="string">"10"</span>, <span class="string">"12"</span>, <span class="string">"18"</span>);</span><br><span class="line">        Stream&lt;Integer&gt; result = original.map(s-&gt;Integer.parseInt(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中，<code>map</code>方法的参数通过方法引用，将字符串类型转换成为了int类型（并自动装箱为<code>Integer</code>类对象）。</p><h3 id="concat：组合"><a href="#concat：组合" class="headerlink" title="concat：组合"></a>concat：组合</h3><p>如果有两个流，希望合并成为一个流，那么可以使用<code>Stream</code>接口的静态方法<code>concat</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T&gt; <span class="function">Stream&lt;T&gt; <span class="title">concat</span><span class="params">(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)</span></span></span><br></pre></td></tr></table></figure><blockquote><p>备注：这是一个静态方法，与<code>java.lang.String</code>当中的<code>concat</code>方法是不同的。</p></blockquote><p>该方法的基本使用代码如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo12StreamConcat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stream&lt;String&gt; streamA = Stream.of(<span class="string">"张无忌"</span>);</span><br><span class="line">        Stream&lt;String&gt; streamB = Stream.of(<span class="string">"张翠山"</span>);</span><br><span class="line">        Stream&lt;String&gt; result = Stream.concat(streamA, streamB);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-Stream综合案例"><a href="#3-5-Stream综合案例" class="headerlink" title="3.5 Stream综合案例"></a>3.5 Stream综合案例</h2><p>现在有两个<code>ArrayList</code>集合存储队伍当中的多个成员姓名，要求使用传统的for循环（或增强for循环）<strong>依次</strong>进行以下若干操作步骤：</p><ol><li>第一个队伍只要名字为3个字的成员姓名；</li><li>第一个队伍筛选之后只要前3个人；</li><li>第二个队伍只要姓张的成员姓名；</li><li>第二个队伍筛选之后不要前2个人；</li><li>将两个队伍合并为一个队伍；</li><li>根据姓名创建<code>Person</code>对象；</li><li>打印整个队伍的Person对象信息。</li></ol><p>两个队伍（集合）的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoArrayListNames</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; one = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        one.add(<span class="string">"迪丽热巴"</span>);</span><br><span class="line">        one.add(<span class="string">"宋远桥"</span>);</span><br><span class="line">        one.add(<span class="string">"苏星河"</span>);</span><br><span class="line">        one.add(<span class="string">"老子"</span>);</span><br><span class="line">        one.add(<span class="string">"庄子"</span>);</span><br><span class="line">        one.add(<span class="string">"孙子"</span>);</span><br><span class="line">        one.add(<span class="string">"洪七公"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; two = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        two.add(<span class="string">"古力娜扎"</span>);</span><br><span class="line">        two.add(<span class="string">"张无忌"</span>);</span><br><span class="line">        two.add(<span class="string">"张三丰"</span>);</span><br><span class="line">        two.add(<span class="string">"赵丽颖"</span>);</span><br><span class="line">        two.add(<span class="string">"张二狗"</span>);</span><br><span class="line">        two.add(<span class="string">"张天爱"</span>);</span><br><span class="line">        two.add(<span class="string">"张三"</span>);</span><br><span class="line"><span class="comment">// ....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而<code>Person</code>类的代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;name='"</span> + name + <span class="string">"'&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>传统方式</strong> </p><p>使用for循环 , 示例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoArrayListNames</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; one = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; two = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一个队伍只要名字为3个字的成员姓名；</span></span><br><span class="line">        List&lt;String&gt; oneA = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String name : one) &#123;</span><br><span class="line">            <span class="keyword">if</span> (name.length() == <span class="number">3</span>) &#123;</span><br><span class="line">                oneA.add(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一个队伍筛选之后只要前3个人；</span></span><br><span class="line">        List&lt;String&gt; oneB = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            oneB.add(oneA.get(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二个队伍只要姓张的成员姓名；</span></span><br><span class="line">        List&lt;String&gt; twoA = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String name : two) &#123;</span><br><span class="line">            <span class="keyword">if</span> (name.startsWith(<span class="string">"张"</span>)) &#123;</span><br><span class="line">                twoA.add(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二个队伍筛选之后不要前2个人；</span></span><br><span class="line">        List&lt;String&gt; twoB = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; twoA.size(); i++) &#123;</span><br><span class="line">            twoB.add(twoA.get(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将两个队伍合并为一个队伍；</span></span><br><span class="line">        List&lt;String&gt; totalNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        totalNames.addAll(oneB);</span><br><span class="line">        totalNames.addAll(twoB);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据姓名创建Person对象；</span></span><br><span class="line">        List&lt;Person&gt; totalPersonList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String name : totalNames) &#123;</span><br><span class="line">            totalPersonList.add(<span class="keyword">new</span> Person(name));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印整个队伍的Person对象信息。</span></span><br><span class="line">        <span class="keyword">for</span> (Person person : totalPersonList) &#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Person&#123;name=&apos;宋远桥&apos;&#125;</span><br><span class="line">Person&#123;name=&apos;苏星河&apos;&#125;</span><br><span class="line">Person&#123;name=&apos;洪七公&apos;&#125;</span><br><span class="line">Person&#123;name=&apos;张二狗&apos;&#125;</span><br><span class="line">Person&#123;name=&apos;张天爱&apos;&#125;</span><br><span class="line">Person&#123;name=&apos;张三&apos;&#125;</span><br></pre></td></tr></table></figure><p><strong>Stream方式</strong> </p><p>等效的Stream流式处理代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoStreamNames</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; one = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; two = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一个队伍只要名字为3个字的成员姓名；</span></span><br><span class="line">        <span class="comment">// 第一个队伍筛选之后只要前3个人；</span></span><br><span class="line">        Stream&lt;String&gt; streamOne = one.stream().filter(s -&gt; s.length() == <span class="number">3</span>).limit(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二个队伍只要姓张的成员姓名；</span></span><br><span class="line">        <span class="comment">// 第二个队伍筛选之后不要前2个人；</span></span><br><span class="line">        Stream&lt;String&gt; streamTwo = two.stream().filter(s -&gt; s.startsWith(<span class="string">"张"</span>)).skip(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将两个队伍合并为一个队伍；</span></span><br><span class="line">        <span class="comment">// 根据姓名创建Person对象；</span></span><br><span class="line">        <span class="comment">// 打印整个队伍的Person对象信息。</span></span><br><span class="line">        Stream.concat(streamOne, streamTwo).map(s-&gt; <span class="keyword">new</span> Person(s)).forEach(s-&gt;System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果完全一样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Person&#123;name=&apos;宋远桥&apos;&#125;</span><br><span class="line">Person&#123;name=&apos;苏星河&apos;&#125;</span><br><span class="line">Person&#123;name=&apos;洪七公&apos;&#125;</span><br><span class="line">Person&#123;name=&apos;张二狗&apos;&#125;</span><br><span class="line">Person&#123;name=&apos;张天爱&apos;&#125;</span><br><span class="line">Person&#123;name=&apos;张三&apos;&#125;</span><br></pre></td></tr></table></figure><h2 id="3-6-收集Stream结果"><a href="#3-6-收集Stream结果" class="headerlink" title="3.6 收集Stream结果"></a>3.6 收集Stream结果</h2><p>对流操作完成之后，如果需要将其结果进行收集，例如获取对应的集合、数组等，如何操作？</p><h3 id="收集到集合中"><a href="#收集到集合中" class="headerlink" title="收集到集合中"></a>收集到集合中</h3><p>Stream流提供<code>collect</code>方法，其参数需要一个<code>java.util.stream.Collector&lt;T,A, R&gt;</code>接口对象来指定收集到哪种集合中。幸运的是，<code>java.util.stream.Collectors</code>类提供一些方法，可以作为<code>Collector</code>接口的实例：</p><ul><li><code>public static &lt;T&gt; Collector&lt;T, ?, List&lt;T&gt;&gt; toList()</code>：转换为<code>List</code>集合。</li><li><code>public static &lt;T&gt; Collector&lt;T, ?, Set&lt;T&gt;&gt; toSet()</code>：转换为<code>Set</code>集合。</li></ul><p>下面是这两个方法的基本使用代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo15StreamCollect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">"10"</span>, <span class="string">"20"</span>, <span class="string">"30"</span>, <span class="string">"40"</span>, <span class="string">"50"</span>);</span><br><span class="line">        List&lt;String&gt; list = stream.collect(Collectors.toList());</span><br><span class="line">        Set&lt;String&gt; set = stream.collect(Collectors.toSet());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="收集到数组中"><a href="#收集到数组中" class="headerlink" title="收集到数组中"></a>收集到数组中</h3><p>Stream提供<code>toArray</code>方法来将结果放到一个数组中，由于泛型擦除的原因，返回值类型是Object[]的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object[] toArray();</span><br></pre></td></tr></table></figure><p>其使用场景如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo16StreamArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stream&lt;String&gt; stream = Stream.of(<span class="string">"10"</span>, <span class="string">"20"</span>, <span class="string">"30"</span>, <span class="string">"40"</span>, <span class="string">"50"</span>);</span><br><span class="line">        Object[] objArray = stream.toArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第四章-File类"><a href="#第四章-File类" class="headerlink" title="第四章 File类"></a>第四章 File类</h1><h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h2><p><code>java.io.File</code> 类是文件和目录路径名的抽象表示，主要用于文件和目录的创建、查找和删除等操作。</p><h2 id="4-2-构造方法"><a href="#4-2-构造方法" class="headerlink" title="4.2 构造方法"></a>4.2 构造方法</h2><ul><li><p><code>public File(String pathname)</code> ：通过将给定的<strong>路径名字符串</strong>转换为抽象路径名来创建新的 File实例。  </p></li><li><p><code>public File(String parent, String child)</code> ：从<strong>父路径名字符串和子路径名字符串</strong>创建新的 File实例。</p></li><li><p><code>public File(File parent, String child)</code> ：从<strong>父抽象路径名和子路径名字符串</strong>创建新的 File实例。  </p></li><li><p>构造举例，代码如下：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件路径名</span></span><br><span class="line">String pathname = <span class="string">"D:\\aaa.txt"</span>;</span><br><span class="line">File file1 = <span class="keyword">new</span> File(pathname); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件路径名</span></span><br><span class="line">String pathname2 = <span class="string">"D:\\aaa\\bbb.txt"</span>;</span><br><span class="line">File file2 = <span class="keyword">new</span> File(pathname2); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过父路径和子路径字符串</span></span><br><span class="line"> String parent = <span class="string">"d:\\aaa"</span>;</span><br><span class="line"> String child = <span class="string">"bbb.txt"</span>;</span><br><span class="line"> File file3 = <span class="keyword">new</span> File(parent, child);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过父级File对象和子路径字符串</span></span><br><span class="line">File parentDir = <span class="keyword">new</span> File(<span class="string">"d:\\aaa"</span>);</span><br><span class="line">String child = <span class="string">"bbb.txt"</span>;</span><br><span class="line">File file4 = <span class="keyword">new</span> File(parentDir, child);</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：</p><ol><li>一个File对象代表硬盘中实际存在的一个文件或者目录。</li><li>无论该路径下是否存在文件或者目录，都不影响File对象的创建。</li></ol></blockquote><h2 id="4-3-常用方法"><a href="#4-3-常用方法" class="headerlink" title="4.3 常用方法"></a>4.3 常用方法</h2><h3 id="获取功能的方法"><a href="#获取功能的方法" class="headerlink" title="获取功能的方法"></a>获取功能的方法</h3><ul><li><p><code>public String getAbsolutePath()</code> ：返回此File的绝对路径名字符串。</p></li><li><p><code>public String getPath()</code> ：将此File转换为路径名字符串。 </p></li><li><p><code>public String getName()</code>  ：返回由此File表示的文件或目录的名称。  </p></li><li><p><code>public long length()</code>  ：返回由此File表示的文件的长度。 </p><p>方法演示，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileGet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:/aaa/bbb.java"</span>);     </span><br><span class="line">        System.out.println(<span class="string">"文件绝对路径:"</span>+f.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">"文件构造路径:"</span>+f.getPath());</span><br><span class="line">        System.out.println(<span class="string">"文件名称:"</span>+f.getName());</span><br><span class="line">        System.out.println(<span class="string">"文件长度:"</span>+f.length()+<span class="string">"字节"</span>);</span><br><span class="line"></span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">"d:/aaa"</span>);     </span><br><span class="line">        System.out.println(<span class="string">"目录绝对路径:"</span>+f2.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">"目录构造路径:"</span>+f2.getPath());</span><br><span class="line">        System.out.println(<span class="string">"目录名称:"</span>+f2.getName());</span><br><span class="line">        System.out.println(<span class="string">"目录长度:"</span>+f2.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">文件绝对路径:d:\aaa\bbb.java</span><br><span class="line">文件构造路径:d:\aaa\bbb.java</span><br><span class="line">文件名称:bbb.java</span><br><span class="line">文件长度:<span class="number">636</span>字节</span><br><span class="line"></span><br><span class="line">目录绝对路径:d:\aaa</span><br><span class="line">目录构造路径:d:\aaa</span><br><span class="line">目录名称:aaa</span><br><span class="line">目录长度:<span class="number">4096</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>API中说明：length()，表示文件的长度。但是File对象表示目录，则返回值未指定。</p></blockquote><h3 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h3><ul><li><strong>绝对路径</strong>：从盘符开始的路径，这是一个完整的路径。</li><li><strong>相对路径</strong>：相对于项目目录的路径，这是一个便捷的路径，开发中经常使用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilePath</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// D盘下的bbb.java文件</span></span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"D:\\bbb.java"</span>);</span><br><span class="line">        System.out.println(f.getAbsolutePath());</span><br><span class="line">      </span><br><span class="line"><span class="comment">// 项目下的bbb.java文件</span></span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">"bbb.java"</span>);</span><br><span class="line">        System.out.println(f2.getAbsolutePath());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">D:\bbb.java</span><br><span class="line">D:\idea_project_test4\bbb.java</span><br></pre></td></tr></table></figure><h3 id="判断功能的方法"><a href="#判断功能的方法" class="headerlink" title="判断功能的方法"></a>判断功能的方法</h3><ul><li><code>public boolean exists()</code> ：此File表示的文件或目录是否实际存在。</li><li><code>public boolean isDirectory()</code> ：此File表示的是否为目录。</li><li><code>public boolean isFile()</code> ：此File表示的是否为文件。</li></ul><p>方法演示，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileIs</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"d:\\aaa\\bbb.java"</span>);</span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">"d:\\aaa"</span>);</span><br><span class="line">      <span class="comment">// 判断是否存在</span></span><br><span class="line">        System.out.println(<span class="string">"d:\\aaa\\bbb.java 是否存在:"</span>+f.exists());</span><br><span class="line">        System.out.println(<span class="string">"d:\\aaa 是否存在:"</span>+f2.exists());</span><br><span class="line">      <span class="comment">// 判断是文件还是目录</span></span><br><span class="line">        System.out.println(<span class="string">"d:\\aaa 文件?:"</span>+f2.isFile());</span><br><span class="line">        System.out.println(<span class="string">"d:\\aaa 目录?:"</span>+f2.isDirectory());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">d:\aaa\bbb.java 是否存在:<span class="keyword">true</span></span><br><span class="line">d:\aaa 是否存在:<span class="keyword">true</span></span><br><span class="line">d:\aaa 文件?:<span class="keyword">false</span></span><br><span class="line">d:\aaa 目录?:<span class="keyword">true</span></span><br></pre></td></tr></table></figure><h3 id="创建删除功能的方法"><a href="#创建删除功能的方法" class="headerlink" title="创建删除功能的方法"></a>创建删除功能的方法</h3><ul><li><code>public boolean createNewFile()</code> ：当且仅当具有该名称的文件尚不存在时，创建一个新的空文件。 </li><li><code>public boolean delete()</code> ：删除由此File表示的文件或目录。  </li><li><code>public boolean mkdir()</code> ：创建由此File表示的目录。</li><li><code>public boolean mkdirs()</code> ：创建由此File表示的目录，包括任何必需但不存在的父目录。</li></ul><p>方法演示，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileCreateDelete</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 文件的创建</span></span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">"aaa.txt"</span>);</span><br><span class="line">        System.out.println(<span class="string">"是否存在:"</span>+f.exists()); <span class="comment">// false</span></span><br><span class="line">        System.out.println(<span class="string">"是否创建:"</span>+f.createNewFile()); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">"是否存在:"</span>+f.exists()); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">// 目录的创建</span></span><br><span class="line">      File f2= <span class="keyword">new</span> File(<span class="string">"newDir"</span>);</span><br><span class="line">        System.out.println(<span class="string">"是否存在:"</span>+f2.exists());<span class="comment">// false</span></span><br><span class="line">        System.out.println(<span class="string">"是否创建:"</span>+f2.mkdir());<span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">"是否存在:"</span>+f2.exists());<span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建多级目录</span></span><br><span class="line">      File f3= <span class="keyword">new</span> File(<span class="string">"newDira\\newDirb"</span>);</span><br><span class="line">        System.out.println(f3.mkdir());<span class="comment">// false</span></span><br><span class="line">        File f4= <span class="keyword">new</span> File(<span class="string">"newDira\\newDirb"</span>);</span><br><span class="line">        System.out.println(f4.mkdirs());<span class="comment">// true</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 文件的删除</span></span><br><span class="line">       System.out.println(f.delete());<span class="comment">// true</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 目录的删除</span></span><br><span class="line">        System.out.println(f2.delete());<span class="comment">// true</span></span><br><span class="line">        System.out.println(f4.delete());<span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>API中说明：delete方法，如果此File表示目录，则目录必须为空才能删除。</p></blockquote><h2 id="4-4-目录的遍历"><a href="#4-4-目录的遍历" class="headerlink" title="4.4 目录的遍历"></a>4.4 目录的遍历</h2><ul><li><p><code>public String[] list()</code> ：返回一个String数组，表示该File目录中的所有子文件或目录。</p></li><li><p><code>public File[] listFiles()</code> ：返回一个File数组，表示该File目录中的所有的子文件或目录。  </p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileFor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File dir = <span class="keyword">new</span> File(<span class="string">"d:\\java_code"</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//获取当前目录下的文件以及文件夹的名称。</span></span><br><span class="line">String[] names = dir.list();</span><br><span class="line"><span class="keyword">for</span>(String name : names)&#123;</span><br><span class="line">System.out.println(name);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//获取当前目录下的文件以及文件夹对象，只要拿到了文件对象，那么就可以获取更多信息</span></span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            System.out.println(file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：</p><p>调用listFiles方法的File对象，表示的必须是实际存在的目录，否则返回null，无法进行遍历。</p></blockquote><h1 id="第五章-递归"><a href="#第五章-递归" class="headerlink" title="第五章 递归"></a>第五章 递归</h1><h2 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h2><ul><li><strong>递归</strong>：指在当前方法内调用自己的这种现象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">    a();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-递归累和"><a href="#5-2-递归累和" class="headerlink" title="5.2 递归累和"></a>5.2 递归累和</h2><h3 id="计算1-n的和"><a href="#计算1-n的和" class="headerlink" title="计算1 ~ n的和"></a>计算1 ~ n的和</h3><p><strong>分析</strong>：num的累和 = num + (num-1)的累和，所以可以把累和的操作定义成一个方法，递归调用。</p><p><strong>实现代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiGuiDemo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//计算1~num的和，使用递归完成</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">5</span>;</span><br><span class="line">      <span class="comment">// 调用求和的方法</span></span><br><span class="line"><span class="keyword">int</span> sum = getSum(num);</span><br><span class="line">      <span class="comment">// 输出结果</span></span><br><span class="line">System.out.println(sum);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    通过递归算法实现.</span></span><br><span class="line"><span class="comment">    参数列表:int </span></span><br><span class="line"><span class="comment">    返回值类型: int </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">      <span class="comment">/* </span></span><br><span class="line"><span class="comment">         num为1时,方法返回1,</span></span><br><span class="line"><span class="comment">         相当于是方法的出口,num总有是1的情况</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="keyword">if</span>(num == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">          num不为1时,方法返回 num +(num-1)的累和</span></span><br><span class="line"><span class="comment">          递归调用getSum方法</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="keyword">return</span> num + getSum(num-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：递归一定要有条件限定，保证递归能够停止下来，次数不要太多，否则会发生栈内存溢出。</p></blockquote><h2 id="5-3-递归求阶乘"><a href="#5-3-递归求阶乘" class="headerlink" title="5.3 递归求阶乘"></a>5.3 递归求阶乘</h2><ul><li><strong>阶乘</strong>：所有小于及等于该数的正整数的积。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n的阶乘：n! = n * (n-<span class="number">1</span>) *...* <span class="number">3</span> * <span class="number">2</span> * <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>分析</strong>：这与累和类似,只不过换成了乘法运算，学员可以自己练习，需要注意阶乘值符合int类型的范围。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">推理得出：n! = n * (n-1)!</span><br></pre></td></tr></table></figure><p><strong>代码实现</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiGuiDemo</span> </span>&#123;</span><br><span class="line">  <span class="comment">//计算n的阶乘，使用递归完成</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">3</span>;</span><br><span class="line">      <span class="comment">// 调用求阶乘的方法</span></span><br><span class="line">        <span class="keyword">int</span> value = getValue(n);</span><br><span class="line">      <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(<span class="string">"阶乘为:"</span>+ value);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    通过递归算法实现.</span></span><br><span class="line"><span class="comment">    参数列表:int </span></span><br><span class="line"><span class="comment">    返回值类型: int </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 1的阶乘为1</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        n不为1时,方法返回 n! = n*(n-1)!</span></span><br><span class="line"><span class="comment">          递归调用getValue方法</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">        <span class="keyword">return</span> n * getValue(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-4-文件搜索"><a href="#5-4-文件搜索" class="headerlink" title="5.4 文件搜索"></a>5.4 文件搜索</h2><p>搜索<code>D:\aaa</code> 目录中的<code>.java</code> 文件。</p><p><strong>分析</strong>：</p><ol><li>目录搜索，无法判断多少级目录，所以使用递归，遍历所有目录。</li><li>遍历目录时，获取的子文件，通过文件名称，判断是否符合条件。</li></ol><p><strong>代码实现</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiGuiDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建File对象</span></span><br><span class="line">        File dir  = <span class="keyword">new</span> File(<span class="string">"D:\\aaa"</span>);</span><br><span class="line">      <span class="comment">// 调用打印目录方法</span></span><br><span class="line">        printDir(dir);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDir</span><span class="params">(File dir)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 获取子文件和目录</span></span><br><span class="line">        File[] files = dir.listFiles();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 循环打印</span></span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">              <span class="comment">// 是文件，判断文件名并输出文件绝对路径</span></span><br><span class="line">                <span class="keyword">if</span> (file.getName().endsWith(<span class="string">".java"</span>)) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"文件名:"</span> + file.getAbsolutePath());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 是目录，继续遍历,形成递归</span></span><br><span class="line">                printDir(file);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第六章-IO概述"><a href="#第六章-IO概述" class="headerlink" title="第六章 IO概述"></a>第六章 IO概述</h1><h2 id="6-1-什么是IO"><a href="#6-1-什么是IO" class="headerlink" title="6.1 什么是IO"></a>6.1 什么是IO</h2><p>生活中，你肯定经历过这样的场景。当你编辑一个文本文件，忘记了<code>ctrl+s</code> ，可能文件就白白编辑了。当你电脑上插入一个U盘，可以把一个视频，拷贝到你的电脑硬盘里。那么数据都是在哪些设备上的呢？键盘、内存、硬盘、外接设备等等。</p><p>我们把这种数据的传输，可以看做是一种数据的流动，按照流动的方向，以内存为基准，分为<code>输入input</code> 和<code>输出output</code> ，即流向内存是输入流，流出内存的输出流。</p><p>Java中I/O操作主要是指使用<code>java.io</code>包下的内容，进行输入、输出操作。<strong>输入</strong>也叫做<strong>读取</strong>数据，<strong>输出</strong>也叫做作<strong>写出</strong>数据。</p><h2 id="6-2-IO的分类"><a href="#6-2-IO的分类" class="headerlink" title="6.2 IO的分类"></a>6.2 IO的分类</h2><p>根据数据的流向分为：<strong>输入流</strong>和<strong>输出流</strong>。</p><ul><li><strong>输入流</strong> ：把数据从<code>其他设备</code>上读取到<code>内存</code>中的流。 </li><li><strong>输出流</strong> ：把数据从<code>内存</code> 中写出到<code>其他设备</code>上的流。</li></ul><p>格局数据的类型分为：<strong>字节流</strong>和<strong>字符流</strong>。</p><ul><li><strong>字节流</strong> ：以字节为单位，读写数据的流。</li><li><strong>字符流</strong> ：以字符为单位，读写数据的流。</li></ul><h2 id="6-4-顶级父类们"><a href="#6-4-顶级父类们" class="headerlink" title="6.4 顶级父类们"></a>6.4 顶级父类们</h2><table><thead><tr><th align="center"></th><th align="center"><strong>输入流</strong></th><th align="center">输出流</th></tr></thead><tbody><tr><td align="center"><strong>字节流</strong></td><td align="center">字节输入流<br><strong>InputStream</strong></td><td align="center">字节输出流<br><strong>OutputStream</strong></td></tr><tr><td align="center"><strong>字符流</strong></td><td align="center">字符输入流<br><strong>Reader</strong></td><td align="center">字符输出流<br><strong>Writer</strong></td></tr></tbody></table><h1 id="第七章-字节流"><a href="#第七章-字节流" class="headerlink" title="第七章 字节流"></a>第七章 字节流</h1><h2 id="7-1-一切皆为字节"><a href="#7-1-一切皆为字节" class="headerlink" title="7.1 一切皆为字节"></a>7.1 一切皆为字节</h2><p>一切文件数据(文本、图片、视频等)在存储时，都是以二进制数字的形式保存，都一个一个的字节，那么传输时一样如此。所以，字节流可以传输任意文件数据。在操作流的时候，我们要时刻明确，无论使用什么样的流对象，底层传输的始终为二进制数据。</p><h2 id="7-2-字节输出流【OutputStream】"><a href="#7-2-字节输出流【OutputStream】" class="headerlink" title="7.2 字节输出流【OutputStream】"></a>7.2 字节输出流【OutputStream】</h2><p><code>java.io.OutputStream</code>抽象类是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。</p><ul><li><code>public void close()</code> ：关闭此输出流并释放与此流相关联的任何系统资源。  </li><li><code>public void flush()</code> ：刷新此输出流并强制任何缓冲的输出字节被写出。  </li><li><code>public void write(byte[] b)</code>：将 b.length字节从指定的字节数组写入此输出流。  </li><li><code>public void write(byte[] b, int off, int len)</code> ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。  </li><li><code>public abstract void write(int b)</code> ：将指定的字节输出流。</li></ul><blockquote><p>小贴士：</p><p>close方法，当完成流的操作时，必须调用此方法，释放系统资源。</p></blockquote><h2 id="7-3-FileOutputStream类"><a href="#7-3-FileOutputStream类" class="headerlink" title="7.3 FileOutputStream类"></a>7.3 FileOutputStream类</h2><p><code>OutputStream</code>有很多子类，我们从最简单的一个子类开始。</p><p><code>java.io.FileOutputStream</code>类是文件输出流，用于将数据写出到文件。</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>public FileOutputStream(File file)</code>：创建文件输出流以写入由指定的 File对象表示的文件。 </li><li><code>public FileOutputStream(String name)</code>： 创建文件输出流以指定的名称写入文件。  </li></ul><p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有这个文件，会创建该文件。如果有这个文件，会清空这个文件的数据。</p><ul><li>构造举例，代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamConstructor</span> <span class="title">throws</span> <span class="title">IOException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"a.txt"</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"b.txt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写出字节数据"><a href="#写出字节数据" class="headerlink" title="写出字节数据"></a>写出字节数据</h3><ol><li><strong>写出字节</strong>：<code>write(int b)</code> 方法，每次可以写出一个字节数据，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FOSWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"fos.txt"</span>);     </span><br><span class="line">      <span class="comment">// 写出数据</span></span><br><span class="line">      fos.write(<span class="number">97</span>); <span class="comment">// 写出第1个字节</span></span><br><span class="line">      fos.write(<span class="number">98</span>); <span class="comment">// 写出第2个字节</span></span><br><span class="line">      fos.write(<span class="number">99</span>); <span class="comment">// 写出第3个字节</span></span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">abc</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：</p><ol><li>虽然参数为int类型四个字节，但是只会保留一个字节的信息写出。</li><li>流操作完毕后，必须释放系统资源，调用close方法，千万记得。</li></ol></blockquote><ol><li><strong>写出字节数组</strong>：<code>write(byte[] b)</code>，每次可以写出数组中的数据，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FOSWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"fos.txt"</span>);     </span><br><span class="line">      <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">      <span class="keyword">byte</span>[] b = <span class="string">"黑马程序员"</span>.getBytes();</span><br><span class="line">      <span class="comment">// 写出字节数组数据</span></span><br><span class="line">      fos.write(b);</span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">黑马程序员</span><br></pre></td></tr></table></figure><ol><li><strong>写出指定长度字节数组</strong>：<code>write(byte[] b, int off, int len)</code> ,每次写出从off索引开始，len个字节，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FOSWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"fos.txt"</span>);     </span><br><span class="line">      <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">      <span class="keyword">byte</span>[] b = <span class="string">"abcde"</span>.getBytes();</span><br><span class="line"><span class="comment">// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span></span><br><span class="line">        fos.write(b,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">cd</span><br></pre></td></tr></table></figure><h3 id="数据追加续写"><a href="#数据追加续写" class="headerlink" title="数据追加续写"></a>数据追加续写</h3><p>经过以上的演示，每次程序运行，创建输出流对象，都会清空目标文件中的数据。如何保留目标文件中数据，还能继续添加新数据呢？</p><ul><li><code>public FileOutputStream(File file, boolean append)</code>： 创建文件输出流以写入由指定的 File对象表示的文件。  </li><li><code>public FileOutputStream(String name, boolean append)</code>： 创建文件输出流以指定的名称写入文件。  </li></ul><p>这两个构造方法，参数中都需要传入一个boolean类型的值，<code>true</code> 表示追加数据，<code>false</code> 表示清空原有数据。这样创建的输出流对象，就可以指定是否追加续写了，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FOSWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"fos.txt"</span>，<span class="keyword">true</span>);     </span><br><span class="line">      <span class="comment">// 字符串转换为字节数组</span></span><br><span class="line">      <span class="keyword">byte</span>[] b = <span class="string">"abcde"</span>.getBytes();</span><br><span class="line"><span class="comment">// 写出从索引2开始，2个字节。索引2是c，两个字节，也就是cd。</span></span><br><span class="line">        fos.write(b);</span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">文件操作前：cd</span><br><span class="line">文件操作后：cdabcde</span><br></pre></td></tr></table></figure><h3 id="写出换行"><a href="#写出换行" class="headerlink" title="写出换行"></a>写出换行</h3><p>Windows系统里，换行符号是<code>\r\n</code> 。把</p><p>以指定是否追加续写了，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FOSWrite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"fos.txt"</span>);  </span><br><span class="line">      <span class="comment">// 定义字节数组</span></span><br><span class="line">      <span class="keyword">byte</span>[] words = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>,<span class="number">101</span>&#125;;</span><br><span class="line">      <span class="comment">// 遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; words.length; i++) &#123;</span><br><span class="line">          <span class="comment">// 写出一个字节</span></span><br><span class="line">            fos.write(words[i]);</span><br><span class="line">          <span class="comment">// 写出一个换行, 换行符号转成数组写出</span></span><br><span class="line">            fos.write(<span class="string">"\r\n"</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// 关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">e</span><br></pre></td></tr></table></figure><blockquote><ul><li>回车符<code>\r</code>和换行符<code>\n</code> ：<ul><li>回车符：回到一行的开头（return）。</li><li>换行符：下一行（newline）。</li></ul></li><li>系统中的换行：<ul><li>Windows系统里，每行结尾是 <code>回车+换行</code> ，即<code>\r\n</code>；</li><li>Unix系统里，每行结尾只有 <code>换行</code> ，即<code>\n</code>；</li><li>Mac系统里，每行结尾是 <code>回车</code> ，即<code>\r</code>。从 Mac OS X开始与Linux统一。</li></ul></li></ul></blockquote><h2 id="7-4-字节输入流【InputStream】"><a href="#7-4-字节输入流【InputStream】" class="headerlink" title="7.4 字节输入流【InputStream】"></a>7.4 字节输入流【InputStream】</h2><p><code>java.io.InputStream</code>抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中。它定义了字节输入流的基本共性功能方法。</p><ul><li><code>public void close()</code> ：关闭此输入流并释放与此流相关联的任何系统资源。    </li><li><code>public abstract int read()</code>： 从输入流读取数据的下一个字节。 </li><li><code>public int read(byte[] b)</code>： 从输入流中读取一些字节数，并将它们存储到字节数组 b中 。</li></ul><blockquote><p>小贴士：</p><p>close方法，当完成流的操作时，必须调用此方法，释放系统资源。</p></blockquote><h2 id="7-5-FileInputStream类"><a href="#7-5-FileInputStream类" class="headerlink" title="7.5 FileInputStream类"></a>7.5 FileInputStream类</h2><p><code>java.io.FileInputStream</code>类是文件输入流，从文件中读取字节。</p><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><code>FileInputStream(File file)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File对象 file命名。 </li><li><code>FileInputStream(String name)</code>： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名 name命名。  </li></ul><p>当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有该文件,会抛出<code>FileNotFoundException</code> </p><ul><li>构造举例，代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStreamConstructor</span> <span class="title">throws</span> <span class="title">IOException</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用File对象创建流对象</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"a.txt"</span>);</span><br><span class="line">        FileInputStream fos = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">        FileInputStream fos = <span class="keyword">new</span> FileInputStream(<span class="string">"b.txt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取字节数据"><a href="#读取字节数据" class="headerlink" title="读取字节数据"></a>读取字节数据</h3><ol><li><strong>读取字节</strong>：<code>read</code>方法，每次可以读取一个字节的数据，提升为int类型，读取到文件末尾，返回<code>-1</code>，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FISRead</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">       FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"read.txt"</span>);</span><br><span class="line">      <span class="comment">// 读取数据，返回一个字节</span></span><br><span class="line">        <span class="keyword">int</span> read = fis.read();</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) read);</span><br><span class="line">        read = fis.read();</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) read);</span><br><span class="line">        read = fis.read();</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) read);</span><br><span class="line">        read = fis.read();</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) read);</span><br><span class="line">        read = fis.read();</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) read);</span><br><span class="line">      <span class="comment">// 读取到末尾,返回-1</span></span><br><span class="line">       read = fis.read();</span><br><span class="line">        System.out.println( read);</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">e</span><br><span class="line">-<span class="number">1</span></span><br></pre></td></tr></table></figure><p>循环改进读取方式，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FISRead</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象</span></span><br><span class="line">       FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"read.txt"</span>);</span><br><span class="line">      <span class="comment">// 定义变量，保存数据</span></span><br><span class="line">        <span class="keyword">int</span> b ；</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((b = fis.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>)b);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">e</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：</p><ol><li>虽然读取了一个字节，但是会自动提升为int类型。</li><li>流操作完毕后，必须释放系统资源，调用close方法，千万记得。</li></ol></blockquote><ol><li><strong>使用字节数组读取</strong>：<code>read(byte[] b)</code>，每次读取b的长度个字节到数组中，返回读取到的有效字节个数，读取到末尾时，返回<code>-1</code> ，代码使用演示：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FISRead</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象.</span></span><br><span class="line">       FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"read.txt"</span>); <span class="comment">// 文件中为abcde</span></span><br><span class="line">      <span class="comment">// 定义变量，作为有效个数</span></span><br><span class="line">        <span class="keyword">int</span> len ；</span><br><span class="line">        <span class="comment">// 定义字节数组，作为装字节数据的容器   </span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> (( len= fis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">           <span class="comment">// 每次读取后,把数组变成字符串打印</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(b));</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">ab</span><br><span class="line">cd</span><br><span class="line">ed</span><br></pre></td></tr></table></figure><p>错误数据<code>d</code>，是由于最后一次读取时，只读取一个字节<code>e</code>，数组中，上次读取的数据没有被完全替换，所以要通过<code>len</code> ，获取有效的字节，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FISRead</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">      <span class="comment">// 使用文件名称创建流对象.</span></span><br><span class="line">       FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"read.txt"</span>); <span class="comment">// 文件中为abcde</span></span><br><span class="line">      <span class="comment">// 定义变量，作为有效个数</span></span><br><span class="line">        <span class="keyword">int</span> len ；</span><br><span class="line">        <span class="comment">// 定义字节数组，作为装字节数据的容器   </span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> (( len= fis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">           <span class="comment">// 每次读取后,把数组的有效字节部分，变成字符串打印</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(b，<span class="number">0</span>，len));<span class="comment">//  len 每次读取的有效字节个数</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">ab</span><br><span class="line">cd</span><br><span class="line">e</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：</p><p>使用数组读取，每次读取多个字节，减少了系统间的IO操作次数，从而提高了读写的效率，建议开发中使用。</p></blockquote><h2 id="4-6-字节流练习：图片复制"><a href="#4-6-字节流练习：图片复制" class="headerlink" title="4.6 字节流练习：图片复制"></a>4.6 字节流练习：图片复制</h2><h3 id="案例实现"><a href="#案例实现" class="headerlink" title="案例实现"></a>案例实现</h3><p>复制图片文件，代码使用演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Copy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建流对象</span></span><br><span class="line">        <span class="comment">// 1.1 指定数据源</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"D:\\test.jpg"</span>);</span><br><span class="line">        <span class="comment">// 1.2 指定目的地</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"test_copy.jpg"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.读写数据</span></span><br><span class="line">        <span class="comment">// 2.1 定义数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">// 2.2 定义长度</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="comment">// 2.3 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 2.4 写出数据</span></span><br><span class="line">            fos.write(b, <span class="number">0</span> , len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.关闭资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小贴士：</p><p>流的关闭原则：先开后关，后开先关。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC 快速回顾</title>
      <link href="/2022/12/30/JDBC-%20all%20in%20one/"/>
      <url>/2022/12/30/JDBC-%20all%20in%20one/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="JDBC概述"><a href="#JDBC概述" class="headerlink" title="JDBC概述"></a>JDBC概述</h2><ul><li>JDBC：Java Database Connectivity ,是sun公司为了简化和统一java连接数据库定义的一套规范</li></ul><h2 id="JDBC和数据库驱动的关系"><a href="#JDBC和数据库驱动的关系" class="headerlink" title="JDBC和数据库驱动的关系"></a>JDBC和数据库驱动的关系</h2><ul><li>接口(JDBC)和实现(驱动jar)的关系</li></ul><h2 id="JDBC编程6步"><a href="#JDBC编程6步" class="headerlink" title="JDBC编程6步"></a>JDBC编程6步</h2><ul><li>注册驱动</li><li>获得连接</li><li>获取执行sql语句的对象</li><li>执行sql语句</li><li>处理结果</li><li>释放资源</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(&quot;驱动的路径&quot;);</span><br><span class="line">DriverManager.getConnection(&quot;数据库路径&quot;,&quot;数据库用户名&quot;,&quot;数据库密码&quot;);</span><br><span class="line">statement : 执行SQL语句的对象</span><br><span class="line">Connection:连接数据库的对象</span><br><span class="line">ResultSet:结果集对象,作用:保存查询后的结果集</span><br><span class="line">Close:释放资源</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.simba1949.jdbc;</span><br><span class="line"><span class="keyword">import</span> com.mysql.jdbc.Driver;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tt01</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">        Statement statement = <span class="keyword">null</span>;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.注册驱动 DriverManger</span></span><br><span class="line">            DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">            <span class="comment">//2.建立连接Connection</span></span><br><span class="line">            String url = <span class="string">"jdbc:mysql://localhost:3306/test"</span>;</span><br><span class="line">            String user = <span class="string">"root"</span>;</span><br><span class="line">            String password = <span class="string">"19491001"</span>;</span><br><span class="line">            connection = DriverManager.getConnection(url, user, password);</span><br><span class="line">            <span class="comment">//3.获取执行sql语句的对象Statement</span></span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            <span class="comment">//4.执行sql语句</span></span><br><span class="line">            String sql = <span class="string">"select * from USER "</span>;</span><br><span class="line">            resultSet = statement.executeQuery(sql);</span><br><span class="line">            <span class="comment">//5.处理结果</span></span><br><span class="line">            <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">                System.out.println(resultSet.getString(<span class="string">"uid"</span>));</span><br><span class="line">                System.out.println(resultSet.getString(<span class="number">2</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//6.释放资源</span></span><br><span class="line">            <span class="comment">//关闭结果集</span></span><br><span class="line">            resultSet.close();</span><br><span class="line">            <span class="comment">//关闭执行sql语句的对象statement</span></span><br><span class="line">            statement.close();</span><br><span class="line">            <span class="comment">//关闭连接</span></span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDBC-API详解"><a href="#JDBC-API详解" class="headerlink" title="JDBC API详解"></a>JDBC API详解</h2><p><strong>1.java.sql.DriverManager</strong></p><p>作用：主要是用于加载驱动，并且创建和数据库的连接</p><p>1.1 RegisterDriver(Driver driver) ;注册驱动</p><ul><li>翻阅源码发现,通过API的方式注册驱动,Driver会new两次,所有推荐这种写法:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br></pre></td></tr></table></figure><p>1.2 getConnection(String url, String user, String password) ;与数据库建立连接</p><p>常见的几种数据库连接字符串的写法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MySql写法:  jdbc:mysql:<span class="comment">//localhost:3306/sid</span></span><br><span class="line">Oracle写法：     jdbc:oracle:thin:<span class="meta">@localhost</span>:<span class="number">1521</span>:sid</span><br><span class="line">SqlServer写法:    jdbc:microsoft:sqlserver:<span class="comment">//localhost:1433; DatabaseName=sid</span></span><br></pre></td></tr></table></figure><p><strong>2.java.sql.Connection接口</strong></p><ul><li>接口的实现在数据库驱动中。所有与数据库交互都是基于连接对象的。</li></ul><p>2.1 createStatement() ;创建执行sql语句对象</p><p>2.2 prepareStatement(String sql) ;创建预编译执行sql语句的对象</p><p><strong>3.java.sql.Statement接口</strong></p><ul><li>接口的实现在数据库驱动中</li><li>操作sql语句，并返回相应结果对象</li></ul><p>3.1 Statement; 执行sql语句对象</p><ul><li>ResultSet executeQuery(String sql) 根据查询语句返回结果集。只能执行select语句。</li><li>int executeUpdate(String sql) 根据执行的DML（insert update delete）语句，返回受影响的行数。</li><li>boolean execute(String sql) 此方法可以执行任意sql语句。返回boolean值，表示是否返回的是ResultSet结果集。仅当执行select语句，且有返回结果时返回true, 其它语句都返回false</li></ul><p><strong>4.java.sql.ResultSet接口</strong></p><p>4.1封装结果集,查询结果表的对象</p><ul><li>提供一个游标，默认游标指向结果集第一行之前。</li><li>调用一次next()，游标向下移动一行。</li><li>提供一些getXXX方法。XXX代表的是数据类型</li></ul><p>4.2ResultSet接口常用API</p><ul><li>boolean next() ;将光标从当前位置向下移动一行</li><li>XXX getXXX(int columnIndex) : 根据列的序号获取XXX类型的值,列的序号从1开始</li><li>XXX getXXX(String columnName) : 根据列名去获取XXX类型的值</li><li>void close()关闭ResultSet 对象</li></ul><h2 id="SQL注入问题解决：preparedStatement"><a href="#SQL注入问题解决：preparedStatement" class="headerlink" title="SQL注入问题解决：preparedStatement"></a>SQL注入问题解决：preparedStatement</h2><h3 id="什么是SQL注入"><a href="#什么是SQL注入" class="headerlink" title="什么是SQL注入:"></a>什么是SQL注入:</h3><p>SQL 注入是用户利用某些系统没有对输入数据进行充分的检查，从而进行恶意破坏的行为。</p><p><strong>1.preparedStatement概述</strong></p><p>预编译对象， 是Statement对象的子类。</p><p>特点：</p><ul><li>性能要高</li><li>会把sql语句先编译,格式固定好,</li><li>sql语句中的参数会发生变化，过滤掉用户输入的关键字(or)。</li></ul><p><strong>2.用法</strong></p><p>2.1通过connection对象创建</p><ul><li>prepareStatement(String sql) ;创建prepareStatement对象</li><li>sql表示预编译的sql语句,如果sql语句有参数通过?来占位</li></ul><p>2.2通过setxxx方法来指定参数</p><ul><li>setxxx(int i,Obj obj); i 指的就是问号的索引(指第几个问号,从1开始),xxx是类型(eg:int,String,Long)</li></ul><p>eg:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"select *from user where username =? and password =?"</span>;</span><br><span class="line"><span class="comment">//创建prepareStatement</span></span><br><span class="line">statement = connection.prepareStatement(sql);</span><br><span class="line"><span class="comment">//设置参数</span></span><br><span class="line">statement.setString(<span class="number">1</span>, username);</span><br><span class="line">statement.setString(<span class="number">2</span>, password);</span><br><span class="line">resultSet = statement.executeQuery();</span><br></pre></td></tr></table></figure><h2 id="连接池技术"><a href="#连接池技术" class="headerlink" title="连接池技术"></a>连接池技术</h2><h3 id="自定义连接池"><a href="#自定义连接池" class="headerlink" title="自定义连接池"></a>自定义连接池</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.simba1949.jdbc;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建容器，用于存放连接Connection</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LinkedList&lt;Connection&gt; pool = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url = <span class="string">"jdbc:mysql://localhost:3306/test"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user = <span class="string">"root"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password = <span class="string">"19491001"</span>;</span><br><span class="line">    <span class="comment">//1.1初始化连接池中的连接</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">3</span>;i++)&#123;</span><br><span class="line">                <span class="comment">//1.2获取连接，放入池子</span></span><br><span class="line">                Connection connection = DriverManager.getConnection(url, user, password);</span><br><span class="line">                pool.add(connection);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2.获取连接，从连接池中获取连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//LinkedList:移除并返回此列表的第一个元素。</span></span><br><span class="line">        <span class="keyword">return</span> pool.removeFirst();</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Connection connection)</span></span>&#123;</span><br><span class="line">        <span class="comment">//将从连接池获取的连接归还连接池</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != connection)&#123;</span><br><span class="line">            pool.add(connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义规范连接池（装饰者设计模式）"><a href="#自定义规范连接池（装饰者设计模式）" class="headerlink" title="自定义规范连接池（装饰者设计模式）"></a>自定义规范连接池（装饰者设计模式）</h3><p><strong>装饰者设计模式</strong></p><p>固定结构：接口A，已知实现类C，需要装饰者创建代理类B</p><ul><li>创建类B，并实现接口A</li><li>提供类B的构造方法，参数类型为A，用于接受A的其他实现类</li><li>给类B添加类型为A的成员变量，用于存放A接口的实现类</li><li>增强需要的方法</li><li>实现不需要增强的方法，方法体重新调用成员变量存放的其他实现类对应的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.simba1949.jdbc;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionTest</span> <span class="keyword">implements</span> <span class="title">Connection</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Connection&gt; pool;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConnectionTest</span><span class="params">(Connection connection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.connection = connection;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConnectionTest</span><span class="params">(Connection connection, List&lt;Connection&gt; pool)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.connection = connection;</span><br><span class="line">        <span class="keyword">this</span>.pool = pool;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//需要增强的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pool.add(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不需要增强的方法调用原来的方法返回</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Statement <span class="title">createStatement</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.connection.createStatement();</span><br><span class="line">    &#125;</span><br><span class="line">  ......</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据库 </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC-JDBC 加载数据库驱动，获取数据库连接</title>
      <link href="/2022/12/22/JDBC-%20%E7%AC%AC%E4%B8%80%E6%AD%A5/"/>
      <url>/2022/12/22/JDBC-%20%E7%AC%AC%E4%B8%80%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="加载数据库驱动"><a href="#加载数据库驱动" class="headerlink" title="加载数据库驱动"></a>加载数据库驱动</h2><p>通常来说，JDBC 使用 Class 类的 forName() 静态方法来加载驱动，需要输入数据库驱动代表的字符串。</p><p>例如： </p><p>加载 MySQL 驱动：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br></pre></td></tr></table></figure><p>加载 Oracle 驱动：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">"oracle.jdbc.driver.OracleDriver"</span>);</span><br></pre></td></tr></table></figure><p>以及之后我 demo 使用的 SQLite 驱动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">"org.sqlite.JDBC"</span>);</span><br></pre></td></tr></table></figure><p>这些数据库驱动的字符串，可以在数据库厂商提供的驱动（jar 包）找到，例如我使用的 SQLite：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xerial<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sqlite-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在下面这个文件内，就存放着该驱动的字符串：</p><p>org\xerial\sqlite-jdbc\3.8.11.2\sqlite-jdbc-3.8.11.2.jar!\META-INF\services\java.sql.Driver</p><h2 id="获取数据库连接"><a href="#获取数据库连接" class="headerlink" title="获取数据库连接"></a>获取数据库连接</h2><p>DriverManagement 提供了一系列的方法，来获取 Connection，每一个 Connection 代表一个对数据库的物理连接：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">(String url, java.util.Properties info)</span> <span class="keyword">throws</span> SQLException；</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">(String url, String user, String password)</span> <span class="keyword">throws</span> SQLException；</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">(String url)</span> <span class="keyword">throws</span> SQLException；</span></span><br></pre></td></tr></table></figure><p>对于大多数的数据而言，获取 Connection 需要数据库 URL，登陆数据库的用户和密码。</p><p>数据库的用户和密码，通常由 DBA（Database Administrator）来分配，同时需要具有登录数据库的权限。</p><p>数据库 URL 遵循如下写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:subprotocol:other stuff</span><br></pre></td></tr></table></figure><p>上面的写法中，jdbc 是固定的，subprotocol 指特定的数据库驱动，而后面的 other 和 stuff 则不固定，不同的数据库写法也存在差异。</p><p>而我 demo 的 SQLite 数据库，由于只是一个很小型的数据库，所以只需要 URL 就可以获取连接：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DriverManager.getConnection(<span class="string">"jdbc:sqlite:G:/github-workspace/jdbc/src/main/resources/db/test.db"</span>);</span><br></pre></td></tr></table></figure><p>特定的数据库 URL 写法，在 JDBC 驱动文档中会提供。</p><h2 id="使用-properties-文件"><a href="#使用-properties-文件" class="headerlink" title="使用 properties 文件"></a>使用 properties 文件</h2><p>一般来说，数据库驱动字符串，数据库连接 URL，数据库用户和密码这些信息，都不会直接在代码中写死，而是使用一个 properties 文件去存储这些信息。</p><p>例如 Hibernate, MyBatis 这些 ORM 框架都是采取了这种做法。</p><p>下面 demo 一个我写的例子：</p><p><strong>sql.properties</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">driver=org.sqlite.JDBC</span><br><span class="line">url=jdbc:sqlite:&#123;<span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>SqlProperties.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gerrard.util;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.gerrard.constants.ErrorCode;</span><br><span class="line"><span class="keyword">import</span> com.gerrard.exception.JdbcSampleException;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.MessageFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlProperties</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PROPERTIES_PATH = <span class="keyword">new</span> File(<span class="string">""</span>).getAbsolutePath().replace(<span class="string">"\\"</span>, <span class="string">"/"</span>) + <span class="string">"/src/main/resources/sql.properties"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_ROOT_URL = <span class="keyword">new</span> File(<span class="string">""</span>).getAbsolutePath().replace(<span class="string">"\\"</span>, <span class="string">"/"</span>) + <span class="string">"/src/main/resources/db/"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlProperties sqlProps;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_TEST = <span class="string">"test.db"</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SqlProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> SqlProperties <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sqlProps == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">                props.load(<span class="keyword">new</span> FileInputStream(PROPERTIES_PATH));</span><br><span class="line">                transferProperties(props);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                String errorMessage = <span class="string">"Fail to load properties file"</span>;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> JdbcSampleException(ErrorCode.LOAD_PROPERTIES_ERROR, errorMessage);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlProps;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">transferProperties</span><span class="params">(Properties props)</span> </span>&#123;</span><br><span class="line">        sqlProps = <span class="keyword">new</span> SqlProperties();</span><br><span class="line">        sqlProps.driver = props.getProperty(<span class="string">"driver"</span>);</span><br><span class="line">        sqlProps.url = props.getProperty(<span class="string">"url"</span>);</span><br><span class="line">        transferDbUrl();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">transferDbUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String params[] = &#123;DB_ROOT_URL + DB_TEST&#125;;</span><br><span class="line">        sqlProps.url = MessageFormat.format(sqlProps.url, params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>DriverLoader.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gerrard.util;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.gerrard.constants.ErrorCode;</span><br><span class="line"><span class="keyword">import</span> com.gerrard.exception.JdbcSampleException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DriverLoader</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DriverLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadSqliteDriver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(SqlProperties.getInstance().getDriver());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JdbcSampleException(ErrorCode.LOAD_DRIVER_EXCEPTION, <span class="string">"Fail to load sqlite driver"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Connertor.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.gerrard.util;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.gerrard.constants.ErrorCode;</span><br><span class="line"><span class="keyword">import</span> com.gerrard.exception.JdbcSampleException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Connector</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Connector</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getSqlConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String url = SqlProperties.getInstance().getUrl();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> DriverManager.getConnection(url);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            String errorMessage = <span class="string">"Fail to get SQL connection with url "</span> + url;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> JdbcSampleException(ErrorCode.GET_CONNECTION_EXCEPTION, errorMessage);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据库 </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 整型长度的含义</title>
      <link href="/2022/12/22/Mysql%E5%B0%8F%E7%BB%86%E8%8A%82/"/>
      <url>/2022/12/22/Mysql%E5%B0%8F%E7%BB%86%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>初学时搞错”整型长度”的含义, <strong>误以为”整型”后面的数字代表的是”允许存储的最大宽度”, 比如, 误以为 <code>int(1)</code> 不能存储 <code>10</code>.</strong></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p><strong>“浮点型”的长度是用来限制数字存储范围的</strong>. 比如 <code>float(3,2)</code> 只能够写入 <code>0.00~999.99</code>.</p><p><strong>“整型”的长度并不会限制存储的数字范围</strong>. 比如, <code>int</code> 和 <code>int(3)</code> 的存储范围都是 <code>-2147483648 ~ 2147483647</code>, <code>int unsigned</code> 和 <code>int(3) unsigned</code> 的存储范围都是<code>0 ~ 4294967295</code>.</p><p><strong>“整型”的长度实际上可以理解为”显示长度”, 如果该字段开启 “Zerofill/补零”就能很明显地知道它的作用.</strong></p><p>比如, <code>a</code> <code>b</code> <code>c</code> <code>d</code> 分别表示 <code>int(1)</code> <code>int(2)</code> <code>int(3)</code> <code>int(3) zerofill</code>, 那么实际存入数据库的数据是这样的:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| v  | a  |  b  |  c |  d |</span><br><span class="line">+<span class="comment">-----+-----+-----+-----+-----+</span></span><br><span class="line">| 1  | 1  |  1  |  1 | 001 |</span><br><span class="line">| 10  | 10  | 10  |  10 | 010 |</span><br><span class="line">| 100 | 100 | 100 | 100 | 100 |</span><br></pre></td></tr></table></figure><p>PS. 如果开启 “Zerofill/补零”, 则自动会默认为 “Unsigned/非负数”。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis——基于XML的入门配置五步</title>
      <link href="/2022/12/22/mybatis%E2%80%94%E2%80%94%E5%85%A5%E9%97%A8%E4%BA%94%E6%AD%A5%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/12/22/mybatis%E2%80%94%E2%80%94%E5%85%A5%E9%97%A8%E4%BA%94%E6%AD%A5%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><ul><li>第一步： 配置Maven环境，打包方式设置为jar，加载MyBatis，MySQL依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  MyBatis  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--  MySQL  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第二步：新建，编辑mybatis-config.xml文件（放入resources文件夹）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/powernode"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"xxxx"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"xxxx"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"CarMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第三步：新建，配置xxxMapper.xml文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"org.mybatis.example.BlogMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        insert into t_car(id,car_num,brand,guide_price,produce_time,car_type)</span><br><span class="line">        values (null,1003,"面包车",13.00,"2020-10-13","飞行汽车")</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>第四步：在xxxMapper中编写sql代码（在3中已完成）</p></li><li><p>第五步：把xxxMapper.txt文件路径放入mybatis-config.txt中（在2中已完成）</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"CarMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意⚠</strong><br>在mybatis-config.xml中有一行为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>type类型可以写成两种，一种是JDBC另一种是MANAGED（不区分大小写）</p><ol><li>JDBC：交给JDBC处理事务（默认false，表示开启事务，需要手动提交）</li><li>MANAGED：有用到spring框架时设置为此，表交给框架处理事务，如果没有用到框架设置为此类型，则没有人处理事务，会自动提交</li></ol><p><strong>SqlSessionFactory.openSession()默认开启事务</strong></p>]]></content>
      
      
      <categories>
          
          <category> MyBatys </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC-JDBC 编程六步</title>
      <link href="/2022/12/21/JDBC-%20JDBC%20%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%A9%B1%E5%8A%A8%E7%B1%BB%E5%9E%8B/"/>
      <url>/2022/12/21/JDBC-%20JDBC%20%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%A9%B1%E5%8A%A8%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="JDBC-常用接口和类"><a href="#JDBC-常用接口和类" class="headerlink" title="JDBC 常用接口和类"></a>JDBC 常用接口和类</h2><ul><li><strong>DriverManager</strong><br>　　负责管理 JDBC 驱动的服务类，程序中主要的功能是获取连接数据库的 Connection 对象。</li></ul><ul><li><strong>Connection</strong><br>　　代表一个数据库连接对象，要访问数据库，首先需要获得数据库连接。<br>  同时，Connection 接口提供了获取执行 SQL 语句的 Statement 和 PreparedStatement 对象，以及控制事物（Transaction）的方法。</li></ul><ul><li><strong>Statement</strong><br>　　用于执行 SQL 语句的接口，同时支持执行 DDL（Data Definition Language），DCL（Data Control Language），DML（Data Manipulation Language）语句。<br>  我们常用的 CRUD 操作是 DML 语句。</li></ul><ul><li><strong>PreparedStatement</strong><br>　　Statement 的子接口，代表一个预编译的 Statement 对象。<br>　　　　所谓预编译，就是事先将 SQL 传入到 PreparedStatement 对象中，不必每一次在执行的时候加载 SQL 语句，所以在性能上会有所提高。<br>　　　　常用来执行带参数的 SQL 语句。</li></ul><ul><li><strong>ResultSet</strong><br>　　SQL 语句执行后的结果集对象。<br>　　　　当 Statement 或者其子接口，执行的是一个查询的 DML 语句，其返回就会是一个 ResultSet 对象。<br>　　　　ResultSet 中包含访问查询结果的方法。</li></ul><h2 id="JDBC-编程步骤"><a href="#JDBC-编程步骤" class="headerlink" title="JDBC 编程步骤"></a>JDBC 编程步骤</h2><p>通过以上介绍的 JDBC API，可以大致得知 JDBC 的编程步骤：</p><ol><li>加载数据库驱动。</li><li>通过 DriverManager 获取数据库连接 Connection。</li><li>通过 Connection 对象创建 Statement 对象（Statement，PreparedStatement，CallableStatement）。</li><li>外部传入 SQL 语句，使用 Statement 执行 SQL。</li><li>如果 SQL 是一个查询语句，操作结果集 ResultSet。</li><li>回收数据库资源（实现 Closeable/AutoCloseable 的 Connection，Statement 和 ResultSet）。</li></ol>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据库 </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC-基础</title>
      <link href="/2022/12/20/JDBC-JDBC%20%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/12/20/JDBC-JDBC%20%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="什么是-JDBC"><a href="#什么是-JDBC" class="headerlink" title="什么是 JDBC"></a>什么是 JDBC</h2><p>JDBC，Java Database Connectivity（Java 数据库连接），是一组执行 SQL 语句的 Java API。</p><p>JDBC，是 Java SE（Java Platform, Standard Edition）标准的一部分。</p><p>Java 程序可以通过 JDBC 连接到关系型数据库，并且使用 SQL（Structured Query Language，结构化查询语言）完成对数据库的操作。</p><p>我们开发时常用的 ORM 框架（Object Relational Mapping），例如 Hibernate，MyBatis，其本质就是对 JDBC 的一种封装。</p><h2 id="JDBC-驱动和面向接口编程"><a href="#JDBC-驱动和面向接口编程" class="headerlink" title="JDBC 驱动和面向接口编程"></a>JDBC 驱动和面向接口编程</h2><p>Java API，就是接口（interface），所以说 JDBC 只给出了接口，没有提供实现类。</p><p>由各个数据库的厂商提供 JDBC 的实现，这些实现类就是我们口中常说的：驱动程序。</p><p>JDBC 的编程工作，是需要面向标准的 JDBC API，不需要关心使用的数据库到底是什么。</p><p>使用 Oracle，DB2，还是 MyBatis 对于 JDBC 的编程都没有影响，这就是面向接口编程。</p><p>理论上说，如果需要切换数据库，只需要换一个驱动程序就可以了，所以说，JDBC 具有跨数据库的特性。</p><p>当然实际操作上没有这么简单，因为 JDBC 跨数据库的特性是基于全部使用标准的 SQL 语句，而某些数据库会有一些只有自己才能用的特殊 SQL 语法。</p><p>例如，Oracle 的 rowid、rownum，MySQL 的 limit。</p><h2 id="JDBC-组成和功能"><a href="#JDBC-组成和功能" class="headerlink" title="JDBC 组成和功能"></a>JDBC 组成和功能</h2><p>JDBC的总体结构有四个组件：应用程序、驱动程序管理器、驱动程序和数据源。 </p><p><img src="https://i.328888.xyz/2022/12/20/Aw9AU.md.png" alt></p><p>JDBC 主要有以下三个功能：</p><ul><li>建立程序与数据库的连接。</li><li>执行 SQL 语句。</li><li>获得 SQL 语句的执行结果。</li></ul><h2 id="JDBC-和-ODBC"><a href="#JDBC-和-ODBC" class="headerlink" title="JDBC 和 ODBC"></a>JDBC 和 ODBC</h2><p>ODBC，Open Database Connectivity（开放数据库连接），也是一组通过 API 访问数据库的技术。</p><p>ODBC 先于 JDBC 的出现，JDBC 模仿了 ODBC 的设计。</p><p>与 JDBC 相同，ODBC 需要数据库厂商提供驱动，支持数据库之间的切换，而 ODBC 负责管理数据库驱动。</p><p>相比于 ODBC，JDBC 有以下优势：</p><ul><li>JDBC 对于数据库的操作更加简单、直观。</li><li>JDBC 具有更高的安全性。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据库 </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC-JDBC 的四种驱动类型</title>
      <link href="/2022/12/20/JDBC-%206%20steps/"/>
      <url>/2022/12/20/JDBC-%206%20steps/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>JDBC 有四种驱动类型，分别是：</p><ul><li>JDBC-ODBC 桥（JDBC-ODBC bridge driver plus ODBC driver）</li><li>本地 API 驱动（Native-API partly Java driver）</li><li>网络协议驱动（JDBC-Net pure Java driver）</li><li>本地协议驱动（Native-protocol pure Java driver）</li></ul><p><img src="https://i.328888.xyz/2022/12/20/AHiLk.png" alt></p><h2 id="JDBC-ODBC-桥"><a href="#JDBC-ODBC-桥" class="headerlink" title="JDBC-ODBC 桥"></a>JDBC-ODBC 桥</h2><p>从名称之中就可以知道，这种驱动是 JDBC 在 ODBC 已有的功能上做了一层适配工作，即搭桥（Bridge）。</p><p>这种驱动完全依赖 ODBC 的实现，JDBC 只是做了一层封装工作。</p><p>JDBC-ODBC 桥最主要的功能，是支持 Java 访问 Access 这种伪关系型数据库。</p><p>JDBC-ODBC 桥最大的优点在于：ODBC 的代码在天然的在许多使用数据库的客户端上有，所以这种驱动的安装十分便捷。</p><p>但是，JDBC-ODBC 桥有以下两个主要的缺点：</p><ul><li>由于对 ODBC 的依赖，导致支持的功能有限，性能不佳，扩展能力很弱。</li><li>不适合在并发访问数据库的情况下使用。</li></ul><p>在 Java8 的实现中，已经删除了 JDBC-ODBC 桥这种驱动方式。</p><h2 id="本地-API-驱动"><a href="#本地-API-驱动" class="headerlink" title="本地 API 驱动"></a>本地 API 驱动</h2><p>这种驱动方式，相当于 JDBC 完全使用了 ODBC 的工作方式。</p><p>在这种驱动中，JDBC调用转换为对 DBMS 的客户端 API 的调用。</p><p>JDBC-ODBC 桥的驱动方式，等于是对所有的数据库调用进行了一次整合；而本地 API 驱动则是绕过了 ODBC，对数据库 API 的调用进行了整合。</p><p>所以这种驱动方式的效率，相比第一种驱动，会有显著的提高。</p><p>然而，与 JDBC-ODBC 桥驱动相同，对客户端数据库的 API 有依赖，所以也不适合基于 Internet 的应用。</p><h2 id="网络协议驱动"><a href="#网络协议驱动" class="headerlink" title="网络协议驱动"></a>网络协议驱动</h2><p>这种驱动方式，适用于基于 Internet 的应用，它依赖于一个网络服务器上的中间产品：</p><ul><li>首先，将 JDBC 调用转化为一个 DBMS 无关的网络协议，传递给中间服务器。</li><li>然后，中间服务器负责将这种请求，转化为符合相应的数据库规范的请求，转发给数据库服务器。</li></ul><p>这种驱动是基于 Server 端的，所以不需要在客户端加载数据库厂商的代码库。</p><p>它在在执行效率，可升级性，灵活性方面都很好。</p><p>这种驱动，设计的代码量很小，可以很快地加载到内存当中。</p><p>但是，这种驱动在中间件层仍然需要有配置其它数据库驱动程序，而且增加了一个中间层去传递数据，执行效率还不是最好。</p><p>同时，基于 Internet 的访问要求，客户端必须处理 Web 所提出的安全性、通过防火墙的访问等方面的额外要求。</p><h2 id="本地协议驱动"><a href="#本地协议驱动" class="headerlink" title="本地协议驱动"></a>本地协议驱动</h2><p>这种驱动程序将 JDBC 调用直接转换为 DBMS 使用的网络协议。</p><p>这种驱动允许从客户端机器直接调用 DBMS 服务器，是内部网（Intranet）访问的优秀解决方案。</p><p>由于许多这样的协议都是专用的，因此数据库提供者自己将是主要来源。</p><ol><li>总结</li></ol><ul><li>JDBC-ODBC 桥，适合作为开发应用时的一种过度方案，不使用大量的数据库操作。</li><li>本地 API 驱动，只适用于内部网，但是执行效率不高，所以一般也不采用。</li><li>网络协议驱动，适用于需要同时连接多个不同种类的数据库的应用。</li><li>本地协议驱动，适合于连接单一数据库的应用。<br>从执行效率来讲，第3、4型的驱动是首选，平时通过加载一个 jar 包来达到连接数据库目的的，是第4型驱动。</li></ul>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据库 </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring中注册Bean的方式有哪些？</title>
      <link href="/2022/12/19/Spring%E4%B8%AD%E6%B3%A8%E5%86%8CBean%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/"/>
      <url>/2022/12/19/Spring%E4%B8%AD%E6%B3%A8%E5%86%8CBean%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>我们知道，在使用Spring框架后，Bean统一都交给IOC容器去管理和创建，那么将一个对象加入到Spring容器中有哪些方式呢，今天我们结合具体的代码来总结一下。</p><h2 id="二、第一种方式：-XML配置方式"><a href="#二、第一种方式：-XML配置方式" class="headerlink" title="二、第一种方式： XML配置方式"></a>二、第一种方式： XML配置方式</h2><p>XML配置的方式，是Spring最早支持的方式，不过现在XML方式已经用的比较少了，基本上都是用后面的配置方式替代了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">   xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">   xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><span class="line">&lt;bean id=<span class="string">"student"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.wsh.injectbean.method_01.Student"</span>/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第一种方式： XML文件配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ClassPathXmlApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:spring-config.xml"</span>);</span><br><span class="line">System.out.println(applicationContext.getBean(<span class="string">"student"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、第二种方式：-使用-Component注解-ComponentScan包扫描方式"><a href="#三、第二种方式：-使用-Component注解-ComponentScan包扫描方式" class="headerlink" title="三、第二种方式： 使用@Component注解 + @ComponentScan包扫描方式"></a>三、第二种方式： 使用@Component注解 + @ComponentScan包扫描方式</h2><p>为了解决bean太多时，XML文件过大，从而导致膨胀不好维护的问题。在Spring2.5中开始支持：@Component、@Repository、@Service、@Controller等注解定义bean。@Component放在类名上面，然后通过@ComponentScan指定一个路径，Spring进行扫描带有@Componet注解的bean，然后加至容器中。</p><p><strong>注意，这种方式不单单指的是@Component注解，还包括@Controler、@Service、@Repository等派生的注解。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserHandler</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.wsh.injectbean.method_02"</span>)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第二种方式： 使用<span class="doctag">@Component</span>注解 + <span class="doctag">@ComponentScan</span>包扫描方式</span></span><br><span class="line"><span class="comment"> * 包括<span class="doctag">@Controler</span>、<span class="doctag">@Service</span>、<span class="doctag">@Repository</span>等派生的注解。</span></span><br><span class="line"><span class="comment"> * 为了解决bean太多时，xml文件过大，从而导致膨胀不好维护的问题。在spring2.5中开始支持：<span class="doctag">@Component</span>、<span class="doctag">@Repository</span>、<span class="doctag">@Service</span>、<span class="doctag">@Controller</span>等注解定义bean。</span></span><br><span class="line"><span class="comment"> * 其实本质上<span class="doctag">@Controler</span>、<span class="doctag">@Service</span>、<span class="doctag">@Repository</span>也是使用<span class="doctag">@Component</span>注解修饰的。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 通常情况下：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Controller</span>：一般用在控制层</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Service</span>：一般用在业务层</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Repository</span>：一般用在持久层</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Component</span>：一般用在公共组件上</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">System.out.println(applicationContext.getBean(<span class="string">"userDao"</span>));</span><br><span class="line">System.out.println(applicationContext.getBean(<span class="string">"userService"</span>));</span><br><span class="line">System.out.println(applicationContext.getBean(<span class="string">"userController"</span>));</span><br><span class="line">System.out.println(applicationContext.getBean(<span class="string">"userHandler"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、第三种方式：-Configuration-Bean方式"><a href="#四、第三种方式：-Configuration-Bean方式" class="headerlink" title="四、第三种方式：@Configuration + @Bean方式"></a>四、第三种方式：@Configuration + @Bean方式</h2><p>这种方式其实也是我们最常用的方式之一，@Configuration用来声明一个配置类，然后使用 @Bean 注解声明一个bean，将其加入到Spring容器中。</p><p><strong>通常情况下，如果项目中有使用到第三方类库中的工具类的话，我们都是采用这种方式注册Bean。</strong></p><p>具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Student <span class="title">student</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Student();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第三种方式：<span class="doctag">@Configuration</span> + <span class="doctag">@Bean</span>方式</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 通常情况下，如果项目中有使用到第三方类库中的工具类的话，我们都是采用这种方式注册Bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">System.out.println(applicationContext.getBean(<span class="string">"student"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、第四种方式：FactoryBean方式"><a href="#五、第四种方式：FactoryBean方式" class="headerlink" title="五、第四种方式：FactoryBean方式"></a>五、第四种方式：FactoryBean方式</h2><p>FactoryBean是一个Bean，它允许我们自定义Bean的创建，主要有三个方法：</p><ol><li>getObject()：自定义Bean如何创建；</li><li>getObjectType()：要注册的Bean的类型；</li><li>isSingleton()：是否单例；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line"><span class="keyword">return</span> User.class;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.wsh.injectbean.method_04"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第四种方式：使用FactoryBean</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * FactoryBean在一些框架整合上用的比较多，如Mybatis与Spring的整合中：MapperFactoryBean、SqlSessionFactoryBean等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">System.out.println(applicationContext.getBean(<span class="string">"userFactoryBean"</span>));</span><br><span class="line">System.out.println(applicationContext.getBean(<span class="string">"&amp;userFactoryBean"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、第五种方式：-Import方式"><a href="#六、第五种方式：-Import方式" class="headerlink" title="六、第五种方式：@Import方式"></a>六、第五种方式：@Import方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Import</span>(&#123;Student.class&#125;)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第五种方式：<span class="doctag">@Import</span>方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line"><span class="keyword">for</span> (String beanDefinitionName : applicationContext.getBeanDefinitionNames()) &#123;</span><br><span class="line">System.out.println(beanDefinitionName);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"================"</span>);</span><br><span class="line">System.out.println(applicationContext.getBean(<span class="string">"com.wsh.injectbean.method_05.Student"</span>));</span><br><span class="line">System.out.println(applicationContext.getBean(<span class="string">"student"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、第六种方式：-Import-ImportSelector方式"><a href="#七、第六种方式：-Import-ImportSelector方式" class="headerlink" title="七、第六种方式：@Import + ImportSelector方式"></a>七、第六种方式：@Import + ImportSelector方式</h2><p>首先介绍一下ImportSelector接口的好处，主要有以下两点：</p><ol><li><p>把某个功能的相关类放到一起，方面管理和维护。</p></li><li><p>重写selectImports方法时，能够根据条件判断某些类是否需要被实例化，或者某个条件实例化这些bean，其他的条件实例化那些bean等，我们能够非常灵活的定制化bean的实例化。</p></li></ol><p>这种方式我们需要实现ImportSelector接口，并重写selectImports()方法，然后将我们要导入的类的全限定名写在里面即可。</p><p><strong>指定需要定义bean的类名，注意要包含完整路径，而非相对路径。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImportSelector</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 指定需要定义bean的类名，注意要包含完整路径，而非相对路径</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">"com.wsh.injectbean.method_06.Product"</span>, <span class="string">"com.wsh.injectbean.method_06.User"</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Import</span>(&#123;MyImportSelector.class&#125;)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第六种方式：<span class="doctag">@Import</span> + ImportSelector方式</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * ImportSelector接口的好处主要有以下两点：</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 1.把某个功能的相关类放到一起，方面管理和维护。</span></span><br><span class="line"><span class="comment"> * 2.重写selectImports方法时，能够根据条件判断某些类是否需要被实例化，或者某个条件实例化这些bean，其他的条件实例化那些bean等,我们能够非常灵活的定制化bean的实例化。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line"><span class="keyword">for</span> (String beanDefinitionName : applicationContext.getBeanDefinitionNames()) &#123;</span><br><span class="line">System.out.println(beanDefinitionName);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"================"</span>);</span><br><span class="line">System.out.println(applicationContext.getBean(<span class="string">"com.wsh.injectbean.method_06.Product"</span>));</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(applicationContext.getBean(<span class="string">"product"</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"================"</span>);</span><br><span class="line">System.out.println(applicationContext.getBean(<span class="string">"com.wsh.injectbean.method_06.User"</span>));</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(applicationContext.getBean(<span class="string">"user"</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、第七种方式：-Import-ImportBeanDefinitionRegistrar方式"><a href="#八、第七种方式：-Import-ImportBeanDefinitionRegistrar方式" class="headerlink" title="八、第七种方式：@Import + ImportBeanDefinitionRegistrar方式?"></a>八、第七种方式：@Import + ImportBeanDefinitionRegistrar方式?</h2><p>这种方式我们需要实现ImportBeanDefinitionRegistrar接口，并重写registerBeanDefinitions()方法，然后定义我们需要注册的Bean的定义信息，然后registry.registerBeanDefinition()方法注册即可。<strong>这种方式比ImportSelector更加灵活，可以自定义bean的名称、作用域等很多参数。</strong> 像我们常见的Spring Cloud中的Feign，就使用了ImportBeanDefinitionRegistrar，具体可以参考FeignClientsRegistrar类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomImportBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 可以自定义bean的名称、作用域等很多参数</span></span><br><span class="line">registry.registerBeanDefinition(<span class="string">"user"</span>, <span class="keyword">new</span> RootBeanDefinition(User.class));</span><br><span class="line">RootBeanDefinition rootBeanDefinition = <span class="keyword">new</span> RootBeanDefinition(Product.class);</span><br><span class="line">rootBeanDefinition.setScope(BeanDefinition.SCOPE_SINGLETON);</span><br><span class="line">registry.registerBeanDefinition(<span class="string">"product"</span>, rootBeanDefinition);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Import</span>(&#123;CustomImportBeanDefinitionRegistrar.class&#125;)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第七种方式：<span class="doctag">@Import</span> + ImportBeanDefinitionRegistrar方式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 可以自定义bean的名称、作用域等很多参数, 像我们常见的Spring Cloud中的Feign，就使用了ImportBeanDefinitionRegistrar</span></span><br><span class="line"><span class="comment"> * class FeignClientsRegistrar implements ImportBeanDefinitionRegistrar, ResourceLoaderAware, EnvironmentAware &#123;</span></span><br><span class="line"><span class="comment"> * public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry) &#123;</span></span><br><span class="line"><span class="comment"> *         this.registerDefaultConfiguration(metadata, registry);</span></span><br><span class="line"><span class="comment"> *         this.registerFeignClients(metadata, registry);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">AnnotationConfigApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">System.out.println(applicationContext.getBean(<span class="string">"product"</span>));</span><br><span class="line">System.out.println(applicationContext.getBean(<span class="string">"user"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring依赖注入注解@Resource和@Autowired</title>
      <link href="/2022/12/18/Autowired&amp;Resource/"/>
      <url>/2022/12/18/Autowired&amp;Resource/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p><code>@Resource</code>和<code>@Autowired</code>注解都可以在<strong>Spring Framework</strong>应用中进行声明式的依赖注入。而且面试中经常涉及到这两个注解的知识点。今天我们来总结一下它们。</p><h2 id="2-Resource"><a href="#2-Resource" class="headerlink" title="2. @Resource"></a>2. @Resource</h2><p>全称<code>javax.annotation.Resource</code>,它属于<strong>JSR-250</strong>规范的一个注解，包含<strong>Jakarta EE</strong>（<strong>J2EE</strong>）中。<strong>Spring</strong>提供了对该注解的支持。我们来详细了解一下该注解的规则。</p><p><strong>该注解使用在成员属性和setter方法上。默认情况下<code>@Resource</code>按照名称注入，如果没有显式声明名称则按照变量名称或者方法中对应的参数名称进行注入。</strong></p><p><img src="https://i.328888.xyz/2022/12/18/4vdxb.png" alt="4vdxb.png"></p><p>@Resource注解也可以完成非简单类型注入。那它和@Autowired注解有什么区别？</p><ul><li>@Resource注解是JDK扩展包中的，也就是说属于JDK的一部分。所以该注解是标准注解，更加具有通用性。(JSR-250标准中制定的注解类型。JSR是Java规范提案。)</li><li>@Autowired注解是Spring框架自己的。</li><li><strong>@Resource注解默认根据名称装配byName，未指定name时，使用属性名作为name。通过name找不到的话会自动启动通过类型byType装配。</strong></li><li><strong>@Autowired注解默认根据类型装配byType，如果想根据名称装配，需要配合@Qualifier注解一起用。</strong></li><li>@Resource注解用在属性上、setter方法上。</li><li>@Autowired注解用在属性上、setter方法上、构造方法上、构造方法参数上。</li></ul><p>@Resource注解属于JDK扩展包，所以不在JDK当中，需要额外引入以下依赖：【<strong>如果是JDK8的话不需要额外引入依赖。高于JDK11或低于JDK8需要引入以下依赖。</strong>】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">如果你是Spring6+版本请使用这个依赖👇</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">如果你是spring5-版本请使用这个依赖👇</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-Autowired"><a href="#3-Autowired" class="headerlink" title="3. @Autowired"></a>3. @Autowired</h2><ul><li><p>第一点注意：该注解可以标注在哪里？</p></li><li><ul><li>构造方法上</li><li>方法上</li><li>形参上</li><li>属性上</li><li>注解上</li></ul></li><li><p>第二点注意：该注解有一个required属性，默认值是true，表示在注入的时候要求被注入的Bean必须是存在的，如果不存在则报错。如果required属性设置为false，表示注入的Bean存在或者不存在都没关系，存在的话就注入，不存在的话，也不报错。</p></li></ul><p><img src="https://i.328888.xyz/2022/12/18/4vGld.png" alt="4vGld.png"></p><ul><li>@Autowired注解可以出现在：属性上、构造方法上、构造方法的参数上、setter方法上。</li><li>当带参数的构造方法只有一个，@Autowired注解可以省略。</li><li>@Autowired注解默认根据类型注入。如果要根据名称注入的话，需要配合@Qualifier注解一起使用。</li></ul><h2 id="4-使用细节和其他注意事项"><a href="#4-使用细节和其他注意事项" class="headerlink" title="4. 使用细节和其他注意事项"></a>4. 使用细节和其他注意事项</h2><p>负责声明Bean的注解，常见的包括四个：</p><ul><li>@Component</li><li>@Controller</li><li>@Service</li><li>@Repository</li></ul><p>注意可以在声明Bean的注解中设置Bean的<strong>name</strong>，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"xxxBean"</span>)</span><br></pre></td></tr></table></figure><p><strong>问：如果把value属性彻底去掉，spring会被Bean自动取名吗？</strong></p><p><strong>答：会的。并且默认名字的规律是：<u>Bean类名首字母小写即可</u>。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux ssh</title>
      <link href="/2022/12/16/SSH%20related/"/>
      <url>/2022/12/16/SSH%20related/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="1-初见SSH"><a href="#1-初见SSH" class="headerlink" title="1. 初见SSH"></a>1. 初见SSH</h2><p>SSH是一种协议标准，其目的是实现安全远程登录以及其它安全网络服务。</p><ul><li>SSH仅仅是一协议标准，其具体的实现有很多，既有开源实现的OpenSSH，也有商业实现方案。使用范围最广泛的当然是开源实现OpenSSH。</li></ul><h2 id="2-SSH工作原理"><a href="#2-SSH工作原理" class="headerlink" title="2. SSH工作原理"></a>2. SSH工作原理</h2><p>在讨论SSH的原理和使用前，我们需要分析一个问题：为什么需要SSH？</p><p>从1.1节SSH的定义中可以看出，SSH和telnet、ftp等协议主要的区别在于安全性。这就引出下一个问题：如何实现数据的安全呢？首先想到的实现方案肯定是对数据进行加密。加密的方式主要有两种：</p><ul><li>对称加密（也称为秘钥加密）</li><li>非对称加密（也称公钥加密）</li></ul><p>所谓对称加密，指加密解密使用同一套秘钥。对称加密的加密强度高，很难破解。但是在实际应用过程中不得不面临一个棘手的问题：如何安全的保存密钥呢？尤其是考虑到数量庞大的Client端，很难保证密钥不被泄露。一旦一个Client端的密钥被窃据，那么整个系统的安全性也就不复存在。为了解决这个问题，非对称加密应运而生。</p><p>非对称加密有两个密钥：“公钥”和“私钥”。两个密钥的特性：公钥加密后的密文，只能通过对应的私钥进行解密。而通过公钥推理出私钥的可能性微乎其微。</p><p><img src="assets/1.png" alt></p><p><strong>这样就一定安全了吗？</strong><br>上述流程会有一个问题：Client端如何保证接受到的公钥就是目标Server端的？，如果一个攻击者中途拦截Client的登录请求，向其发送自己的公钥，Client端用攻击者的公钥进行数据加密。攻击者接收到加密信息后再用自己的私钥进行解密，不就窃取了Client的登录信息了吗？这就是所谓的中间人攻击</p><hr><p>在上面介绍的登录流程中可以发现，每次登录都需要输入密码，很麻烦。SSH提供了另外一种可以免去输入密码过程的登录方式：公钥登录。流程如下：<br><img src="assets/2.png" alt></p><ol><li>Client将自己的公钥存放在Server上，追加在文件authorized_keys中。</li><li>Server端接收到Client的连接请求后，会在authorized_keys中匹配到Client的公钥pubKey，并生成随机数R，用Client的公钥对该随机数进行加密得到pubKey(R)，然后将加密后信息发送给Client。</li><li>Client端通过私钥进行解密得到随机数R，然后对随机数R和本次会话的SessionKey利用MD5生成摘要Digest1，发送给Server端。</li><li>Server端会也会对R和SessionKey利用同样摘要算法生成Digest2。</li><li>Server端会最后比较Digest1和Digest2是否相同，完成认证过程。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java核心知识--多线程篇</title>
      <link href="/2022/12/14/day08-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E3%80%81volatile%E5%85%B3%E9%94%AE%E5%AD%97%E3%80%81%E5%8E%9F%E5%AD%90%E6%80%A7%E3%80%81%E5%B9%B6%E5%8F%91%E5%8C%85%E3%80%81%E6%AD%BB%E9%94%81%E3%80%81%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2022/12/14/day08-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E3%80%81volatile%E5%85%B3%E9%94%AE%E5%AD%97%E3%80%81%E5%8E%9F%E5%AD%90%E6%80%A7%E3%80%81%E5%B9%B6%E5%8F%91%E5%8C%85%E3%80%81%E6%AD%BB%E9%94%81%E3%80%81%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul><li>线程安全</li><li>volatile关键字</li><li>原子性</li><li>并发包</li><li>死锁</li><li>线程池</li></ul><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li><p>能够说出volatile关键字的作用</p><ul><li>实现成员变量多个线程修改后的可见性。</li></ul></li><li><p>能够说明volatile关键字和synchronized关键字的区别</p><ul><li>volatile修饰成员变量，实现变量的访问可见性，但是不能实现原子性。</li><li>synchronized可以修饰方法和代码块，加锁机制，可以实现线程安全。加锁以后变量自然可见。</li></ul></li><li><p>能够理解原子类的工作机制</p><ul><li>基于CAS乐观锁。保证了安全性。</li></ul></li><li><p>能够掌握原子类AtomicInteger的使用</p></li><li><p>能够描述ConcurrentHashMap类的作用</p><ul><li>安全性高，线程安全的，综合性能好。</li></ul></li><li><p>能够描述CountDownLatch类的作用</p></li><li><p>能够描述CyclicBarrier类的作用</p></li><li><p>能够表述Semaphore类的作用</p></li><li><p>能够描述Exchanger类的作用</p></li><li><p>能够描述Java中线程池运行原理</p></li><li><p>能够描述死锁产生的原因</p></li></ul><h1 id="第一章-线程状态"><a href="#第一章-线程状态" class="headerlink" title="第一章 线程状态"></a>第一章 线程状态</h1><h2 id="1-1-线程状态概述"><a href="#1-1-线程状态概述" class="headerlink" title="1.1 线程状态概述"></a>1.1 线程状态概述</h2><p><strong>线程由生到死的完整过程：</strong></p><p>当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。在线程的生命周期中，有几种状态呢？在API中<code>java.lang.Thread.State</code>这个枚举中给出了六种线程状态：</p><p>这里先列出各个线程状态发生的条件，下面将会对每种状态进行详细解析</p><table><thead><tr><th>线程状态</th><th>导致状态发生条件</th></tr></thead><tbody><tr><td>NEW(新建)</td><td>线程刚被创建，但是并未启动。还没调用start方法。MyThread t = new MyThread只有线程对象，没有线程特征。</td></tr><tr><td>Runnable(可运行)</td><td>线程可以在java虚拟机中运行的状态，可能正在运行自己代码，也可能没有，这取决于操作系统处理器。调用了t.start()方法   ：就绪（经典教法）</td></tr><tr><td>Blocked(锁阻塞)</td><td>当一个线程试图获取一个对象锁，而该对象锁被其他的线程持有，则该线程进入Blocked状态；当该线程持有锁时，该线程将变成Runnable状态。</td></tr><tr><td>Waiting(无限等待)</td><td>一个线程在等待另一个线程执行一个（唤醒）动作时，该线程进入Waiting状态。进入这个状态后是不能自动唤醒的，必须等待另一个线程调用notify或者notifyAll方法才能够唤醒。</td></tr><tr><td>Timed Waiting(计时等待)</td><td>同waiting状态，有几个方法有超时参数，调用他们将进入Timed Waiting状态。这一状态将一直保持到超时期满或者接收到唤醒通知。带有超时参数的常用方法有Thread.sleep 、Object.wait。</td></tr><tr><td>Teminated(被终止)</td><td>因为run方法正常退出而死亡，或者因为没有捕获的异常终止了run方法而死亡。</td></tr></tbody></table><p><img src="assets/1573352376549.png" alt="1573352376549"></p><p>​    我们不需要去研究这几种状态的实现原理，我们只需知道在做线程操作中存在这样的状态。那我们怎么去理解这几个状态呢，新建与被终止还是很容易理解的，我们就研究一下线程从Runnable（可运行）状态与非运行状态之间的转换问题。</p><h2 id="1-2-睡眠sleep方法"><a href="#1-2-睡眠sleep方法" class="headerlink" title="1.2 睡眠sleep方法"></a>1.2 睡眠sleep方法</h2><p>我们看到状态中有一个状态叫做计时等待，可以通过Thread类的方法来进行演示.</p><p><code>public static void  sleep(long time)</code>  让当前线程进入到睡眠状态，到毫秒后自动醒来继续执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)&#123;</span><br><span class="line">      Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        System.out.println(i)   </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时我们发现主线程执行到sleep方法会休眠1秒后再继续执行。</p><h2 id="1-3-等待和唤醒"><a href="#1-3-等待和唤醒" class="headerlink" title="1.3 等待和唤醒"></a>1.3 等待和唤醒</h2><p>Object类的方法</p><p><code>public void wait()</code> : 让当前线程进入到等待状态 此方法必须锁对象调用.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1_wait</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">   <span class="comment">// 步骤1 : 子线程开启,进入无限等待状态, 没有被唤醒,无法继续运行.</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"begin wait ...."</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="string">""</span>) &#123;</span><br><span class="line">                    <span class="string">""</span>.wait();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"over"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>public void notify()</code> : 唤醒当前锁对象上等待状态的线程  此方法必须锁对象调用.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2_notify</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">   <span class="comment">// 步骤1 : 子线程开启,进入无限等待状态, 没有被唤醒,无法继续运行.</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"begin wait ...."</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="string">""</span>) &#123;</span><br><span class="line">                    <span class="string">""</span>.wait();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"over"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//步骤2:  加入如下代码后, 3秒后,会执行notify方法, 唤醒wait中线程.</span></span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="string">""</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"唤醒"</span>);</span><br><span class="line">                    <span class="string">""</span>.notify();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-等待唤醒案例（包子铺卖包子）"><a href="#1-4-等待唤醒案例（包子铺卖包子）" class="headerlink" title="1.4 等待唤醒案例（包子铺卖包子）"></a>1.4 等待唤醒案例（包子铺卖包子）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">定义一个集合，包子铺线程完成生产包子，包子添加到集合中；吃货线程完成购买包子，包子从集合中移除。</span><br><span class="line"><span class="number">1</span>. 当包子没有时（包子状态为<span class="keyword">false</span>），吃货线程等待.</span><br><span class="line"><span class="number">2</span>. 包子铺线程生产包子（即包子状态为<span class="keyword">true</span>），并通知吃货线程（解除吃货的等待状态）</span><br></pre></td></tr></table></figure><p><strong>代码示例：</strong></p><p>生成包子类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaoZiPu</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaoZiPu</span><span class="params">(String name,ArrayList&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>; </span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="comment">//list作为锁对象</span></span><br><span class="line">                    <span class="keyword">synchronized</span> (list)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(list.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                            <span class="comment">//存元素的线程进入到等待状态</span></span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                list.wait();</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//如果线程没进入到等待状态 说明集合中没有元素</span></span><br><span class="line">                        <span class="comment">//向集合中添加元素</span></span><br><span class="line">                        list.add(<span class="string">"包子"</span>+i++);</span><br><span class="line">                        System.out.println(list);</span><br><span class="line">                        <span class="comment">//集合中已经有元素了 唤醒获取元素的线程</span></span><br><span class="line">                        list.notify();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费包子类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChiHuo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChiHuo</span><span class="params">(String name,ArrayList&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="comment">//为了能看到效果 写个死循环</span></span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="comment">//由于使用的同一个集合 list作为锁对象</span></span><br><span class="line">                    <span class="keyword">synchronized</span> (list)&#123;</span><br><span class="line">                        <span class="comment">//如果集合中没有元素 获取元素的线程进入到等待状态</span></span><br><span class="line">                        <span class="keyword">if</span>(list.size()==<span class="number">0</span>)&#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                list.wait();</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//如果集合中有元素 则获取元素的线程获取元素(删除)</span></span><br><span class="line">                        list.remove(<span class="number">0</span>);</span><br><span class="line">                        <span class="comment">//打印集合 集合中没有元素了</span></span><br><span class="line">                        System.out.println(list);</span><br><span class="line">                        <span class="comment">//集合中已经没有元素 则唤醒添加元素的线程 向集合中添加元素</span></span><br><span class="line">                        list.notify();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//等待唤醒案例</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 创建线程对象        </span></span><br><span class="line">         BaoZiPu bzp = <span class="keyword">new</span> BaoZiPu(<span class="string">"包子铺"</span>,list);</span><br><span class="line">        ChiHuo ch = <span class="keyword">new</span> ChiHuo(<span class="string">"吃货"</span>,list);</span><br><span class="line">        <span class="comment">// 开启线程</span></span><br><span class="line">        bzp.start();</span><br><span class="line">        ch.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第二章-volatile关键字"><a href="#第二章-volatile关键字" class="headerlink" title="第二章 volatile关键字"></a>第二章 volatile关键字</h1><h2 id="2-1-看程序说结果"><a href="#2-1-看程序说结果" class="headerlink" title="2.1. 看程序说结果"></a>2.1. 看程序说结果</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span> ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFlag</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> flag;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将flag的值更改为true</span></span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">true</span> ;</span><br><span class="line">        System.out.println(<span class="string">"flag="</span> + flag);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileThreadDemo</span> </span>&#123;<span class="comment">// 测试类</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建VolatileThread线程对象</span></span><br><span class="line">        VolatileThread volatileThread = <span class="keyword">new</span> VolatileThread() ;</span><br><span class="line">        volatileThread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// main方法</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(volatileThread.isFlag()) &#123;</span><br><span class="line">                System.out.println(<span class="string">"执行了======"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="assets/%E6%97%A0%E6%A0%87%E9%A2%98.jpg" alt></p><p>我们看到，VolatileThread线程中已经将flag设置为true，但main()方法中始终没有读到，从而没有打印。</p><h2 id="2-2-JMM"><a href="#2-2-JMM" class="headerlink" title="2.2. JMM"></a>2.2. JMM</h2><p>概述：JMM(Java Memory Model)Java内存模型,是java虚拟机规范中所定义的一种内存模型。</p><p>Java内存模型(Java Memory Model)描述了Java程序中各种变量(线程共享变量)的访问规则，以及在JVM中将变量存储到内存和从内存中读取变量这样的底层细节。</p><p>所有的共享变量都存储于主内存。这里所说的变量指的是实例变量和类变量。不包含局部变量，因为局部变量是线程私有的，因此不存在竞争问题。每一个线程还存在自己的工作内存，线程</p><p>的工作内存，保留了被线程使用的变量的工作副本。线程对变量的所有的操作(读，取)都必须在工作内存中完成，而不能直接读写主内存中的变量，不同线程之间也不能直接访问</p><p>对方工作内存中的变量，线程间变量的值的传递需要通过主内存完成。</p><p><img src="assets/1561516472597.png" alt></p><h2 id="2-3-问题分析"><a href="#2-3-问题分析" class="headerlink" title="2.3. 问题分析"></a>2.3. 问题分析</h2><p><img src="assets/1561303332516.png" alt></p><ol><li><p>VolatileThread线程从主内存读取到数据放入其对应的工作内存</p></li><li><p>将flag的值更改为true，但是这个时候flag的值还没有写会主内存</p></li><li><p>此时main方法读取到了flag的值为false</p></li><li><p>当VolatileThread线程将flag的值写回去后，但是main函数里面的while(true)调用的是系统比较底层的代码，速度快，快到没有时间再去读取主存中的值，</p><p>所以while(true)读取到的值一直是false。(如果有一个时刻main线程从主内存中读取到了主内存中flag的最新值，那么if语句就可以执行，main线程何时从主内存中读取最新的值，我们无法控制)</p></li></ol><h2 id="2-4-问题处理"><a href="#2-4-问题处理" class="headerlink" title="2.4. 问题处理"></a>2.4. 问题处理</h2><h3 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main方法</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (volatileThread) &#123;</span><br><span class="line">        <span class="keyword">if</span>(volatileThread.isFlag()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"执行了======"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   某一个线程进入synchronized代码块前后，执行过程入如下：</p><p>   a.线程获得锁</p><p>   b.清空工作内存</p><p>   c.从主内存拷贝共享变量最新的值到工作内存成为副本</p><p>   d.执行代码</p><p>   e.将修改后的副本的值刷新回主内存中</p><p>   f.线程释放锁</p><h3 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h3><p>   使用volatile关键字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag ;</span><br></pre></td></tr></table></figure><p>   工作原理：</p><p>  <img src="assets/1561517963033.png" alt></p><ol><li><p>VolatileThread线程从主内存读取到数据放入其对应的工作内存</p></li><li><p>将flag的值更改为true，但是这个时候flag的值还没有写会主内存</p></li><li><p>此时main方法main方法读取到了flag的值为false</p></li><li><p>当VolatileThread线程将flag的值写回去后，失效其他线程对此变量副本</p></li><li><p>再次对flag进行操作的时候线程会从主内存读取最新的值，放入到工作内存中</p><p>总结： volatile保证不同线程对共享变量操作的可见性，也就是说一个线程修改了volatile修饰的变量，当修改写回主内存时，另外一个线程立即看到最新的值。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">但是volatile不保证原子性。</span><br></pre></td></tr></table></figure><h3 id="volatile与synchronized"><a href="#volatile与synchronized" class="headerlink" title="volatile与synchronized"></a>volatile与synchronized</h3><ul><li><p>volatile只能修饰实例变量和类变量，而synchronized可以修饰方法，以及代码块。</p></li><li><p>volatile保证数据的可见性，但是不保证原子性(多线程进行写操作，不保证线程安全);而synchronized是一种排他（互斥）的机制，</p></li></ul><h1 id="第三章-原子性"><a href="#第三章-原子性" class="headerlink" title="第三章 原子性"></a>第三章 原子性</h1><p>概述：所谓的原子性是指在一次操作或者多次操作中，要么所有的操作全部都得到了执行并且不会受到任何因素的干扰而中断，要么所有的操作都不执行。 </p><h2 id="3-1-看程序说结果"><a href="#3-1-看程序说结果" class="headerlink" title="3.1. 看程序说结果"></a>3.1. 看程序说结果</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileAtomicThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个int类型的遍历</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对该变量进行++操作，100次</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span> ; x &lt; <span class="number">100</span> ; x++) &#123;</span><br><span class="line">            count++ ;</span><br><span class="line">            System.out.println(<span class="string">"count =========&gt;&gt;&gt;&gt; "</span> + count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileAtomicThreadDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建VolatileAtomicThread对象</span></span><br><span class="line">        VolatileAtomicThread volatileAtomicThread = <span class="keyword">new</span> VolatileAtomicThread() ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启100个线程对count进行++操作</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span> ; x &lt; <span class="number">100</span> ; x++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(volatileAtomicThread).start();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：不保证一定是10000</p><h2 id="3-2-问题原理说明"><a href="#3-2-问题原理说明" class="headerlink" title="3.2. 问题原理说明"></a>3.2. 问题原理说明</h2><p>以上问题主要是发生在count++操作上：</p><p>count++操作包含3个步骤：</p><ul><li>从主内存中读取数据到工作内存</li><li>对工作内存中的数据进行++操作</li><li>将工作内存中的数据写回到主内存</li></ul><p>count++操作不是一个原子性操作，也就是说在某一个时刻对某一个操作的执行，有可能被其他的线程打断。</p><p><img src="assets/1561524132215.png" alt></p><p>1）假设此时x的值是100，线程A需要对改变量进行自增1的操作，首先它需要从主内存中读取变量x的值。由于CPU的切换关系，此时CPU的执行权被切换到了</p><p>B线程。A线程就处于就绪状态，B线程处于运行状态</p><p>2）线程B也需要从主内存中读取x变量的值,由于线程A没有对x值做任何修改因此此时B读取到的数据还是100</p><p>3）线程B工作内存中x执行了+1操作，但是未刷新之主内存中</p><p>4）此时CPU的执行权切换到了A线程上，由于此时线程B没有将工作内存中的数据刷新到主内存，因此A线程工作内存中的变量值还是100，没有失效。</p><p>   A线程对工作内存中的数据进行了+1操作</p><p>5）线程B将101写入到主内存</p><p>6）线程A将101写入到主内存</p><p>虽然计算了2次，但是只对A进行了1次修改。</p><h2 id="3-3-volatile原子性测试"><a href="#3-3-volatile原子性测试" class="headerlink" title="3.3. volatile原子性测试"></a>3.3. volatile原子性测试</h2><h3 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个int类型的变量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">0</span> ;</span><br></pre></td></tr></table></figure><p>小结：在多线程环境下，volatile关键字可以保证共享数据的可见性，但是并不能保证对数据操作的原子性（在多线程环境下volatile修饰的变量也是线程不安全的）。</p><p>在多线程环境下，要保证数据的安全性，我们还需要使用锁机制。</p><h3 id="volatile的使用场景"><a href="#volatile的使用场景" class="headerlink" title="volatile的使用场景"></a>volatile的使用场景</h3><ul><li><p>开关控制</p><p>利用可见性特点，控制某一段代码执行或者关闭(比如今天课程的第一个案例)。</p></li><li><p>多个线程操作共享变量，但是是有一个线程对其进行写操作，其他的线程都是读</p></li></ul><h2 id="3-4-问题解决"><a href="#3-4-问题解决" class="headerlink" title="3.4. 问题解决"></a>3.4. 问题解决</h2><h3 id="使用锁机制"><a href="#使用锁机制" class="headerlink" title="使用锁机制"></a>使用锁机制</h3><p>我们可以给count++操作添加锁，那么count++操作就是临界区的代码，临界区只能有一个线程去执行，所以count++就变成了原子操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileAtomicThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个int类型的变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对该变量进行++操作，100次</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span> ; x &lt; <span class="number">100</span> ; x++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                count++ ;</span><br><span class="line">                System.out.println(<span class="string">"count =========&gt;&gt;&gt;&gt; "</span> + count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原子类"><a href="#原子类" class="headerlink" title="原子类"></a>原子类</h3><p>概述：java从JDK1.5开始提供了java.util.concurrent.atomic包(简称Atomic包)，这个包中的原子操作类提供了一种用法简单，性能高效，线程安全地更新一个变量的方式。</p><h4 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h4><p>原子型Integer，可以实现原子更新操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AtomicInteger</span><span class="params">()</span>：   初始化一个默认值为0的原子型Integer</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AtomicInteger</span><span class="params">(<span class="keyword">int</span> initialValue)</span>： 初始化一个指定值的原子型Integer</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span>:     获取值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span>:       以原子方式将当前值加1，注意，这里返回的是自增前的值。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">incrementAndGet</span><span class="params">()</span>:      以原子方式将当前值加1，注意，这里返回的是自增后的值。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addAndGet</span><span class="params">(<span class="keyword">int</span> data)</span>: 以原子方式将输入的数值与实例中的值（AtomicInteger里的value）相加，并返回结果。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAndSet</span><span class="params">(<span class="keyword">int</span> value)</span>:    以原子方式设置为newValue的值，并返回旧值。</span></span><br></pre></td></tr></table></figure><p>演示基本使用。</p><h4 id="案例改造"><a href="#案例改造" class="headerlink" title="案例改造"></a>案例改造</h4><p>使用AtomicInteger对案例进行改造.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileAtomicThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个int类型的变量</span></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger() ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对该变量进行++操作，100次</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span> ; x &lt; <span class="number">100</span> ; x++) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = atomicInteger.getAndIncrement();</span><br><span class="line">            System.out.println(<span class="string">"count =========&gt;&gt;&gt;&gt; "</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原子类CAS机制实现线程安全。"><a href="#原子类CAS机制实现线程安全。" class="headerlink" title="原子类CAS机制实现线程安全。"></a>原子类CAS机制实现线程安全。</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p><img src="assets/CAS.png" alt></p><p>CAS的全成是： Compare And Swap(比较再交换); 是现代CPU广泛支持的一种对内存中的共享数据进行操作的一种特殊指令。CAS可以将read-modify-check-write</p><p>转换为原子操作，这个原子操作直接由处理器保证。</p><p>CAS机制当中使用了3个基本操作数：内存地址V，旧的预期值A，要修改的新值B。</p><p>举例：</p><ol><li>在内存地址V当中，存储着值为10的变量。</li></ol><p><img src="assets/1561550710005.png" alt></p><ol start="2"><li>此时线程1想要把变量的值增加1。对线程1来说，旧的预期值A=10，要修改的新值B=11。</li></ol><p><img src="assets/1561550793084.png" alt></p><ol start="3"><li><p>在线程1要提交更新之前，另一个线程2抢先一步，把内存地址V中的变量值率先更新成了11。</p><p><img src="assets/1561550911597.png" alt></p></li><li><p>线程1开始提交更新，首先进行A和地址V的实际值比较（Compare），发现A不等于V的实际值，提交失败。</p></li></ol><p><img src="assets/1561551122602.png" alt></p><ol start="5"><li>线程1重新获取内存地址V的当前值，并重新计算想要修改的新值。此时对线程1来说，A=11，B=12。这个重新尝试的过程被称为自旋。</li></ol><p><img src="assets/1561551254968.png" alt></p><ol start="6"><li>这一次比较幸运，没有其他线程改变地址V的值。线程1进行Compare，发现A和地址V的实际值是相等的。</li></ol><p><img src="assets/1561551329313.png" alt></p><ol start="7"><li>线程1进行SWAP，把地址V的值替换为B，也就是12。</li></ol><p><img src="assets/1561551377905.png" alt></p><h4 id="CAS与Synchronized：乐观锁，悲观锁。"><a href="#CAS与Synchronized：乐观锁，悲观锁。" class="headerlink" title="CAS与Synchronized：乐观锁，悲观锁。"></a>CAS与Synchronized：乐观锁，悲观锁。</h4><p>CAS和Synchronized都可以保证多线程环境下共享数据的安全性。那么他们两者有什么区别？</p><p>Synchronized是从悲观的角度出发（悲观锁）</p><p>总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁</p><p>（<strong>共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程</strong>）。因此Synchronized我们也将其称之为<strong>悲观锁</strong>。jdk中的ReentrantLock也是一种悲观锁。性能较差！！</p><p>CAS是从乐观的角度出发:</p><p>总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据。</p><p>CAS这种机制我们也可以将其称之为乐观锁。综合性能较好！</p><h1 id="第四章-并发包"><a href="#第四章-并发包" class="headerlink" title="第四章 并发包"></a>第四章 并发包</h1><p>在JDK的并发包里提供了几个非常有用的并发容器和并发工具类。供我们在多线程开发中进行使用。</p><h2 id="4-1-ConcurrentHashMap"><a href="#4-1-ConcurrentHashMap" class="headerlink" title="4.1  ConcurrentHashMap"></a>4.1  ConcurrentHashMap</h2><p>为什么要使用ConcurrentHashMap：</p><ol><li>HashMap线程不安全，会导致数据错乱</li><li>使用线程安全的Hashtable效率低下</li></ol><p>基于以上两个原因，便有了ConcurrentHashMap的登场机会。</p><ul><li><strong>HashMap线程不安全演示。</strong></li></ul><p>公有、静态的集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Const</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程，向map中写入数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++) &#123;</span><br><span class="line">Const.map.put(<span class="keyword">this</span>.getName() + (i + <span class="number">1</span>), <span class="keyword">this</span>.getName() + i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">    System.out.println(<span class="keyword">this</span>.getName() + <span class="string">" 结束！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">Thread1A a1 = <span class="keyword">new</span> Thread1A();</span><br><span class="line">Thread1A a2 = <span class="keyword">new</span> Thread1A();</span><br><span class="line">a1.setName(<span class="string">"线程1-"</span>);</span><br><span class="line">a2.setName(<span class="string">"线程2-"</span>);</span><br><span class="line"></span><br><span class="line">a1.start();</span><br><span class="line">a2.start();</span><br><span class="line"><span class="comment">//休息10秒，确保两个线程执行完毕</span></span><br><span class="line">Thread.sleep(<span class="number">1000</span> * <span class="number">5</span>);</span><br><span class="line"><span class="comment">//打印集合大小</span></span><br><span class="line">System.out.println(<span class="string">"Map大小："</span> + Const.map.size());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：两个线程分别向同一个map中写入50000个键值对，最后map的size应为：100000，但多运行几次会发现有以下几种错误：</p><ol><li><p>假死：</p><p><img src="assets/aba6.png" alt></p></li><li><p>异常：</p><p><img src="assets/HashMap%E5%BC%82%E5%B8%B8.png" alt></p></li><li><p>错误结果：</p><p><img src="assets/HashMap%E9%94%99%E8%AF%AF%E7%BB%93%E6%9E%9C.png" alt></p></li></ol><ul><li><p><strong>为了保证线程安全，可以使用Hashtable。注意：线程中加入了计时</strong></p><p>公有、静态的集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Const</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Hashtable&lt;String,String&gt; map = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程，向map中写入数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++) &#123;</span><br><span class="line">Const.map.put(<span class="keyword">this</span>.getName() + (i + <span class="number">1</span>), <span class="keyword">this</span>.getName() + i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="keyword">this</span>.getName() + <span class="string">" 结束！用时："</span> + (end - start) + <span class="string">" 毫秒"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">Thread1A a1 = <span class="keyword">new</span> Thread1A();</span><br><span class="line">Thread1A a2 = <span class="keyword">new</span> Thread1A();</span><br><span class="line">a1.setName(<span class="string">"线程1-"</span>);</span><br><span class="line">a2.setName(<span class="string">"线程2-"</span>);</span><br><span class="line"></span><br><span class="line">a1.start();</span><br><span class="line">a2.start();</span><br><span class="line"><span class="comment">//休息10秒，确保两个线程执行完毕</span></span><br><span class="line">Thread.sleep(<span class="number">1000</span> * <span class="number">5</span>);</span><br><span class="line"><span class="comment">//打印集合大小</span></span><br><span class="line">System.out.println(<span class="string">"Map大小："</span> + Const.map.size());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="assets/Hashtable%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4.png" alt></p></li></ul><p>可以看到，Hashtable保证的线程安全，时间是2秒多。</p><ul><li><p><strong>再看ConcurrentHashMap</strong></p><p>公有、静态的集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Const</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ConcurrentHashMap&lt;String,String&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程，向map中写入数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++) &#123;</span><br><span class="line">Const.map.put(<span class="keyword">this</span>.getName() + (i + <span class="number">1</span>), <span class="keyword">this</span>.getName() + i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="keyword">this</span>.getName() + <span class="string">" 结束！用时："</span> + (end - start) + <span class="string">" 毫秒"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">Thread1A a1 = <span class="keyword">new</span> Thread1A();</span><br><span class="line">Thread1A a2 = <span class="keyword">new</span> Thread1A();</span><br><span class="line">a1.setName(<span class="string">"线程1-"</span>);</span><br><span class="line">a2.setName(<span class="string">"线程2-"</span>);</span><br><span class="line"></span><br><span class="line">a1.start();</span><br><span class="line">a2.start();</span><br><span class="line"><span class="comment">//休息10秒，确保两个线程执行完毕</span></span><br><span class="line">Thread.sleep(<span class="number">1000</span> * <span class="number">5</span>);</span><br><span class="line"><span class="comment">//打印集合大小</span></span><br><span class="line">System.out.println(<span class="string">"Map大小："</span> + Const.map.size());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="assets/ConcurrentHashMap%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4.png" alt></p><p>ConcurrentHashMap仍能保证结果正确，而且提高了效率。</p></li></ul><p>HashTable效率低下原因：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">get</span><span class="params">(Object key)</span></span></span><br></pre></td></tr></table></figure><p>HashTable容器使用synchronized来保证线程安全，但在线程竞争激烈的情况下HashTable的效率非常低下。因为当一个线程访问HashTable的同步方法，其他线程也访问HashTable的同步方法时，会进入阻塞状态。如线程1使用put进行元素添加，线程2不但不能使用put方法添加元素，也不能使用get方法来获取元素，所以竞争越激烈效率越低。</p><p><img src="assets/Hashtable%E9%94%81%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt></p><p><strong>ConcurrentHashMap高效的原因：CAS + 局部(synchronized)锁定</strong>分段式锁</p><p><img src="assets/ConcurrentHashMap%E9%94%81%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt></p><h2 id="4-2-CountDownLatch"><a href="#4-2-CountDownLatch" class="headerlink" title="4.2 CountDownLatch"></a>4.2 CountDownLatch</h2><p>CountDownLatch允许一个或多个线程等待其他线程完成操作，再执行自己。</p><p>例如：线程1要执行打印：A和C，线程2要执行打印：B，但线程1在打印A后，要线程2打印B之后才能打印C，所以：线程1在打印A后，必须等待线程2打印完B之后才能继续执行。</p><p>CountDownLatch构造方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CountDownLatch</span><span class="params">(<span class="keyword">int</span> count)</span><span class="comment">// 初始化一个指定计数器的CountDownLatch对象</span></span></span><br></pre></td></tr></table></figure><p>CountDownLatch重要方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException<span class="comment">// 让当前线程等待</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countDown</span><span class="params">()</span><span class="comment">// 计数器进行减1</span></span></span><br></pre></td></tr></table></figure><ul><li><strong>示例</strong><br>1). 制作线程1：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch down ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(CountDownLatch down)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.down = down;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            down.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"C"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>2). 制作线程2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch down ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadB</span><span class="params">(CountDownLatch down)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.down = down;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B"</span>);</span><br><span class="line">        down.countDown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3).制作测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CountDownLatch down = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);<span class="comment">//创建1个计数器</span></span><br><span class="line">        <span class="keyword">new</span> ThreadA(down).start();</span><br><span class="line">        <span class="keyword">new</span> ThreadB(down).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4). 执行结果：<br>会保证按：A B C的顺序打印。</p><p>说明：</p><p>CountDownLatch中count down是倒数的意思，latch则是门闩的含义。整体含义可以理解为倒数的门栓，似乎有一点“三二一，芝麻开门”的感觉。</p><p>CountDownLatch是通过一个计数器来实现的，每当一个线程完成了自己的任务后，可以调用countDown()方法让计数器-1，当计数器到达0时，调用CountDownLatch。</p><p>await()方法的线程阻塞状态解除，继续执行。</p><h2 id="4-3-CyclicBarrier"><a href="#4-3-CyclicBarrier" class="headerlink" title="4.3 CyclicBarrier"></a>4.3 CyclicBarrier</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>CyclicBarrier的字面意思是可循环使用（Cyclic）的屏障（Barrier）。它要做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续运行。</p><p>例如：公司召集5名员工开会，等5名员工都到了，会议开始。</p><p> 我们创建5个员工线程，1个开会线程，几乎同时启动，使用CyclicBarrier保证5名员工线程全部执行后，再执行开会线程。</p><p>CyclicBarrier构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CyclicBarrier</span><span class="params">(<span class="keyword">int</span> parties, Runnable barrierAction)</span><span class="comment">// 用于在线程到达屏障时，优先执行barrierAction，方便处理更复杂的业务场景</span></span></span><br></pre></td></tr></table></figure><p>CyclicBarrier重要方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">await</span><span class="params">()</span><span class="comment">// 每个线程调用await方法告诉CyclicBarrier我已经到达了屏障，然后当前线程被阻塞</span></span></span><br></pre></td></tr></table></figure><ul><li><strong>示例代码：</strong><br>1). 制作员工线程：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> CyclicBarrier cbRef;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PersonThread</span><span class="params">(CyclicBarrier cbRef)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.cbRef = cbRef;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep((<span class="keyword">int</span>) (Math.random() * <span class="number">1000</span>));</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">" 到了! "</span>);</span><br><span class="line">cbRef.await();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>2). 制作开会线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MeetingThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"好了，人都到了，开始开会......"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3). 制作测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">CyclicBarrier cbRef = <span class="keyword">new</span> CyclicBarrier(<span class="number">5</span>, <span class="keyword">new</span> MeetingThread());<span class="comment">//等待5个线程执行完毕，再执行MeetingThread</span></span><br><span class="line">PersonThread p1 = <span class="keyword">new</span> PersonThread(cbRef);</span><br><span class="line">PersonThread p2 = <span class="keyword">new</span> PersonThread(cbRef);</span><br><span class="line">PersonThread p3 = <span class="keyword">new</span> PersonThread(cbRef);</span><br><span class="line">PersonThread p4 = <span class="keyword">new</span> PersonThread(cbRef);</span><br><span class="line">PersonThread p5 = <span class="keyword">new</span> PersonThread(cbRef);</span><br><span class="line">p1.start();</span><br><span class="line">p2.start();</span><br><span class="line">p3.start();</span><br><span class="line">p4.start();</span><br><span class="line">p5.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4). 执行结果：</p><p><img src="imgs/CyclicBarrier_1.png" alt></p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>使用场景：CyclicBarrier可以用于多线程计算数据，最后合并计算结果的场景。</p><p>需求：使用两个线程读取2个文件中的数据，当两个文件中的数据都读取完毕以后，进行数据的汇总操作。</p><h2 id="4-4-Semaphore"><a href="#4-4-Semaphore" class="headerlink" title="4.4 Semaphore"></a>4.4 Semaphore</h2><p>Semaphore（发信号）的主要作用是控制线程的并发数量。</p><p>synchronized可以起到”锁”的作用，但某个时间段内，只能有一个线程允许执行。</p><p>Semaphore可以设置同时允许几个线程执行。</p><p>Semaphore字面意思是信号量的意思，它的作用是控制访问特定资源的线程数目。</p><p>Semaphore构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Semaphore</span><span class="params">(<span class="keyword">int</span> permits)</span>permits 表示许可线程的数量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Semaphore</span><span class="params">(<span class="keyword">int</span> permits, <span class="keyword">boolean</span> fair)</span>fair 表示公平性，如果这个设为 <span class="keyword">true</span> 的话，下次执行的线程会是等待最久的线程</span></span><br></pre></td></tr></table></figure><p>Semaphore重要方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException表示获取许可</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span><span class="title">release</span><span class="params">()</span> 表示释放许可</span></span><br></pre></td></tr></table></figure><ul><li><strong>示例一：同时允许1个线程执行</strong></li></ul><p>1). 制作一个Service类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);<span class="comment">//1表示许可的意思，表示最多允许1个线程执行acquire()和release()之间的内容</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            semaphore.acquire();</span><br><span class="line">            System.out.println(Thread.currentThread().getName()</span><br><span class="line">                    + <span class="string">" 进入 时间="</span> + System.currentTimeMillis());</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()</span><br><span class="line">                    + <span class="string">"   结束 时间="</span> + System.currentTimeMillis());</span><br><span class="line">            semaphore.release();</span><br><span class="line"><span class="comment">//acquire()和release()方法之间的代码为"同步代码"</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2). 制作线程类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Service service;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(Service service)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.service = service;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">service.testMethod();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3). 测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Service service = <span class="keyword">new</span> Service();</span><br><span class="line">        <span class="comment">//启动5个线程</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">ThreadA a = <span class="keyword">new</span> ThreadA(service);</span><br><span class="line">a.setName(<span class="string">"线程 "</span> + i);</span><br><span class="line">a.start();<span class="comment">//5个线程会同时执行Service的testMethod方法，而某个时间段只能有1个线程执行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4). 结果：</p><p><img src="assets/Semaphore1%E4%B8%AA%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C.png" alt></p><ul><li><strong>示例二：同时允许2个线程同时执行</strong><br>1). 修改Service类，将new Semaphore(1)改为2即可：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">2</span>);<span class="comment">//2表示许可的意思，表示最多允许2个线程执行acquire()和release()之间的内容</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            semaphore.acquire();</span><br><span class="line">            System.out.println(Thread.currentThread().getName()</span><br><span class="line">                    + <span class="string">" 进入 时间="</span> + System.currentTimeMillis());</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()</span><br><span class="line">                    + <span class="string">"   结束 时间="</span> + System.currentTimeMillis());</span><br><span class="line">            semaphore.release();</span><br><span class="line"><span class="comment">//acquire()和release()方法之间的代码为"同步代码"</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>2). 再次执行结果：</p><p><img src="assets/Semaphore2%E4%B8%AA%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C.png" alt></p><h2 id="4-5-Exchanger"><a href="#4-5-Exchanger" class="headerlink" title="4.5 Exchanger"></a>4.5 Exchanger</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>Exchanger（交换者）是一个用于线程间协作的工具类。Exchanger用于进行线程间的数据交换。</p><p>这两个线程通过exchange方法交换数据，如果第一个线程先执行exchange()方法，它会一直等待第二个线程也执行exchange方法，当两个线程都到达同步点时，这两个线程就可以交换数据，将本线程生产出来的数据传递给对方。</p><p>Exchanger构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Exchanger</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>Exchanger重要方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">exchange</span><span class="params">(V x)</span></span></span><br></pre></td></tr></table></figure><ul><li><strong>示例一：exchange方法的阻塞特性</strong></li></ul><p>1).制作线程A，并能够接收一个Exchanger对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Exchanger&lt;String&gt; exchanger;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(Exchanger&lt;String&gt; exchanger)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.exchanger = exchanger;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"线程A欲传递值'礼物A'给线程B，并等待线程B的值..."</span>);</span><br><span class="line">System.out.println(<span class="string">"在线程A中得到线程B的值="</span> + exchanger.exchange(<span class="string">"礼物A"</span>));</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2). 制作main()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Exchanger&lt;String&gt; exchanger = <span class="keyword">new</span> Exchanger&lt;String&gt;();</span><br><span class="line">ThreadA a = <span class="keyword">new</span> ThreadA(exchanger);</span><br><span class="line">a.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3).执行结果：</p><p><img src="assets/Exchange%E9%98%BB%E5%A1%9E.png" alt></p><ul><li><strong>示例二：exchange方法执行交换</strong></li></ul><p>1).制作线程A：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Exchanger&lt;String&gt; exchanger;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(Exchanger&lt;String&gt; exchanger)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.exchanger = exchanger;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"线程A欲传递值'礼物A'给线程B，并等待线程B的值..."</span>);</span><br><span class="line">System.out.println(<span class="string">"在线程A中得到线程B的值="</span> + exchanger.exchange(<span class="string">"礼物A"</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2).制作线程B：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Exchanger&lt;String&gt; exchanger;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadB</span><span class="params">(Exchanger&lt;String&gt; exchanger)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.exchanger = exchanger;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"线程B欲传递值'礼物B'给线程A，并等待线程A的值..."</span>);</span><br><span class="line">System.out.println(<span class="string">"在线程B中得到线程A的值="</span> + exchanger.exchange(<span class="string">"礼物B"</span>));</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3).制作测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">Exchanger&lt;String&gt; exchanger = <span class="keyword">new</span> Exchanger&lt;String&gt;();</span><br><span class="line">ThreadA a = <span class="keyword">new</span> ThreadA(exchanger);</span><br><span class="line">ThreadB b = <span class="keyword">new</span> ThreadB(exchanger);</span><br><span class="line">a.start();</span><br><span class="line">b.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4).执行结果：</p><p><img src="assets/Exchange%E4%BA%A4%E6%8D%A2.png" alt></p><ul><li><strong>示例三：exchange方法的超时</strong></li></ul><p>1).制作线程A：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Exchanger&lt;String&gt; exchanger;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(Exchanger&lt;String&gt; exchanger)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.exchanger = exchanger;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"线程A欲传递值'礼物A'给线程B，并等待线程B的值，只等5秒..."</span>);</span><br><span class="line">System.out.println(<span class="string">"在线程A中得到线程B的值 ="</span> + exchanger.exchange(<span class="string">"礼物A"</span>,<span class="number">5</span>, TimeUnit.SECONDS));</span><br><span class="line">System.out.println(<span class="string">"线程A结束！"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">System.out.println(<span class="string">"5秒钟没等到线程B的值，线程A结束！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2).制作测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Run</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Exchanger&lt;String&gt; exchanger = <span class="keyword">new</span> Exchanger&lt;String&gt;();</span><br><span class="line">ThreadA a = <span class="keyword">new</span> ThreadA(exchanger);</span><br><span class="line">a.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3).测试结果：</p><p><img src="assets/Exchange%E8%B6%85%E6%97%B6.png" alt></p><h3 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h3><p>使用场景：可以做数据校对工作</p><p>需求：比如我们需要将纸制银行流水通过人工的方式录入成电子银行流水。为了避免错误，采用AB岗两人进行录入，录入到两个文件中，系统需要加载这两个文件，</p><p>并对两个文件数据进行校对，看看是否录入一致，</p><h1 id="第五章-线程池方式"><a href="#第五章-线程池方式" class="headerlink" title="第五章 线程池方式"></a>第五章 线程池方式</h1><h2 id="5-1-线程池的思想"><a href="#5-1-线程池的思想" class="headerlink" title="5.1 线程池的思想"></a>5.1 线程池的思想</h2><p><img src="assets/%E6%B8%B8%E6%B3%B3%E6%B1%A0.jpg" alt></p><p>我们使用线程的时候就去创建一个线程，这样实现起来非常简便，但是就会有一个问题：</p><p>如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间，线程也属于宝贵的系统资源。</p><p>那么有没有一种办法使得线程可以复用，就是执行完一个任务，并不被销毁，而是可以继续执行其他的任务？</p><p>在Java中可以通过线程池来达到这样的效果。今天我们就来详细讲解一下Java的线程池。</p><h2 id="5-2-07线程池概念"><a href="#5-2-07线程池概念" class="headerlink" title="5.2 07线程池概念"></a>5.2 07线程池概念</h2><ul><li><strong>线程池：</strong>其实就是一个容纳多个线程的容器，其中的线程可以反复使用，省去了频繁创建线程对象的操作，无需反复创建线程而消耗过多资源。</li></ul><p>由于线程池中有很多操作都是与优化资源相关的，我们在这里就不多赘述。我们通过一张图来了解线程池的工作原理：</p><p><img src="assets/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8E%9F%E7%90%86.bmp" alt></p><p>合理利用线程池能够带来三个好处：</p><ol><li>降低资源消耗。减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。</li><li>提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</li><li>提高线程的可管理性。可以根据系统的承受能力，调整线程池中工作线线程的数目，防止因为消耗过多的内存，而把服务器累趴下(每个线程需要大约1MB内存，线程开的越多，消耗的内存也就越大，最后死机)。</li></ol><h2 id="5-3-线程池的使用"><a href="#5-3-线程池的使用" class="headerlink" title="5.3 线程池的使用"></a>5.3 线程池的使用</h2><p>Java里面线程池的顶级接口是<code>java.util.concurrent.Executor</code>，但是严格意义上讲<code>Executor</code>并不是一个线程池，而只是一个执行线程的工具。真正的线程池接口是<code>java.util.concurrent.ExecutorService</code>。</p><p>要配置一个线程池是比较复杂的，尤其是对于线程池的原理不是很清楚的情况下，很有可能配置的线程池不是较优的，因此在<code>java.util.concurrent.Executors</code>线程工厂类里面提供了一些静态工厂，生成一些常用的线程池。官方建议使用Executors工程类来创建线程池对象。</p><p>Executors类中有个创建线程池的方法如下：</p><ul><li><code>public static ExecutorService newFixedThreadPool(int nThreads)</code>：返回线程池对象。(创建的是有界线程池,也就是池中的线程个数可以指定最大数量)</li></ul><p>获取到了一个线程池ExecutorService 对象，那么怎么使用呢，在这里定义了一个使用线程池对象的方法如下：</p><ul><li><p><code>public Future&lt;?&gt; submit(Runnable task)</code>:获取线程池中的某一个线程对象，并执行</p><blockquote><p>Future接口：用来记录线程任务执行完毕后产生的结果。</p></blockquote></li></ul><p>使用线程池中线程对象的步骤：</p><ol><li>创建线程池对象。</li><li>创建Runnable接口子类对象。(task)</li><li>提交Runnable接口子类对象。(take task)</li><li>关闭线程池(一般不做)。</li></ol><p><strong>Runnable实现类代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我要一个教练"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"教练来了： "</span> + Thread.currentThread().getName());</span><br><span class="line">        System.out.println(<span class="string">"教我游泳,交完后，教练回到了游泳池"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程池测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建线程池对象</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">2</span>);<span class="comment">//包含2个线程对象</span></span><br><span class="line">        <span class="comment">// 创建Runnable实例对象</span></span><br><span class="line">        MyRunnable r = <span class="keyword">new</span> MyRunnable();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自己创建线程对象的方式</span></span><br><span class="line">        <span class="comment">// Thread t = new Thread(r);</span></span><br><span class="line">        <span class="comment">// t.start(); ---&gt; 调用MyRunnable中的run()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从线程池中获取线程对象,然后调用MyRunnable中的run()</span></span><br><span class="line">        service.submit(r);</span><br><span class="line">        <span class="comment">// 再获取个线程对象，调用MyRunnable中的run()</span></span><br><span class="line">        service.submit(r);</span><br><span class="line">        service.submit(r);</span><br><span class="line">        <span class="comment">// 注意：submit方法调用结束后，程序并不终止，是因为线程池控制了线程的关闭。</span></span><br><span class="line">        <span class="comment">// 将使用完的线程又归还到了线程池中</span></span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        <span class="comment">//service.shutdown();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Callable测试代码:</strong></p><ul><li><p><code>&lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task)</code> : 获取线程池中的某一个线程对象，并执行.</p><p>Future : 表示计算的结果.</p></li><li><p><code>V get()</code> : 获取计算完成的结果。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 创建线程池对象</span></span><br><span class="line">      ExecutorService service = Executors.newFixedThreadPool(<span class="number">2</span>);<span class="comment">//包含2个线程对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Runnable实例对象</span></span><br><span class="line">        Callable&lt;Double&gt; c = <span class="keyword">new</span> Callable&lt;Double&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Double <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Math.random();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从线程池中获取线程对象,然后调用Callable中的call()</span></span><br><span class="line">        Future&lt;Double&gt; f1 = service.submit(c);</span><br><span class="line">        <span class="comment">// Futur 调用get() 获取运算结果</span></span><br><span class="line">        System.out.println(f1.get());</span><br><span class="line"></span><br><span class="line">        Future&lt;Double&gt; f2 = service.submit(c);</span><br><span class="line">        System.out.println(f2.get());</span><br><span class="line"></span><br><span class="line">        Future&lt;Double&gt; f3 = service.submit(c);</span><br><span class="line">        System.out.println(f3.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-4-线程池的练习"><a href="#5-4-线程池的练习" class="headerlink" title="5.4 线程池的练习"></a>5.4 线程池的练习</h2><p><strong>需求:</strong> 使用线程池方式执行任务,返回1-n的和</p><p><strong>分析:</strong> 因为需要返回求和结果,所以使用Callable方式的任务</p><p><strong>代码:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        ExecutorService pool = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        SumCallable sc = <span class="keyword">new</span> SumCallable(<span class="number">100</span>);</span><br><span class="line">        Future&lt;Integer&gt; fu = pool.submit(sc);</span><br><span class="line">        Integer integer = fu.get();</span><br><span class="line">        System.out.println(<span class="string">"结果: "</span> + integer);</span><br><span class="line">        </span><br><span class="line">        SumCallable sc2 = <span class="keyword">new</span> SumCallable(<span class="number">200</span>);</span><br><span class="line">        Future&lt;Integer&gt; fu2 = pool.submit(sc2);</span><br><span class="line">        Integer integer2 = fu2.get();</span><br><span class="line">        System.out.println(<span class="string">"结果: "</span> + integer2);</span><br><span class="line"></span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SumCallable.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SumCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SumCallable</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 求1-n的和?</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第六章-死锁"><a href="#第六章-死锁" class="headerlink" title="第六章 死锁"></a>第六章 死锁</h1><h2 id="6-1-什么是死锁"><a href="#6-1-什么是死锁" class="headerlink" title="6.1 什么是死锁"></a>6.1 什么是死锁</h2><p>在多线程程序中,使用了多把锁,造成线程之间相互等待.程序不往下走了。</p><h2 id="6-2-产生死锁的条件"><a href="#6-2-产生死锁的条件" class="headerlink" title="6.2 产生死锁的条件"></a>6.2 产生死锁的条件</h2><p>1.有多把锁<br>2.有多个线程<br>3.有同步代码块嵌套</p><h2 id="6-3-死锁代码"><a href="#6-3-死锁代码" class="headerlink" title="6.3 死锁代码"></a>6.3 死锁代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyRunnable mr = <span class="keyword">new</span> MyRunnable();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(mr).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(mr).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    Object objA = <span class="keyword">new</span> Object();</span><br><span class="line">    Object objB = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    嵌套1 objA</span></span><br><span class="line"><span class="comment">    嵌套1 objB</span></span><br><span class="line"><span class="comment">    嵌套2 objB</span></span><br><span class="line"><span class="comment">    嵌套1 objA</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (objA) &#123;</span><br><span class="line">            System.out.println(<span class="string">"嵌套1 objA"</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (objB) &#123;<span class="comment">// t2, objA, 拿不到B锁,等待</span></span><br><span class="line">                System.out.println(<span class="string">"嵌套1 objB"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (objB) &#123;</span><br><span class="line">            System.out.println(<span class="string">"嵌套2 objB"</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (objA) &#123;<span class="comment">// t1 , objB, 拿不到A锁,等待</span></span><br><span class="line">                System.out.println(<span class="string">"嵌套2 objA"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:<strong>我们应该尽量避免死锁</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--内部类相关</title>
      <link href="/2022/11/18/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(44)/"/>
      <url>/2022/11/18/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(44)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="静态内部类："><a href="#静态内部类：" class="headerlink" title="静态内部类："></a><strong>静态内部类：</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    目标：静态内部类的研究（了解语法即可）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    什么是静态内部类？</span></span><br><span class="line"><span class="comment">        有static修饰，属于外部类本身，会加载一次。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    静态内部类中的成分研究：</span></span><br><span class="line"><span class="comment">        类有的成分它都有，静态内部类属于外部类本身，只会加载一次</span></span><br><span class="line"><span class="comment">        所以它的特点与外部类是完全一样的，只是位置在别人里面而已。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        外部类=宿主</span></span><br><span class="line"><span class="comment">        内部类=寄生</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    静态内部类的访问格式：</span></span><br><span class="line"><span class="comment">        外部类名称.内部类名称</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    静态内部类创建对象的格式：</span></span><br><span class="line"><span class="comment">        外部类名称.内部类名称 对象名称 = new 外部类名称.内部类构造器;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    静态内部类的访问拓展：</span></span><br><span class="line"><span class="comment">        静态内部类中是否可以直接访问外部类的静态成员?可以的，外部类的静态成员只有一份，可以被共享！</span></span><br><span class="line"><span class="comment">        静态内部类中是否可以直接访问外部类的实例成员?不可以的,外部类的是成员必须用外部类对象访问！！</span></span><br><span class="line"><span class="comment">    小结：</span></span><br><span class="line"><span class="comment">         静态内部类属于外部类本身，只会加载一次</span></span><br><span class="line"><span class="comment">         所以它的特点与外部类是完全一样的，只是位置在别人里面而已。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 外部类名称.内部类名称 对象名称 = new 外部类名称.内部类构造器</span></span><br><span class="line">        Outter.Inner in = <span class="keyword">new</span> Outter.Inner();</span><br><span class="line">        in.setName(<span class="string">"张三"</span>);</span><br><span class="line">        in.setAge(<span class="number">12</span>);</span><br><span class="line">        System.out.println(in.getName());</span><br><span class="line">        System.out.println(in.getAge());</span><br><span class="line">        in.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outter</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> age1 = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态内部类：有static修饰，属于外部类本身，只会加载一次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String schoolName = <span class="string">"黑马"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(name+<span class="string">"--&gt;"</span>+age+<span class="string">"岁~"</span>);</span><br><span class="line">            System.out.println(age1);</span><br><span class="line">            <span class="comment">//System.out.println(salary);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Inner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Inner</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="一般内部类："><a href="#一般内部类：" class="headerlink" title="一般内部类："></a><strong>一般内部类：</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    目标：内部类_实例内部类（成员内部类）(了解语法为主)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    什么是实例内部类：</span></span><br><span class="line"><span class="comment">        无static修饰的内部类，属于外部类的每个对象的，跟着对象一起加载的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    实例内部类的成分特点：</span></span><br><span class="line"><span class="comment">        实例内部类中不能定义静态成员，其他都可以定义。</span></span><br><span class="line"><span class="comment">        可以定义常量。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    实例内部类的访问格式：</span></span><br><span class="line"><span class="comment">        外部类名称.内部类名称。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    创建对象的格式：</span></span><br><span class="line"><span class="comment">        外部类名称.内部类名称 对象名称 = new 外部类构造器.new 内部构造器;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    拓展：</span></span><br><span class="line"><span class="comment">        实例内部类中是否可以直接访问外部类的静态成员？可以的，外部类的静态成员可以被共享访问！</span></span><br><span class="line"><span class="comment">        实例内部类中是否可以访问外部类的实例成员？可以的，实例内部类属于外部类对象，可以直接访问当前外部类对象的实例成员！</span></span><br><span class="line"><span class="comment">    小结：</span></span><br><span class="line"><span class="comment">        实例内部类属于外部类对象，需要用外部类对象一起加载，</span></span><br><span class="line"><span class="comment">        实例内部类可以访问外部类的全部成员！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实例内部类属于外部类对象。实例内部类的宿主是外部类对象！！</span></span><br><span class="line">        Outter.Inner in = <span class="keyword">new</span> Outter().new Inner();</span><br><span class="line">        in.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 外部类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outter</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> age = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例内部类：无static修饰，属于外部类的对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String schoolName = <span class="string">"黑马"</span>;</span><br><span class="line">        <span class="comment">// 不能在实例内部类中定义静态成员！！！</span></span><br><span class="line"><span class="comment">//      public static String schoolName = "黑马";</span></span><br><span class="line"><span class="comment">//      public static void test()&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(name+<span class="string">"名称！"</span>);</span><br><span class="line">            System.out.println(age);</span><br><span class="line">            System.out.println(salary);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="匿名内部类："><a href="#匿名内部类：" class="headerlink" title="匿名内部类："></a><strong>匿名内部类：</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    目标：匿名内部类的概述、</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    什么是匿名内部类？</span></span><br><span class="line"><span class="comment">        就是一个没有名字的局部内部类。</span></span><br><span class="line"><span class="comment">        匿名内部类目的是为了：简化代码，也是开发中常用的形式。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    匿名内部类的格式：</span></span><br><span class="line"><span class="comment">        new 类名|抽象类|接口(形参)&#123;</span></span><br><span class="line"><span class="comment">            方法重写。</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">     匿名内部类的特点：</span></span><br><span class="line"><span class="comment">         1.匿名内部类是一个没有名字的内部类。</span></span><br><span class="line"><span class="comment">         2.匿名内部类一旦写出来，就会立即创建一个匿名内部类的对象返回。</span></span><br><span class="line"><span class="comment">         3.匿名内部类的对象的类型相当于是当前new的那个的类型的子类类型。</span></span><br><span class="line"><span class="comment">    小结：</span></span><br><span class="line"><span class="comment">         1.匿名内部类是一个没有名字的内部类。</span></span><br><span class="line"><span class="comment">         2.匿名内部类一旦写出来，就会立即创建一个匿名内部类的对象返回。</span></span><br><span class="line"><span class="comment">         3.匿名内部类的对象的类型相当于是当前new的那个的类型的子类类型。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Anonymity</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal a = <span class="keyword">new</span> Animal()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"猫跑的贼溜~~"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        a.run();</span><br><span class="line">        a.go();</span><br><span class="line"></span><br><span class="line">        Animal a1 = <span class="keyword">new</span> Animal() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"狗跑的贼快~~~"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        a1.run();</span><br><span class="line">        a1.go();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始go~~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outter</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> y = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> z = <span class="number">5</span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">2</span>;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> z = <span class="number">6</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            System.out.println(x);</span><br><span class="line">            System.out.println(Outter.x);</span><br><span class="line">            System.out.println(func());</span><br><span class="line">            System.out.println(Outter.func());</span><br><span class="line">            System.out.println(<span class="keyword">new</span> Inner().z);</span><br><span class="line">            System.out.println(<span class="keyword">new</span> Outter().z);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出结果：</span></span><br><span class="line"><span class="comment"> * 2</span></span><br><span class="line"><span class="comment"> * 1</span></span><br><span class="line"><span class="comment"> * 5</span></span><br><span class="line"><span class="comment"> * 4</span></span><br><span class="line"><span class="comment"> * 6</span></span><br><span class="line"><span class="comment"> * 5</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>说明：</strong> </p><ul><li>在静态内部类中,和外部类同名的变量和方法会覆盖外部的同名的静态变量和方法。</li><li>若要访问外部类的静态方法或者变量则需要通过外部类名来调用,或者创建外部类对象来调用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outter</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">2</span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(x);</span><br><span class="line">            System.out.println(<span class="keyword">this</span>);</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.x);</span><br><span class="line">            System.out.println(Outter.x);</span><br><span class="line">            System.out.println(Outter.<span class="keyword">this</span>);</span><br><span class="line">            System.out.println(Outter.<span class="keyword">this</span>.x);</span><br><span class="line">            System.out.println(<span class="keyword">new</span> Outter().x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outter.Inner inner = <span class="keyword">new</span> Outter().new Inner();</span><br><span class="line">        inner.function();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出结果：</span></span><br><span class="line"><span class="comment"> * 2</span></span><br><span class="line"><span class="comment"> * com.itheima._15单例模式.Outter$Inner@15db9742</span></span><br><span class="line"><span class="comment"> * 2</span></span><br><span class="line"><span class="comment"> * 1</span></span><br><span class="line"><span class="comment"> * com.itheima._15单例模式.Outter@6d06d69c</span></span><br><span class="line"><span class="comment"> * 1</span></span><br><span class="line"><span class="comment"> * 1</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>说明：</strong> </p><ul><li>在实例内部类中,和外部类同名的变量和方法会覆盖外部的同名的变量和方法。</li><li>若要访问外部类的方法或者变量则需要通过外部类名来调用,或者创建外部类对象来调用,或者通过外部类名+this关键字来调用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx Lua扩展模块</title>
      <link href="/2022/11/16/Nginx_Lua_Expansion_module/"/>
      <url>/2022/11/16/Nginx_Lua_Expansion_module/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="Nginx-Lua扩展模块"><a href="#Nginx-Lua扩展模块" class="headerlink" title="Nginx Lua扩展模块"></a>Nginx Lua扩展模块</h1><h2 id="ngx-lua模块概念"><a href="#ngx-lua模块概念" class="headerlink" title="ngx_lua模块概念"></a>ngx_lua模块概念</h2><p><a href="https://github.com/openresty/lua-nginx-module#readme">ngx_lua 官方文档</a></p><p><a href="https://www.kancloud.cn/qq13867685/openresty-api-cn/159175" target="_blank" rel="noopener">ngx_lua 中文文档</a></p><p>淘宝开发的 <code>ngx_lua</code> 模块通过将 Lua 解释器集成进 Nginx，可以采用 Lua 脚本实现业务逻辑，由于 Lua 的紧凑、快速以及内建协程，所以在保证高并发服务能力的同时极大地降低了业务逻辑实现成本。</p><h2 id="ngx-lua模块环境准备"><a href="#ngx-lua模块环境准备" class="headerlink" title="ngx_lua模块环境准备"></a>ngx_lua模块环境准备</h2><p>下载 <code>ngx-lua-module</code> 模块有两个方式。</p><ul><li>方式一安装比较繁琐，需要手动下载其他依赖</li><li>方式二安装简单快捷，集成了依赖，不需要手动下载依赖，建议方式二</li></ul><p>不论方式一还是方式二安装，<strong>首先确保你为它安装好了环境，否则会安装报错</strong>。环境分别为：<code>GCC</code>、<code>PCRE</code>、<code>zlib</code>、<code>OpenSSL</code>。<a href="/middleware/Nginx/Nginx_install/#nginx环境安装">环境安装传送门</a>。</p><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>方式一下载第三方模块 <code>lua-nginx-module</code>，前，需要先下载 <code>LuaJIT</code> 解析器。</p><p><code>LuaJIT</code> 官网地址为：<a href="http://luajit.org/" target="_blank" rel="noopener">http://luajit.org/</a>。</p><ul><li><p>LuaJIT 是采用 C 语言编写的 Lua 代表的解释器，我们先下载它。</p><p>在官网上找到对应的下载地址：<a href="https://luajit.org/download.html" target="_blank" rel="noopener">https://luajit.org/download.html</a></p><p>在 Linux 上使用 wget 来下载: <code>wget http://luajit.org/download/LuaJIT-2.0.5.tar.gz</code>，这里下载在 <code>/opt</code>，下载的版本是 2.0.5。</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">wget http://luajit.org/download/LuaJIT-2.0.5.tar.gz</span><br></pre></td></tr></table></figure><p>将下载的资源进行解压</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf LuaJIT-2.0.5.tar.gz</span><br></pre></td></tr></table></figure><p>进入解压的目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> LuaJIT-2.0.5</span><br></pre></td></tr></table></figure><p>执行编译和安装:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220807/image.50moe87h8k00.webp" alt="image"></p><ul><li>下载 <code>lua-nginx-module</code></li></ul><p>下载地址：<a href="https://github.com/openresty/lua-nginx-module/tags">https://github.com/openresty/lua-nginx-module/tags</a></p><p>在 Linux 上使用 wget 来下载: <code>wget https://github.com/openresty/lua-nginx-module/archive/v0.10.16rc4.tar.gz</code>，这里下载在 <code>/opt</code>，版本是 0.10.16rc4。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/openresty/lua-nginx-module/archive/v0.10.16rc4.tar.gz</span><br></pre></td></tr></table></figure><p>将下载的资源进行解压</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf lua-nginx-module-0.10.16rc4.tar.gz</span><br></pre></td></tr></table></figure><p>目录名太长，更改目录名</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv lua-nginx-module-0.10.16rc4 lua-nginx-module</span><br></pre></td></tr></table></figure><p>导入环境变量，告诉 Nginx 去哪里找 LuaJIT</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LUAJIT_LIB=/usr/<span class="built_in">local</span>/lib</span><br><span class="line"><span class="built_in">export</span> LUAJIT_INC=/usr/<span class="built_in">local</span>/include/luajit-2.0</span><br></pre></td></tr></table></figure><p>进入 Nginx 的源码目录（安装包目录）执行如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --add-module=/opt/lua-nginx-module</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ol><li>如果启动 Nginx 出现如下错误:</li></ol><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220807/image.3mn8xd7igx20.webp" alt="image"></p><p>解决方案：</p><p>设置软链接，使用如下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/<span class="built_in">local</span>/lib/libluajit-5.1.so.2 /lib64/libluajit-5.1.so.2</span><br></pre></td></tr></table></figure><ol start="2"><li>如果启动 Nginx 出现以下错误信息</li></ol><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220807/image.6h5kw6afg4w0.webp" alt="image"></p><p>分析原因：因为 <code>lua-nginx-module</code> 是来自 OpenResty，错误中提示的 resty.core 是 OpenRestry 的核心模块，对其下的很多函数进行了优化等工作。以前的版本默认不会把该模块编译进去，所以需要使用的话，我们得手动安装，或者禁用就可以。但是最新的 <code>lua-nginx-module</code> 模块已经强制性安装了该模块，所以此处因为缺少 resty 模块导致的报错信息。</p><p>解决方案有两个：一种是下载对应的模块，另一种则是禁用掉 restry 模块，禁用的方式为：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line"><span class="attribute">lua_load_resty_core</span> <span class="literal">off</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><p>在 nginx.conf 下配置如下内容:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /lua&#123;</span><br><span class="line">    <span class="attribute">default_type</span> <span class="string">'text/html'</span>;</span><br><span class="line">    <span class="attribute">content_by_lua</span> <span class="string">'ngx.say("&lt;h1&gt;HELLO,LUA&lt;/h1&gt;")'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置成功后，启动 Nginx，通过浏览器进行访问，如果获取到如下结果，则证明安装成功。</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220807/image.6dtqzlgzk5s0.webp" alt="image"></p><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>方式二使用 OpenRestry 进行安装。OpenRestry 就是我们上面说到的 Nginx 的 Spring 之一。</p><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>前面我们提到过，OpenResty 是由淘宝工程师开发的，所以其官方网站（<a href="http://openresty.org/cn/" target="_blank" rel="noopener">http://openresty.org/</a>）我们读起来是非常的方便。OpenResty 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。所以本身 OpenResty 内部就已经集成了 Nginx 和 Lua，所以我们使用起来会更加方便。</p><h4 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h4><p>下载地址：<a href="http://openresty.org/cn/download.html" target="_blank" rel="noopener">http://openresty.org/cn/download.html</a>。这里下载 1.19.9.1 版本。</p><ul><li><p>可以在 Windows 下载 OpenResty：<a href="https://openresty.org/download/openresty-1.19.9.1.tar.gz" target="_blank" rel="noopener">https://openresty.org/download/openresty-1.19.9.1.tar.gz</a>，然后上传到 Linux</p><p>或者直接在 Linux 使用 wget 下载: <code>wget https://openresty.org/download/openresty-1.19.9.1.tar.gz</code></p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/openresty    <span class="comment"># 没有就创建：mkdir /opt/openresty</span></span><br><span class="line"></span><br><span class="line">wget https://openresty.org/download/openresty-1.19.9.1.tar.gz</span><br></pre></td></tr></table></figure><ul><li>解压缩</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf openresty-1.19.9.1.tar.gz</span><br></pre></td></tr></table></figure><ul><li>进入 OpenResty 目录</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> openresty-1.19.9.1</span><br></pre></td></tr></table></figure><ul><li>执行命令</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure><ul><li>执行命令进行编译和安装</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">gmake &amp;&amp; gmake install</span><br></pre></td></tr></table></figure><p>默认安装在 <code>/usr/local/</code> 下。</p><ul><li>进入 OpenResty 的目录，找到 nginx</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/openresty/nginx</span><br></pre></td></tr></table></figure><ul><li>在 conf 目录下的 nginx.conf 添加如下内容：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim conf/nginx.conf</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /lua &#123;</span><br><span class="line">    <span class="attribute">default_type</span> <span class="string">'text/html'</span>;</span><br><span class="line">    <span class="attribute">content_by_lua</span> <span class="string">'ngx.say("&lt;h1&gt;HELLO,OpenRestry&lt;/h1&gt;")'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启 Nginx 配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><ul><li>先把 Nginx 停止运行</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop Nginx</span><br></pre></td></tr></table></figure><p>然后在 sbin 目录下启动可执行文件 nginx</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sbin/nginx</span><br></pre></td></tr></table></figure><ul><li>通过浏览器访问测试<code>192.168.91.200</code></li></ul><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220807/image.502009iyfd00.webp" alt="image"></p><ul><li>通过浏览器访问测试<code>192.168.91.200/lua</code></li></ul><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220807/image.4r1610qz44g0.webp" alt="image"></p><h3 id="OpenResty卸载"><a href="#OpenResty卸载" class="headerlink" title="OpenResty卸载"></a>OpenResty卸载</h3><p>卸载非常简单粗暴，相信我，这样卸载是对的，没什么问题。</p><ol><li>停止 Nginx 服务</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 Nginx 是否停止，没有则去停止</span></span><br><span class="line">ps -ef | grep nginx </span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入 sbin 目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/openresty/nginx/sbin</span><br><span class="line">./nginx -s stop</span><br></pre></td></tr></table></figure><ol start="2"><li>输入以下指令全局查找 OpenResty 相关的文件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name openresty</span><br></pre></td></tr></table></figure><ol start="3"><li>find / -name openresty</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf  此处跟查找出来的 Openresty 文件</span><br></pre></td></tr></table></figure><h2 id="ngx-lua指令图"><a href="#ngx-lua指令图" class="headerlink" title="ngx_lua指令图"></a>ngx_lua指令图</h2><p>使用 Lua 编写 Nginx 脚本的基本构建块是指令。指令用于指定何时运行用户 Lua 代码以及如何使用结果。</p><p>下图显示了执行指令的顺序。</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220807/image.3xichpazdxy0.webp" alt="image"></p><p>先来解释下 * 的作用</p><ul><li>* 代表 *_by_lua 指令，指令后面跟的是 lua 指令</li><li>*:_file，即 *_by_lua_file 指令，后面跟的是 lua 文件</li><li>*:_block，即 *_by_lua_block 指令，在 0.9.17 版后替换 init_by_lua_file</li></ul><p>如上图所示，OpenResty 的执行阶段分为：</p><ul><li>init_by_lua*：在每次 Nginx 重新加载配置时执行，初始化一些全局配置。</li><li>init_worker_by_lua*：该指令用于启动一些定时任务，如心跳检查、定时拉取服务器配置等。</li><li>set_by_lua* : 流程分支处理判断变量初始化</li><li>rewrite_by_lua* : 转发、重定向、缓存等功能(例如特定请求代理到外网)</li><li>access_by_lua* : IP 准入、接口权限等情况集中处理(例如配合 iptable 完成简单防火墙)</li><li>content_by_lua* : 内容生成</li><li>header_filter_by_lua* : 响应头部过滤处理(例如添加头部信息)</li><li>body_filter_by_lua* : 响应体过滤处理(例如完成应答内容统一成大写)</li><li>log_by_lua* : 会话完成后本地异步完成日志记录(日志可以记录在本地，还可以同步到其他机器)</li></ul><h2 id="语法API"><a href="#语法API" class="headerlink" title="语法API"></a>语法API</h2><h3 id="ngx-say"><a href="#ngx-say" class="headerlink" title="ngx.say"></a>ngx.say</h3><p>返回结果给客户端。</p><p>语法：<code>ngx.say(&quot;&quot;)</code>。</p><figure class="highlight nginx"><figcaption><span>&#123;4&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">default_type</span> <span class="string">'text/plain'</span>;</span><br><span class="line">    <span class="section">content_by_lua_block</span> &#123;</span><br><span class="line">        ngx.say("Hello World")</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你会在网页上看到 Hello World。</p><h3 id="ngx-print"><a href="#ngx-print" class="headerlink" title="ngx.print"></a>ngx.print</h3><p>将输入参数合并发送给 HTTP 客户端 (作为 HTTP 响应体)。如果此时还没有发送响应头信息，本函数将先发送 HTTP 响应头，再输出响应体。</p><p>语法：<code>ok, err = ngx.print(...)</code></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="built_in">table</span> = &#123;</span><br><span class="line">     <span class="string">"hello, "</span>,</span><br><span class="line">     &#123;<span class="string">"world: "</span>, <span class="literal">true</span>, <span class="string">" or "</span>, <span class="literal">false</span>,</span><br><span class="line">         &#123;<span class="string">": "</span>, <span class="literal">nil</span>&#125;&#125;</span><br><span class="line"> &#125;</span><br><span class="line">ok, err = ngx.<span class="built_in">print</span>(<span class="built_in">table</span>)</span><br></pre></td></tr></table></figure><p>将输出：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello, world: <span class="literal">true</span> <span class="keyword">or</span> <span class="literal">false</span>: <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>其中 ok 存储着输出的内容，如果输出失败，err 存储失败的原因。</p><p>本函数为异步调用，将立即返回，不会等待所有数据被写入系统发送缓冲区。要以同步模式运行，请在调用 <code>ngx.print</code> 之后调用 <code>ngx.flush</code>。</p><h3 id="ngx-flush"><a href="#ngx-flush" class="headerlink" title="ngx.flush"></a>ngx.flush</h3><p>向客户端刷新响应输出。</p><p>语法：<code>ok, err = ngx.flush(wait)</code></p><p><code>ngx.flush</code> 接受一个布尔型可选参数 <code>wait</code> (默认值 <code>false</code>)。当通过默认参数（<code>false</code>）调用时，本函数发起一个异步调用。当把 <code>wait</code> 参数设置为 <code>true</code> 时，本函数将以同步模式执行。</p><ul><li>异步调用下，直接将数据返回，不等待输出数据被写入系统发送缓冲区。</li><li>同步模式下，本函数不会立即返回，一直到所有输出数据被写入系统输出缓冲区，或到达发送超时 send_timeout 时间。</li></ul><p>这个要和上方的 ngx.print 进行配合使用，开启同步模式，可以优化返回客户端多条数据的速度。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="built_in">table</span> = &#123;</span><br><span class="line">     <span class="string">"hello, "</span>,</span><br><span class="line">     &#123;<span class="string">"world: "</span>, <span class="literal">true</span>, <span class="string">" or "</span>, <span class="literal">false</span>,</span><br><span class="line">         &#123;<span class="string">": "</span>, <span class="literal">nil</span>&#125;&#125;</span><br><span class="line"> &#125;</span><br><span class="line">ok, err = ngx.<span class="built_in">print</span>(<span class="built_in">table</span>)</span><br><span class="line">ngx.<span class="built_in">flush</span>(<span class="literal">true</span>) <span class="comment">-- 开启同步模式</span></span><br></pre></td></tr></table></figure><h3 id="ngx-arg"><a href="#ngx-arg" class="headerlink" title="ngx.arg"></a>ngx.arg</h3><p>获取定义的变量。</p><p>语法：<code>ngx.arg[n]</code>。</p><figure class="highlight nginx"><figcaption><span>&#123;4&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /foo &#123;</span><br><span class="line">    <span class="attribute">set</span> <span class="variable">$a</span> <span class="number">32</span>;</span><br><span class="line">    <span class="attribute">set</span> <span class="variable">$b</span> <span class="number">56</span>;</span><br><span class="line">    <span class="attribute">sum</span> = ngx.arg[<span class="number">1</span>] + ngx.arg[<span class="number">2</span>]  <span class="comment"># 等价于 $a + $b</span></span><br><span class="line">    echo <span class="variable">$sum</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将输出 88，是 32 和 56 的和。</p><h3 id="ngx-var"><a href="#ngx-var" class="headerlink" title="ngx.var"></a>ngx.var</h3><p>读写 Nginx 变量值。</p><p>语法：<code>ngx.var.xxx</code>。</p><figure class="highlight nginx"><figcaption><span>&#123;2,4&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /foo &#123;</span><br><span class="line">    <span class="attribute">set</span> <span class="variable">$my_var</span> <span class="string">''</span>;  <span class="comment"># 创建 $my_var 变量</span></span><br><span class="line">    <span class="attribute">content_by_lua</span> <span class="string">'</span></span><br><span class="line"><span class="string">        ngx.var.my_var = 123;  # 使用 <span class="variable">$my_var</span> 变量</span></span><br><span class="line"><span class="string">    '</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ngx-log"><a href="#ngx-log" class="headerlink" title="ngx.log"></a>ngx.log</h3><p>输出到日志中。格式：<code>ngx.log(ngx.level,...)</code></p><p>可指定多个日志常量 ngx.level。</p><p>ngx.level有：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ngx.STDERR    <span class="comment">-- 例如 ngx.log(ngx.STDERR)</span></span><br><span class="line">ngx.EMERG</span><br><span class="line">ngx.ALERT</span><br><span class="line">ngx.CRIT</span><br><span class="line">ngx.ERR</span><br><span class="line">ngx.WARN</span><br><span class="line">ngx.NOTICE</span><br><span class="line">ngx.INFO</span><br><span class="line">ngx.DEBUG</span><br></pre></td></tr></table></figure><h3 id="HTTP-方法常量"><a href="#HTTP-方法常量" class="headerlink" title="HTTP 方法常量"></a>HTTP 方法常量</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ngx.HTTP_GET</span><br><span class="line">ngx.HTTP_HEAD</span><br><span class="line">ngx.HTTP_PUT</span><br><span class="line">ngx.HTTP_POST</span><br><span class="line">ngx.HTTP_DELETE</span><br><span class="line">ngx.HTTP_OPTIONS   (v0<span class="number">.5</span><span class="number">.0</span>rc24 版本加入)</span><br><span class="line">ngx.HTTP_MKCOL     (v0<span class="number">.8</span><span class="number">.2</span> 版本加入)</span><br><span class="line">ngx.HTTP_COPY      (v0<span class="number">.8</span><span class="number">.2</span> 版本加入)</span><br><span class="line">ngx.HTTP_MOVE      (v0<span class="number">.8</span><span class="number">.2</span> 版本加入)</span><br><span class="line">ngx.HTTP_PROPFIND  (v0<span class="number">.8</span><span class="number">.2</span> 版本加入)</span><br><span class="line">ngx.HTTP_PROPPATCH (v0<span class="number">.8</span><span class="number">.2</span> 版本加入)</span><br><span class="line">ngx.HTTP_LOCK      (v0<span class="number">.8</span><span class="number">.2</span> 版本加入)</span><br><span class="line">ngx.HTTP_UNLOCK    (v0<span class="number">.8</span><span class="number">.2</span> 版本加入)</span><br><span class="line">ngx.HTTP_PATCH     (v0<span class="number">.8</span><span class="number">.2</span> 版本加入)</span><br><span class="line">ngx.HTTP_TRACE     (v0<span class="number">.8</span><span class="number">.2</span> 版本加入)</span><br></pre></td></tr></table></figure><h3 id="HTTP-状态常量"><a href="#HTTP-状态常量" class="headerlink" title="HTTP 状态常量"></a>HTTP 状态常量</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">value = ngx.HTTP_OK (等于 <span class="number">200</span>)</span><br><span class="line">value = ngx.HTTP_CREATED (等于 <span class="number">201</span>)</span><br><span class="line">value = ngx.HTTP_SPECIAL_RESPONSE (等于 <span class="number">300</span>)</span><br><span class="line">value = ngx.HTTP_MOVED_PERMANENTLY (等于 <span class="number">301</span>)</span><br><span class="line">value = ngx.HTTP_MOVED_TEMPORARILY (等于 <span class="number">302</span>)</span><br><span class="line">value = ngx.HTTP_SEE_OTHER (等于 <span class="number">303</span>)</span><br><span class="line">value = ngx.HTTP_NOT_MODIFIED (等于 <span class="number">304</span>)</span><br><span class="line">value = ngx.HTTP_BAD_REQUEST (等于 <span class="number">400</span>)</span><br><span class="line">value = ngx.HTTP_UNAUTHORIZED (等于 <span class="number">401</span>)</span><br><span class="line">value = ngx.HTTP_FORBIDDEN (等于 <span class="number">403</span>)</span><br><span class="line">value = ngx.HTTP_NOT_FOUND (等于 <span class="number">404</span>)</span><br><span class="line">value = ngx.HTTP_NOT_ALLOWED (等于 <span class="number">405</span>)</span><br><span class="line">value = ngx.HTTP_GONE (等于 <span class="number">410</span>)</span><br><span class="line">value = ngx.HTTP_INTERNAL_SERVER_ERROR (等于 <span class="number">500</span>)</span><br><span class="line">value = ngx.HTTP_METHOD_NOT_IMPLEMENTED (等于 <span class="number">501</span>)</span><br><span class="line">value = ngx.HTTP_SERVICE_UNAVAILABLE (等于 <span class="number">503</span>)</span><br><span class="line">value = ngx.HTTP_GATEWAY_TIMEOUT (等于 <span class="number">504</span>) (v0<span class="number">.3</span><span class="number">.1</span>rc38 版本加入)</span><br></pre></td></tr></table></figure><h3 id="print"><a href="#print" class="headerlink" title="print"></a>print</h3><p>将参数值以 <code>ngx.NOTICE</code> 日志级别写入 Nginx 的 <code>error.log</code> 文件。</p><p>语法：<code>print(...)</code>。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Hello"</span>)</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngx.<span class="built_in">log</span>(ngx.NOTICE, <span class="string">"Hello"</span>)</span><br></pre></td></tr></table></figure><h3 id="ngx-ctx"><a href="#ngx-ctx" class="headerlink" title="ngx.ctx"></a>ngx.ctx</h3><p>一个 location 模块里的全局环境变量，存储基于请求的 Lua 环境数据。</p><p>语法：<code>ngx.ctx.xxx</code>。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /sub &#123;</span><br><span class="line">    <span class="attribute">content_by_lua</span> <span class="string">'</span></span><br><span class="line"><span class="string">        ngx.say("sub pre: ", ngx.ctx.blah)</span></span><br><span class="line"><span class="string">        ngx.ctx.blah = 32</span></span><br><span class="line"><span class="string">        ngx.say("sub post: ", ngx.ctx.blah)</span></span><br><span class="line"><span class="string">    '</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /main &#123;</span><br><span class="line">    <span class="attribute">content_by_lua</span> <span class="string">'</span></span><br><span class="line"><span class="string">        ngx.ctx.blah = 73</span></span><br><span class="line"><span class="string">        ngx.say("main pre: ", ngx.ctx.blah)</span></span><br><span class="line"><span class="string">        local res = ngx.location.capture("/sub")</span></span><br><span class="line"><span class="string">        ngx.print(res.body)</span></span><br><span class="line"><span class="string">        ngx.say("main post: ", ngx.ctx.blah)</span></span><br><span class="line"><span class="string">    '</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 <code>GET /main</code> 输出：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">main pre: <span class="number">73</span></span><br><span class="line"><span class="built_in">sub</span> pre: <span class="literal">nil</span></span><br><span class="line"><span class="built_in">sub</span> post: <span class="number">32</span></span><br><span class="line">main post: <span class="number">73</span></span><br></pre></td></tr></table></figure><h3 id="ngx-exit"><a href="#ngx-exit" class="headerlink" title="ngx.exit"></a>ngx.exit</h3><p>退出某个阶段，如处理请求阶段、重定向阶段等。</p><p>语法：<code>ngx.exit(status)</code>。</p><p><code>status</code> 参数可以是 <code>ngx.OK</code>，<code>ngx.ERROR</code> 等等 <a href="/middleware/Nginx/Nginx_Lua_Expansion_module/#http-状态常量">HTTP 状态常量</a></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ngx.<span class="built_in">status</span> = ngx.HTTP_GONE</span><br><span class="line">ngx.say(<span class="string">"This is our own content"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 退出整个请求而不是当前处理阶段</span></span><br><span class="line">ngx.<span class="built_in">exit</span>(ngx.HTTP_OK)</span><br></pre></td></tr></table></figure><p>可以直接使用数字作为参数，例如：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngx.<span class="built_in">exit</span>(<span class="number">501</span>)</span><br></pre></td></tr></table></figure><p>::: warning</p><p>数字作为参数仅支持 <code>NGX_OK</code> 和 <code>NGX_ERROR</code> 的数字。</p><p>:::</p><h3 id="ngx-sleep"><a href="#ngx-sleep" class="headerlink" title="ngx.sleep"></a>ngx.sleep</h3><p>无阻塞地休眠特定秒。时间可以精确到 0.001 秒 (毫秒)。</p><p>语法：<code>ngx.sleep(seconds)</code>。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngx.sleep(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h2 id="请求API"><a href="#请求API" class="headerlink" title="请求API"></a>请求API</h2><h3 id="ngx-req-get-uri-args"><a href="#ngx-req-get-uri-args" class="headerlink" title="ngx.req.get_uri_args"></a>ngx.req.get_uri_args</h3><p>返回一个 Lua table，包含当前请求的所有 URL 查询参数。</p><p>语法：<code>args = ngx.req.get_uri_args([max_args])</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> = /test &#123;</span><br><span class="line">     <span class="attribute">content_by_lua</span> <span class="string">'</span></span><br><span class="line"><span class="string">         local args = ngx.req.get_uri_args()</span></span><br><span class="line"><span class="string">         for key, val in pairs(args) do</span></span><br><span class="line"><span class="string">             if type(val) == "table" then</span></span><br><span class="line"><span class="string">                 ngx.say(key, ": ", table.concat(val, ", "))</span></span><br><span class="line"><span class="string">             else</span></span><br><span class="line"><span class="string">                 ngx.say(key, ": ", val)</span></span><br><span class="line"><span class="string">             end</span></span><br><span class="line"><span class="string">         end</span></span><br><span class="line"><span class="string">     '</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>访问 <code>GET /test?foo=bar&amp;bar=baz&amp;bar=blah</code> 将输出：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo: bar</span><br><span class="line">bar: baz, blah</span><br></pre></td></tr></table></figure><p>多次出现同一个参数 key 时，将生成一个 Lua table，按顺序保存其所有 value。</p><h3 id="ngx-req-set-uri-args"><a href="#ngx-req-set-uri-args" class="headerlink" title="ngx.req.set_uri_args"></a>ngx.req.set_uri_args</h3><p>用 <code>args</code> 参数重写当前请求的 URI 请求参数。</p><p>语法：<code>ngx.req.set_uri_args(args)</code>。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ngx.req.set_uri_args(<span class="string">"a=3&amp;b=hello%20world"</span>)</span><br><span class="line"></span><br><span class="line">ngx.req.set_uri_args(&#123; a = <span class="number">3</span>, b = <span class="string">"hello world"</span> &#125;)</span><br><span class="line"></span><br><span class="line">ngx.req.set_uri_args(&#123; a = <span class="number">3</span>, b = &#123;<span class="number">5</span>, <span class="number">6</span>&#125; &#125;)</span><br></pre></td></tr></table></figure><p>在第二种情况下，本方法将根据 URI 转义规则转义参数的 key 和 value。</p><p>在第三种情况下，请求参数字符串为 <code>a=3&amp;b=5&amp;b=6</code>。</p><h3 id="ngx-header-HEADER"><a href="#ngx-header-HEADER" class="headerlink" title="ngx.header.HEADER"></a>ngx.header.HEADER</h3><p>修改、添加、或清除当前请求待发送的 <code>HEADER</code> 响应头信息。</p><p>语法：<code>ngx.header.HEADER = VALUE</code>。</p><p><code>HEADER</code> 响应头信息不是自定义的，是请求头带有的。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 与 ngx.header["Content-Type"] = 'text/plain' 相同</span></span><br><span class="line">ngx.header.content_type = <span class="string">'text/plain'</span>;</span><br><span class="line"></span><br><span class="line">ngx.header[<span class="string">"X-My-Header"</span>] = <span class="string">'blah blah'</span></span><br></pre></td></tr></table></figure><h3 id="ngx-req-get-method"><a href="#ngx-req-get-method" class="headerlink" title="ngx.req.get_method"></a>ngx.req.get_method</h3><p>获取当前请求的 HTTP 请求方法名称。结果为类似 <code>&quot;GET&quot;</code> 和 <code>&quot;POST&quot;</code> 的字符串。</p><p>语法：<code>ngx.req.get_method</code>。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value = ngx.req.get_method</span><br></pre></td></tr></table></figure><h3 id="ngx-req-set-method"><a href="#ngx-req-set-method" class="headerlink" title="ngx.req.set_method"></a>ngx.req.set_method</h3><p>用 <code>method_id</code> 参数的值改写当前请求的 HTTP 请求方法。当前仅支持 <a href="/middleware/Nginx/Nginx_Lua_Expansion_module/#http-方法常量">HTTP 请求方法</a> 中定义的数值常量。</p><p>语法：<code>ngx.req.set_method(method_id)</code>。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ngx.req.set_method(method_id)</span><br><span class="line"></span><br><span class="line">ngx.req.set_method(ngx.HTTP_GET)</span><br></pre></td></tr></table></figure><h3 id="ngx-req-read-body"><a href="#ngx-req-read-body" class="headerlink" title="ngx.req.read_body"></a>ngx.req.read_body</h3><p>同步读取客户端请求体，不阻塞 Nginx 事件循环。</p><p>语法：<code>ngx.req.read_body()</code>。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ngx.req.read_body()</span><br><span class="line"><span class="keyword">local</span> args = ngx.req.get_post_args()</span><br></pre></td></tr></table></figure><h3 id="ngx-req-get-post-args"><a href="#ngx-req-get-post-args" class="headerlink" title="ngx.req.get_post_args"></a>ngx.req.get_post_args</h3><p>返回一个 Lua table，包含当前请求的所有 POST 查询参数。</p><p>语法：<code>args, err = ngx.req.get_post_args(max_args?)</code></p><p>::: warning</p><p>使用 <code>ngx.req.get_post_args</code> 获取参数前，必须使用 <code>ngx.req.read_body</code> 读取请求体。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">location = /test &#123;</span><br><span class="line">    content_by_lua <span class="string">'</span></span><br><span class="line"><span class="string">        ngx.req.read_body()</span></span><br><span class="line"><span class="string">        local args, err = ngx.req.get_post_args()</span></span><br><span class="line"><span class="string">        if not args then</span></span><br><span class="line"><span class="string">            ngx.say("failed to get post args: ", err)</span></span><br><span class="line"><span class="string">            return</span></span><br><span class="line"><span class="string">        end</span></span><br><span class="line"><span class="string">        for key, val in pairs(args) do</span></span><br><span class="line"><span class="string">            if type(val) == "table" then</span></span><br><span class="line"><span class="string">                ngx.say(key, ": ", table.concat(val, ", "))</span></span><br><span class="line"><span class="string">            else</span></span><br><span class="line"><span class="string">                ngx.say(key, ": ", val)</span></span><br><span class="line"><span class="string">            end</span></span><br><span class="line"><span class="string">        end</span></span><br><span class="line"><span class="string">    '</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post request with the body 'foo=bar&amp;bar=baz&amp;bar=blah'</span></span><br><span class="line">$ curl --data <span class="string">'foo=bar&amp;bar=baz&amp;bar=blah'</span> localhost/<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>将输出：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo: bar</span><br><span class="line">bar: baz, blah</span><br></pre></td></tr></table></figure><p>多次出现同一个参数 key 时，将生成一个 Lua table，按顺序保存其所有 value。</p><h3 id="ngx-redirect"><a href="#ngx-redirect" class="headerlink" title="ngx.redirect"></a>ngx.redirect</h3><p>发出一个 HTTP <code>301</code> 或 <code>302</code> 重定向到 <code>uri</code>。</p><p>可选项 <code>status</code> 参数指定 <code>301</code> 或 <code>302</code> 哪个被使用。 默认使用 <code>302</code>。</p><p>语法：<code>ngx.redirect(uri, [status])</code>。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> ngx.redirect(<span class="string">"/foo"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 等价于</span></span><br><span class="line"><span class="keyword">return</span> ngx.redirect(<span class="string">"/foo"</span>, <span class="number">301</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 等价于</span></span><br><span class="line"><span class="keyword">return</span> ngx.redirect(<span class="string">"/foo"</span>, ngx.HTTP_MOVED_TEMPORARILY)</span><br></pre></td></tr></table></figure><p>重定向到任意外部 URL 也是支持的，例如：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> ngx.redirect(<span class="string">"http://www.baidu.com"</span>)</span><br></pre></td></tr></table></figure><h3 id="ngx-exec"><a href="#ngx-exec" class="headerlink" title="ngx.exec"></a>ngx.exec</h3><p>使用 <code>uri</code>、<code>args</code> 参数执行一个内部跳转。内部指的是 Nginx 的某个 location 模块。</p><p>语法：<code>ngx.exec(uri, [args])</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /foo &#123;</span><br><span class="line">     <span class="attribute">content_by_lua</span> <span class="string">'</span></span><br><span class="line"><span class="string">         ngx.exec("/bar", "a=goodbye");</span></span><br><span class="line"><span class="string">     '</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="attribute">location</span> /bar &#123;</span><br><span class="line">     <span class="attribute">content_by_lua</span> <span class="string">'</span></span><br><span class="line"><span class="string">         local args = ngx.req.get_uri_args()</span></span><br><span class="line"><span class="string">         for key, val in pairs(args) do</span></span><br><span class="line"><span class="string">             if key == "a" then</span></span><br><span class="line"><span class="string">                 ngx.say(val)</span></span><br><span class="line"><span class="string">             end</span></span><br><span class="line"><span class="string">         end</span></span><br><span class="line"><span class="string">     '</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>访问 <code>GET /foo/file.php?a=hello</code>，将返回 『 hello 』 ，而不是 『 goodbye 』</p><p>::: warning</p><p><code>ngx.exec</code> 方法与 <a href="/middleware/Nginx/Nginx_Lua_Expansion_module#nginx-redirect">ngx.redirect</a> 是完全不同的，前者是个纯粹的内部跳转并且没有引入任何额外 HTTP 信号。</p><p>此方法的调用终止当前请求的处理。</p><h3 id="ngx-location-capture"><a href="#ngx-location-capture" class="headerlink" title="ngx.location.capture"></a>ngx.location.capture</h3><p>向 <code>uri</code> 发起一个同步非阻塞 Nginx 子请求。</p><p>语法：<code>ngx.location.capture(uri,[options])</code>。</p><p>::: warning</p><p>它会请求 Nginx 的其他 location 模块，location 模块可以是其他文件目录的配置文件中，或任何其他 Nginx 模块。</p><p>:::</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = ngx.location.capture(uri,[options])</span><br></pre></td></tr></table></figure><p><code>res</code> 是返回的结果，它是一个「对象」，将包含四个元素的 Lua 表 (<code>res.status</code>, <code>res.header</code>, <code>res.body</code>, 和 <code>res.truncated</code>)。</p><ul><li><code>res.status</code> (状态) 保存子请求的响应状态码。</li><li><code>res.header</code> (头) 用一个标准 Lua 表储子请求响应的所有头信息。如果是“多值”响应头，这些值将使用 Lua (数组) 表顺序存储。</li></ul><p>如果子请求响应头包含下面的行：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: a=<span class="number">3</span></span><br><span class="line">Set-Cookie: foo=bar</span><br><span class="line">Set-Cookie: baz=blah</span><br></pre></td></tr></table></figure><p>则 <code>res.header[&quot;Set-Cookie&quot;]</code> 将存储 Lua 表 <code>{&quot;a=3&quot;, &quot;foo=bar&quot;, &quot;baz=blah&quot;}</code>。</p><p><strong>options 选项</strong></p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>method</td><td>指定子请求的请求方法, 只接受类似 <code>ngx.HTTP_POST</code> 的常量</td></tr><tr><td>body</td><td>指定子请求的请求体 (仅接受字符串值)</td></tr><tr><td>args</td><td>指定子请求的 URI 请求参数 (可以是字符串或者 Lua 表)</td></tr><tr><td>ctx</td><td>指定一个 Lua 表作为子请求的 ngx.ctx 表，可以是当前请求的 ngx.ctx 表</td></tr><tr><td>vars</td><td>用一个 Lua 表设置子请求中的 Nginx 变量值</td></tr><tr><td>copy_all_vars</td><td>设置是否复制所有当前请求的 Nginx 变量值到子请求中，修改子请求的 nginx 变量值不影响当前 (父) 请求</td></tr><tr><td>share_all_vars</td><td>设置是否共享所有当前 (父) 请求的 Nginx 变量值到子请求中，修改子请求的 nginx 变量值将影响当前 (父) 请求</td></tr><tr><td>always_forward_body</td><td>当设置为 true 时，如果没有设置 <code>body</code> 选项，当前 (父) 请求的请求体将被转发给子请求</td></tr></tbody></table><p>例如，发送一个 POST 子请求，可以这样做：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">res</span> = ngx.location.capture(</span><br><span class="line">    <span class="string">'/foo/bar'</span>,</span><br><span class="line">    &#123; <span class="attribute">method</span> = ngx.HTTP_POST, args = &#123; <span class="attribute">a</span> = <span class="number">1</span>,b = <span class="number">3</span>&#125;, body = <span class="string">'Hello，World'</span> &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = ngx.location.capture(<span class="string">'/foo/bar?a=1&amp;b=3'</span>)</span><br></pre></td></tr></table></figure><p><code>method</code> 选项默认值是 <code>ngx.HTTP_GET</code>。</p><p>其他内容具体看中文文档，开头有转送门。</p><p>::: tip ngx.exec 和 ngx.location.capture 区别</p><p><code>ngx.exec</code> 只会访问同一个配置文件的 location 模块。</p><p><code>ngx.location.capture</code> 不仅如此，还可以访问其他配置文件的 location 模块。</p><h3 id="ngx-req-set-uri"><a href="#ngx-req-set-uri" class="headerlink" title="ngx.req.set_uri"></a>ngx.req.set_uri</h3><p>语法：<code>ngx.req.set_uri(uri, jump?)</code></p><p>通过参数 uri 重写当前请求的 uri；参数 jump，表明是否进行 locations 的重新匹配。当 jump 为 true 时，调用 <code>ngx.req.set_uri</code> 后，Nginx 将会根据修改后的 uri，重新匹配新的 locations；如果 jump 为 false，将不会进行 locations 的重新匹配，而仅仅是修改了当前请求的 URI 而已。jump 的默认值为 false。</p><ul><li>jump 为 true，等价于 rewrite…last</li><li>jump 为 false，等价于 rewrite…break</li></ul><p>例如：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ngx.req.set_uri(<span class="string">"/foo"</span>, <span class="literal">true</span>)  === rewrite ^ /foo last;</span><br><span class="line"></span><br><span class="line">ngx.req.set_uri(<span class="string">"/foo"</span>, <span class="literal">false</span>)  ===  rewrite ^ /foo <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h2 id="指令API"><a href="#指令API" class="headerlink" title="指令API"></a>指令API</h2><h3 id="init-by-lua"><a href="#init-by-lua" class="headerlink" title="init_by_lua"></a>init_by_lua</h3><p>该指令在每次 Nginx 重新加载配置时执行，可以用来完成一些耗时模块的加载，或者初始化一些全局配置。</p><p>这是一个公共模块，把所有都用到的代码放到这个模块里，避免重复使用相同的代码。</p><p>比如每个模块都需要 MySQL 和 Redis，则在这个公共模块进行引用。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">init_by_lua_block&#123;</span><br><span class="line">    <span class="attribute">mysql</span> = require <span class="string">"resty.mysql"</span></span><br><span class="line">redis = require <span class="string">"resty.redis"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 下方直接使用 MySQL 和 Redis 的 API</span></span><br></pre></td></tr></table></figure><p>如果不喜欢直接写 Lua 语法，把 Lua 语法 放到 Lua 文件里，使用 <code>init_by_lua_file</code> 引用 Lua 文件。</p><h3 id="init-worker-by-lua"><a href="#init-worker-by-lua" class="headerlink" title="init_worker_by_lua"></a>init_worker_by_lua</h3><p>该指令用于启动一些定时任务，如心跳检查、定时拉取服务器配置等。</p><p>例如：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">init_worker_by_lua <span class="string">'</span></span><br><span class="line"><span class="string">    local delay = 3  -- in seconds</span></span><br><span class="line"><span class="string">    local new_timer = ngx.timer.at</span></span><br><span class="line"><span class="string">    local log = ngx.log</span></span><br><span class="line"><span class="string">    local ERR = ngx.ERR</span></span><br><span class="line"><span class="string">    local check</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    check = function(premature)</span></span><br><span class="line"><span class="string">        if not premature then</span></span><br><span class="line"><span class="string">            -- do the health check or other routine work</span></span><br><span class="line"><span class="string">            local ok, err = new_timer(delay, check)</span></span><br><span class="line"><span class="string">            if not ok then</span></span><br><span class="line"><span class="string">                log(ERR, "failed to create timer: ", err)</span></span><br><span class="line"><span class="string">                return</span></span><br><span class="line"><span class="string">            end</span></span><br><span class="line"><span class="string">        end</span></span><br><span class="line"><span class="string">    end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    local ok, err = new_timer(delay, check)</span></span><br><span class="line"><span class="string">    if not ok then</span></span><br><span class="line"><span class="string">        log(ERR, "failed to create timer: ", err)</span></span><br><span class="line"><span class="string">        return</span></span><br><span class="line"><span class="string">    end</span></span><br><span class="line"><span class="string">'</span>;</span><br></pre></td></tr></table></figure><p>如果不喜欢直接写 Lua 语法，把 Lua 语法 放到 Lua 文件里，使用 <code>init_worker_by_lua_file</code> 引用 Lua 文件。</p><h3 id="set-by-lua"><a href="#set-by-lua" class="headerlink" title="set_by_lua"></a>set_by_lua</h3><p>该指令只要用来做变量赋值，这个指令一次只能返回一个值，并将结果赋值给 Nginx 中指定的变量。</p><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>set_by_lua* &lt;key&gt; &lt;value&gt;</td><td>key要加上 $ 符号，value 是 Lua 语言的格式</td></tr></tbody></table><p>例如：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set_by_lua $name <span class="string">"</span></span><br><span class="line"><span class="string">local uri_args = ngx.req.get_uri_args()   -- 获取请求 ? 后的参数</span></span><br><span class="line"><span class="string">name = uri_args['name']   -- 获取 key 为 name 的参数</span></span><br><span class="line"><span class="string">return name..'先生'   -- 在 name 后面加上 先生，作为 $name 的 value 返回给客户端</span></span><br><span class="line"><span class="string">"</span>;</span><br></pre></td></tr></table></figure><p>此时 key 为 <code>$name</code> 的 value 值是 URL 的参数 name 加上「先生」。</p><p>如果不喜欢直接写 Lua 语法，把 Lua 语法 放到 Lua 文件里，使用 <code>set_by_lua_file</code> 引用 Lua 文件。</p><h3 id="rewrite-by-lua"><a href="#rewrite-by-lua" class="headerlink" title="rewrite_by_lua"></a>rewrite_by_lua</h3><p>该指令用于执行内部 URL 重写或者外部重定向，典型的如伪静态化 URL 重写，本阶段在 Rewrite 处理阶段的最后默认执行。</p><p>例如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /foo &#123;</span><br><span class="line">    <span class="attribute">set</span> <span class="variable">$a</span> <span class="number">12</span>; <span class="comment"># 创建变量 $a</span></span><br><span class="line">    <span class="attribute">set</span> <span class="variable">$b</span> <span class="string">""</span>; <span class="comment"># 创建变量 $b</span></span><br><span class="line">    <span class="attribute">rewrite_by_lua</span> <span class="string">'</span></span><br><span class="line"><span class="string">         ngx.var.b = tonumber(ngx.var.a) + 1  # 此时 b = 13</span></span><br><span class="line"><span class="string">         if tonumber(ngx.var.b) == 13 then</span></span><br><span class="line"><span class="string">             return ngx.redirect("/bar");   # 重定向到 /bar</span></span><br><span class="line"><span class="string">         end</span></span><br><span class="line"><span class="string">     '</span>;</span><br><span class="line">    <span class="attribute">echo</span> <span class="string">"res = <span class="variable">$b</span>"</span>;  <span class="comment"># res = 13</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不喜欢直接写 Lua 语法，把 Lua 语法 放到 Lua 文件里，使用 <code>rewrite_by_lua_file</code> 引用 Lua 文件。</p><h3 id="access-by-lua"><a href="#access-by-lua" class="headerlink" title="access_by_lua"></a>access_by_lua</h3><p>该指令用于访问控制。例如，如果只允许内网 IP 访问。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">access_by_lua</span> <span class="string">'</span></span><br><span class="line"><span class="string">        local res = ngx.location.capture("/auth")</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        if res.status == ngx.HTTP_OK then</span></span><br><span class="line"><span class="string">        return</span></span><br><span class="line"><span class="string">        end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        if res.status == ngx.HTTP_FORBIDDEN then</span></span><br><span class="line"><span class="string">        ngx.exit(res.status)</span></span><br><span class="line"><span class="string">        end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)</span></span><br><span class="line"><span class="string">        '</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy_pass/fastcgi_pass/postgres_pass/...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，在 access_by_lua 处理内部，当调用 <code>ngx.exit(ngx.OK)</code> 时，nginx 请求将继续下一阶段的内容处理。要在 access_by_lua 处理中终结当前请求，调用 ngx.exit ，成功的请求设定 status &gt;= 200 (<code>ngx.HTTP_OK</code>) 并 status &lt; 300 (<code>ngx.HTTP_SPECIAL_RESPONSE</code>)，失败的请求设定<code>ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)</code> (或其他相关的)。</p><p>如果不喜欢直接写 Lua 语法，把 Lua 语法 放到 Lua 文件里，使用 <code>access_by_lua_file</code> 引用 Lua 文件。</p><h3 id="content-by-lua"><a href="#content-by-lua" class="headerlink" title="content_by_lua"></a>content_by_lua</h3><p><strong>该指令是应用最多的指令</strong>，大部分任务是在这个阶段完成的，其他的过程往往为这个阶段准备数据，正式处理基本都在本阶段。</p><p>这个指令就相当于 Java 的一个方法，所有的代码都需要一个方法体作为环境。</p><p>例如：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">content_by_lua_block &#123;</span><br><span class="line">    set_by_lua $name <span class="string">"</span></span><br><span class="line"><span class="string">        local uri_args = ngx.req.get_uri_args()   -- 获取请求 ? 后的参数</span></span><br><span class="line"><span class="string">        name = uri_args['name']   -- 获取 key 为 name 的参数</span></span><br><span class="line"><span class="string">        return name..'先生'   -- 在 name 后面加上 先生，作为 $name 的 value 返回给客户端</span></span><br><span class="line"><span class="string">    "</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不喜欢直接写 Lua 语法，把 Lua 语法 放到 Lua 文件里，使用 <code>content_by_lua_file</code> 引用 Lua 文件。</p><h3 id="header-filter-by-lua"><a href="#header-filter-by-lua" class="headerlink" title="header_filter_by_lua"></a>header_filter_by_lua</h3><p>该指令用于设置应答消息的头部信息。</p><p>例如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"> <span class="attribute">proxy_pass</span> http://mybackend;</span><br><span class="line"> <span class="attribute">header_filter_by_lua</span> <span class="string">'ngx.header.username = "frx"'</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>你会在请求头看到 name 为 frx</p><p>如果不喜欢直接写 Lua 语法，把 Lua 语法 放到 Lua 文件里，使用 <code>header_filter_by_lua_file</code> 引用 Lua 文件。</p><h3 id="body-filter-by-lua"><a href="#body-filter-by-lua" class="headerlink" title="body_filter_by_lua"></a>body_filter_by_lua</h3><p>该指令是对响应数据进行过滤，如截断、替换。</p><p>例如，在输出体转换所有的小写字母，我们可以这样用：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    proxy_pass http://mybackend;</span><br><span class="line">    body_filter_by_lua <span class="string">'ngx.arg[1] = string.upper(ngx.arg[1])'</span>;  <span class="comment"># 转小写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不喜欢直接写 Lua 语法，把 Lua 语法 放到 Lua 文件里，使用 <code>body_filter_by_lua_file</code> 引用 Lua 文件。</p><h3 id="log-by-lua"><a href="#log-by-lua" class="headerlink" title="log_by_lua"></a>log_by_lua</h3><p>该指令用于在 log 请求处理阶段，用 Lua 代码处理日志，但并不替换原有 log 处理。</p><p>例如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://mybackend;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">log_by_lua</span> <span class="string">'</span></span><br><span class="line"><span class="string">            local log_dict = ngx.shared.log_dict</span></span><br><span class="line"><span class="string">            local upstream_time = tonumber(ngx.var.upstream_response_time)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            local sum = log_dict:get("upstream_time-sum") or 0</span></span><br><span class="line"><span class="string">            sum = sum + upstream_time</span></span><br><span class="line"><span class="string">            log_dict:set("upstream_time-sum", sum)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            local newval, err = log_dict:incr("upstream_time-nb", 1)</span></span><br><span class="line"><span class="string">            if not newval and err == "not found" then</span></span><br><span class="line"><span class="string">            log_dict:add("upstream_time-nb", 0)</span></span><br><span class="line"><span class="string">            log_dict:incr("upstream_time-nb", 1)</span></span><br><span class="line"><span class="string">            end</span></span><br><span class="line"><span class="string">            '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不喜欢直接写 Lua 语法，把 Lua 语法 放到 Lua 文件里，使用 <code>log_by_lua_file</code> 引用 Lua 文件。</p><h3 id="balancer-by-lua"><a href="#balancer-by-lua" class="headerlink" title="balancer_by_lua"></a>balancer_by_lua</h3><p> 该指令主要的作用是用来实现上游服务器的负载均衡器算法</p><h3 id="ssl-certificate-by"><a href="#ssl-certificate-by" class="headerlink" title="ssl_certificate_by"></a>ssl_certificate_by</h3><p>该指令作用在 Nginx 和下游服务开始一个 SSL 握手操作时将允许本配置项的 Lua 代码。</p><h2 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>发送请求：<code>http://192.168.91.200?name=张三&amp;gender=1</code></p><p>Nginx 接收到请求后，根据 gender 传入的值进行判断，如果 gender 传入的是 1，则在页面上展示张三先生,如果 gender 传入的是 0，则在页面上展示张三女士，如果未传或者传入的不是 1 和 2，则在页面上展示张三。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>在配置文件进行如下配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /getByGender &#123;</span><br><span class="line"><span class="attribute">default_type</span> <span class="string">'text/html'</span>;</span><br><span class="line">    </span><br><span class="line"><span class="attribute">set_by_lua</span> <span class="variable">$name</span> <span class="string">"</span></span><br><span class="line"><span class="string">local uri_args = ngx.req.get_uri_args()</span></span><br><span class="line"><span class="string">gender = uri_args['gender']</span></span><br><span class="line"><span class="string">name = uri_args['name']</span></span><br><span class="line"><span class="string">if gender=='1' then</span></span><br><span class="line"><span class="string">return name..'先生'</span></span><br><span class="line"><span class="string">elseif gender=='0' then</span></span><br><span class="line"><span class="string">return name..'女士'</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">return name</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">"</span>;</span><br><span class="line"><span class="attribute">header_filter_by_lua</span> <span class="string">"</span></span><br><span class="line"><span class="string">ngx.header.aaa='bbb'</span></span><br><span class="line"><span class="string">"</span>;</span><br><span class="line"><span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line"><span class="attribute">return</span> <span class="number">200</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问测试：<code>http://192.168.91.200/getByGender?name=冯荣旭&amp;gender=1</code></p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220807/image.43wr3kwp3ag0.webp" alt="image"></p><p>访问测试：<code>http://192.168.91.200/getByGender?name=冯荣旭</code></p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220807/image.44pzvk2lzlk0.webp" alt="image"></p><h2 id="ngx-lua操作Redis"><a href="#ngx-lua操作Redis" class="headerlink" title="ngx_lua操作Redis"></a>ngx_lua操作Redis</h2><p>Redis 在系统中经常作为数据缓存、内存数据库使用，在大型系统中扮演着非常重要的作用。</p><p>在 Nginx 核心系统中，Redis 是常备组件。Nginx 支持 3 种方法访问 Redis，分别是 HttpRedis 模块、HttpRedis2Module 模块、lua-resty-redis 库。</p><p>这三种方式中 HttpRedis 模块提供的指令少，功能单一，适合做简单缓存。HttpRedis2Module 模块比 HttpRedis 模块操作更灵活，功能更强大。而Lua-resty-redis 库是 OpenResty 提供的一个操作 Redis 的接口库，可根据自己的业务情况做一些逻辑处理，适合做复杂的业务逻辑。</p><p>本内容将主要以 Lua-resty-redis 来进行讲解。</p><h3 id="Redis环境准备"><a href="#Redis环境准备" class="headerlink" title="Redis环境准备"></a>Redis环境准备</h3><p>准备一个 Redis 环境，并确保正常连接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接地址</span></span><br><span class="line">host= 192.168.91.200</span><br><span class="line">port=6379</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master <span class="built_in">local</span>]<span class="comment"># /usr/local/bin/redis-server /etc/redis.conf</span></span><br><span class="line">[root@master <span class="built_in">local</span>]<span class="comment"># redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h3 id="API学习"><a href="#API学习" class="headerlink" title="API学习"></a>API学习</h3><p><code>lua-resty-redis</code> 提供了访问 Redis 的详细 API，包括创建对接、连接、操作、数据处理等。这些 API 基本上与 Redis 的操作一一对应。</p><table><thead><tr><th>API</th><th>作用</th></tr></thead><tbody><tr><td>redis = require “resty.redis”</td><td>引入 Redis 模块，类似于 Java 的 import。</td></tr><tr><td>redis,err = redis:new()</td><td>创建一个 Redis 对象给 redis，err 记录创建失败的原因。</td></tr><tr><td>ok,err=redis:connect(host,port[,options_table])</td><td>设置连接 Redis 的连接信息。 ok：连接成功返回 1，连接失败返回 nil。 err：返回对应的错误信息。</td></tr><tr><td>redis:set_timeout(time)</td><td>设置请求操作 Redis 的超时时间，单位毫秒。</td></tr><tr><td>ok,err = redis:close()</td><td>关闭当前连接。 ok：连接成功返回 1，连接失败返回 nil。 err：返回对应的错误信息。</td></tr><tr><td>原生 Redis 命令如 get、set、lpush 等</td><td>所有的 Redis 命令都有自己的方法，方法名字和命令名字相同，只是全部为小写。</td></tr></tbody></table><h3 id="效果实现"><a href="#效果实现" class="headerlink" title="效果实现"></a>效果实现</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">location /redis &#123;</span><br><span class="line">    default_type <span class="string">"text/html"</span>;</span><br><span class="line">    content_by_lua_block &#123;</span><br><span class="line">        <span class="keyword">local</span> redis = <span class="built_in">require</span> <span class="string">"resty.redis"</span> <span class="comment">-- 引入 Redis</span></span><br><span class="line">        <span class="keyword">local</span> redisObj = redis:new()  <span class="comment">-- 创建 Redis 对象</span></span><br><span class="line">        redisObj:set_timeout(<span class="number">1000</span>) <span class="comment">-- 设置超时数据为 1s</span></span><br><span class="line">        <span class="keyword">local</span> ok,err = redisObj:connect(<span class="string">"192.168.91.200"</span>,<span class="number">6379</span>) <span class="comment">-- 设置 Redis 连接信息</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span> <span class="comment">-- 判断是否连接成功</span></span><br><span class="line">            ngx.say(<span class="string">"failed to connection redis"</span>,err)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        ok,err = redisObj:set(<span class="string">"username"</span>,<span class="string">"TOM"</span>)<span class="comment">-- 存入数据</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span> <span class="comment">-- 判断是否存入成功</span></span><br><span class="line">            ngx.say(<span class="string">"failed to set username"</span>,err)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">local</span> res,err = redisObj:get(<span class="string">"username"</span>) <span class="comment">-- 从 Redis 中获取数据</span></span><br><span class="line">        ngx.say(res) <span class="comment">-- 将数据写会消息体中</span></span><br><span class="line">        redisObj:<span class="built_in">close</span>() <span class="comment">-- 关闭 Redis 连接</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试效果</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220807/image.4iflh85c7ma0.webp" alt="image"></p><ul><li>查询redis</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master conf]<span class="comment"># redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; get username</span><br><span class="line"><span class="string">"TOM"</span></span><br></pre></td></tr></table></figure><h2 id="ngx-lua操作Mysql"><a href="#ngx-lua操作Mysql" class="headerlink" title="ngx_lua操作Mysql"></a>ngx_lua操作Mysql</h2><p>MySQL 是一个使用广泛的关系型数据库。在 ngx_lua 中，MySQL 有两种访问模式，分别是是：</p><ul><li>用 <code>ngx_lua</code> 模块和 <code>lua-resty-mysql</code> 模块，这两个模块是安装 OpenResty 时默认安装的。</li><li>使用 <code>drizzle_nginx_module</code>（HttpDrizzleModule）模块，需要单独安装，这个库现不在 OpenResty 中。</li></ul><h3 id="lua-resty-mysql"><a href="#lua-resty-mysql" class="headerlink" title="lua-resty-mysql"></a>lua-resty-mysql</h3><p>这里使用的是 <code>lua-resty-mysql</code> 模块。</p><p><code>lua-resty-mysql</code> 是 OpenResty 开发的模块，使用灵活、功能强大，适合复杂的业务场景，同时支持存储过程的访问。</p><h3 id="MySQL环境准备"><a href="#MySQL环境准备" class="headerlink" title="MySQL环境准备"></a>MySQL环境准备</h3><p>准备 MySQL，确保能正常连接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">host: 192.168.91.200</span><br><span class="line">port: 3306</span><br><span class="line">username: root</span><br><span class="line">password: 12345678</span><br></pre></td></tr></table></figure><h3 id="API学习-1"><a href="#API学习-1" class="headerlink" title="API学习"></a>API学习</h3><ul><li><p><code>mysql = require &quot;resty.mysql&quot;</code></p><p>引入 MySQL 模块，类似于 Java 的 import。</p></li><li><p><code>db,err = mysql:new()</code></p><p>创建一个 MySQL 连接对象给 db，连接对象遇到错误时，db 为nil，err 为错误描述信息。</p></li><li><p><code>ok,err = db:connect(Options)</code></p><p>尝试连接到一个MySQL服务器。Options 是一个参数的 Lua 表结构，里面包含数据库连接的相关信息。</p><p>Options 选项：</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">host：服务器主机名或IP地址</span><br><span class="line">port：服务器监听端口，默认为3306</span><br><span class="line">user：登录的用户名</span><br><span class="line">password：登录密码</span><br><span class="line">database：使用的数据库名</span><br></pre></td></tr></table></figure><ul><li><p><code>db:set_timeout(time)</code></p><p>设置子请求的超时时间，单位毫秒。</p></li><li><p><code>ok,err = db:close()</code></p><p>关闭当前 MySQL 连接并返回状态。</p></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ok：如果成功，则返回 <span class="number">1</span>；如果出现任何错误，则将返回 <span class="literal">nil</span>。</span><br><span class="line">err：如果出现任何错误，返回错误描述。</span><br></pre></td></tr></table></figure><ul><li><p><code>bytes,err=db:send_query(sql)</code></p><p>异步向远程 MySQL 发送一个查询。</p><p>如果成功则返回成功发送的字节数；如果错误，则返回 nil 和错误描述。</p></li><li><p><code>res, err, errcode, sqlstate = db:read_result([rows])</code></p><p>从 MySQL 服务器返回结果中读取一行数据。</p><p><code>rows</code> 指定返回结果集的最大值，默认为 4，可不写。</p></li></ul><p>返回值：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res：操作的结果集，返回一个描述 OK 包或结果集包的 Lua 表</span><br><span class="line">err：错误信息</span><br><span class="line">errcode：MySQL 的错误码，比如 <span class="number">1064</span></span><br><span class="line">sqlstate：返回由 <span class="number">5</span> 个字符组成的标准 SQL 错误码，比如 <span class="number">42000</span></span><br></pre></td></tr></table></figure><p>如果是查询，则返回一个容纳多行的数组。每行是一个数据列的key-value对，如下:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#123;id=1,username="TOM",birthday="1988-11-11",salary=10000.0&#125;,</span><br><span class="line">&#123;id=2,username="JERRY",birthday="1989-11-11",salary=20000.0&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是增删改，则返回类上如下数据</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    insert_id = 0,</span><br><span class="line">    server_status=2,</span><br><span class="line">    warning_count=1,</span><br><span class="line">    affected_rows=2,</span><br><span class="line">    message=nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据库连接四要素:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driverClass=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://192.168.91.200:3306/nginx_db</span><br><span class="line">username=root</span><br><span class="line">password=12345678</span><br></pre></td></tr></table></figure><h3 id="表创建并插入数据"><a href="#表创建并插入数据" class="headerlink" title="表创建并插入数据"></a>表创建并插入数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">users</span>(<span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,<span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">users</span>(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">"TOM"</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">users</span>(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">"JERRY"</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">users</span>(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">"ROWS"</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">users</span>(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">"LUCY"</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">users</span>(<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">"JACK"</span>);</span><br></pre></td></tr></table></figure><h3 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">location /testMysql &#123;</span><br><span class="line">    content_by_lua_block&#123;</span><br><span class="line">        local mysql = require "resty.mysql"</span><br><span class="line">        local db, err = mysql:new()  <span class="comment">-- 创建实例  </span></span><br><span class="line">        if not db then  </span><br><span class="line">            ngx.say("new mysql error : ", err)  </span><br><span class="line">            return  </span><br><span class="line">        <span class="keyword">end</span>  </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">local</span> ok,err = db:<span class="keyword">connect</span>&#123;</span><br><span class="line">            host=<span class="string">"192.168.91.200"</span>,</span><br><span class="line">            port=<span class="number">3306</span>,</span><br><span class="line">            <span class="keyword">user</span>=<span class="string">"root"</span>,</span><br><span class="line">            <span class="keyword">password</span>=<span class="string">"12345678"</span>,</span><br><span class="line">            <span class="keyword">database</span>=<span class="string">"nginx_db"</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        db:set_timeout(<span class="number">1000</span>)<span class="comment">-- 设置超时时间(毫秒)  </span></span><br><span class="line">        <span class="comment">-- 查询语句</span></span><br><span class="line"><span class="keyword">local</span> query_sql = <span class="string">"select * from users"</span></span><br><span class="line">        db:send_query(query_sql)</span><br><span class="line">        <span class="keyword">local</span> res,err,errcode,<span class="keyword">sqlstate</span> = db:read_result()</span><br><span class="line">        </span><br><span class="line">        <span class="comment">-- 返回数据 .. 代表拼接</span></span><br><span class="line">        ngx.say(res[<span class="number">1</span>].id..<span class="string">","</span>..res[<span class="number">1</span>].name)</span><br><span class="line">    db:<span class="keyword">close</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问题</strong></p><p>上面返回的是需要我们指定返回的数据，但是我们根本不知道查询的数据有多少条，长什么样子。</p><ul><li>如何获取返回数据的内容</li><li>如何实现查询多条数据</li><li>如何实现数据库的删改操作</li></ul><h3 id="lua-cjson处理查询结果"><a href="#lua-cjson处理查询结果" class="headerlink" title="lua-cjson处理查询结果"></a>lua-cjson处理查询结果</h3><p>通过上述的案例学习，read_result() 得到的结果 res 都是 table 类型，要想在页面上展示，就必须知道 table 的具体数据结构才能进行遍历获取。处理起来比较麻烦。</p><p>接下来我们使用一种简单方式 cjson，使用它就可以将 table 类型的数据转换成 Json 字符串，把 Json 字符串展示在页面上即可。</p><p>步骤一：引入 cjson 模块</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> cjson = <span class="built_in">require</span> <span class="string">"cjson"</span></span><br></pre></td></tr></table></figure><p>步骤二：调用 cjson 的 encode 方法进行类型转换</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cjson.encode(res)</span><br></pre></td></tr></table></figure><p>步骤三：测试</p><figure class="highlight lua"><figcaption><span>&#123;20-27&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">location /testMysql &#123;</span><br><span class="line">    content_by_lua_block&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">local</span> mysql = <span class="built_in">require</span> <span class="string">"resty.mysql"</span></span><br><span class="line">        <span class="keyword">local</span> cjson = <span class="built_in">require</span> <span class="string">"cjson"</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">local</span> db = mysql:new()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">local</span> ok,err = db:connect&#123;</span><br><span class="line">            host=<span class="string">"192.168.199.27"</span>,</span><br><span class="line">            port=<span class="number">3306</span>,</span><br><span class="line">            user=<span class="string">"root"</span>,</span><br><span class="line">            password=<span class="string">"123456"</span>,</span><br><span class="line">            database=<span class="string">"nginx_db"</span></span><br><span class="line">        &#125;</span><br><span class="line">        db:set_timeout(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">-- db:send_query("select * from users where id = 1")</span></span><br><span class="line">        </span><br><span class="line">        db:send_query(<span class="string">"select * from users"</span>)</span><br><span class="line">        <span class="keyword">local</span> res,err,errcode,sqlstate = db:read_result()</span><br><span class="line">        </span><br><span class="line">        ngx.say(cjson.encode(res))   <span class="comment">-- 转为 JSON 字符串格式</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(res) <span class="keyword">do</span>     <span class="comment">-- 循环来返回数据</span></span><br><span class="line">            ngx.say(<span class="string">"返回的数据："</span>，v.id..<span class="string">","</span>..v.name)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        db:<span class="built_in">close</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据库删改"><a href="#数据库删改" class="headerlink" title="数据库删改"></a>数据库删改</h3><p>优化 <code>send_query</code> 和 <code>read_result</code>，两个可以变成一体。</p><p>本方法是 <code>send_query</code> 和 <code>read_result</code> 组合的快捷方法。</p><p>语法:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res, err, errcode, sqlstate = db:query(sql[,rows])</span><br></pre></td></tr></table></figure><p>有了该 API，上面的代码我们就可以进行对应的优化，如下：</p><figure class="highlight lua"><figcaption><span>&#123;22,24&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">location /testMysql &#123;</span><br><span class="line">    content_by_lua_block&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">local</span> mysql = <span class="built_in">require</span> <span class="string">"resty.mysql"</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">local</span> db = mysql:new()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">local</span> ok,err = db:connect&#123;</span><br><span class="line">            host=<span class="string">"192.168.91.200"</span>,</span><br><span class="line">            port=<span class="number">3306</span>,</span><br><span class="line">            user=<span class="string">"root"</span>,</span><br><span class="line">            password=<span class="string">"12345678"</span>,</span><br><span class="line">            database=<span class="string">"nginx_db"</span>,</span><br><span class="line">            max_packet_size=<span class="number">1024</span>,</span><br><span class="line">            compact_arrays=<span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        db:set_timeout(<span class="number">1000</span>)</span><br><span class="line">        <span class="comment">-- 查询操作</span></span><br><span class="line">        <span class="keyword">local</span> res,err,errcode,sqlstate = db:send_query(<span class="string">"select * from users where id = 1"</span>)</span><br><span class="line">        <span class="comment">-- 修改操作</span></span><br><span class="line">        <span class="keyword">local</span> res,err,errcode,sqlstate = db:query(<span class="string">"update users set name = 'bing' where id = 1"</span>)</span><br><span class="line">        <span class="comment">-- 删除操作</span></span><br><span class="line">        <span class="keyword">local</span> res,err,errcode,sqlstate = db:query(<span class="string">"delete from users where id = 1"</span>)</span><br><span class="line">        <span class="comment">-- 插入操作</span></span><br><span class="line">        <span class="keyword">local</span> insert_sql = <span class="string">"insert into users(id,name) values(null,'kele')"</span></span><br><span class="line">        db:<span class="built_in">close</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 综合小案例</p><p>使用 ngx_lua 模块完成查询 MySQL 数据，然后在 Redis 缓存预热。</p><p>分析:</p><ol><li>先得有一张表（users），上面已经创建</li><li>浏览器输入如下地址</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://191.168.91.200?name=frx</span><br></pre></td></tr></table></figure><ol start="3"><li>从MySQL 表中查询出符合条件的数据，此时获取的结果为 table 类型</li><li>使用 cjson 将 table 数据转换成 json 字符串</li><li>将查询的结果数据存入 Redis 中</li></ol><p>这里利用到 <code>init_by_lua_block</code> 指令，该指令上面介绍过，用于初始化全局变量。这里用于初始化 MySQL、Redis、cjson 模块。</p><p>还是使用了 <code>quote_sql_str</code> 指令，防止「拼」SQL，导致 SQL 注入。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">init_by_lua_block&#123;</span><br><span class="line">    redis = <span class="built_in">require</span> <span class="string">"resty.redis"</span></span><br><span class="line">    mysql = <span class="built_in">require</span> <span class="string">"resty.mysql"</span></span><br><span class="line">    cjson = <span class="built_in">require</span> <span class="string">"cjson"</span></span><br><span class="line">&#125;</span><br><span class="line">location /testMysql &#123;</span><br><span class="line">    default_type <span class="string">"text/html"</span>;</span><br><span class="line">    content_by_lua_block&#123;</span><br><span class="line">        <span class="comment">-- 获取请求的参数 name</span></span><br><span class="line">        <span class="keyword">local</span> param = ngx.req.get_uri_args()[<span class="string">"name"</span>]</span><br><span class="line">        <span class="comment">-- 建立 mysql 数据库的连接</span></span><br><span class="line">        <span class="keyword">local</span> db = mysql:new()</span><br><span class="line">        <span class="keyword">local</span> ok,err = db:connect&#123;</span><br><span class="line">            host=<span class="string">"192.168.91.200"</span>,</span><br><span class="line">            port=<span class="number">3306</span>,</span><br><span class="line">            user=<span class="string">"root"</span>,</span><br><span class="line">            password=<span class="string">"12345678"</span>,</span><br><span class="line">            database=<span class="string">"nginx_db"</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span></span><br><span class="line">            ngx.say(<span class="string">"failed connect to mysql:"</span>,err)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">-- 设置连接超时时间</span></span><br><span class="line">        db:set_timeout(<span class="number">1000</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">-- 查询数据</span></span><br><span class="line">        <span class="keyword">local</span> sql = <span class="string">""</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> param <span class="keyword">then</span></span><br><span class="line">            sql=<span class="string">"select * from users"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            sql=<span class="string">"select * from users where name="</span> .. <span class="string">"'"</span> .. param ..<span class="string">"'"</span> <span class="comment">-- sql 注入 ，不建议</span></span><br><span class="line">            sql=<span class="string">"select * from users where name="</span> .. ngx.quote_sql_str(ch_param) <span class="comment">-- 防止 sql 注入</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">local</span> res,err,errcode,sqlstate=db:query(sql)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> res <span class="keyword">then</span></span><br><span class="line">            ngx.say(<span class="string">"failed to query from mysql:"</span>,err)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">-- 连接redis</span></span><br><span class="line">        <span class="keyword">local</span> rd = redis:new()</span><br><span class="line">        ok,err = rd:connect(<span class="string">"192.168.91.200"</span>,<span class="number">6379</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ok <span class="keyword">then</span></span><br><span class="line">            ngx.say(<span class="string">"failed to connect to redis:"</span>,err)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        rd:set_timeout(<span class="number">1000</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">-- 循环遍历数据</span></span><br><span class="line">        <span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(res) <span class="keyword">do</span></span><br><span class="line">            rd:set(<span class="string">"user_"</span>..v.username,cjson.encode(v))</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        ngx.say(<span class="string">"success"</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">-- 关闭 MySQL 和 Rdis 的连接</span></span><br><span class="line">        rd:<span class="built_in">close</span>()</span><br><span class="line">        db:<span class="built_in">close</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Nginx </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx Lua学习</title>
      <link href="/2022/11/16/Nginx_Lua_learn/"/>
      <url>/2022/11/16/Nginx_Lua_learn/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="Nginx-Lua学习"><a href="#Nginx-Lua学习" class="headerlink" title="Nginx Lua学习"></a>Nginx Lua学习</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Nginx 是可扩展的，可用于处理各种使用场景。本内容中，我们一起学习使用 Lua 扩展 Nginx 的功能。</p><p>Lua 是一种轻量、小巧的脚本语言，用标准 C 语言编写并以源代码形式开发。设计的目的是为了嵌入到其他应用程序中，从而为应用程序提供灵活的扩展和定制功能。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>跟其他语言进行比较，Lua 有其自身的特点：</p><ul><li><p>轻量级</p><p>Lua 用标准 C 语言编写并以源代码形式开发，编译后仅仅一百余千字节，可以很方便的嵌入到其他程序中。</p></li><li><p>可扩展</p><p>Lua 提供非常丰富易于使用的扩展接口和机制，由宿主语言（通常是 C 或 C++）提供功能，Lua 可以使用它们，就像内置的功能一样。</p></li><li><p>支持面向过程编程和函数式编程</p></li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>Lua 在不同的系统中得到大量应用，场景的应用场景如下:</p><p>游戏开发、独立应用脚本、Web 应用脚本、扩展和数据库插件、系统安全上。</p><h2 id="Lua的安装"><a href="#Lua的安装" class="headerlink" title="Lua的安装"></a>Lua的安装</h2><p>在 Linux 上安装 Lua 非常简单，只需要下载源码包并在终端解压、编译即可使用。</p><p>Lua 的官网地址为：<a href="https://www.lua.org/" target="_blank" rel="noopener">https://www.lua.org</a></p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.4tduh26e2b20.webp" alt="image"></p><p>点击 download 可以找到对应版本的下载地址，我这里使用最新版 lua-5.4.4，其对应的资源链接地址为 <code>https://www.lua.org/ftp/lua-5.4.4.tar.gz</code>，也可以在 Linux 使用 wget 命令直接下载</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.lua.org/ftp/lua-5.4.4.tar.gz</span><br></pre></td></tr></table></figure><ul><li>我这里下载在 <code>/opt/lua</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/lua</span><br><span class="line"><span class="built_in">cd</span> /opt/lua</span><br><span class="line">wget https://www.lua.org/ftp/lua-5.4.4.tar.gz</span><br></pre></td></tr></table></figure><ul><li>解压</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf lua-5.4.4.tar.gz</span><br></pre></td></tr></table></figure><ul><li>检测是否满足 Lua 需要的环境</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/lua/lua-5.4.4</span><br><span class="line">make linux <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>如果在执行 <code>make linux test</code> 失败，报如下错误(如果没有,则编译安装):</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.3h3rcto261s0.webp" alt="image"></p><p>说明当前系统缺少 libreadline-dev 依赖包，需要通过命令来进行安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y readline-devel</span><br></pre></td></tr></table></figure><ul><li>编译安装</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><ul><li>验证是否安装成功</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master lua-5.4.4]<span class="comment"># lua -v</span></span><br><span class="line">Lua 5.4.4  Copyright (C) 1994-2022 Lua.org, PUC-Rio</span><br></pre></td></tr></table></figure><h2 id="第一个Lua程序"><a href="#第一个Lua程序" class="headerlink" title="第一个Lua程序"></a>第一个Lua程序</h2><p>Lua 和 C/C++ 语法非常相似，整体上比较清晰，简洁。条件语句、循环语句、函数调用都与 C/C++ 基本一致。如果对 C/C++ 不太熟悉，也没关系，因为天下语言是一家，基本上理解起来都不会太困难。下面一点一点进行讲解。</p><p>大家需要知道的是，Lua 有两种交互方式，分别是：交互式和脚本式，这两者的区别，下面我们分别来讲解下：</p><h3 id="交互式"><a href="#交互式" class="headerlink" title="交互式"></a>交互式</h3><p>交互式是指可以在命令行输入程序，然后回车就可以看到运行的效果。</p><p>Lua 交互式编程模式可以通过命令 <code>lua -i</code> 或 <code>lua</code> 来启用：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lua -i</span><br><span class="line">// 或者</span><br><span class="line">lua</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master lua<span class="number">-5.4</span><span class="number">.4</span>]# lua</span><br><span class="line">Lua <span class="number">5.4</span><span class="number">.4</span>  Copyright (C) <span class="number">1994</span><span class="number">-2022</span> Lua.org, PUC-Rio</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>在命令行中输入如下命令，并按回车，会有输出在控制台：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Hello world"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">print</span>(<span class="string">"HelloWorld"</span>)</span><br><span class="line">HelloWorld</span><br></pre></td></tr></table></figure><p>CTRL + C 交互式终端。</p><h3 id="脚本式"><a href="#脚本式" class="headerlink" title="脚本式"></a>脚本式</h3><p>脚本式是将代码保存到一个以 lua 为扩展名的文件中并执行的方式。</p><p>方式一：</p><p>我们需要一个文件名为 hello.lua，在文件中添加要执行的代码，然后通过命令 <code>lua hello.lua</code> 来执行，会在控制台输出对应的结果。</p><p>创建 hello.lua 文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir lua_demo</span><br><span class="line"><span class="built_in">cd</span> lua_demo</span><br><span class="line">vim hello.lua</span><br></pre></td></tr></table></figure><p>hello.lua 文件内容</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"HelloWorld"</span>)</span><br></pre></td></tr></table></figure><p>执行 hello.lua 文件：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lua hello.lua</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master lua_demo]<span class="comment"># lua hello.lua</span></span><br><span class="line">HelloWorld</span><br></pre></td></tr></table></figure><p><strong>不想每次都是用 lua hello.lua 来执行该文件，可不可以直接执行 hello.lua 文件？</strong></p><p>方式二：</p><p>将 hello.lua 做如下修改</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/<span class="keyword">local</span>/bin/lua</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Hello World!!!"</span>)</span><br></pre></td></tr></table></figure><p>第一行用来指定 Lua 解释器命令所在位置为 <code>/usr/local/bin/lua</code>，加上 # 号标记，解释器会忽略它。一般情况下 #! 就是用来指定用哪个程序来运行本文件。</p><p>但是 hello.lua 并不是一个可执行文件，需要通过 chmod 来设置可执行权限，最简单的方式为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 hello.lua</span><br></pre></td></tr></table></figure><p>然后执行该文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hello.lua</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master lua_demo]<span class="comment"># ./hello.lua</span></span><br><span class="line">Hello World!!!</span><br></pre></td></tr></table></figure><p>补充一点，如果想在交互式中运行脚本式的 hello.lua 中的内容，我们可以使用一个 dofile 函数，如：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dofile</span>(<span class="string">"lua_demo/hello.lua"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master lua_demo]# lua</span><br><span class="line">Lua <span class="number">5.4</span><span class="number">.4</span>  Copyright (C) <span class="number">1994</span><span class="number">-2022</span> Lua.org, PUC-Rio</span><br><span class="line">&gt; <span class="built_in">dofile</span>(<span class="string">"hello.lua"</span>)</span><br><span class="line">Hello World!!!</span><br></pre></td></tr></table></figure><p>::: warning</p><p>在 Lua 语言中，连续语句之间的分隔符并不是必须的，也就是说后面不需要加分号，当然加上也不会报错。</p><p>:::</p><p>在 Lua 语言中，表达式之间的换行也起不到任何作用。如以下四个写法，其实都是等效的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写法一：换行，不加分号</span></span><br><span class="line">a=1</span><br><span class="line">b=a+2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写法二：换行，加分号</span></span><br><span class="line">a=1;</span><br><span class="line">b=a+2;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写法三：不换行，加分号</span></span><br><span class="line">a=1; b=a+2;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写法四：不换行，不加分号</span></span><br><span class="line">a=1 b=a+2</span><br></pre></td></tr></table></figure><p>不建议使用第四种方式，可读性太差。</p><h2 id="Lua的注释"><a href="#Lua的注释" class="headerlink" title="Lua的注释"></a>Lua的注释</h2><p>关于 Lua 文件的注释要分两种，第一种是单行注释，第二种是多行注释。</p><p>单行注释的语法为：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 注释内容</span></span><br></pre></td></tr></table></figure><p>多行注释的语法为:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">注释内容</span></span><br><span class="line"><span class="comment">注释内容</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/<span class="keyword">local</span>/bin/lua</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Hello World!!!"</span>)</span><br><span class="line"><span class="comment">-- print("HelloWorld")</span></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">print("HelloWorld2")</span></span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></table></figure><p>如果想取消多行注释，只需要在第一个–之前在加一个-即可，如：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---[[</span></span><br><span class="line">注释内容</span><br><span class="line">注释内容</span><br><span class="line"><span class="comment">--]]</span></span><br></pre></td></tr></table></figure><h2 id="Lua标识符"><a href="#Lua标识符" class="headerlink" title="Lua标识符"></a>Lua标识符</h2><p>换句话说标识符就是我们的变量名，Lua 定义变量名以一个字母 A 到 Z 或 a 到 z 或下划线 _ 开头后加上 0 个或多个字母，下划线，数字（0 到 9）。这块建议大家最好不要使用下划线加大写字母的标识符，如 _VERSION，因为 Lua 的保留字也是这样定义的，容易发生冲突。注意 Lua 是区分大小写字母的。</p><h2 id="Lua关键字"><a href="#Lua关键字" class="headerlink" title="Lua关键字"></a>Lua关键字</h2><p>下列是 Lua 的关键字，大家在定义常量、变量或其他用户自定义标识符都要避免使用以下这些关键字：</p><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>and</td><td>break</td><td>do</td><td>else</td></tr><tr><td>elseif</td><td>end</td><td>false</td><td>for</td></tr><tr><td>function</td><td>if</td><td>in</td><td>local</td></tr><tr><td>nil</td><td>not</td><td>or</td><td>repeat</td></tr><tr><td>return</td><td>then</td><td>true</td><td>until</td></tr><tr><td>while</td><td>goto</td><td></td><td></td></tr></tbody></table><p>一般约定，以下划线开头连接一串大写字母的名字（比如 _VERSION）被保留用于 Lua 内部全局变量。这个也是上面我们不建议这么定义标识符的原因。</p><h2 id="Lua运算符"><a href="#Lua运算符" class="headerlink" title="Lua运算符"></a>Lua运算符</h2><p>Lua中支持的运算符有算术运算符、关系运算符、逻辑运算符、其他运算符。</p><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><table><thead><tr><th>符号</th><th>作用</th><th>例子</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td>10 + 20 –&gt; 30</td></tr><tr><td>-</td><td>减法</td><td>20 - 10 –&gt; 10</td></tr><tr><td>*</td><td>乘法</td><td>10 * 20 –&gt; 200</td></tr><tr><td>/</td><td>除法</td><td>20 / 10 –&gt; 2</td></tr><tr><td>%</td><td>取余</td><td>3 % 2 –&gt; 1</td></tr><tr><td>^</td><td>乘幂</td><td>10 ^ 2 –&gt; 100</td></tr><tr><td>-</td><td>符号</td><td>-10 –&gt; -10</td></tr></tbody></table><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><table><thead><tr><th>符号</th><th>作用</th><th>例子</th></tr></thead><tbody><tr><td>==</td><td>等于</td><td>10 == 10 –&gt; true</td></tr><tr><td>~=</td><td>不等于</td><td>10 ~= 10 –&gt; false</td></tr><tr><td>&gt;</td><td>大于</td><td>20 &gt; 10 –&gt; true</td></tr><tr><td>&lt;</td><td>小于</td><td>20 &lt; 10 –&gt; false</td></tr><tr><td>&gt;=</td><td>大于等于</td><td>20 &gt;= 10 –&gt; true</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>20 &lt;= 10 –&gt; false</td></tr></tbody></table><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table><thead><tr><th>符号</th><th>作用</th><th>例子</th></tr></thead><tbody><tr><td>and</td><td>逻辑与</td><td>A and B（等价于 Java 的 a &amp;&amp; b）</td></tr><tr><td>or</td><td>逻辑或</td><td>A or B（等价于 Java 的 a || b）</td></tr><tr><td>not</td><td>逻辑非</td><td>not A（取反，如果 A 为 true，则返回 false）</td></tr></tbody></table><p>逻辑运算符可以作为 if 的判断条件，返回的结果如下:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">A = <span class="literal">true</span></span><br><span class="line">B = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">A <span class="keyword">and</span> B    <span class="comment">--&gt; true</span></span><br><span class="line">A <span class="keyword">or</span>  B     <span class="comment">--&gt; true</span></span><br><span class="line"><span class="keyword">not</span> A     <span class="comment">--&gt; false</span></span><br><span class="line"></span><br><span class="line">A = <span class="literal">true</span></span><br><span class="line">B = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">A <span class="keyword">and</span> B   <span class="comment">--&gt; false</span></span><br><span class="line">A <span class="keyword">or</span>  B    <span class="comment">--&gt; true</span></span><br><span class="line"><span class="keyword">not</span> A    <span class="comment">--&gt; false</span></span><br><span class="line"></span><br><span class="line">A = <span class="literal">false</span></span><br><span class="line">B = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">A <span class="keyword">and</span> B   <span class="comment">--&gt; false</span></span><br><span class="line">A <span class="keyword">or</span>  B    <span class="comment">--&gt; true</span></span><br><span class="line"><span class="keyword">not</span> A    <span class="comment">--&gt; true</span></span><br></pre></td></tr></table></figure><h3 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h3><table><thead><tr><th>符号</th><th>作用</th><th>例子</th></tr></thead><tbody><tr><td>..</td><td>连接两个字符串</td><td>“HELLO “..”WORLD” –&gt; HELLO WORLD</td></tr><tr><td>#</td><td>一元预算法，返回字符串或表的长度</td><td>#”HELLO” –&gt; 5</td></tr></tbody></table><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master lua_demo]# lua</span><br><span class="line">Lua <span class="number">5.4</span><span class="number">.4</span>  Copyright (C) <span class="number">1994</span><span class="number">-2022</span> Lua.org, PUC-Rio</span><br><span class="line">&gt; <span class="string">"Hello"</span>..<span class="string">"World"</span></span><br><span class="line">HelloWorld</span><br><span class="line">&gt; #<span class="string">"HelloWorld"</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="Lua全局变量-amp-局部变量"><a href="#Lua全局变量-amp-局部变量" class="headerlink" title="Lua全局变量&amp;局部变量"></a>Lua全局变量&amp;局部变量</h2><p>在 Lua 语言中，全局变量无须声明即可使用。在默认情况下，变量总是认为是全局的，如果未提前赋值，默认为 nil:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master lua_demo]# lua</span><br><span class="line">Lua <span class="number">5.4</span><span class="number">.4</span>  Copyright (C) <span class="number">1994</span><span class="number">-2022</span> Lua.org, PUC-Rio</span><br><span class="line">&gt; <span class="built_in">print</span>(b)</span><br><span class="line"><span class="literal">nil</span></span><br><span class="line">&gt; b=<span class="number">100</span></span><br><span class="line">&gt; <span class="built_in">print</span>(b)</span><br><span class="line"><span class="number">100</span></span><br><span class="line">&gt; b=<span class="literal">nil</span></span><br><span class="line">&gt; <span class="built_in">print</span>(b)</span><br><span class="line"><span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>要想声明一个局部变量，需要使用 local 来声明</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@master lua_demo]# lua</span><br><span class="line">Lua <span class="number">5.4</span><span class="number">.4</span>  Copyright (C) <span class="number">1994</span><span class="number">-2022</span> Lua.org, PUC-Rio</span><br><span class="line">&gt; <span class="keyword">local</span> a=<span class="number">100</span></span><br><span class="line">&gt; <span class="built_in">print</span>(a)</span><br><span class="line"><span class="literal">nil</span></span><br><span class="line">&gt; <span class="keyword">local</span> a=<span class="number">100</span> <span class="built_in">print</span>(a)</span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><p>如上所示，终端交互式的 local 声明的变量在同一行使用，换行了则离开了该变量的作用域。如果使用了 function 之类的结构或者在文件里使用 local，则可以换行，具体往下看。</p><h2 id="Lua数据类型"><a href="#Lua数据类型" class="headerlink" title="Lua数据类型"></a>Lua数据类型</h2><p>Lua 有 8 个数据类型</p><table><thead><tr><th>数据类型名</th><th>作用</th></tr></thead><tbody><tr><td>nil</td><td>空，无效值</td></tr><tr><td>boolean</td><td>布尔，true | false</td></tr><tr><td>number</td><td>数值</td></tr><tr><td>string</td><td>字符串</td></tr><tr><td>function</td><td>函数</td></tr><tr><td>table</td><td>表</td></tr><tr><td>thread</td><td>线程</td></tr><tr><td>userdata</td><td>用户数据</td></tr></tbody></table><p>可以使用 type 函数测试给定变量或者的类型：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="literal">nil</span>))<span class="comment">--&gt; nil</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="literal">true</span>))               <span class="comment">--&gt; boolean</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="number">1.1</span>*<span class="number">1.1</span>))            <span class="comment">--&gt; number</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">"Hello world"</span>))      <span class="comment">--&gt; string</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">io</span>.<span class="built_in">stdin</span>))<span class="comment">--&gt; userdata</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">print</span>))              <span class="comment">--&gt; function</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">type</span>))               <span class="comment">--&gt; function</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>&#123;&#125;)<span class="comment">--&gt; table</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">type</span>(X)))            <span class="comment">--&gt; string</span></span><br></pre></td></tr></table></figure><h3 id="nil"><a href="#nil" class="headerlink" title="nil"></a>nil</h3><p>nil 是一种只有一个 nil 值的类型，它的作用可以用来与其他所有值进行区分。当想要移除一个变量时，只需要将该变量名赋值为 nil，垃圾回收就会会释放该变量所占用的内存。</p><h3 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h3><p>boolean 类型具有两个值，true 和 false。boolean 类型一般被用来做条件判断的真与假。在 Lua 语言中，只会将 false 和 nil 视为假，其他的都视为真，<strong>特别是在条件检测中 0 和空字符串都会认为是真</strong>，这个和我们熟悉的大多数语言不太一样。</p><h3 id="number"><a href="#number" class="headerlink" title="number"></a>number</h3><p>在 Lua5.3 版本开始，Lua 语言为数值格式提供了两种选择 integer（整型）和 float（双精度浮点型），和其他语言不太一样，float 不代表单精度类型。</p><p>数值常量的表示方式：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span><span class="comment">--&gt; 4</span></span><br><span class="line"><span class="number">0.4</span><span class="comment">--&gt; 0.4</span></span><br><span class="line"><span class="number">4.75e-3</span><span class="comment">--&gt; 0.00475</span></span><br><span class="line"><span class="number">4.75e3</span><span class="comment">--&gt; 4750.0</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master lua_demo]# lua</span><br><span class="line">Lua <span class="number">5.4</span><span class="number">.4</span>  Copyright (C) <span class="number">1994</span><span class="number">-2022</span> Lua.org, PUC-Rio</span><br><span class="line">&gt; <span class="number">4</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">&gt; <span class="number">0.4</span></span><br><span class="line"><span class="number">0.4</span></span><br><span class="line">&gt; <span class="number">4.75e-3</span></span><br><span class="line"><span class="number">0.00475</span></span><br><span class="line">&gt; <span class="number">4.75e3</span></span><br><span class="line"><span class="number">4750.0</span></span><br></pre></td></tr></table></figure><p>不管是整型还是双精度浮点型，使用 type() 函数来取其类型，都会返回的是 number</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>(<span class="number">3</span>)<span class="comment">--&gt; number</span></span><br><span class="line"><span class="built_in">type</span>(<span class="number">3.3</span>)<span class="comment">--&gt; number</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master lua_demo]# lua</span><br><span class="line">Lua <span class="number">5.4</span><span class="number">.4</span>  Copyright (C) <span class="number">1994</span><span class="number">-2022</span> Lua.org, PUC-Rio</span><br><span class="line">&gt; <span class="built_in">type</span>(<span class="number">3</span>)</span><br><span class="line">number</span><br><span class="line">&gt; <span class="built_in">type</span>(<span class="number">3.3</span>)</span><br><span class="line">number</span><br></pre></td></tr></table></figure><p>所以它们之间是可以相互转换的，同时，具有相同算术值的整型值和浮点型值在 Lua 语言中是相等的</p><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>Lua 语言中的字符串即可以表示单个字符，也可以表示一整本书籍。在 Lua 语言中，操作 100K 或者 1M 个字母组成的字符串的程序很常见。</p><p>可以使用单引号或双引号来声明字符串</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"hello"</span></span><br><span class="line">b = <span class="string">'world'</span></span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">--&gt; hello</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment">--&gt; world</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master lua_demo]# lua</span><br><span class="line">Lua <span class="number">5.4</span><span class="number">.4</span>  Copyright (C) <span class="number">1994</span><span class="number">-2022</span> Lua.org, PUC-Rio</span><br><span class="line">&gt; a = <span class="string">"Hello"</span></span><br><span class="line">&gt; b = <span class="string">"World"</span></span><br><span class="line">&gt; <span class="built_in">print</span>(a)</span><br><span class="line">Hello</span><br><span class="line">&gt; <span class="built_in">print</span>(b)</span><br><span class="line">World</span><br></pre></td></tr></table></figure><p>如果声明的字符串比较长或者有多行，则可以使用如下方式进行声明</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">html = <span class="string">[[</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt;Lua-string&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;a href="http://www.lua.org"&gt;Lua&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">]]</span></span><br></pre></td></tr></table></figure><h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><p>table 是 Lua 语言中最主要和强大的数据结构。使用 table 表时，Lua 语言可以以一种简单、统一且高效的方式表示数组、集合、记录和其他很多数据结构。Lua 语言中的表本质上是一种辅助数组。这种数组比 Java 中的数组更加灵活，可以使用数值做索引，也可以使用字符串或其他任意类型的值作索引（除 nil 外）。</p><p>创建表的最简单方式：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>创建数组方式一</strong></p><p>我们都知道数组就是相同数据类型的元素按照一定顺序排列的集合，那么使用 table 如何创建一个数组呢？</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr = &#123;<span class="string">"TOM"</span>,<span class="string">"JERRY"</span>,<span class="string">"ROSE"</span>&#125;</span><br></pre></td></tr></table></figure><p>要想获取数组中的值，我们可以通过如下内容来获取：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(arr[<span class="number">0</span>])<span class="comment">-- nil</span></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">1</span>])<span class="comment">-- TOM</span></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">2</span>])<span class="comment">-- JERRY</span></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">3</span>])<span class="comment">-- ROSE</span></span><br></pre></td></tr></table></figure><p>从上面的结果可以看出来，<strong>数组的下标默认是从 1 开始的</strong>。</p><p><strong>创建数组方式二</strong></p><p>上述创建数组，也可以通过如下方式来创建：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr = &#123;&#125;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"TOM"</span></span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"JERRY"</span></span><br><span class="line">arr[<span class="number">3</span>] = <span class="string">"ROSE"</span></span><br></pre></td></tr></table></figure><p><strong>创建数组方式三</strong></p><p>表的索引即可以是数字，也可以是字符串等其他的内容，所以也可以将索引更改为字符串来创建：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr = &#123;&#125;</span><br><span class="line">arr[<span class="string">"X"</span>] = <span class="number">10</span></span><br><span class="line">arr[<span class="string">"Y"</span>] = <span class="number">20</span></span><br><span class="line">arr[<span class="string">"Z"</span>] = <span class="number">30</span></span><br></pre></td></tr></table></figure><p>当然，如果想要获取这些数组中的值，可以使用下面的方式</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 方式一</span></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="string">"X"</span>])</span><br><span class="line"><span class="built_in">print</span>(arr[<span class="string">"Y"</span>])</span><br><span class="line"><span class="built_in">print</span>(arr[<span class="string">"Z"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式二</span></span><br><span class="line"><span class="built_in">print</span>(arr.X)</span><br><span class="line"><span class="built_in">print</span>(arr.Y)</span><br><span class="line"><span class="built_in">print</span>(arr.Z)</span><br></pre></td></tr></table></figure><p><strong>创建数组方式四</strong></p><p>当前 table 的灵活不仅于此，还有更灵活的声明方式：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr = &#123;<span class="string">"TOM"</span>,X=<span class="number">10</span>,<span class="string">"JERRY"</span>,Y=<span class="number">20</span>,<span class="string">"ROSE"</span>,Z=<span class="number">30</span>&#125;</span><br></pre></td></tr></table></figure><p>如何获取上面的值？</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">1</span>]       <span class="comment">-- TOM</span></span><br><span class="line">arr[<span class="string">"X"</span>] <span class="comment">-- 10</span></span><br><span class="line">arr.X    <span class="comment">-- 10</span></span><br><span class="line">arr[<span class="number">2</span>] <span class="comment">-- JERRY</span></span><br><span class="line">arr[<span class="string">"Y"</span>] <span class="comment">-- 20</span></span><br><span class="line">arr.Y <span class="comment">--20</span></span><br><span class="line">arr[<span class="number">3</span>] <span class="comment">-- ROSE</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@master lua_demo]# lua</span><br><span class="line">Lua <span class="number">5.4</span><span class="number">.4</span>  Copyright (C) <span class="number">1994</span><span class="number">-2022</span> Lua.org, PUC-Rio</span><br><span class="line">&gt; arr = &#123;<span class="string">"TOM"</span>,X=<span class="number">10</span>,<span class="string">"JERRY"</span>,Y=<span class="number">20</span>,<span class="string">"ROSE"</span>,Z=<span class="number">30</span>&#125;</span><br><span class="line">&gt; arr[<span class="number">0</span>]</span><br><span class="line"><span class="literal">nil</span></span><br><span class="line">&gt; arr[<span class="number">1</span>]</span><br><span class="line">TOM</span><br><span class="line">&gt; arr[<span class="number">2</span>]</span><br><span class="line">JERRY</span><br><span class="line">&gt; arr[<span class="number">3</span>]</span><br><span class="line">ROSE</span><br><span class="line">&gt; arr[<span class="string">"X"</span>]</span><br><span class="line"><span class="number">10</span></span><br><span class="line">&gt; arr[<span class="string">"Y"</span>]</span><br><span class="line"><span class="number">20</span></span><br><span class="line">&gt; arr[<span class="string">"Z"</span>]</span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure><h3 id="function"><a href="#function" class="headerlink" title="function"></a>function</h3><p>在 Lua 语言中，函数（Function）是对语句和表达式进行抽象的主要方式。</p><p>定义函数的语法为：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionName</span><span class="params">(params)</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>函数被调用的时候，传入的参数个数与定义函数时使用的参数个数不一致的时候，Lua 语言会通过抛弃多余参数和将不足的参数设为 nil 的方式来调整参数的个数。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">f</span><span class="params">(a,b)</span></span></span><br><span class="line">    <span class="built_in">print</span>(a,b)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用函数</span></span><br><span class="line">f()<span class="comment">--&gt; nil  nil</span></span><br><span class="line">f(<span class="number">2</span>)<span class="comment">--&gt; 2 nil</span></span><br><span class="line">f(<span class="number">2</span>,<span class="number">6</span>)<span class="comment">--&gt; 2 6</span></span><br><span class="line">f(<span class="number">2.6</span><span class="number">.8</span>)<span class="comment">--&gt; 2 6 (8 被丢弃)</span></span><br></pre></td></tr></table></figure><p>可变长参数函数</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(...)</span></span></span><br><span class="line">    a,b,c=...    <span class="comment">-- 按顺序令 a,b,c 等于多个参数的前三个</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用函数</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)  <span class="comment">--&gt; 1 2 3</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@master lua_demo]# lua</span><br><span class="line">Lua <span class="number">5.4</span><span class="number">.4</span>  Copyright (C) <span class="number">1994</span><span class="number">-2022</span> Lua.org, PUC-Rio</span><br><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">(a,b)</span></span></span><br><span class="line">&gt;&gt; <span class="keyword">return</span> a,b</span><br><span class="line">&gt;&gt; <span class="keyword">end</span></span><br><span class="line">&gt; x,y = f(<span class="number">11</span>,<span class="number">12</span>)</span><br><span class="line">&gt; <span class="built_in">print</span>(x,y)</span><br><span class="line"><span class="number">11</span>      <span class="number">12</span></span><br><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(...)</span></span></span><br><span class="line">&gt;&gt; a,b,c=...</span><br><span class="line">&gt;&gt; <span class="built_in">print</span>(a)</span><br><span class="line">&gt;&gt; <span class="built_in">print</span>(b)</span><br><span class="line">&gt;&gt; <span class="built_in">print</span>(c)</span><br><span class="line">&gt;&gt; <span class="keyword">end</span></span><br><span class="line">&gt; add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>函数返回值可以有多个，这点和 Java 不太一样</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">(a,b)</span></span></span><br><span class="line">    <span class="keyword">return</span> a,b</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用函数</span></span><br><span class="line">x,y = f(<span class="number">11</span>,<span class="number">22</span>)<span class="comment">--&gt; x=11,y=22</span></span><br></pre></td></tr></table></figure><h3 id="thread"><a href="#thread" class="headerlink" title="thread"></a>thread</h3><p>thread 翻译过来是线程的意思，在 Lua 中，thread 用来表示执行的独立线路，用来执行协同程序。</p><h3 id="userdata"><a href="#userdata" class="headerlink" title="userdata"></a>userdata</h3><p>userdata 是一种用户自定义数据，用于表示一种由应用程序或 C/C++ 语言库所创建的类型。</p><h2 id="Lua控制结构"><a href="#Lua控制结构" class="headerlink" title="Lua控制结构"></a>Lua控制结构</h2><p>Lua 语言提供了一组精简且常用的控制结构，包括用于条件执行的证 以及用于循环的 while、repeat 和 for。所有的控制结构语法上都有一个显式的终结符：end 用于终结 if、for 及 while 结构，until 用于终结 repeat 结构。</p><h3 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h3><p>if 语句先测试其条件，并根据条件是否满足执行相应的 then 部分或 else 部分。else 部分是可选的。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testif</span><span class="params">(a)</span></span></span><br><span class="line">    <span class="keyword">if</span> a &gt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"a是正数"</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testif</span><span class="params">(a)</span></span></span><br><span class="line">    <span class="keyword">if</span> a &gt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"a是正数"</span>)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"a是负数"</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>如果要编写嵌套的 if 语句，可以使用 elseif。 它类似于在 else 后面紧跟一个if。根据传入的年龄返回不同的结果，如</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(age)</span></span></span><br><span class="line">    <span class="keyword">if</span> age&lt;=<span class="number">18</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"青少年"</span></span><br><span class="line">    <span class="keyword">elseif</span> age&gt;<span class="number">18</span> <span class="keyword">and</span> age&lt;=<span class="number">45</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"青年"</span></span><br><span class="line">    <span class="keyword">elseif</span> age&gt;<span class="number">45</span> <span class="keyword">and</span> age&lt;=<span class="number">60</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"中年人"</span></span><br><span class="line">    <span class="keyword">elseif</span> age&gt;<span class="number">60</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"老年人"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">(age)</span></span></span><br><span class="line">&gt;&gt;      <span class="keyword">if</span> age&lt;=<span class="number">18</span> <span class="keyword">then</span></span><br><span class="line">&gt;&gt;              <span class="keyword">return</span> <span class="string">"青少年"</span></span><br><span class="line">&gt;&gt;      <span class="keyword">elseif</span> age&gt;<span class="number">18</span> <span class="keyword">and</span> age&lt;=<span class="number">45</span> <span class="keyword">then</span></span><br><span class="line">&gt;&gt;              <span class="keyword">return</span> <span class="string">"青年"</span></span><br><span class="line">&gt;&gt;      <span class="keyword">elseif</span> age&gt;<span class="number">45</span> <span class="keyword">and</span> age&lt;=<span class="number">60</span> <span class="keyword">then</span></span><br><span class="line">&gt;&gt;              <span class="keyword">return</span> <span class="string">"中年人"</span></span><br><span class="line">&gt;&gt;      <span class="keyword">elseif</span> age&gt;<span class="number">60</span> <span class="keyword">then</span></span><br><span class="line">&gt;&gt;              <span class="keyword">return</span> <span class="string">"老年人"</span></span><br><span class="line">&gt;&gt;      <span class="keyword">end</span></span><br><span class="line">&gt;&gt; <span class="keyword">end</span></span><br><span class="line">&gt; show(<span class="number">59</span>)</span><br><span class="line">中年人</span><br></pre></td></tr></table></figure><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>顾名思义，当条件为真时 while 循环会重复执行其循环体。Lua 语言先测试 while 语句的条件，若条件为假则循环结束；否则，Lua 会执行循环体并不断地重复这个过程。</p><p>语法：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件 <span class="keyword">do</span></span><br><span class="line">循环体</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>例子：实现数组的循环</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testWhile</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= <span class="number">10</span> <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">testwhile</span><span class="params">()</span></span></span><br><span class="line">&gt;&gt;      <span class="keyword">local</span> i=<span class="number">1</span></span><br><span class="line">&gt;&gt;      <span class="keyword">while</span> i&lt;=<span class="number">10</span> <span class="keyword">do</span></span><br><span class="line">&gt;&gt;              <span class="built_in">print</span>(i)</span><br><span class="line">&gt;&gt;              i=i+<span class="number">1</span></span><br><span class="line">&gt;&gt;      <span class="keyword">end</span></span><br><span class="line">&gt;&gt; <span class="keyword">end</span></span><br><span class="line">&gt; testwhile()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="repeat循环"><a href="#repeat循环" class="headerlink" title="repeat循环"></a>repeat循环</h3><p>顾名思义， repeat-until 语句会重复执行其循环体直到条件为真时结束。由于条件测试在循环体之后执行，所以循环体至少会执行一次。</p><p>语法：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">repeat</span></span><br><span class="line">循环体</span><br><span class="line"><span class="keyword">until</span> 条件</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testRepeat</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> i = <span class="number">10</span></span><br><span class="line">    <span class="keyword">repeat</span></span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        i = i - <span class="number">1</span></span><br><span class="line">    <span class="keyword">until</span> i &lt; <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">testRepeat</span><span class="params">()</span></span></span><br><span class="line">&gt;&gt;      <span class="keyword">local</span> i=<span class="number">10</span></span><br><span class="line">&gt;&gt;      <span class="keyword">repeat</span></span><br><span class="line">&gt;&gt;              <span class="built_in">print</span>(i)</span><br><span class="line">&gt;&gt;              i=i<span class="number">-1</span></span><br><span class="line">&gt;&gt;      <span class="keyword">until</span> i&lt;<span class="number">1</span></span><br><span class="line">&gt;&gt; <span class="keyword">end</span></span><br><span class="line">&gt; testRepeat(<span class="number">10</span>)</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p><strong>数值型 for 循环</strong></p><p>语法:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> param = exp1,exp2,exp3 <span class="keyword">do</span></span><br><span class="line">循环体</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>param 的值从 exp1 变化到 exp2 之前的每次循环会执行循环体，并在每次循环结束后将步长（step）exp3 赋值给到 param 上。exp3 可选，如果不设置默认为 1。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>,<span class="number">100</span>,<span class="number">10</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">for</span> i=<span class="number">1</span>,<span class="number">100</span>,<span class="number">10</span> <span class="keyword">do</span></span><br><span class="line">&gt;&gt;      <span class="built_in">print</span>(i)</span><br><span class="line">&gt;&gt; <span class="keyword">end</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="number">31</span></span><br><span class="line"><span class="number">41</span></span><br><span class="line"><span class="number">51</span></span><br><span class="line"><span class="number">61</span></span><br><span class="line"><span class="number">71</span></span><br><span class="line"><span class="number">81</span></span><br><span class="line"><span class="number">91</span></span><br></pre></td></tr></table></figure><p><strong>泛型 for 循环</strong></p><p>泛型 for 循环通过一个迭代器函数来遍历所有值，类似于 Java 中的 foreach 语句。</p><p>语法：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(x) <span class="keyword">do</span></span><br><span class="line">循环体</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>i 是数组索引值，v 是对应索引的数组元素值，ipairs 是 Lua 提供的一个迭代器函数，用来迭代数组，x 是要遍历的数组。</p><p>例如：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = &#123;<span class="string">"TOME"</span>,<span class="string">"JERRY"</span>,<span class="string">"ROWS"</span>,<span class="string">"LUCY"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(arr) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i,v)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; arr =&#123;<span class="string">"TOM"</span>,<span class="string">"JERRY"</span>,<span class="string">"ROWS"</span>,<span class="string">"LUCY"</span>&#125;</span><br><span class="line">&gt; <span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(arr) <span class="keyword">do</span></span><br><span class="line">&gt;&gt;      <span class="built_in">print</span>(i,v)</span><br><span class="line">&gt;&gt; <span class="keyword">end</span></span><br><span class="line"><span class="number">1</span>       TOM</span><br><span class="line"><span class="number">2</span>       JERRY</span><br><span class="line"><span class="number">3</span>       ROWS</span><br><span class="line"><span class="number">4</span>       LUCY</span><br></pre></td></tr></table></figure><p>但是如果将 arr 的值进行修改为：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr = &#123;<span class="string">"TOME"</span>,<span class="string">"JERRY"</span>,<span class="string">"ROWS"</span>,x=<span class="string">"JACK"</span>,<span class="string">"LUCY"</span>&#125;</span><br></pre></td></tr></table></figure><p>同样的代码在执行的时候，就只能看到和之前一样的结果，而其中的 x 为 JACK 就无法遍历出来，缺失了数据，如果解决呢？</p><p>我们可以将迭代器函数由 <code>ipairs</code> 变成 <code>pairs</code>，如</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; arr = &#123;<span class="string">"TOM"</span>,<span class="string">"JERRY"</span>,<span class="string">"ROWS"</span>,x=<span class="string">"JACK"</span>,<span class="string">"LUCY"</span>&#125;</span><br><span class="line">&gt; <span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">pairs</span>(arr) <span class="keyword">do</span></span><br><span class="line">&gt;&gt;      <span class="built_in">print</span>(i,v)</span><br><span class="line">&gt;&gt; <span class="keyword">end</span></span><br><span class="line"><span class="number">1</span>       TOM</span><br><span class="line"><span class="number">2</span>       JERRY</span><br><span class="line"><span class="number">3</span>       ROWS</span><br><span class="line"><span class="number">4</span>       LUCY</span><br><span class="line">x       JACK</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Nginx </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--常量初始化相关问题</title>
      <link href="/2022/11/16/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(43)/"/>
      <url>/2022/11/16/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(43)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><strong>看这段代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        b = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------- //    </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> aa = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> bb;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> cc;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        bb = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Test()&#123;</span><br><span class="line">        cc = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// b = 1;   ERROR</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------- //    </span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     b = 1;   ERROR</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// static&#123;</span></span><br><span class="line">    <span class="comment">//     bb = 1;  ERROR</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常量初始化问题总结：</p><ul><li>静态常量初始化：<ul><li>定义时赋值</li><li>静态代码快中赋值</li></ul></li><li>成员常量初始化：<ul><li>定义时赋值</li><li>非静态代码快赋值</li><li>构造函数中赋值</li></ul></li><li>注意出错情况：<ul><li>在非静态代码快中或构造函数中为静态常量赋值</li><li>在静态代码快中为成员常量赋值</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 部署与集群</title>
      <link href="/2022/11/15/Nginx_Deployment_and_cluster/"/>
      <url>/2022/11/15/Nginx_Deployment_and_cluster/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="Nginx-部署与集群"><a href="#Nginx-部署与集群" class="headerlink" title="Nginx 部署与集群"></a>Nginx 部署与集群</h1><h2 id="Nginx与Tomcat部署"><a href="#Nginx与Tomcat部署" class="headerlink" title="Nginx与Tomcat部署"></a>Nginx与Tomcat部署</h2><p>前面已经将 Nginx 的大部分内容进行了讲解，我们都知道了 Nginx 在高并发场景和处理静态资源是非常高性能的，但是在实际项目中除了静态资源还有就是后台业务代码模块，一般后台业务都会被部署在 Tomcat、weblogic 或者是 websphere 等 Web 服务器上。那么如何使用 Nginx 接收用户的请求并把请求转发到后台 Web 服务器？</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.iachagf6u0g.webp" alt="image"></p><p>步骤分析:</p><ul><li>在服务器 A 上准备 Tomcat 环境，并在 Tomcat 上部署一个 Web 项目。这步骤在 <a href="/middleware/Nginx/Nginx_Deployment_and_cluster/#环境准备-tomcat">环境准备(Tomcat)</a></li><li>在服务器 B 上准备 Nginx 环境，使用 Nginx 接收请求，并把请求分发到 Tomcat 上。这步骤在 <a href="/middleware/Nginx/Nginx_Deployment_and_cluster/#环境准备-nginx">环境准备(Nginx)</a></li></ul><h3 id="环境准备-Tomcat"><a href="#环境准备-Tomcat" class="headerlink" title="环境准备(Tomcat)"></a>环境准备(Tomcat)</h3><p>本次将采用 Tomcat 作为后台 Web 服务器。</p><ul><li>在 服务器 A 上准备一个 Tomcat<ul><li>Tomcat 官网地址：<a href="https://tomcat.apache.org/" target="_blank" rel="noopener">https://tomcat.apache.org/</a></li></ul></li><li>下载 Tomcat，这里使用的是 <code>apache-tomcat-9.0.54.tar.gz</code></li><li>进入上传目录，将 Tomcat 进行解压缩</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/<span class="built_in">local</span>/tomcat</span><br><span class="line"></span><br><span class="line">tar -zxf apache-tomcat-9.0.54.tar.gz -C /usr/<span class="built_in">local</span>/tomcat</span><br></pre></td></tr></table></figure><p>准备一个 Web 项目，将其打包为 War 包，这里是 demo.war</p><ul><li>将写好的 War 包上传到 Tomcat 目录下的 webapps 包下</li><li>将 Tomcat 进行启动，进入 Tomcat 的 bin 目录下，执行命令：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./startup.sh</span><br></pre></td></tr></table></figure><p>启动完成 Tomcat 后，进行访问测试</p><p>浏览器访问：</p><ul><li>静态资源：<code>http://192.168.200.146:8080/demo/index.html</code></li></ul><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.pln0ovd1h1c.webp" alt="image"></p><ul><li>动态资源：<code>http://192.168.200.146:8080/demo/getAddress</code></li></ul><p>动态资源可以是端口号，此时的端口是 8080<img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.31nc8e1cdee0.webp" alt="image"></p><p>自此，服务器 A 的 Tomcat 部署已经实现。</p><p><strong>demo.war 的内容有什么呢？</strong></p><p>其实你可以自己制作一个 war 包，这里说明一下，demo.war 里有两个图片，和一个 index.html</p><p>index.html 文件引用了两个图片：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        $(function()&#123;</span><br><span class="line">           $.get('http://192.168.200.133/demo/getAddress',function(data)&#123;</span><br><span class="line">               $("#msg").html(data);</span><br><span class="line">           &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/logo.png"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Nginx如何将请求转发到后端服务器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/mv.png"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看出，当访问 index.html 时，它会主动去请求 <code>/getAddress</code>，这个请求返回端口号，即把 8080 当作动态资源，显示到页面上，如果是 9090 端口访问，则返回 9090 显示页面上。你也可以直接访问 <code>/getAddress</code>，直接获取端口号。</p><h3 id="环境准备-Nginx"><a href="#环境准备-Nginx" class="headerlink" title="环境准备(Nginx)"></a>环境准备(Nginx)</h3><p>我们已经在 Tomcat 实现了两个效果，那么现在需要把 Tomcat 的地址放到 Nginx 里，由 Nginx 帮我们代理这个 Tomcat 地址，这样我们访问 Nginx，实际上就是访问 Tomcat。</p><ol><li>使用 Nginx 的反向代理，将请求转给 Tomcat 进行处理。</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> webservice &#123;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:8080</span>;  <span class="comment"># 服务器 A 的 Tomcat  地址</span></span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">    <span class="attribute">listen</span><span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    <span class="attribute">location</span> /demo &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://webservice;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>启动访问服务器 B，测试是否代理到服务器 A 的 Tomcat，效果如图：</li></ol><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.6taygwj4nt80.webp" alt="image"></p><p>学习到这，可能大家会有一个困惑，明明直接通过 Tomcat 就能访问，为什么还需要多加一个 Nginx，这样不是反而是系统的复杂度变高了么? 那接下来我们从两个方便给大家分析下这个问题，</p><ul><li>第一个使用 Nginx 实现动静分离</li><li>第二个使用 Nginx 搭建 Tomcat 的集群</li></ul><h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p><strong>什么是动静分离？</strong></p><ul><li>动：后台应用程序的业务处理</li><li>静：网站的静态资源（html，javaScript，css，images 等文件）</li><li>分离：将两者进行分开部署访问，提供用户进行访问。</li></ul><p><strong>举例说明就是以后所有和静态资源相关的内容都交给 Nginx 来部署访问，非静态内容则交个类似于 Tomcat 的服务器来部署访问。</strong></p><p><strong>为什么要动静分离？</strong></p><p>前面我们介绍过 Nginx 在处理静态资源的时候，效率是非常高的，而且 Nginx 的并发访问量也是名列前茅，而 Tomcat 则相对比较弱一些，所以把静态资源交给 Nginx 后，可以减轻 Tomcat 服务器的访问压力并提高静态资源的访问速度。</p><p>动静分离以后，降低了动态资源和静态资源的耦合度。如动态资源宕机了也不影响静态资源的展示。</p><p><strong>如何实现动静分离?</strong></p><p>实现动静分离的方式很多，比如静态资源可以部署到 CDN、Nginx 等服务器上，动态资源可以部署到 Tomcat、weblogic 或者 websphere 上。这里使用 Nginx + Tomcat 来实现动静分离。</p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>如下图，因为 Nginx 处理静态资源性能高，所以我们把静态资源放在 Nginx 服务器上，然后把动态资源放到 Tomcat 服务器上。当访问 Nginx 的静态资源时，Nginx 会去访问 Tocmat 获取动态资源。实现动静分离。</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.2v1uen08t3c0.webp" alt="image"></p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ul><li><p>将 demo.war 项目中的静态资源（两个图片）都删除掉，重新打包生成一个 War 包</p><p>这时候 War 包只留下动态资源，而静态资源要放到 Nginx 上。</p></li><li><p>将新的 War 包部署到 Tomcat 中，把之前部署的内容删除掉</p><ul><li>进入到 tomcat 的 webapps 目录下，将之前的 demo 目录和 demo.war 包删除掉</li><li>将新的 War 包复制到 webapps 下</li><li>将 tomcat 启动</li></ul></li><li><p>在 Nginx 所在的服务器 B 上创建如下目录，并将对应的静态资源放入指定的位置</p></li></ul><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.3e4j68pre4k0.webp" alt="image"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/<span class="built_in">local</span>/nginx/html/web/images</span><br><span class="line">mkdir /usr/<span class="built_in">local</span>/nginx/html/web/js</span><br><span class="line"></span><br><span class="line">cp logo.png /usr/<span class="built_in">local</span>/nginx/html/web/images</span><br><span class="line">cp mv.png /usr/<span class="built_in">local</span>/nginx/html/web/images</span><br><span class="line">cp jquery.min.js /usr/<span class="built_in">local</span>/nginx/html/web/js</span><br><span class="line"></span><br><span class="line">vim /usr/<span class="built_in">local</span>/nginx/html/web/index.html</span><br></pre></td></tr></table></figure><p>其中 index.html 页面的内容如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        $(function()&#123;</span><br><span class="line">           $.get('http://192.168.200.133/demo/getAddress',function(data)&#123;</span><br><span class="line">               $("#msg").html(data);</span><br><span class="line">           &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/logo.png"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Nginx如何将请求转发到后端服务器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/mv.png"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第 9 行代码，它访问的这个地址是服务器 B 的 Nginx，通过这个地址让 Nginx 去获取服务器 A 的 Tomcat 动态资源。</p><ul><li>在配置文件配置 Nginx 的静态资源与动态资源的访问</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> webservice&#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.200.146:8080</span>;  <span class="comment"># 服务器 A 的 Tocmat</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 动态资源从 Tomcat 获取</span></span><br><span class="line">    <span class="attribute">location</span> /demo &#123;      <span class="comment"># index.html 第 9 行代码触发该 location</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://webservice;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 静态资源从自己身上获取</span></span><br><span class="line">    <span class="attribute">location</span> ~/.*\.(png|jpg|gif|js)&#123;</span><br><span class="line">        <span class="attribute">root</span> html/web;</span><br><span class="line">        <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   html/web;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>启动测试，访问 <code>http://192.168.200.133</code></li></ul><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.2yip3al9lva0.webp" alt="image"></p><p>假如某个时间点，由于某个原因导致 Tomcat 后的服务器宕机了，我们再次访问 Nginx，会得到如下效果：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.3s0ttch8r4i0.webp" alt="image"></p><p>用户还是能看到页面，只是缺失 Tomcat 的动态资源，这就是前后端耦合度降低的效果，并且整个请求只和后的服务器交互了一次，js 和 images 都直接从 Nginx 服务器里返回，提供了效率，降低了后端服务器的压力。</p><h2 id="Tomcat集群搭建"><a href="#Tomcat集群搭建" class="headerlink" title="Tomcat集群搭建"></a>Tomcat集群搭建</h2><p>在使用 Nginx 和 Tomcat 部署项目的时候，我们使用的是一台 Nginx 服务器和一台 Tomcat 服务器，效果图如下：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.4ukvicg3of80.webp" alt="image"></p><p>那么问题来了，如果 Tomcat 的真的宕机了，整个系统就会不完整，所以如何解决上述问题？</p><p>一台服务器容易宕机，那就多搭建几台 Tomcat 服务器，这样的话就提升了后的服务器的可用性。这也就是我们常说的集群，搭建 Tomcat 的集群需要用到了 Nginx 的反向代理和赋值均衡的知识，具体如何来实现？</p><p>我们先来分析下原理：</p><p>用户请求到 Nginx，Nginx 使用负载均衡对三个 Tomcat 服务器进行访问，如果一个 Tomcat 服务器宕机了，那么还有两个 Tomcat 服务器可以使用。</p><p>如图：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.664h3o0m8y00.webp" alt="image"></p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol><li>准备 3 台 Tomcat 服务器，使用端口进行区分（实际环境应该是三台服务器），修改 Tomcat 的 server.xml，将端口修改分别修改为 8080、8180、8280</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp -r apache-tomcat-9.0.54 tomcat01</span><br><span class="line">cp -r apache-tomcat-9.0.54 tomcat02</span><br><span class="line">cp -r apache-tomcat-9.0.54 tomcat03</span><br></pre></td></tr></table></figure><p>修改三个 Tocmat 配置文件的端口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim tomcat01/conf/server.xml</span><br><span class="line">vim tomcat02/conf/server.xml</span><br><span class="line">vim tomcat03/conf/server.xml</span><br></pre></td></tr></table></figure><p>修改的内容位置如下：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.76l3jwkc3b40.webp" alt="image"></p><ol start="2"><li>在 Nginx 对应的配置文件中添加如下内容:</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> webservice&#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.200.146:8080</span>;     <span class="comment"># tomcat01</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.200.146:8180</span>;  <span class="comment"># tomcat02</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.200.146:8280</span>; <span class="comment"># tomcat03</span></span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">    <span class="attribute">listen</span><span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    <span class="attribute">location</span> /demo &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://webservice;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>启动 Tomcat 并访问测试</li></ol><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://192.168.200.146:8080/demo/getAddress</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.2389oc46sdxc.webp" alt="image"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://192.168.200.146:8180/demo/getAddress</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.1sjv5fphqk8w.webp" alt="image"></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://192.168.200.146:8280/demo/getAddress</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.6uckjob0ptc0.webp" alt="image"></p><p>好了，完成了上述环境的部署，我们已经解决了 Tomcat 的高可用性，一台服务器宕机，还有其他两条对外提供服务，同时也可以实现后台服务器的不间断更新。</p><p><strong>但是新问题出现了，上述环境中，如果是 Nginx 宕机了呢，那么整套系统都将服务对外提供服务了，这个如何解决？</strong></p><h2 id="Nginx集群搭建"><a href="#Nginx集群搭建" class="headerlink" title="Nginx集群搭建"></a>Nginx集群搭建</h2><p>针对于上面提到的问题，我们来分析下要想解决上述问题，需要面临哪些问题？</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.664h3o0m8y00.webp" alt="image"></p><p>需要两台以上的 Nginx 服务器对外提供服务，这样的话就可以解决其中一台宕机了，另外一台还能对外提供服务，但是如果是两台 Nginx 服务器的话，会有两个 IP 地址，用户该访问哪台服务器，用户怎么知道哪台是好的，哪台是宕机了的？</p><h3 id="Keepalived"><a href="#Keepalived" class="headerlink" title="Keepalived"></a>Keepalived</h3><p>使用 Keepalived 来解决，Keepalived 软件由 C 编写的，最初是专为 LVS 负载均衡软件设计的，Keepalived 软件主要是通过 VRRP 协议实现高可用功能。</p><h3 id="VRRP介绍"><a href="#VRRP介绍" class="headerlink" title="VRRP介绍"></a>VRRP介绍</h3><p>VRRP（Virtual Route Redundancy Protocol）协议，翻译过来为虚拟路由冗余协议。VRRP 协议将两台或多台路由器设备虚拟成一个设备，对外提供虚拟路由器 IP，而在路由器组内部，如果实际拥有这个对外 IP 的路由器如果工作正常的话就是 MASTER，MASTER 实现针对虚拟路由器IP的各种网络功能。其他设备不拥有该虚拟 IP，状态为 BACKUP，处了接收 MASTER 的 VRRP 状态通告信息以外，不执行对外的网络功能。当主机失效时，BACKUP 将接管原先 MASTER 的网络功能。</p><p>看图分析：VRRP 把两个 Nginx 分成两个路由（VRRP 路由 1 和 VRRP 路由 2），并生成一个 Virtual 路由，用户访问的是 Virtual 路由，该路由会去访问两个 Nginx 生成的 VRRP 路由。那么到底访问谁呢？VRRP 会给两个路由分配角色，一个是 Master（老大），另一个是 Backup（备份），所以访问的是 Master 角色的路由，当 Master 角色路由宕机了，才会找到 Backup 备份路由。</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.zc2md5tuu0w.webp" alt="image"></p><p>从上面的介绍信息获取到的内容就是 VRRP 是一种协议，那这个协议是用来干什么的？</p><ol><li><p>选择协议</p><p>VRRP 可以把一个虚拟路由器的责任动态分配到局域网上的 VRRP 路由器中的一台。其中的虚拟路由即 Virtual 路由是由 VRRP 路由群组创建的一个不真实存在的路由，这个虚拟路由也是有对应的 IP 地址。而且 VRRP 路由 1 和 VRRP 路由 2 之间会有竞争选择，通过选择会产生一个 Master 路由和一个 Backup 路由。</p></li><li><p>路由容错协议</p><p>Master 路由和 Backup 路由之间会有一个心跳检测，Master 会定时告知 Backup 自己的状态，如果在指定的时间内，Backup 没有接收到这个通知内容，Backup 就会替代 Master 成为新的 Master。Master 路由有一个特权就是虚拟路由和后端服务器都是通过 Master 进行数据传递交互的，而备份节点则会直接丢弃这些请求和数据，不做处理，只是去监听 Master 的状态。</p></li></ol><p>用了 Keepalived 后，解决方案如图下:</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.3n6clkv1blk0.webp" alt="image"></p><p>看图分析：VIP 是虚拟路由，是专门给用户发送请求。一旦用户发送请求到 VIP，VIP 就会发送给 Master（主）的 Nginx，如果 Master（主）Nginx 宕机了，才会发送给 Backup（备份） Nginx 路由。</p><h3 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>环境准备</p><table><thead><tr><th>VIP IP</th><th>Nginx IP</th><th>主机名</th><th>主/从</th></tr></thead><tbody><tr><td></td><td>192.168.200.133（服务器 A）</td><td>keepalived1</td><td>Master</td></tr><tr><td>192.168.200.222</td><td></td><td></td><td></td></tr><tr><td></td><td>192.168.200.122（服务器 B）</td><td>keepalived2</td><td>Backup</td></tr></tbody></table><p><strong>确保服务器 A 和服务器 B 的 Nginx 配置保持一致。</strong></p><p>keepalived 的安装步骤如下：</p><ul><li>步骤1：从官方网站下载 keepalived，官网地址 <a href="https://keepalived.org/" target="_blank" rel="noopener">https://keepalived.org/</a></li><li>步骤2：将下载的资源上传到服务器，这里是 <code>keepalived-2.0.20.tar.gz</code></li><li>步骤3：在 <code>/opt</code> 目录下创建 keepalived 目录，方便管理资源</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/keepalived</span><br></pre></td></tr></table></figure><ul><li>步骤4：将压缩文件进行解压缩，解压缩到指定的目录</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf keepalived-2.0.20.tar.gz -C /opt/keepalived</span><br></pre></td></tr></table></figure><ul><li>步骤5：对 keepalived 进行配置，编译和安装</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/keepalived/keepalived-2.0.20</span><br><span class="line"></span><br><span class="line">./configure --sysconf=/etc --prefix=/usr/<span class="built_in">local</span>   <span class="comment"># 安装到 /usr/local 目录下，可修改</span></span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p><strong>两台 Nginx 服务器都要安装 keepalive。</strong></p><p>安装完成后，有两个文件需要我们认识下：</p><ul><li><code>/etc/keepalived/keepalived.conf</code>：keepalived 的系统配置文件，我们主要操作的就是该文件</li></ul><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.5hd9zg18lp80.webp" alt="image"></p><ul><li><code>/usr/local/sbin</code> 目录下的 <code>keepalived</code>：这是系统配置脚本，用来启动和关闭 keepalived</li></ul><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.54vzhzf4avw0.webp" alt="image"></p><h3 id="Keepalived配置文件介绍"><a href="#Keepalived配置文件介绍" class="headerlink" title="Keepalived配置文件介绍"></a>Keepalived配置文件介绍</h3><p>打开 keepalived.conf 配置文件</p><p>这里面会分三部：</p><ul><li>第一部分是 global 全局配置</li><li>第二部分是 vrrp 相关配置</li><li>第三部分是 LVS 相关配置。</li></ul><p>这里主要是使用 keepalived 实现高可用部署，没有用到 LVS，所以我们重点关注的是前两部分。</p><p>打开 keepalived.conf 文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/keepalived/keepalived.conf</span><br></pre></td></tr></table></figure><p>文件内容部分介绍如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># global全局部分</span></span><br><span class="line"><span class="section">global_defs</span> &#123;</span><br><span class="line">    </span><br><span class="line">   <span class="section">notification_email</span> &#123;  <span class="comment"># 通知邮件，当 keepalived 切换 Master 和 Backup 时需要发 email 给具体的邮箱地址</span></span><br><span class="line">     tom@itcast.cn</span><br><span class="line">     jerry@itcast.cn</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="attribute">notification_email_from</span> kele<span class="variable">@youngkbt</span>.com   <span class="comment"># 设置发件人的邮箱信息</span></span><br><span class="line">   </span><br><span class="line">   smtp_server <span class="number">192.168.200.1</span>   <span class="comment"># 指定 smpt 服务地址</span></span><br><span class="line">   </span><br><span class="line">   smtp_connect_timeout <span class="number">30</span>   <span class="comment"># 指定 smpt 服务连接超时时间</span></span><br><span class="line">   </span><br><span class="line">   router_id LVS_DEVEL   <span class="comment"># 运行 keepalived 服务器的一个标识，可以用作发送邮件的主题信息</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment"># 默认是不跳过检查。检查收到的 VRRP 通告中的所有地址可能会比较耗时，设置此命令的意思是，如果通告与接收的上一个通告来自相同的 master 路由器，则不执行检查(跳过检查)</span></span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   </span><br><span class="line">   vrrp_strict    <span class="comment"># 严格遵守 VRRP 协议</span></span><br><span class="line">  </span><br><span class="line">   vrrp_garp_interval <span class="number">0</span>   <span class="comment"># 在一个接口发送的两个免费 ARP 之间的延迟。可以精确到毫秒级。默认是 0</span></span><br><span class="line">   </span><br><span class="line">   vrrp_gna_interval <span class="number">0</span>  <span class="comment"># 在一个网卡上每组消息之间的延迟时间，默认为 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要修改的是 5、6、8 行代码。</p><p>VRRP 部分可以包含以下四个子模块：</p><ol><li>vrrp_script</li><li>vrrp_sync_group</li><li>garp_group</li><li>vrrp_instance</li></ol><p>我们会用到第一个（<a href="/middleware/Nginx/Nginx_Deployment_and_cluster/#vrrp-script">vrrp_script</a>）和第四个（<a href="/middleware/Nginx/Nginx_Deployment_and_cluster/#vrrp-instance">vrrp_instance</a>）。</p><h3 id="vrrp-instance"><a href="#vrrp-instance" class="headerlink" title="vrrp_instance"></a>vrrp_instance</h3><p><code>vrrp_instance</code> 模块内容：</p><figure class="highlight nginx"><figcaption><span>&#123;3,5,6,7,13&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置 keepalived 实例的相关信息，VI_1 为 VRRP 实例名称</span></span><br><span class="line"><span class="attribute">vrrp_instance</span> VI_1 &#123;</span><br><span class="line">    <span class="attribute">state</span> MASTER    <span class="comment"># 有两个值可选 MASTER 主，BACKUP 备</span></span><br><span class="line">    interface ens33  <span class="comment"># vrrp 实例绑定的接口，用于发送 VRRP 包[当前服务器使用的网卡名称]</span></span><br><span class="line">    virtual_router_id <span class="number">51</span>  <span class="comment"># 指定 VRRP 实例 ID，范围是 0-255</span></span><br><span class="line">    priority <span class="number">100</span>  <span class="comment"># 指定优先级，优先级高的将成为 MASTER</span></span><br><span class="line">    advert_int <span class="number">1</span>  <span class="comment"># 指定发送 VRRP 通告的间隔，单位是秒。这里是心跳检查的时间</span></span><br><span class="line">    authentication &#123;  <span class="comment"># vrrp 之间通信的认证信息</span></span><br><span class="line">        <span class="attribute">auth_type</span> PASS  <span class="comment"># 指定认证方式。PASS 简单密码认证(推荐)</span></span><br><span class="line">        auth_pass <span class="number">1111</span>  <span class="comment"># 指定认证使用的密码，最多 8 位</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;   <span class="comment"># 虚拟 IP 地址设置虚拟 IP 地址，供用户访问使用，可设置多个，一行一个</span></span><br><span class="line">        192.168.200.222</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>vrrp_instance</code> 模块中我们修改的是第 3、5、6、7、13 行代码。</p><p>第 3 行代码是说明当前 Nginx 服务器的角色是 Master 还是 Backup。分别在服务器 A 和 B 进行角色配置。</p><p>第 5 行代码是 VIP 的 ID，如果使用相同的虚拟路由 VIP，请保持 ID 一致。</p><p>第 6 行代码是优先级，请让 Master 服务器的优先级大于 Backup 服务器的优先级。如 100 &gt; 90。</p><p>第 7 行代码是 Master 和 Backup 之间通信的间隔时间，如果无法通信，说明 Master 已经宕机，则切换为 Backup。</p><p>第 13 行代码是用户访问的虚拟 IP 地址，即 VIP，它会发送给 Nginx 服务器。</p><h3 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h3><p>Keepalived 的具体配置内容如下：</p><p><strong>服务器A</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">global_defs</span> &#123;</span><br><span class="line">   <span class="section">notification_email</span> &#123;</span><br><span class="line">        tom@itcast.cn</span><br><span class="line">        jerry@itcast.cn</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="attribute">notification_email_from</span> zhaomin<span class="variable">@itcast</span>.cn</span><br><span class="line">   smtp_server <span class="number">192.168.200.1</span></span><br><span class="line">   smtp_connect_timeout <span class="number">30</span></span><br><span class="line">   router_id keepalived1</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   vrrp_strict</span><br><span class="line">   vrrp_garp_interval <span class="number">0</span></span><br><span class="line">   vrrp_gna_interval <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    <span class="attribute">state</span> MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id <span class="number">51</span></span><br><span class="line">    priority <span class="number">100</span></span><br><span class="line">    advert_int <span class="number">1</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        <span class="attribute">auth_type</span> PASS</span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.200.222</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>服务器B</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line"><span class="section">global_defs</span> &#123;</span><br><span class="line">   <span class="section">notification_email</span> &#123;</span><br><span class="line">        tom@itcast.cn</span><br><span class="line">        jerry@itcast.cn</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="attribute">notification_email_from</span> zhaomin<span class="variable">@itcast</span>.cn</span><br><span class="line">   smtp_server <span class="number">192.168.200.1</span></span><br><span class="line">   smtp_connect_timeout <span class="number">30</span></span><br><span class="line">   router_id keepalived2</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   vrrp_strict</span><br><span class="line">   vrrp_garp_interval <span class="number">0</span></span><br><span class="line">   vrrp_gna_interval <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    <span class="attribute">state</span> BACKUP</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id <span class="number">51</span></span><br><span class="line">    priority <span class="number">90</span></span><br><span class="line">    advert_int <span class="number">1</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        <span class="attribute">auth_type</span> PASS</span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.200.222</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><ol><li>启动 keepalived 之前，先使用命令 <code>ip a</code>，查看 <code>192.168.200.133</code> 和 <code>192.168.200.122</code> 这两台服务器的 IP 情况</li></ol><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.4lh36tkt0kk0.webp" alt="image"></p><ol start="2"><li>分别启动两台服务器的 keepalived</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/sbin</span><br><span class="line"></span><br><span class="line">./keepalived</span><br></pre></td></tr></table></figure><p>再次通过 <code>ip a</code> 查看 IP</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.79pu8lyco700.webp" alt="image"></p><p>此时发现服务器 A 多出了 <code>192.168.200.222</code>，正是配置的虚拟路由 VIP，而服务器 B 并没有，说明服务器 A 是 Master，优先级高于服务器 B。</p><ol start="3"><li>当把 <code>192.168.200.133</code> 服务器 A 上的 keepalived 关闭后，再次查看 IP</li></ol><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.qwb7iteldn4.webp" alt="image"></p><p>说明当 Master 服务器 A 宕机后，服务器 B 由 Backup 晋升为 Master。</p><p>通过上述的测试，我们会发现，虚拟 IP(VIP)会在 Master 节点上，当 Master 节点上的 keepalived 出问题以后，因为 Backup 无法收到 Master 发出的 VRRP 状态通过信息，就会直接升为 Master 。VIP 也会「漂移」到新的 Master 。</p><p><strong>上面测试和 Nginx 有什么关系?</strong></p><p>我们把 <code>192.168.200.133</code> 服务器 A 的 keepalived 再次启动下，由于它的优先级高于 <code>192.168.200.122</code> 服务器 B，所有它会再次成为 Master，VIP 也会「漂移」过去。</p><p>我们通过浏览器访问：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://192.168.200.222/</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.6xosmovingw0.webp" alt="image"></p><p>如果把 <code>192.168.200.133</code> 服务器 A 的 keepalived 进程关闭掉</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> keepalived</span><br></pre></td></tr></table></figure><p>再次访问相同的地址，效果如图：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.60wzzgrveak0.webp" alt="image"></p><p>虽然效果成功实现了，但是此时是我们手动把服务器上的 keepalived 关闭，才让 VIP 进行切换。</p><p><strong>而什么时候关闭 keepalived 呢？</strong></p><p>应该是在 keepalived 所在服务器的 Nginx 出现问题后，把 keepalived 关闭掉，就可以让 VIP 执行另外一台服务器。<strong>但是现在这所有的操作都是通过手动来完成的</strong>，我们如何能让系统自动判断当前服务器的 Nginx 是否正确启动，如果没有，要能让 VIP 自动进行「漂移」，这个问题该如何解决？往下看。</p><h3 id="vrrp-script"><a href="#vrrp-script" class="headerlink" title="vrrp_script"></a>vrrp_script</h3><p>keepalived 只能做到对网络故障和 keepalived 本身的监控，即当出现网络故障或者 keepalived 本身出现问题时，进行切换。但是这些还不够，我们还需要监控 keepalived 所在服务器上的其他业务，比如 Nginx，如果 Nginx 出现异常了，而 keepalived 却保持正常，是无法完成系统的正常工作的，因此需要根据业务进程的运行状态决定是否需要进行主备切换，这个时候，我们可以通过编写脚本对业务进程进行检测监控。</p><p>首先我们要知道 keepalived 的 vrrp_script 的配置模板：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vrrp_script</span> 脚本名称</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">script</span> <span class="string">"脚本位置"</span></span><br><span class="line">    interval <span class="number">3</span> <span class="comment"># 执行时间间隔</span></span><br><span class="line">    weight -<span class="number">20</span> <span class="comment"># 动态调整 vrrp_instance 的优先级</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现步骤：</p><ul><li>编写脚本，这里的脚本名是 <code>ck_nginx.sh</code>，位置在 <code>/etc/keepalived</code> 路径下</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">num=`ps -C nginx --no-header | wc -l`  # 查询 Nginx 的进程数</span><br><span class="line"></span><br><span class="line">if [ $num -eq 0 ];then              # 如果 Nginx 的进程数等于 0</span><br><span class="line">/usr/local/nginx/sbin/nginx   # 则可执行文件 nginx，启动 Nginx 服务</span><br><span class="line"></span><br><span class="line">sleep 2   # 阻塞 2 秒 </span><br><span class="line"></span><br><span class="line">if [ `ps -C nginx --no-header | wc -l` -eq 0 ]; then  # 再次查询 Nginx 的进程数</span><br><span class="line">killall keepalived# 如果 Nginx 的进程数不等于 0，则杀死 keepalived 进程</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><ul><li>ps 命令用于显示当前进程 (process) 的状态。</li><li>-C(command)：指定命令的所有进程</li><li>–no-header：排除标题</li></ul><p>命令的效果如图：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.1ypeqh0nut8g.webp" alt="image"></p><p>代表目前的 num = 3。</p><p>这个脚本其实就是判断 Nginx 是否启动还是宕机了，如果没有启动，则重新启动。重新启动后再次查看 Nginx 是否启动成功，如果没有启动，说明 Nginx 宕机了，则杀死 keepalived 进程，这样，另一台服务器的 Nginx 就晋升为 Master。</p><ul><li>为脚本文件设置权限</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 ck_ngi</span><br></pre></td></tr></table></figure><ul><li>将脚本添加到 Master 服务器 A 的 keepalived 的配置文件里</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/keepalived/keepalived.conf</span><br></pre></td></tr></table></figure><p>添加如下内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vrrp_script</span> ck_nginx &#123;</span><br><span class="line">   <span class="attribute">script</span> <span class="string">"/etc/keepalived/ck_nginx.sh"</span> <span class="comment"># 执行脚本的位置</span></span><br><span class="line">   interval <span class="number">2</span><span class="comment"># 执行脚本的周期，秒为单位</span></span><br><span class="line">   weight -<span class="number">20</span><span class="comment"># 权重的计算方式</span></span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    <span class="attribute">state</span> MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id <span class="number">10</span></span><br><span class="line">    priority <span class="number">100</span></span><br><span class="line">    advert_int <span class="number">1</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        <span class="attribute">auth_type</span> PASS</span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.200.111</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">track_script</span> &#123;</span><br><span class="line">      ck_nginx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果效果没有出来，可以使用 <code>tail -f /var/log/messages</code> 查看日志信息，找对应的错误信息</li><li>两个 Nginx 启动后，关闭 Master 的 Nginx，通过 <code>ip a</code> 查看 Backup 的 Nginx 的IP，是否晋升为 Master</li></ul><p><strong>问题思考</strong></p><p>通常如果 Master 服务死掉后，Backup 会变成 Master，但是当原来的 Master 服务又恢复了，它会和原来的 Backup 会抢占 VIP，这样就会发生两次切换，这对业务繁忙的网站来说是不好的。所以我们要在配置文件加入 nopreempt 非抢占，但是这个参数只能用于 Backup 的服务器，所以我们在用配置的时候，最好 Master 和 Backup 的 state 都设置成 Backup，这样它们只能通过 priority 优先级来竞争。</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Nginx </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 站点与认证</title>
      <link href="/2022/11/15/Nginx_Site_and_certification/"/>
      <url>/2022/11/15/Nginx_Site_and_certification/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="Nginx-站点与认证"><a href="#Nginx-站点与认证" class="headerlink" title="Nginx 站点与认证"></a>Nginx 站点与认证</h1><h2 id="Nginx制作下载站点"><a href="#Nginx制作下载站点" class="headerlink" title="Nginx制作下载站点"></a>Nginx制作下载站点</h2><p>首先我们先要清楚什么是下载站点？</p><p>我们先来看一个网站 <a href="http://nginx.org/download/" target="_blank" rel="noopener">http://nginx.org/download/</a></p><p>这个是大家去下载 Nginx 时经常访问的网站，该网站主要就是用来提供用户来下载相关资源的网站，就叫做下载网站。</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.17v6jxd79kao.webp" alt="image"></p><p>如何制作一个下载站点：</p><ul><li><p>Nginx 使用的是模块 <code>ngx_http_autoindex_module</code> 来实现的（自带），该模块处理以斜杠(『 / 』)结尾的请求，并生成目录列表。</p></li><li><p>Nginx 编译的时候会自动加载该模块，但是该模块默认是关闭的，我们需要使用下来指令来完成对应的配置</p></li></ul><h3 id="autoindex"><a href="#autoindex" class="headerlink" title="autoindex"></a>autoindex</h3><p><code>autoindex</code> 指令启用或禁用目录列表的输出</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>autoindex &lt;on | off&gt;;</td><td>autoindex off;</td><td>http、server、location</td></tr></tbody></table><h3 id="autoindex-exact-size"><a href="#autoindex-exact-size" class="headerlink" title="autoindex_exact_size"></a>autoindex_exact_size</h3><p><code>autoindex_exact_size</code> 指令对应 HTLM 格式，指定是否在目录列表展示文件的详细大小。</p><p>默认为 on，显示出文件的确切大小，单位是 bytes。</p><p>改为 off 后，显示出文件的大概大小，单位是 kB 或者 MB 或者 GB。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>autoindex_exact_size &lt;on | off&gt;;</td><td>autoindex_exact_size on;</td><td>http、server、location</td></tr></tbody></table><h3 id="autoindex-format"><a href="#autoindex-format" class="headerlink" title="autoindex_format"></a>autoindex_format</h3><p><code>autoindex_format</code> 指令设置目录列表的格式。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>autoindex_format &lt;html | xml | json | jsonp&gt;;</td><td>autoindex_format html;</td><td>http、server、location</td></tr></tbody></table><p>只有当 <code>autoindex_format</code> 指令设置为 html 时候，上方的 <code>autoindex_exact_size</code> 指令才会起作用。</p><p>该指令在 1.7.9 及以后版本中出现。</p><h3 id="autoindex-localtime"><a href="#autoindex-localtime" class="headerlink" title="autoindex_localtime"></a>autoindex_localtime</h3><p><code>autoindex_localtime</code> 指令对应 HTML 格式，是否在目录列表上显示时间。</p><p>默认为 off，显示的文件时间为 GMT 时间。</p><p>改为 on 后，显示的文件时间为文件的服务器时间。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>autoindex_localtime &lt;on |off&gt;;</td><td>autoindex_localtime off;</td><td>http、server、location</td></tr></tbody></table><h3 id="实现案例"><a href="#实现案例" class="headerlink" title="实现案例"></a>实现案例</h3><p>自行准备几个文件或者压缩包，我这里准备了 4 个用过的压缩包。</p><ul><li>创建一个目录，将压缩包放入其中，我这里创建的路径是 <code>/opt/download</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/download</span><br></pre></td></tr></table></figure><ul><li>然后把压缩包都放到该目录下</li></ul><p>效果如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master download]<span class="comment"># pwd</span></span><br><span class="line">/opt/download</span><br><span class="line">[root@master download]<span class="comment"># ll</span></span><br><span class="line">总用量 545504</span><br><span class="line">-rw-r--r--. 1 root root 408587111 3月  12 22:02 hadoop-2.10.1.tar.gz</span><br><span class="line">-rw-r--r--. 1 root root 145520298 3月  12 21:29 jdk-8u301-linux-x64.tar.gz</span><br><span class="line">-rw-r--r--  1 root root     25680 4月  27 2017 mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line">-rw-r--r--  1 root root   4456335 5月   9 19:40 mysql-connector-java-5.1.48.tar.gz</span><br></pre></td></tr></table></figure><ul><li>打开 Nginx 的配置文件</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><ul><li>添加配置如下内容：</li></ul><p><strong>有注释版</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /download &#123;</span><br><span class="line">    <span class="attribute">root</span> /opt;                <span class="comment"># 下载目录所在的路径，location 后面的 /download 拼接到 /opt 后面</span></span><br><span class="line">    <span class="comment"># 以这些后缀的文件点击后为下载，注释掉则 txt 等文件是在网页打开并查看内容</span></span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$request_filename</span> <span class="regexp">~* ^.*?\.(txt|doc|pdf|rar|gz|zip|docx|exe|xlsx|ppt|pptx|conf)$)</span>&#123;</span><br><span class="line">  <span class="attribute">add_header</span> Content-Disposition <span class="string">'attachment;'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">on</span>;  <span class="comment"># 启用目录列表的输出</span></span><br><span class="line">    <span class="attribute">autoindex_exact_size</span> <span class="literal">on</span>;  <span class="comment"># 在目录列表展示文件的详细大小</span></span><br><span class="line">    <span class="attribute">autoindex_format</span> html;  <span class="comment"># 设置目录列表的格式为 html</span></span><br><span class="line">    <span class="attribute">autoindex_localtime</span> <span class="literal">on</span>;   <span class="comment"># 目录列表上显示系统时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>无注释版</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /download &#123;</span><br><span class="line">    <span class="attribute">root</span> /opt;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$request_filename</span> <span class="regexp">~* ^.*?\.(txt|doc|pdf|rar|gz|zip|docx|exe|xlsx|ppt|pptx|conf)$)</span>&#123;</span><br><span class="line">  <span class="attribute">add_header</span> Content-Disposition <span class="string">'attachment;'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">autoindex_exact_size</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">autoindex_format</span> html;</span><br><span class="line">    <span class="attribute">autoindex_localtime</span> <span class="literal">on</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>root 指令后面必须是下载路径，因为我的下载路径是 <code>/opt/download</code>，所以这里填写 <code>/opt</code>，而 location 的 <code>/download</code> 会自动拼接到后面，形成完整的下载路径。</p><ul><li>访问 <code>192.168.91.200/download</code></li></ul><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.3gmq4emy84w0.webp" alt="image"></p><ul><li>JSON和XML格式(一般不用这两种格式)</li></ul><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.6n5evv8oo5k0.webp" alt="image"></p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.kvsekaaiu40.webp" alt="image"></p><h2 id="Nginx用户认证模块"><a href="#Nginx用户认证模块" class="headerlink" title="Nginx用户认证模块"></a>Nginx用户认证模块</h2><p>对应系统资源的访问，我们往往需要限制谁能访问，谁不能访问。这块就是我们通常所说的认证部分，认证需要做的就是根据用户输入的用户名和密码来判定用户是否为合法用户，如果是则放行访问，如果不是则拒绝访问。</p><p>Nginx 对应用户认证这块是通过 <code>ngx_http_auth_basic_module</code> 模块来实现的，它允许通过使用「HTTP基本身份验证」协议验证用户名和密码来限制对资源的访问。默认情况下 Nginx 是已经安装了该模块，如果不需要则使用 <code>--without-http_auth_basic_module</code> 删除认证模块。</p><p>该模块的指令比较简单。</p><h3 id="auth-basic"><a href="#auth-basic" class="headerlink" title="auth_basic"></a>auth_basic</h3><p><code>auth_basic</code> 指令使用「HTTP基本身份验证」协议启用用户名和密码的验证。默认关闭。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>auth_basic &lt;string | off&gt;;</td><td>auth_basic off;</td><td>http、server、location、limit_except</td></tr></tbody></table><p>开启后，服务端会返回 401，指定的字符串会返回到客户端，给用户以提示信息，但是不同的浏览器对内容的展示不一致。</p><h3 id="auth-basic-user-file"><a href="#auth-basic-user-file" class="headerlink" title="auth_basic_user_file"></a>auth_basic_user_file</h3><p><code>auth_basic_user_file</code> 指令指定用户名和密码所在文件，包括所在的路径。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>auth_basic_user_file <file>;</file></td><td>—</td><td>http、server、location、limit_except</td></tr></tbody></table><p>指定文件路径，该文件中设置用户名和密码，密码需要进行加密。可以采用工具自动生成。</p><h3 id="实现案例-1"><a href="#实现案例-1" class="headerlink" title="实现案例"></a>实现案例</h3><ul><li>在配置文件 nginx.conf 添加如下内容：</li></ul><p><strong>有注释版</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /download&#123;</span><br><span class="line">    <span class="comment"># 下载站点知识</span></span><br><span class="line">    <span class="attribute">root</span> /opt;                <span class="comment"># 下载目录所在的路径，location 后面的 /download 拼接到 /opt 后面</span></span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">on</span>;  <span class="comment"># 启用目录列表的输出</span></span><br><span class="line">    <span class="attribute">autoindex_exact_size</span> <span class="literal">on</span>;  <span class="comment"># 在目录列表展示文件的详细大小</span></span><br><span class="line">    <span class="attribute">autoindex_format</span> html;  <span class="comment"># 设置目录列表的格式为 html</span></span><br><span class="line">    <span class="attribute">autoindex_localtime</span> <span class="literal">on</span>;   <span class="comment"># 目录列表上显示系统时间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 认证模块知识</span></span><br><span class="line">    <span class="attribute">auth_basic</span> <span class="string">'please input your auth'</span>;   <span class="comment"># 启用户名和密码的验证，并在请求头插入数据</span></span><br><span class="line">    <span class="attribute">auth_basic_user_file</span> htpasswd;    <span class="comment"># 存用户名和密码的文件路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>无注释版</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /download&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">root</span> /opt;</span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">autoindex_exact_size</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">autoindex_format</span> html;</span><br><span class="line">    <span class="attribute">autoindex_localtime</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="attribute">auth_basic</span> <span class="string">'please input your auth'</span>;   </span><br><span class="line">    <span class="attribute">auth_basic_user_file</span> htpasswd;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们需要使用 <code>htpasswd</code> 工具生成包含用户名和密码的文件</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y httpd-tools</span><br></pre></td></tr></table></figure><p>该工具基本操作指令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">htpasswd -c /usr/<span class="built_in">local</span>/nginx/conf/htpasswd username   <span class="comment"># 创建一个新文件记录用户名和密码，密码后面弹出输入</span></span><br><span class="line">htpasswd -b /usr/<span class="built_in">local</span>/nginx/conf/htpasswd username password   <span class="comment"># 在指定文件新增一个用户名和密码</span></span><br><span class="line">htpasswd -D /usr/<span class="built_in">local</span>/nginx/conf/htpasswd username   <span class="comment"># 从指定文件删除一个用户信息</span></span><br><span class="line">htpasswd -v /usr/<span class="built_in">local</span>/nginx/conf/htpasswd username   <span class="comment"># 验证用户名和密码是否正确</span></span><br></pre></td></tr></table></figure><p>根据需求指定生成路径的位置。</p><ul><li>我们创建一个 frx 的用户名，密码是 123456</li></ul><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.5uqgyc41uuc0.webp" alt="image"></p><p>可以查看生成的文件内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master conf]<span class="comment"># cat /usr/local/nginx/conf/htpasswd</span></span><br><span class="line">frx:<span class="variable">$apr1</span><span class="variable">$wDXdSh0O</span><span class="variable">$yR66Agylnta9zupO7cD3k</span>.</span><br></pre></td></tr></table></figure><ul><li>浏览器访问 <code>192.168.91.200/download</code><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220806/image.1j6bwl4jr2g0.webp" alt="image"></li></ul><p>上述方式虽然能实现用户名和密码的验证，但是大家也看到了，所有的用户名和密码信息都记录在文件里面，如果用户量过大的话，这种方式就显得有点麻烦了，这时候我们就得通过后台业务代码来进行用户权限的校验了。</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Nginx </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--静态成员的继承问题</title>
      <link href="/2022/11/15/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(42)/"/>
      <url>/2022/11/15/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(42)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><strong>看两段代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Cat c = <span class="keyword">new</span> Cat();</span><br><span class="line">        c.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String schoolName =<span class="string">"黑猫"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(schoolName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出结果：</span></span><br><span class="line"><span class="comment"> * 黑猫</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>这段代码表明静态的父类成员依旧是可以被继承到子类的，否则不可能通过子类引用访问到这个静态的父类方法。</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Cat c = <span class="keyword">new</span> Cat();</span><br><span class="line">        Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line"></span><br><span class="line">        c.test();</span><br><span class="line">        a.test();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String schoolName = <span class="string">"白猫"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(schoolName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String schoolName =<span class="string">"黑猫"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(schoolName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出结果：</span></span><br><span class="line"><span class="comment"> * 白猫</span></span><br><span class="line"><span class="comment"> * 黑猫</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>这段代码表明，虽然静态成员可以被继承，但是和子类的同名静态方法并不构成重写关系，子类的同名静态方法会将父类同名静态方法隐藏，因此也不支持多态。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 负载均衡</title>
      <link href="/2022/11/14/Nginx_load_balancing/"/>
      <url>/2022/11/14/Nginx_load_balancing/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="Nginx-负载均衡"><a href="#Nginx-负载均衡" class="headerlink" title="Nginx 负载均衡"></a>Nginx 负载均衡</h1><p><strong>负载均衡</strong></p><p>负载均衡是实际开发必须掌握的技能，Nginx 如何将少数请求跟多台服务器进行沟通，让每一台服务器的请求处理面面俱到？本内容将学习 Nginx 的负载均衡知识。</p><h2 id="负载均衡概述"><a href="#负载均衡概述" class="headerlink" title="负载均衡概述"></a>负载均衡概述</h2><p>早期的网站流量和业务功能都比较简单，单台服务器足以满足基本的需求，但是随着互联网的发展，业务流量越来越大并且业务逻辑也跟着越来越复杂，单台服务器的性能及单点故障问题就凸显出来了，因此需要多台服务器进行性能的水平扩展及避免单点故障出现。那么如何将不同用户的请求流量分发到不同的服务器上呢？这就需要负载均衡来处理。</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220803/image.5kgql84ikx80.webp" alt="image"></p><h2 id="负载均衡原理及处理流程"><a href="#负载均衡原理及处理流程" class="headerlink" title="负载均衡原理及处理流程"></a>负载均衡原理及处理流程</h2><p>系统的扩展可以分为纵向扩展和横向扩展。</p><ul><li>纵向扩展是从单机的角度出发，通过增加系统的硬件处理能力来提升服务器的处理能力</li><li>横向扩展是通过添加机器来满足大型网站服务的处理能力</li></ul><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220803/image.1xwd1pm6du68.webp" alt="image"></p><p>如上图，负载均衡涉及到两个重要的角色分别是「应用集群」和「负载均衡器」。</p><ul><li>应用集群：将同一应用部署到多台机器上，组成处理集群，接收负载均衡设备分发的请求，进行处理并返回响应的数据</li><li>负载均衡器：将用户访问的请求根据对应的负载均衡算法，分发到集群中的一台服务器进行处理</li></ul><h3 id="负载均衡作用"><a href="#负载均衡作用" class="headerlink" title="负载均衡作用"></a>负载均衡作用</h3><ul><li>解决服务器的高并发压力，提高应用程序的处理性能</li><li>提供故障转移，实现高可用</li><li>通过添加或减少服务器数量，增强网站的可扩展性</li><li>在负载均衡器上进行过滤，可以提高系统的安全性</li></ul><h2 id="负载均衡常用处理方式"><a href="#负载均衡常用处理方式" class="headerlink" title="负载均衡常用处理方式"></a>负载均衡常用处理方式</h2><p>先说明，我们常用的是 <a href="/middleware/Nginx/Nginx_load_balancing/#四-七层负载均衡">四/七层负载均衡</a> 方式，前面两个方式可以了解。</p><h3 id="用户手动选择"><a href="#用户手动选择" class="headerlink" title="用户手动选择"></a>用户手动选择</h3><p>这种方式比较原始，主要实现的方式就是在网站主页上面提供不同线路、不同服务器链接方式，让用户来选择自己访问的具体服务器，来实现负载均衡。</p><p>如下图，用户点击不同的下载方式，就会跳转到不同的下载地址。这是主动式的负载均衡，我们无法控制用户的选择。如果用户全部点击第一个下载方式，那么服务器的压力将非常大。</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220803/image.2auhoddxb2zo.webp" alt="image"></p><h3 id="DNS轮询方式"><a href="#DNS轮询方式" class="headerlink" title="DNS轮询方式"></a>DNS轮询方式</h3><p>DNS：域名系统（服务）协议（DNS）是一种分布式网络目录服务，主要用于域名与 IP 地址的相互转换。</p><p>大多域名注册商都支持对同一个主机名添加多条 A 记录，这就是 DNS 轮询，DNS 服务器将解析请求按照 A 记录的顺序，随机分配到不同的 IP 上，这样就能完成简单的负载均衡。DNS 轮询的成本非常低，在一些不重要的服务器，被经常使用。</p><p>如下图：客户端如果想访问服务器集群，首先去 DNS 服务器获取我们曾经在 DNS 服务器保存的「记录表」，这个「记录表」将会把某个服务器的地址返回给客户端，客户端再根据这个地址，访问指定的服务器。这个「记录表」在开始期间需要我们去 DNS 服务器进行添加。</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220803/image.b1m3qaeuxsk.webp" alt="image"></p><p>「记录表」长什么样，如下图的主机记录 www。这是我为某一个域名添加的 IP 地址，用 2 台服务器来做负载均衡。其中两个记录值都绑定了 <code>www.nginx521.cn</code> 地址。(一个域名可以绑定多个IP地址)</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220803/image.3drj9szeeus0.webp" alt="image"></p><p>验证:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www.nginx521.cn</span><br></pre></td></tr></table></figure><p>注意：记得清空本地的 DNS 缓存，如果本地有缓存，无论你怎么 <code>ping</code>，都会 <code>ping</code> 到缓存的服务器地址，无法负载均衡</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig/flushdns</span><br></pre></td></tr></table></figure><p>目前需要 <code>ping</code> 一次然后清理一次缓存，才能实现负载均衡的轮询效果。</p><p>我们发现使用 DNS 来实现轮询，不需要投入过多的成本，虽然 DNS 轮询成本低廉，但是 DNS 负载均衡存在明显的缺点：</p><ol><li><p>可靠性低</p><p>假设一个域名 DNS 轮询多台服务器，如果其中的一台服务器发生故障，那么所有的访问该服务器的请求将不会有所回应，即使你将该服务器的 IP 从 DNS 中去掉，但是由于各大宽带接入商将众多的 DNS 存放在缓存中，以节省访问时间，导致 DNS 不会实时更新。所以 DNS 轮流上一定程度上解决了负载均衡问题，但是却存在可靠性不高的缺点。</p></li><li><p>负载均衡不均衡</p><p>DNS 负载均衡采用的是简单的轮询负载算法，不能区分服务器的差异，不能反映服务器的当前运行状态，不能做到为性能好的服务器多分配请求，另外本地计算机也会缓存已经解析的域名到 IP 地址的映射，这也会导致使用该 DNS 服务器的用户在一定时间内访问的是同一台 Web 服务器，从而引发 Web 服务器减的负载不均衡。</p><p>负载不均衡则会导致某几台服务器负荷很低，而另外几台服务器负荷确很高，处理请求的速度慢，配置高的服务器分配到的请求少，而配置低的服务器分配到的请求多。</p></li></ol><h3 id="四-七层负载均衡"><a href="#四-七层负载均衡" class="headerlink" title="四/七层负载均衡"></a>四/七层负载均衡</h3><p>介绍四/七层负载均衡之前，我们先了解一个概念，OSI(open system interconnection)，叫开放式系统互联模型，这个是由国际标准化组织 ISO 指定的一个不基于具体机型、操作系统或公司的网络体系结构。该模型将网络通信的工作分为七层。</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220803/image.5g3vvj5xa3g0.webp" alt="image"></p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220803/image.6uq265ihol80.webp" alt="image"></p><ul><li>应用层：为应用程序提供网络服务。</li><li>表示层：对数据进行格式化、编码、加密、压缩等操作</li><li>会话层：建立、维护、管理会话连接</li><li>传输层：建立、维护、管理端到端的连接，常见的有 TCP/UDP</li><li>网络层：IP 寻址和路由选择</li><li>数据链路层：控制网络层与物理层之间的通信</li><li>物理层：比特流传输</li></ul><p><strong>什么是四层负载均衡</strong></p><p>所谓四层负载均衡指的是 OSI 七层模型中的传输层，主要是基于 IP + PORT 的负载均衡</p><p>实现四层负载均衡的方式：</p><ul><li>硬件：F5 BIG-IP、Radware 等，性能好，成本高、无法扩展</li><li>软件：LVS、Nginx、Hayproxy 等，性能较好，成本低、可以扩展</li></ul><p><strong>什么是七层负载均衡</strong></p><p>所谓的七层负载均衡指的是在应用层，主要是基于虚拟的 URL 或主机 IP 的负载均衡</p><p>实现七层负载均衡的方式：</p><ul><li>软件：Nginx、Hayproxy 等</li></ul><p><strong>四层和七层负载均衡的区别</strong></p><ul><li>四层负载均衡数据包是在底层就进行了分发，而七层负载均衡数据包则在最顶端进行分发，所以四层负载均衡的效率比七层负载均衡的要高（四层比七层少，速度块，效率高，但是可能请求丢失等）</li><li>四层负载均衡不识别域名，而七层负载均衡识别域名</li></ul><p>处理四层和七层负载以外，其实还有二层、三层负载均衡，二层是在数据链路层基于 mac 地址来实现负载均衡，三层是在网络层一般采用虚拟 IP 地址的方式实现负载均衡。</p><p><strong>实际环境采用的模式：四层负载(LVS) + 七层负载(Nginx)</strong></p><h2 id="七层负载均衡"><a href="#七层负载均衡" class="headerlink" title="七层负载均衡"></a>七层负载均衡</h2><p>Nginx 要实现七层负载均衡需要用到 proxy_pass 代理模块配置。Nginx 默认安装支持这个模块，我们不需要再做任何处理。Nginx 的负载均衡是在 Nginx 反向代理的基础上把用户的请求根据指定的算法分发到一组「upstream 虚拟服务池」。</p><h3 id="七层负载均衡指令"><a href="#七层负载均衡指令" class="headerlink" title="七层负载均衡指令"></a>七层负载均衡指令</h3><h4 id="upstream指令"><a href="#upstream指令" class="headerlink" title="upstream指令"></a>upstream指令</h4><p>该指令是用来定义一组服务器，它们可以是监听不同端口的服务器，并且也可以是同时监听 TCP 和 Unix socket 的服务器。服务器可以指定不同的权重，默认为 1。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>upstream &lt;name&gt; {…}</td><td>—</td><td>http</td></tr></tbody></table><h4 id="server指令"><a href="#server指令" class="headerlink" title="server指令"></a>server指令</h4><p>该指令用来指定后端服务器的名称和一些参数，可以使用域名、IP、端口或者 Unix socket。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>server &lt;name&gt; [paramerters]</td><td>—</td><td>upstream</td></tr></tbody></table><p>server 后的 name 就是 upstream 后的 name，两者保持一致。</p><h3 id="七层负载均衡指令案例"><a href="#七层负载均衡指令案例" class="headerlink" title="七层负载均衡指令案例"></a>七层负载均衡指令案例</h3><p>准备四台服务器，一台用来做负载均衡器，三台用来接收负载均衡器的请求。</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220803/image.etsfgkwsxaw.webp" alt="image"></p><p>因为目前只有两台服务器，所以一台用来做负载均衡器，另外一台用来接收负载均衡器的请求。</p><p>服务器设置：这里以三个端口代替三个服务器，在配置文件进行如下配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务器 1</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>   <span class="number">9001</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    <span class="attribute">default_type</span> text/html;</span><br><span class="line">    <span class="attribute">location</span> /&#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> <span class="string">'&lt;h1&gt;192.168.200.146:9001&lt;/h1&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 服务器 2</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>   <span class="number">9002</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    <span class="attribute">default_type</span> text/html;</span><br><span class="line">    <span class="attribute">location</span> /&#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> <span class="string">'&lt;h1&gt;192.168.200.146:9002&lt;/h1&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 服务器 3</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>   <span class="number">9003</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    <span class="attribute">default_type</span> text/html;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> <span class="string">'&lt;h1&gt;192.168.200.146:9003&lt;/h1&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>负载均衡器设置：这是一个 Nginx 代理服务器，让它去负载均衡访问三个服务器，在配置文件进行如下配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend&#123;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9091</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9092</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9093</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">8083</span>;</span><br><span class="line"><span class="attribute">server_name</span> localhost;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://backend;   <span class="comment"># backend 要对应上 upstream 后的值，根据需求修改</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问负载均衡器的地址，如 <code>http://192.168.200.133:8083</code>，它会找到 <code>proxy_pass</code> 后的地址，比如上方，它会根据 backend 找到对应的 upstream 里内地址，替换掉 backend，变成：</p><ul><li>proxy_pass <code>http://192.168.200.146:9091</code></li><li>proxy_pass <code>http://192.168.200.146:9092</code></li><li>proxy_pass <code>http://192.168.200.146:9093</code></li></ul><p>但是它不会全部访问三个服务器地址，而是根据自己的算法（轮询）选择其中一个服务器地址。</p><h3 id="七层负载均衡状态"><a href="#七层负载均衡状态" class="headerlink" title="七层负载均衡状态"></a>七层负载均衡状态</h3><p>代理服务器在负责均衡调度中的状态有以下几个：</p><table><thead><tr><th>状态</th><th>概述</th></tr></thead><tbody><tr><td>down</td><td>当前的 server 暂时不参与负载均衡</td></tr><tr><td>backup</td><td>预留的备份服务器</td></tr><tr><td>max_fails</td><td>允许请求失败的次数</td></tr><tr><td>fail_timeout</td><td>经过 max_fails 失败后，服务暂停时间</td></tr><tr><td>max_conns</td><td>限制最大的接收连接数</td></tr></tbody></table><h4 id="down"><a href="#down" class="headerlink" title="down"></a>down</h4><p><code>down</code> 指令将该服务器标记为永久不可用，那么负载均衡器将不参与该服务器的负载均衡。</p><p>如下，如果不希望负载均衡器以负载均衡来处理 <code>192.168.200.146</code> 服务器：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend&#123;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9001</span> down;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9002</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9003</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">8083</span>;</span><br><span class="line"><span class="attribute">server_name</span> localhost;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该状态一般会对需要停机维护的服务器进行设置。</p><h4 id="backup"><a href="#backup" class="headerlink" title="backup"></a>backup</h4><p><code>backup</code> 指令将该服务器标记为备份服务器，当主服务器不可用时，才用备份服务器来传递请求。</p><p>它不同于 down 指令，down 指令将服务器永久禁止，而 backp 指令仅仅临时禁止，当主服务器不可用后，临时禁止的服务器就会站出来。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend&#123;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9001</span> down;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9002</span> backup;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9003</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">8083</span>;</span><br><span class="line"><span class="attribute">server_name</span> localhost;</span><br><span class="line"><span class="attribute">location</span> /&#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上方代码中 9001 服务器永久禁止，而 9002 服务器是备份服务器，所以 9003 服务器是主服务器。</p><p>此时需要将 9003 端口的访问禁止掉，用它来模拟当唯一对外提供访问的服务宕机以后，backup 的备份服务器就能开始对外提供服务。</p><p>为了测试验证，我们需要使用防火墙来进行拦截。</p><p>介绍一个工具 <code>firewall-cmd</code>，该工具是 Linux 提供的专门用来操作 firewall 防火墙的。</p><p>查询防火墙中指定的端口是否开放</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --query-port=9001/tcp</span><br></pre></td></tr></table></figure><p>开放一个指定的端口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --add-port=9002/tcp</span><br></pre></td></tr></table></figure><p>批量添加开发端口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --add-port=9001-9003/tcp</span><br></pre></td></tr></table></figure><p>如何移除一个指定的端口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --remove-port=9003/tcp</span><br></pre></td></tr></table></figure><p>重新加载</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>其中</p><ul><li><code>--permanent</code> 表示设置为持久</li><li><code>--add-port</code> 表示添加指定端口</li><li><code>--remove-port</code> 表示移除指定端口</li></ul><p>经过测试，禁用掉 9003 端口后，再次访问负载均衡器，它只会请求 9002 端口的服务器(备份服务器)，而恢复 9003 端口，只会请求 9003 端口的服务器。</p><h4 id="max-conns"><a href="#max-conns" class="headerlink" title="max_conns"></a>max_conns</h4><p><code>max_conns</code> 指令用来限制同时连接到 upstream 负载上的单个服务器的最大连接数。默认为 0，表示不限制，使用该配置可以根据后端服务器处理请求的并发量来进行设置，防止后端服务器被压垮。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>max_conns=&lt;number&gt;</td><td>0</td><td>upstream</td></tr></tbody></table><ul><li>number 是大于 0 的数字。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend&#123;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9001</span> down;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9002</span> backup;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9003</span> max_conns=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">8083</span>;</span><br><span class="line"><span class="attribute">server_name</span> localhost;</span><br><span class="line"><span class="attribute">location</span> /&#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第 4 行配置标识 9003 端口的服务器最大能被 2 个客户端请求。</p><h4 id="max-fails和fail-timeout"><a href="#max-fails和fail-timeout" class="headerlink" title="max_fails和fail_timeout"></a>max_fails和fail_timeout</h4><p><code>max_fails</code> 指令设置允许请求代理服务器失败的次数，默认为 1。</p><p><code>fail_timeout</code> 指令设置经过 max_fails 失败后，服务暂停的时间，默认是 10 秒。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>max_fails=&lt;number&gt;</td><td>1</td><td>upstream</td></tr><tr><td>fail_timeout=&lt;time&gt;</td><td>10 秒</td><td>upstream</td></tr></tbody></table><ul><li>number 是大于 0 的数字</li><li>time 是时间，单位为秒</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend&#123;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.133:9001</span> down;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.133:9002</span> backup;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.133:9003</span> max_fails=<span class="number">3</span> fail_timeout=<span class="number">15</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">8083</span>;</span><br><span class="line"><span class="attribute">server_name</span> localhost;</span><br><span class="line"><span class="attribute">location</span> /&#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七层负载均衡策略"><a href="#七层负载均衡策略" class="headerlink" title="七层负载均衡策略"></a>七层负载均衡策略</h3><p>介绍完 Nginx 负载均衡的相关指令后，我们已经能实现将用户的请求分发到不同的服务器上，那么除了采用默认的分配方式以外，我们还能采用什么样的负载算法？</p><p>Nginx 的 upstream 支持如下六种方式的分配算法，分别是:</p><table><thead><tr><th>算法名称</th><th>说明</th></tr></thead><tbody><tr><td>轮询</td><td>默认方式</td></tr><tr><td>weight</td><td>权重方式</td></tr><tr><td>ip_hash</td><td>依据 IP 分配方式</td></tr><tr><td>least_conn</td><td>依据最少连接方式</td></tr><tr><td>url_hash</td><td>依据 URL 分配方式</td></tr><tr><td>fair</td><td>依据响应时间方式</td></tr></tbody></table><h4 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h4><p>这是 <code>upstream</code> 模块负载均衡默认的策略。每个请求会按时间顺序逐个分配到不同的后端服务器。轮询不需要额外的配置。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend&#123;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9001</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9002</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9003</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">8083</span>;</span><br><span class="line"><span class="attribute">server_name</span> localhost;</span><br><span class="line"><span class="attribute">location</span> /&#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="weight加权-加权轮询"><a href="#weight加权-加权轮询" class="headerlink" title="weight加权[加权轮询]"></a>weight加权[加权轮询]</h4><p><code>weight</code> 指令用来设置服务器的权重，默认为 1，权重数据越大，被分配到请求的几率越大；该权重值，主要是针对实际工作环境中不同的后端服务器硬件配置进行调整的，所有此策略比较适合服务器的硬件配置差别比较大的情况。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>weight=&lt;number&gt;</td><td>1</td><td>upstream</td></tr></tbody></table><ul><li>number 是大于 0 的数字</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend&#123;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9001</span> weight=<span class="number">10</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9002</span> weight=<span class="number">5</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9003</span> weight=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">8083</span>;</span><br><span class="line"><span class="attribute">server_name</span> localhost;</span><br><span class="line"><span class="attribute">location</span> /&#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h4><p>当对后端的多台动态应用服务器做负载均衡时，<code>ip_hash</code> 指令能够将某个客户端 IP 的请求通过哈希算法定位到同一台后端服务器上。</p><p>这样，当来自某一个 IP 的用户在后端 Web 服务器 A 上登录后，在访问该站点的其他 URL，能保证其访问的还是后端 Web 服务器 A</p><p>总结：哪个服务器曾经处理过请求，无论在哪里，相同的请求依然让该服务器处理</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>ip_hash;</td><td>—</td><td>upstream</td></tr></tbody></table><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend&#123;</span><br><span class="line">ip_hash;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9001</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9002</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9003</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">8083</span>;</span><br><span class="line"><span class="attribute">server_name</span> localhost;</span><br><span class="line"><span class="attribute">location</span> /&#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要额外多说一点的是使用 ip_hash 指令无法保证后端服务器的负载均衡，可能导致有些后端服务器接收到的请求多，有些后端服务器接收的请求少，而且设置后端服务器权重等方法将不起作用。</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220804/image.7a0ysgphfxg0.webp" alt="image"></p><h4 id="least-conn"><a href="#least-conn" class="headerlink" title="least_conn"></a>least_conn</h4><p>最少连接数，把请求转发给连接数较少的后端服务器。</p><p>轮询算法是把请求平均的转发给各个后端，使它们的负载大致相同；但是，有些请求占用的时间很长，会导致其所在的后端负载较高。这种情况下，<code>least_conn</code> 这种方式就可以达到更好的负载均衡效果。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend&#123;</span><br><span class="line">least_conn;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9001</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9002</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9003</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">8083</span>;</span><br><span class="line"><span class="attribute">server_name</span> localhost;</span><br><span class="line"><span class="attribute">location</span> /&#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此负载均衡策略适合请求处理时间长短不一造成服务器过载的情况。</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220804/image.5vug3q9whrc0.webp" alt="image"></p><h4 id="url-hash"><a href="#url-hash" class="headerlink" title="url_hash"></a>url_hash</h4><p>按访问 URL 的 hash 结果来分配请求，使每个 URL 定向到同一个后端服务器，要配合缓存命中来使用。</p><p>当出现同一个资源多次请求，可能会到达不同的服务器上，导致不必要的多次下载，缓存命中率不高，以及一些资源时间的浪费时，使用 <code>url_hash</code>，可以使得同一个 URL（也就是同一个资源请求）会到达同一台服务器，一旦缓存住了资源，再此收到请求，就可以从缓存中读取。</p><p>总结：发送相同的请求时，希望只有一个服务器处理该请求，使用 <code>uri_hash</code>。因为 URL 相同，则哈希值(hash)相同，那么哈希值对应的服务器也相同。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend&#123;</span><br><span class="line"><span class="attribute">hash</span> &amp;request_uri;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9001</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9002</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9003</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">8083</span>;</span><br><span class="line"><span class="attribute">server_name</span> localhost;</span><br><span class="line"><span class="attribute">location</span> /&#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图：文件系统有一个文件，目前只有 web 服务 1 和服务 3 获取了该文件，那么我们想要下载这个文件时，只能找服务 1 或服务 3，这时候就固定一个 URL，该 URL 不允许服务 2 进行处理，那么如何规定哪个服务处理呢？就用到 <code>url_hash</code>。</p><p>它会根据 URL 计算处哈希值，由哈希值对应服务，所以固定下载文件的 URL，就固定了一个服务处理。</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220804/image.utb83x535xc.webp" alt="image"></p><h4 id="fair"><a href="#fair" class="headerlink" title="fair"></a>fair</h4><p><code>fair</code> 指令采用的不是内建负载均衡使用的轮换的均衡算法，而是可以根据页面大小、加载时间长短智能的进行负载均衡。</p><p>那么如何使用第三方模块的 fair 负载均衡策略？</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nupstream</span> backend&#123;</span><br><span class="line">fair;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9001</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9002</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9003</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">8083</span>;</span><br><span class="line"><span class="attribute">server_name</span> localhost;</span><br><span class="line"><span class="attribute">location</span> /&#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样直接使用会报错，因为 fair 属于第三方模块实现的负载均衡。需要添加 <code>nginx-upstream-fair</code> 模块，如何添加对应的模块：</p><ol><li>下载 <code>nginx-upstream-fair</code> 模块，下载地址如下：</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/gnosek/nginx-upstream-fair</span><br></pre></td></tr></table></figure><ol start="2"><li>将下载的文件上传到服务器并进行解压缩</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入安装包目录</span></span><br><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">unzip nginx-upstream-fair-master.zip</span><br></pre></td></tr></table></figure><ol start="3"><li>我的解压目录在 <code>/opt</code>，所以第 6 步记得指定好模块的路径。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv nginx-upstream-fair-master fair</span><br></pre></td></tr></table></figure><ol start="4"><li>将原有 <code>/usr/local/nginx/sbin/nginx</code> 进行备份</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /usr/<span class="built_in">local</span>/nginx/sbin/nginx /usr/<span class="built_in">local</span>/nginx/sbin/nginx.backup</span><br></pre></td></tr></table></figure><ol start="5"><li>查看 <code>configure arguments</code> 的配置信息，拷贝出来</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx -V</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝 configure arguments 后面的数据</span></span><br></pre></td></tr></table></figure><ol start="6"><li>进入 Nginx 的安装目录，执行 make clean 清空之前编译的内容</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/nginx/core/nginx-1.21.6</span><br><span class="line"></span><br><span class="line">make clean</span><br></pre></td></tr></table></figure><ol start="7"><li>使用 configure 来配置参数，添加模块，记得加上第（4）步拷贝的配置信息</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --add-module=/opt/fair  <span class="comment"># 记得添加 configure arguments 后的数据</span></span><br></pre></td></tr></table></figure><ol start="8"><li>通过 make 模板进行编译</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>编译可能会出现如下错误，<code>ngx_http_upstream_srv_conf_t</code> 结构中缺少 <code>default_port</code></p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220804/image.vj3xrayy84g.webp" alt="image"></p><p>解决方案：</p><p>在 Nginx 的源码目录（安装包目录）中 <code>src/http/ngx_http_upstream.h</code>，找到 <code>ngx_http_upstream_srv_conf_s</code>，在模块中添加添加 <code>default_port</code> 属性</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/nginx/core/nginx-1.21.6/src/http/ngx_http_upstream.h</span><br></pre></td></tr></table></figure><p>添加内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">in_port_t   default_port</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220804/image.1mcquncem2u8.webp" alt="image"></p><p>然后再进行 make。</p><ol start="9"><li>将安装目录下的 objs 中的 nginx 拷贝到 sbin 目录</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/nginx/core/nginx-1.21.6/objs</span><br><span class="line">cp nginx /usr/<span class="built_in">local</span>/nginx/sbin</span><br></pre></td></tr></table></figure><p>10 .更新nginx</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/nginx/core/nginx-1.21.6</span><br><span class="line">make upgrade</span><br></pre></td></tr></table></figure><p>上面介绍了 Nginx 常用的负载均衡的策略，有人说是 5 种，是把轮询和加权轮询归为一种，也有人说是 6 种。那么在咱们以后的开发中到底使用哪种，这个需要根据实际项目的应用场景来决定的。</p><h3 id="七层负载均衡案例"><a href="#七层负载均衡案例" class="headerlink" title="七层负载均衡案例"></a>七层负载均衡案例</h3><h4 id="案例一：对所有请求实现一般轮询规则的负载均衡"><a href="#案例一：对所有请求实现一般轮询规则的负载均衡" class="headerlink" title="案例一：对所有请求实现一般轮询规则的负载均衡"></a>案例一：对所有请求实现一般轮询规则的负载均衡</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend&#123;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9001</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9002</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9003</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">8083</span>;</span><br><span class="line"><span class="attribute">server_name</span> localhost;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="案例二：对所有请求实现加权轮询规则的负载均衡"><a href="#案例二：对所有请求实现加权轮询规则的负载均衡" class="headerlink" title="案例二：对所有请求实现加权轮询规则的负载均衡"></a>案例二：对所有请求实现加权轮询规则的负载均衡</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend&#123;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9001</span> weight=<span class="number">7</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9002</span> weight=<span class="number">3</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9003</span> weight=<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">8083</span>;</span><br><span class="line"><span class="attribute">server_name</span> localhost;</span><br><span class="line"><span class="attribute">location</span> /&#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理请求概率：9001 端口 &gt; 9003 端口 &gt; 9002 端口</p><h4 id="案例三：对特定资源实现负载均衡"><a href="#案例三：对特定资源实现负载均衡" class="headerlink" title="案例三：对特定资源实现负载均衡"></a>案例三：对特定资源实现负载均衡</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> videobackend&#123;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9001</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9002</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">upstream</span> filebackend&#123;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9003</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9004</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">8084</span>;</span><br><span class="line"><span class="attribute">server_name</span> localhost;</span><br><span class="line"><span class="attribute">location</span> /video/ &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://videobackend;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /file/ &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://filebackend;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送 <code>/video/</code> 请求会被 9001 和 9002 端口的服务器处理。</p><p>发送 <code>/file/</code> 请求会被 9003 和 9004 端口的服务器处理。</p><h4 id="案例四：对不同域名实现负载均衡"><a href="#案例四：对不同域名实现负载均衡" class="headerlink" title="案例四：对不同域名实现负载均衡"></a>案例四：对不同域名实现负载均衡</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> frxbackend&#123;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9001</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9002</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">upstream</span> bingbackend&#123;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9003</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9004</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span><span class="number">8085</span>;</span><br><span class="line"><span class="attribute">server_name</span> www.frx.com;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://frxbackend;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span><span class="number">8086</span>;</span><br><span class="line"><span class="attribute">server_name</span> www.bing.com;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://bingbackend;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>www.frx.com</code> 地址的请求由 9001 端口和 9002 端口处理。</p><p><code>www.bing.com</code> 地址的请求由 9003 端口和 9004 端口处理。</p><h4 id="案例五：实现带有URL重写的负载均衡"><a href="#案例五：实现带有URL重写的负载均衡" class="headerlink" title="案例五：实现带有URL重写的负载均衡"></a>案例五：实现带有URL重写的负载均衡</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend&#123;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9001</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9002</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:9003</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span><span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> localhost;</span><br><span class="line"><span class="attribute">location</span> /file/ &#123;</span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^(/file/.*)</span> /server/<span class="variable">$1</span> <span class="literal">last</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /server &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 <code>/file/xxx</code> 请求重写为 <code>/server/xxx</code>，然后触发 <code>location /server</code>，实现负载均衡。</p><p>此时被负载均衡的服务器地址也会带有 <code>/server</code> 以及后面的参数，如 <code>192.168.200.146:9001/server/xxx</code></p><h2 id="四层负载均衡"><a href="#四层负载均衡" class="headerlink" title="四层负载均衡"></a>四层负载均衡</h2><p>Nginx 在 1.9 之后，增加了一个 stream 模块，用来实现四层协议的转发、代理、负载均衡等。stream 模块的用法跟 http 的用法类似，允许我们配置一组 TCP 或者 UDP 等协议的监听，然后通过 proxy_pass 来转发我们的请求，通过 upstream 添加多个后端服务，实现负载均衡。</p><p>四层协议负载均衡的实现，一般都会用到 LVS、HAProxy、F5 等，要么很贵要么配置很麻烦，而 Nginx 的配置相对来说更简单，更能快速完成工作。</p><h3 id="添加stream模块的支持"><a href="#添加stream模块的支持" class="headerlink" title="添加stream模块的支持"></a>添加stream模块的支持</h3><p>Nginx 默认是没有编译这个模块的，需要使用到 stream 模块，那么需要在编译的时候加上 <code>--with-stream</code>。</p><p>完成添加 <code>--with-stream</code> 的实现步骤：</p><ul><li>将原有 <code>/usr/local/nginx/sbin/nginx</code> 进行备份</li><li>拷贝 <code>Nginx -V</code> 的 configure arguments 配置信息</li><li>在 Nginx 的安装源码进行配置指定对应模块：<code>./configure --with-stream 加上一步拷贝的configure arguments 配置</code></li><li>通过 make 模板进行编译</li><li>将 objs 下面的 nginx 移动到 <code>/usr/local/nginx/sbin</code> 下</li><li>在源码目录下执行 <code>make upgrade</code> 进行升级，这个可以实现不停机添加新模块的功能</li></ul><p>添加模块的详细步骤我已经在 <a href>七层负载均衡策略-fair 指令</a>、<a href>静态资源部署-Nginx 模块添加</a>、<a href>反向代理-添加ssl支持</a> 描述过，而你只需要替换模块名字罢了。</p><h3 id="四层负载均衡指令"><a href="#四层负载均衡指令" class="headerlink" title="四层负载均衡指令"></a>四层负载均衡指令</h3><p>如果不想在 http 模块使用负载均衡，可以在 steam 模块使用。</p><h4 id="stream指令"><a href="#stream指令" class="headerlink" title="stream指令"></a>stream指令</h4><p>该指令提供在其中指定流服务器指令的配置文件上下文。和 http 模块同级。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>stream { … }</td><td>—</td><td>main</td></tr></tbody></table><p>如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="comment"># ......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">stream</span> &#123;</span><br><span class="line">    <span class="attribute">upstream</span> backend&#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.200.146:6379</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.200.146:6378</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">81</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> backend;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="upstream指令-1"><a href="#upstream指令-1" class="headerlink" title="upstream指令"></a>upstream指令</h4><p>该指令和七层负载均衡的 upstream 指令是类似的。</p><h3 id="四层负载均衡的案例"><a href="#四层负载均衡的案例" class="headerlink" title="四层负载均衡的案例"></a>四层负载均衡的案例</h3><p>准备两台服务器，这里称为 A 和 B。服务器 A 的 IP 为 <code>192.168.200.146</code>，服务器 B 的IP 为 <code>192.168.200.133</code>，服务器 A 存放 Redis 和 Tomcat，服务器 B 作为负载均衡器，对服务器 A 的端口进行负载均衡处理。</p><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220804/image.6yak0csdt880.webp" alt="image"></p><h4 id="Redis-配置"><a href="#Redis-配置" class="headerlink" title="Redis 配置"></a>Redis 配置</h4><p>准备 Redis 服务器,在服务器 A 上准备两个 Redis，端口分别是 6379、6378。</p><ol><li>上传 redis 的安装包 <code>redis-4.0.14.tar.gz</code>，这里上传目录是 <code>/opt</code></li><li>将安装包进行解压缩</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf redis-4.0.14.tar.gz</span><br></pre></td></tr></table></figure><ol start="3"><li>进入redis的安装包</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> redis-4.0.14</span><br></pre></td></tr></table></figure><ol start="4"><li>使用 make 和 install 进行编译和安装，这里的安装路径是 <code>/usr/local/redis/redis01</code></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make PREFIX=/usr/<span class="built_in">local</span>/redis/redis01 install</span><br></pre></td></tr></table></figure><ol start="5"><li>拷贝 redis 配置文件 <code>redis.conf</code> 到 <code>/usr/local/redis/redis01/bin</code> 目录中，因为安装后，目录并没有 redis.conf</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /opt/redis-4.0.14/redis.conf/usr/<span class="built_in">local</span>/redis/redis01/bin</span><br></pre></td></tr></table></figure><ol start="6"><li>修改 redis.conf 配置文件，注意：不是添加内容，是修改内容，要自己搜索 bind、port 和 daemonize 进行修改</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind</span> 0.0.0.0   <span class="comment"># 允许任意地址访问</span></span><br><span class="line">port  6379      <span class="comment"># redis 的端口</span></span><br><span class="line">daemonize yes   <span class="comment"># 后台启动 redis</span></span><br></pre></td></tr></table></figure><ol start="7"><li>将 redis01 复制一份为 redis02</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/redis</span><br><span class="line">cp -r redis01 redis02</span><br></pre></td></tr></table></figure><ol start="8"><li>将 redis02 文件夹中的 redis.conf 进行修改，注意：不是添加内容，是修改内容，要自己搜索 bind、port 和 daemonize 进行修改</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind</span> 0.0.0.0   <span class="comment"># 允许任意地址访问</span></span><br><span class="line">port  6378      <span class="comment"># redis 的端口</span></span><br><span class="line">daemonize yes   <span class="comment"># 后台启动 redis</span></span><br></pre></td></tr></table></figure><ol start="9"><li>分别启动，即可获取两个 Redis 并查看</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure><p>使用 Nginx 将请求分发到不同的 Redis 服务器上。</p><p>安装 Redis 并验证能启动成功后，在另一台服务器 B <code>192.168.200.133</code> 的 Nginx 配置文件添加如下内容：（确保安装了 steam 模块）</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">stream</span> &#123;</span><br><span class="line">    <span class="attribute">upstream</span> redisbackend&#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.200.146:6379</span>;   <span class="comment"># 服务器 B 的 6379 端口</span></span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.200.146:6378</span>;   <span class="comment"># 服务器 B 的 6378 端口</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">81</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> redisbackend;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时利用 redis-cli 连接测试</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220804/image.cbee2u83yhs.webp" alt="image"></p><p>服务器 B 通过负载均衡连接到了服务器 A 的 Redis，只是不知道连接的是 6378 还是 6379 端口，可以在 Redis 添加不一样的数据来测试，这里不演示了。</p><h4 id="Tomcat-配置"><a href="#Tomcat-配置" class="headerlink" title="Tomcat 配置"></a>Tomcat 配置</h4><p>准备 Tomcat 服务器 到服务器 A</p><ol><li>上传 tomcat 的安装包，<code>apache-tomcat-8.5.56.tar.gz</code></li><li>将安装包进行解压缩</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf apache-tomcat-8.5.56.tar.gz</span><br></pre></td></tr></table></figure><ol start="3"><li>进入 tomcat 的 bin 目录，启动 tomcat</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> apache-tomcat-8.5.56/bin</span><br><span class="line">./startup</span><br></pre></td></tr></table></figure><p>服务器 B 的配置文件 nginx.conf 配置如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">stream</span> &#123;</span><br><span class="line">    <span class="attribute">upstream</span> redisbackend &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.200.146:6379</span>;    <span class="comment"># 服务器 B 的 6379 端口</span></span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.200.146:6378</span>;    <span class="comment"># 服务器 B 的 6378 端口</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">upstream</span> tomcatbackend &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.200.146:8080</span>;   <span class="comment"># 服务器 B 的 8080 端口</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>  <span class="number">81</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> redisbackend; <span class="comment"># redis 的负载均衡</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span><span class="number">82</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> tomcatbackend;  <span class="comment"># tomcat 的负载均衡</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问服务器 B 的地址进行测试：<code>192.168.200.133:82</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Nginx </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 缓存集成</title>
      <link href="/2022/11/14/Nginx_Cache_integration/"/>
      <url>/2022/11/14/Nginx_Cache_integration/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="Nginx-缓存集成"><a href="#Nginx-缓存集成" class="headerlink" title="Nginx 缓存集成"></a>Nginx 缓存集成</h1><h2 id="缓存的概念"><a href="#缓存的概念" class="headerlink" title="缓存的概念"></a>缓存的概念</h2><p>缓存就是数据交换的缓冲区（称作：Cache），当用户要获取数据的时候，会先从缓存中去查询获取数据，如果缓存中有就会直接返回给用户，如果缓存中没有，则会发请求从服务器重新查询数据，将数据返回给用户的同时将数据放入缓存，下次用户就会直接从缓存中获取数据。</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220805/image.371wkgon7280.webp" alt="image"></p><p>缓存其实在很多场景中都有用到，比如：</p><table><thead><tr><th>场景</th><th>作用</th></tr></thead><tbody><tr><td>操作系统磁盘缓存</td><td>减少磁盘机械操作</td></tr><tr><td>数据库缓存</td><td>减少文件系统的IO操作</td></tr><tr><td>应用程序缓存</td><td>减少对数据库的查询</td></tr><tr><td>Web 服务器缓存</td><td>减少对应用服务器请求次数</td></tr><tr><td>浏览器缓存</td><td>减少与后台的交互次数</td></tr></tbody></table><p>缓存的优点</p><ul><li>减少数据传输，节省网络流量，加快响应速度，提升用户体验</li><li>减轻服务器压力</li><li>提供服务端的高可用性</li></ul><p>缓存的缺点</p><ul><li>数据的不一致</li><li>增加成本</li></ul><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220805/image.2itt4ge9erq0.webp" alt="image"></p><p>在 <a href="/middleware/Nginx/Nginx_Static_resource_deployment/#静态资源缓存配置">静态资源部署 - 缓存配置</a> 的时候，我们学习了如何在浏览器进行缓存，而本内容学习的是 Nginx。</p><p>Nginx 作为 Web 服务器，Nginx 作为 Web 缓存服务器，它介于客户端和应用服务器之间，当用户通过浏览器访问一个 URL 时，Web 缓存服务器会去应用服务器获取要展示给用户的内容，将内容缓存到自己的服务器上，当下一次请求到来时，如果访问的是同一个 URL，Web 缓存服务器就会直接将之前缓存的内容返回给客户端，而不是向应用服务器再次发送请求。Web 缓存降低了应用服务器、数据库的负载，减少了网络延迟，提高了用户访问的响应速度，增强了用户的体验。</p><h2 id="Web缓存服务"><a href="#Web缓存服务" class="headerlink" title="Web缓存服务"></a>Web缓存服务</h2><p>Nginx 是从 0.7.48 版开始提供缓存功能。Nginx 是基于 Proxy Store 来实现的，<strong>其原理是把 URL 及相关组合当做 Key，在使用 MD5 算法对 Key 进行哈希化，得到硬盘上对应的哈希目录路径，从而将缓存内容保存在该目录中</strong>。它可以支持任意 URL 连接，同时也支持 404/301/302 这样的非200 状态码。Nginx 即可以支持对指定 URL 或者状态码设置过期时间，也可以使用 purge 命令来手动清除指定 URL 的缓存。</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220805/image.5rf186zoffg0.webp" alt="image"></p><h2 id="缓存设置相关指令"><a href="#缓存设置相关指令" class="headerlink" title="缓存设置相关指令"></a>缓存设置相关指令</h2><p>Nginx 的 Web 缓存服务主要是使用 <code>ngx_http_proxy_module</code> 模块相关指令集来完成，接下来我们把常用的指令来进行介绍下。</p><p><a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html" target="_blank" rel="noopener">ngx_http_proxy_module 文档地址</a></p><h3 id="proxy-cache-path"><a href="#proxy-cache-path" class="headerlink" title="proxy_cache_path"></a>proxy_cache_path</h3><p>该指定用于设置缓存文件的存放路径。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>proxy_cache_path &lt;path&gt; [levels=number]<br> &lt;keys_zone=zone_name:zone_size&gt; [inactive=time][max_size=size];</td><td>—</td><td>http</td></tr></tbody></table><p><code>path</code>：缓存路径地址，如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/proxy_cache</span><br></pre></td></tr></table></figure><p><code>levels</code>: 指定该缓存空间 <code>path</code> 基础上新建的目录，最多可以设置 3 层，每层取 1 到 2 个字母作为目录名，格式为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">levels=num:num:num   # 三个 num 代表三层，每层目录名分别取 num 个字母</span><br><span class="line">levels=num:num       # 两个 num 代表两层，每层目录名分别取 num 个字母</span><br><span class="line">levels=num           # 一个 num 代表一层，每层目录名分别取 num 个字母</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">levels=1:2   # 缓存空间有两层目录，第一层目录名取 1 个字母，第二层目录名取 2 个字母</span><br></pre></td></tr></table></figure><p>字母名从 MD5 加密的值后面往前截取。</p><p>举例说明：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设 proxy_cache_key 为 kele，通过 MD5 加密以后的值为 27ce47ea65c1381dbe5175f7c77d8a3a</span></span><br><span class="line">levels=1:2    # 最终的存储路径为 /usr/local/proxy_cache/a/a3，每层截取个数根据 1:2</span><br><span class="line">levels=2:1:2  # 最终的存储路径为 /usr/local/proxy_cache/3a/a/d8，每层截取个数根据 2:1:2</span><br><span class="line">levels=2:2:2  # 最终的存储路径为 /usr/local/proxy_cache/3a/8a/7d，每层截取个数根据 2:2:2</span><br></pre></td></tr></table></figure><p>还不理解吗？存储路径在 <code>path</code> 目录基础上再创建新的目录，新的目录名从加密后的值的后面往前面截取。</p><p><code>keys_zone</code>：用来为这个存key的缓存区设置名称和指定大小，如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keys_zone=kele:200m  # 缓存区的名称是 kele，大小为 200M，1M 大概能存储 8000 个 keys</span><br></pre></td></tr></table></figure><p><code>inactive</code>：指定的时间内未访问的缓存数据会从缓存中删除，默认情况下，<code>inactive</code> 设置为 10 分钟。如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inactive=1d   # 缓存数据在 1 天内没有被访问就会被删除</span><br></pre></td></tr></table></figure><p><code>max_size</code>：设置最大缓存空间，如果缓存空间存满，默认会覆盖缓存时间最长的资源，默认单位为兆。如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max_size=20g    # 最大缓存空间为 20G</span><br></pre></td></tr></table></figure><p>配置实例:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line"><span class="attribute">proxy_cache_path</span> /usr/local/proxy_cache keys_zone=kele:<span class="number">200m</span> levels=<span class="number">1</span>:<span class="number">2</span>:<span class="number">1</span> inactive=<span class="number">1d</span> max_size=<span class="number">20g</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时重启 Nginx 配置文件，发现 <code>/usr/local</code> 目录里多出一个目录，名字叫做 proxy_cache。</p><h3 id="proxy-cache"><a href="#proxy-cache" class="headerlink" title="proxy_cache"></a>proxy_cache</h3><p>该指令用来开启或关闭代理缓存，如果是开启则自定使用哪个缓存区来进行缓存。默认关闭。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>proxy_cache &lt;zone_name | off&gt;;</td><td>proxy_cache off;</td><td>http、server、location</td></tr></tbody></table><p>zone_name：指定使用缓存区的名称。</p><p>缓存区的名称必须是 <code>proxy_cache_path</code> 里的 <code>keys_zone</code> 生成的缓存名。</p><h3 id="proxy-cache-key"><a href="#proxy-cache-key" class="headerlink" title="proxy_cache_key"></a>proxy_cache_key</h3><p>该指令用来设置 Web 缓存的 key 值，Nginx 会根据 key 值利用 MD5 计算处哈希值并缓存起来，作为缓存目录名的参考。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>proxy_cache_key &lt;key&gt;;</td><td>proxy_cache_key $scheme$proxy_host$request_uri;</td><td>http、server、location</td></tr></tbody></table><p>如 kele 由 MD5 计算出来是 27ce47ea65c1381dbe5175f7c77d8a3a</p><p>在哪计算出来的？ 前往 <a href="https://md5jiami.bmcx.com/" target="_blank" rel="noopener">MD5 在线加密网站</a></p><h3 id="proxy-cache-valid"><a href="#proxy-cache-valid" class="headerlink" title="proxy_cache_valid"></a>proxy_cache_valid</h3><p>该指令用来对不同返回状态码的 URL 设置不同的缓存时间。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>proxy_cache_valid [code …… ] &lt;time&gt;;</td><td>—</td><td>http、server、location</td></tr></tbody></table><p>如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_cache_valid</span> <span class="number">200</span> <span class="number">302</span> <span class="number">10m</span>; <span class="comment"># 为 200 和 302 的响应 URL 设置 10 分钟缓存时间</span></span><br><span class="line"><span class="attribute">proxy_cache_valid</span> <span class="number">404</span> <span class="number">1m</span>;      <span class="comment"># 为 404 的响应 URL 设置 1 分钟缓存时间</span></span><br><span class="line"><span class="attribute">proxy_cache_valid</span> any <span class="number">1m</span>;      <span class="comment"># 对所有响应状态码的URL都设置 1 分钟缓存时间</span></span><br></pre></td></tr></table></figure><h3 id="proxy-cache-min-uses"><a href="#proxy-cache-min-uses" class="headerlink" title="proxy_cache_min_uses"></a>proxy_cache_min_uses</h3><p>该指令用来设置资源被访问多少次后才会被缓存。默认是 1 次。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>proxy_cache_min_uses &lt;number&gt;;</td><td>proxy_cache_min_uses 1;</td><td>http、server、location</td></tr></tbody></table><h3 id="proxy-cache-methods"><a href="#proxy-cache-methods" class="headerlink" title="proxy_cache_methods"></a>proxy_cache_methods</h3><p>该指令是设置缓存哪些 HTTP 方法的请求资源。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>proxy_cache_methods &lt;GET | HEAD | POST&gt;;</td><td>proxy_cache_methods GET HEAD;</td><td>http、server、location</td></tr></tbody></table><p>默认缓存 HTTP 的 GET 和 HEAD 方法的请求资源，不缓存 POST 方法的请求资源。</p><h2 id="缓存设置案例"><a href="#缓存设置案例" class="headerlink" title="缓存设置案例"></a>缓存设置案例</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220805/image.4ye8ddxwbng0.webp" alt="image"></p><h3 id="步骤实现"><a href="#步骤实现" class="headerlink" title="步骤实现"></a>步骤实现</h3><p><strong>应用服务器的环境准备</strong></p><ol><li><p>在 <code>192.168.200.146</code> 服务器 A 上的 tomcat 的 webapps 下面添加一个 js 目录，并在 js 目录中添加一个 jquery.js 文件</p></li><li><p>启动 tomcat</p></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/tomcat/bin</span><br><span class="line">./startup.sh</span><br></pre></td></tr></table></figure><ol start="3"><li>访问服务器 A 进行测试</li></ol><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://192.168.200.146:8080/js/jquery.js</span></span><br></pre></td></tr></table></figure><p><strong>Nginx 的环境准备</strong></p><ol><li>准备服务器 B 完成 Nginx 的反向代理配置</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line"><span class="attribute">upstream</span> backend&#123;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.200.146:8080</span>;   <span class="comment"># 服务器 A 地址</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>       <span class="number">8080</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://backend/js/;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>完成 Nginx 缓存配置</li></ol><p><strong>有注释版</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    <span class="attribute">proxy_cache_path</span> /usr/local/proxy_cache levels=<span class="number">2</span>:<span class="number">1</span> keys_zone=bing:<span class="number">200m</span> inactive=<span class="number">1d</span> max_size=<span class="number">20g</span>;</span><br><span class="line">    <span class="attribute">upstream</span> backend&#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.200.146:8080</span>;   <span class="comment"># 服务器 A 的地址</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">8080</span>;     <span class="comment"># 监听 8080 端口</span></span><br><span class="line">        <span class="attribute">server_name</span>  localhost; <span class="comment"># 监听 localhost 的IP</span></span><br><span class="line">        <span class="attribute">location</span> / &#123;<span class="comment"># 监听包含 / 的请求</span></span><br><span class="line">            <span class="attribute">proxy_cache</span> bing;    <span class="comment"># 开启 bing 缓存区，和第 2 行的 keys_zone 对应</span></span><br><span class="line">            <span class="attribute">proxy_cache_key</span> kele;  <span class="comment"># 缓存的 key 值，会被 MD5 解析成字符串用于生成缓存的目录</span></span><br><span class="line">            <span class="attribute">proxy_cache_min_uses</span> <span class="number">5</span>; <span class="comment"># 资源被访问 5 次后才会被缓存</span></span><br><span class="line">            <span class="attribute">proxy_cache_valid</span> <span class="number">200</span> <span class="number">5d</span>;<span class="comment"># 为 200 响应 URL 设置 5 天缓存时间</span></span><br><span class="line">            <span class="attribute">proxy_cache_valid</span> <span class="number">404</span> <span class="number">30s</span>;  <span class="comment"># 为 404 的响应 URL 设置 30 秒缓存时间</span></span><br><span class="line">            <span class="attribute">proxy_cache_valid</span> any <span class="number">1m</span>;<span class="comment"># 为除了上方的任意响应 URL 设置 1 分钟缓存时间</span></span><br><span class="line">            <span class="attribute">add_header</span> nginx-cache <span class="string">"<span class="variable">$upstream_cache_status</span>"</span>;  <span class="comment"># 将缓存的状态放到请求头里</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> http://backend/js/;  <span class="comment"># 代理 backend，将 /js/ 追加到 backend 模块里的地址后面</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>无注释版</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    <span class="attribute">proxy_cache_path</span> /usr/local/proxy_cache levels=<span class="number">2</span>:<span class="number">1</span> keys_zone=bing:<span class="number">200m</span> inactive=<span class="number">1d</span> max_size=<span class="number">20g</span>;</span><br><span class="line">    <span class="attribute">upstream</span> backend&#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.200.146:8080</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">8080</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_cache</span> bing;</span><br><span class="line">            <span class="attribute">proxy_cache_key</span> kele;</span><br><span class="line">            <span class="attribute">proxy_cache_min_uses</span> <span class="number">5</span>;</span><br><span class="line">            <span class="attribute">proxy_cache_valid</span> <span class="number">200</span> <span class="number">5d</span>;</span><br><span class="line">            <span class="attribute">proxy_cache_valid</span> <span class="number">404</span> <span class="number">30s</span>;</span><br><span class="line">            <span class="attribute">proxy_cache_valid</span> any <span class="number">1m</span>;</span><br><span class="line">            <span class="attribute">add_header</span> nginx-cache <span class="string">"<span class="variable">$upstream_cache_status</span>"</span>;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://backend/js/;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>测试是否缓存成功</li></ol><p>利用 <code>$upstream_cache_status</code> 的值在控制台(F12)查看是否缓存。</p><p>第一次访问 <code>192.168.200.113:8080/jquery.js</code>，如图：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220805/image.3p1azxp6cdy0.webp" alt="image"></p><p>因为第一次访问时，正在缓存，所以返回的请求头 MISS 是没有缓存成功。</p><p>第二次访问 <code>192.168.200.113:8080/jquery.js</code>，如图：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220805/image.73w7kaxo8r00.webp" alt="image"></p><p>HIT 代表成功缓存。</p><ol start="4"><li>测试 404 缓存时间</li></ol><p>测试 404 缓存时间，我们访问 <code>192.168.200.113:8080/jquery.js111</code>，它会返回 404 页面，并缓存 404 页面，当我们立即访问正确的 <code>192.168.200.113:8080/jquery.js</code>，它依然返回 404 页面，因为 <code>/jquery.js</code> 请求目前被缓存为 404，还没到 30 秒过期，等 30 秒后再访问，就成功了。</p><h2 id="缓存的删除"><a href="#缓存的删除" class="headerlink" title="缓存的删除"></a>缓存的删除</h2><p>这里介绍两种方式：</p><ul><li>删除对应的缓存目录</li><li>使用第三方扩展模块</li></ul><h3 id="删除缓存目录"><a href="#删除缓存目录" class="headerlink" title="删除缓存目录"></a>删除缓存目录</h3><p>假设缓存目录是 <code>/usr/local/proxy_cache/</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /usr/<span class="built_in">local</span>/proxy_cache/......</span><br></pre></td></tr></table></figure><p>如果想删除某个缓存目录，就在后面加上目录名。如果想删除整个缓存目录，直接删除 <code>/usr/local/proxy_cache/</code> 即可。</p><h3 id="ngx-cache-purge删除"><a href="#ngx-cache-purge删除" class="headerlink" title="ngx_cache_purge删除"></a>ngx_cache_purge删除</h3><p>使用第三方扩展模块 <code>ngx_cache_purge</code> 进行删除缓存。</p><ol><li><p>下载 <code>ngx_cache_purge</code> 模块对应的资源包，并上传到服务器的 <code>/root/nginx/module/</code> 目录下。</p><p>这里的资源包是 ngx_cache_purge-2.3.tar.gz</p></li><li><p>对资源文件进行解压缩</p></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf ngx_cache_purge-2.3.tar.gz</span><br></pre></td></tr></table></figure><ol start="3"><li>修改文件夹名称为 <code>purge</code>，方便后期配置</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv ngx_cache_purge-2.3 purge</span><br></pre></td></tr></table></figure><ol start="4"><li>查询 Nginx 的配置参数 <code>configure arguments</code>，并拷贝出来</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -V</span><br></pre></td></tr></table></figure><ol start="5"><li>进入 Nginx 的安装包目录，使用 ./configure 进行参数配置，记得加上 <code>nginx -V</code> 查询出来的 <code>configure arguments</code> 参数</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --add-module=/root/nginx/module/purge  <span class="comment"># 加上之前的 configure arguments 参数</span></span><br></pre></td></tr></table></figure><ol start="6"><li>使用 make 进行编译</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><ol start="7"><li>将 Nginx 安装目录的 nginx 二级制可执行文件备份</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /usr/<span class="built_in">local</span>/nginx/sbin/nginx /usr/<span class="built_in">local</span>/nginx/sbin/nginx.backup</span><br></pre></td></tr></table></figure><ol start="8"><li>将编译后的 objs 中的 nginx 拷贝到 nginx 的 sbin 目录下</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp objs/nginx /usr/<span class="built_in">local</span>/nginx/sbin</span><br></pre></td></tr></table></figure><ol start="9"><li>使用 <code>make upgrade</code> 进行升级，记得在安装包目录下执行</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/nginx/core/nginx-1.20.2</span><br><span class="line"></span><br><span class="line">make upgrade</span><br></pre></td></tr></table></figure><ol start="10"><li>在 Nginx 配置文件中进行如下配置</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    <span class="attribute">location</span> ~/purge(/.*) &#123;</span><br><span class="line">        <span class="attribute">proxy_cache_purge</span> bing kele;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>proxy_cache_purge</code> 指令</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>proxy_cache_purge &lt;cache&gt; &lt;key&gt;</td><td>-</td><td>http、server、location</td></tr></tbody></table><ul><li><code>cache</code> 是 <code>proxy_cache</code>，详细内容看 <a href="https://notes.youngkbt.cn/nginx/cache-integration/#proxy-cache" target="_blank" rel="noopener">proxy_cache</a></li><li><code>key</code> 是 <code>proxy_cache_key</code>，详细内容看 <a href="https://notes.youngkbt.cn/nginx/cache-integration/#proxy-cache-key" target="_blank" rel="noopener">proxy_cache_key</a></li></ul><h2 id="资源不缓存"><a href="#资源不缓存" class="headerlink" title="资源不缓存"></a>资源不缓存</h2><p>前面咱们已经完成了 Nginx 作为 Web 缓存服务器的使用。但是我们得思考一个问题，<strong>不是所有的数据都适合进行缓存</strong>。比如说对于一些经常发生变化的数据。如果进行缓存的话，就很容易出现用户访问到的数据不是服务器真实的数据。所以对于这些资源我们在缓存的过程中就需要进行过滤，不进行缓存。</p><p>Nginx 也提供了这块的功能设置，需要使用到如下两个指令：</p><ul><li>proxy_no_cache</li><li>proxy_cache_bypass</li></ul><h3 id="proxy-no-cache"><a href="#proxy-no-cache" class="headerlink" title="proxy_no_cache"></a>proxy_no_cache</h3><p>该指令是用来定义不将数据进行缓存的条件，也就是不缓存指定的数据。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>proxy_no_cache &lt;string&gt; …… ;</td><td>—</td><td>http、server、location</td></tr></tbody></table><p>可设置多个 string。</p><p>配置实例：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_no_cache</span> <span class="variable">$cookie_nocache</span> <span class="variable">$arg_nocache</span> <span class="variable">$arg_comment</span>;</span><br></pre></td></tr></table></figure><h3 id="proxy-cache-bypass"><a href="#proxy-cache-bypass" class="headerlink" title="proxy_cache_bypass"></a>proxy_cache_bypass</h3><p>该指令是用来设置不从缓存中获取数据的条件，也就是虽然缓存了指定的资源，但请求过来也不会去获取它，而是去服务器里获取资源。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>proxy_cache_bypass &lt;string&gt; …… ;</td><td>—</td><td>http、server、location</td></tr></tbody></table><p>可设置多个 string。</p><p>配置实例：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_cache_bypass</span> <span class="variable">$cookie_nocache</span> <span class="variable">$arg_nocache</span> <span class="variable">$arg_comment</span>;</span><br></pre></td></tr></table></figure><p>上述两个指令都有一个指定的条件，这个条件可以是多个，<strong>并且多个条件中至少有一个不为空且不等于「0」，则条件满足成立。</strong></p><p>上面给的配置实例是从官方网站获取的，里面使用到了三个变量，分别是 <code>$cookie_nocache</code>、<code>$arg_nocache</code>、<code>$arg_comment</code></p><h3 id="常用不缓存变量"><a href="#常用不缓存变量" class="headerlink" title="常用不缓存变量"></a>常用不缓存变量</h3><p>常用不缓存的三个变量分别为：</p><ul><li><code>$cookie_nocache</code></li><li><code>$arg_nocache</code></li><li><code>$arg_comment</code></li></ul><p>这三个变量分别代表的含义是:</p><ul><li><code>$cookie_nocache</code>：指的是当前请求的 cookie 中 key 为 nocache 的 value 值</li><li><code>$arg_nocache</code> 和 <code>$arg_comment</code>：指的是当前请求的参数中属性名为 nocache 和 comment 对应的属性值</li></ul><p>案例演示:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">log_format</span> params <span class="variable">$cookie_nocache</span> | <span class="variable">$arg_nocache</span> | <span class="variable">$arg_comment</span>；</span><br><span class="line">server &#123;</span><br><span class="line">    <span class="attribute">listen</span><span class="number">8081</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">access_log</span> logs/access_params.log params;</span><br><span class="line">        <span class="attribute">add_header</span> Set-Cookie <span class="string">'nocache=888'</span>;</span><br><span class="line">        <span class="attribute">root</span> html;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 <code>192.168.200.133:8081?nocache=999&amp;comment=777</code>，然后去日志查看结果，如图所示：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220805/image.695kmtpob840.webp" alt="image"></p><p>以后访问的某一个资源如果不想缓存，在 URL 后面加入三个变量中的任意一个或多个即可，只要它们不为空或 0。</p><p>这三个变量推荐作为不缓存资源的条件，但并不是只能作为不缓存资源的条件。</p><h3 id="案例模板"><a href="#案例模板" class="headerlink" title="案例模板"></a>案例模板</h3><p>设置不缓存资源的配置方案模板：</p><ul><li>如果访问的是 js 文件，则不会缓存该 js 文件</li><li>如果 <code>$nocache</code> <code>$cookie_nocache</code> <code>$arg_nocache</code> <code>$arg_comment</code> 任意不为空或 0，则访问的资源不进行缓存</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span><span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">if</span> (<span class="variable">$request_uri</span> <span class="regexp">~ /.*\.js$)</span>&#123;</span><br><span class="line">            <span class="attribute">set</span> <span class="variable">$nocache</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">proxy_no_cache</span> <span class="variable">$nocache</span> <span class="variable">$cookie_nocache</span> <span class="variable">$arg_nocache</span> <span class="variable">$arg_comment</span>;</span><br><span class="line">        <span class="attribute">proxy_cache_bypass</span> <span class="variable">$nocache</span> <span class="variable">$cookie_nocache</span> <span class="variable">$arg_nocache</span> <span class="variable">$arg_comment</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么不会缓存 js 文件呢，看第 5 - 6 行代码。如果访问的文件是 js 文件，则设置 <code>$nocache</code> 为 1，只要它不为 0，则触发第 8 行代码，<code>proxy_no_cache</code> 后面的参数只要有一个不为空或 0，则访问的资源不进行缓存。</p><hr><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>proxy_cache_path设置缓存路径，其中有一个inactive参数设置cache设置不活跃缓存的删除时间。<br>proxy_cache_valid设置不同响应码的缓存过期时间。</p><p><strong>提出问题</strong></p><p>那么这俩参数同时设置，哪个生效呢？</p><p>根据上面Stack Overflow的说法。<strong>inactive应该需要设置的比valid中时间长。</strong></p><p>注意，inactive时间到了，数据删除。valid过期了数据不会删除。有请求，inactive就刷新计时，valid不变。没请求，inactive和valid都不变。</p><p>分析各种情况：</p><p><strong>1、inactive设置1m，valid设置1h</strong><br>首先，请求进来，cache出现，两个时间开始倒计时。<br>情况一：不断请求这个cache，inactive不断刷新1m倒计时，直到到达1h，valid过期。这时你去请求了一次，nginx重新去读取服务器数据，刷新valid倒计时。期间数据一直在缓存里。不请求，就再过1m删掉。<br>情况二：两次请求间隔超过了1min，inactive生效，删除了这个cache数据，没了。你再请求，相当于重新去服务器拿了一次数据，inactive和valid倒计时都会重新刷新，不请求，cache里就没有这份数据了</p><p><strong>2、inactive设置1m,valid设置1m</strong><br>首先，请求进来，cache出现，两个时间开始倒计时。<br>情况一：1m内不请求，最后inactive生效删掉。不请求就没缓存了，请求了一次，重新从服务器读取一份，两个计时刷新。<br>情况二：1m内请求了一次，inactive时间刷新，但是valid还在计时，所以1m到了后，缓存过期了。你再请求就重新从服务器读取一份，刷新计时。不请求，就等待1m，由inactive生效删除了缓存</p><p><strong>3、inactive设置1h，valid设置了1m</strong><br>首先，请求进来，cache出现，两个时间开始倒计时。<br>过了1m，缓存过期，数据在没删掉。不请求，直到1h到，inactive删掉缓存。请求了一次，重新从服务器读取，刷新两个计时。</p><p>所以，结论inactive应该需要设置的比valid中时间长。<br>目的是针对，一个长期不使用的缓存数据，把他删掉不占用存储，或者强制刷新。</p><ul><li>inactive是针对两次请求间隔时间，到时间就删掉不占用内存。</li><li>valid是针对持续不断的请求，导致一直缓存，我设置时间强制刷新一下。例如，支付宝每时每刻都有人访问，一直请求，缓存就一直不刷新一直是旧的。</li></ul><p>inactive和valid是配合使用，不是谁时间短覆盖谁的关系。</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Nginx </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 反向代理</title>
      <link href="/2022/11/12/Nginx_Reverse_proxy/"/>
      <url>/2022/11/12/Nginx_Reverse_proxy/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="Nginx-反向代理"><a href="#Nginx-反向代理" class="headerlink" title="Nginx 反向代理"></a>Nginx 反向代理</h1><p><strong>引言</strong></p><p>Nginx 如何变成一个代理服务器？Nginx 又如何将客户端的请求转发给其他的服务器？本内容将学习 Nginx 的反向代理知识。</p><hr><h2 id="反向代理概述"><a href="#反向代理概述" class="headerlink" title="反向代理概述"></a>反向代理概述</h2><p>关于正向代理和反向代理，在 <a href="/pages/9551ee/#名词解释">Nginx - 介绍</a> 已经通过一张图详细的介绍过了，简而言之就是正向代理代理的对象是客户端，反向代理代理的是服务端，这是两者之间最大的区别。</p><p>Nginx 即可以实现正向代理，也可以实现反向代理。</p><p>我们先来通过一个小案例演示下 Nginx 正向代理的简单应用。</p><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p>先提需求：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220802/image.53oygoz19gc0.webp" alt="image"></p><ol><li>服务端的设置：</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">log_format</span> main <span class="string">'client send request=&gt;clientIp=<span class="variable">$remote_addr</span> serverIp=<span class="variable">$host</span>'</span>;</span><br><span class="line">server&#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span>localhost;</span><br><span class="line"><span class="attribute">access_log</span> logs/access.log main;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">root</span> html;</span><br><span class="line"><span class="attribute">index</span> index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用客户端访问服务端：<code>http://192.168.200.133</code>，打开日志查看结果</li></ol><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220802/image.16ifxal7swyk.webp" alt="image"></p><ol start="3"><li>代理服务器设置：</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>  <span class="number">82</span>;</span><br><span class="line">    <span class="attribute">resolver</span> <span class="number">8.8.8.8</span>;   <span class="comment"># 设置 DNS 的 IP，用来解析 proxy_pass 中的域名</span></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://<span class="variable">$host</span><span class="variable">$request_uri</span>;   <span class="comment"># proxy_pass 实现正向代理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>proxy_pass</code> 后面有讲解。</p><ol start="4"><li>客户端配置代理服务器的 IP(192.168.200.146)和 Nginx 配置监听的端口(82)</li></ol><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220802/image.3yx93qbazra0.webp" alt="image"></p><ol start="5"><li>设置完成后，再次通过浏览器访问服务端</li></ol><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220802/image.6litsat09000.webp" alt="image"></p><p>通过对比，上下两次的日志记录，会发现虽然我们是客户端访问服务端，但是使用了代理，那么服务端能看到的只是代理发送过去的请求，这样就使用 Nginx 实现了正向代理的设置。</p><p>但是 Nginx 正向代理，在实际的应用中不是特别多，所以我们简单了解下，接下来我们继续学习 Nginx 的反向代理，这是 Nginx 比较重要的一个功能。</p><h2 id="反向代理语法配置"><a href="#反向代理语法配置" class="headerlink" title="反向代理语法配置"></a>反向代理语法配置</h2><p>Nginx 反向代理模块的指令是由 <code>ngx_http_proxy_module</code> 模块进行解析，该模块在安装 Nginx 的时候已经自动加载到 Nginx 中了，接下来我们把反向代理中的常用指令一一介绍下：</p><ul><li>proxy_pass：配置代理的服务器地址</li><li>proxy_set_header：转发给被代理服务器时，设置一些请求头信息</li><li>proxy_redirect：防止客户端可以看到被代理服务器的地址</li></ul><p>这里只介绍三个指令，关于反向代理的指令非常多，想要了解更多，请前往 <a href="https://nginx.org/en/docs/stream/ngx_stream_proxy_module.html" target="_blank" rel="noopener">Nginx 反向代理文档</a></p><h3 id="proxy-pass"><a href="#proxy-pass" class="headerlink" title="proxy_pass"></a>proxy_pass</h3><p>该指令用来设置被代理服务器地址，可以是主机名称、IP 地址加端口号形式，没有默认值。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>proxy_pass &lt;URL&gt;;</td><td>—</td><td>location</td></tr></tbody></table><p><code>URL</code>：为要设置的被代理服务器地址，包含传输协议(<code>http</code>、<code>https://</code>)、主机名称或 IP 地址加端口号、URI 等要素。</p><p>例如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_pass</span> http://www.baidu.com;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例子</span></span><br><span class="line"><span class="attribute">location</span> /server &#123;</span><br><span class="line">    <span class="comment"># 结尾不加斜杠</span></span><br><span class="line">    <span class="attribute">proxy_pass</span> http://192.168.200.146;</span><br><span class="line">    <span class="comment"># 访问的是：http://192.168.200.146/server/index.html</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 结尾加斜杠</span></span><br><span class="line">    <span class="attribute">proxy_pass</span> http://192.168.200.146/;</span><br><span class="line">    <span class="comment"># 访问的是：http://192.168.200.146/index.html</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>实例</strong></p></blockquote><p>准备两台服务器或者按照 Linux 系统的虚拟机，这里是 <code>192.168.200.133</code> 和 <code>192.168.200.146</code>，为了方便，我们称前者为服务器 A，后者为服务器 B。</p><ol><li>在服务器 A 的 Nginx 配置文件添加如下内容：</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="comment"># ......</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">8080</span>;</span><br><span class="line">        <span class="attribute">server_name</span> localhost;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://192.168.200.146;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当客户端请求服务器 A <code>http://192.168.200.133</code>，它会转发给服务器 B，此时的服务器 A 就是一个代理的角色。</p><p>访问服务器 A，我们看到 Nginx 的欢迎界面其实是服务器 B 的 Nginx，可以在服务器 B 的 Nginx 欢迎页面添加新的内容：<code>I am 146</code>，再次访问服务器 A，效果如图：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220802/image.4ai1u3uxs940.webp" alt="image"></p><p>总结来说：</p><ul><li>正向代理相当于在客户端浏览器里直接访问目标域名，但是背地里请求会从配置好的代理服务器发出去，对服务端来说它只知道代理服务器请求了提出了这次请求。</li><li>反向代理时相当于在客户端浏览器里直接访问代理服务器，然后代理服务器根据内部配置好的规则选择相应的服务返回给客户端，此时客户端并不清楚毒品的源头是谁，只知道它是从proxy那拿了货。</li></ul><p><strong>在编写 proxy_pass 的时候，后面的值要不要加 /?</strong></p><p>这是看情况的。</p><p>接下来通过例子来说明提到的问题：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> localhost;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="comment"># 下面两个地址加不加斜杠，效果都一样，因为 location 后的 / 会添加在代理地址后面</span></span><br><span class="line"><span class="attribute">proxy_pass</span> http://192.168.200.146;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://192.168.200.146/;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> localhost;</span><br><span class="line"><span class="attribute">location</span> /server &#123;</span><br><span class="line">        <span class="comment"># 下面两个地址必须加斜杠，因为 location 后的 /server 会添加在代理地址后面，第一个将没有 / 结尾</span></span><br><span class="line"><span class="comment">#proxy_pass http://192.168.200.146;</span></span><br><span class="line"><span class="attribute">proxy_pass</span> http://192.168.200.146/;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 上面的 location：当客户端访问 http://localhost/server/index.html</span></span><br><span class="line"><span class="comment"># 第一个 proxy_pass 就变成了 http://localhost/server/index.html</span></span><br><span class="line"><span class="comment"># 第二个 proxy_pass 就变成了 http://localhost/index.html 效果就不一样了。</span></span><br></pre></td></tr></table></figure><ul><li><p>第一个 location（第 4 行代码）：当客户端访问 <code>http://localhost/index.html</code>，两个 <code>proxy_pass</code> 效果是一样的，因为 location 后的 <code>/</code> 会添加在代理地址后面，所以有没有 <code>/</code>，效果都一样。</p></li><li><p>第一个 location（第 14 行代码）：当客户端访问 <code>http://localhost/server/index.html</code>，这个时候，第一个 proxy_pass 就变成了 <code>http://192.168.200.146/server/index.html</code>，第二个 proxy_pass 就变成了 <code>http://192.168.200.146/index.html</code> 效果就不一样了</p><p>如果不以 <code>/</code> 结尾，则 location 后的 <code>/server</code> 会添加在地址后面，所以第一个 proxy_pass 因为没有 <code>/</code> 结尾而被加上 <code>/server</code>，而第二个自带了 <code>/</code> ，所以不会添加 <code>/server</code>。</p></li></ul><p>上面的例子仅仅针对：访问任意请求如 <code>/server</code> 时，想要代理到其他服务器的首页，则加 <code>/</code>，否则你如果真的想访问 <code>/server</code> 下的资源，那么不要加 <code>/</code>。</p><p>所以加了 <code>/</code> 后，请求的是服务器根目录下的资源。</p><h3 id="proxy-set-header"><a href="#proxy-set-header" class="headerlink" title="proxy_set_header"></a>proxy_set_header</h3><p>该指令可以更改 Nginx 服务器接收到的客户端请求的请求头信息，然后将新的请求头发送给代理的服务器。默认值是发送代理服务器的地址和 close。</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220802/image.4bt7qzhbz1i0.webp" alt="image"></p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>proxy_set_header &lt;field&gt; &lt;value&gt;;</td><td>proxy_set_header Host $proxy_host; proxy_set_header Connection close;</td><td>http、server、location</td></tr></tbody></table><p>需要注意的是，如果想要看到结果，必须在被代理的服务器上来获取添加的头信息。</p><blockquote><p><strong>实例</strong></p></blockquote><p>被代理服务器：服务器 B <code>192.168.200.146</code> 的 Nginx 配置文件内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>  <span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    <span class="attribute">default_type</span> text/plain;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> <span class="variable">$http_username</span>;    <span class="comment"># 获取代理服务器发送过来的 http 请求头的 username 值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理服务器: 服务器 A <code>192.168.200.133</code> 的 Nginx 配置文件内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>  <span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    <span class="attribute">location</span> /server &#123;           <span class="comment"># 访问 /server 触发代理</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://192.168.200.146:8080/;  <span class="comment"># 配置服务器 B 的地址</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> username TOM;  <span class="comment"># 发送 key 为 username，value 为 TOM 的请求头给服务器 B</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问测试</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220802/image.398ksbw6rv20.webp" alt="image"></p><p>客户端访问的是服务器 A，服务器 A 会将请求转发给服务器 B，服务器 B 返回打印 TOM 的页面给服务器 A，服务器 A 最后返回给客户端。</p><h3 id="proxy-redirect"><a href="#proxy-redirect" class="headerlink" title="proxy_redirect"></a>proxy_redirect</h3><p>该指令是用来重置头信息中的『 Location 』和『 Refresh 』的值，防止客户端可以看到被代理服务器的地址。</p><p>因为客户端看到的返回结果是『 Location 』和『 Refresh 』的值，所以在到达代理服务器的时，将两个值修改掉，防止客户端直接看到被代理服务器的地址。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>proxy_redirect redirect replacement;<br> proxy_redirect default; <br>proxy_redirect off;</td><td>proxy_redirect default;</td><td>http、server、location</td></tr></tbody></table><blockquote><p><strong>为什么要用该指令？</strong></p></blockquote><p>首先说明一下思路：客户端通过代理服务器 A 访问服务器 B 的资源，但是服务器 B 不存在该资源，则会报错。此时我们不希望它直接返回报错页面给客户端，我们希望服务器 B 返回的是它的欢迎页面。那么如何做呢？</p><ul><li>首先在服务器 B 进行判断是否存在资源，不存在则返回自己的欢迎页面，即重定向到自己的欢迎页面地址并返回，此时浏览器的地址将会发生改变</li><li>代理服务器 A 收到服务器 B 的欢迎页面和地址，但是我们不能直接返回给客户端，因为它会暴露服务器 B 的地址，这是重定向的原因</li></ul><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220802/image.a4tptcx6lbk.webp" alt="image"></p><ul><li>此时用到 <code>proxy_redirect</code> 指令，重置服务器 B 返回过来的『 Location 』和『 Refresh 』值，将两个值改为代理服务器 A 的某个地址</li><li>因为改为了代理服务器 A 的某个地址，所以代理服务器 A 根据这个地址又去获取理服务器 B 的欢迎页面地址，返回给客户端</li></ul><p>很绕，简单总结下：客户端通过 A 找 B 不存在的资源，B 不想返回报错页面，于是重定向到自己的欢迎页面地址并返回给 A，A 收到了页面和地址（正常情况不要接收地址，只接收页面），发现不能暴露 B 的地址，于是修改接收的 B 的地址为自己的某一个地址，这个地址会重新发送请求去获取 B 的欢迎页面地址，然后返回给客户端。</p><p>这里要明白 B 返回的是重定向后的欢迎页面，重定向后，浏览器地址栏会变成重定向的地址，所以 A 才会以自己的地址转发获取到 B 的地址，所以最后浏览器显示 A 的地址，看到的却是 B 的欢迎页面。</p><p>代码：</p><p>服务端 B <code>192.168.200.146</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>  <span class="number">8081</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    <span class="attribute">if</span> (!-f <span class="variable">$request_filename</span>)&#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">302</span> http://192.168.200.146;   <span class="comment">#  2.如果请求的资源不存在，则重定向到服务器 B</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理服务端 A <code>192.168.200.133</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>  <span class="number">8081</span>;</span><br><span class="line"><span class="attribute">server_name</span> localhost;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://192.168.200.146:8081/;  <span class="comment"># 1.转发给服务器 B</span></span><br><span class="line"><span class="attribute">proxy_redirect</span> http://192.168.200.146 http://192.168.200.133; <span class="comment"># 3.修改服务器 B 的地址</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 该 server 去请求服务器 B 的欢迎页面</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>  <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> <span class="number">192.168.200.133</span>;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://192.168.200.146;  <span class="comment"># 4.重新发送请求给服务器 B，获取欢迎页面</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第 6 行代码，当服务器 B 返回的是 <code>http://192.168.200.146</code>，为了不让它出现在浏览器的地址栏上，我们需要利用 <code>proxy_redirect</code> 将它修改为代理服务器 A 的地址，这个地址会以自己的地址重新访问服务器 B 的欢迎页面，最后返回给客户端。</p><p><strong>该指令的三组选项</strong></p><ul><li><p><code>proxy_redirect redirect replacement;</code></p><ul><li>redirect：被代理服务器返回的 Location 值</li><li>replacement：要替换 Location 的值</li></ul></li><li><p><code>proxy_redirect default;</code></p><ul><li><p>default：相比较第一组选项，default 仅仅提供了 <code>redirect</code> 和 <code>replacement</code> 的默认值</p><p>将本范围 location 块的 uri 变量作为 replacement。</p><p>将 proxy_pass 变量作为 redwadairect</p></li></ul></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>  <span class="number">8081</span>;</span><br><span class="line"><span class="attribute">server_name</span> localhost;</span><br><span class="line"><span class="attribute">location</span> /server &#123; </span><br><span class="line"><span class="attribute">proxy_pass</span> http://192.168.200.146:8081/;</span><br><span class="line"><span class="attribute">proxy_redirect</span> default;  <span class="comment"># redirect 是 proxy_pass 的值：http://192.168.200.146:8081/</span></span><br><span class="line">         <span class="comment"># replacement 是 location 后的值：/server</span></span><br><span class="line">        <span class="comment"># 等价于：proxy_redirect http://192.168.200.146:8081/ /server</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>proxy_redirect off;</code></p><p>关闭 proxy_redirect 的功能</p></li></ul><h2 id="反向代理实战"><a href="#反向代理实战" class="headerlink" title="反向代理实战"></a>反向代理实战</h2><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220802/image.59ecpsonzxc0.webp" alt="image"></p><p>服务器 1，2，3 存在两种情况</p><ul><li>第一种情况: 三台服务器的内容不一样</li><li>第二种情况: 三台服务器的内容是一样</li></ul><p>第一种情况</p><ul><li><p>如果服务器 1、服务器 2 和服务器 3 的内容不一样，那我们可以根据用户请求来分发到不同的服务器。</p><p>服务器有限，只能以三个端口模拟三台服务器，实际上是一个 IP 对应一个服务器。</p><p>代理服务器配置文件内容：</p></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 代理服务器</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>  <span class="number">8082</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost; </span><br><span class="line">    <span class="attribute">location</span> /server1 &#123;    </span><br><span class="line">        <span class="attribute">proxy_pass</span> http://192.168.200.146:9001/;   <span class="comment"># 代理 server1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> /server2 &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://192.168.200.146:9002/;   <span class="comment"># 代理 server2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> /server3 &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://192.168.200.146:9003/;   <span class="comment"># 代理 server3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器配置文件内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务器</span></span><br><span class="line"><span class="comment"># server1</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>  <span class="number">9001</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    <span class="attribute">default_type</span> text/html;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> <span class="string">'&lt;h1&gt;192.168.200.146:9001&lt;/h1&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># server2</span></span><br><span class="line">server &#123;</span><br><span class="line">    <span class="attribute">listen</span>  <span class="number">9002</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    <span class="attribute">default_type</span> text/html;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> <span class="string">'&lt;h1&gt;192.168.200.146:9002&lt;/h1&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># server3</span></span><br><span class="line">server &#123;</span><br><span class="line">    <span class="attribute">listen</span>  <span class="number">9003</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    <span class="attribute">default_type</span> text/html;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> <span class="string">'&lt;h1&gt;192.168.200.146:9003&lt;/h1&gt;'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>如果服务器 1、服务器 2 和服务器 3 的内容是一样的，该如何处理?</p><p>请看负载均衡的相关内容，里面将进行详细的介绍。</p></li></ul><h2 id="斜杠总结"><a href="#斜杠总结" class="headerlink" title="斜杠总结"></a>斜杠总结</h2><p>这里将发送 <code>http://192.168.199.27/frx/xu</code> 请求。</p><p><strong>不带字符串情况</strong></p><table><thead><tr><th>案例</th><th>localtion</th><th>proxy_pass</th><th>匹配</th></tr></thead><tbody><tr><td>1</td><td>/frx</td><td><a href="http://192.168.199.27" target="_blank" rel="noopener">http://192.168.199.27</a></td><td>/frx/xu</td></tr><tr><td>2</td><td>/frx/</td><td><a href="http://192.168.199.27" target="_blank" rel="noopener">http://192.168.199.27</a></td><td>/frx/xu</td></tr><tr><td>3</td><td>/frx</td><td><a href="http://192.168.199.27/" target="_blank" rel="noopener">http://192.168.199.27/</a></td><td>//xu</td></tr><tr><td>4</td><td>/frx/</td><td><a href="http://192.168.199.27/" target="_blank" rel="noopener">http://192.168.199.27/</a></td><td>/xu</td></tr></tbody></table><p>若 Nginx 会将原请求路径原封不动地转交给其他地址，如案例 3 和 4。</p><p><code>proxy_pass</code> 的 ip:port 后加了 <code>/</code>，代表去除掉请求和 location 的匹配的字符串，不加则追加全部请求到地址后面。</p><p><strong>带字符串情况</strong></p><table><thead><tr><th>案例</th><th>localtion</th><th>proxy_pass</th><th>匹配</th></tr></thead><tbody><tr><td>1</td><td>/frx</td><td><a href="http://192.168.199.27/bing" target="_blank" rel="noopener">http://192.168.199.27/bing</a></td><td>/bing/xu</td></tr><tr><td>2</td><td>/frx/</td><td><a href="http://192.168.199.27/bing" target="_blank" rel="noopener">http://192.168.199.27/bing</a></td><td>/bingxu</td></tr><tr><td>3</td><td>/frx</td><td><a href="http://192.168.199.27/bing/" target="_blank" rel="noopener">http://192.168.199.27/bing/</a></td><td>/bing//xu</td></tr><tr><td>4</td><td>/frx/</td><td><a href="http://192.168.199.27/bing/" target="_blank" rel="noopener">http://192.168.199.27/bing/</a></td><td>/bing/xu</td></tr></tbody></table><p><code>proxy_pass</code> 的 ip:port 后加了字符串，Nginx 会将匹配 location 的请求从「原请求路径」中剔除，再不匹配的字符串拼接到 proxy_pass 后生成「新请求路径」，然后将「新请求路径」转交给其他地址。</p><p>案例 2 中，<code>proxy_pass</code> 的 ip:port 后接了字符串，因此将 location 的 <code>/frx/</code> 从原请求路径 <code>/frx/xu</code> 中剔除，变为 <code>xu</code>，然后将 <code>xu</code> 拼接到 <code>http://192.168.1.48/bing</code> 后生成了新请求，因此其他地址收到的请求就是 <code>/bingxu</code>。</p><h2 id="Nginx安全控制"><a href="#Nginx安全控制" class="headerlink" title="Nginx安全控制"></a>Nginx安全控制</h2><p>关于 Web 服务器的安全是比较大的一个话题，里面所涉及的内容很多，Nginx 反向代理是如何来提升 Web 服务器的安全呢？</p><p>答案是：安全隔离。</p><h3 id="什么是安全隔离"><a href="#什么是安全隔离" class="headerlink" title="什么是安全隔离"></a>什么是安全隔离</h3><p>通过代理分开了客户端到应用程序服务器端的连接，实现了安全措施。在反向代理之前设置防火墙，仅留一个入口供代理服务器访问。</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220802/image.3vhdv63nf9q0.webp" alt="image"></p><h3 id="如何使用SSL对流量加密"><a href="#如何使用SSL对流量加密" class="headerlink" title="如何使用SSL对流量加密"></a>如何使用SSL对流量加密</h3><p>翻译成大家能熟悉的说法就是将我们常用的 http 请求转变成 https 请求，那么这两个之间的区别简单的来说两个都是 HTTP 协议，只不过 https 是身披 SSL 外壳的 http.</p><p>HTTPS 是一种通过计算机网络进行安全通信的传输协议。它经由 HTTP 进行通信，利用 SSL/TLS 建立全通信，加密数据包，确保数据的安全性。</p><ul><li>SSL(Secure Sockets Layer)安全套接层</li><li>TLS(Transport Layer Security)传输层安全</li></ul><p>上述这两个是为网络通信提供安全及数据完整性的一种安全协议，TLS 和 SSL 在传输层和应用层对网络连接进行加密。</p><p>总结来说为什么要使用 https:</p><ul><li>http 协议是明文传输数据，存在安全问题，而 https 是加密传输，相当于 http + SSL，并且可以防止流量劫持。</li></ul><p>Nginx 默认不支持 https 开头的协议，如果要想使用 SSL，需要满足一个条件即需要添加一个模块 <code>--with-http_ssl_module</code>，而该模块在编译的过程中又需要 OpenSSL 的支持，OpenSSL 我们在 <a href="/middleware/Nginx/Nginx_install/#nginx环境安装">Nginx 安装</a> 已经准备好了。</p><h3 id="添加SSL支持"><a href="#添加SSL支持" class="headerlink" title="添加SSL支持"></a>添加SSL支持</h3><p>完成 <code>--with-http_ssl_module</code> 模块的增量添加。</p><ol><li>将原有 <code>/usr/local/nginx/sbin/nginx</code> 进行备份</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin</span><br><span class="line">mv nginx nginx.backup</span><br></pre></td></tr></table></figure><ol start="2"><li>查看 <code>configure arguments</code> 的配置信息，拷贝出来</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx -V</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝 configure arguments 后面的数据</span></span><br></pre></td></tr></table></figure><ol start="3"><li>进入 Nginx 的安装目录，执行 make clean 清空之前编译的内容</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cd</span> /root/nginx/core/nginx-<span class="number">1</span>.<span class="number">20</span>.<span class="number">2</span></span><br><span class="line"></span><br><span class="line">make clean</span><br></pre></td></tr></table></figure><ol start="4"><li>使用 configure 来配置参数，添加 <code>ngx_http_ssl_module</code> 模块，记得加上第（2）步拷贝的配置信息</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --with-http_ssl_module <span class="comment"># 记得添加 configure arguments 后的数据</span></span><br></pre></td></tr></table></figure><ol start="5"><li>通过 make 模板进行编译</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><ol start="6"><li>将 objs 下面的 nginx 可执行文件移动到 <code>/usr/local/nginx/sbin</code> 下</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /opt/nginx/core/nginx-1.20.2/objs/nginx /usr/<span class="built_in">local</span>/nginx/sbin</span><br></pre></td></tr></table></figure><ol start="7"><li>在源码目录（安装包目录）下执行 <code>make upgrade</code> 进行升级，这个可以实现不停机添加新模块的功能</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/nginx/core/nginx-1.20.2</span><br><span class="line">make upgrade</span><br></pre></td></tr></table></figure><h3 id="SSL相关指令"><a href="#SSL相关指令" class="headerlink" title="SSL相关指令"></a>SSL相关指令</h3><p>该模块的指令都是通过 <code>ngx_http_ssl_module</code> 模块来解析的，我们上一步已经添加了。</p><p>这里只介绍常用的几个指令，了解更多指令请前往 <a href="http://nginx.org/en/docs/http/ngx_http_ssl_module.html" target="_blank" rel="noopener">ngx_http_ssl_module 模块文档</a>。</p><p><code>ssl</code> 指令用来在指定的服务器开启 HTTPS，默认关闭。可以使用 listen 443 ssl，这种方式更通用些。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>ssl &lt;on |off&gt;;</td><td>ssl off;</td><td>http、server</td></tr></tbody></table><p>ssl 默认监听的是 443 端口，所以使用下面的指令和 <code>ssl on</code> 效果一致，因为下面的指令能突出 sll 的监听端口，所以建议使用它。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ssl_certificate</code> 指令是为当前这个虚拟主机指定一个带有 PEM 格式证书的证书。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>ssl_certificate &lt;file&gt;;</td><td>—</td><td>http、server</td></tr></tbody></table><p><code>ssl_certificate_key</code> 指令用来指定 PEM secret key 文件的路径</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>ssl_ceritificate_key &lt;file&gt;;</td><td>—</td><td>http、server</td></tr></tbody></table><p><code>ssl_session_cache</code> 指令用来配置用于 SSL 会话的缓存</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>ssl_sesion_cache &lt;off | none | [builtin[:size]] [shared:name:size]&gt;</td><td>ssl_session_cache none;</td><td>http、server</td></tr></tbody></table><p>选项介绍：</p><ul><li><p><code>off</code>：严格禁止使用会话缓存：Nginx 明确告诉客户端会话不能被重用</p></li><li><p><code>none</code>：禁止使用会话缓存，Nginx 告诉客户端会话可以被重用，但实际上并不在缓存中存储会话参数（任性，言语同意用，行为取消用）</p></li><li><p><code>builtin</code>：内置 OpenSSL 缓存，仅在一个工作进程中使用。缓存大小在会话中指定。如果未给出大小，则等于 20480 个会话。使用内置缓存可能会导致内存碎片</p></li><li><p><code>shared</code>：所有工作进程之间共享缓存，缓存的相关信息用 name 和 size 来指定，同 name 的缓存可用于多个虚拟服务器</p><p>name 是允许缓存的数据名，size 是允许缓存的数据大小，以字节为单位</p></li></ul><p>例如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssl_session_cache</span> builtin:<span class="number">1000</span> shared:SSL:<span class="number">10m</span>;</span><br></pre></td></tr></table></figure><p>10m 的 m 是兆。</p><p><code>ssl_session_timeout</code> 指令用于开启 SSL 会话功能后，设置客户端能够反复使用储存在缓存中的会话参数时间，默认值超时时间是 5 秒</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>ssl_session_timeout &lt;time&gt;;</td><td>ssl_session_timeout 5m;</td><td>http、server</td></tr></tbody></table><p><code>ssl_ciphers</code> 指令指出允许的密码，密码指定为 OpenSSL 支持的格式</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>ssl_ciphers &lt;ciphers&gt;;</td><td>ssl_ciphers HIGH:!aNULL:!MD5;</td><td>http、server</td></tr></tbody></table><p>可以直接在 Linux 系统上使用 <code>openssl ciphers</code> 查看 OpenSSl 支持的格式</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl ciphers</span><br></pre></td></tr></table></figure><p><code>ssl_prefer_server_ciphers</code> 指令指定是否服务器密码优先客户端密码，默认关闭，建议开启。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>ssl_perfer_server_ciphers &lt;on | off&gt;;</td><td>ssl_perfer_server_ciphers off;</td><td>http、server</td></tr></tbody></table><h3 id="SSL证书生成"><a href="#SSL证书生成" class="headerlink" title="SSL证书生成"></a>SSL证书生成</h3><p><strong>方式一：使用阿里云/腾讯云等第三方服务进行购买免费版</strong></p><p>需要购买域名进行证书的绑定，否则证书无法使用。</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220802/image.5p2qyl61ozc0.webp" alt="image"></p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220802/image.5l7iqyudol00.webp" alt="image"></p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220802/image.6ci6w9wu24g0.webp" alt="image"></p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220802/image.4k9v2b9n6tm0.webp" alt="image"></p><p>接着在右边弹窗进行域名绑定，填完写域名和个人信息，进入到验证信息</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220802/image.11wx9z7jit3k.webp" alt="image"></p><p>点击验证，不成功则去自己的域名解析列表查看，如下，点击添加记录，进行配置，或者已经看到记录类型是 TXT，记录值和上图一样的，则说明成功。</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220802/image.6qcpqete8ic0.webp" alt="image"></p><p>提交审核后，点击下载</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220802/image.28m5753glfy8.webp" alt="image"></p><p>下载 Nginx 服务器的证书</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220802/image.6kmq7nhonys0.webp" alt="image"></p><p>下载压缩包进行加压后，得到 .pem 证书和 .key 证书，把两个证书上传到 Linux，进行配置，往下看。</p><p><strong>方式二：使用 OpenSSL 生成证书</strong></p><p>这个方式适用于学习阶段，实际开发阶段使用方式一</p><ol><li>先要确认当前系统是否有安装 OpenSSL</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl version</span><br></pre></td></tr></table></figure><p>安装下面的命令进行生成（一步一步来）</p><ol start="2"><li>创建 <code>/root/cerr</code> 目录并进入</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /root/cert</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/cert</span><br></pre></td></tr></table></figure><ol start="3"><li>指定加密算法和加密方式，生成 <code>server.key</code></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># genrsa 是加密算法，des3 是加密方式，-out 代表输入长度为 2048 的 server.key</span></span><br><span class="line">openssl genrsa -des3 -out server.key 2048</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后它会让你注册 server.key 的密码</span></span><br><span class="line"><span class="comment"># 输入密码 ......</span></span><br></pre></td></tr></table></figure><ol start="4"><li>根据你注册的 server.key 密码，生成 server.csr 文件，生成后它会让你注册你的基本信息，因为是个人的，所以信息随便填写</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -key server.key -out server.csr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里注册你的基本信息，信息随便填写</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220802/image.2b4bgtawqb4.webp" alt="image"></p><ol start="5"><li>备份 server.key</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp server.key server.key.org</span><br></pre></td></tr></table></figure><ol start="6"><li>重新生成 server.key 文件，并输入刚才注册的密码</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -<span class="keyword">in</span> server.key.org -out server.key</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会让你重新输入注册密码</span></span><br></pre></td></tr></table></figure><ol start="7"><li>生成 server.crt 文件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -days 365 -<span class="keyword">in</span> server.csr -signkey server.key -out server.crt</span><br></pre></td></tr></table></figure><ol start="8"><li>最后使用 <code>ll</code> 查看目录下是否生成相应的文件：</li></ol><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220802/image.3yl8ne2bkre0.webp" alt="image"></p><h3 id="SSL实例模板-通用"><a href="#SSL实例模板-通用" class="headerlink" title="SSL实例模板(通用)"></a>SSL实例模板(通用)</h3><p>Nginx 的置文件添加如下内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="comment"># ......</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">443</span> ssl;<span class="comment"># 开启 SSL 功能</span></span><br><span class="line">    <span class="attribute">server_name</span>  localhost;     <span class="comment"># 如果是购买的域名，这里加上该域名</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span>      /root/cert/server.cert; <span class="comment"># 生成的 cert 或者 pem 证书路径，根据需求修改</span></span><br><span class="line">    <span class="attribute">ssl_certificate_key</span>  /root/cert/server.key; <span class="comment"># 生成的 key 证书路径，根据需求修改</span></span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>; </span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; <span class="comment"># 表示使用的加密套件的类型</span></span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;  <span class="comment"># 表示使用的TLS协议的类型</span></span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这个模板就是 Nginx 解压目录的 conf 目录下的 nginx.conf 内容。</p><p><strong>建议</strong></p><p>配置 SSL 证书时候，不要修改原来的 server 模块（<code>listen 80</code> 模块），应该新建一个 server 模块。</p><p><strong>解决默认 http 问题。</strong></p><p>配置完 SSL 证书还远远不安全。如果直接输入 <code>www.frx.com</code>，会默认加上『 http:// 』 而不是『 https:// 』，如何修改为『 https:// 』呢，我们利用 Rewrite 功能</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span> www.frx.com;   <span class="comment"># 如果是 www.frx.com 发送请求</span></span><br><span class="line">    </span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="comment"># ......</span></span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> https://www.frx.com<span class="variable">$1</span>;  <span class="comment"># 则改为 https 方式</span></span><br><span class="line">        <span class="comment"># ......</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment"># ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反向代理系统调优"><a href="#反向代理系统调优" class="headerlink" title="反向代理系统调优"></a>反向代理系统调优</h2><p>反向代理值 Buffer 和 Cache。</p><p>Buffer 翻译过来是「缓冲」，Cache 翻译过来是「缓存」。</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220802/image.6p7uoj5ab0k0.webp" alt="image"></p><p>客户端通过代理服务器向被代理服务器获取数据后，代理服务器在获取的数据存储在缓存「瓶子」里，客户端再次获取相同资源时，直接从缓存「瓶子」里获取数据，不需要向被代理服务器获取数据，减轻压力。</p><p>相同点:</p><ul><li>两种方式都是用来提供 IO 吞吐效率，都是用来提升 Nginx 代理的性能。</li></ul><p>不同点:</p><ul><li>缓冲主要用来解决不同设备之间数据传递速度不一致导致的性能低的问题，缓冲中的数据一旦此次操作完成后，就可以删除</li><li>缓存主要是备份，将被代理服务器的数据缓存一份到代理服务器，这样的话，客户端再次获取相同数据的时候，就只需要从代理服务器上获取，效率较高，缓存中的数据可以重复使用，只有满足特定条件才会删除</li></ul><h3 id="Proxy-Buffer-相关指令"><a href="#Proxy-Buffer-相关指令" class="headerlink" title="Proxy Buffer 相关指令"></a>Proxy Buffer 相关指令</h3><ul><li><p><code>proxy_buffering</code> 指令用来开启或者关闭代理服务器的缓冲区，默认开启。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>proxy_buffering &lt;on | off&gt;;</td><td>proxy_buffering on;</td><td>http、server、location</td></tr></tbody></table></li><li><p><code>proxy_buffers</code> 指令用来指定单个连接从代理服务器读取响应的缓存区的个数和大小。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>proxy_buffers &lt;number&gt; &lt;size&gt;;</td><td>proxy_buffers 8 4k | 8K;(与系统平台有关)</td><td>http、server、location</td></tr></tbody></table><ul><li>number：缓冲区的个数</li><li>size：每个缓冲区的大小，缓冲区的总大小就是 number * size</li></ul></li><li><p><code>proxy_buffer_size</code> 指令用来设置从被代理服务器获取的第一部分响应数据的大小。保持与 proxy_buffers 中的 size 一致即可，当然也可以更小。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>proxy_buffer_size &lt;size&gt;;</td><td>proxy_buffer_size 4k | 8k;(与系统平台有关)</td><td>http、server、location</td></tr></tbody></table></li><li><p><code>proxy_busy_buffers_size</code> 指令用来限制同时处于 BUSY 状态的缓冲总大小。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>proxy_busy_buffers_size &lt;size&gt;;</td><td>proxy_busy_buffers_size 8k | 16K;</td><td>http、server、location</td></tr></tbody></table></li><li><p><code>proxy_temp_path</code> 指令用于当缓冲区存满后，仍未被 Nginx 服务器完全接受，响应数据就会被临时存放在磁盘文件上的该指令设置的文件路径下</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>proxy_temp_path &lt;path&gt;;</td><td>proxy_temp_path proxy_temp;</td><td>http、server、location</td></tr></tbody></table><p>注意 path 最多设置三层。</p></li><li><p><code>proxy_temp_file_write_size</code> 指令用来设置磁盘上缓冲文件的大小。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>proxy_temp_file_write_size &lt;size&gt;;</td><td>proxy_temp_file_write_size 8K | 16K;</td><td>http、server、location</td></tr></tbody></table></li></ul><h3 id="网站调优模板-通用"><a href="#网站调优模板-通用" class="headerlink" title="网站调优模板(通用)"></a>网站调优模板(通用)</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_buffering</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">proxy_buffers</span> <span class="number">4</span> <span class="number">64k</span>;</span><br><span class="line"><span class="attribute">proxy_buffer_size</span> <span class="number">64k</span>;</span><br><span class="line"><span class="attribute">proxy_busy_buffers_size</span> <span class="number">128k</span>;</span><br><span class="line"><span class="attribute">proxy_temp_file_write_size</span> <span class="number">128k</span>;</span><br></pre></td></tr></table></figure><h2 id="反向代理问题"><a href="#反向代理问题" class="headerlink" title="反向代理问题"></a>反向代理问题</h2><p>反向代理有一个严重的问题，那就是反向代理的网站需要的 css、js、png 等静态文件默认是从 Nginx 里获取，显然一个你的服务器的代理了如淘宝、京东等网站，那么淘宝、京东等网站的静态文件是从你的服务器里获取，但是服务器根本没有，那么我们如何让代理的网站以及网站需要的 css、js、png 等静态文件一同获取呢，添加如下配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>  <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ .*</span> &#123;<span class="comment"># 如果不是代理网站的根路径，请自行修改</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8081;   <span class="comment"># 代理的网站地址</span></span><br><span class="line">        <span class="comment"># 将网站的静态文件也代理过来</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Nginx </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 静态资源访问</title>
      <link href="/2022/11/11/NginxStatic_resource_access/"/>
      <url>/2022/11/11/NginxStatic_resource_access/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="Nginx-静态资源访问"><a href="#Nginx-静态资源访问" class="headerlink" title="Nginx 静态资源访问"></a>Nginx 静态资源访问</h1><p><strong>引言</strong></p><p>如何访问 Nginx 的静态资源？这其中涉及到了 Nginx 的核心功能 Rewrite 重写技术，本内容将讲解处理访问静态资源的相关知识。</p><hr><h2 id="Nginx的跨域问题"><a href="#Nginx的跨域问题" class="headerlink" title="Nginx的跨域问题"></a>Nginx的跨域问题</h2><p>跨域问题，我们主要从以下方面进行解决：</p><ul><li>什么情况下会出现跨域问题</li><li>实例演示跨域问题</li><li>具体的解决方案是什么</li></ul><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p>浏览器的同源策略：是一种约定，是浏览器最核心也是最基本的安全功能，如果浏览器少了同源策略，则浏览器的正常功能可能都会受到影响。</p><p>同源：协议、域名(IP)、端口相同即为同源</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.200.131/user/1</span><br><span class="line">https://192.168.200.131/user/1</span><br><span class="line"><span class="comment"># 不满足同源</span></span><br><span class="line"></span><br><span class="line">http://192.168.200.131/user/1</span><br><span class="line">http://192.168.200.132/user/1</span><br><span class="line"><span class="comment"># 不满足同源</span></span><br><span class="line"></span><br><span class="line">http://192.168.200.131/user/1</span><br><span class="line">http://192.168.200.131:8080/user/1</span><br><span class="line"><span class="comment"># 不满足同源</span></span><br><span class="line"></span><br><span class="line">http://www.nginx.com/user/1</span><br><span class="line">http://www.nginx.org/user/1</span><br><span class="line"><span class="comment"># 不满足同源</span></span><br><span class="line"></span><br><span class="line">http://192.168.200.131/user/1</span><br><span class="line">http://192.168.200.131:8080/user/1</span><br><span class="line"><span class="comment"># 不满足同源</span></span><br><span class="line"></span><br><span class="line">http://www.nginx.org:80/user/1</span><br><span class="line">http://www.nginx.org/user/1</span><br><span class="line"><span class="comment"># 满足同源</span></span><br></pre></td></tr></table></figure><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><p>简单描述下：</p><p>有两台服务器分别为 A、B，如果从服务器 A 的页面发送异步请求到服务器 B 获取数据，如果服务器 A 和服务器 B 不满足同源策略，则就会出现跨域问题。</p><h3 id="跨域案例"><a href="#跨域案例" class="headerlink" title="跨域案例"></a>跨域案例</h3><p>出现跨域问题会有什么效果？接下来通过一个需求来给大家演示下：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220801/image.vlv6telsbb4.webp" alt="image"></p><ol><li>Nginx 的 html 目录下新建一个 a.html</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/nginx/html/a.htm</span><br></pre></td></tr></table></figure><p>添加如下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>跨域问题演示<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">            $(function()&#123;</span><br><span class="line">                $("#btn").click(function()&#123;</span><br><span class="line">                        $.get('http://192.168.200.133:8080/getUser',function(data)&#123;</span><br><span class="line">                                alert(JSON.stringify(data));</span><br><span class="line">                        &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"获取数据"</span> <span class="attr">id</span>=<span class="string">"btn"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在 nginx.conf 配置如下内容</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    <span class="attribute">listen</span>  <span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    <span class="attribute">location</span> /getUser&#123;</span><br><span class="line">        <span class="attribute">default_type</span> application/json;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">'&#123;"id":1,"name":"TOM","age":18&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> localhost;</span><br><span class="line"><span class="attribute">location</span> /&#123;</span><br><span class="line"><span class="attribute">root</span> html;</span><br><span class="line"><span class="attribute">index</span> index.html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>通过浏览器测试访问</li></ol><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220801/image.4md37urjzug0.webp" alt="image"></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>使用 <code>add_header</code> 指令，该指令可以用来添加一些头信息。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>add_header &lt;name&gt; &lt;value&gt; ……</td><td>—</td><td>http、server、location</td></tr></tbody></table><p>此处用来解决跨域问题，需要添加两个头信息，分别是</p><ul><li><code>Access-Control-Allow-Origin</code></li><li><code>Access-Control-Allow-Methods</code></li></ul><p><code>Access-Control-Allow-Origin</code>：直译过来是允许跨域访问的源地址信息，可以配置多个(多个用逗号分隔)，也可以使用 <code>*</code> 代表所有源。</p><p><code>Access-Control-Allow-Methods</code>：直译过来是允许跨域访问的请求方式，值可以为 GET、POST、PUT、DELETE ……，可以全部设置，也可以根据需要设置，多个用逗号分隔。</p><p>具体配置方式：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /getUser &#123;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Methods GET,POST,PUT,DELETE;</span><br><span class="line">    <span class="attribute">default_type</span> application/json;   <span class="comment"># return 的格式是 json</span></span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> <span class="string">'&#123;"id":1,"name":"TOM","age":18&#125;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态资源防盗链"><a href="#静态资源防盗链" class="headerlink" title="静态资源防盗链"></a>静态资源防盗链</h2><h3 id="什么是资源盗链"><a href="#什么是资源盗链" class="headerlink" title="什么是资源盗链"></a>什么是资源盗链</h3><p>资源盗链指的是此内容不在自己服务器上，而是通过技术手段，绕过别人的限制将别人的内容放到自己页面上最终展示给用户。以此来盗取大网站的空间和流量。简而言之就是用别人的东西成就自己的网站。</p><p>提供两种图片进行演示：</p><ul><li>京东：<code>https://img14.360buyimg.com/n7/jfs/t1/101062/37/2153/254169/5dcbd410E6d10ba22/4ddbd212be225fcd.jpg</code></li><li>百度：<code>https://pics7.baidu.com/feed/cf1b9d16fdfaaf516f7e2011a7cda1e8f11f7a1a.jpeg?token=551979a23a0995e5e5279b8fa1a48b34&amp;s=BD385394D2E963072FD48543030030BB</code></li></ul><p>我们在 html 目录下准备一个页面 a.html，在页面上利用 img 标签引入这两个图片:</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220801/image.614vk7i0kx80.webp" alt="image"></p><p>访问：<code>http://192.168.200.133/a.html</code> 来查看效果</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220801/image.2m5u48xesf60.webp" alt="image"></p><p>从上面的效果，可以看出来，下面的图片地址添加了防止盗链的功能，京东这边我们可以直接使用其图片。</p><h3 id="防盗链实现原理"><a href="#防盗链实现原理" class="headerlink" title="防盗链实现原理"></a>防盗链实现原理</h3><p>了解防盗链的原理之前，我们得先学习一个 HTTP 的头信息 Referer，当浏览器向 Web 服务器发送请求的时候，一般都会带上 Referer，来告诉浏览器该网页是从哪个页面链接过来的。</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220801/image.64vdmkvdywk0.webp" alt="image"></p><p>后台服务器可以根据获取到的这个 Referer 信息来判断是否为自己信任的网站地址，如果是则放行继续访问，如果不是则可以返回 403（服务端拒绝访问）的状态信息。</p><h3 id="防盗链实现实例"><a href="#防盗链实现实例" class="headerlink" title="防盗链实现实例"></a>防盗链实现实例</h3><p>在本地模拟上述的服务器效果图：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220801/image.4hr6e3mrf440.webp" alt="image"></p><p>Nginx 防盗链的具体实现：</p><p>valid_referers 指令：Nginx 会通过查看 Referer 自动和 valid_referers 的内容进行匹配，如果匹配到了就将 <code>$invalid_referer</code> 变量置 0，如果没有匹配到，则将 <code>$invalid_referer</code> 变量置为 1，匹配的过程中不区分大小写。</p><p>所以我们可以在配置文件判断 <code>$invalid_referer</code> 是否等于 1（true），即没有匹配到 ，等于则返回 403。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>valid_referers &lt;none | blocked | server_names | string&gt; ……</td><td>—</td><td>server、location</td></tr></tbody></table><ul><li>none：如果 Header 中的 Referer 为空，允许访问</li><li>blocked：在 Header 中的 Referer 不为空，但是该值被防火墙或代理进行伪装过，如不带『 http:// 』 、『 https:// 』等协议头的资源才允许访问。</li><li>server_names：指定具体的域名或者 IP</li><li>string：可以支持正则表达式和 <code>*</code> 的字符串。如果是正则表达式，需要以 <code>~</code> 开头表示</li></ul><p>例如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ *\.(png|jpg|gif)</span>&#123;</span><br><span class="line">    <span class="attribute">valid_referers</span> <span class="literal">none</span> <span class="literal">blocked</span> www.baidu.com <span class="number">192.168.91.200</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># valid_referers none blocked *.example.com example.*  www.example.org  ~\.google\.;</span></span><br><span class="line">    </span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$invalid_referer</span>)&#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">root</span> /usr/local/nginx/html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上方代码如果没有匹配上 <code>www.baidu.com</code> 和 <code>192.168.91.200</code>，则 <code>$invalid_referer</code> 为 1（true），返回 403，代表不允许获取资源。</p><p>Nginx 配置文件支持 if 判断，但是 if 后面必须有空格。</p><p><strong>问题：如果图片有很多，该如何批量进行防盗链？可以针对目录进行防盗链。</strong></p><h3 id="针对目录防盗链"><a href="#针对目录防盗链" class="headerlink" title="针对目录防盗链"></a>针对目录防盗链</h3><p>假设 html 目录下有一个 images 目录，里面专门放防盗链的图片。</p><p>配置如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /images &#123;</span><br><span class="line">    <span class="attribute">valid_referers</span> <span class="literal">none</span> <span class="literal">blocked</span> www.baidu.com <span class="number">192.168.199.27</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># valid_referers none blocked *.example.com example.*  www.example.org  ~\.google\.;</span></span><br><span class="line">    </span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$invalid_referer</span>)&#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">root</span> /usr/local/nginx/html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需将 location 的地址改成一个目录，这样我们可以对一个目录下的所有资源进行防盗链操作。</p><p><strong>问题：Referer 的限制比较粗，比如浏览器发送请求时恶意加一个 Referer，上面的方式是无法进行限制的。那么这个问题改如何解决？</strong></p><p>此时我们需要用到 Nginx 的第三方模块 <code>ngx_http_accesskey_module</code>，第三方模块如何实现盗链，如何在 Nginx 中使用第三方模块的功能，在后面有讲解。</p><h2 id="Rewrite功能配置"><a href="#Rewrite功能配置" class="headerlink" title="Rewrite功能配置"></a>Rewrite功能配置</h2><p>Rewrite 是 Nginx 服务器提供的一个重要基本功能，是 Web 服务器产品中几乎必备的功能。主要的作用是用来实现 URL 的重写。</p><p>*<em>warning *</em></p><p>Nginx 服务器的 Rewrite 功能的实现依赖于 PCRE 的支持，因此在编译安装 Nginx 服务器之前，需要安装 PCRE 库。Nginx 使用的是<code>ngx_http_rewrite_module</code> 模块来解析和处理 Rewrite 功能的相关配置。</p><h3 id="地址重写与地址转发"><a href="#地址重写与地址转发" class="headerlink" title="地址重写与地址转发"></a>地址重写与地址转发</h3><p>重写和转发的区别:</p><ul><li>地址重写浏览器地址会发生变化而地址转发则不变</li><li>一次地址重写会产生两次请求而一次地址转发只会产生一次请求</li><li>地址重写到的页面必须是一个完整的路径而地址转发则不需要</li><li>地址重写因为是两次请求，所以 request 范围内属性不能传递给新页面，而地址转发因为是一次请求所以可以传递值</li><li>地址转发速度快于地址重写</li></ul><h3 id="set指令"><a href="#set指令" class="headerlink" title="set指令"></a>set指令</h3><p>该指令用来设置一个新的变量。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>set &lt;$key&gt; &lt;value&gt;;</td><td>—</td><td>server、location、if</td></tr></tbody></table><ul><li>variable：变量的名称，该变量名称要用 <code>$</code> 作为变量的第一个字符，且不能与 Nginx 服务器内置的全局变量同名。</li><li>value：变量的值，可以是字符串、其他变量或者变量的组合等。</li></ul><p>例如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8081</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    <span class="attribute">location</span> /server &#123;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$name</span> TOM;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$age</span> <span class="number">18</span>;</span><br><span class="line">        <span class="attribute">default_type</span> text/plain;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="variable">$name</span>=<span class="variable">$age</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 <code>https://192.168.200.133:8081:server</code>，返回结果如图：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220801/image.6t618fip2fo0.webp" alt="image"></p><h3 id="Rewrite常用全局变量"><a href="#Rewrite常用全局变量" class="headerlink" title="Rewrite常用全局变量"></a>Rewrite常用全局变量</h3><table><thead><tr><th>变量</th><th>说明</th></tr></thead><tbody><tr><td>$args</td><td>变量中存放了请求 URL 中的请求指令。比如 <code>http://192.168.200.133:8080?arg1=value1&amp;args2=value2</code> 中的『 arg1=value1&amp;arg2=value2 』，功能和 $query_string 一样</td></tr><tr><td>$http_user_agent</td><td>变量存储的是用户访问服务的代理信息（如果通过浏览器访问，记录的是浏览器的相关版本信息）</td></tr><tr><td>$host</td><td>变量存储的是访问服务器的 server_name 值</td></tr><tr><td>$document_uri</td><td>变量存储的是当前访问地址的URI。比如 <code>http://192.168.200.133/server?id=10&amp;name=zhangsan</code>中的『 /server 』，功能和 $uri 一样</td></tr><tr><td>$document_root</td><td>变量存储的是当前请求对应 location 的 root 值，如果未设置，默认指向 Nginx 自带 html 目录所在位置</td></tr><tr><td>$content_length</td><td>变量存储的是请求头中的 Content-Length 的值</td></tr><tr><td>$content_type</td><td>变量存储的是请求头中的 Content-Type 的值</td></tr><tr><td>$http_cookie</td><td>变量存储的是客户端的 cookie 信息，可以通过 <code>add_header Set-Cookie &#39;cookieName=cookieValue&#39;</code> 来添加 cookie 数据</td></tr><tr><td>$limit_rate</td><td>变量中存储的是 Nginx 服务器对网络连接速率的限制，也就是 Nginx 配置中对 limit_rate 指令设置的值，默认是 0，不限制。</td></tr><tr><td>$remote_addr</td><td>变量中存储的是客户端的 IP 地址</td></tr><tr><td>$remote_port</td><td>变量中存储了客户端与服务端建立连接的端口号</td></tr><tr><td>$remote_user</td><td>变量中存储了客户端的用户名，需要有认证模块才能获取</td></tr><tr><td>$scheme</td><td>变量中存储了访问协议</td></tr><tr><td>$server_addr</td><td>变量中存储了服务端的地址</td></tr><tr><td>$server_name</td><td>变量中存储了客户端请求到达的服务器的名称</td></tr><tr><td>$server_port</td><td>变量中存储了客户端请求到达服务器的端口号</td></tr><tr><td>$server_protocol</td><td>变量中存储了客户端请求协议的版本，比如 『 HTTP/1.1 』</td></tr><tr><td>$request_body_file</td><td>变量中存储了发给后端服务器的本地文件资源的名称</td></tr><tr><td>$request_method</td><td>变量中存储了客户端的请求方式，比如『 GET 』,『 POST 』等</td></tr><tr><td>$request_filename</td><td>变量中存储了当前请求的资源文件的路径名</td></tr><tr><td>$request_uri</td><td>变量中存储了当前请求的 URI，并且携带请求参数，比如 <code>http://192.168.200.133/server?id=10&amp;name=zhangsan</code> 中的 『 /server?id=10&amp;name=zhangsan 』</td></tr></tbody></table><blockquote><p><strong>例如</strong></p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">8081</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    <span class="attribute">location</span> /server &#123;</span><br><span class="line">        <span class="attribute">root</span> /usr/local/nginx/abc;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$name</span> TOM;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$age</span> <span class="number">18</span>;</span><br><span class="line">        <span class="attribute">default_type</span> text/plain;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="variable">$name</span>=<span class="variable">$age</span>=<span class="variable">$args</span>=<span class="variable">$http_user_agent</span>=<span class="variable">$host</span>=<span class="variable">$document_root</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问：<code>http://192.168.200.133:8081/server?username=JERRY&amp;gender=1</code></p><p>效果如图：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220801/image.6s6hlgez73g0.webp" alt="image"></p><blockquote><p><strong>可以把访问的信息记录在日志中</strong></p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line"><span class="comment"># ......</span></span><br><span class="line"><span class="attribute">log_format</span> main <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$request</span> - <span class="variable">$status</span> - <span class="variable">$request_uri</span> - <span class="variable">$http_user_agent</span>'</span>;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">8081</span>;</span><br><span class="line">        <span class="attribute">server_name</span> localhost;</span><br><span class="line">        <span class="attribute">location</span> /server &#123;</span><br><span class="line">        <span class="attribute">access_log</span> logs/access.log main;</span><br><span class="line">            <span class="attribute">root</span> /usr/local/nginx/abc;</span><br><span class="line">            <span class="attribute">set</span> <span class="variable">$name</span> TOM;</span><br><span class="line">            <span class="attribute">set</span> <span class="variable">$age</span> <span class="number">18</span>;</span><br><span class="line">            <span class="attribute">default_type</span> text/plain;</span><br><span class="line">            <span class="attribute">return</span> <span class="number">200</span> <span class="variable">$name</span>=<span class="variable">$age</span>=<span class="variable">$args</span>=<span class="variable">$http_user_agent</span>=<span class="variable">$host</span>=<span class="variable">$document_root</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问：<code>http://192.168.200.133:8081/server?username=JERRY&amp;gender=1</code></p><p>然后查看日志，效果如图：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220801/image.23y9h76w29b4.webp" alt="image"></p><h3 id="if指令"><a href="#if指令" class="headerlink" title="if指令"></a>if指令</h3><p>该指令用来支持条件判断，并根据条件判断结果选择不同的 Nginx 配置。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>if (condition) { … }</td><td>—</td><td>server、location</td></tr></tbody></table><p>if 和括号之间要有空格，condition 为判定条件，可以支持以下写法：</p><ul><li>变量名。如果变量名对应的值为空或者是 0，if 都判断为 false，其他条件为 true。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">if</span> (<span class="variable">$param</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用『 = 』和『 != 』比较变量和字符串是否相等，满足条件为 true，不满足为 false</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">if</span> (<span class="variable">$request_method</span> = POST)&#123;</span><br><span class="line"><span class="attribute">return</span> <span class="number">405</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：POST 和 Java 不太一样的地方是字符串不需要添加引号。</p><ul><li>使用正则表达式对变量进行匹配，匹配成功返回 true，否则返回 false。变量与正则表达式之间使用『 ~ 』，『 <del>* 』，『 !</del> 』，『 !~* 』来连接。<ul><li>『 ~ 』代表匹配正则表达式过程中区分大小写，进行模糊匹配</li><li>『 ~* 』代表匹配正则表达式过程中不区分大小写，进行模糊匹配</li><li>『 !~ 』和『 !~* 』刚好和上面取相反值，如果匹配上返回 false，匹配不上返回 true，进行模糊匹配</li></ul></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">if</span> (<span class="variable">$http_user_agent</span> <span class="regexp">~ MSIE)</span>&#123;</span><br><span class="line"><span class="comment"># $http_user_agent 的值中是否包含 MSIE 字符串，如果包含返回 true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>判断请求的文件是否存在使用『 -f 』和『 !-f 』<ul><li>当使用『 -f 』时，如果请求的文件存在返回 true，不存在返回 false。</li><li>当使用『 !-f 』时，如果请求文件不存在，但该文件所在目录存在返回 true，文件和目录都不存在返回 false，如果文件存在返回 false。</li></ul></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">if</span> (-f <span class="variable">$request_filename</span>)&#123;</span><br><span class="line"><span class="comment"># 判断请求的文件是否存在</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">if</span> (!-f <span class="variable">$request_filename</span>)&#123;</span><br><span class="line"><span class="comment"># 判断请求的文件是否不存在</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：用户访问的页面不存在，则返回一个友好的提示</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span> html;</span><br><span class="line">    <span class="attribute">default_type</span> text/html;</span><br><span class="line">    <span class="comment"># 判断请求的文件是否不存在</span></span><br><span class="line">    <span class="attribute">if</span> (!-f <span class="variable">$request_filename</span>)&#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">200</span> <span class="string">'&lt;h1&gt;不好意思，文件资源找不到！&lt;/h1&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>判断请求的目录是否存在使用『 -d 』和『 !-d 』</p><p>当使用『 -d 』时，如果请求的目录存在，返回 true，如果目录不存在则返回 false。</p><p>当使用『 !-d 』时，如果请求的目录不存在但该目录的上级目录存在则返回 true，该目录和它上级目录都不存在则返回 false，如果请求目录存在也返回false。</p></li></ul><h3 id="break指令"><a href="#break指令" class="headerlink" title="break指令"></a>break指令</h3><p>该指令用于中断当前相同作用域中的其他 Nginx 配置。与该指令处于同一作用域的 Nginx 配置中，位于它前面的指令配置生效，位于后面的指令配置无效。并且break还有另外一个功能就是终止当前的匹配并把当前的URI在本location进行重定向访问处理。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>break;</td><td>—</td><td>server、location、if</td></tr></tbody></table><p>例子：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /testbreak &#123;</span><br><span class="line">    <span class="attribute">default_type</span> text/plain;</span><br><span class="line">    <span class="attribute">set</span> <span class="variable">$username</span> TOM;</span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$args</span>)&#123;</span><br><span class="line"><span class="attribute">set</span> <span class="variable">$username</span> JERRY;</span><br><span class="line">break;</span><br><span class="line"><span class="attribute">set</span> <span class="variable">$username</span> ROSE;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="attribute">add_header</span> username <span class="variable">$username</span>;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> <span class="variable">$username</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不带参数访问：<code>http://192.168.200.133:8081/testbreak</code></p><p>效果如图：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220802/image.2ok6tnbtnx20.webp" alt="image"></p><p>带参数访问：<code>http://192.168.200.133:8081/testbreak/1</code></p><p>效果如图：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220802/image.1f6a03pxv4ow.webp" alt="image"></p><h3 id="return指令"><a href="#return指令" class="headerlink" title="return指令"></a>return指令</h3><p>该指令用于完成对请求的处理，直接向客户端返回响应状态代码。在 return 后的所有 Nginx 配置都是无效的。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>return &lt;code&gt; [text];<br> return &lt;code&gt; &lt;URL&gt;; <br>return &lt;URL&gt;;</td><td>—</td><td>server、location、if</td></tr></tbody></table><ul><li>code：返回给客户端的 HTTP 状态代理。可以返回的状态代码为 0 ~ 999 的任意 HTTP 状态代理</li><li>text：返回给客户端的响应体内容，支持变量的使用和 JSON 字符串</li><li>URL：跳转给客户端的 URL 地址。</li></ul><p>例如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">default_type</span> text/plain;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> <span class="string">"欢迎使用 Nginx"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /baidu &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">302</span> https://www.baidu.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时访问 Nginx，就会在页面看到这句话：欢迎使用 Nginx。</p><p>如果访问 <code>/baidu</code>，则跳转到 <code>https://www.baidu.com</code>。</p><h3 id="rewrite指令"><a href="#rewrite指令" class="headerlink" title="rewrite指令"></a>rewrite指令</h3><p>该指令通过正则表达式的使用来改变 URI。可以同时存在一个或者多个指令，按照顺序依次对 URL 进行匹配和处理。</p><p>URL 和 URI 的区别：</p><ul><li>URI：统一资源标识符</li><li>URL：统一资源定位符</li></ul><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>rewrite regex replacement [flag];</td><td>—</td><td>server、location、if</td></tr></tbody></table><ul><li><p>regex：用来匹配 URI 的正则表达式</p></li><li><p>replacement：匹配成功后，用于替换 URI 中被截取内容的字符串。如果该字符串是以 『 http:// 』或者『 https:// 』开头的，则不会继续向下对URI 进行其他处理，而是直接返回重写后的 URI 给客户端。</p><p>例如：（括号的值会作为 $1 的值）^ 代表匹配输入字符串的起始位置</p></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ......</span></span><br><span class="line"><span class="attribute">listen</span> <span class="number">8081</span>;</span><br><span class="line"><span class="attribute">location</span> /rewrite &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/rewrite/url\w*$</span> https://www.baidu.com;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/rewrite/(test)\w*$</span> /<span class="variable">$1</span>;   <span class="comment"># 如果是 /rewrite/testxxx，则重写 url 为 test</span></span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/rewrite/(demo)\w*$</span> /<span class="variable">$1</span>;    <span class="comment"># 如果是 /rewrite/demoxxx，则重写 url 为 demo</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /test &#123;   <span class="comment"># 重写后的 url 如果为 test，触发 location</span></span><br><span class="line">    <span class="attribute">default_type</span> text/plain;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> test_sucess;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /demo &#123;   <span class="comment"># 重写后的 url 如果为 demo，触发 location</span></span><br><span class="line">    <span class="attribute">default_type</span> text/plain;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> demo_sucess;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 <code>http://192.168.200.113/8081/rewrite/urlxxx</code>，跳转到 <code>https://www.baidu.com</code>。</p><p>访问 <code>http://192.168.200.113/8081/rewrite/testxxx</code>，返回 test_sucess。</p><p>访问 <code>http://192.168.200.113/8081/rewrite/demoxxx</code>，返回 demo_sucess。</p><p>flag：用来设置 Rewrite 对 URI 的处理行为，可选值有如下：</p><ul><li><code>last</code>：终止继续在本 location 块中处理接收到的后续 URI，并将此处重写的 URl 作为一个新的 URI，使用各 location 块进行处理。该标志将重写后的 URI 重写在 server 块中执行，为重写后的 URI 提供了转入到其他 location 块的机会。<strong>重写地址后访问其他的 location 块，浏览器地址栏 URL 地址不变</strong></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ......</span></span><br><span class="line"><span class="attribute">listen</span> <span class="number">8081</span>;</span><br><span class="line"><span class="attribute">location</span> /rewrite &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/rewrite/(test)\w*$</span> /<span class="variable">$1</span> <span class="literal">last</span>;   <span class="comment"># 如果是 /rewrite/testxxx，则重写 url 为 test</span></span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/rewrite/(demo)\w*$</span> <span class="variable">$1</span> <span class="literal">last</span>;    <span class="comment"># 如果是 /rewrite/demoxxx，则重写 url 为 demo</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /test &#123;   <span class="comment"># 重写后的 url 如果为 test，触发 location</span></span><br><span class="line">    <span class="attribute">default_type</span> text/plain;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> test_sucess;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /demo &#123;   <span class="comment"># 重写后的 url 如果为 demo，触发 location</span></span><br><span class="line">    <span class="attribute">default_type</span> text/plain;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> demo_sucess;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 <code>http://192.168.200.113/8081/rewrite/testxxx</code>，返回 test_sucess。</p><p>访问 <code>http://192.168.200.113/8081/rewrite/demoxxx</code>，返回 demo_sucess。</p><p>单次访问不明显，多次访问，last 只处理第一个。</p><ul><li><code>break</code>：将此处重写的 URl 作为一个新的 URI，在本块中继续进行处理。该标志将重写后的地址在当前的 location 块中执行，不会将新的 URI 转向其他的 location 块。<strong>仅仅重写地址，不会触发其他 location 块，浏览器地址栏 URL 地址不变</strong></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ......</span></span><br><span class="line"><span class="attribute">listen</span> <span class="number">8081</span>;</span><br><span class="line"><span class="attribute">location</span> /rewrite &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/rewrite/(test)\w*$</span> /<span class="variable">$1</span> <span class="literal">break</span>;   <span class="comment"># 如果是 /rewrite/testxxx，则重写 url 为 test</span></span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/rewrite/(demo)\w*$</span> <span class="variable">$1</span> <span class="literal">break</span>;    <span class="comment"># 如果是 /rewrite/demoxxx，则重写 url 为 demo</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># /test 和 /demo 就在当前块进行处理，所以会在当前的 location 块找到如下 html 页面：</span></span><br><span class="line">    <span class="comment"># /usr/local/nginx/html/test/index.html</span></span><br><span class="line">    <span class="comment"># /usr/local/nginx/html/demo/index.html</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /test &#123;   <span class="comment"># 重写后的 url 如果为 test，触发 location</span></span><br><span class="line">    <span class="attribute">default_type</span> text/plain;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> test_sucess;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /demo &#123;   <span class="comment"># 重写后的 url 如果为 demo，触发 location</span></span><br><span class="line">    <span class="attribute">default_type</span> text/plain;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> demo_sucess;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和 break 指令类似。假设访问的是 /test，则将 /test 放在当前的 location 块进行处理，哪怕第二个 location 块就是处理 /test 的，它也不会去找第二个 location 块，只在当前块进行处理。所以他会请求 <code>/usr/local/nginx/html/test/index.html</code>。</p><ul><li><code>redirect</code>：将重写后的 URI 返回给客户端，状态码为 302，指明是临时重定向 URL，主要用在 replacement 变量不是以『 http:// 』或者『 https:// 』开头的情况</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ......</span></span><br><span class="line"><span class="attribute">listen</span> <span class="number">8081</span>;</span><br><span class="line"><span class="attribute">location</span> /rewrite &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/rewrite/(test)\w*$</span> /<span class="variable">$1</span> <span class="literal">redirect</span>;   <span class="comment"># 如果是 /rewrite/testxxx，则重写 url 为 test</span></span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/rewrite/(demo)\w*$</span> <span class="variable">$1</span> <span class="literal">redirect</span>;    <span class="comment"># 如果是 /rewrite/demoxxx，则重写 url 为 demo</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /test &#123;   <span class="comment"># 重写后的 url 如果为 test，触发 location</span></span><br><span class="line">    <span class="attribute">default_type</span> text/plain;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> test_sucess;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /demo &#123;   <span class="comment"># 重写后的 url 如果为 demo，触发 location</span></span><br><span class="line">    <span class="attribute">default_type</span> text/plain;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> demo_sucess;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点是重定向，就是<strong>浏览的地址栏会发送改变</strong>。如发送请求 <code>/testxxx</code>，它会重定向到 <code>/test</code>，触发第二个 location 块，浏览的地址栏也会由 <code>/testxxx</code> 变成 <code>/test</code>。</p><ul><li><code>permanent</code>：将重写后的 URI 返回给客户端，状态码为 301，指明是永久重定向 URL，主要用在 replacement 变量不是以『 http:// 』或者『 https:// 』开头的情况</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ......</span></span><br><span class="line"><span class="attribute">listen</span> <span class="number">8081</span>;</span><br><span class="line"><span class="attribute">location</span> /rewrite &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/rewrite/(test)\w*$</span> /<span class="variable">$1</span> <span class="literal">permanent</span>;   <span class="comment"># 如果是 /rewrite/testxxx，则重写 url 为 test</span></span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/rewrite/(demo)\w*$</span> <span class="variable">$1</span> <span class="literal">permanent</span>;    <span class="comment"># 如果是 /rewrite/demoxxx，则重写 url 为 demo</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /test &#123;   <span class="comment"># 重写后的 url 如果为 test，触发 location</span></span><br><span class="line">    <span class="attribute">default_type</span> text/plain;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> test_sucess;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /demo &#123;   <span class="comment"># 重写后的 url 如果为 demo，触发 location</span></span><br><span class="line">    <span class="attribute">default_type</span> text/plain;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> demo_sucess;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和 <code>redirect</code> 的区别就是状态码为 301，并且是永久重定向。</p><h3 id="flag-总结"><a href="#flag-总结" class="headerlink" title="flag 总结"></a>flag 总结</h3><table><thead><tr><th>标记符号</th><th>说明</th></tr></thead><tbody><tr><td>last</td><td>本条规则匹配完成后继续向下匹配新的 location URI 规则</td></tr><tr><td>break</td><td>本条规则匹配完成后终止，不在匹配任何规则</td></tr><tr><td>redirect</td><td>返回 302 临时重定向</td></tr><tr><td>permanent</td><td>返回 301 永久重定向</td></tr></tbody></table><ul><li>break 与 last 都停止处理后续重写规则，只不过 last 会重新发起新的请求并使用新的请求路由匹配location，但 break 不会。所以当请求 break 时，如匹配成功，则请求成功，返回 200；如果匹配失败，则返回 404</li><li>服务器配置好 redirect 和 permanent 之后，打开浏览器分别访问这两个请求地址，然后停止 Nginx 服务。这时再访问 redirect 请求会直接报出无法连接的错误。但是 permanent 请求是永久重定向，浏览器会忽略原始地址直接访问永久重定向之后的地址，所以请求仍然成功。（这个验证不能禁用浏览器的缓存，否则即使是 permanent 重定向，浏览器仍然会向原始地址发出请求验证之前的永久重定向是否有效）</li><li>对于搜索引擎来说，搜索引擎在抓取到 301 永久重定向请求响应内容的同时也会将原始的网址替换为重定向之后的网址，而对于 302 临时重定向请求则仍然会使用原始的网址并且可能会被搜索引擎认为有作弊的嫌疑。所以对于线上正式环境来讲，尽量避免使用 302 跳转</li><li>如果 replacement 以 「 http:// 」或「 https:// 」或「 $scheme 」开始，处理过程将终止，并将这个重定向直接返回给客户端</li></ul><h3 id="rewrite-log指令"><a href="#rewrite-log指令" class="headerlink" title="rewrite_log指令"></a>rewrite_log指令</h3><p>该指令配置是否开启 URL 重写日志的输出功能，默认关闭。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>rewrite_log &lt;on | off&gt;;</td><td>rewrite_log off;</td><td>http、server、location、if</td></tr></tbody></table><p>开启后，URL 重写的相关日志将以 notice 级别输出到 error_log 指令配置的日志文件汇总。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /rewrite_log &#123;</span><br><span class="line">    <span class="attribute">rewrite_log</span> <span class="literal">on</span>;    <span class="comment"># 开启重写日志</span></span><br><span class="line"><span class="attribute">error_log</span> logs /error.log <span class="literal">notice</span>;   <span class="comment"># 切换为 notice 模式，因为只支持这个模式</span></span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> <span class="string">'开启了重写日志'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Rewrite的案例"><a href="#Rewrite的案例" class="headerlink" title="Rewrite的案例"></a>Rewrite的案例</h2><h3 id="域名跳转"><a href="#域名跳转" class="headerlink" title="域名跳转"></a>域名跳转</h3><p>问题分析</p><p>先来看一个效果，如果我们想访问京东网站，大家都知道我们可以输入 <code>www.jd.com</code>，但是同样的我们也可以输入 <code>www.360buy.com</code> 同样也都能访问到京东网站。这个其实是因为京东刚开始的时候域名就是 <code>www.360buy.com</code>，后面由于各种原因把自己的域名换成了 <code>www.jd.com</code>，虽然说域名改变了，但是对于以前只记住了 <code>www.360buy.com</code> 的用户来说，我们如何把这部分用户也迁移到我们新域名的访问上来，针对于这个问题，我们就可以使用 Nginx 中 Rewrite 的域名跳转来解决。</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li>准备两个域名 <a href="http://www.360buy.com" target="_blank" rel="noopener">www.360buy.com</a> | <a href="http://www.jd.com" target="_blank" rel="noopener">www.jd.com</a></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><p>添加内容：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.168.200.133 www.360buy.com</span><br><span class="line">192.168.200.133 www.jd.com</span><br></pre></td></tr></table></figure><ul><li>在 <code>/usr/local/nginx/html/test</code> 目录下创建一个访问页面 frx.html</li></ul><p>添加内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎来到我的网站<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通过 Nginx 实现当访问 <code>www.frx.com</code> 访问到 frx.html 页面</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> www.frx.com;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">root</span> /usr/local/nginx/html/;</span><br><span class="line"><span class="attribute">index</span> frx.html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 Rewrite 完成将 <code>www.360buy.com</code> 的请求跳转到 <code>www.jd.com</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> www.360buy.com;</span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^/</span> http://www.jd.com <span class="literal">permanent</span>;   <span class="comment"># 永久重定向</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问题描述：如何在域名跳转的过程中携带请求的 URI？</strong></p><p>比如 <code>www.360buy.com?part=显示器</code> 变成 <code>www.jd.com?part=显示器</code></p><ul><li>修改配置信息</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> www.itheima.com;</span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^(.*)</span> http://www.hm.com<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>括号里是 <code>www.itheima.com</code> 后面出现 0 次或 多次不以 \n（换行）结尾的值，该值赋给 $1。</p><p><strong>问题描述：我们除了上述说的只有 <a href="http://www.jd.com、www.360buy.com，其实还有我们也可以通过" target="_blank" rel="noopener">www.jd.com、www.360buy.com，其实还有我们也可以通过</a> <a href="http://www.jingdong.com" target="_blank" rel="noopener">www.jingdong.com</a> 来访问，那么如何通过 Rewrite 来实现多个域名的跳转?</strong></p><ul><li>添加域名</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开 hosts 文件</span></span><br><span class="line">vim /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加域名</span></span><br><span class="line">192.168.200.133 www.jingdong.com</span><br></pre></td></tr></table></figure><ul><li>修改配置信息</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> www.360buy.com www.jingdong.com;</span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^(.*)</span> http://www.jd.com<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多个 server_name 用空格隔开。</p><h3 id="域名镜像"><a href="#域名镜像" class="headerlink" title="域名镜像"></a>域名镜像</h3><p>上述案例中，将 <code>www.360buy.com</code> 和 <code>www.jingdong.com</code> 都能跳转到 <code>www.jd.com</code>，那么 <code>www.jd.com</code> 我们就可以把它起名叫主域名，其他两个就是我们所说的镜像域名，当然如果我们不想把整个网站做镜像，只想为其中某一个子目录下的资源做镜像，比如用户可以跳到首页 Web下，而管理员跳转到后台 Web，我们可以在 location 块中配置 Rewrite 功能。</p><p>比如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> rewrite.myweb.com;</span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /user &#123;</span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^/user(.*)</span> http://www.myweb.com/index<span class="variable">$1</span> <span class="literal">last</span>;  <span class="comment"># 用户跳到首页</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /manage &#123;</span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^/manage(.*)</span> http://www.myweb.com/manage<span class="variable">$1</span> <span class="literal">last</span>;  <span class="comment"># 管理员跳到后台</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="独立域名"><a href="#独立域名" class="headerlink" title="独立域名"></a>独立域名</h3><p>一个完整的项目包含多个模块，比如购物网站有商品商品搜索模块、商品详情模块已经购物车模块等，那么我们如何为每一个模块设置独立的域名。</p><p>需求：</p><ul><li><code>http://search.product.com</code>：访问商品搜索模块</li><li><code>http://item.product.com</code>：访问商品详情模块</li><li><code>http://cart.product.com</code>：访问商品购物车模块</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> search.product.com;</span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^(.*)</span> http://www.shop.com/search<span class="variable">$1</span> <span class="literal">last</span>;</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">81</span>;</span><br><span class="line"><span class="attribute">server_name</span> item.product.com;</span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^(.*)</span> http://www.shop.com/item<span class="variable">$1</span> <span class="literal">last</span>;</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">82</span>;</span><br><span class="line"><span class="attribute">server_name</span> cart.product.com;</span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^(.*)</span> http://www.shop.com/cart<span class="variable">$1</span> <span class="literal">last</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动加『-』"><a href="#自动加『-』" class="headerlink" title="自动加『/』"></a>自动加『/』</h3><p>有时候访问的地址要求后面以 <code>/</code> 结尾，那么我们需要解决如果用户忘记输入 <code>/</code>，Nginx 就会自动加上 <code>/</code>。</p><p>通过一个例子来演示问题：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span><span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> localhost;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">root</span> html;</span><br><span class="line"><span class="attribute">index</span> index.html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要想访问上述资源，很简单，只需要通过 <code>http://192.168.200.133</code> 直接就能访问，地址后面不需要加 /，但是如果将上述的配置修改为如下内容:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span><span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> localhost;</span><br><span class="line"><span class="attribute">location</span> /frx &#123;</span><br><span class="line"><span class="attribute">root</span> html;</span><br><span class="line"><span class="attribute">index</span> index.html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候，要想访问上述资源，按照上述的访问方式，我们可以通过 <code>http://192.168.200.133/frx/</code> 来访问，但是如果地址后面不加斜杠，如 <code>http://192.168.200.133/frx</code>，页面就会出问题。如果不加斜杠，Nginx 服务器内部会自动做一个 301 的重定向，重定向的地址会有一个指令叫 <code>server_name_in_redirect</code> 来决定重定向的地址：</p><ul><li><p>如果该指令为 on</p><p>重定向的地址为：<code>http://server_name/目录名/</code></p></li><li><p>如果该指令为 off</p><p>重定向的地址为：<code>http://原URL中的域名/目录名/</code></p></li></ul><p>所以就拿刚才的地址来说，访问 <code>http://192.168.200.133/frx</code> 如果不加斜杠，那么按照上述规则：</p><ul><li>如果指令 <code>server_name_in_redirect</code> 为 on，则 301 重定向地址变为 <code>http://localhost/frx/</code>，IP 发生改变，地址出现了问题</li><li>如果指令 <code>server_name_in_redirect</code> 为 off，则 301 重定向地址变为 <code>http://192.168.200.133/frx/</code>。这个符合我们的期望</li></ul><p>注意 <code>server_name_in_redirect</code> 指令在 Nginx 的 0.8.48 版本之前默认都是 on，之后改成了 off，所以现在我们这个版本不需要考虑这个问题，但是如果是 0.8.48 以前的版本并且 server_name_in_redirect 设置为 on，我们如何通过 Rewrite 来解决这个问题？</p><p>解决方案</p><p>我们可以使用 Rewrite 功能为末尾没有斜杠的 URL 自动添加一个斜杠</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span><span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> localhost;</span><br><span class="line"><span class="attribute">server_name_in_redirect</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">location</span> /frx &#123;</span><br><span class="line"><span class="attribute">if</span> (-d <span class="variable">$request_filename</span>)&#123;   <span class="comment"># 如果请求的资源目录存在</span></span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^/(.*)([^/])$</span> http://<span class="variable">$host</span>/<span class="variable">$1</span><span class="variable">$2</span>/ <span class="literal">permanent</span>; <span class="comment"># $2 获取第二个括号的值：/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$1 是第一个括号的值，$2 是第二个括号的值。</p><h3 id="合并目录"><a href="#合并目录" class="headerlink" title="合并目录"></a>合并目录</h3><p>搜索引擎优化(SEO)是一种利用搜索引擎的搜索规则来提供目的网站的有关搜索引擎内排名的方式。我们在创建自己的站点时，可以通过很多中方式来有效的提供搜索引擎优化的程度。其中有一项就包含 URL 的目录层级，一般不要超过三层，否则的话不利于搜索引擎的搜索，也给客户端的输入带来了负担，但是将所有的文件放在一个目录下，又会导致文件资源管理混乱，并且访问文件的速度也会随着文件增多而慢下来，这两个问题是相互矛盾的，那么使用 Rewrite 如何解决这些问题呢？</p><p>举例，网站中有一个资源文件的访问路径 <code>/server/11/22/33/44/20.html</code>，也就是说 20.html 存在于第 5 级目录下，如果想要访问该资源文件，客户端的 URL 地址就要写成 <code>http://www.web.com/server/11/22/33/44/20.html</code>，并且在配置文件进行如下配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> www.web.com;</span><br><span class="line"><span class="attribute">location</span> /server &#123;</span><br><span class="line"><span class="attribute">root</span> html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个是非常不利于 SEO 搜索引擎优化的，同时客户端也不好记。使用 Rewrite 的正则表达式，我们可以进行如下配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.web.com;</span><br><span class="line">    <span class="attribute">location</span> /server &#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/server-([0-9]+)-([0-9]+)-([0-9]+)-([0-9]+)\.html$</span>  /server/<span class="variable">$1</span>/<span class="variable">$2</span>/<span class="variable">$3</span>/<span class="variable">$4</span>/<span class="variable">$5</span>.html <span class="literal">last</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样配置后，客户端只需要输入 <code>http://www.web.com/server-11-22-33-44-20.html</code> 就可以访问到 20.html 页面了。这里也充分利用了 Rewrite 指令支持正则表达式的特性。</p><h3 id="多级域名"><a href="#多级域名" class="headerlink" title="多级域名"></a>多级域名</h3><p>当你配置了多级域名，如二级域名 <code>xxx.frxcat.fun</code>，并且静态资源目录恰好和二级域名的 <code>xxx</code> 可以匹配，则可以使用正则表达式进行匹配，日后，如果又多个 <code>xxx</code>，则再创建对应的该目录即可。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> ~^(.+)?.frxcat.fun$;</span><br><span class="line">    <span class="attribute">index</span> idnex.html;</span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$host</span> = frxcat.fun)&#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> https://www.frxcat.fun<span class="variable">$2</span> <span class="literal">permanent</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">root</span> /data/html/<span class="variable">$1</span>/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样访问 <code>docs.frxcat.fun</code>，自动去 <code>/data/html/docs/</code> 目录下找到 index.html，如果是 <code>bing.youngkbt.cn</code>，则会去 <code>/data/html/bing/</code> 目录下找到 idnex.html，以此类推。</p><p>if 语句的作用是将 <code>frxcat.fun</code> 重定向到 <code>www.frxcat.fun</code>，这样既解决了网站的主目录访问，又可以增加 SEO 中对 <code>www.frxcat.fun</code> 的域名权重。</p><h3 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h3><p>防盗链之前我们已经介绍过了相关的知识，在 Rewrite 中的防盗链和之前将的原理其实都是一样的，只不过通过 Rewrite 可以将防盗链的功能进行完善下，当出现防盗链的情况，我们可以使用 Rewrite 将请求转发到自定义的一张图片和页面，给用户比较好的提示信息。</p><p>下面有两个配置实例：</p><ul><li>根据文件类型实现防盗链配置：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> www.web.com;</span><br><span class="line"><span class="attribute">locatin</span> <span class="regexp">~* ^.+\.(gif|jpg|png|swf|flv|rar|zip)$</span> &#123;</span><br><span class="line"><span class="attribute">valid_referers</span> <span class="literal">none</span> <span class="literal">blocked</span> server_names <span class="regexp">*.web.com</span>; <span class="comment"># server_names 后指定具体的域名或者 IP</span></span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$invalid_referer</span>)&#123;</span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^/</span> http://www.web.com/images/forbidden.png;  <span class="comment"># 跳转到默认地址</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>根据目录实现防盗链配置：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> www.web.com;</span><br><span class="line"><span class="attribute">location</span> /file &#123;</span><br><span class="line"><span class="attribute">root</span> /server/file;  <span class="comment"># 资源在 server 目录下的 file 目录里</span></span><br><span class="line"><span class="attribute">valid_referers</span> <span class="literal">none</span> <span class="literal">blocked</span> server_names <span class="regexp">*.web.com</span>; <span class="comment"># server_names 后指定具体的域名或者 IP</span></span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$invalid_referer</span>)&#123;</span><br><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^/</span> http://www.web.com/images/forbidden.png;  <span class="comment"># 跳转到 file 目录下的图片</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问限流"><a href="#访问限流" class="headerlink" title="访问限流"></a>访问限流</h2><p>我们构建网站是为了让用户访问它们，我们希望用于合法访问。所以不得不采取一些措施限制滥用访问的用户。这种滥用指的是从同一 IP 每秒到服务器请求的连接数。因为这可能是在同一时间内，世界各地的多台机器上的爬虫机器人多次尝试爬取网站的内容。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 限制用户连接数来预防 DOS 攻击</span></span><br><span class="line"><span class="attribute">limit_conn_zone</span> <span class="variable">$binary_remote_addr</span> zone=perip:<span class="number">10m</span>;</span><br><span class="line"><span class="attribute">limit_conn_zone</span> <span class="variable">$server_name</span> zone=perserver:<span class="number">10m</span>;</span><br><span class="line"><span class="comment"># 限制同一客户端 ip 最大并发连接数</span></span><br><span class="line"><span class="attribute">limit_conn</span> perip <span class="number">2</span>;</span><br><span class="line"><span class="comment"># 限制同一server最大并发连接数</span></span><br><span class="line"><span class="attribute">limit_conn</span> perserver <span class="number">20</span>;</span><br><span class="line"><span class="comment"># 限制下载速度，根据自身服务器带宽配置</span></span><br><span class="line"><span class="attribute">limit_rate</span> <span class="number">300k</span>;</span><br></pre></td></tr></table></figure><h2 id="链接超时"><a href="#链接超时" class="headerlink" title="链接超时"></a>链接超时</h2><p>长时间占着连接资源不释放，最终会导致请求的堆积，Nginx 处理请求效率大大降低。所以我们对连接的控制都要注意设置超时时间，通过超时机制自动回收资源、避免资源浪费。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端、服务端设置</span></span><br><span class="line"><span class="attribute">server_names_hash_bucket_size</span> <span class="number">128</span>;</span><br><span class="line"><span class="attribute">server_names_hash_max_size</span> <span class="number">512</span>;</span><br><span class="line"><span class="comment"># 长连接超时配置</span></span><br><span class="line"><span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"><span class="attribute">client_header_timeout</span> <span class="number">15s</span>;</span><br><span class="line"><span class="attribute">client_body_timeout</span> <span class="number">15s</span>;</span><br><span class="line"><span class="attribute">send_timeout</span> <span class="number">60s</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理设置</span></span><br><span class="line"><span class="comment"># 与后端服务器建立连接的超时时间。注意这个一般不能大于 75 秒</span></span><br><span class="line"><span class="attribute">proxy_connect_timeout</span> <span class="number">30s</span>;</span><br><span class="line"><span class="attribute">proxy_send_timeout</span> <span class="number">120s</span>;</span><br><span class="line"><span class="comment"># 从后端服务器读取响应的超时</span></span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">120s</span>;</span><br></pre></td></tr></table></figure><h2 id="HTML引入"><a href="#HTML引入" class="headerlink" title="HTML引入"></a>HTML引入</h2><p>我们编写 .html 文件的时候，难免需要引入 css 和 js 文件，如果是在本地，那么引入非常简单，直接相对路径即可，但是部署到 Nginx 时，相对路径不再是相对 html 文件的目录，所以生产环境和开发环境的引入格式不一样。</p><p>在 Nginx 中的 .html 文件，引入 css 和 js，要加上 <code>/</code> 作为开头，<code>/</code> 代表 Nginx 的根目录，即配置文件 <code>location /</code> 的指定的 root 路径。</p><p>比如 Nginx 的配置文件内容如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /usr/local/nginx/html; <span class="comment"># 静态文件根目录</span></span><br><span class="line">        <span class="attribute">index</span> idnex.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一个 aa.html 在 <code>/usr/local/nginx/html/test</code> 目录下，并且 aa.html 引入了 aa.css 和 aa.js，两个静态文件在 aa.html 所在目录的 static 文件夹里。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/nginx/html/<span class="built_in">test</span> 目录</span><br><span class="line">├── a.html</span><br><span class="line">├── static</span><br><span class="line">│├── a.css</span><br><span class="line">│├── a.js</span><br></pre></td></tr></table></figure><p>在本地环境，我们可以这样写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"static/aa.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"static/aa.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是部署到 Nginx 后，这样写会找不到这两个资源，因为 <code>/</code> 触发 <code>location /</code>，进入 <code>/usr/local/nginx/html</code> 目录，而这两个文件在 <code>/usr/local/nginx/html/test/static</code> 目录下，所以我们部署到 Nginx 后，需要修改为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/test/static/aa.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/test/static/aa.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Nginx </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 基础配置实例</title>
      <link href="/2022/11/10/Nginx_Basic_case_configuration/"/>
      <url>/2022/11/10/Nginx_Basic_case_configuration/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="Nginx-基础配置实例"><a href="#Nginx-基础配置实例" class="headerlink" title="Nginx 基础配置实例"></a>Nginx 基础配置实例</h1><p><strong>引言</strong></p><p>学习了核心配置文件的内容，也仅仅是学习，没有实际例子来巩固的知识容易流失，本内容带你写一个简单的 demo 实例。</p><p>每次开机都手动启动 Nginx 服务？每次使用 Nginx 的指令总是要进入 sbin 目录下？本文带你配置 Naginx 服务自启和全局 nginx 指令。</p><h2 id="基础配置实例"><a href="#基础配置实例" class="headerlink" title="基础配置实例"></a>基础配置实例</h2><p>前面我们已经对 Nginx 服务器默认配置文件的结构和涉及的基本指令做了详细的阐述。通过这些指令的合理配置，我们就可以让一台 Nginx 服务器正常工作，并且提供基本的 Web 服务器功能。</p><p>接下来我们将通过一个比较完整和最简单的基础配置实例，来巩固下前面所学习的指令及其配置。</p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><ul><li><p>有如下访问：</p><p><code>http://192.168.199.27:8081/server1/location1</code> 访问的是：index_sr1_location1.html <code>http://192.168.199.27:8081/server1/location2</code> 访问的是：index_sr1_location2.html <code>http://192.168.199.27:8082/server2/location1</code> 访问的是：index_sr2_location1.html <code>http://192.168.199.27:8082/server2/location2</code> 访问的是：index_sr2_location2.html</p></li><li><p>如果访问的资源不存在，返回自定义的 404 页面</p></li><li><p>将 /server1 和 /server2 的配置使用不同的配置文件分割，将两个文件文件放到 /home/www/conf.d 目录下，然后在 Nginx 的配置文件使用 include 合并两个文件</p></li><li><p>为 /server1 和 /server2 各自创建一个访问日志文件</p></li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 404 页面</span></span><br><span class="line">touch /home/www/404.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 conf.d 目录</span></span><br><span class="line">mkdir /home/www/conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建两个配置文件</span></span><br><span class="line">touch /home/www/conf/server1.conf</span><br><span class="line">touch /home/www/conf/server2.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 myweb 目录</span></span><br><span class="line">mkdir /home/www/myweb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 server1 目录和其子目录以及 index.html 文件</span></span><br><span class="line">mkdir -p /home/www/myweb/server1/location1</span><br><span class="line">mkdir -p /home/www/myweb/server1/location2</span><br><span class="line"></span><br><span class="line">touch /home/www/myweb/server1/location1/index.html</span><br><span class="line">touch /home/www/myweb/server1/location2/index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建日志目录和日志文件</span></span><br><span class="line">mkdir -p /home/www/myweb/server1/logs</span><br><span class="line">touch /home/www/myweb/server1/logs/access.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 server2 目录和其子目录以及 index.html 文件</span></span><br><span class="line"><span class="comment"># 和创建 server1 步骤一样，把 1 改为 2 即可</span></span><br></pre></td></tr></table></figure><p>准备相关文件，/homw/www 目录如下：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.2fjy4216srrw.webp" alt="image"></p><p>因为 Nginx 自带配置文件的备份，即 nginx.conf.default，所以我们可以直接修改配置文件，但是如果你的配置文件曾经修改过，那么请进行备份。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf.backup</span><br></pre></td></tr></table></figure><p>备份后，进入 <code>/usr/local/nginx/conf/nginx.conf</code> 配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p>先清空文件，然后添加如下内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cache-lifetime=&quot;5&quot; :options=&quot;&#123; useUrlFragment: false &#125;&quot;</span><br></pre></td></tr></table></figure><p><strong>有注释版</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span> www; <span class="comment"># 配置允许运行 Nginx 工作进程的用户和用户组</span></span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">2</span>;  <span class="comment"># 配置运行 Nginx 进程生成的 worker 进程数</span></span><br><span class="line"><span class="attribute">error_log</span> logs/error.log;  <span class="comment"># 配置 Nginx 服务器运行对错误日志存放的路径</span></span><br><span class="line"><span class="attribute">pid</span> logs/nginx.pid;   <span class="comment"># 配置 Nginx 服务器允许时记录 Nginx 的 master 进程的 PID 文件路径和名称</span></span><br><span class="line"><span class="attribute">daemon</span> <span class="literal">on</span>;   <span class="comment"># 配置 Nginx 服务是否以守护进程方法启动</span></span><br><span class="line"></span><br><span class="line">events&#123;</span><br><span class="line"><span class="attribute">accept_mutex</span> <span class="literal">on</span>;   <span class="comment"># 设置 Nginx 网络连接序列化,解决惊群</span></span><br><span class="line"><span class="attribute">multi_accept</span> <span class="literal">on</span>;   <span class="comment"># 设置 Nginx 的 worker 进程是否可以同时接收多个请求</span></span><br><span class="line"><span class="attribute">worker_connections</span> <span class="number">1024</span>;   <span class="comment"># 设置 Nginx 的 worker 进程最大的连接数</span></span><br><span class="line"><span class="attribute">use</span> <span class="literal">epoll</span>;   <span class="comment"># 设置 Nginx 使用的事件驱动模型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">include</span> mime.types;   <span class="comment"># 定义 MIME-Type</span></span><br><span class="line"><span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line"><span class="attribute">sendfile</span> <span class="literal">on</span>;   <span class="comment"># 配置允许使用 sendfile 方式运输</span></span><br><span class="line"><span class="attribute">keepalive_timeout</span> <span class="number">65</span>;   <span class="comment"># 配置连接超时时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置请求处理日志格式</span></span><br><span class="line"><span class="attribute">log_format</span> server1 <span class="string">'===&gt;server1 access log'</span>;</span><br><span class="line"><span class="attribute">log_format</span> server2 <span class="string">'===&gt;server2 access log'</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">include</span> /home/www/conf/<span class="regexp">*.conf</span>;  <span class="comment"># 引用其他 conf 文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>无注释版</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span> www;</span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">2</span>;</span><br><span class="line"><span class="attribute">error_log</span> logs/error.log;</span><br><span class="line"><span class="attribute">pid</span> logs/nginx.pid;</span><br><span class="line"><span class="attribute">daemon</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">events&#123;</span><br><span class="line"><span class="attribute">accept_mutex</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">multi_accept</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line"><span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http&#123;</span><br><span class="line"></span><br><span class="line"><span class="attribute">include</span> mime.types;</span><br><span class="line"><span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line"><span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">keepalive_timeout</span> <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">log_format</span> server1 <span class="string">'===&gt;this is server1 access log'</span>;</span><br><span class="line"><span class="attribute">log_format</span> server2 <span class="string">'===&gt;this is server2 access log'</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">include</span> /home/www/conf/<span class="regexp">*.conf</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第 25 行代码使用 include 将 service1 和service2 的配置文件进行引用。以后无需修改主配置文件，只需要引入子配置文件即可，主配置文件作为默认值，子配置文件的内容会覆盖和主配置文件相同的内容。</p><p>进入 server1.conf 文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /home/www/conf/server1.conf</span><br></pre></td></tr></table></figure><p>server1.conf 文件内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cache-lifetime=&quot;5&quot; :options=&quot;&#123; useUrlFragment: false &#125;&quot;</span><br></pre></td></tr></table></figure><p><strong>有注释版</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">8081</span>;   <span class="comment"># 配置监听端口和主机名称</span></span><br><span class="line">  <span class="attribute">server_name</span> localhost;</span><br><span class="line">  <span class="attribute">access_log</span> /home/www/myweb/server1/logs/access.log server1;   <span class="comment"># 配置请求处理日志存放路径</span></span><br><span class="line">  <span class="attribute">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html;   <span class="comment"># 配置错误页面</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> /server1/location1&#123;   <span class="comment"># 配置处理 /server1/location1 请求的 location</span></span><br><span class="line">      <span class="attribute">root</span> /home/www/myweb;</span><br><span class="line">      <span class="attribute">index</span> index.html;       <span class="comment"># 这是 server1 下的 location1 的 index.html</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> /server1/location2&#123;   <span class="comment"># 配置处理 /server1/location2 请求的 location</span></span><br><span class="line">      <span class="attribute">root</span> /home/www/myweb;</span><br><span class="line">      <span class="attribute">index</span> index.html;    <span class="comment"># 这是 server1 下的 location2 的 index.html</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> = /<span class="number">404</span>.html &#123;   <span class="comment"># 配置错误页面转向</span></span><br><span class="line">      <span class="attribute">root</span> /home/www;</span><br><span class="line">      <span class="attribute">index</span> <span class="number">404</span>.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>无注释版</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">8081</span>;</span><br><span class="line">  <span class="attribute">server_name</span> localhost;</span><br><span class="line">  <span class="attribute">access_log</span> /home/www/myweb/server1/logs/access.log server1;</span><br><span class="line">  <span class="attribute">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">location</span> /server1/location1&#123;</span><br><span class="line">      <span class="attribute">root</span> /home/www/myweb;</span><br><span class="line">      <span class="attribute">index</span> index.html;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">location</span> /server1/location2&#123;</span><br><span class="line">      <span class="attribute">root</span> /home/www/myweb;</span><br><span class="line">      <span class="attribute">index</span> index.html;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">location</span> = /<span class="number">404</span>.html &#123;</span><br><span class="line">      <span class="attribute">root</span> /home/www;</span><br><span class="line">      <span class="attribute">index</span> <span class="number">404</span>.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server2.conf 文件内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cache-lifetime=&quot;5&quot; :options=&quot;&#123; useUrlFragment: false &#125;&quot;</span><br></pre></td></tr></table></figure><p><strong>有注释版</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">8082</span>;   <span class="comment"># 配置监听端口和主机名称</span></span><br><span class="line">  <span class="attribute">server_name</span> localhost;</span><br><span class="line">  <span class="attribute">access_log</span> /home/www/myweb/server2/logs/access.log server2;   <span class="comment"># 配置请求处理日志存放路径</span></span><br><span class="line">  <span class="attribute">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html;   <span class="comment"># 配置错误页面,对404.html做了定向配置</span></span><br><span class="line">  </span><br><span class="line">  <span class="attribute">location</span> /server2/location1&#123;   <span class="comment"># 配置处理 /server1/location1 请求的 location</span></span><br><span class="line">      <span class="attribute">root</span> /home/www/myweb;</span><br><span class="line">      <span class="attribute">index</span> index.html;   <span class="comment"># 这是 server2 下的 location1 的 index.html</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="attribute">location</span> /server2/location2&#123;   <span class="comment"># 配置处理 /server2/location2 请求的 location</span></span><br><span class="line">      <span class="attribute">root</span> /home/www/myweb;</span><br><span class="line">      <span class="attribute">index</span> index.html;    <span class="comment"># 这是 server2 下的 location2 的 index.html</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">location</span> = /<span class="number">404</span>.html &#123;   <span class="comment"># 配置错误页面转向</span></span><br><span class="line">      <span class="attribute">root</span> /home/www;</span><br><span class="line">      <span class="attribute">index</span> <span class="number">404</span>.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>无注解版</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">8082</span>;</span><br><span class="line">  <span class="attribute">server_name</span> localhost;</span><br><span class="line">  <span class="attribute">access_log</span> /home/www/myweb/server2/logs/access.log server2;</span><br><span class="line">  <span class="attribute">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">location</span> /server2/location1&#123;</span><br><span class="line">      <span class="attribute">root</span> /home/www/myweb;</span><br><span class="line">      <span class="attribute">index</span> index.html;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">location</span> /server2/location2&#123;</span><br><span class="line">      <span class="attribute">root</span> /home/www/myweb;</span><br><span class="line">      <span class="attribute">index</span> index.html;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">location</span> = /<span class="number">404</span>.html &#123;</span><br><span class="line">      <span class="attribute">root</span> /home/www;</span><br><span class="line">      <span class="attribute">index</span> <span class="number">404</span>.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server1下面的location1下面的index.html的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>server1下面的loaction1下面的index.html<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他的三个页面把数字改了就可以</p><p>404.html内容;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>不好意思，程序小哥正在加紧维修中 ...... <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重启 Nginx ，使得配置文件生效</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>如果没有关闭防火墙，记得开放 8081 和 8082 端口。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开放 8081 和 8082 端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=8081/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=8082/tcp --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启防火墙</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>打开浏览器分别访问，效果如图所示：</p><p>8081 的 server1 的 location1：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.8hg9dg1p4z0.webp" alt="image"></p><p>8081 的 server1 的 location2：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.2dphfquey6v4.webp" alt="image"></p><p>8082 的 server2 的 location1：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.rfbc49fqpmo.webp" alt="image"></p><p>8082 的 server2 的 location2：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.1m80pe5hx1q8.webp" alt="image"></p><p>如果访问一个不存在的 404 请求：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220729/image.3fccke6ob8c0.webp" alt="image"></p><p>日志也会打印，这里演示一个：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@master www]<span class="comment"># tail /home/www/myweb/server1/logs/access.log</span></span><br><span class="line">===&gt;this is server1 access <span class="built_in">log</span></span><br><span class="line">===&gt;this is server1 access <span class="built_in">log</span></span><br><span class="line">===&gt;this is server1 access <span class="built_in">log</span></span><br><span class="line">===&gt;this is server1 access <span class="built_in">log</span></span><br><span class="line">===&gt;this is server1 access <span class="built_in">log</span></span><br><span class="line">===&gt;this is server1 access <span class="built_in">log</span></span><br><span class="line">===&gt;this is server1 access <span class="built_in">log</span></span><br><span class="line">===&gt;this is server1 access <span class="built_in">log</span></span><br><span class="line">===&gt;this is server1 access <span class="built_in">log</span></span><br><span class="line">===&gt;this is server1 access <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h2 id="操作的问题"><a href="#操作的问题" class="headerlink" title="操作的问题"></a>操作的问题</h2><p>经过前面的操作，我们会发现，如果想要启动、关闭或重新加载 Nginx 配置文件，都需要先进入到 Nginx 的安装目录的 sbin 目录，然后使用 Nginx 的二级制可执行文件 nginx 来操作，相对来说操作比较繁琐，这块该如何优化？另外如果我们想把 Nginx 设置成随着服务器启动就自动完成启动操作，又该如何来实现？</p><p>这就需要用到接下来我们要讲解的两个知识点：</p><ul><li>Nginx 服务启停配置</li><li>Nginx 全局命令配置</li></ul><h2 id="服务启停配置"><a href="#服务启停配置" class="headerlink" title="服务启停配置"></a>服务启停配置</h2><p>把 Nginx 应用服务设置成为系统服务，方便对 Nginx 服务的启动和停止等相关操作，具体实现步骤:</p><ul><li>在 <code>/usr/lib/systemd/system</code> 目录下创建 nginx.service 文件</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/nginx.service</span><br></pre></td></tr></table></figure><p>文件添加如下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nginx web service</span><br><span class="line">Documentation=http://nginx.org/en/docs/</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/usr/<span class="built_in">local</span>/nginx/logs/nginx.pid</span><br><span class="line">ExecStartPre=/usr/<span class="built_in">local</span>/nginx/sbin/nginx -t -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line">ExecReload=/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s stop</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=default.target</span><br></pre></td></tr></table></figure><p>注意：可执行文件 nginx 根据自己的路径进行修改，以及 .conf 配置文件和 .pid 文件的路径。这份内容是基于默认安装目录的。</p><ul><li>添加完成后，如果权限有问题需要进行权限设置，没有则忽略这一步</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 /usr/lib/systemd/system/nginx.service</span><br></pre></td></tr></table></figure><ul><li>使用系统命令来操作 Nginx 服务</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 Nginx</span></span><br><span class="line">systemctl start nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止 Nginx</span></span><br><span class="line">systemctl stop nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 Nginx</span></span><br><span class="line">systemctl restart nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载配置文件</span></span><br><span class="line">systemctl reload nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Nginx 状态</span></span><br><span class="line">systemctl status nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭开启启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> nginx</span><br></pre></td></tr></table></figure><h2 id="全局命令配置"><a href="#全局命令配置" class="headerlink" title="全局命令配置"></a>全局命令配置</h2><p>前面我们介绍过 Nginx 安装目录下的二级制可执行文件 <code>nginx</code> 的很多命令，要想使用这些命令前提是需要进入 sbin 目录下才能使用，很不方便，如何去优化，我们可以将该二进制可执行文件加入到系统的环境变量，这样的话在任何目录都可以使用 nginx 对应的相关命令。具体实现步骤如下:</p><p>方法一：</p><ul><li>修改 <code>/etc/profile</code> 文件</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在最后一行添加</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/nginx/sbin</span><br></pre></td></tr></table></figure><p>可执行文件 nginx 的路径根据自己的路径修改，这里是默认路径。</p><ul><li>使之立即生效</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><ul><li>任意位置执行 nginx 命令，测试成功</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># nginx -v</span></span><br><span class="line">nginx version: nginx/1.21.6</span><br></pre></td></tr></table></figure><p>方法二：</p><ul><li>将可执行文件 nginx 拷贝一份到 /usr/bin 目录下</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/<span class="built_in">local</span>/nginx/sbin/nginx /usr/bin</span><br></pre></td></tr></table></figure><ul><li>任意位置执行 nginx 命令，测试成功</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># nginx -v</span></span><br><span class="line">nginx version: nginx/1.21.6</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Nginx </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 核心配置文件</title>
      <link href="/2022/11/10/Nginx_Configuration_file/"/>
      <url>/2022/11/10/Nginx_Configuration_file/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="Nginx-核心配置文件"><a href="#Nginx-核心配置文件" class="headerlink" title="Nginx 核心配置文件"></a>Nginx 核心配置文件</h1><p>从前面的内容学习中，我们知道 Nginx 的核心配置文件默认是放在 <code>/usr/local/nginx/conf/nginx.conf</code>，本次我们就来学习下 nginx.conf 的内容和基本配置方法。</p><hr><h2 id="配置文件内容"><a href="#配置文件内容" class="headerlink" title="配置文件内容"></a>配置文件内容</h2><p>读取 Nginx 自带的 Nginx 配置文件，配置文件内容很多，我们先将其中的注释部分【学习一个技术点就是在 Nginx 的配置文件中可以使用 <code>#</code> 来注释】删除掉后，就剩下如下内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;   <span class="comment"># 使用指令 1 </span></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;    <span class="comment"># 这是 events 块</span></span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;    <span class="comment"># 这是 http 块</span></span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;   <span class="comment"># 监听 80 端口</span></span><br><span class="line">        <span class="attribute">server_name</span>  localhost;   <span class="comment"># 监听请求过来的 IP</span></span><br><span class="line">        <span class="attribute">location</span> / &#123;   <span class="comment"># 请求的地址是 /，则进入这个配置，访问 idnex.html</span></span><br><span class="line">            <span class="attribute">root</span>   html;      <span class="comment"># 进入 html 目录找到访问的页面</span></span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 如果访问的页面是 500 502 503 504，则发送 /50x.html 请求</span></span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;  </span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;      <span class="comment"># 如果匹配上 /50x.html 请求</span></span><br><span class="line">            <span class="attribute">root</span>   html;     <span class="comment"># 则进入 html 目录找到 /50x.html</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对上面文件内容的解释，一一对应比较解释：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">指令名指令值;  # 全局块，主要设置 Nginx 服务器整体运行的配置指令</span><br><span class="line"></span><br><span class="line"><span class="comment"># events 块，主要设置 Nginx 服务器与用户的网络连接,这一部分对 Nginx 服务器的性能影响较大</span></span><br><span class="line"><span class="section">events</span> &#123; </span><br><span class="line">    指令名指令值;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># http 块，是 Nginx 服务器配置中的重要部分，代理、缓存、日志记录、第三方模块配置...             </span></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    指令名指令值;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123; <span class="comment"># server 块，是 Nginx 配置和虚拟主机相关的内容</span></span><br><span class="line">        指令名指令值;</span><br><span class="line">        <span class="attribute">location</span> / &#123;      <span class="comment"># location 块，基于 Nginx 服务器接收请求字符串与 location 后面的值进行匹配，对特定请求进行处理</span></span><br><span class="line">            指令名指令值;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>nginx.conf 配置文件中默认有三大块：全局块、events 块、http 块</p><p>http 块中可以配置多个 server 块，每个 server 块又可以配置多个 location 块。</p><h2 id="全局块"><a href="#全局块" class="headerlink" title="全局块"></a>全局块</h2><p>全局块的配置影响 Nginx 的全局设置。如用户权限，启动的进程数等。</p><h3 id="user指令"><a href="#user指令" class="headerlink" title="user指令"></a>user指令</h3><ol><li>user：用于配置运行 Nginx 服务器的 worker 进程的用户和用户组。</li></ol><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>user &lt;user&gt; [group]</td><td>nobody</td><td>全局块</td></tr></tbody></table><p>该属性也可以在编译的时候指定，语法如下 <code>./configure --user=user --group=group</code>，如果两个地方都进行了设置，最终生效的是配置文件中的配置。</p><p>该指令的使用步骤:</p><ol><li>进入配置文件添加一个用户信息 『 www 』</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user www</span><br></pre></td></tr></table></figure><p>测试进行测试配置文件会报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master conf]<span class="comment"># nginx -t</span></span><br><span class="line">nginx: [emerg] getpwnam(<span class="string">"www"</span>) failed <span class="keyword">in</span> /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf:1</span><br><span class="line">nginx: configuration file /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf <span class="built_in">test</span> failed</span><br></pre></td></tr></table></figure><p>原因在于 Linux 系统不存在 www 用户，我们需要创建它。</p><ol start="2"><li>创建一个用户</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd www</span><br></pre></td></tr></table></figure><ol start="3"><li>重启 Nginx 的配置文件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看重启是否生效</span></span><br><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure><p>最后返回的结果由 root 用户改为 www 用户，代表配置成功。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master conf]<span class="comment"># ps -ef | grep nginx</span></span><br><span class="line">root       8960      1  0 16:13 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">www       11975   8960  0 20:44 ?        00:00:00 nginx: worker process</span><br><span class="line">root      11978  10615  0 20:44 pts/1    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><ol start="4"><li>在 Linux 的 <code>/root</code> 下创建一个 html 目录，并且进入 html 目录，创建 index.html 文件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /root/html</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/html</span><br><span class="line"></span><br><span class="line">vim index.html</span><br></pre></td></tr></table></figure><p>然后在 <code>/root/html/index.html</code> 文件里添加如下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Welcome to nginx!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body &#123;</span><br><span class="line">        width: 35em;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to nginx!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>For online documentation and support please refer to</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://nginx.org/"</span>&gt;</span>nginx.org<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">Commercial support is available at</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://nginx.com/"</span>&gt;</span>nginx.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>Thank you for using nginx.<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>I am WWW<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这些内容其实就是在 Nginx 的欢迎页面上多加别 <code>I am WWW</code> 内容。</p><ol start="5"><li>修改 nginx.conf</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="comment"># root   html;  # 原始的代码注释掉</span></span><br><span class="line"><span class="attribute">root</span>   /root/html;    <span class="comment"># 不再是 html 目录，而是 root 下的 html 目录</span></span><br><span class="line"><span class="attribute">index</span>  index.html index.htm;  <span class="comment"># 就是上方创建的 index.html</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li><code>nginx -s reload</code>重新加载后，测试启动访问</li></ol><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.6dtnfz58zpo0.webp" alt="image"></p><p> 页面会报 403 拒绝访问的错误。</p><ol start="7"><li>分析原因：因为当前用户（www 用户）没有访问 <code>/root/html</code> 目录的权限，这个目录只有 root 才能访问。</li></ol><p>那么 www 如何访问我们写的 index.html 页面呢？我们知道，每新建一个用户，<code>/home</code> 下都会生成该用户权限的目录。</p><ol start="8"><li>将文件移动到 <code>/home/www/html/index.html</code></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /root/html /home/www</span><br></pre></td></tr></table></figure><ol start="9"><li>记得修改配置文件的资源内容</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="comment"># root   html;  # 原始的代码注释掉</span></span><br><span class="line"><span class="comment"># root   /root/html;   # 这属于 root 权限的页面，注释或者删除掉</span></span><br><span class="line"><span class="attribute">root</span>   /home/www/html;  <span class="comment"># 这是 www 用户有权限访问的目录</span></span><br><span class="line"><span class="attribute">index</span>  index.html index.htm;   <span class="comment"># 访问了 html 目录，然后访问 index.html 文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="10"><li>再次测试启动访问，可以正常访问。</li></ol><p>综上所述，使用 user 指令可以指定启动运行工作进程的用户及用户组，这样对于系统的权限访问控制的更加精细，也更加安全。</p><p>我们也能理解了配置文件的 <code>locaotion</code> 块的基本使用，root 对应着访问目录，index 对应着访问目录下的默认页面。</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.6igjptnd6eo0.webp" alt="image"></p><h3 id="work-process指令"><a href="#work-process指令" class="headerlink" title="work process指令"></a>work process指令</h3><ol><li><code>master_process</code> 指令用来指定是否开启 worker 工作进程。</li></ol><p>如果为 off，则代表关闭了 worker 进程，这时候启动 Nginx，只有 master 进程启动，没有 worker 进程。默认开启 worker 工作进程。(<mark>需要重启nginx服务生效</mark>)</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>master_process &lt;on | off&gt;;</td><td>master_process on;</td><td>全局块</td></tr></tbody></table><ol start="2"><li><p><code>worker_processes</code> 指令用于配置 Nginx 生成 worker 工作进程的数量，这个是 Nginx 服务器实现并发处理</p><p>服务的关键所在。</p></li></ol><p>理论上来说 <code>workder process</code> 的值越大，可以支持的并发处理量也越多，但事实上这个值的设定是需要受到来自服务器自身的限制，建议将该值和服务器 CPU 的内核数保存一致。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>worker_processes &lt;num | auto&gt;;</td><td>1</td><td>全局块</td></tr></tbody></table><p>如果将 <code>worker_processes</code> 设置成 2，则会看到如下内容:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master conf]<span class="comment"># ps -ef | grep nginx</span></span><br><span class="line">root       8960      1  0 16:13 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">www       12299   8960  0 21:14 ?        00:00:00 nginx: worker process</span><br><span class="line">www       12300   8960  0 21:14 ?        00:00:00 nginx: worker process</span><br><span class="line">root      12302  10615  0 21:14 pts/1    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><p>出现两个 worker 工作进程。</p><h3 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h3><ol><li><code>daemon</code> 指令设置 Nginx 是否以守护进程的方式启动。on 代表开启守护进程，off 代表关闭守护进程，默认开启。(<mark>需要重启nginx生效</mark>)</li></ol><p>守护式进程是 Linux 后台执行的一种服务进程，特点是 <strong>独立于控制终端，不会随着终端关闭而停止</strong>，也就是后台启动。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>daemon &lt;on | off&gt;;</td><td>daemon on;</td><td>全局块</td></tr></tbody></table><ol start="2"><li><code>pid</code> 指令用来配置 Nginx 当前 master 进程的进程号 ID 存储的文件路径。默认路径是 <code>/usr/local/nginx/logs/nginx.pid</code>。</li></ol><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>pid &lt;file&gt;;</td><td>/usr/local/nginx/logs/nginx.pid</td><td>全局块</td></tr></tbody></table><p>该属性也可以通过 <code>./configure --pid-path=PATH</code> 在编译时来指定。</p><ol start="3"><li><code>error_log</code> 指令用来配置 Nginx 的错误日志存放路径。默认路径是 <code>/usr/local/nginx/logs/error.log</code>。</li></ol><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>error_log &lt;file&gt; [日志级别];</td><td>error_log logs/error.log error;</td><td>全局块、http、server、location</td></tr></tbody></table><p>该属性也可以通过 <code>./configure --error-log-path=PATH</code> 在编译时来指定。</p><p>其中日志级别的值有『 debug | info | notice | warn | error | crit | alert | emerg 』，翻译过来为「调试 | 信息 | 通知 | 警告 | 错误 | 临界 | 警报 | 紧急」，这块建议大家设置的时候不要设置成 info 以下的等级，因为会带来大量的磁盘 I/O 消耗，影响 Nginx 的性能。</p><ol start="4"><li><code>include</code> 指令用来引入其他的配置文件，使 Nginx 的配置更加灵活。</li></ol><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>include &lt;file&gt;;</td><td>无</td><td>any</td></tr></tbody></table><h2 id="events块"><a href="#events块" class="headerlink" title="events块"></a>events块</h2><h3 id="events指令"><a href="#events指令" class="headerlink" title="events指令"></a>events指令</h3><ol><li><code>accept_mutex</code> 指令用来设置是否开启 Nginx 网络连接序列化。默认开启。</li></ol><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>accept_mutex &lt;on | off&gt;;</td><td>accept_mutex on;</td><td>events</td></tr></tbody></table><p>这个配置主要可以用来解决常说的「惊群」问题。大致意思是在某一个时刻，客户端发来一个请求连接，Nginx 后台是以多进程的工作模式，也就是说有多个 worker 进程会被同时唤醒，但是最终只会有一个进程可以获取到连接，如果每次唤醒的进程数目太多，就会影响 Nginx 的整体性能。如果将上述值设置为 on (开启状态)，将会对多个 Nginx 进程接收连接进行序列号，一个个来唤醒接收，就防止了多个进程对连接的争抢。</p><p>如图的小狗，如果只是一块「骨头」出现，则只需要唤醒一个小狗即可（开启 on），如果多个「骨头」如三个同时出现，那么唤醒三个小狗效率更高（此时需要设置 off）</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.118zwwf8v268.webp" alt="image"></p><ol start="2"><li><code>multi_accept</code> 指令用来设置是否开启同时接收多个网络连接。默认开启。</li></ol><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>multi_accept &lt;on | off&gt;;</td><td>multi_accept off;</td><td>events</td></tr></tbody></table><p>如果 multi_accept 被禁止了，Nginx 的一个工作进程只能同时接受一个新的连接。如果开启，一个工作进程可以同时接受所有的新连接。<strong>建议开启。</strong></p><ol start="3"><li><code>worker_connections</code> 指令用来配置单个 worker 进程最大的连接数。默认 512 个连接数。</li></ol><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>worker_connections &lt;number&gt;;</td><td>worker_commections 512;</td><td>events</td></tr></tbody></table><p>这里的连接数不仅仅包括和前端用户建立的连接数，而是包括所有可能的连接数。另外，number 值不能大于操作系统支持打开的最大文件句柄数量。</p><ol start="4"><li><code>use</code> 指令用来设置 Nginx 服务器选择哪种事件驱动来处理网络消息。</li></ol><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>use &lt;method&gt;;</td><td>根据操作系统规定</td><td>events</td></tr></tbody></table><p>注意：此处所选择事件处理模型是 Nginx 优化部分的一个重要内容，method 的可选值有『 select | poll | epoll | kqueue 』等，之前在准备 Centos 环境的时候，我们强调过要使用 Linux 内核在 2.6 以上，就是为了能使用 epoll 函数来优化 Nginx。</p><p>另外这些值的选择，我们也可以在编译的时候使用 <code>--with-select_module</code>、<code>--without-select_module</code>、<code>--with-poll_module</code>、<code>--without-poll_module</code> 来设置是否需要将对应的事件驱动模块编译到 Nginx 的内核。</p><h3 id="events指令配置模板"><a href="#events指令配置模板" class="headerlink" title="events指令配置模板"></a>events指令配置模板</h3><p>打开 Nginx 的配置文件 nginx.conf，添加如下配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">events&#123;</span><br><span class="line"><span class="attribute">accept_mutex</span> <span class="literal">on</span>;    <span class="comment"># 开启 Nginx 网络连接序列化</span></span><br><span class="line"><span class="attribute">multi_accept</span> <span class="literal">on</span>;    <span class="comment"># 开启同时接收多个网络连接</span></span><br><span class="line"><span class="attribute">worker_commections</span> <span class="number">1024</span>;   <span class="comment"># 单个 worker 进程最大的连接数</span></span><br><span class="line"><span class="attribute">use</span> <span class="literal">epoll</span>;   <span class="comment"># 使用 epoll 函数来优化 Nginx</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试配置是否语法出错</span></span><br><span class="line">nginx -t</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载 Nginx</span></span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="http块"><a href="#http块" class="headerlink" title="http块"></a>http块</h2><h3 id="定义MIME-Type"><a href="#定义MIME-Type" class="headerlink" title="定义MIME-Type"></a>定义MIME-Type</h3><p>我们都知道浏览器中可以显示的内容有 HTML、XML、GIF 等种类繁多的文件、媒体等资源，浏览器为了区分这些资源，就需要使用 MIME Type。所以说 MIME Type 是网络资源的媒体类型。Nginx 作为 Web 服务器，也需要能够识别前端请求的资源类型。</p><p>在 Nginx 的配置文件中，默认有两行配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include mime.types;      <span class="comment"># 引入 mime.types 文件的内容</span></span><br><span class="line">default_type application/octet-stream;     <span class="comment"># 默认的 MIME 类型</span></span><br></pre></td></tr></table></figure><ol><li><code>default_type</code> 指令用来配置 Nginx 响应前端请求默认的 MIME 类型。默认是 text 文本。</li></ol><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>default_type &lt;mime-type&gt;;</td><td>default_type text/plain;</td><td>http、server、location</td></tr></tbody></table><p>在 <code>default_type</code> 前面还有一句 <code>include mime.types</code>，include 之前我们已经介绍过，相当于把 mime.types 文件中 MIMT 类型与相关类型文件的文件后缀名的对应关系加入到当前的配置文件中。</p><p>举例来说明：</p><p>有些时候请求某些接口的时候需要返回指定的文本字符串或者 json 字符串，而不是页面，如果逻辑非常简单或者干脆是固定的字符串，那么可以使用 Nginx 快速实现，这样就不用编写程序响应请求了，可以减少服务器资源占用并且响应性能非常快。</p><p>如何实现：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /get_text &#123;</span><br><span class="line">    <span class="attribute">default_type</span> text/html;      <span class="comment"># 等价于 text/plain，返回文本类型</span></span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> <span class="string">"&lt;h1&gt;This is nginx's text&lt;/h1&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /get_json&#123;</span><br><span class="line">    <span class="attribute">default_type</span> application/json;   <span class="comment"># 返回 json 字符串类型</span></span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> <span class="string">'&#123;"name": "xiaoming", "age": 21&#125;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.1joqriwre9j4.webp" alt="image"></p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.47ty7dkhzmi0.webp" alt="image"></p><h3 id="自定义服务日志"><a href="#自定义服务日志" class="headerlink" title="自定义服务日志"></a>自定义服务日志</h3><p>Nginx 中日志的类型分 access.log、error.log。</p><p><code>access.log</code> 日志用来记录用户所有的访问请求。</p><p><code>error.log</code> 日志记录 Nginx 本身运行时的错误信息，不会记录用户的访问请求。</p><p>Nginx 服务器支持对服务日志的格式、大小、输出等进行设置，需要使用到两个指令，分别是 <code>access_log</code> 和 <code>log_format</code> 指令。</p><ol><li><code>access_log</code> 指令用来设置用户访问日志的相关属性。</li></ol><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>access_log &lt;path&gt; [format[buffer=size]];</td><td>access_log logs/access.log combined;</td><td>http、server、location</td></tr></tbody></table><p>format 对应着 <code>log_format</code> 的 name，必须保持一致。</p><ol start="2"><li><code>log_format</code> 指令用来指定日志的输出格式。</li></ol><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>log_format &lt;name&gt; [escape=default | json | none] &lt;string&gt; …… ;</td><td>log_format combined “…”;</td><td>http</td></tr></tbody></table><p>name 对用 <code>access_log</code> 的 format，必须保持一致。</p><blockquote><p><strong>例子 1：自定义日志路径和输出格式</strong></p></blockquote><ul><li>在 <code>/usr/local/nginx/logs</code> 下创建 my.log 文件，该文件作为日志。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/<span class="built_in">local</span>/nginx/logs/my.log</span><br></pre></td></tr></table></figure><ul><li>自定义日志输出格式：<code>==========&gt;This is My format</code></li><li>在配置文件配置相关指令</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">log_format</span> myformat <span class="string">'=========&gt;This is My format'</span>;</span><br><span class="line"><span class="attribute">access_log</span> logs/my.log myformat;</span><br></pre></td></tr></table></figure><ul><li>重启服务并进行测试</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启 Nginx 服务</span></span><br><span class="line">nginx -s reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听日志</span></span><br><span class="line">tail -f /usr/<span class="built_in">local</span>/nginx/logs/my.log</span><br></pre></td></tr></table></figure><p>浏览器访问一次 Nginx 的欢迎页面，回来看日志的输出，结果如图：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.5t1f8j2rclc0.webp" alt="image"></p><blockquote><p><strong>例子 2：输出内容加上访问机器的信息</strong></p></blockquote><ul><li>进入配置文件，在输出格式上加上 Nginx 的内置参数</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">log_format</span> myformat <span class="string">'=========&gt;This is My format:<span class="variable">$http_user_agent</span>'</span>;</span><br><span class="line"><span class="attribute">access_log</span> logs/my.log myformat;</span><br></pre></td></tr></table></figure><ul><li>重启测试</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启 Nginx 服务</span></span><br><span class="line">nginx -s reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听日志</span></span><br><span class="line">tail -f /usr/<span class="built_in">local</span>/nginx/logs/my.log</span><br></pre></td></tr></table></figure><p>浏览器访问一次 Nginx 的欢迎页面，回来看日志的输出，结果如图：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.2rkljjc3tlk0.webp" alt="image"></p><h3 id="其他配置指令"><a href="#其他配置指令" class="headerlink" title="其他配置指令"></a>其他配置指令</h3><ol><li><code>sendfile</code>：用来设置 Nginx 服务器是否使用 sendfile 传输文件，该属性可以大大提高 Nginx 处理静态资源的性能。默认关闭，建议开启。</li></ol><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>sendfile &lt;on | off&gt;;</td><td>sendfile off;</td><td>http、server、location</td></tr></tbody></table><ol start="2"><li><code>keepalive_timeout</code>：用来设置长连接的超时时间，默认超时时间是 75 秒。</li></ol><p><strong>为什么要使用 keepalive？</strong></p><p>我们都知道 HTTP 是一种无状态协议，客户端向服务端发送一个 TCP 请求，服务端响应完毕后断开连接。</p><p>如何客户端向服务端发送多个请求，每个请求都需要重新创建一次连接，效率相对来说比较多，使用 keepalive 模式，可以告诉服务器端在处理完一个请求后保持这个 TCP 连接的打开状态，若接收到来自这个客户端的其他请求，服务端就会利用这个未被关闭的连接，而不需要重新创建一个新连接，提升效率，但是这个连接也不能一直保持，这样的话，连接如果过多，也会是服务端的性能下降，这个时候就需要我们进行设置其的超时时间。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>keepalive_timeout &lt;time&gt;;</td><td>keepalive_timeout 75s;</td><td>http、server、location</td></tr></tbody></table><ol start="3"><li><code>keepalive_requests</code>：用来设置一个 keep-alive 连接使用的次数，默认是 100 次。</li></ol><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>keepalive_requests &lt;number&gt;;</td><td>keepalive_requests 100;</td><td>http、server、location</td></tr></tbody></table><h2 id="server块和location块"><a href="#server块和location块" class="headerlink" title="server块和location块"></a>server块和location块</h2><p>server 块和 location 块都是我们要重点学习的内容，因为我们后面会对 Nginx 的功能进行详细讲解，所以该内容在<strong>静态资源部署</strong>和<strong>静态资源访问</strong>进行详细说明。</p><p>本次我们这是认识下 Nginx 默认给的 nginx.conf 中的相关内容，以及 server 块与 location 块在使用的时候需要注意的一些内容。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>       <span class="number">80</span>;     <span class="comment"># 监听 80 端口，如果更改端口，则外界访问的时候带上对应的端口号，如 8080</span></span><br><span class="line"><span class="attribute">server_name</span>  localhost;  <span class="comment"># 指定可以访问 Nginx 的 IP 地址</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;      </span><br><span class="line"><span class="attribute">root</span>   html;    <span class="comment"># 访问资源所对应的目录，这里是 html 目录</span></span><br><span class="line"><span class="attribute">index</span>  index.html index.htm;    <span class="comment"># 访问资源所对应目录下的默认页面，优先级递增</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> <span class="number">404</span>  /50x.html;  <span class="comment"># 访问错误，跳转访问 /50x.html 请求</span></span><br><span class="line"><span class="attribute">location</span> = /50x.html &#123;   <span class="comment"># 访问 /50x.html 请求的处理</span></span><br><span class="line"><span class="attribute">root</span>   html;    <span class="comment"># 访问资源所对应的目录，这里是 html 目录的 50x.html</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>listen 和 server_name 是我们的 <code>http://server_name:listen</code>，如 <code>http://localhost:80</code></li><li>location / 就是访问 <code>http://server_name:listen/</code>，里面的配置对应着 <code>http://server_name:listen/html/index.html</code></li><li>页面产生 500 502 503 504 404，就会发送 <code>http://server_name:listen/50x.html</code></li><li>location = /50x.html 就是 <code>http://server_name:listen/50x.html</code>，它会自动访问 <code>http://server_name:listen/html/50x.html</code></li><li>root 代表资源目录指令</li><li>index 代表默认访问网页指令</li></ul>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Nginx </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 静态资源部署</title>
      <link href="/2022/11/10/Nginx_Static_resource_deployment/"/>
      <url>/2022/11/10/Nginx_Static_resource_deployment/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="Nginx-静态资源部署"><a href="#Nginx-静态资源部署" class="headerlink" title="Nginx 静态资源部署"></a>Nginx 静态资源部署</h1><p><strong>引言</strong></p><p>静态资源如何部署？本内容带你了解静态资源相关的操作和内容。</p><p>静态资源指令配置、静态资源优化配置、静态资源压缩配置、静态资源缓存配置。</p><h2 id="Nginx静态资源概述"><a href="#Nginx静态资源概述" class="headerlink" title="Nginx静态资源概述"></a>Nginx静态资源概述</h2><p>上网去搜索访问资源对于我们来说并不陌生，通过浏览器发送一个 HTTP 请求实现从客户端发送请求到服务器端获取所需要内容后并把内容回显展示在页面的一个过程。这个时候，我们所请求的内容就分为两种类型，一类是静态资源、一类是动态资源。</p><p>静态资源即指在服务器端真实存在并且能直接拿来展示的一些文件，比如常见的 html 页面、css 文件、js 文件、图片、视频等资源；</p><p>动态资源即指在服务器端真实存在但是要想获取需要经过一定的业务逻辑处理，根据不同的条件展示在页面不同这 一部分内容，比如说报表数据展示、根据当前登录用户展示相关具体数据等资源；</p><p>Nginx 处理静态资源的内容，我们需要考虑下面这几个问题：</p><ul><li>静态资源的配置指令</li><li>静态资源的配置优化</li><li>静态资源的压缩配置指令</li><li>静态资源的缓存处理</li><li>静态资源的访问控制，包括跨域问题和防盗链问题</li></ul><h2 id="静态资源指令配置"><a href="#静态资源指令配置" class="headerlink" title="静态资源指令配置"></a>静态资源指令配置</h2><h3 id="listen指令"><a href="#listen指令" class="headerlink" title="listen指令"></a>listen指令</h3><p>该指令是用来配置监听端口。默认监听 80（root 启动 Nginx） 和 8000（非 root 启动 Nginx） 端口。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>listen &lt;address&gt;[:port] [default_server] …… ;<br> listen &lt;port&gt; [default_server] …… ;</td><td>listen *:80 | *:8000</td><td>server</td></tr></tbody></table><p><code>listen</code> 指令的设置比较灵活，我们通过几个例子来把常用的设置方式熟悉下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">listen 127.0.0.1:8000; <span class="comment"># listen localhost:8000 监听指定的IP和端口</span></span><br><span class="line">listen 127.0.0.1;<span class="comment"># 监听指定IP的所有端口</span></span><br><span class="line">listen 8000;<span class="comment"># 监听指定端口上的连接</span></span><br><span class="line">listen *:8000;<span class="comment"># 监听指定端口上的连接</span></span><br></pre></td></tr></table></figure><p><code>default_server</code> 属性是标识符，用来将此虚拟主机设置成默认主机。所谓的默认主机指的是如果没有匹配到对应的 <code>address:port</code>，则会执行默认的 server。如果不指定该标识符，又没有匹配到对应的 <code>address:port</code> 时，默认使用的是第一个 server，所以第一个 server 要好好设置，建议第一个 server 就加上 <code>default_server</code>。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">8080</span>;</span><br><span class="line"><span class="attribute">server_name</span> <span class="number">127.0.0.1</span>;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">root</span> html;</span><br><span class="line"><span class="attribute">index</span> index.html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">8080</span> default_server;</span><br><span class="line"><span class="attribute">server_name</span> localhost;</span><br><span class="line"><span class="attribute">default_type</span> text/plain;</span><br><span class="line"><span class="attribute">return</span> <span class="number">444</span> <span class="string">'This is a error request'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时访问 8080 端口，它会访问第二个 server，如果第二个 server 去掉 <code>default_server</code> ，则默认访问第一个 server。</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220730/image.2e5c4uo1ghlw.webp" alt="image"></p><h3 id="server-name指令"><a href="#server-name指令" class="headerlink" title="server_name指令"></a>server_name指令</h3><p>该指令用来设置虚拟主机服务名称。默认为空。</p><p>比如 127.0.0.1、localhost、域名[<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> | <a href="http://www.jd.com]。" target="_blank" rel="noopener">www.jd.com]。</a></p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>server_name &lt;name&gt; …… ;</td><td>server_name “”;</td><td>server</td></tr></tbody></table><ul><li>name 可以提供多个中间用空格分隔。</li></ul><p>关于 server_name 的配置方式有三种，分别是：</p><ul><li>精确匹配</li><li>通配符匹配</li><li>正则表达式匹配</li></ul><blockquote><p><strong>配置方式一：精确匹配</strong></p></blockquote><p>如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> www.frx.com www.bing.com;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时以 <code>www.frx.com</code> 或者 <code>www.bing.com</code> 域名进行访问，就会跳转到 Nginx 的欢迎页面，前提是你需要拥有该域名，并且该域名和 Nginx 所在的系统 IP 进行绑定。</p><p>所以我可以利用 hosts 文件进行「模拟」域名。</p><blockquote><p>补充小知识点</p></blockquote><p>hosts 是一个没有扩展名的系统文件，可以用记事本等工具打开，其作用就是将一些常用的网址域名与其对应的IP地址建立一个关联「数据库」，当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从 hosts 文件中寻找对应的IP地址，一旦找到，系统会立即打开对应网页，如果没有找到，则系统会再将网址提交 DNS 域名解析服务器进行 IP 地址的解析。</p><p>hosts 文件不同系统的位置：</p><ul><li>在 windows 的位置：C:\Windows\System32\drivers\etc</li><li>在 centos 的位置：/etc/hosts</li></ul><p>因为域名是要收取一定的费用，所以我们可以使用修改 hosts 文件来制作一些虚拟域名来使用。需要修改 <code>/etc/hosts</code> 文件来添加</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 hosts 文件</span></span><br><span class="line">vim /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加内容</span></span><br><span class="line">127.0.0.1 www.frx.com</span><br><span class="line">127.0.0.1 www.bing.com</span><br></pre></td></tr></table></figure><ul><li>访问测试</li></ul><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220730/image.3nbv3p1703y0.webp" alt="image"></p><blockquote><p> <strong>配置方式二：使用通配符配置</strong></p></blockquote><p>server_name 指令支持通配符 *，但需要注意的是通配符不能出现在域名的中间，只能出现在首段或尾段，如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span>  <span class="regexp">*.frx.com</span><span class="regexp">www.frx.*</span>;</span><br><span class="line"><span class="comment"># www.frx.cn abc.frx.cn www.bing.cn www.frx.com</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的配置就会报错，因为 * 不能出现在域名的中间和与其他字符串联使用</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span>  <span class="regexp">www.*</span>.cn www.frx.c*</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span>  .frx.com</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>.frx.com</code> 相当于 <code>*..frx.com</code> + <code>frx.com</code></p><blockquote><p><strong>配置三：使用正则表达式配置</strong></p></blockquote><p>server_name 指令可以使用正则表达式，并且使用 <code>~</code> 作为正则表达式字符串的开始标记。</p><p>常见的正则表达式：</p><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>匹配搜索字符串开始位置</td></tr><tr><td>$</td><td>匹配搜索字符串结束位置</td></tr><tr><td>.</td><td>匹配除换行符 \n 之外的任何单个字符</td></tr><tr><td>\</td><td>转义字符，将下一个字符标记为特殊字符</td></tr><tr><td>[xyz]</td><td>字符集，与任意一个指定字符匹配</td></tr><tr><td>[a-z]</td><td>字符范围，匹配指定范围内的任何字符</td></tr><tr><td>\w</td><td>与以下任意字符匹配 A-Z a-z 0-9 和下划线,等效于[A-Za-z0-9_]</td></tr><tr><td>\d</td><td>数字字符匹配，等效于[0-9]</td></tr><tr><td>{n}</td><td>正好匹配 n 次</td></tr><tr><td>{n,}</td><td>至少匹配 n 次</td></tr><tr><td>{n,m}</td><td>匹配至少 n 次至多 m 次</td></tr><tr><td>*</td><td>零次或多次，等效于{0,}</td></tr><tr><td>+</td><td>一次或多次，等效于{1,}</td></tr><tr><td>?</td><td>零次或一次，等效于{0,1}</td></tr></tbody></table><p>配置如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> ~^www\.(\w+)\.com$;</span><br><span class="line">    <span class="attribute">default_type</span> text/plain;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> <span class="variable">$1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意 ~ 后面不能加空格</strong>。括号代表可以在 Ngxin 配置文件内获取其中的值，如上方的 (\w+) 的内容可以用 $1 获取到参数，如果有多个括号，依次使用 $2 $3 …… 获取。</p><p>比如现在访问 <code>http://www.frx.com</code>，则返回 frx 到页面上，因为frx 被放在 $1 处：<code>return 200 frx</code>。</p><p>⚠ 这里进行说明：server_name 配置了 localhost 和配置 IP 或者域名的区别</p><p>localhost 是「虚拟 IP」，如果不是本机访问，而是外界访问，那么这个就是无效的，但是为什么学习阶段的时候都不改呢，因为当 Nginx 没有匹配到指定的 <code>server_name</code>，默认找到第一个 server 块，而 Nginx 默认的第一个 server 块就是 localhost，哪怕你把 localhost 改为其他的，如 hello，它也能访问。只是因为在匹配不到的情况下，默认是第一个 service 块，哪怕它确实和访问的 IP 不匹配。</p><p>IP 如果和域名进行了绑定，那么在 <code>server_name</code> 中，两者都可以填写，填了域名，最后也是找到 IP，只是因为域名好记住。</p><p>知道了区别，在生产环境上，可以给个指定的错误页面。如果匹配不上，则返回友好的提示，如第一个 server 块：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span> default_server;</span><br><span class="line">    <span class="attribute">server_name</span> _;    <span class="comment"># 匹配不上的时候，也可以填写 localhost</span></span><br><span class="line">    <span class="attribute">return</span> <span class="string">"&lt;h1&gt;不好意思，匹配不到！"</span>;</span><br><span class="line">    <span class="comment"># return 403;   # 也可以直接返回错误码</span></span><br><span class="line">    <span class="comment"># </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.frxcat.fun;    <span class="comment"># 匹配域名访问</span></span><br><span class="line">    <span class="comment"># ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码块只允许域名访问，而不允许 IP 访问，避免其他人把未备案的域名解析到自己的服务器 IP。</p><p>当然你也可以不设置错误页面。因为 Nginx 匹配不上时，直接返回它的欢迎界面。</p><h3 id="匹配执行顺序"><a href="#匹配执行顺序" class="headerlink" title="匹配执行顺序"></a>匹配执行顺序</h3><p>由于 server_name 指令支持通配符和正则表达式，因此在包含多个虚拟主机的配置文件中，可能会出现一个名称被多个虚拟主机的 server_name 匹配成功，当遇到这种情况，当前的请求交给谁来处理呢？如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> ~^www\.\w+\.com$;</span><br><span class="line"><span class="attribute">default_type</span> text/plain;</span><br><span class="line"><span class="attribute">return</span> <span class="number">200</span> <span class="string">'regex_success'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> <span class="regexp">www.frx.*</span>;</span><br><span class="line"><span class="attribute">default_type</span> text/plain;</span><br><span class="line"><span class="attribute">return</span> <span class="number">200</span> <span class="string">'wildcard_after_success'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> <span class="regexp">*.frx.com</span>;</span><br><span class="line"><span class="attribute">default_type</span> text/plain;</span><br><span class="line"><span class="attribute">return</span> <span class="number">200</span> <span class="string">'wildcard_before_success'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> www.frx.com;</span><br><span class="line"><span class="attribute">default_type</span> text/plain;</span><br><span class="line"><span class="attribute">return</span> <span class="number">200</span> <span class="string">'exact_success'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span> default_server;</span><br><span class="line"><span class="attribute">server_name</span> _;</span><br><span class="line"><span class="attribute">default_type</span> text/plain;</span><br><span class="line"><span class="attribute">return</span> <span class="number">444</span> <span class="string">'default_server not found server'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 <code>http://www.kele.com</code> 的优先级：（访问完后请注释掉处理这个请求的 server）</p><ul><li>exact_success（第一个是精确匹配，然后注释掉该 server）</li><li>wildcard_before_success（第二个是开始匹配符，然后注释掉该 server）</li><li>wildcard_after_success（第三个是结尾匹配符，然后注释掉该 server）</li><li>regex_success（第四个是正则表达式，然后注释掉该 server）</li><li>default_server not found server!!（第五个是默认 server，因为前四个都注释了，所以只能走默认的 server）</li></ul><p><strong>结论</strong></p><ul><li><p>No1：准确匹配 server_name</p></li><li><p>No2：通配符在开始时匹配 server_name 成功</p></li><li><p>No3：通配符在结束时匹配 server_name 成功</p></li><li><p>No4：正则表达式匹配 server_name 成功</p></li><li><p>No5：被默认的 default_server 处理，如果没有指定默认找第一个 server</p></li></ul><h3 id="location指令"><a href="#location指令" class="headerlink" title="location指令"></a>location指令</h3><p><code>location</code> 指令是用来设置请求的 URI。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> localhost;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /abc &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>location [ = | ~ | <del>* | ^</del> | @ ] &lt;uri&gt;{…}</td><td>—</td><td>server、location</td></tr></tbody></table><p>uri 变量是待匹配的请求字符串，可以不包含正则表达式，也可以包含正则表达式，那么 Nginx 服务器在搜索匹配 location 的时候，是先使用不包含正则表达式进行匹配，找到一个匹配度最高的一个，然后在通过包含正则表达式的进行匹配，<strong>如果能匹配到直接访问正则表达式的，匹配不到，就使用刚才匹配度最高（前缀最长的）的那个 location 来处理请求</strong>。</p><p>属性介绍:</p><p>不带符号，要求必须以指定模式开头，但是不要求精确匹配</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> <span class="number">127.0.0.1</span>;</span><br><span class="line"><span class="attribute">location</span> /abc &#123;</span><br><span class="line"><span class="attribute">default_type</span> text/plain;</span><br><span class="line"><span class="attribute">return</span> <span class="number">200</span> <span class="string">"access success"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下访问都是正确的</span></span><br><span class="line">http://192.168.91.200/abc</span><br><span class="line">http://192.168.91.200/abc?p1=kele</span><br><span class="line">http://192.168.91.200/abc/</span><br><span class="line">http://192.168.91.200/abcdef</span><br></pre></td></tr></table></figure><p><code>=</code> 是用于不包含正则表达式的 uri，必须与指定的模式精确匹配</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> <span class="number">127.0.0.1</span>;</span><br><span class="line"><span class="attribute">location</span> =/abc &#123;</span><br><span class="line"><span class="attribute">default_type</span> text/plain;</span><br><span class="line"><span class="attribute">return</span> <span class="number">200</span> <span class="string">"access success"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 匹配成功</span></span><br><span class="line">http://192.168.91.200/abc</span><br><span class="line">http://192.168.91.200/abc?p1=TOM</span><br><span class="line"><span class="comment"># 匹配失败</span></span><br><span class="line">http://192.168.91.200/abc/</span><br><span class="line">http://192.168.91.200/abcdef</span><br></pre></td></tr></table></figure><p><code>~</code> 是用于表示当前 uri 中包含了正则表达式，并且区分大小写</p><p><code>~*</code> 是用于表示当前 uri 中包含了正则表达式，但是是不区分大小写</p><p>换句话说，<strong>如果 uri 包含了正则表达式，需要用上述两个符号来标识</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用正则表达式，区分大小写</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> <span class="number">127.0.0.1</span>;</span><br><span class="line"><span class="attribute">location</span> ~^/abc\w$ &#123;</span><br><span class="line"><span class="attribute">default_type</span> text/plain;</span><br><span class="line"><span class="attribute">return</span> <span class="number">200</span> <span class="string">"access success"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用正则表达式，不区分大小写</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> <span class="number">127.0.0.1</span>;</span><br><span class="line"><span class="attribute">location</span> ~*^/abc\w$ &#123;</span><br><span class="line"><span class="attribute">default_type</span> text/plain;</span><br><span class="line"><span class="attribute">return</span> <span class="number">200</span> <span class="string">"access success"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>^~</code> 是用于不包含正则表达式的 uri，功能和不加符号的一致，唯一不同的是，如果请求匹配上了，那么就停止搜索其他模式了。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> <span class="number">127.0.0.1</span>;</span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~/abc</span> &#123;</span><br><span class="line"><span class="attribute">default_type</span> text/plain;</span><br><span class="line"><span class="attribute">return</span> <span class="number">200</span> <span class="string">"access success"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@</code> 前缀可以用来定义一个命名的 location,该 location 不处理正常的外部请求,一般用来当作标识供内部重定向使用。它们不能嵌套,也不能包含嵌套的 location。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /try &#123;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ <span class="variable">@name</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /error &#123;</span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">404</span> = <span class="variable">@name</span>;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">404</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> <span class="variable">@name</span> &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> <span class="string">"<span class="variable">@name</span>"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时访问 <code>/try</code> 或者 <code>/error</code> 都会返回 <code>@name</code>。</p><h3 id="root-alias指令"><a href="#root-alias指令" class="headerlink" title="root/alias指令"></a>root/alias指令</h3><ul><li><code>root</code> 指令是设置请求资源的根目录。默认值是 html。</li></ul><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>root &lt;path&gt;;</td><td>root html;</td><td>http、server、location</td></tr></tbody></table><p>path 是 Nginx 服务器接收到请求以后查找资源的根目录路径。</p><ul><li><code>alias</code> 指令是用来更改 location 的 URI。</li></ul><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>alias &lt;path&gt;;</td><td>—</td><td>location</td></tr></tbody></table><ul><li>path 是修改后的根路径。</li></ul><p><strong>以上两个指令都可以来指定访问资源的路径，那么这两者之间的区别是什么？</strong></p><blockquote><p><strong>举例说明</strong></p></blockquote><ol><li><p>在 <code>/usr/local/nginx/html</code> 目录下创建一个 images 目录,并在目录下放入一张图片 <code>mv.png</code> 图片。</p><p>然后进入配置文件，添加如下内容：</p></li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /images &#123;</span><br><span class="line">    <span class="attribute">root</span> /usr/local/nginx/html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问图片的路径为：<code>http://192.168.91.200/images/mv.png</code></p><ol start="2"><li>如果把root改为alias</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /images &#123;</span><br><span class="line">    <span class="attribute">alias</span> /usr/local/nginx/html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次访问上述地址，页面会出现 404 的错误，查看错误日志会发现是因为地址不对，所以验证了：</p><ul><li><p>root 的处理结果是：<strong>root 路径 + location 路径</strong>，location 路径包括匹配后面的请求，即包括 /mv.png</p><p><code>/usr/local/nginx/html/images/mv.png</code></p></li></ul><ul><li>alias 的处理结果是：<strong>使用 alias 路径替换 location 路径</strong>，但是不会替换匹配后面的请求，即不会替换 /mv.png</li></ul><p>需要在 alias 后面路径改为：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /images &#123;</span><br><span class="line">    <span class="attribute">alias</span> /usr/local/nginx/html/images;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>如果 location 路径是以 / 结尾,则 alias 也必须是以 / 结尾，root 没有要求。</li></ol><p>将上述配置修改为：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /images/ &#123;</span><br><span class="line">    <span class="attribute">alias</span> /usr/local/nginx/html/images;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问就会出问题，查看错误日志还是路径不对，所以需要把 alias 后面加上 /</p><p>小结：</p><ul><li>root 的处理结果是: root 路径 + location 路径</li><li>alias 的处理结果是:使用 alias 路径替换 location 路径</li><li>alias 是一个目录别名的定义，root 则是最上层目录的含义</li><li>如果 location 路径是以 / 结尾,则 alias 也必须是以 / 结尾，root 没有要求<ul><li><strong>alias 不支持 location 的 =</strong></li></ul></li></ul><p>这里再多言几句，alias 后指定的资源路径，Nginx 就会去这个路径下找资源，「忽略」location 本身的的请求，仅拼接 location 后面的请求。如果你想去拼接 location 本身，就用绝对路径（包括 location）的alias。</p><h3 id="index指令"><a href="#index指令" class="headerlink" title="index指令"></a>index指令</h3><p><code>index</code> 指令是设置网站的默认首页。默认是 index.html。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>index &lt;file&gt; …;</td><td>index index.html;</td><td>http、server、location</td></tr></tbody></table><p><code>index</code> 后面可以跟多个设置，如果访问的时候没有指定具体访问的资源，则会从左往右依次进行查找，找到第一个为止。</p><p>举例说明：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">root</span> /usr/local/nginx/html;</span><br><span class="line"><span class="attribute">index</span> index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问该 location 的时候，可以通过 <code>http://ip:port/</code> 访问，地址后面如果不添加任何内容，则默认依次访问 index.html 和 index.htm，找到第一个来进行返回。</p><h3 id="error-page指令"><a href="#error-page指令" class="headerlink" title="error_page指令"></a>error_page指令</h3><p>error_page 指令是设置网站的错误页面。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>error_page &lt;code&gt; …… [=[response]] &lt;uri&gt;;</td><td>—</td><td>http、server、location ……</td></tr></tbody></table><p>code 是响应码。</p><p><strong>当出现对应的响应 code 后，如何来处理？</strong></p><blockquote><p><strong>举例说明</strong></p></blockquote><ol><li>可以指定具体跳转的地址</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">error_page</span> <span class="number">404</span> http://www.frx.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当页面产生 404 时，自动跳转到 <code>http://www.frx.com</code></p><ol start="2"><li>可以指定重定向地址</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line"><span class="attribute">error_page</span> <span class="number">404</span> /50x.html;</span><br><span class="line"><span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line"><span class="attribute">location</span> =/50x.html &#123;</span><br><span class="line"><span class="attribute">root</span> html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>产生错误页面时，重定向到 /50x.html，然后触发 location，最终访问的是 html 目录下的 50x.html 页面</p><ol start="3"><li>使用 location 的 @ 符合完成错误信息展示</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line"><span class="attribute">error_page</span> <span class="number">404</span> <span class="variable">@jump_to_error</span>;</span><br><span class="line"><span class="attribute">location</span> <span class="variable">@jump_to_error</span> &#123;</span><br><span class="line"><span class="attribute">default_type</span> text/plain;</span><br><span class="line"><span class="attribute">return</span> <span class="number">404</span> <span class="string">'Not Found Page...'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可选项 <code>=[response]</code> 的作用是用来将相应代码更改为另外一个，如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line"><span class="attribute">error_page</span> <span class="number">404</span> =<span class="number">200</span> /50x.html;</span><br><span class="line"><span class="attribute">location</span> =/50x.html &#123;</span><br><span class="line"><span class="attribute">root</span> html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话，当返回 404 找不到对应的资源的时候，在浏览器上可以看到，最终返回的状态码是 200 而不是 404，这块需要注意下，编写 error_page 后面的内容，404 后面需要加空格，200 前面不能加空格。</p><h2 id="静态资源优化配置"><a href="#静态资源优化配置" class="headerlink" title="静态资源优化配置"></a>静态资源优化配置</h2><p>Nginx 对静态资源如何进行优化配置。这里从三个属性配置进行优化：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">tcp_nopush</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">tcp_nodeplay</span> <span class="literal">on</span>;</span><br></pre></td></tr></table></figure><p>建议三个都开启。如果想知道为什么，请往下看。</p><h3 id="sendﬁle"><a href="#sendﬁle" class="headerlink" title="sendﬁle"></a>sendﬁle</h3><p>该指令是用来开启高效的文件传输模式。默认关闭，建议开启。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>sendﬁle &lt;on | off&gt;;</td><td>sendﬁle oﬀ;</td><td>http、server、location ……</td></tr></tbody></table><p>请求静态资源的过程：客户端通过网络接口向服务端发送请求，操作系统将这些客户端的请求传递给服务器端应用程序，服务器端应用程序会处理这些请求，请求处理完成以后，操作系统还需要将处理得到的结果通过网络适配器传递回去。</p><p>如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> localhost；</span><br><span class="line">location / &#123;</span><br><span class="line"><span class="attribute">root</span> html;</span><br><span class="line"><span class="attribute">index</span> index.html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设在 html 目录下有一个 welcome.html 页面，访问地址：<code>http://192.168.91.200/welcome.html</code>。</p><p>流程如下：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.24hrbukvg0lc.webp" alt="image"></p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.5l2efa1uqlo0.webp" alt="image"></p><h3 id="tcp-nopush"><a href="#tcp-nopush" class="headerlink" title="tcp_nopush"></a>tcp_nopush</h3><p>该指令必须在 sendfile 打开的状态下才会生效，主要是用来提升网络包的传输「效率」。默认关闭。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>tcp_nopush &lt;on | off&gt;;</td><td>tcp_nopush oﬀ;</td><td>http、server、location</td></tr></tbody></table><h3 id="tcp-nodelay"><a href="#tcp-nodelay" class="headerlink" title="tcp_nodelay"></a>tcp_nodelay</h3><p>该指令必须在 keep-alive 连接开启的情况下才生效，来提高网络包传输的「实时性」。默认开启。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>tcp_nodelay &lt;on | off&gt;;</td><td>tcp_nodelay on;</td><td>http、server、location</td></tr></tbody></table><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.1iu7wmocw0ao.webp" alt="image"></p><p><code>tcp_nopush</code> 就像大巴车，等所有旅客占满了座位，才开始发车到景点（客户端），而 <code>tcp_nodelay</code>，上来一个旅客，就马上发车到景点客户端）。</p><h3 id="优化总结"><a href="#优化总结" class="headerlink" title="优化总结"></a>优化总结</h3><p>经过分析，『 tcp_nopush 』和『 tcp_nodelay 』看起来是「互斥的」，那么为什么要将这两个值都打开，这个大家需要知道的是在 Linux2.5.9 以后的版本中两者是可以兼容的，三个指令都开启的好处是，sendfile 可以开启高效的文件传输模式，『 tcp_nopush 』开启可以确保在发送到客户端之前数据包已经充分「填满」，这大大减少了网络开销，并加快了文件发送的速度。然后，当它到达最后一个可能因为没有「填满」而暂停的数据包时，Nginx 会忽略『 tcp_nopush 』参数， 然后，『 tcp_nodelay 』强制套接字发送数据。由此可知，『 tcp_nopush 』可以与『 tcp_nodelay 』一起设置，它比单独配置『 tcp_nodelay 』具有更强的性能。</p><p>所以回归开头，我们可以使用如下配置来优化 Nginx 静态资源的处理：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 三个都开启</span></span><br><span class="line"><span class="attribute">sendfile</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">tcp_nopush</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br></pre></td></tr></table></figure><h2 id="静态资源压缩配置"><a href="#静态资源压缩配置" class="headerlink" title="静态资源压缩配置"></a>静态资源压缩配置</h2><p>经过上述内容的优化，我们再次思考一个问题，假如在满足上述优化的前提下，我们传送一个 1M 的数据和一个 10M 的数据那个效率高？答案显而易见，<strong>传输内容小，速度就会快</strong>。那么问题又来了，同样的内容，如果把大小降下来，我们脑袋里面要蹦出一个词就是「压缩」，接下来，我们来学习 Nginx 的静态资源压缩模块。</p><p>在 Nginx 的配置文件中可以通过配置 gzip 来对静态资源进行压缩，相关的指令可以配置在 http 块、server 块和 location 块中，Nginx 可以通过对这些指令进行解析和处理：</p><ul><li><code>ngx_http_gzip_module</code> 模块</li><li><code>ngx_http_gzip_static_module</code> 模块</li><li><code>ngx_http_gunzip_module</code> 模块</li></ul><p>接下来我们从以下内容进行学习：</p><ul><li>Gzip 各模块支持的配置指令</li><li>Gzip 压缩功能的配置</li><li>Gzip 和 sendfile 的冲突解决</li><li>浏览器不支持 Gzip 的解决方案</li></ul><h3 id="Gzip模块配置指令"><a href="#Gzip模块配置指令" class="headerlink" title="Gzip模块配置指令"></a>Gzip模块配置指令</h3><p>接下来所学习的指令都来自 <code>ngx_http_gzip_module</code> 模块，该模块会在 Nginx 安装的时候内置到 Nginx 的安装环境中，也就是说我们可以直接使用这些指令。</p><ul><li><code>gzip</code> 指令是用于开启或者关闭 Gzip 功能。默认关闭</li></ul><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>gzip &lt;on | off&gt;;</td><td>gzip off;</td><td>http、server、location ……</td></tr></tbody></table><p>注意：只有该指令为打开状态，下面的指令才有效果</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line"><span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>gzip_types</code> 指令可以根据响应页的 MIME 类型选择性地开启 Gzip 压缩功能。默认是 text/html</li></ul><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>gzip_types &lt;mime-type&gt; …… ;</td><td>gzip_types text/html;</td><td>http、server、location</td></tr></tbody></table><p>所选择的值可以从 mime.types 文件中进行查找，也可以使用 * 代表所有。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line"><span class="attribute">gzip_types</span> application/javascript;</span><br><span class="line"><span class="comment"># * 代表所有</span></span><br><span class="line"><span class="attribute">gzip_types</span> *</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>gzip_comp_level</code> 指令是用于设置 Gzip 压缩程度，级别从 1-9，1 表示要是程度最低，要是效率最高，9 刚好相反，压缩程度最高，但是效率最低、最费时间。默认值是 1</li></ul><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>gzip_comp_level &lt;level&gt;;</td><td>gzip_comp_level 1;</td><td>http、server、location</td></tr></tbody></table><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line"><span class="attribute">gzip_comp_level</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>gzip_vary</code> 指令是用于设置使用 Gzip 进行压缩发送是否携带『Vary:Accept-Encoding』头域的响应头部。主要是告诉接收方，所发送的数据经过了 Gzip 压缩处理。默认关闭</li></ul><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>gzip_vary &lt;on | off&gt;;</td><td>gzip_vary off;</td><td>http、server、location</td></tr></tbody></table><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.4bsq0xpu9s20.webp" alt="image"></p><ul><li><code>gzip_buffers</code> 指令是用于处理请求压缩的缓冲区数量和大小</li></ul><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>gzip_buffers &lt;number&gt; &lt;size&gt;;</td><td>gzip_buffers 32 4k | 16 8k;</td><td>http、server、location</td></tr></tbody></table><p>其中 number 是指定 Nginx 服务器向系统申请缓存空间个数，size 指的是每个缓存空间的大小。主要实现的是申请 number 个每个大小为 size 的内存空间。这个值的设定一般会和服务器的操作系统有关，所以建议此项不设置，使用默认值即可。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">gzip_buffers</span> <span class="number">4</span> <span class="number">16K</span>;  <span class="comment"># 缓存空间大小</span></span><br></pre></td></tr></table></figure><ul><li><code>gzip_disable</code> 指令是针对不同种类客户端发起的请求，可以选择性地开启和关闭 Gzip 功能</li></ul><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>gzip_disable &lt;regex&gt; …… ;</td><td>—</td><td>http、server、location</td></tr></tbody></table><p>regex 是根据客户端的浏览器标志(user-agent)来设置，支持使用正则表达式。指定的浏览器标志不使用 Gzip.该指令一般是用来排除一些明显不支持 Gzip 的浏览器。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">gzip_disable</span> <span class="string">"MSIE [1-6]\."</span>;</span><br></pre></td></tr></table></figure><p><code>gzip_http_version</code> 指令是针对不同的 HTTP 协议版本，可以选择性地开启和关闭 Gzip 功能。默认是 1.1 版本</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>gzip_http_version &lt;1.0 | 1.1&gt;;</td><td>gzip_http_version 1.1;</td><td>http、server、location</td></tr></tbody></table><p>该指令是指定使用 Gzip 的 HTTP 最低版本，该指令一般采用默认值即可。</p><ul><li><code>gzip_min_length</code> 指令是针对传输数据的大小，可以选择性地开启和关闭 Gzip 功能</li></ul><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>gzip_min_length &lt;length&gt;;</td><td>gzip_min_length 20;</td><td>http、server、location</td></tr></tbody></table><p>Nignx 计量大小的单位：bytes [字节] / kb [千字节] / M [兆]</p><p>例如: 1024 / 10k | K / 10m | M</p><p>Gzip 压缩功能对大数据的压缩效果明显，但是如果要压缩的数据比较小的话，可能出现越压缩数据量越大的情况，因此我们需要根据响应内容的大小来决定是否使用 Gzip 功能，响应页面的大小可以通过头信息中的 <code>Content-Length</code> 来获取。但是如何使用了 Chunk 编码动态压缩，该指令将被忽略。建议设置为 1K 或以上。</p><ul><li><code>gzip_proxied</code> 指令设置是否对服务端返回的结果进行 Gzip 压缩</li></ul><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>gzip_proxied &lt;off | expired | no-cache | no-store | private | no_last_modified | no_etag | auth | any&gt;;</td><td>gzip_proxied off;</td><td>http、server、location</td></tr></tbody></table><ul><li>off：关闭 Nginx 服务器对后台服务器返回结果的 Gzip 压缩</li><li>expired：如果 header 头中包含 『Expires』头信息，启用压缩</li><li>no-cache：如果 header 头中包含 『Cache-Control:no-cache』头信息，启用压缩</li><li>no-store：如果 header 头中包含 『Cache-Control:no-store』头信息，启用压缩</li><li>private：如果 header 头中包含 『Cache-Control:private』头信息，启用压缩</li><li>no_last_modified：如果 header 头中不包含 『Last-Modified』头信息，启用压缩</li><li>no_etag：如果 header 头中不包含 『ETag』 头信息，启用压缩</li><li>auth：如果 header 头中包含 『Authorization』 头信息，启用压缩</li><li>any：无条件启用压缩</li></ul><h3 id="Gzip压缩功能配置模板"><a href="#Gzip压缩功能配置模板" class="headerlink" title="Gzip压缩功能配置模板"></a>Gzip压缩功能配置模板</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">gzip</span> <span class="literal">on</span>;      <span class="comment"># 开启 Gzip 功能</span></span><br><span class="line"><span class="attribute">gzip_types</span> *;     <span class="comment"># 压缩源文件类型,根据具体的访问资源类型设定</span></span><br><span class="line"><span class="attribute">gzip_comp_level</span> <span class="number">6</span>;    <span class="comment"># Gzip 压缩级别</span></span><br><span class="line"><span class="attribute">gzip_min_length</span> <span class="number">1k</span>;          <span class="comment"># 进行压缩响应页面的最小长度，content-length</span></span><br><span class="line"><span class="attribute">gzip_buffers</span> <span class="number">4</span> <span class="number">16K</span>;         <span class="comment"># 缓存空间大小</span></span><br><span class="line"><span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>;       <span class="comment"># 指定压缩响应所需要的最低 HTTP 请求版本</span></span><br><span class="line"><span class="attribute">gzip_vary</span>  <span class="literal">on</span>;         <span class="comment"># 往头信息中添加压缩标识</span></span><br><span class="line"><span class="attribute">gzip_disable</span> <span class="string">"MSIE [1-6]\."</span>; <span class="comment"># 对 IE6 以下的版本都不进行压缩</span></span><br><span class="line"><span class="attribute">gzip_proxied</span>  <span class="literal">off</span>;           <span class="comment"># Nginx 作为反向代理压缩服务端返回数据的条件</span></span><br></pre></td></tr></table></figure><p>这些配置在很多地方可能都会用到，所以我们可以将这些内容抽取到一个配置文件中，然后通过 include 指令把配置文件再次加载到 nginx.conf 配置文件中，方法使用。</p><p>创建压缩配置文件：<code>nginx_gzip.conf</code>，添加如下内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">gzip_types</span> *;</span><br><span class="line"><span class="attribute">gzip_comp_level</span> <span class="number">6</span>;</span><br><span class="line"><span class="attribute">gzip_min_length</span> <span class="number">1k</span>;</span><br><span class="line"><span class="attribute">gzip_buffers</span> <span class="number">4</span> <span class="number">16K</span>;</span><br><span class="line"><span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line"><span class="attribute">gzip_vary</span>  <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">gzip_disable</span> <span class="string">"MSIE [1-6]\."</span>;</span><br><span class="line"><span class="attribute">gzip_proxied</span>  <span class="literal">off</span>;</span><br></pre></td></tr></table></figure><p>在 Nginx 核心配置文件 <code>nginx.conf</code> 进行引入，添加如下内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">include</span> nginx_gzip.conf</span><br></pre></td></tr></table></figure><h3 id="Gzip和sendfile共存问题"><a href="#Gzip和sendfile共存问题" class="headerlink" title="Gzip和sendfile共存问题"></a>Gzip和sendfile共存问题</h3><p>前面在讲解 sendfile 的时候，提到过，开启 sendfile 以后，在读取磁盘上的静态资源文件的时候，可以减少拷贝的次数，可以不经过用户进程将静态文件通过网络设备发送出去，但是 Gzip 要想对资源压缩，是需要经过用户进程进行操作的。Nginx 设置了Gzip 之后，静态文件的 sendfile 就不起作用了。所以要考虑如何解决两个设置的共存问题。</p><p>可以使用 <code>ngx_http_gzip_static_module</code> 模块的 <code>gzip_static</code> 指令来解决。</p><h3 id="gzip-static指令"><a href="#gzip-static指令" class="headerlink" title="gzip_static指令"></a>gzip_static指令</h3><p><code>gzip_static</code> 指令用于在检查与访问资源同名的 .gz 文件时，response 中以 Gzip 相关的 header 返回 .gz 文件的内容。默认关闭。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>gzip_static &lt;on | off | always&gt;;</td><td>gzip_static off;</td><td>http、server、location</td></tr></tbody></table><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">gzip_static</span> <span class="literal">on</span>;</span><br></pre></td></tr></table></figure><p>在配置文件添加上述命令后，会报一个错误：<code>unknown directive &quot;gzip_static&quot;</code>，主要的原因是 Nginx 默认是没有添加 ngx_http_gzip_static_module 模块。如何来添加？</p><h3 id="Nginx模块添加"><a href="#Nginx模块添加" class="headerlink" title="Nginx模块添加"></a>Nginx模块添加</h3><ol><li>查询当前 Nginx 的配置参数，即查看 <code>configure arguments</code> 的配置信息，拷贝出来</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx -V</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝 configure arguments 后面的数据</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--prefix=/usr/local/nginx</span><br></pre></td></tr></table></figure><ol start="2"><li>将 Nginx 安装目录下 sbin 目录中的 nginx 二进制文件进行更名备份</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin</span><br><span class="line">mv nginx nginx.backup</span><br></pre></td></tr></table></figure><ol start="3"><li>进入 Nginx 的安装目录</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/nginx/core/nginx-1.21.6</span><br></pre></td></tr></table></figure><ol start="4"><li>执行 make clean 清空之前编译的内容</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make clean</span><br></pre></td></tr></table></figure><ol start="5"><li>使用 configure 来配置参数，添加 <code>ngx_http_gzip_static_module</code> 模块，记得加上第1步拷贝的配置信息</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --with-http_gzip_static_module  <span class="comment"># 记得添加 configure arguments 后的数据</span></span><br></pre></td></tr></table></figure><ol start="6"><li>使用 make 命令进行编译</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><ol start="7"><li>将 objs 目录下的 nginx 二进制执行文件移动到 nginx 安装目录下的 sbin 目录中</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /opt/nginx/core/nginx-1.21.6/objs/nginx /usr/<span class="built_in">local</span>/nginx/sbin</span><br></pre></td></tr></table></figure><p>如果不执行第（2）步进行备份，则该步骤会覆盖原来的 nginx 可执行文件</p><ol start="8"><li>在源码目录下执行更新命令</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/nginx/core/nginx-1.21.6</span><br><span class="line">make upgrade</span><br></pre></td></tr></table></figure><h3 id="gzip-static测试"><a href="#gzip-static测试" class="headerlink" title="gzip_static测试"></a>gzip_static测试</h3><p>准备好一个 jquery.js 文件，放在 html 目录下</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.576ef03x00c0.webp" alt="image"></p><ol><li>直接访问 <code>http://192.168.91.200/jquery.js</code></li></ol><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.2b8dhabn0cbo.webp" alt="image"></p><ol start="2"><li>使用 Gzip 命令进行压缩</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 html 目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩 js 文件</span></span><br><span class="line">gzip jquery.js</span><br></pre></td></tr></table></figure><ol start="3"><li>再次访问 <code>http://192.168.91.200/jquery.js</code></li></ol><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.4ivj1d091pg.webp" alt="image"></p><p>可以看出 <code>Content-Length</code> 的大小已经变得非常小。</p><h2 id="静态资源缓存配置"><a href="#静态资源缓存配置" class="headerlink" title="静态资源缓存配置"></a>静态资源缓存配置</h2><p>当浏览器请求 Nginx 服务器的资源后，我们可以让这些资源缓存在浏览器里，这样再一次请求相同的资源时，无需请求 Nginx 服务器，直接从浏览器的缓存里获取，减少 Nginx 服务器的压力。</p><h3 id="什么是缓存和Web缓存"><a href="#什么是缓存和Web缓存" class="headerlink" title="什么是缓存和Web缓存"></a>什么是缓存和Web缓存</h3><p>缓存（cache），原始意义是指访问速度比一般随机存取存储器（RAM）快的一种高速存储器，通常它不像系统主存那样使用 DRAM 技术，而使用昂贵但较快速的 SRAM 技术。缓存的设置是所有现代计算机系统发挥高性能的重要因素之一。</p><p>Web 缓存是指一个 Web 资源（如 html 页面，图片，js，数据等）存在于 Web 服务器和客户端（浏览器）之间的副本。缓存会根据进来的请求保存输出内容的副本；当下一个请求来到的时候，如果是相同的 URL，缓存会根据缓存机制决定是直接使用副本响应访问请求，还是向源服务器再次发送请求。比较常见的就是浏览器会缓存访问过网站的网页，当再次访问这个 URL 地址的时候，如果网页没有更新，就不会再次下载网页，而是直接使用本地缓存的网页。只有当网站明确标识资源已经更新，浏览器才会再次下载网页。</p><h3 id="Web缓存的种类"><a href="#Web缓存的种类" class="headerlink" title="Web缓存的种类"></a>Web缓存的种类</h3><p>客户端缓存</p><ul><li>浏览器缓存</li></ul><p>服务端缓存</p><ul><li>Nginx</li><li>Redis</li><li>Memcached 等</li></ul><h3 id="为什么要用浏览器缓存"><a href="#为什么要用浏览器缓存" class="headerlink" title="为什么要用浏览器缓存"></a>为什么要用浏览器缓存</h3><ul><li>成本最低的一种缓存实现</li><li>减少网络带宽消耗</li><li>降低服务器压力</li><li>减少网络延迟，加快页面打开速度</li></ul><h3 id="浏览器缓存执行流程"><a href="#浏览器缓存执行流程" class="headerlink" title="浏览器缓存执行流程"></a>浏览器缓存执行流程</h3><p>HTTP 协议中和页面缓存相关的字段，我们先来认识下：</p><table><thead><tr><th>header</th><th>说明</th></tr></thead><tbody><tr><td>Expires</td><td>缓存过期的日期和时间</td></tr><tr><td>Cache-Control</td><td>设置和缓存相关的配置信息</td></tr><tr><td>Last-Modified</td><td>请求资源最后修改时间</td></tr><tr><td>ETag</td><td>请求变量的实体标签的当前值，比如文件的 MD5 值</td></tr></tbody></table><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.209c4krjzgf4.webp" alt="image"></p><ol><li>用户首次通过浏览器发送请求到服务端获取数据，客户端是没有对应的缓存，所以需要发送 request 请求来获取数据；</li><li>服务端接收到请求后，获取服务端的数据及服务端缓存的允许后，返回 200 的成功状态码并且在响应头上附上对应资源以及缓存信息；</li><li>当用户再次访问相同资源的时候，客户端会在浏览器的缓存目录中查找是否存在响应的缓存文件；</li><li>如果没有找到对应的缓存文件，则走第2步；</li><li>如果有缓存文件，接下来对缓存文件是否过期进行判断，过期的判断标准是(Expires)；</li><li>如果没有过期，则直接从本地缓存中返回数据进行展示（强缓存）；</li><li>如果 Expires 过期，接下来需要判断缓存文件是否发生过变化；</li><li>判断的标准有两个（都要判断），一个是 ETag(Entity Tag)，一个是 Last-Modified；</li><li>判断结果是未发生变化，则服务端返回 304，直接从缓存文件中获取数据（弱缓存）；</li><li>如果判断是发生了变化，重新从服务端获取数据，并根据缓存协商(服务端所设置的是否需要进行缓存数据的设置)来进行数据缓存。</li></ol><h3 id="浏览器缓存相关指令"><a href="#浏览器缓存相关指令" class="headerlink" title="浏览器缓存相关指令"></a>浏览器缓存相关指令</h3><p>Nginx 需要进行缓存相关设置，就需要用到如下的指令。</p><h4 id="expires指令"><a href="#expires指令" class="headerlink" title="expires指令"></a>expires指令</h4><p>该指令用来控制页面缓存的作用。可以通过该指令控制 HTTP 应答中的『Expires』和『Cache-Control』</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>expires [modified] &lt;time&gt;; expires &lt;epoch | max | off&gt;;</td><td>expires off;</td><td>http、server、location</td></tr></tbody></table><ul><li><p>time：可以整数也可以是负数，指定过期时间，单位为 s（秒）。如果是负数，Cache-Control 则为 no-cache，如果为整数或 0，则 Cache-Control 的值为 max-age=time</p></li><li><p>epoch：指定 Expires 的值为『’1 January,1970,00:00:01 GMT’』，即 1970-01-01 00:00:00 ，Cache-Control 的值 no-cache</p><p>因为 Expires（缓存过期时间）是 1970 年，所以不缓存。</p></li><li><p>max：指定 Expires 的值为『’31 December2037 23:59:59GMT’ 』，即(2037-12-31 23:59:59，Cache-Control 的值为 10 年</p><p>因为 Expires（缓存过期时间）是 2037 年，虽然还有 16 年过期，但是最大只能缓存 10 年。</p></li><li><p>off：默认不缓存</p></li></ul><blockquote><p><strong>例子 1</strong></p></blockquote><p>在配置文件添加如下内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ .*\.(html|js|css|png|jpg|jpeg|gif)$</span> &#123;</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="attribute">expires</span> max</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送请求：<code>http://192.168.91.200/jquery.js</code></p><p>查看开发者工具(F12)的 NetWork，如图：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220731/image.4x3yczk58lk0.webp" alt="image"></p><p>315360000 折算下来正好是 10 年。</p><blockquote><p><strong>其他格式</strong></p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">expires</span> <span class="number">30s</span>;  <span class="comment"># 表示把数据缓存 30 秒</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">expires</span> <span class="number">30m</span>;  <span class="comment"># 表示把数据缓存 30 分</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">expires</span> <span class="number">10h</span>;  <span class="comment"># 表示把数据缓存 10 小时</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">expires</span> <span class="number">1d</span>;   <span class="comment"># 表示把数据缓存 1 天</span></span><br></pre></td></tr></table></figure><h4 id="add-header指令"><a href="#add-header指令" class="headerlink" title="add_header指令"></a>add_header指令</h4><p>add_header 指令是用来添加指定的响应头和响应值。</p><p>add_header 是响应体的指令，不是请求时的指令（比如 expires ），并且 add_header 也有和 expires 一样的功能。</p><p>如果 expires 和 add_header 同时开启的情况下，则 add_header 优于 expires 生效。</p><table><thead><tr><th>语法</th><th>默认值</th><th>位置</th></tr></thead><tbody><tr><td>add_header &lt;name&gt; &lt;value&gt; [always];</td><td>—</td><td>location &gt; server &gt; http &gt; ……</td></tr></tbody></table><p>always 可选，代表总是添加。</p><p>Cache-Control 作为响应头信息，可以在 Nginx 配置文件设置如下缓存响应指令：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">add_header</span> Cache-control must-revalidate;</span><br><span class="line"><span class="attribute">add_header</span> Cache-control <span class="literal">no</span>-cache;</span><br><span class="line"><span class="attribute">add_header</span> Cache-control <span class="literal">no</span>-store;</span><br><span class="line"><span class="attribute">add_header</span> Cache-control <span class="literal">no</span>-transform;</span><br><span class="line"><span class="attribute">add_header</span> Cache-control public;</span><br><span class="line"><span class="attribute">add_header</span> Cache-control private;</span><br><span class="line"><span class="attribute">add_header</span> Cache-control proxy-revalidate;</span><br><span class="line"><span class="attribute">add_header</span> Cache-Control max-age=&lt;seconds&gt;;  <span class="comment"># 秒</span></span><br><span class="line"><span class="attribute">add_header</span> Cache-control s-maxage=&lt;seconds&gt;; <span class="comment"># 秒</span></span><br></pre></td></tr></table></figure><p>描述：</p><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>must-revalidate</td><td>可缓存但必须再向源服务器进行确认</td></tr><tr><td>no-cache</td><td>数据内容不能被缓存，每次请求都重新访问服务器，若有 max-age，则缓存期间不访问服务器</td></tr><tr><td>no-store</td><td>不缓存请求或响应的任何内容，暂存也不可以(临时文件夹中不能暂存该资源)</td></tr><tr><td>no-transform</td><td>代理不可更改媒体类型</td></tr><tr><td>public</td><td>可以被任何缓存区缓存，如: 浏览器、服务器、代理服务器等</td></tr><tr><td>private（默认）</td><td>只能在浏览器中缓存，只有在第一次请求的时候才访问服务器，若有 max-age，则缓存期间不访问服务器</td></tr><tr><td>proxy-revalidate</td><td>要求中间缓存服务器对缓存的响应有效性再进行确认</td></tr><tr><td>max-age=&lt;秒&gt;</td><td>过期时间，即以秒为单位的缓存时间</td></tr><tr><td>s-maxage=&lt;秒&gt;</td><td>公共缓存服务器响应的最大 Age 值</td></tr></tbody></table><p>值得注意的是：</p><ul><li>设置了 no-cache 或者 private 后，打开新窗口时会重新访问服务器。若设置 max-age，则缓存期间不访问服务器</li><li>设置 private 和正数的 max-age 时，后退时候不会访问服务器</li><li>设置 no-cache 和正数的 max-age 时，后退时会访问服务器</li></ul><h3 id="Nginx服务端缓存"><a href="#Nginx服务端缓存" class="headerlink" title="Nginx服务端缓存"></a>Nginx服务端缓存</h3><p>在 Web 缓存的种类，我们提到了 Ngixn 服务端缓存，而上面仅仅介绍了在浏览器进行缓存，而因为 Ngixn 服务端缓存的内容比较多，所以前往 <strong>Nginx - 缓存集成</strong> 进行学习。</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Nginx </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx基本使用</title>
      <link href="/2022/11/09/Nginx_Base_Use/"/>
      <url>/2022/11/09/Nginx_Base_Use/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="Nginx-基本使用"><a href="#Nginx-基本使用" class="headerlink" title="Nginx 基本使用"></a>Nginx 基本使用</h1><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.7e2zl4ci9t40.webp" alt="image"></p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>进入Nginx的主目录我们可以看到这些文件夹</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@master /]<span class="comment"># cd /usr/local/nginx/</span></span><br><span class="line">[root@master nginx]<span class="comment"># ll</span></span><br><span class="line">总用量 0</span><br><span class="line">drwx------ 2 nobody root   6 7月  27 20:35 client_body_temp</span><br><span class="line">drwxr-xr-x 2 root   root 333 7月  27 20:31 conf</span><br><span class="line">drwx------ 2 nobody root   6 7月  27 20:35 fastcgi_temp</span><br><span class="line">drwxr-xr-x 2 root   root  40 7月  27 20:31 html</span><br><span class="line">drwxr-xr-x 2 root   root  58 7月  27 20:35 logs</span><br><span class="line">drwx------ 2 nobody root   6 7月  27 20:35 proxy_temp</span><br><span class="line">drwxr-xr-x 2 root   root  36 7月  27 20:33 sbin</span><br><span class="line">drwx------ 2 nobody root   6 7月  27 20:35 scgi_temp</span><br><span class="line">drwx------ 2 nobody root   6 7月  27 20:35 uwsgi_temp</span><br></pre></td></tr></table></figure><p>其中这几个文件夹在刚安装后是没有的，主要用来存放运行过程中的临时文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client_body_temp fastcgi_temp proxy_temp scgi_temp</span><br></pre></td></tr></table></figure><ul><li>主要目录说明</li></ul><table><thead><tr><th>目录</th><th>说明</th></tr></thead><tbody><tr><td>conf</td><td>用来存放配置文件相关</td></tr><tr><td>html</td><td>用来存放静态文件的默认目录 html、css等</td></tr><tr><td>sbin</td><td>nginx的主程序</td></tr></tbody></table><h2 id="基本运行原理"><a href="#基本运行原理" class="headerlink" title="基本运行原理"></a>基本运行原理</h2><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.5klrdamfdsg0.webp" alt="image"></p><h2 id="启动停止命令"><a href="#启动停止命令" class="headerlink" title="启动停止命令"></a>启动停止命令</h2><p>对于 Nginx 的启停在 Linux 系统中也有很多种方式，我们介绍两种方式：</p><ul><li>Nginx 服务的信号控制</li><li>Nginx 的命令行控制</li></ul><h3 id="服务信号控制"><a href="#服务信号控制" class="headerlink" title="服务信号控制"></a>服务信号控制</h3><p>在了解内容之前，我们首先要考虑一些问题：</p><ul><li><p>Nginx 中的 master 和 worker 进程?</p></li><li><p>Nginx 的工作方式?</p></li><li><p>如何获取进程的 PID?</p></li><li><p>信号有哪些?</p></li><li><p>如何通过信号控制 Nginx 的启停等相关操作?</p></li></ul><p>前面在提到 Nginx 的高性能，其实也和它的架构模式有关。Nginx 默认采用的是多进程的方式来工作的，当将 Nginx 启动后，我们通过 <code>ps -ef | grep nginx</code> 命令可以查看到如下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master sbin]<span class="comment"># ps -ef| grep nginx</span></span><br><span class="line">root       3564      1  0 13:54 ?        00:00:00 nginx: master process ./nginx</span><br><span class="line">nobody     3565   3564  0 13:54 ?        00:00:00 nginx: worker process</span><br><span class="line">root       3567   3483  0 13:54 pts/1    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><p>从上图中可以看到，Nginx 后台进程中包含一个 master 进程和多个 worker 进程，master 进程主要用来管理 worker 进程，包含接收外界的信息，并将接收到的信号发送给各个 worker 进程，监控 worker 进程的状态。当 worker 进程出现异常退出后，会自动重新启动新的 worker 进程。而 worker 进程则是专门用来处理用户请求的，各个 worker 进程之间是平等的并且相互独立，处理请求的机会也是一样的。</p><p>Nginx 的进程模型，我们可以通过下图来说明下：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.2i4zuw23isa0.webp" alt="image"></p><p>我们现在作为管理员，只需要通过给 master 进程发送信号就可以来控制 Nginx，这个时候我们需要有两个前提条件，一个是要操作的 master 进程，一个是 给 master 进程的信号。</p><ol><li>要想操作 Nginx 的 master 进程，就需要获取到 master 进程的进程号 PID。获取方式简单介绍两个：</li></ol><ul><li>通过 <code>ps -ef | grep nginx</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure><ul><li>在讲解 Nginx 的 <code>./configure</code> 的配置参数的时候，有一个参数 <code>--pid-path=PATH</code>，它的默认值是 <code>/usr/local/nginx/logs/nginx.pid</code>，所以可以通过查看该文件来获取 Nginx 的 master 进程 PID</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/<span class="built_in">local</span>/nginx/logs/nginx.pid</span><br></pre></td></tr></table></figure><ol start="2"><li>信号(signal)</li></ol><table><thead><tr><th>信号</th><th>作用</th></tr></thead><tbody><tr><td>TERM/INT</td><td>立即关闭整个服务（关闭 Nginx）</td></tr><tr><td>QUIT</td><td>「优雅」的关闭整个服务（关闭 Nginx）</td></tr><tr><td>HUP</td><td>重读配置文件并使用服务对新配置项生效（重启 Nginx）</td></tr><tr><td>USR1</td><td>重新打开日志文件，可以用来进行日志切割（重启日志）</td></tr><tr><td>USR2</td><td>平滑升级到最新版的 Nginx</td></tr><tr><td>WINCH</td><td>所有子进程不在接收处理新连接，相当于给 Work 进程发送 QUIT 指令</td></tr></tbody></table><p>调用命令为 <code>kill -signal PID</code></p><blockquote><p>signal：即为信号；PID 即为获取到的 master 进程 PID</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -signal PID</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式一：</span></span><br><span class="line"><span class="built_in">kill</span> -TERM PID</span><br><span class="line"></span><br><span class="line"><span class="comment"># 立即关闭当前线程</span></span><br><span class="line"><span class="built_in">kill</span> -TERM `cat /usr/<span class="built_in">local</span>/nginx/logs/nginx.pid`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式一：</span></span><br><span class="line"><span class="built_in">kill</span> -INT PID</span><br><span class="line"></span><br><span class="line"><span class="comment"># 立即关闭当前线程</span></span><br><span class="line"><span class="built_in">kill</span> -INT `cat /usr/<span class="built_in">local</span>/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure><ul><li>案例</li></ul><ol><li>发送 TERM/INT 信号给 master 进程，会将 Nginx 服务立即关闭。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master nginx]<span class="comment"># cat logs/nginx.pid</span></span><br><span class="line">3564</span><br><span class="line">[root@master nginx]<span class="comment"># kill  -TERM 3564</span></span><br><span class="line">[root@master nginx]<span class="comment"># ps -ef | grep nginx</span></span><br><span class="line">root       8874   8753  0 15:58 pts/2    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><ol start="2"><li>发送 QUIT 信号给 master 进程，master 进程会控制所有的 work 进程不再接收新的请求，等所有请求处理完后，在把进程都关闭掉。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 优雅 关闭线程</span></span><br><span class="line"><span class="built_in">kill</span> -QUIT PID</span><br><span class="line"></span><br><span class="line"><span class="comment"># 「优雅」关闭当前线程</span></span><br><span class="line"><span class="built_in">kill</span> -QUIT `cat /usr/<span class="built_in">local</span>/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure><ol start="3"><li>发送 HUP 信号给 master 进程，master 进程会把控制旧的 worker 进程不再接收新的请求，等处理完请求后将旧的 worker 进程关闭掉，然后根据<mark>更改Nginx 的配置文件</mark>重新启动新的 worker 进程</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启 worker 进程</span></span><br><span class="line"><span class="built_in">kill</span> -HUP PID </span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启当前 worker 进程</span></span><br><span class="line"><span class="built_in">kill</span> -HUP `cat /usr/<span class="built_in">local</span>/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure><ol start="4"><li>发送 USR1 信号给 master 进程，告诉 Nginx 重新开启日志文件。如果日志文件被删除了，可以利用此命令重新打开。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新打开日志文件</span></span><br><span class="line"><span class="built_in">kill</span> -USR1 PID</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新打开当前 Nginx 的日志文件</span></span><br><span class="line"><span class="built_in">kill</span> -USR1 `cat /usr/<span class="built_in">local</span>/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure><ol start="5"><li>发送 USR2 信号给 master 进程，告诉 master 进程要平滑升级，这个时候，会重新开启对应的 master 进程和 worker 进程，整个系统中将会有两个master 进程，并且新的 master 进程的 PID 会被记录在 <code>/usr/local/nginx/logs/nginx.pid</code>，而之前的旧的 master 进程 PID 会被记录在 <code>/usr/local/nginx/logs/nginx.pid.oldbin</code> 文件中，接着再次发送 QUIT 信号给旧的 master 进程，让其处理完请求后再进行关闭</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启新的进程，但是不删除旧的进程</span></span><br><span class="line"><span class="built_in">kill</span> -USR2 PID</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启新的进程，但是不删除当前进程</span></span><br><span class="line"><span class="built_in">kill</span> -USR2 `cat /usr/<span class="built_in">local</span>/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure><p>当新进程升级后（完全启动后），再关闭旧的进程，旧进程的 PID 在另一个 <code>nginx.pid.oldbin</code> 文件里</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭旧的线程</span></span><br><span class="line"><span class="built_in">kill</span> -QUIT `cat /usr/<span class="built_in">local</span>/nginx/logs/nginx.pid.oldbin`</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.5dgklob27do0.webp" alt="image"></p><ol start="6"><li>发送 WINCH 信号给 master 进程,让 master 进程控制不让所有的 worker 进程在接收新的请求了，请求处理完后关闭 worker 进程。注意 master 进程不会被关闭掉</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止 worker 进程，但是不停止 master 进程</span></span><br><span class="line"><span class="built_in">kill</span> -WINCH PID </span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止当前 worker 进程，但是不停止 master 进程</span></span><br><span class="line"><span class="built_in">kill</span> -WINCH `cat /usr/<span class="built_in">local</span>/nginx/logs/nginx.pid`</span><br></pre></td></tr></table></figure><h3 id="命令行控制"><a href="#命令行控制" class="headerlink" title="命令行控制"></a>命令行控制</h3><p>此方式是通过 Nginx 安装目录下的 sbin 下的可执行文件 nginx(文件名) 来进行对 Nginx 状态的控制，我们可以通过 <code>nginx -h</code> 来查看都有哪些参数可以用</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@master sbin]<span class="comment"># ./nginx -h</span></span><br><span class="line">nginx version: nginx/1.21.6</span><br><span class="line">Usage: nginx [-?hvVtTq] [-s signal] [-p prefix]</span><br><span class="line">             [-e filename] [-c filename] [-g directives]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -?,-h         : this <span class="built_in">help</span></span><br><span class="line">  -v            : show version and <span class="built_in">exit</span></span><br><span class="line">  -V            : show version and configure options <span class="keyword">then</span> <span class="built_in">exit</span></span><br><span class="line">  -t            : <span class="built_in">test</span> configuration and <span class="built_in">exit</span></span><br><span class="line">  -T            : <span class="built_in">test</span> configuration, dump it and <span class="built_in">exit</span></span><br><span class="line">  -q            : suppress non-error messages during configuration testing</span><br><span class="line">  -s signal     : send signal to a master process: stop, quit, reopen, reload</span><br><span class="line">  -p prefix     : <span class="built_in">set</span> prefix path (default: /usr/<span class="built_in">local</span>/nginx/)</span><br><span class="line">  -e filename   : <span class="built_in">set</span> error <span class="built_in">log</span> file (default: logs/error.log)</span><br><span class="line">  -c filename   : <span class="built_in">set</span> configuration file (default: conf/nginx.conf)</span><br><span class="line">  -g directives : <span class="built_in">set</span> global directives out of configuration file</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-? 和 -h</td><td>显示帮助信息</td></tr><tr><td>-v</td><td>打印版本号信息并退出</td></tr><tr><td>-V</td><td>打印版本号信息和配置信息并退出</td></tr><tr><td>-t</td><td>测试 Nginx 的配置文件语法是否正确并退出</td></tr><tr><td>-T</td><td>测试 Nginx 的配置文件语法是否正确并列出用到的配置文件信息然后退出</td></tr><tr><td>-q</td><td>在配置测试期间过滤掉非错误消息</td></tr><tr><td>-s</td><td>signal 信号，后面的命令和服务信号控制功能类似：  <code>stop</code>：快速关闭，类似于 TERM/INT 信号的作用 <code>quit</code>：优雅的关闭，类似于 QUIT 信号的作用 <code>reopen</code>：重新打开日志文件类似于 USR1 信号的作用 <code>reload</code>：重启 Nginx，类似于 HUP 信号的作用</td></tr><tr><td>-p</td><td>prefix，指定 Nginx 的默认安装路径，(默认为：/usr/local/nginx/)</td></tr><tr><td>-c</td><td>filename，指定 Nginx 的配置文件路径,(默认为：conf/nginx.conf)</td></tr><tr><td>-g</td><td>用来补充 Nginx 配置文件，向 Nginx 服务指定启动时应用全局的配置</td></tr></tbody></table><ul><li>案例</li></ul><p>如果觉得每次执行 nginx 指令都必须进入 sbin 目录，则将该指令设置为全局使用。</p><ol><li>两个查看版本命令</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看版本指令 1</span></span><br><span class="line">[root@master sbin]<span class="comment"># nginx -v</span></span><br><span class="line"><span class="comment"># 返回结果</span></span><br><span class="line">nginx version: nginx/1.21.6</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本指令 2</span></span><br><span class="line">[root@master sbin]<span class="comment"># nginx -V</span></span><br><span class="line"><span class="comment"># 返回结果</span></span><br><span class="line">nginx version: nginx/1.21.6</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)</span><br><span class="line">configure arguments: --prefix=/usr/<span class="built_in">local</span>/nginx</span><br></pre></td></tr></table></figure><ol start="2"><li>测试 Nginx 的配置文件语法</li></ol><p>我们首先要知道配置文件的路径在哪，先执行 <code>-t</code> 进行测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试 Nginx 的配置文件语法</span></span><br><span class="line">[root@master sbin]<span class="comment"># nginx -t</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#结果 返回 成功</span></span><br><span class="line">nginx: the configuration file /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf <span class="built_in">test</span> is successful</span><br></pre></td></tr></table></figure><p>由第 6 行代码可以知道测试成功，第 5 行代码告诉我们配置文件的目录，我们去修改配置文件，然后再进行测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master sbin]<span class="comment"># vim /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###add</span></span><br><span class="line">HelloWorld</span><br></pre></td></tr></table></figure><p>重新进行测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试 Nginx 的配置文件语法</span></span><br><span class="line">[root@master sbin]<span class="comment"># nginx -t</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回结果（失败）</span></span><br><span class="line">nginx: [emerg] unknown directive <span class="string">"HelloWorld"</span> <span class="keyword">in</span> /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf:3</span><br><span class="line">nginx: configuration file /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf <span class="built_in">test</span> failed</span><br></pre></td></tr></table></figure><p>由第 6 行代码可以知道，配置文件出错了。验证完了，记得将配置文件改回来。</p><ol start="3"><li>指定 Nginx 的默认安装路径</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -p /usr/<span class="built_in">local</span>/nginx/</span><br></pre></td></tr></table></figure><ol start="4"><li>指定 Nginx 的配置文件路径</li></ol><p>先把配置文件拷贝到另一个目录，然后修改拷贝后的配置文件内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拷贝配置文件</span></span><br><span class="line">cp /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf /opt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改拷贝后的配置文件内容</span></span><br><span class="line">vim /opt/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># add</span></span><br><span class="line">HelloWorld</span><br></pre></td></tr></table></figure><p>测试配置文件的时候，指定拷贝后的配置文件进行测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定配置文件进行测试</span></span><br><span class="line">[root@master nginx]<span class="comment"># nginx -tc /opt/nginx.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#返回结果</span></span><br><span class="line">nginx: [emerg] unknown directive <span class="string">"HelloWorld"</span> <span class="keyword">in</span> /opt/nginx.conf:3</span><br><span class="line">nginx: configuration file /opt/nginx.conf <span class="built_in">test</span> failed</span><br></pre></td></tr></table></figure><p>说明指定配置文件目录生效，只是文件内容语法不对。</p><h2 id="版本升级和新增模块"><a href="#版本升级和新增模块" class="headerlink" title="版本升级和新增模块"></a>版本升级和新增模块</h2><p>如果想对 Nginx 的版本进行更新，或者要应用一些新的模块，最简单的做法就是停止当前的 Nginx 服务，然后开启新的 Nginx 服务。但是这样会导致在一段时间内，用户是无法访问服务器。为了解决这个问题，我们就需要用到 Nginx 服务器提供的平滑升级功能。这个也是 Nginx 的一大特点，使用这种方式，就可以使 Nginx 在 7 * 24 小时不间断的提供服务了。接下来我们分析下需求：</p><blockquote><p>需求：Nginx 的版本最开始使用的是 Nginx-1.14.2，由于服务升级，需要将 Nginx 的版本升级到 Nginx-1.16.1,要求 Nginx 不能中断提供服务。</p></blockquote><p>为了应对上述的需求，这里我们提供两种解决方案:</p><ul><li>使用 Nginx 服务信号完成 Nginx 的升级</li><li>使用 Nginx 安装目录的 make 命令完成升级</li></ul><p>版本升级其实就是替换可执行文件 nginx。</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ol><li>先准备两个版本的 Nginx 分别是 1.14.2 和 1.16.1</li><li>使用 Nginx 源码安装的方式将 1.14.2 版本安装成功并正确访问</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压 1.14.2 版本</span></span><br><span class="line">tar -xzf nginx-1.14.2.tar.gz</span><br><span class="line"><span class="comment"># 进入解压目录</span></span><br><span class="line"><span class="built_in">cd</span> nginx-1.14.2/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行配置文件</span></span><br><span class="line">./configure</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><ol start="3"><li>将 Nginx 1.16.1 版本进行参数配置和编译，不需要进行安装。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压 1.16.1 版本</span></span><br><span class="line">tar -xzf nginx-1.16.1.tar.gz</span><br><span class="line"><span class="comment"># 进入解压目录</span></span><br><span class="line"><span class="built_in">cd</span> nginx-1.16.1/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行配置文件</span></span><br><span class="line">./configure</span><br><span class="line"></span><br><span class="line"><span class="comment"># 仅仅编译</span></span><br><span class="line">make</span><br></pre></td></tr></table></figure><h3 id="服务信号进行升级"><a href="#服务信号进行升级" class="headerlink" title="服务信号进行升级"></a>服务信号进行升级</h3><p>第一步:将 1.14.2 版本的 sbin 目录下的 nginx 进行备份</p><blockquote><p>不是复制一份，是直接修改原来的 nginx。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 sbin 目录下</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份为 nginxold 文件</span></span><br><span class="line">mv nginx nginx.backup</span><br></pre></td></tr></table></figure><p>第二步：将 Nginx 1.16.1 安装目录编译后的 objs 目录下的 nginx 文件，拷贝到原来 <code>/usr/local/nginx/sbin</code> 目录下</p><p>如果第一步没有备份，那么将会覆盖 1.14.2 的 nginx 文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 objs 目录</span></span><br><span class="line"><span class="built_in">cd</span> ~/nginx/core/nginx-1.16.1/objs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝可执行文件到原来的目录</span></span><br><span class="line">cp nginx /usr/<span class="built_in">local</span>/nginx/sbin</span><br></pre></td></tr></table></figure><p>第三步：发送信号 USR2 给 Nginx 的 1.14.2 版本对应的 master 进程</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -USR2 `cat /usr/<span class="built_in">local</span>/logs/nginx.pid`</span><br></pre></td></tr></table></figure><p>第四步：发送信号 QUIT 给 Nginx 的 1.14.2 版本对应的 master 进程</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -QUIT `cat /usr/<span class="built_in">local</span>/logs/nginx.pid.oldbin`</span><br></pre></td></tr></table></figure><h3 id="安装目录的make命令完成升级"><a href="#安装目录的make命令完成升级" class="headerlink" title="安装目录的make命令完成升级"></a>安装目录的make命令完成升级</h3><p>第一步：将 1.14.2 版本的 sbin 目录下的 nginx 进行备份</p><blockquote><p>不是复制一份，是直接修改原来的 nginx。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 sbin 目录下</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份为 nginxold 文件</span></span><br><span class="line">mv nginx nginx.backup</span><br></pre></td></tr></table></figure><p>第二步：将 Nginx1.16.1 安装目录编译后的 objs 目录下的 nginx 文件，拷贝到原来 <code>/usr/local/nginx/sbin</code> 目录下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入 objs 目录</span></span><br><span class="line"><span class="built_in">cd</span> ~/nginx/core/nginx-1.16.1/objs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝可执行文件到原来的目录</span></span><br><span class="line">cp nginx /usr/<span class="built_in">local</span>/nginx/sbin</span><br></pre></td></tr></table></figure><p>第三步：进入到安装目录，执行 <code>make upgrade</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make upgrade</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220728/image.2hpc905f42a0.webp" alt="image"></p><p>第四步：查看是否更新成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure><p>在整个过程中，其实 Nginx 是一直对外提供服务的。并且当 Nginx 的服务器启动成功后，我们是可以通过浏览器进行直接访问的，同时我们可以通过更改 html 目录下的页面来修改我们在页面上所看到的内容，那么问题来了，为什么我们要修改 html 目录下的文件，能不能多添加一些页面是 Nginx 的功能更加丰富，还有前面聊到 Nginx 的前端功能又是如何来实现的，这就需要我们对 <a href="/middleware/Nginx/Nginx_Configuration_file">Nginx 的核心配置文件</a> 进行一个详细的学习。</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Nginx </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx安装</title>
      <link href="/2022/11/09/Nginx_install/"/>
      <url>/2022/11/09/Nginx_install/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="Nginx-安装"><a href="#Nginx-安装" class="headerlink" title="Nginx 安装"></a>Nginx 安装</h1><h2 id="Nginx版本介绍"><a href="#Nginx版本介绍" class="headerlink" title="Nginx版本介绍"></a>Nginx版本介绍</h2><p>Nginx 的官方网站为: <a href="http://nginx.org/" target="_blank" rel="noopener">http://nginx.org</a></p><p>打开源码可以看到如下的页面内容</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.4wlfyfbk53i0.webp" alt="image"></p><p>Nginx 的官方下载网站为 <a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a>，当然你也可以之间在首页选中右边的 download 进入版本下载网页。在下载页面我们会看到如下内容：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.3e7olqaurau0.webp" alt="image"></p><h2 id="获取Nginx源码"><a href="#获取Nginx源码" class="headerlink" title="获取Nginx源码"></a>获取Nginx源码</h2><p><a href="http://nginx.org/download/" target="_blank" rel="noopener">http://nginx.org/download/</a></p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.3cu95u4zd440.webp" alt="image"></p><h2 id="准备服务器系统"><a href="#准备服务器系统" class="headerlink" title="准备服务器系统"></a>准备服务器系统</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li>虚拟机：VMware WorkStation</li><li>Linux 系统：Centos7</li><li>上传软件工具：MobaXterm、xsheel,SecureCRT 之一</li><li>网络</li></ul><h3 id="确认CentOS的内核"><a href="#确认CentOS的内核" class="headerlink" title="确认CentOS的内核"></a>确认CentOS的内核</h3><p>准备一个内核为 2.6 及以上版本的操作系统，因为 linux2.6 及以上内核才支持 epoll,而 Nginx 需要解决高并发压力问题是需要用到 epoll，所以我们需要有这样的版本要求。</p><p>我们可以使用 <code>uname -a</code> 命令来查询linux的内核版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># uname -a</span></span><br><span class="line">Linux master 3.10.0-1160.el7.x86_64 <span class="comment">#1 SMP Mon Oct 19 16:18:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure><h3 id="确保Centos能联网"><a href="#确保Centos能联网" class="headerlink" title="确保Centos能联网"></a>确保Centos能联网</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><p>三种网络模式：桥接、主机、NAT，建议使用虚拟机使用 NAT 模式</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.4ga3snmdtsa0.webp" alt="image"></p><p>NAT 模式下，只要主机有网络，则虚拟机也有网络。</p><h3 id="确认关闭防火墙"><a href="#确认关闭防火墙" class="headerlink" title="确认关闭防火墙"></a>确认关闭防火墙</h3><p>这一项的要求仅针对于那些对 Linux 系统的防火墙设置规则不太清楚的，建议大家把防火墙都关闭掉，因为把防火墙关闭掉，可以省掉后续 Nginx 使用过程中遇到的诸多问题。</p><p>关闭的方式有如下两种:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld      <span class="comment"># 关闭运行的防火墙，系统重新启动后，防火墙将重新打开</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld   <span class="comment"># 永久关闭防火墙，，系统重新启动后，防火墙依然关闭</span></span><br><span class="line">systemctl status firewalld <span class="comment"># 查看防火墙状态</span></span><br></pre></td></tr></table></figure><p>如果不想关闭防火墙，记得开放 Nginx 的访问端口</p><h3 id="确认停用selinux"><a href="#确认停用selinux" class="headerlink" title="确认停用selinux"></a>确认停用selinux</h3><p>selinux(security-enhanced linux)，美国安全局对于强制访问控制的实现，在 Linux2.6 内核以后的版本中，selinux 已经成功内核中的一部分。可以说selinux 是 Linux 史上最杰出的新安全子系统之一。虽然有了 selinux，我们的系统会更安全，但是对于使用 Nginx 或者其他的学习过程中，会有很多设置，所以这块建议大家将 selinux 进行关闭。</p><p><code>sestatus</code> 查看状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># sestatus</span></span><br><span class="line">SELinux status:                 disabled</span><br></pre></td></tr></table></figure><p>如果查看不是 disabled 状态，我们可以通过修改配置文件来进行设置,修改 <code>SELINUX=disabled</code>，然后重启下系统即可生效。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/selinux/config</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.1063r7fk4lz4.webp" alt="image"></p><h2 id="Nginx环境安装"><a href="#Nginx环境安装" class="headerlink" title="Nginx环境安装"></a>Nginx环境安装</h2><p>Nginx 的安装方式有两种分别是：</p><ul><li>通过 Nginx 源码<ul><li>通过 Nginx 源码简单安装</li><li>通过 Nginx 源码复杂安装</li></ul></li><li>通过 yum 安装</li></ul><p>如果通过 Nginx 源码安装需要提前准备安装好环境，我相信，任何 C 语言编写的软件都离不开这些环境，安装后所有软件都会收益，往下看。</p><h3 id="GCC编译器"><a href="#GCC编译器" class="headerlink" title="GCC编译器"></a>GCC编译器</h3><p>Nginx 是使用 C 语言编写的程序，因此想要运行 Nginx 就需要安装一个编译工具。GCC 就是一个开源的编译器集合，用于处理各种各样的语言，其中就包含了 C 语言。</p><p>使用命令 <code>yum install -y gcc</code> 来安装</p><p>安装成功后，可以通过 <code>gcc --version</code> 来查看 gcc 是否安装成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 gcc</span></span><br><span class="line">yum install -y gcc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 gcc 版本</span></span><br><span class="line">gcc --version</span><br></pre></td></tr></table></figure><h3 id="PCRE"><a href="#PCRE" class="headerlink" title="PCRE"></a>PCRE</h3><p>Nginx 在编译过程中需要使用到 PCRE 库（perl Compatible Regular Expressoin 兼容正则表达式库)，因为在 Nginx 的 Rewrite 模块和 Http 核心模块都会使用到 PCRE 正则表达式语法。</p><p>可以使用命令 <code>yum install -y pcre pcre-devel</code> 来进行安装</p><p>安装成功后，可以通过 <code>rpm -qa pcre pcre-devel</code> 来查看是否安装成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 PCRE 和 pcre-devel</span></span><br><span class="line">yum install -y pcre pcre-devel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 PCRE 是否安装成功</span></span><br><span class="line">rpm -qa pcre pcre-devel</span><br></pre></td></tr></table></figure><h3 id="zlib"><a href="#zlib" class="headerlink" title="zlib"></a>zlib</h3><p>zlib 库提供了开发人员的压缩算法，在 Nginx 的各个模块中需要使用 gzip 压缩，所以我们也需要提前安装其库及源代码 zlib 和 zlib-devel。</p><p>可以使用命令 <code>yum install -y zlib zlib-devel</code> 来进行安装</p><p>安装成功后，可以通过 <code>rpm -qa zlib zlib-devel</code> 来查看是否安装成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 zlib 和 zlib-devel</span></span><br><span class="line">yum install -y zlib zlib-devel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 zlib 和 zlib-devel 是否安装成功</span></span><br><span class="line">rpm -qa zlib zlib-devel</span><br></pre></td></tr></table></figure><h3 id="OpenSSL"><a href="#OpenSSL" class="headerlink" title="OpenSSL"></a>OpenSSL</h3><p>OpenSSL 是一个开放源代码的软件库包，应用程序可以使用这个包进行安全通信，并且避免被窃听。</p><p>SSL：Secure Sockets Layer 安全套接协议的缩写，可以在 Internet 上提供秘密性传输，其目标是保证两个应用间通信的保密性和可靠性。在 Nginx 中，如果服务器需要提供安全网页时就需要用到 OpenSSL 库，所以我们需要对 OpenSSL 的库文件及它的开发安装包进行一个安装。</p><p>可以使用命令 <code>yum install -y openssl openssl-devel</code> 来进行安装</p><p>安装成功后，可以通过 <code>rpm -qa openssl openssl-devel</code> 来查看是否安装成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 OpenSSL 库</span></span><br><span class="line">yum install -y openssl openssl-devel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 OpenSSL 是否安装成功</span></span><br><span class="line">rpm -qa openssl openssl-devel</span><br></pre></td></tr></table></figure><h3 id="全部安装命令"><a href="#全部安装命令" class="headerlink" title="全部安装命令"></a>全部安装命令</h3><p>上述命令，一个个来的话比较麻烦，我们也可以通过一条命令来进行安装</p><p><code>yum install -y gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel</code> 进行全部安装。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全部安装 GCC、PCRE、zlib、OpenSSL</span></span><br><span class="line">yum install -y gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看安装版本</span></span><br><span class="line">rpm -qa pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure><h2 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h2><p>Nginx 的官方下载网站为 <a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a></p><h3 id="源码简单安装"><a href="#源码简单安装" class="headerlink" title="源码简单安装"></a>源码简单安装</h3><ol><li>进入官网查找需要下载版本的链接地址，然后使用 wget 命令进行下载，这里下载在 <code>/opt</code> 目录下</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line"></span><br><span class="line">wget http://nginx.org/download/nginx-1.21.6.tar.gz</span><br></pre></td></tr></table></figure><p>这里下载的版本是 1.21.6，请根据需求更改版本号。如果 wget 命令下载速度慢，可以先下载到 Windows 系统，再使用工具上传到 Linux 下。</p><ol start="2"><li>建议大家将下载的资源进行包管理，在 <code>/opt</code> 目录下创建 <code>nginx/core</code> 目录，<code>-p</code> 代表允许创建多级目录</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建指定目录</span></span><br><span class="line">mkdir -p /opt/nginx/core</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动到指定目录</span></span><br><span class="line">mv nginx-1.21.6.tar.gz nginx/core</span><br></pre></td></tr></table></figure><ol start="3"><li>解压缩</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入指定目录</span></span><br><span class="line"><span class="built_in">cd</span> /opt/nginx/core</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -xzf nginx-1.21.6.tar.gz</span><br></pre></td></tr></table></figure><ol start="4"><li>进入资源文件中，发现 configure 文件，执行该文件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入解压出的目录</span></span><br><span class="line"><span class="built_in">cd</span> nginx-1.21.6/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行 configure </span></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx</span><br></pre></td></tr></table></figure><ol start="5"><li>编译</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><ol start="6"><li>安装</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><ol start="7"><li>查看 nginx 的安装位置</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis nginx</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master sbin]<span class="comment"># whereis nginx</span></span><br><span class="line">nginx: /usr/<span class="built_in">local</span>/nginx</span><br></pre></td></tr></table></figure><ol start="8"><li>启动测试。启动文件在安装目录下的 sbin 命令</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入启动文件的目录</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行 nginx 文件</span></span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure><p>访问自己 Linux 的 IP 地址，不需要加端口，如果看到如下图，代表成功</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.6xop32js8180.webp" alt="image"></p><h3 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h3><p>使用源码进行简单安装，我们会发现安装的过程比较繁琐，需要提前准备 GCC 编译器、PCRE 兼容正则表达式库、zlib 压缩库、OpenSSL 安全通信的软件库包，然后才能进行 Nginx 的安装。下面使用 yum 安装，过程更简单。</p><ol><li>安装 yum-utils</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum  install -y yum-utils</span><br></pre></td></tr></table></figure><ol start="2"><li>添加 yum 源文件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/nginx.repo</span><br></pre></td></tr></table></figure><ol start="3"><li>添加如下内容</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[nginx-mainline]</span><br><span class="line">name=nginx mainline repo</span><br><span class="line">baseurl=http://nginx.org/packages/mainline/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=<span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="4"><li>使用 yum 安装 Nginx</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y nginx</span><br></pre></td></tr></table></figure><ol start="5"><li>查看是否安装成功</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list | grep nginx</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.36wvsdkk9zc0.webp" alt="image"></p><ol start="6"><li>使用 yum 进行安装</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yun install -y nginx</span><br></pre></td></tr></table></figure><ol start="7"><li>查看nginx的安装位置</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis nginx</span><br></pre></td></tr></table></figure><ol start="8"><li>启动测试</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入文件</span></span><br><span class="line"><span class="built_in">cd</span> /usr/sbin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 nginx</span></span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.38bsees6wz60.webp" alt="image"></p><p>访问自己 Linux 的 IP 地址，不需要加端口，如果看到如下图，代表成功</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.6xop32js8180.webp" alt="image"></p><h3 id="源码简单安装和yum安装的差异"><a href="#源码简单安装和yum安装的差异" class="headerlink" title="源码简单安装和yum安装的差异"></a>源码简单安装和yum安装的差异</h3><p>这里先介绍一个命令: <code>./nginx -V</code>，通过该命令可以查看到所安装 Nginx 的版本及相关配置信息。</p><p>简单安装的配置信息查看：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master sbin]<span class="comment"># ./nginx -V</span></span><br><span class="line">nginx version: nginx/1.21.6</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)</span><br><span class="line">configure arguments: --prefix=/usr/<span class="built_in">local</span>/nginx</span><br></pre></td></tr></table></figure><p>yum 安装的配置信息查看：（这里截取 1.16.1 版本的 图片）</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.os75hg8w3gg.webp" alt="image"></p><p>可以看出 yum 安装的参数非常多，如果想源码简单安装也有这些参数，这涉及到源码复杂安装，往下看。</p><p>执行 <code>tar -zxvf nginx-1.16.1.tar.gz</code> 对下载的资源进行解压缩后，进入压缩后的目录，可以看到如下结构</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.320qb912jy00.webp" alt="image"></p><p>内容解释：</p><table><thead><tr><th>内容名</th><th>作用</th></tr></thead><tbody><tr><td>auto</td><td>存放的是编译相关的脚本</td></tr><tr><td>CHANGES</td><td>版本变更记录</td></tr><tr><td>CHANGES.ru</td><td>俄罗斯文的版本变更记录</td></tr><tr><td>conf</td><td>Nginx 默认的配置文件</td></tr><tr><td>configure</td><td>Nginx 软件的自动脚本程序,是一个比较重要的文件，作用如下： 1、检测环境及根据环境检测结果生成 C 代码 2、生成编译代码需要的 Makefile 文件</td></tr><tr><td>contrib</td><td>存放的是几个特殊的脚本文件，其中 README 中对脚本有着详细的说明</td></tr><tr><td>html</td><td>存放的是 Nginx 自带的两个 html 页面，访问 Nginx 的首页和错误页面</td></tr><tr><td>LICENSE</td><td>许可证的相关描述文件</td></tr><tr><td>man</td><td>Nginx 的 man 手册</td></tr><tr><td>README</td><td>Nginx 的阅读指南</td></tr><tr><td>src</td><td>Nginx 的源代码</td></tr></tbody></table><h3 id="源码复杂安装"><a href="#源码复杂安装" class="headerlink" title="源码复杂安装"></a>源码复杂安装</h3><p>这种方式和简单的安装配置不同的地方在第一步，通过 <code>./configure</code> 来对编译参数进行设置，需要我们手动来指定。那么都有哪些参数可以进行设置，接下来我们进行一个详细的说明。</p><ul><li>PATH：是和路径相关的配置信息</li><li>with：是启动模块，默认是关闭的</li><li>without：是关闭模块，默认是开启的</li></ul><p>我们先来认识一些简单的路径配置已经通过这些配置来完成一个简单的编译：</p><table><thead><tr><th>指令</th><th>作用</th><th>默认值</th></tr></thead><tbody><tr><td>–prefix=PATH</td><td>指向 Nginx 的安装目录</td><td>/usr/local/nginx</td></tr><tr><td>–sbin-path=PATH</td><td>指向(执行)程序文件(nginx)的路径</td><td>&lt;安装目录&gt;/sbin/nginx</td></tr><tr><td>–modules-path=PATH</td><td>指向 Nginx 动态模块安装目录</td><td>&lt;安装目录&gt;//modules</td></tr><tr><td>–conf-path=PATH</td><td>指向配置文件(nginx.conf)的路径</td><td>&lt;安装目录&gt;/conf/nginx.conf</td></tr><tr><td>–error-log-path=PATH</td><td>指向错误日志文件的路径</td><td>&lt;安装目录&gt;/logs/error.log</td></tr><tr><td>–http-log-path=PATH</td><td>指向访问日志文件的路径</td><td>&lt;安装目录&gt;/logs/access.log</td></tr><tr><td>–pid-path=PATH</td><td>指向 Nginx 启动后进行ID的文件路径</td><td>&lt;安装目录&gt;/logs/nginx.pid</td></tr><tr><td>–lock-path=PATH</td><td>指向 Nginx 锁文件的存放路径</td><td>&lt;安装目录&gt;/logs/nginx.lock</td></tr></tbody></table><p>源码复杂安装命令如下：（先进入解压目录）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入解压目</span></span><br><span class="line"><span class="built_in">cd</span> ~/nginx/core</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装命令</span></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx \</span><br><span class="line">--sbin-path=/usr/<span class="built_in">local</span>/nginx/sbin/nginx \</span><br><span class="line">--modules-path=/usr/<span class="built_in">local</span>/nginx/modules \</span><br><span class="line">--conf-path=/usr/<span class="built_in">local</span>/nginx/conf/nginx.conf \</span><br><span class="line">--error-log-path=/usr/<span class="built_in">local</span>/nginx/logs/error.log \</span><br><span class="line">--http-log-path=/usr/<span class="built_in">local</span>/nginx/logs/access.log \</span><br><span class="line">--pid-path=/usr/<span class="built_in">local</span>/nginx/logs/nginx.pid \</span><br><span class="line">--lock-path=/usr/<span class="built_in">local</span>/nginx/logs/nginx.lock</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行编译和安装</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>在使用上述命令之前，需要将之前服务器已经安装的 Nginx 进行卸载。</p><h2 id="Nginx卸载"><a href="#Nginx卸载" class="headerlink" title="Nginx卸载"></a>Nginx卸载</h2><p>简单安装后如果想要卸载，步骤分为三步骤：</p><p>步骤一：需要将 Nginx 的进程关闭（要在 安装目录的 sbin 目录下）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s stop</span><br></pre></td></tr></table></figure><p>步骤二：将安装的 Nginx 进行删除</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /usr/<span class="built_in">local</span>/nginx</span><br></pre></td></tr></table></figure><p>步骤三：进入解压目录，将安装包之前编译的环境清除掉</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入解压目录</span></span><br><span class="line"><span class="built_in">cd</span> /opt/nginx/core</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除环境</span></span><br><span class="line">make clean</span><br></pre></td></tr></table></figure><h2 id="Nginx目录结构分析"><a href="#Nginx目录结构分析" class="headerlink" title="Nginx目录结构分析"></a>Nginx目录结构分析</h2><p>在使用 Nginx 之前，我们先对安装好的 Nginx 目录文件进行一个分析，在这块给大家介绍一个工具 tree，通过 tree 我们可以很方面的去查看 Centos 系统上的文件目录结构，当然，如果想使用 tree 工具，就得先通过 <code>yum install -y tree</code> 来进行安装，安装成功后，可以通过执行 <code>tree /usr/local/nginx</code> (tree 后面跟的是 Nginx 的安装目录)，获取的结果如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@master /]<span class="comment"># tree /usr/local/nginx</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx</span><br><span class="line">├── client_body_temp</span><br><span class="line">├── conf</span><br><span class="line">│   ├── fastcgi.conf</span><br><span class="line">│   ├── fastcgi.conf.default</span><br><span class="line">│   ├── fastcgi_params</span><br><span class="line">│   ├── fastcgi_params.default</span><br><span class="line">│   ├── koi-utf</span><br><span class="line">│   ├── koi-win</span><br><span class="line">│   ├── mime.types</span><br><span class="line">│   ├── mime.types.default</span><br><span class="line">│   ├── nginx.conf</span><br><span class="line">│   ├── nginx.conf.default</span><br><span class="line">│   ├── scgi_params</span><br><span class="line">│   ├── scgi_params.default</span><br><span class="line">│   ├── uwsgi_params</span><br><span class="line">│   ├── uwsgi_params.default</span><br><span class="line">│   └── win-utf</span><br><span class="line">├── fastcgi_temp</span><br><span class="line">├── html</span><br><span class="line">│   ├── 50x.html</span><br><span class="line">│   └── index.html</span><br><span class="line">├── logs</span><br><span class="line">│   ├── access.log</span><br><span class="line">│   ├── error.log</span><br><span class="line">│   └── nginx.pid</span><br><span class="line">├── proxy_temp</span><br><span class="line">├── sbin</span><br><span class="line">│   ├── nginx</span><br><span class="line">│   └── nginx.old</span><br><span class="line">├── scgi_temp</span><br><span class="line">└── uwsgi_temp</span><br><span class="line"></span><br><span class="line">9 directories, 22 files</span><br></pre></td></tr></table></figure><p> CGI(Common Gateway Interface)通用网关【接口】，主要解决的问题是从客户端发送一个请求和数据，服务端获取到请求和数据后可以调用调用 CGI【程序】处理及相应结果给客户端的一种标准规范。</p><table><thead><tr><th>目录</th><th>文件名</th><th>作用</th></tr></thead><tbody><tr><td>conf</td><td></td><td>Nginx 所有配置文件目录</td></tr><tr><td></td><td>fastcgi.conf</td><td>fastcgi相关配置文件</td></tr><tr><td></td><td>fastcgi.conf.default</td><td>fastcgi.conf 的备份文件</td></tr><tr><td></td><td>fastcgi_params</td><td>fastcgi 的参数文件</td></tr><tr><td></td><td>fastcgi_params.default</td><td>fastcgi 的参数备份文件</td></tr><tr><td></td><td>scgi_params</td><td>scgi 的参数文件</td></tr><tr><td></td><td>scgi_params.default</td><td>scgi 的参数备份文件</td></tr><tr><td></td><td>uwsgi_params</td><td>uwsgi 的参数文件</td></tr><tr><td></td><td>uwsgi_params.default</td><td>uwsgi 的参数备份文件</td></tr><tr><td></td><td>mime.types</td><td><strong>记录的是 HTTP 协议中的 Content-Type 的值和文件后缀名的对应关系</strong></td></tr><tr><td></td><td>mime.types.default</td><td>mime.types 的备份文件</td></tr><tr><td></td><td>nginx.conf</td><td><strong>这是 Nginx 的核心配置文件，这个文件非常重要，也是我们即将要学习的重点</strong></td></tr><tr><td></td><td>nginx.conf.default</td><td>nginx.conf 的备份文件</td></tr><tr><td></td><td>koi-utf、koi-win、win-utf</td><td>这三个文件都是与编码转换映射相关的配置文件，用来将一种编码转换成另一种编码</td></tr><tr><td>html</td><td></td><td>存放 Nginx 自带的两个静态的 html 页面</td></tr><tr><td></td><td>50x.html</td><td>访问失败后的失败页面</td></tr><tr><td></td><td>index.html</td><td>成功访问的默认首页</td></tr><tr><td>logs</td><td></td><td>记录入门的文件，当 Nginx 服务器启动后，这里面会有 access.log error.log 和 nginx.pid 三个文件出现</td></tr><tr><td></td><td>access.log</td><td><strong>访问日志，每次访问成功都会进行记录</strong></td></tr><tr><td></td><td>error.log</td><td><strong>错误日志，每次访问失败都会进行记录</strong></td></tr><tr><td></td><td>nginx.pid</td><td>启动 Nginx 后，系统生成一个进程 PID，这个文件记录这个 PID</td></tr><tr><td>sbin</td><td></td><td>是存放执行程序文件 nginx</td></tr><tr><td></td><td>nginx</td><td>用来控制 Nginx 的启动和停止等相关的命令。<strong>注意：该文件名就叫 nginx</strong></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Nginx </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx介绍</title>
      <link href="/2022/11/08/Nginx_introduce/"/>
      <url>/2022/11/08/Nginx_introduce/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="Nginx-介绍"><a href="#Nginx-介绍" class="headerlink" title="Nginx 介绍"></a>Nginx 介绍</h1><h2 id="Nginx是什么"><a href="#Nginx是什么" class="headerlink" title="Nginx是什么"></a>Nginx是什么</h2><p>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。</p><p>其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、简单的配置文件和低系统资源的消耗而闻名。2011年6月1日，nginx 1.0.4发布。Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。</p><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><ol><li>Web服务器</li></ol><p>WEB 服务器也叫网页服务器，英文名叫 Web Server，主要功能是为用户提供网上信息浏览服务。</p><ol start="2"><li>HTTP</li></ol><p>HTTP 是超文本传输协议的缩写，是用于从 WEB 服务器传输超文本到本地浏览器的传输协议，也是互联网上应用最为广泛的一种网络协议。HTTP 是一个客户端和服务器端请求和应答的标准，客户端是终端用户，服务端是网站，通过使用 Web 浏览器、网络爬虫或者其他工具，客户端发起一个到服务器上指定端口的 HTTP 请求。</p><ol start="3"><li>POP3/SMTP/IMAP</li></ol><p>POP3(Post Offic Protocol 3)邮局协议的第三个版本；</p><p>SMTP(Simple Mail Transfer Protocol)简单邮件传输协议；</p><p>IMAP(Internet Mail Access Protocol)交互式邮件存取协议；</p><p>通过上述名词的解释，我们可以了解到 Nginx 也可以作为电子邮件代理服务器。</p><ol start="4"><li>正向代理</li></ol><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.5u72na7a9hc0.webp" alt="image"></p><p>反向代理</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.3622anezbxi0.webp" alt="image"></p><p>正向代理的 Proxy 是多对一，反向代理的 Proxy 是一对多。</p><h2 id="常见服务器对比"><a href="#常见服务器对比" class="headerlink" title="常见服务器对比"></a>常见服务器对比</h2><p>在介绍这一节内容之前，我们先来认识一家公司叫 Netcraft。</p><blockquote><p>Netcraft 公司于 1994 年底在英国成立，多年来一直致力于互联网市场以及在线安全方面的咨询服务，其中在国际上最具影响力的当属其针对网站服务器、SSL市场所做的客观严谨的分析研究，公司官网每月公布的调研数据（Web Server Survey）已成为当今人们了解全球网站数量以及服务器市场分额情况的主要参考依据，时常被诸如华尔街杂志，英国 BBC，Slashdot 等媒体报道或引用。</p></blockquote><p>我们先来看一组数据，我们先打开 Nginx 的官方网站 <a href="http://nginx.org/" target="_blank" rel="noopener">http://nginx.org/</a>，找到 Netcraft 公司公布的数据，对当前主流服务器产品进行介绍。</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.6wcjq3k197c0.webp" alt="image"></p><p>上面这张图展示了 2019 年全球主流 Web 服务器的市场情况，其中有 Apache、Microsoft-IIS、google Servers、Nginx、Tomcat 等，而我们在了解新事物的时候，往往习惯通过类比来帮助自己理解事物的概貌。可以看出绿色线的 nginx 在 2019 年已经领现全球了。</p><p>所以下面我们把几种常见的服务器来给大家简单介绍下：</p><h3 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a>IIS</h3><p>全称(Internet Information Services)即互联网信息服务，是由微软公司提供的基于 Windows 系统的互联网基本服务。Windows 作为服务器在稳定性与其他一些性能上都不如类 UNIX 操作系统，因此在需要高性能 Web 服务器的场合下，IIS 可能就会被「冷落」.</p><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><p>Tomcat是一个运行 Servlet 和 JSP 的 Web 应用软件，Tomcat 技术先进、性能稳定而且开放源代码，因此深受 Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的 Web 应用服务器。但是 Tomcat 天生是一个重量级的 Web 服务器，对静态文件和高并发的处理比较弱。</p><h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><p>Apache 的发展时期很长，同时也有过一段辉煌的业绩。从上图可以看出大概在 2014 年以前都是市场份额第一的服务器。Apache 有很多优点，如稳定、开源、跨平台等。但是它出现的时间太久了，在它兴起的年代，互联网的产业规模远远不如今天，所以它被设计成一个重量级的、不支持高并发的 Web 服务器。在 Apache 服务器上，如果有数以万计的并发 HTTP 请求同时访问，就会导致服务器上消耗大量能存，操作系统内核对成百上千的 Apache 进程做进程间切换也会消耗大量的 CPU 资源，并导致 HTTP 请求的平均响应速度降低，这些都决定了 Apache 不可能成为高性能的 Web 服务器。这也促使了 Lighttpd 和 Nginx 的出现。</p><h3 id="Lighttpd"><a href="#Lighttpd" class="headerlink" title="Lighttpd"></a>Lighttpd</h3><p>Lighttpd 是德国的一个开源的 Web 服务器软件，它和 Nginx 一样，都是轻量级、高性能的 Web 服务器，欧美的业界开发者比较钟爱 Lighttpd，而国内的公司更多的青睐 Nginx，同时网上 Nginx 的资源要更丰富些。</p><h3 id="其他的服务器"><a href="#其他的服务器" class="headerlink" title="其他的服务器"></a>其他的服务器</h3><p>Google Servers，Weblogic, Webshpere(IBM) ……</p><p>Google Servers 是闭源的，市面上很少看到。Weblogic 和 Webshpere(IBM) 使用起来都需要支付一定费用。</p><p>经过各个服务器的对比，种种迹象都表明，Nginx 将以性能为王。这也是我们为什么选择 Nginx 的理由。</p><h2 id="Nginx的优点"><a href="#Nginx的优点" class="headerlink" title="Nginx的优点"></a>Nginx的优点</h2><h3 id="速度更快、并发更高"><a href="#速度更快、并发更高" class="headerlink" title="速度更快、并发更高"></a>速度更快、并发更高</h3><p>单次请求或者高并发请求的环境下，Nginx 都会比其他 Web 服务器响应的速度更快。一方面在正常情况下，单次请求会得到更快的响应，另一方面，在高峰期(如有数以万计的并发请求)，Nginx 比其他 Web 服务器更快的响应请求。Nginx 之所以有这么高的并发处理能力和这么好的性能原因在于 Nginx 采用了多进程和 I/O 多路复用(epoll)的底层实现。</p><h3 id="配置简单，扩展性强"><a href="#配置简单，扩展性强" class="headerlink" title="配置简单，扩展性强"></a>配置简单，扩展性强</h3><p>Nginx 的设计极具扩展性，它本身就是由很多模块组成，这些模块的使用可以通过配置文件的配置来添加。这些模块有官方提供的也有第三方提供的模块，如果需要完全可以开发服务自己业务特性的定制模块</p><h3 id="高可靠性"><a href="#高可靠性" class="headerlink" title="高可靠性"></a>高可靠性</h3><p>Nginx 采用的是多进程模式运行，其中有一个 master 主进程和 N 多个 worker 进程，一个 master 管理多个 worker，worker 进程的数量我们可以手动设置，每个 worker 进程之间都是相互独立提供服务，并且 master 主进程可以在某一个 worker 进程出错时，快速去「拉起」新的 worker 进程提供服务。</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.3wz8th685620.webp" alt="image"></p><h3 id="热部署-核心"><a href="#热部署-核心" class="headerlink" title="热部署(核心)"></a>热部署(核心)</h3><p>现在互联网项目都要求以 7 * 24 小时进行服务的提供，针对于这一要求，Nginx 也提供了热部署功能，即可以在 Nginx 不停止的情况下，对 Nginx 进行文件升级、更新配置和更换日志文件等功能。</p><h3 id="成本低、BSD许可证"><a href="#成本低、BSD许可证" class="headerlink" title="成本低、BSD许可证"></a>成本低、BSD许可证</h3><p>BSD 是一个开源的许可证，世界上的开源许可证有很多，现在比较流行的有六种分别是 GPL、BSD、MIT、Mozilla、Apache、LGPL。这六种的区别是什么，我们可以通过下面一张图来解释下：</p><p><img src="https://cdn.staticaly.com/gh/xustudyxu/image-hosting1@master/20220727/image.771jinl18hw0.webp" alt="image"></p><h2 id="Nginx的功能特性及常用功能"><a href="#Nginx的功能特性及常用功能" class="headerlink" title="Nginx的功能特性及常用功能"></a>Nginx的功能特性及常用功能</h2><p>Nginx 提供的基本功能服务从大体上归纳为「基本 HTTP 服务」、「高级 HTTP 服务」和「邮件服务」等三大类。</p><h3 id="基本HTTP服务"><a href="#基本HTTP服务" class="headerlink" title="基本HTTP服务"></a>基本HTTP服务</h3><p>Nginx 可以提供基本 HTTP 服务，可以作为 HTTP 代理服务器和反向代理服务器，支持通过缓存加速访问，可以完成简单的负载均衡和容错，支持包过滤功能，支持 SSL 等。</p><ul><li>处理静态文件、处理索引文件以及支持自动索引</li><li>提供反向代理服务器，并可以使用缓存加上反向代理，同时完成负载均衡和容错</li><li>提供对 FastCGI、memcached 等服务的缓存机制，，同时完成负载均衡和容错</li><li>使用 Nginx 的模块化特性提供过滤器功能。Nginx 基本过滤器包括 gzip 压缩、ranges 支持、chunked 响应、XSLT、SSI 以及图像缩放等。其中针对包含多个 SSI 的页面，经由 FastCGI 或反向代理，SSI 过滤器可以并行处理</li><li>支持 HTTP 下的安全套接层安全协议 SSL.</li><li>支持基于加权和依赖的优先权的 HTTP/2</li></ul><h3 id="高级HTTP服务"><a href="#高级HTTP服务" class="headerlink" title="高级HTTP服务"></a>高级HTTP服务</h3><ul><li>支持基于名字和 IP 的虚拟主机设置</li><li>支持 HTTP/1.0 中的 KEEP-Alive 模式和管线(PipeLined)模型连接</li><li>自定义访问日志格式、带缓存的日志写操作以及快速日志轮转</li><li>提供 3xx~5xx 错误代码重定向功能</li><li>支持重写（Rewrite)模块扩展</li><li>支持重新加载配置以及在线升级时无需中断正在处理的请求</li><li>支持网络监控</li><li>支持 FLV 和 MP4 流媒体传输</li></ul><h3 id="邮件服务"><a href="#邮件服务" class="headerlink" title="邮件服务"></a>邮件服务</h3><p>Nginx 提供邮件代理服务也是其基本开发需求之一，主要包含以下特性：</p><ul><li>支持 IMPA/POP3 代理服务功能</li><li>支持内部 SMTP 代理服务功能</li></ul><h3 id="Nginx常用的功能模块"><a href="#Nginx常用的功能模块" class="headerlink" title="Nginx常用的功能模块"></a>Nginx常用的功能模块</h3><ul><li>静态资源部署：核心功能</li><li>Rewrite 地址重写：用到正则表达式</li><li>反向代理</li><li>负载均衡：轮询、加权轮询、ip_hash、url_hash、fair 等算法</li><li>Web 缓存</li><li>环境部署：搭建高可用的环境</li><li>用户认证模块 …</li><li>Nginx 的核心组成<ul><li>nginx 二进制可执行文件（启动、关闭、加载 Nginx）</li><li>nginx.conf 配置文件</li><li>error.log 错误的日志记录</li><li>access.log 访问日志记录</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Nginx </tag>
            
            <tag> 中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正向代理与反向代理</title>
      <link href="/2022/11/08/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
      <url>/2022/11/08/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><a href="https://imgse.com/i/xxKjxS" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2022/11/08/xxKjxS.jpg" alt="xxKjxS.jpg"></a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Web服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TS知识点总结</title>
      <link href="/2022/11/03/09_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-ts/"/>
      <url>/2022/11/03/09_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-ts/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><h3 id="1-动态类型的问题"><a href="#1-动态类型的问题" class="headerlink" title="1) 动态类型的问题"></a>1) 动态类型的问题</h3><p>前面讲过 js 属于动态类型语言，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">obj</span>) </span>&#123;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>obj 可能只是个字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">'hello, world'</span>)</span><br></pre></td></tr></table></figure><p>obj 也有可能是个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(<span class="string">'hello, world'</span>))</span><br></pre></td></tr></table></figure><p>obj 类型不确定，就给后期使用者带来了麻烦，一旦参数传不对，代码就崩溃了</p><p>动态类型意味着</p><ul><li>运行代码时才知道发生什么 (running the code to see what happens)</li></ul><p>静态类型意味着</p><ul><li>在代码运行前，就对它的行为做出预测 (make predications about what code is expected before it runs)</li></ul><p>下面的 typescript 代码，就在代码运行前对参数加入了约束限制</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">msg : <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>限制了参数只能做 string 那些事</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">msg : <span class="built_in">Function</span></span>) </span>&#123;</span><br><span class="line">  msg()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>限制了参数只能做函数那些事</li></ul><h3 id="2-入门"><a href="#2-入门" class="headerlink" title="2) 入门"></a>2) 入门</h3><p>安装 typescript 编译器</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure><p>编写 ts 代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">msg: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(msg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hello(<span class="string">'hello,world'</span>)</span><br></pre></td></tr></table></figure><p>执行 tsc 编译命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc xxx.ts</span><br></pre></td></tr></table></figure><p>编译生成 js 代码，编译后进行了类型擦除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;</span><br><span class="line">hello(<span class="string">'hello,world'</span>);</span><br></pre></td></tr></table></figure><p>再来一个例子，用 interface 定义用户类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line">  name: <span class="built_in">string</span>,</span><br><span class="line">  age: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">u: User</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(u.name)</span><br><span class="line">  <span class="built_in">console</span>.log(u.age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(&#123; name: <span class="string">'zhangs'</span>, age: <span class="number">18</span> &#125;)</span><br></pre></td></tr></table></figure><p>编译后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">u</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(u.name);</span><br><span class="line">    <span class="built_in">console</span>.log(u.age);</span><br><span class="line">&#125;</span><br><span class="line">test(&#123; <span class="attr">name</span>: <span class="string">'zhangs'</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;);</span><br></pre></td></tr></table></figure><p>可见，typescript 属于编译时实施类型检查（静态类型）的技术</p><h3 id="3-类型"><a href="#3-类型" class="headerlink" title="3) 类型"></a>3) 类型</h3><table><thead><tr><th>类型</th><th>例</th><th>备注</th></tr></thead><tbody><tr><td>字符串类型</td><td>string</td><td></td></tr><tr><td>数字类型</td><td>number</td><td></td></tr><tr><td>布尔类型</td><td>boolean</td><td></td></tr><tr><td>数组类型</td><td>number[],string[], boolean[] 依此类推</td><td></td></tr><tr><td>任意类型</td><td>any</td><td>相当于又回到了没有类型的时代</td></tr><tr><td>复杂类型</td><td>type 与 interface</td><td></td></tr><tr><td>函数类型</td><td>() =&gt; void</td><td>对函数的参数和返回值进行说明</td></tr><tr><td>字面量类型</td><td>“a”|”b”|”c”</td><td>限制变量或参数的取值</td></tr><tr><td>nullish类型</td><td>null 与 undefined</td><td></td></tr><tr><td>泛型</td><td><code>&lt;T&gt;</code>，<code>&lt;T extends 父类型&gt;</code></td><td></td></tr></tbody></table><h4 id="标注位置"><a href="#标注位置" class="headerlink" title="标注位置"></a>标注位置</h4><h5 id="标注变量"><a href="#标注变量" class="headerlink" title="标注变量"></a>标注变量</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message: <span class="built_in">string</span> = <span class="string">'hello,world'</span></span><br></pre></td></tr></table></figure><ul><li>一般可以省略，因为可以根据后面的字面量推断出前面变量类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">'hello,world'</span></span><br></pre></td></tr></table></figure><h5 id="标注参数"><a href="#标注参数" class="headerlink" title="标注参数"></a>标注参数</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">name: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很多时候，都能够推断出参数类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> names = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Eve'</span>]</span><br><span class="line"><span class="keyword">const</span> lowercaseNames = names.map(<span class="function">(<span class="params">e: <span class="built_in">string</span></span>) =&gt;</span> e.toLowerCase())</span><br></pre></td></tr></table></figure><ul><li>可以用类型推断，推断出 e 是 string 类型</li></ul><h5 id="标注返回值"><a href="#标注返回值" class="headerlink" title="标注返回值"></a>标注返回值</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) : <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一般也可以省略，因为可以根据返回值做类型推断</li></ul><h4 id="复杂类型"><a href="#复杂类型" class="headerlink" title="复杂类型"></a>复杂类型</h4><h5 id="type"><a href="#type" class="headerlink" title="type"></a>type</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Cat = &#123;</span><br><span class="line">  name: <span class="built_in">string</span>,</span><br><span class="line">  age: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c1: Cat = &#123; name: <span class="string">'小白'</span>, age: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">const</span> c2: Cat = &#123; name: <span class="string">'小花'</span> &#125;  <span class="comment">// 错误: 缺少 age 属性</span></span><br><span class="line"><span class="keyword">const</span> c3: Cat = &#123; name: <span class="string">'小黑'</span>, age: <span class="number">1</span>, sex: <span class="string">'公'</span> &#125; <span class="comment">// 错误: 多出 sex 属性</span></span><br></pre></td></tr></table></figure><h5 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Cat &#123;</span><br><span class="line">  name: <span class="built_in">string</span>,</span><br><span class="line">  age: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c1: Cat = &#123; name: <span class="string">'小白'</span>, age: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">const</span> c2: Cat = &#123; name: <span class="string">'小花'</span> &#125;  <span class="comment">// 错误: 缺少 age 属性</span></span><br><span class="line"><span class="keyword">const</span> c3: Cat = &#123; name: <span class="string">'小黑'</span>, age: <span class="number">1</span>, sex: <span class="string">'公'</span> &#125; <span class="comment">// 错误: 多出 sex 属性</span></span><br></pre></td></tr></table></figure><h5 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h5><p>如果需要某个属性可选，可以用下面的语法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Cat &#123;</span><br><span class="line">  name: <span class="built_in">string</span>,</span><br><span class="line">  age?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c1: Cat = &#123; name: <span class="string">'小白'</span>, age: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">const</span> c2: Cat = &#123; name: <span class="string">'小花'</span> &#125;  <span class="comment">// 正确: age 属性可选</span></span><br></pre></td></tr></table></figure><ul><li>可选属性要注意处理 undefined 值</li></ul><h5 id="鸭子类型"><a href="#鸭子类型" class="headerlink" title="鸭子类型"></a>鸭子类型</h5><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Cat &#123;</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">cat: Cat</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(cat.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c1 = &#123; name: <span class="string">'小白'</span>, age: <span class="number">1</span> &#125; </span><br><span class="line">test(c1)</span><br></pre></td></tr></table></figure><ul><li>const c1 并没有声明类型为 Cat，但它与 Cat 类型有一样的属性，也可以被当作是 Cat 类型</li></ul><h4 id="方法类型"><a href="#方法类型" class="headerlink" title="方法类型"></a>方法类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Api &#123;</span><br><span class="line">  foo(): <span class="built_in">void</span>,</span><br><span class="line">  bar(str: <span class="built_in">string</span>): <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">api: Api</span>) </span>&#123;</span><br><span class="line">  api.foo()</span><br><span class="line">  <span class="built_in">console</span>.log(api.bar(<span class="string">'hello'</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(&#123;</span><br><span class="line">  foo() &#123; <span class="built_in">console</span>.log(<span class="string">'ok'</span>) &#125;,</span><br><span class="line">  bar(str: <span class="built_in">string</span>) &#123; <span class="keyword">return</span> str.toUpperCase() &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printText</span>(<span class="params">s: <span class="built_in">string</span>, alignment: "left" | "right" | "center"</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(s, alignment)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printText(<span class="string">'hello'</span>, <span class="string">'left'</span>)</span><br><span class="line">printText(<span class="string">'hello'</span>, <span class="string">'aaa'</span>) <span class="comment">// 错误: 取值只能是 left | right | center</span></span><br></pre></td></tr></table></figure><h4 id="nullish-类型"><a href="#nullish-类型" class="headerlink" title="nullish 类型"></a>nullish 类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">x?: <span class="built_in">string</span> | <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x?.toUpperCase())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="string">'aaa'</span>)</span><br><span class="line">test(<span class="literal">null</span>)</span><br><span class="line">test()</span><br></pre></td></tr></table></figure><ul><li>x?: string | null 表示可能是 undefined 或者是 string 或者是 null</li></ul><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><p>下面的几个类型声明显然有一定的相似性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> RefString &#123;</span><br><span class="line">  value: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> RefNumber &#123;</span><br><span class="line">  value: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> RefBoolean &#123;</span><br><span class="line">  value: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> r1: RefString = &#123; value: <span class="string">'hello'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> r2: RefNumber = &#123; value: <span class="number">123</span> &#125;</span><br><span class="line"><span class="keyword">const</span> r3: RefBoolean = &#123; value: <span class="literal">true</span> &#125;</span><br></pre></td></tr></table></figure><p>可以改进为</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Ref&lt;T&gt; &#123;</span><br><span class="line">  value: T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> r1: Ref&lt;<span class="built_in">string</span>&gt; = &#123; value: <span class="string">'hello'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> r2: Ref&lt;<span class="built_in">number</span>&gt; = &#123; value: <span class="number">123</span> &#125;</span><br><span class="line"><span class="keyword">const</span> r3: Ref&lt;<span class="built_in">boolean</span>&gt; = &#123; value: <span class="literal">true</span> &#125;</span><br></pre></td></tr></table></figure><ul><li>泛型的要点就是 <code>&lt;类型参数&gt;</code>，把【类型】也当作一个变化的要素，像参数一样传递过来，这样就可以派生出结构相似的新类型</li></ul><p>函数定义也支持泛型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ref</span>&lt;<span class="title">T</span>&gt;(<span class="params">n: T</span>): <span class="title">Ref</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; value: n &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> v1 = ref(<span class="string">"hello"</span>); <span class="comment">// Ref&lt;string&gt;</span></span><br><span class="line"><span class="keyword">const</span> v2 = ref(<span class="number">123.3333</span>);<span class="comment">// Ref&lt;number&gt;</span></span><br><span class="line"></span><br><span class="line">v1.value.toLocaleLowerCase()</span><br><span class="line">v2.value.toFixed(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="4-意义"><a href="#4-意义" class="headerlink" title="4) 意义"></a>4) 意义</h3><h4 id="更好理解框架"><a href="#更好理解框架" class="headerlink" title="更好理解框架"></a>更好理解框架</h4><p>现在越来越多的前端框架采用 typescript，如果懂 typescript 语法，可以更好地阅读框架代码</p><p>以 Map 为例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> Map&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;()</span><br><span class="line">map</span><br><span class="line">  .set(<span class="string">"a"</span>, <span class="string">"b"</span>)</span><br><span class="line">  .set(<span class="string">"c"</span>, <span class="string">"d"</span>)</span><br><span class="line"></span><br><span class="line">map.forEach(<span class="function">(<span class="params">value,key,m</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value, key)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>注意编译需要 <code>tsc --target es6 .\xxx.ts</code></li></ul><h4 id="更好的提示"><a href="#更好的提示" class="headerlink" title="更好的提示"></a>更好的提示</h4><p>例如，从服务器返回的一段 json，如果不用 typescript，则编辑器也不能给出准确的提示</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line">  name: <span class="built_in">string</span>,</span><br><span class="line">  age: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user: User = <span class="built_in">JSON</span>.parse(<span class="string">`&#123; "name":"张三", "age":18 &#125;`</span>)</span><br></pre></td></tr></table></figure><h3 id="5-类"><a href="#5-类" class="headerlink" title="5) 类"></a>5) 类</h3><blockquote><p>关于 TypeScript 与 JavaScript 中的类语法不是重点，class 相关语法只是起到辅助作用，更重要的是前面讲的 interface</p></blockquote><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> User &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> u = <span class="keyword">new</span> User(<span class="string">'张三'</span>)</span><br></pre></td></tr></table></figure><p>其实会被编译成这个样子（默认 –target=es3）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> User = <span class="comment">/** @class */</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> User;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="keyword">var</span> u = <span class="keyword">new</span> User(<span class="string">'张三'</span>);</span><br></pre></td></tr></table></figure><p>所以 js 中的 class，并不等价于 java 中的 class，它还是基于原型实现的，原理参考第二章（036、037）</p><h4 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> User &#123;</span><br><span class="line">  readonly name: <span class="built_in">string</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> u = <span class="keyword">new</span> User(<span class="string">'张三'</span>)</span><br><span class="line">u.name = <span class="string">'李四'</span><span class="comment">// 编译错误</span></span><br></pre></td></tr></table></figure><ul><li>readonly 是 typescript 特有的，表示该属性只读</li></ul><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> User &#123;</span><br><span class="line">  readonly name: <span class="built_in">string</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  study() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`[<span class="subst">$&#123;this.name&#125;</span>]正在学习`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> u = <span class="keyword">new</span> User(<span class="string">'张三'</span>)</span><br><span class="line">u.study()</span><br></pre></td></tr></table></figure><h4 id="get，set"><a href="#get，set" class="headerlink" title="get，set"></a>get，set</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> User &#123;</span><br><span class="line">  _name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>._name = name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> name() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> name(name: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>._name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> u = <span class="keyword">new</span> User(<span class="string">'张三'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(u.name)</span><br><span class="line">u.name = <span class="string">'李四'</span></span><br><span class="line"><span class="built_in">console</span>.log(u.name)</span><br></pre></td></tr></table></figure><ul><li>注意，需要在编译时加上 <code>tsc --target es6 .\xxx.ts</code> 选项</li><li>es6 等价于 es2015，再此之上还有 es2016 … es2022</li></ul><h4 id="类与接口"><a href="#类与接口" class="headerlink" title="类与接口"></a>类与接口</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">  study(course: <span class="built_in">string</span>): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> UserImpl <span class="keyword">implements</span> User &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  study(course: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`[<span class="subst">$&#123;this.name&#125;</span>]正在学习[<span class="subst">$&#123;course&#125;</span>]`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  foo() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user: User = <span class="keyword">new</span> UserImpl(<span class="string">'张三'</span>)</span><br><span class="line">user.study(<span class="string">'Typescript'</span>)</span><br><span class="line">user.foo() <span class="comment">// 错误，必须是接口中定义的方法</span></span><br></pre></td></tr></table></figure><h4 id="继承与接口"><a href="#继承与接口" class="headerlink" title="继承与接口"></a>继承与接口</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Flyable &#123;</span><br><span class="line">  fly(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Bird <span class="keyword">extends</span> Animal <span class="keyword">implements</span> Flyable &#123;</span><br><span class="line">  fly() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;this.name&#125;</span>在飞翔`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b: Flyable &amp; Animal = <span class="keyword">new</span> Bird(<span class="string">"小花"</span>)</span><br><span class="line">b.fly()</span><br></pre></td></tr></table></figure><ul><li>Flyable &amp; Animal 表示变量是 flyable 类型，同时也是 Animal 类型</li></ul><h4 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Father &#123;</span><br><span class="line">  study(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`father study`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Son <span class="keyword">extends</span> Father &#123;  </span><br><span class="line">  study(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.study()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`son study`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f: Father = <span class="keyword">new</span> Son()</span><br><span class="line">f.study()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Typescript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2知识点总结</title>
      <link href="/2022/11/03/09_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-vue2/"/>
      <url>/2022/11/03/09_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-vue2/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="Vue-2"><a href="#Vue-2" class="headerlink" title="Vue 2"></a>Vue 2</h1><h2 id="1-Vue-基础"><a href="#1-Vue-基础" class="headerlink" title="1. Vue 基础"></a>1. Vue 基础</h2><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1) 环境准备"></a>1) 环境准备</h3><h4 id="安装脚手架"><a href="#安装脚手架" class="headerlink" title="安装脚手架"></a>安装脚手架</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><ul><li>-g 参数表示全局安装，这样在任意目录都可以使用 vue 脚本创建项目</li></ul><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure><h4 id="安装-devtools"><a href="#安装-devtools" class="headerlink" title="安装 devtools"></a>安装 devtools</h4><ul><li>devtools 插件网址：<a href="https://devtools.vuejs.org/guide/installation.html" target="_blank" rel="noopener">https://devtools.vuejs.org/guide/installation.html</a></li></ul><h4 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h4><p>进入项目目录，执行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h4 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h4><p>前端服务器默认占用了 8080 端口，需要修改一下</p><ul><li><p>文档地址：<a href="https://webpack.js.org/configuration/dev-server/#devserverport" target="_blank" rel="noopener">DevServer | webpack</a></p></li><li><p>打开 vue.config.js 添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">'@vue/cli-service'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = defineConfig(&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: <span class="number">7070</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="添加代理"><a href="#添加代理" class="headerlink" title="添加代理"></a>添加代理</h4><p>为了避免前后端服务器联调时， fetch、xhr 请求产生跨域问题，需要配置代理</p><ul><li><p>文档地址同上</p></li><li><p>打开 vue.config.js 添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">'@vue/cli-service'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = defineConfig(&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: <span class="number">7070</span>,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">'/api'</span>: &#123;</span><br><span class="line">        target: <span class="string">'http://localhost:8080'</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="Vue-项目结构"><a href="#Vue-项目结构" class="headerlink" title="Vue 项目结构"></a>Vue 项目结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PS D:\2022.js\代码\第3章\client&gt; tree src</span><br><span class="line">D:\2022.JS\代码\第3章\CLIENT\SRC</span><br><span class="line">├─assets</span><br><span class="line">├─components</span><br><span class="line">├─router</span><br><span class="line">├─store</span><br><span class="line">└─views</span><br></pre></td></tr></table></figure><ul><li>assets - 静态资源</li><li>components - 可重用组件</li><li>router - 路由</li><li>store - 数据共享</li><li>views - 视图组件</li></ul><p>以后还会添加</p><ul><li>api - 跟后台交互，发送 fetch、xhr 请求，接收响应</li><li>plugins - 插件</li></ul><h3 id="2-Vue-组件"><a href="#2-Vue-组件" class="headerlink" title="2) Vue 组件"></a>2) Vue 组件</h3><p>Vue 的组件文件以 .vue 结尾，每个组件由三部分组成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>template 模板部分，由它生成 html 代码</li><li>script 代码部分，控制模板的数据来源和行为</li><li>style 样式部分，一般不咋关心</li></ul><p>入口组件是 App.vue</p><p>先删除原有代码，来个 Hello, World 例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &quot;Hello, Vue!&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>解释</p><ul><li>export default 导出组件对象，供 main.js 导入使用</li><li>这个对象有一个 data 方法，返回一个<strong>对象</strong>，给 template 提供数据</li><li>双括号 在 Vue 里称之为插值表达式，用来<strong>绑定</strong> data 方法返回的<strong>对象</strong>属性，<strong>绑定</strong>的含义是数据发生变化时，页面显示会同步变化</li></ul><h4 id="文本插值"><a href="#文本插值" class="headerlink" title="文本插值"></a>文本插值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123; name &#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123; age &gt; 60 ? &apos;老年&apos; : &apos;青年&apos; &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">const options = &#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">        return &#123; name: &apos;张三&apos;, age: 70 &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>双括号 里只能绑定一个属性，绑定多个属性需要用多个 双括号 分别绑定</li><li>template 内只能有一个根元素</li><li>插值内可以进行简单的表达式计算</li></ul><h4 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;input type=&quot;text&quot; v-bind:value=&quot;name&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&lt;input type=&quot;date&quot; v-bind:value=&quot;birthday&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&lt;input type=&quot;text&quot; :value=&quot;age&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">const options = &#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">        return &#123; name: &apos;王五&apos;, birthday: &apos;1995-05-01&apos;, age: 20 &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>简写方式：可以省略 v-bind 只保留冒号</li></ul><h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 事件绑定 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;input type=&quot;button&quot; value=&quot;点我执行m1&quot; v-on:click=&quot;m1&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&lt;input type=&quot;button&quot; value=&quot;点我执行m2&quot; @click=&quot;m2&quot;&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;count&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">const options = &#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">        return &#123; count: 0 &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        m1() &#123;</span><br><span class="line">            this.count ++;</span><br><span class="line">            console.log(&quot;m1&quot;)</span><br><span class="line">        &#125;,</span><br><span class="line">        m2() &#123;</span><br><span class="line">            this.count --;</span><br><span class="line">            console.log(&quot;m2&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>简写方式：可以把 v-on: 替换为 @</li><li>在 methods 方法中的 this 代表的是 data 函数返回的数据对象</li></ul><h4 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;label for=&quot;&quot;&gt;请输入姓名&lt;/label&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;label for=&quot;&quot;&gt;请输入年龄&lt;/label&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; v-model=&quot;age&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;label for=&quot;&quot;&gt;请选择性别&lt;/label&gt;</span><br><span class="line">            男 &lt;input type=&quot;radio&quot; value=&quot;男&quot; v-model=&quot;sex&quot;&gt;</span><br><span class="line">            女 &lt;input type=&quot;radio&quot; value=&quot;女&quot; v-model=&quot;sex&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;label for=&quot;&quot;&gt;请选择爱好&lt;/label&gt;</span><br><span class="line">            游泳 &lt;input type=&quot;checkbox&quot; value=&quot;游泳&quot; v-model=&quot;fav&quot;&gt;</span><br><span class="line">            打球 &lt;input type=&quot;checkbox&quot; value=&quot;打球&quot; v-model=&quot;fav&quot;&gt;</span><br><span class="line">            健身 &lt;input type=&quot;checkbox&quot; value=&quot;健身&quot; v-model=&quot;fav&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">const options = &#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">        return &#123; name: &apos;&apos;, age: null, sex:&apos;男&apos; , fav:[&apos;打球&apos;]&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>用 v-model 实现双向绑定，即 <ul><li>javascript 数据可以同步到表单标签</li><li>反过来用户在表单标签输入的新值也会同步到 javascript 这边</li></ul></li><li>双向绑定只适用于表单这种带【输入】功能的标签，其它标签的数据绑定，单向就足够了</li><li>复选框这种标签，双向绑定的 javascript 数据类型一般用数组</li></ul><h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 计算属性 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;fullName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;fullName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123;fullName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">const options = &#123;</span><br><span class="line">    data: function () &#123;</span><br><span class="line">        return &#123; firstName: &apos;三&apos;, lastName: &apos;张&apos; &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    /* methods: &#123;</span><br><span class="line">        fullName() &#123;</span><br><span class="line">            console.log(&apos;进入了 fullName&apos;)</span><br><span class="line">            return this.lastName + this.firstName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,*/</span><br><span class="line">    computed: &#123;</span><br><span class="line">        fullName() &#123;</span><br><span class="line">            console.log(&apos;进入了 fullName&apos;)</span><br><span class="line">            return this.lastName + this.firstName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default options;</span><br></pre></td></tr></table></figure><ul><li>普通方法调用必须加 ()，没有缓存功能</li><li>计算属性使用时就把它当属性来用，不加 ()，有缓存功能：<ul><li>一次计算后，会将结果缓存，下次再计算时，只要数据没有变化，不会重新计算，直接返回缓存结果</li></ul></li></ul><h4 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h4><p>axios 它的底层是用了 XMLHttpRequest（xhr）方式发送请求和接收响应，xhr 相对于之前讲过的 fetch api 来说，功能更强大，但由于是比较老的 api，不支持 Promise，axios 对 xhr 进行了封装，使之支持 Promise，并提供了对请求、响应的统一拦截功能</p><p>安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios -S</span><br></pre></td></tr></table></figure><p>导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br></pre></td></tr></table></figure><ul><li>axios 默认导出一个对象，这里的 import 导入的就是它默认导出的对象</li></ul><p>方法</p><table><thead><tr><th>请求</th><th>备注</th></tr></thead><tbody><tr><td>axios.get(url[, config])</td><td>:star:</td></tr><tr><td>axios.delete(url[, config])</td><td></td></tr><tr><td>axios.head(url[, config])</td><td></td></tr><tr><td>axios.options(url[, config])</td><td></td></tr><tr><td>axios.post(url[, data[, config]])</td><td>:star:</td></tr><tr><td>axios.put(url[, data[, config]])</td><td></td></tr><tr><td>axios.patch(url[, data[, config]])</td><td></td></tr></tbody></table><ul><li>config - 选项对象、例如查询参数、请求头…</li><li>data - 请求体数据、最常见的是 json 格式数据</li><li>get、head 请求无法携带请求体，这应当是浏览器的限制所致（xhr、fetch api 均有限制）</li><li>options、delete 请求可以通过 config 中的 data 携带请求体</li></ul><p>例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;获取远程数据&quot; @click=&quot;sendReq()&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &apos;axios&apos;</span><br><span class="line">const options = &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        async sendReq() &#123;</span><br><span class="line">            // 1. 演示 get, post</span><br><span class="line">            // const resp = await axios.post(&apos;/api/a2&apos;);</span><br><span class="line"></span><br><span class="line">            // 2. 发送请求头</span><br><span class="line">            // const resp = await axios.post(&apos;/api/a3&apos;,&#123;&#125;,&#123;</span><br><span class="line">            //     headers:&#123;</span><br><span class="line">            //         Authorization:&apos;abc&apos;</span><br><span class="line">            //     &#125;</span><br><span class="line">            // &#125;);</span><br><span class="line"></span><br><span class="line">            // 3. 发送请求时携带查询参数 ?name=xxx&amp;age=xxx</span><br><span class="line">            // const name = encodeURIComponent(&apos;&amp;&amp;&amp;&apos;);</span><br><span class="line">            // const age = 18;</span><br><span class="line">            // const resp = await axios.post(`/api/a4?name=$&#123;name&#125;&amp;age=$&#123;age&#125;`);</span><br><span class="line"></span><br><span class="line">            // 不想自己拼串、处理特殊字符、就用下面的办法</span><br><span class="line">            // const resp = await axios.post(&apos;/api/a4&apos;, &#123;&#125;, &#123;</span><br><span class="line">            //     params: &#123;</span><br><span class="line">            //         name:&apos;&amp;&amp;&amp;&amp;&apos;,</span><br><span class="line">            //         age: 20</span><br><span class="line">            //     &#125;</span><br><span class="line">            // &#125;);</span><br><span class="line"></span><br><span class="line">            // 4. 用请求体发数据，格式为 urlencoded</span><br><span class="line">            // const params = new URLSearchParams();</span><br><span class="line">            // params.append(&quot;name&quot;, &quot;张三&quot;);</span><br><span class="line">            // params.append(&quot;age&quot;, 24)</span><br><span class="line"></span><br><span class="line">            // const resp = await axios.post(&apos;/api/a4&apos;, params);</span><br><span class="line"></span><br><span class="line">            // 5. 用请求体发数据，格式为 multipart</span><br><span class="line">            // const params = new FormData();</span><br><span class="line">            // params.append(&quot;name&quot;, &quot;李四&quot;);</span><br><span class="line">            // params.append(&quot;age&quot;, 30);</span><br><span class="line">            // const resp = await axios.post(&apos;/api/a5&apos;, params);</span><br><span class="line"></span><br><span class="line">            // 6. 用请求体发数据，格式为 json</span><br><span class="line">            const resp = await axios.post(&apos;/api/a5json&apos;, &#123;</span><br><span class="line">                name: &apos;王五&apos;,</span><br><span class="line">                age: 50</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            console.log(resp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>创建实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _axios = axios.create(config);</span><br></pre></td></tr></table></figure><ul><li>axios 对象可以直接使用，但使用的是默认的设置</li><li>用 axios.create 创建的对象，可以覆盖默认设置，config 见下面说明</li></ul><p>常见的 config 项有</p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>baseURL</td><td>将自动加在 url 前面</td></tr><tr><td>headers</td><td>请求头，类型为简单对象</td></tr><tr><td>params</td><td>跟在 URL 后的请求参数，类型为简单对象或 URLSearchParams</td></tr><tr><td>data</td><td>请求体，类型有简单对象、FormData、URLSearchParams、File 等</td></tr><tr><td>withCredentials</td><td>跨域时是否携带 Cookie 等凭证，默认为 false</td></tr><tr><td>responseType</td><td>响应类型，默认为 json</td></tr></tbody></table><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _axios = axios.create(&#123;</span><br><span class="line">    baseURL: <span class="string">'http://localhost:8080'</span>,</span><br><span class="line">    withCredentials: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">await</span> _axios.post(<span class="string">'/api/a6set'</span>)</span><br><span class="line"><span class="keyword">await</span> _axios.post(<span class="string">'/api/a6get'</span>)</span><br></pre></td></tr></table></figure><ul><li>生产环境希望 xhr 请求不走代理，可以用 baseURL 统一修改</li><li>希望跨域请求携带 cookie，需要配置 withCredentials: true，服务器也要配置 allowCredentials = true，否则浏览器获取跨域返回的 cookie 时会报错</li></ul><p>响应格式</p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>data</td><td>响应体数据 :star:</td></tr><tr><td>status</td><td>状态码 :star:</td></tr><tr><td>headers</td><td>响应头</td></tr></tbody></table><ul><li>200 表示响应成功</li><li>400 请求数据不正确 age=abc</li><li>401 身份验证没通过</li><li>403 没有权限</li><li>404 资源不存在</li><li>405 不支持请求方式 post</li><li>500 服务器内部错误</li></ul><p>请求拦截器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">_axios.interceptors.request.use(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 比如在这里添加统一的 headers</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>响应拦截器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">_axios.interceptors.response.use(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 2xx 范围内走这里</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 超出 2xx, 比如 4xx, 5xx 走这里</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;获取远程数据&quot; @click=&quot;sendReq()&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;title&quot;&gt;学生列表&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;thead&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;row bold&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;col&quot;&gt;编号&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;col&quot;&gt;姓名&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;col&quot;&gt;性别&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;col&quot;&gt;年龄&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;tbody&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;row&quot; v-if=&quot;students.length &gt; 0&quot;&gt;显示学生数据&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;row&quot; v-else&gt;暂无学生数据&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &apos;../util/myaxios&apos;</span><br><span class="line">const options = &#123;</span><br><span class="line">    data: function() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            students: []</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods : &#123;</span><br><span class="line">        async sendReq() &#123;</span><br><span class="line">            const resp = await axios.get(&quot;/api/students&quot;);</span><br><span class="line">            console.log(resp.data.data)</span><br><span class="line">            this.students = resp.data.data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    div &#123;</span><br><span class="line">        font-family: 华文行楷;</span><br><span class="line">        font-size: 20px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .title &#123;</span><br><span class="line">        margin-bottom: 10px;</span><br><span class="line">        font-size: 30px;</span><br><span class="line">        color: #333;</span><br><span class="line">        text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .row &#123;</span><br><span class="line">        background-color: #fff;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .col &#123;</span><br><span class="line">        border: 1px solid #f0f0f0;</span><br><span class="line">        width: 15%;</span><br><span class="line">        height: 35px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        line-height: 35px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .bold .col &#123;</span><br><span class="line">        background-color: #f1f1f1;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;!-- &lt;input type=&quot;button&quot; value=&quot;获取远程数据&quot; @click=&quot;sendReq()&quot;&gt; --&gt;</span><br><span class="line">        &lt;div class=&quot;title&quot;&gt;学生列表&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;thead&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;row bold&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;col&quot;&gt;编号&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;col&quot;&gt;姓名&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;col&quot;&gt;性别&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;col&quot;&gt;年龄&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;tbody&quot;&gt;</span><br><span class="line">            &lt;div v-if=&quot;students.length &gt; 0&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;row&quot; v-for=&quot;s of students&quot; :key=&quot;s.id&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;col&quot;&gt;&#123;&#123;s.id&#125;&#125;&lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;col&quot;&gt;&#123;&#123;s.name&#125;&#125;&lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;col&quot;&gt;&#123;&#123;s.sex&#125;&#125;&lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;col&quot;&gt;&#123;&#123;s.age&#125;&#125;&lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;row&quot; v-else&gt;暂无学生数据&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &apos;../util/myaxios&apos;</span><br><span class="line">const options = &#123;</span><br><span class="line">    mounted: function()&#123;</span><br><span class="line">        this.sendReq()</span><br><span class="line">    &#125;,</span><br><span class="line">    data: function() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            students: []</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods : &#123;</span><br><span class="line">        async sendReq() &#123;</span><br><span class="line">            const resp = await axios.get(&quot;/api/students&quot;);</span><br><span class="line">            console.log(resp.data.data)</span><br><span class="line">            this.students = resp.data.data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    div &#123;</span><br><span class="line">        font-family: 华文行楷;</span><br><span class="line">        font-size: 20px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .title &#123;</span><br><span class="line">        margin-bottom: 10px;</span><br><span class="line">        font-size: 30px;</span><br><span class="line">        color: #333;</span><br><span class="line">        text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .row &#123;</span><br><span class="line">        background-color: #fff;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .col &#123;</span><br><span class="line">        border: 1px solid #f0f0f0;</span><br><span class="line">        width: 15%;</span><br><span class="line">        height: 35px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        line-height: 35px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .bold .col &#123;</span><br><span class="line">        background-color: #f1f1f1;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>v-if 和 v-for 不能用于同一个标签</li><li>v-for 需要配合特殊的标签属性 key 一起使用，并且 key 属性要绑定到一个能起到唯一标识作用的数据上，本例绑定到了学生编号上</li><li>options 的 mounted 属性对应一个函数，此函数会在组件挂载后（准备就绪）被调用，可以在它内部发起请求，去获取学生数据</li></ul><h4 id="重用组件"><a href="#重用组件" class="headerlink" title="重用组件"></a>重用组件</h4><p>按钮组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;button&quot; :class=&quot;[type,size]&quot;&gt;</span><br><span class="line">        a&lt;slot&gt;&lt;/slot&gt;b</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">const options = &#123;</span><br><span class="line">    props: [&quot;type&quot;, &quot;size&quot;]</span><br><span class="line">&#125;;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>注意，省略了样式部分</li></ul><p>使用组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;父组件&lt;/h1&gt;</span><br><span class="line">        &lt;my-button type=&quot;primary&quot; size=&quot;small&quot;&gt;1&lt;/my-button&gt;</span><br><span class="line">        &lt;my-button type=&quot;danger&quot; size=&quot;middle&quot;&gt;2&lt;/my-button&gt;</span><br><span class="line">        &lt;my-button type=&quot;success&quot; size=&quot;large&quot;&gt;3&lt;/my-button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyButton from &apos;../components/MyButton.vue&apos;</span><br><span class="line">const options = &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        MyButton</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="2-Vue-进阶"><a href="#2-Vue-进阶" class="headerlink" title="2. Vue 进阶"></a>2. Vue 进阶</h2><h3 id="1-ElementUI"><a href="#1-ElementUI" class="headerlink" title="1) ElementUI"></a>1) ElementUI</h3><p>安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-ui -S</span><br></pre></td></tr></table></figure><p>引入组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Element <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Element)</span><br></pre></td></tr></table></figure><p>测试，在自己的组件中使用 ElementUI 的组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-button&gt;按钮&lt;/el-button&gt;</span><br></pre></td></tr></table></figure><h4 id="表格组件"><a href="#表格组件" class="headerlink" title="表格组件"></a>表格组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;el-table :data=&quot;students&quot;&gt;</span><br><span class="line">            &lt;el-table-column label=&quot;编号&quot; prop=&quot;id&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">            &lt;el-table-column label=&quot;姓名&quot; prop=&quot;name&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">            &lt;el-table-column label=&quot;性别&quot; prop=&quot;sex&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">            &lt;el-table-column label=&quot;年龄&quot; prop=&quot;age&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">        &lt;/el-table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &apos;../util/myaxios&apos;</span><br><span class="line">const options = &#123;</span><br><span class="line">    async mounted() &#123;</span><br><span class="line">        const resp = await axios.get(&apos;/api/students&apos;);</span><br><span class="line">        this.students = resp.data.data</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            students: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="分页组件"><a href="#分页组件" class="headerlink" title="分页组件"></a>分页组件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;el-table v-bind:data=&quot;students&quot;&gt;</span><br><span class="line">            &lt;el-table-column label=&quot;编号&quot; prop=&quot;id&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">            &lt;el-table-column label=&quot;姓名&quot; prop=&quot;name&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">            &lt;el-table-column label=&quot;性别&quot; prop=&quot;sex&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">            &lt;el-table-column label=&quot;年龄&quot; prop=&quot;age&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">        &lt;/el-table&gt;</span><br><span class="line">        &lt;el-pagination </span><br><span class="line">            :total=&quot;total&quot;</span><br><span class="line">            :page-size=&quot;queryDto.size&quot;</span><br><span class="line">            :current-page=&quot;queryDto.page&quot;</span><br><span class="line">            layout=&quot;prev,pager,next,sizes,-&gt;,total&quot;</span><br><span class="line">            :page-sizes=&quot;[5,10,15,20]&quot;</span><br><span class="line">            @current-change=&quot;currentChange&quot;</span><br><span class="line">            @size-change=&quot;sizeChange&quot;</span><br><span class="line">        &gt;&lt;/el-pagination&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &apos;../util/myaxios&apos;</span><br><span class="line">const options = &#123;</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        this.query();</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        currentChange(page) &#123;</span><br><span class="line">            this.queryDto.page = page;</span><br><span class="line">            this.query();</span><br><span class="line">        &#125;,</span><br><span class="line">        sizeChange(size)&#123;</span><br><span class="line">            this.queryDto.size = size;</span><br><span class="line">            this.query();</span><br><span class="line">        &#125;,</span><br><span class="line">        async query() &#123;</span><br><span class="line">            const resp = await axios.get(&apos;/api/students/q&apos;, &#123;</span><br><span class="line">                params: this.queryDto</span><br><span class="line">            &#125;);</span><br><span class="line">            this.students = resp.data.data.list;</span><br><span class="line">            this.total = resp.data.data.total;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            students: [],</span><br><span class="line">            total: 0,</span><br><span class="line">            queryDto: &#123;</span><br><span class="line">                page: 1,</span><br><span class="line">                size: 5</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>三种情况都应该触发查询<ul><li>mounted 组件挂载完成后</li><li>页号变化时</li><li>页大小变化时</li></ul></li><li>查询传参应该根据后台需求，灵活采用不同方式<ul><li>本例中因为是 get 请求，无法采用请求体，只能用 params 方式传参</li></ul></li><li>返回响应的格式也许会很复杂，需要掌握【根据返回的响应结构，获取数据】的能力</li></ul><h4 id="分页搜索"><a href="#分页搜索" class="headerlink" title="分页搜索"></a>分页搜索</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;el-input placeholder=&quot;请输入姓名&quot; size=&quot;mini&quot; v-model=&quot;queryDto.name&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;el-select placeholder=&quot;请选择性别&quot; size=&quot;mini&quot; v-model=&quot;queryDto.sex&quot; clearable&gt;</span><br><span class="line">            &lt;el-option value=&quot;男&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">            &lt;el-option value=&quot;女&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">        &lt;/el-select&gt;</span><br><span class="line">        &lt;el-select placeholder=&quot;请选择年龄&quot; size=&quot;mini&quot; v-model=&quot;queryDto.age&quot; clearable&gt;</span><br><span class="line">            &lt;el-option value=&quot;0,20&quot; label=&quot;0到20岁&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">            &lt;el-option value=&quot;21,30&quot; label=&quot;21到30岁&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">            &lt;el-option value=&quot;31,40&quot; label=&quot;31到40岁&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">            &lt;el-option value=&quot;41,120&quot; label=&quot;41到120岁&quot;&gt;&lt;/el-option&gt;</span><br><span class="line">        &lt;/el-select&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot; @click=&quot;search()&quot;&gt;搜索&lt;/el-button&gt;</span><br><span class="line">        &lt;el-divider&gt;&lt;/el-divider&gt;</span><br><span class="line">        &lt;el-table v-bind:data=&quot;students&quot;&gt;</span><br><span class="line">            &lt;el-table-column label=&quot;编号&quot; prop=&quot;id&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">            &lt;el-table-column label=&quot;姓名&quot; prop=&quot;name&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">            &lt;el-table-column label=&quot;性别&quot; prop=&quot;sex&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">            &lt;el-table-column label=&quot;年龄&quot; prop=&quot;age&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">        &lt;/el-table&gt;</span><br><span class="line">        &lt;el-pagination :total=&quot;total&quot; :page-size=&quot;queryDto.size&quot; :current-page=&quot;queryDto.page&quot;</span><br><span class="line">            layout=&quot;prev,pager,next,sizes,-&gt;,total&quot; :page-sizes=&quot;[5, 10, 15, 20]&quot; @current-change=&quot;currentChange&quot;</span><br><span class="line">            @size-change=&quot;sizeChange&quot;&gt;&lt;/el-pagination&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &apos;../util/myaxios&apos;</span><br><span class="line">const options = &#123;</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        this.query();</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        currentChange(page) &#123;</span><br><span class="line">            this.queryDto.page = page;</span><br><span class="line">            this.query();</span><br><span class="line">        &#125;,</span><br><span class="line">        sizeChange(size) &#123;</span><br><span class="line">            this.queryDto.size = size;</span><br><span class="line">            this.query();</span><br><span class="line">        &#125;,</span><br><span class="line">        async query() &#123;</span><br><span class="line">            const resp = await axios.get(&apos;/api/students/q&apos;, &#123;</span><br><span class="line">                params: this.queryDto</span><br><span class="line">            &#125;);</span><br><span class="line">            this.students = resp.data.data.list;</span><br><span class="line">            this.total = resp.data.data.total;</span><br><span class="line">        &#125;,</span><br><span class="line">        search() &#123;</span><br><span class="line">            this.query();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            students: [],</span><br><span class="line">            total: 0,</span><br><span class="line">            queryDto: &#123;</span><br><span class="line">                name: &apos;&apos;,</span><br><span class="line">                sex: &apos;&apos;,</span><br><span class="line">                age: &apos;&apos;,  </span><br><span class="line">                page: 1,</span><br><span class="line">                size: 5</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>sex 与  age 均用 <code>&#39;&#39;</code> 表示用户没有选择的情况</li><li>age 取值 <code>0,20</code> 会被 spring 转换为 <code>new int[]{0, 20}</code></li><li>age 取值 <code>&#39;&#39;</code> 会被 spring 转换为 <code>new int[0]</code></li></ul><h4 id="级联选择"><a href="#级联选择" class="headerlink" title="级联选择"></a>级联选择</h4><p>级联选择器中选项的数据结构为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;<span class="attr">value</span>:<span class="number">100</span>, <span class="attr">label</span>:<span class="string">'主页'</span>,<span class="attr">children</span>:[</span><br><span class="line">        &#123;<span class="attr">value</span>:<span class="number">101</span>, <span class="attr">label</span>:<span class="string">'菜单1'</span>, <span class="attr">children</span>:[</span><br><span class="line">            &#123;<span class="attr">value</span>:<span class="number">105</span>, <span class="attr">label</span>:<span class="string">'子项1'</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">value</span>:<span class="number">106</span>, <span class="attr">label</span>:<span class="string">'子项2'</span>&#125;</span><br><span class="line">        ]&#125;,</span><br><span class="line">        &#123;<span class="attr">value</span>:<span class="number">102</span>, <span class="attr">label</span>:<span class="string">'菜单2'</span>, <span class="attr">children</span>:[</span><br><span class="line">            &#123;<span class="attr">value</span>:<span class="number">107</span>, <span class="attr">label</span>:<span class="string">'子项3'</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">value</span>:<span class="number">108</span>, <span class="attr">label</span>:<span class="string">'子项4'</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">value</span>:<span class="number">109</span>, <span class="attr">label</span>:<span class="string">'子项5'</span>&#125;</span><br><span class="line">        ]&#125;,</span><br><span class="line">        &#123;<span class="attr">value</span>:<span class="number">103</span>, <span class="attr">label</span>:<span class="string">'菜单3'</span>, <span class="attr">children</span>:[</span><br><span class="line">            &#123;<span class="attr">value</span>:<span class="number">110</span>, <span class="attr">label</span>:<span class="string">'子项6'</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">value</span>:<span class="number">111</span>, <span class="attr">label</span>:<span class="string">'子项7'</span>&#125;</span><br><span class="line">        ]&#125;,</span><br><span class="line">        &#123;<span class="attr">value</span>:<span class="number">104</span>, <span class="attr">label</span>:<span class="string">'菜单4'</span>&#125;</span><br><span class="line">    ]&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>下面的例子是将后端返回的一维数组【树化】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;el-cascader :options=&quot;ops&quot;&gt;&lt;/el-cascader&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &apos;../util/myaxios&apos;</span><br><span class="line">const options = &#123;</span><br><span class="line">    async mounted() &#123;</span><br><span class="line">        const resp = await axios.get(&apos;/api/menu&apos;)</span><br><span class="line">        console.log(resp.data.data)</span><br><span class="line">        const array = resp.data.data;</span><br><span class="line"></span><br><span class="line">        const map = new Map(); </span><br><span class="line"></span><br><span class="line">        // 1. 将所有数据存入 map 集合(为了接下来查找效率)</span><br><span class="line">        for(const &#123;id,name,pid&#125; of array) &#123;</span><br><span class="line">            map.set(id, &#123;value:id, label:name, pid:pid&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        // 2. 建立父子关系</span><br><span class="line">        // 3. 找到顶层对象</span><br><span class="line">        const top = [];</span><br><span class="line">        for(const obj of map.values()) &#123;</span><br><span class="line">            const parent = map.get(obj.pid);</span><br><span class="line">            if(parent !== undefined) &#123;</span><br><span class="line">                parent.children ??= [];</span><br><span class="line">                parent.children.push(obj);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                top.push(obj)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        this.ops = top;</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            ops: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="2-Vue-Router"><a href="#2-Vue-Router" class="headerlink" title="2) Vue-Router"></a>2) Vue-Router</h3><p>vue 属于单页面应用，所谓的路由，就是根据浏览器路径不同，用不同的<strong>视图组件</strong>替换这个页面内容展示</p><h4 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h4><p>新建一个路由 js 文件，例如 src/router/example14.js，内容如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> ContainerView <span class="keyword">from</span> <span class="string">'@/views/example14/ContainerView.vue'</span></span><br><span class="line"><span class="keyword">import</span> LoginView <span class="keyword">from</span> <span class="string">'@/views/example14/LoginView.vue'</span></span><br><span class="line"><span class="keyword">import</span> NotFoundView <span class="keyword">from</span> <span class="string">'@/views/example14/NotFoundView.vue'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path:<span class="string">'/'</span>,</span><br><span class="line">    component: ContainerView</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path:<span class="string">'/login'</span>,</span><br><span class="line">    component: LoginView</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path:<span class="string">'/404'</span>,</span><br><span class="line">    component: NotFoundView</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><ul><li>最重要的就是建立了【路径】与【视图组件】之间的映射关系</li><li>本例中映射了 3 个路径与对应的视图组件</li></ul><p>在 main.js 中采用我们的路由 js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> e14 <span class="keyword">from</span> <span class="string">'./views/Example14View.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router/example14'</span>  <span class="comment">// 修改这里</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"><span class="keyword">import</span> Element <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Vue.use(Element)</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(e14)</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p>根组件是 Example14View.vue，内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;all&quot;&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>样式略</li><li>其中 <code>&lt;router-view&gt;</code> 起到占位作用，改变路径后，这个路径对应的视图组件就会占据 <code>&lt;router-view&gt;</code> 的位置，替换掉它之前的内容</li></ul><h4 id="动态导入"><a href="#动态导入" class="headerlink" title="动态导入"></a>动态导入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path:<span class="string">'/'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/example14/ContainerView.vue'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path:<span class="string">'/login'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/example14/LoginView.vue'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path:<span class="string">'/404'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/example14/NotFoundView.vue'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><ul><li>静态导入是将所有组件的 js 代码打包到一起，如果组件非常多，打包后的 js 文件会很大，影响页面加载速度</li><li>动态导入是将组件的 js 代码放入独立的文件，用到时才加载</li></ul><h4 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h4><p>组件内再要切换内容，就需要用到嵌套路由（子路由），下面的例子是在【ContainerView 组件】内定义了 3 个子路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path:<span class="string">'/'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/example14/ContainerView.vue'</span>),</span><br><span class="line">    redirect: <span class="string">'/c/p1'</span>,</span><br><span class="line">    children: [</span><br><span class="line">      &#123; </span><br><span class="line">        path:<span class="string">'c/p1'</span>,</span><br><span class="line">        component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/example14/container/P1View.vue'</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; </span><br><span class="line">        path:<span class="string">'c/p2'</span>,</span><br><span class="line">        component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/example14/container/P2View.vue'</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; </span><br><span class="line">        path:<span class="string">'c/p3'</span>,</span><br><span class="line">        component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/example14/container/P3View.vue'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path:<span class="string">'/login'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/example14/LoginView.vue'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path:<span class="string">'/404'</span>,</span><br><span class="line">    component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/example14/NotFoundView.vue'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path:<span class="string">'*'</span>,</span><br><span class="line">    redirect: <span class="string">'/404'</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>子路由变化，切换的是【ContainerView 组件】中 <code>&lt;router-view&gt;&lt;/router-view&gt;</code> 部分的内容</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>redirect 可以用来重定向（跳转）到一个新的地址</li><li>path 的取值为 * 表示匹配不到其它 path 时，就会匹配它</li></ul><h4 id="ElementUI-布局"><a href="#ElementUI-布局" class="headerlink" title="ElementUI 布局"></a>ElementUI 布局</h4><p>通常主页要做布局，下面的代码是 ElementUI 提供的【上-【左-右】】布局</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;el-container&gt;</span><br><span class="line">            &lt;el-header&gt;&lt;/el-header&gt;</span><br><span class="line">            &lt;el-container&gt;</span><br><span class="line">                &lt;el-aside width=&quot;200px&quot;&gt;&lt;/el-aside&gt;</span><br><span class="line">                &lt;el-main&gt;</span><br><span class="line">                    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">                &lt;/el-main&gt;</span><br><span class="line">            &lt;/el-container&gt;</span><br><span class="line">        &lt;/el-container&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h4><h5 id="标签式"><a href="#标签式" class="headerlink" title="标签式"></a>标签式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-aside width=&quot;200px&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/c1/p1&quot;&gt;P1&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/c1/p2&quot;&gt;P2&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/c1/p3&quot;&gt;P3&lt;/router-link&gt;</span><br><span class="line">&lt;/el-aside&gt;</span><br></pre></td></tr></table></figure><h5 id="编程式"><a href="#编程式" class="headerlink" title="编程式"></a>编程式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-header&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-edit&quot; </span><br><span class="line">               circle size=&quot;mini&quot; @click=&quot;jump(&apos;/c1/p1&apos;)&quot;&gt;&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;success&quot; icon=&quot;el-icon-check&quot; </span><br><span class="line">               circle size=&quot;mini&quot; @click=&quot;jump(&apos;/c1/p2&apos;)&quot;&gt;&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;warning&quot; icon=&quot;el-icon-star-off&quot; </span><br><span class="line">               circle size=&quot;mini&quot; @click=&quot;jump(&apos;/c1/p3&apos;)&quot;&gt;&lt;/el-button&gt;</span><br><span class="line">&lt;/el-header&gt;</span><br></pre></td></tr></table></figure><p>jump 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">const options = &#123;</span><br><span class="line">    methods : &#123;</span><br><span class="line">        jump(url) &#123;</span><br><span class="line">            this.$router.push(url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>其中 this.$router 是拿到路由对象</li><li>push 方法根据 url 进行跳转</li></ul><h5 id="导航菜单"><a href="#导航菜单" class="headerlink" title="导航菜单"></a>导航菜单</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-menu router background-color=&quot;#545c64&quot; text-color=&quot;#fff&quot; active-text-color=&quot;#ffd04b&quot;&gt;</span><br><span class="line">    &lt;el-submenu index=&quot;/c1&quot;&gt;</span><br><span class="line">        &lt;span slot=&quot;title&quot;&gt;</span><br><span class="line">            &lt;i class=&quot;el-icon-platform-eleme&quot;&gt;&lt;/i&gt;</span><br><span class="line">            菜单1</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;el-menu-item index=&quot;/c1/p1&quot;&gt;子项1&lt;/el-menu-item&gt;</span><br><span class="line">        &lt;el-menu-item index=&quot;/c1/p2&quot;&gt;子项2&lt;/el-menu-item&gt;</span><br><span class="line">        &lt;el-menu-item index=&quot;/c1/p3&quot;&gt;子项3&lt;/el-menu-item&gt;</span><br><span class="line">    &lt;/el-submenu&gt;</span><br><span class="line">    &lt;el-menu-item index=&quot;/c2&quot;&gt;</span><br><span class="line">        &lt;span slot=&quot;title&quot;&gt;</span><br><span class="line">            &lt;i class=&quot;el-icon-phone&quot;&gt;&lt;/i&gt;</span><br><span class="line">            菜单2</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">    &lt;/el-menu-item&gt;</span><br><span class="line">    &lt;el-menu-item index=&quot;/c3&quot;&gt;</span><br><span class="line">        &lt;span slot=&quot;title&quot;&gt;</span><br><span class="line">            &lt;i class=&quot;el-icon-star-on&quot;&gt;&lt;/i&gt;</span><br><span class="line">            菜单3</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">    &lt;/el-menu-item&gt;</span><br><span class="line">&lt;/el-menu&gt;</span><br></pre></td></tr></table></figure><ul><li>图标和菜单项文字建议用 <code>&lt;span slot=&#39;title&#39;&gt;&lt;/span&gt;</code> 包裹起来</li><li><code>el-menu</code> 标签上加上 <code>router</code> 属性，表示结合导航菜单与路由对象，此时，就可以利用菜单项的 <code>index</code> 属性来路由跳转</li></ul><h4 id="动态路由与菜单"><a href="#动态路由与菜单" class="headerlink" title="动态路由与菜单"></a>动态路由与菜单</h4><p>将菜单、路由信息（仅主页的）存入数据库中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> menu(<span class="keyword">id</span>, <span class="keyword">name</span>, pid, <span class="keyword">path</span>, component, icon) <span class="keyword">values</span></span><br><span class="line">    (<span class="number">101</span>, <span class="string">'菜单1'</span>, <span class="number">0</span>,   <span class="string">'/m1'</span>,    <span class="literal">null</span>,         <span class="string">'el-icon-platform-eleme'</span>),</span><br><span class="line">    (<span class="number">102</span>, <span class="string">'菜单2'</span>, <span class="number">0</span>,   <span class="string">'/m2'</span>,    <span class="literal">null</span>,         <span class="string">'el-icon-delete-solid'</span>),</span><br><span class="line">    (<span class="number">103</span>, <span class="string">'菜单3'</span>, <span class="number">0</span>,   <span class="string">'/m3'</span>,    <span class="literal">null</span>,         <span class="string">'el-icon-s-tools'</span>),</span><br><span class="line">    (<span class="number">104</span>, <span class="string">'菜单4'</span>, <span class="number">0</span>,   <span class="string">'/m4'</span>,    <span class="string">'M4View.vue'</span>, <span class="string">'el-icon-user-solid'</span>),</span><br><span class="line">    (<span class="number">105</span>, <span class="string">'子项1'</span>, <span class="number">101</span>, <span class="string">'/m1/c1'</span>, <span class="string">'C1View.vue'</span>, <span class="string">'el-icon-s-goods'</span>),</span><br><span class="line">    (<span class="number">106</span>, <span class="string">'子项2'</span>, <span class="number">101</span>, <span class="string">'/m1/c2'</span>, <span class="string">'C2View.vue'</span>, <span class="string">'el-icon-menu'</span>),</span><br><span class="line">    (<span class="number">107</span>, <span class="string">'子项3'</span>, <span class="number">102</span>, <span class="string">'/m2/c3'</span>, <span class="string">'C3View.vue'</span>, <span class="string">'el-icon-s-marketing'</span>),</span><br><span class="line">    (<span class="number">108</span>, <span class="string">'子项4'</span>, <span class="number">102</span>, <span class="string">'/m2/c4'</span>, <span class="string">'C4View.vue'</span>, <span class="string">'el-icon-s-platform'</span>),</span><br><span class="line">    (<span class="number">109</span>, <span class="string">'子项5'</span>, <span class="number">102</span>, <span class="string">'/m2/c5'</span>, <span class="string">'C5View.vue'</span>, <span class="string">'el-icon-picture'</span>),</span><br><span class="line">    (<span class="number">110</span>, <span class="string">'子项6'</span>, <span class="number">103</span>, <span class="string">'/m3/c6'</span>, <span class="string">'C6View.vue'</span>, <span class="string">'el-icon-upload'</span>),</span><br><span class="line">    (<span class="number">111</span>, <span class="string">'子项7'</span>, <span class="number">103</span>, <span class="string">'/m3/c7'</span>, <span class="string">'C7View.vue'</span>, <span class="string">'el-icon-s-promotion'</span>);</span><br></pre></td></tr></table></figure><p>不同的用户查询的的菜单、路由信息是不一样的</p><p>例如：访问 <code>/api/menu/admin</code> 返回所有的数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">102</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"菜单2"</span>,</span><br><span class="line">        <span class="attr">"icon"</span>: <span class="string">"el-icon-delete-solid"</span>,</span><br><span class="line">        <span class="attr">"path"</span>: <span class="string">"/m2"</span>,</span><br><span class="line">        <span class="attr">"pid"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"component"</span>: <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">107</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"子项3"</span>,</span><br><span class="line">        <span class="attr">"icon"</span>: <span class="string">"el-icon-s-marketing"</span>,</span><br><span class="line">        <span class="attr">"path"</span>: <span class="string">"/m2/c3"</span>,</span><br><span class="line">        <span class="attr">"pid"</span>: <span class="number">102</span>,</span><br><span class="line">        <span class="attr">"component"</span>: <span class="string">"C3View.vue"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">108</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"子项4"</span>,</span><br><span class="line">        <span class="attr">"icon"</span>: <span class="string">"el-icon-s-platform"</span>,</span><br><span class="line">        <span class="attr">"path"</span>: <span class="string">"/m2/c4"</span>,</span><br><span class="line">        <span class="attr">"pid"</span>: <span class="number">102</span>,</span><br><span class="line">        <span class="attr">"component"</span>: <span class="string">"C4View.vue"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">109</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"子项5"</span>,</span><br><span class="line">        <span class="attr">"icon"</span>: <span class="string">"el-icon-picture"</span>,</span><br><span class="line">        <span class="attr">"path"</span>: <span class="string">"/m2/c5"</span>,</span><br><span class="line">        <span class="attr">"pid"</span>: <span class="number">102</span>,</span><br><span class="line">        <span class="attr">"component"</span>: <span class="string">"C5View.vue"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>访问 <code>/api/menu/wang</code> 返回</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">103</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"菜单3"</span>,</span><br><span class="line">        <span class="attr">"icon"</span>: <span class="string">"el-icon-s-tools"</span>,</span><br><span class="line">        <span class="attr">"path"</span>: <span class="string">"/m3"</span>,</span><br><span class="line">        <span class="attr">"pid"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"component"</span>: <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">110</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"子项6"</span>,</span><br><span class="line">        <span class="attr">"icon"</span>: <span class="string">"el-icon-upload"</span>,</span><br><span class="line">        <span class="attr">"path"</span>: <span class="string">"/m3/c6"</span>,</span><br><span class="line">        <span class="attr">"pid"</span>: <span class="number">103</span>,</span><br><span class="line">        <span class="attr">"component"</span>: <span class="string">"C6View.vue"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">111</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"子项7"</span>,</span><br><span class="line">        <span class="attr">"icon"</span>: <span class="string">"el-icon-s-promotion"</span>,</span><br><span class="line">        <span class="attr">"path"</span>: <span class="string">"/m3/c7"</span>,</span><br><span class="line">        <span class="attr">"pid"</span>: <span class="number">103</span>,</span><br><span class="line">        <span class="attr">"component"</span>: <span class="string">"C7View.vue"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>前端根据他们身份不同，动态添加路由和显示菜单</p><h5 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addServerRoutes</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> &#123; id, path, component &#125; <span class="keyword">of</span> array) &#123;</span><br><span class="line">    <span class="keyword">if</span> (component !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 动态添加路由</span></span><br><span class="line">      <span class="comment">// 参数1：父路由名称</span></span><br><span class="line">      <span class="comment">// 参数2：路由信息对象</span></span><br><span class="line">      router.addRoute(<span class="string">'c'</span>, &#123;</span><br><span class="line">        path: path,</span><br><span class="line">        name: id,</span><br><span class="line">        component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">`@/views/example15/container/<span class="subst">$&#123;component&#125;</span>`</span>)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>js 这边只保留几个固定路由，如主页、404 和 login</li><li>以上方法执行时，将服务器返回的路由信息加入到名为 c 的父路由中去</li><li>这里要注意组件路径，前面 @/views 是必须在 js 这边完成拼接的，否则 import 函数会失效</li></ul><h5 id="重置路由"><a href="#重置路由" class="headerlink" title="重置路由"></a>重置路由</h5><p>在用户注销时应当重置路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">resetRouter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  router.matcher = <span class="keyword">new</span> VueRouter(&#123; routes &#125;).matcher</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="页面刷新"><a href="#页面刷新" class="headerlink" title="页面刷新"></a>页面刷新</h5><p>页面刷新后，会导致动态添加的路由失效，解决方法是将路由数据存入 sessionStorage</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &apos;@/util/myaxios&apos;</span><br><span class="line">import &#123;resetRouter, addServerRoutes&#125; from &apos;@/router/example15&apos;</span><br><span class="line">const options = &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            username: &apos;admin&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        async login() &#123;       </span><br><span class="line">            resetRouter(); // 重置路由     </span><br><span class="line">            const resp = await axios.get(`/api/menu/$&#123;this.username&#125;`)</span><br><span class="line">            const array = resp.data.data;</span><br><span class="line">            // localStorage     即使浏览器关闭，存储的数据仍在</span><br><span class="line">            // sessionStorage   以标签页为单位，关闭标签页时，数据被清除</span><br><span class="line">            sessionStorage.setItem(&apos;serverRoutes&apos;, JSON.stringify(array))</span><br><span class="line">            addServerRoutes(array); // 动态添加路由</span><br><span class="line">            this.$router.push(&apos;/&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>页面刷新，重新创建路由对象时，从 sessionStorage 里恢复路由数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 sessionStorage 中恢复路由数据</span></span><br><span class="line"><span class="keyword">const</span> serverRoutes = sessionStorage.getItem(<span class="string">'serverRoutes'</span>);</span><br><span class="line"><span class="keyword">if</span>(serverRoutes) &#123;</span><br><span class="line">  <span class="keyword">const</span> array = <span class="built_in">JSON</span>.parse(serverRoutes);</span><br><span class="line">  addServerRoutes(array) <span class="comment">// 动态添加路由</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="动态菜单"><a href="#动态菜单" class="headerlink" title="动态菜单"></a>动态菜单</h5><p>代码部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">const options = &#123;</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        const serverRoutes = sessionStorage.getItem(&apos;serverRoutes&apos;);</span><br><span class="line">        const array = JSON.parse(serverRoutes);</span><br><span class="line">        const map = new Map();</span><br><span class="line">        for(const obj of array) &#123;</span><br><span class="line">            map.set(obj.id, obj);</span><br><span class="line">        &#125;</span><br><span class="line">        const top = [];</span><br><span class="line">        for(const obj of array) &#123;</span><br><span class="line">            const parent = map.get(obj.pid);</span><br><span class="line">            if(parent) &#123;</span><br><span class="line">                parent.children ??= [];</span><br><span class="line">                parent.children.push(obj);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                top.push(obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        this.top = top;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            top: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>菜单部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-menu router background-color=&quot;#545c64&quot; text-color=&quot;#fff&quot; active-text-color=&quot;#ffd04b&quot; :unique-opened=&quot;true&quot;&gt;</span><br><span class="line">    &lt;template v-for=&quot;m1 of top&quot;&gt;</span><br><span class="line">&lt;el-submenu v-if=&quot;m1.children&quot; :key=&quot;m1.id&quot; :index=&quot;m1.path&quot;&gt;</span><br><span class="line">    &lt;span slot=&quot;title&quot;&gt;</span><br><span class="line">        &lt;i :class=&quot;m1.icon&quot;&gt;&lt;/i&gt; &#123;&#123;m1.name&#125;&#125;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">    &lt;el-menu-item v-for=&quot;m2 of m1.children&quot; :key=&quot;m2.id&quot; :index=&quot;m2.path&quot;&gt;</span><br><span class="line">        &lt;span slot=&quot;title&quot;&gt;</span><br><span class="line">            &lt;i :class=&quot;m2.icon&quot;&gt;&lt;/i&gt; &#123;&#123;m2.name&#125;&#125;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;/el-menu-item&gt;</span><br><span class="line">        &lt;/el-submenu&gt;</span><br><span class="line">&lt;el-menu-item v-else :key=&quot;m1.id&quot; :index=&quot;m1.path&quot;&gt;</span><br><span class="line">    &lt;span slot=&quot;title&quot;&gt;</span><br><span class="line">        &lt;i :class=&quot;m1.icon&quot;&gt;&lt;/i&gt; &#123;&#123;m1.name&#125;&#125;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;/el-menu-item&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/el-menu&gt;</span><br></pre></td></tr></table></figure><ul><li>没有考虑递归菜单问题，认为菜单只有两级</li></ul><h3 id="3-Vuex"><a href="#3-Vuex" class="headerlink" title="3) Vuex"></a>3) Vuex</h3><h4 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h4><p>vuex 可以在多个组件之间共享数据，并且共享的数据是【响应式】的，即数据的变更能及时渲染到模板</p><ul><li>与之对比 localStorage 与 sessionStorage 也能共享数据，但缺点是数据并非【响应式】</li></ul><p>首先需要定义 state 与 mutations 他们一个用来读取共享数据，一个用来修改共享数据</p><p>src/store/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  读取数据，走 state, getters</span></span><br><span class="line"><span class="comment">  修改数据，走 mutations, actions</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    name: <span class="string">''</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    updateName(state, name) &#123;</span><br><span class="line">      state.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>修改共享数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;p&quot;&gt;</span><br><span class="line">        &lt;el-input placeholder=&quot;请修改用户姓名&quot; </span><br><span class="line">            size=&quot;mini&quot; v-model=&quot;name&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot; @click=&quot;update()&quot;&gt;修改&lt;/el-button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">const options = &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        update()&#123;</span><br><span class="line">            this.$store.commit(&apos;updateName&apos;, this.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            name:&apos;&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>mutations 方法不能直接调用，只能通过 <code>store.commit(mutation方法名, 参数)</code> 来间接调用</li></ul><p>读取共享数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;el-container&gt;</span><br><span class="line">            &lt;el-header&gt;</span><br><span class="line">                &lt;div class=&quot;t&quot;&gt;</span><br><span class="line">                    欢迎您：&#123;&#123; $store.state.name &#125;&#125;, &#123;&#123; $store.state.age &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">            &lt;/el-header&gt;</span><br><span class="line">            &lt;el-container&gt;</span><br><span class="line">                &lt;el-aside width=&quot;200px&quot;&gt;</span><br><span class="line">                &lt;/el-aside&gt;</span><br><span class="line">                &lt;el-main&gt;</span><br><span class="line">                    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">                &lt;/el-main&gt;</span><br><span class="line">            &lt;/el-container&gt;</span><br><span class="line">        &lt;/el-container&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h4><p>每次去写 <code>$store.state.name</code> 这样的代码显得非常繁琐，可以用 vuex 帮我们生成计算属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;el-container&gt;</span><br><span class="line">            &lt;el-header&gt;</span><br><span class="line">                &lt;div class=&quot;t&quot;&gt;欢迎您：&#123;&#123; name &#125;&#125;, &#123;&#123; age &#125;&#125;&lt;/div&gt;</span><br><span class="line">            &lt;/el-header&gt;</span><br><span class="line">            &lt;el-container&gt;</span><br><span class="line">                &lt;el-aside width=&quot;200px&quot;&gt;</span><br><span class="line">                &lt;/el-aside&gt;</span><br><span class="line">                &lt;el-main&gt;</span><br><span class="line">                    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">                &lt;/el-main&gt;</span><br><span class="line">            &lt;/el-container&gt;</span><br><span class="line">        &lt;/el-container&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapState &#125; from &apos;vuex&apos;</span><br><span class="line">const options = &#123;</span><br><span class="line">    computed: &#123;</span><br><span class="line">        ...mapState([&apos;name&apos;, &apos;age&apos;])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>mapState 返回的是一个对象，对象内包含了 name() 和 age() 的这两个方法作为计算属性</li><li>此对象配合 <code>...</code> 展开运算符，填充入 computed 即可使用</li></ul><h4 id="mapMutations"><a href="#mapMutations" class="headerlink" title="mapMutations"></a>mapMutations</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;p&quot;&gt;</span><br><span class="line">        &lt;el-input placeholder=&quot;请修改用户姓名&quot; </span><br><span class="line">            size=&quot;mini&quot; v-model=&quot;name&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot; @click=&quot;updateName(name)&quot;&gt;修改&lt;/el-button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;mapMutations&#125; from &apos;vuex&apos;</span><br><span class="line">const options = &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        ...mapMutations([&apos;updateName&apos;])</span><br><span class="line">    &#125;,</span><br><span class="line">    data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            name:&apos;&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>类似的，调用 mutation 修改共享数据也可以简化</li><li>mapMutations 返回的对象中包含的方法，就会调用 store.commit() 来执行 mutation 方法</li><li>注意参数传递略有不同</li></ul><h4 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h4><p>mutations 方法内不能包括修改不能立刻生效的代码，否则会造成 Vuex 调试工具工作不准确，必须把这些代码写在 actions 方法中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  读取数据，走 state, getters</span></span><br><span class="line"><span class="comment">  修改数据，走 mutations, actions</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'@/util/myaxios'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    name: <span class="string">''</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    updateName(state, name) &#123;</span><br><span class="line">      state.name = name;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 错误的用法，如果在mutations方法中包含了异步操作，会造成开发工具不准确</span></span><br><span class="line">    <span class="comment">/* async updateServerName(state) &#123;</span></span><br><span class="line"><span class="comment">      const resp = await axios.get('/api/user');</span></span><br><span class="line"><span class="comment">      const &#123;name, age&#125; = resp.data.data;</span></span><br><span class="line"><span class="comment">      state.name = name;</span></span><br><span class="line"><span class="comment">      state.age = age;</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line">    updateServerName(state, user) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; name, age &#125; = user;</span><br><span class="line">      state.name = name;</span><br><span class="line">      state.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    <span class="keyword">async</span> updateServerName(context) &#123;</span><br><span class="line">      <span class="keyword">const</span> resp = <span class="keyword">await</span> axios.get(<span class="string">'/api/user'</span>);</span><br><span class="line">      context.commit(<span class="string">'updateServerName'</span>, resp.data.data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>首先应当调用 actions 的 updateServerName 获取数据</li><li>然后再由它间接调用 mutations 的 updateServerName 更新共享数据</li></ul><p>页面使用 actions 的方法可以这么写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;p&quot;&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; size=&quot;mini&quot;</span><br><span class="line">            @click=&quot;updateServerName()&quot;&gt;从服务器获取数据,存入store&lt;/el-button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mapActions &#125; from &apos;vuex&apos;</span><br><span class="line">const options = &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        ...mapActions([&apos;updateServerName&apos;])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default options;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>mapActions 会生成调用 actions 中方法的代码</p></li><li><p>调用 actions 的代码内部等价于，它返回的是 Promise 对象，可以用同步或异步方式接收结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'action名称'</span>, 参数)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--接口学习</title>
      <link href="/2022/10/30/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(41)/"/>
      <url>/2022/10/30/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(41)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><a href="https://imgse.com/i/xI7rNV" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2022/10/30/xI7rNV.png" alt="xI7rNV.png"></a></p><p>说明：接口中的字段默认为 <strong>static+final</strong> 修饰<br>补充：</p><ul><li><p>关于字段–&gt; only <strong>public, static &amp; final</strong> are permitted Java(33554775)</p></li><li><p>接口的方法默认为<strong>public</strong>类型且只能为<strong>public</strong>类型</p></li><li><p>接口可以声明为<strong>public</strong>或者不声明(<strong>包访问</strong>)</p></li><li><p>JDK9中接口的<strong>default方法和static方法</strong>可以为<strong>private</strong></p></li><li><p>当一个类，既继承一个父类，又实现若干个接口时 (重点)：父类中的成员方法与接口中的默认方法重名，子类就近选择执行父类的成员方法。</p></li><li><p>JDK 1.8开始之后接口新增了如下三种方法：</p><p>​     <em>a.默认方法（就是之前写的普通实例方法）</em></p><p>​            <em>– 必须用default修饰，默认会public修饰</em></p><p>​            <em>– 只能用接口的实现类的对象来调用（所以当一个类实现多个接口时，多个接口中存在同名的默认方法，实现类必须重写这个方法）。</em></p><p>​    <em>b.静态方法</em></p><p>​            <em>– 默认会public修饰</em></p><p>​            <em>– 注意：接口的静态方法只能用接口的类名本身来调用（<em>所以如果实现了多个接口，多个接口中存在同名的静态方法并不会冲突</em>）。</em></p><p>​    <em>c.私有方法（就是私有的实例方法）: JDK 1.9才开始有的。</em></p><p>​        <em>– 只能在本类中被其他的默认方法或者私有方法访问。</em></p></li></ul><hr><p><strong>2022/10/31 更新</strong></p><p><a href="https://imgse.com/i/xTuYsU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2022/10/31/xTuYsU.png" alt="xTuYsU.png"></a></p><p><strong>2022/11/1 更新</strong></p><p><a href="https://imgse.com/i/xTWTIS" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2022/11/01/xTWTIS.png" alt="xTWTIS.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--初始化顺序</title>
      <link href="/2022/10/25/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(40)/"/>
      <url>/2022/10/25/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(40)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><a href="https://imgse.com/i/xROaQA" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2022/10/25/xROaQA.png" alt="xROaQA.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML&amp;CSS知识点总结</title>
      <link href="/2022/10/24/07_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF_HTML&amp;CSS/"/>
      <url>/2022/10/24/07_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF_HTML&amp;CSS/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="HTML-与-CSS"><a href="#HTML-与-CSS" class="headerlink" title="HTML 与 CSS"></a>HTML 与 CSS</h1><p>HTML 是什么：即 HyperText Markup language 超文本标记语言，咱们熟知的网页就是用它编写的，HTML 的作用是定义网页的内容和结构。</p><ul><li>HyperText 是指用超链接的方式组织网页，把网页联系起来</li><li>Markup 是指用 <code>&lt;标签&gt;</code> 的方式赋予内容不同的功能和含义</li></ul><p>CSS 是什么：即 Cascading  Style  Sheets 级联（层叠）样式表，它描述了网页的表现与展示效果</p><h2 id="1-HTML-元素"><a href="#1-HTML-元素" class="headerlink" title="1. HTML 元素"></a>1. HTML 元素</h2><p>HTML 由一系列元素 <code>elements</code> 组成，例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>整体称之为元素</p></li><li><p><code>&lt;p&gt;</code> 和 <code>&lt;/p&gt;</code> 分别称为起始和结束标签</p></li><li><p>标签包围起来的 Hello, world 称之为内容</p></li><li><p>p 是预先定义好的 html 标签，作用是将内容作为一个单独的段落</p></li></ul><p>元素还可以有属性，如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>属性一般是预先定义好的，这里的 id 属性是给元素一个唯一的标识</li></ul><p>元素之间可以嵌套，如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>HTML 是一门非常<span class="tag">&lt;<span class="name">b</span>&gt;</span>强大<span class="tag">&lt;/<span class="name">b</span>&gt;</span>的语言<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>错误嵌套写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>HTML 是一门非常<span class="tag">&lt;<span class="name">b</span>&gt;</span>强大的语言<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不包含内容的元素称之为空元素，如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.png"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>img 作用是用来展示图片</li><li>src 属性用来指明图片路径</li></ul><h2 id="2-HTML-页面"><a href="#2-HTML-页面" class="headerlink" title="2. HTML 页面"></a>2. HTML 页面</h2><p>前面介绍的只是单独的 HTML 元素，它们可以充当一份完整的 HTML 页面的组成部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1.png"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>html</code> 元素囊括了页面中所有其它元素，整个页面只需一个，称为根元素</li><li><code>head</code> 元素包含的是那些不用于展现内容的元素，如 <code>title</code>，<code>link</code>，<code>meta</code> 等</li><li><code>body</code> 元素包含了对用户展现内容的元素，例如后面会学到的用于展示文本、图片、视频、音频的各种元素</li></ul><h2 id="3-常见元素"><a href="#3-常见元素" class="headerlink" title="3. 常见元素"></a>3. 常见元素</h2><h3 id="1-文本"><a href="#1-文本" class="headerlink" title="1) 文本"></a>1) 文本</h3><h4 id="Heading"><a href="#Heading" class="headerlink" title="Heading"></a>Heading</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>1号标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>2号标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>3号标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>4号标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>5号标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>6号标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Paragraph"><a href="#Paragraph" class="headerlink" title="Paragraph"></a>Paragraph</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p>无序列表 unordered list</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有序列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多级列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    北京市</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>海淀区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>朝阳区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>昌平区<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    河北省</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>石家庄<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>保定<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Anchor"><a href="#Anchor" class="headerlink" title="Anchor"></a>Anchor</h4><p>锚，超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"网页地址"</span>&gt;</span>超链接文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-多媒体"><a href="#2-多媒体" class="headerlink" title="2) 多媒体"></a>2) 多媒体</h3><h4 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"文件路径"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>src 格式有 3 种</p><ul><li><p>文件地址</p></li><li><p>data URL，格式如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data:媒体类型;base64,数据</span><br></pre></td></tr></table></figure></li><li><p>object URL，需要配合 javascript 使用</p></li></ul><h4 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"文件路径"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Audio"><a href="#Audio" class="headerlink" title="Audio"></a>Audio</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"文件路径"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-表单"><a href="#3-表单" class="headerlink" title="3) 表单"></a>3) 表单</h3><h4 id="作用与语法"><a href="#作用与语法" class="headerlink" title="作用与语法"></a>作用与语法</h4><p>表单的作用：<strong>收集</strong>用户填入的<strong>数据</strong>，并将这些数据<strong>提交给服务器</strong></p><p>表单的语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"服务器地址"</span> <span class="attr">method</span>=<span class="string">"请求方式"</span> <span class="attr">enctype</span>=<span class="string">"数据格式"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表单项 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交按钮"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>method 请求方式有 <ul><li>get （默认）提交时，数据跟在 URL 地址之后</li><li>post 提交时，数据在请求体内</li></ul></li><li>enctype 在 post 请求时，指定请求体的数据格式<ul><li>application/x-www-form-urlencoded（默认）</li><li>multipart/form-data</li></ul></li><li>其中表单项提供多种收集数据的方式<ul><li>有 name 属性的表单项数据，才会被发送给服务器</li></ul></li></ul><h4 id="常见的表单项"><a href="#常见的表单项" class="headerlink" title="常见的表单项"></a>常见的表单项</h4><p>文本框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"uesrname"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>密码框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>隐藏框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>日期框</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">name</span>=<span class="string">"birthday"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>单选</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"女"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多选</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">"唱歌"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">"逛街"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">"游戏"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文件上传</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"avatar"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-HTTP-请求"><a href="#4-HTTP-请求" class="headerlink" title="4. HTTP 请求"></a>4. HTTP 请求</h2><h3 id="1-请求组成"><a href="#1-请求组成" class="headerlink" title="1) 请求组成"></a>1) 请求组成</h3><p>请求由三部分组成</p><ol><li>请求行</li><li>请求头</li><li>请求体</li></ol><p>可以用 telnet 程序测试</p><h3 id="2-请求方式与数据格式"><a href="#2-请求方式与数据格式" class="headerlink" title="2) 请求方式与数据格式"></a>2) 请求方式与数据格式</h3><h4 id="get-请求示例"><a href="#get-请求示例" class="headerlink" title="get 请求示例"></a>get 请求示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /test2?name=%E5%BC%A0&amp;age=20 HTTP/1.1</span><br><span class="line">Host: localhost</span><br></pre></td></tr></table></figure><ul><li>%E5%BC%A0 是【张】经过 URL 编码后的结果</li></ul><h4 id="post-请求示例"><a href="#post-请求示例" class="headerlink" title="post 请求示例"></a>post 请求示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /test2 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 21</span><br><span class="line"></span><br><span class="line">name=%E5%BC%A0&amp;age=18</span><br></pre></td></tr></table></figure><p>application/x-www-form-urlencoed 格式细节：</p><ul><li>参数分成名字和值，中间用 = 分隔</li><li>多个参数使用 &amp; 进行分隔</li><li>【张】等特殊字符需要用 encodeURIComponent() 编码为 【%E5%BC%A0】后才能发送</li></ul><h4 id="json-请求示例"><a href="#json-请求示例" class="headerlink" title="json 请求示例"></a>json 请求示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /test3 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 25</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;zhang&quot;,&quot;age&quot;:18&#125;</span><br></pre></td></tr></table></figure><p>json 对象格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;属性名&quot;:属性值&#125;</span><br></pre></td></tr></table></figure><p>其中属性值可以是</p><ul><li>字符串 “”</li><li>数字</li><li>true, false</li><li>null</li><li>对象</li><li>数组</li></ul><p>json 数组格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[元素1, 元素2, ...]</span><br></pre></td></tr></table></figure><h4 id="multipart-请求示例"><a href="#multipart-请求示例" class="headerlink" title="multipart 请求示例"></a>multipart 请求示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /test2 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Content-Type: multipart/form-data; boundary=123</span><br><span class="line">Content-Length: 125</span><br><span class="line"></span><br><span class="line">--123</span><br><span class="line">Content-Disposition: form-data; name=&quot;name&quot;</span><br><span class="line"></span><br><span class="line">lisi</span><br><span class="line">--123</span><br><span class="line">Content-Disposition: form-data; name=&quot;age&quot;</span><br><span class="line"></span><br><span class="line">30</span><br><span class="line">--123--</span><br></pre></td></tr></table></figure><ul><li>boundary=123 用来定义分隔符</li><li>起始分隔符是 <code>--分隔符</code></li><li>结束分隔符是 <code>--分隔符--</code></li></ul><h4 id="数据格式小结"><a href="#数据格式小结" class="headerlink" title="数据格式小结"></a>数据格式小结</h4><p>客户端发送</p><ul><li>编码 <ul><li>application/x-www-form-urlencoded ：url 编码</li><li>application/json：utf-8 编码</li><li>multipart/form-data：每部分编码可以不同</li></ul></li><li>表单只支持以 application/x-www-form-urlencoded 和 multipart/form-data 格式发送数据</li><li>文件上传需要用 multipart/form-data 格式</li><li>js 代码可以支持任意格式发送数据 </li></ul><p>服务端接收</p><ul><li>对 application/x-www-form-urlencoded 和 multipart/form-data 格式的数据，Spring 接收方式是统一的，只需要用 java bean 的属性名对应请求参数名即可</li><li>对于 applicaiton/json 格式的数据，Spring 接收需要使用 @RequestBody 注解 + java bean 的方式</li></ul><h3 id="3-session-原理"><a href="#3-session-原理" class="headerlink" title="3) session 原理"></a>3) session 原理</h3><p>Http 无状态，有会话</p><ul><li>无状态是指，请求之间相互独立，第一次请求的数据，第二次请求不能重用</li><li>有会话是指，客户端和服务端都有相应的技术，可以暂存数据，让数据在请求间共享</li></ul><p>服务端使用了 session 技术来暂存数据</p><p>存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /s1?name=zhang HTTP/1.1</span><br><span class="line">Host: localhost</span><br></pre></td></tr></table></figure><p>取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /s2 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Cookie: JSESSIONID=560FA845D02AE09B176E1BC5D9816A5D</span><br></pre></td></tr></table></figure><p>session 技术实现身份验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">participant Client</span><br><span class="line">participant L as LoginController</span><br><span class="line">participant i as LoginInterceptor</span><br><span class="line">participant Session</span><br><span class="line">rect rgb(200, 223, 255)</span><br><span class="line">Client -&gt;&gt; +L : 登录请求</span><br><span class="line">L -&gt;&gt; L : 检查用户名，密码，验证通过</span><br><span class="line">L -&gt;&gt; +Session : 存入用户名</span><br><span class="line">Session --&gt;&gt; -L: </span><br><span class="line">L --&gt;&gt; -Client: 登录成功</span><br><span class="line">end</span><br><span class="line">rect rgb(200, 190, 255)</span><br><span class="line">Client -&gt;&gt; +i : 其它请求</span><br><span class="line">i -&gt;&gt; +Session : 获取用户名</span><br><span class="line">Session --&gt;&gt; -i : </span><br><span class="line">i -&gt;&gt; i: 用户名存在，放行</span><br><span class="line">i --&gt;&gt; -Client : </span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="4-jwt-原理"><a href="#4-jwt-原理" class="headerlink" title="4) jwt 原理"></a>4) jwt 原理</h3><p>jwt 技术实现身份验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">participant Client</span><br><span class="line">participant L as LoginController</span><br><span class="line">participant i as LoginInterceptor</span><br><span class="line"></span><br><span class="line">rect rgb(200, 223, 255)</span><br><span class="line">Client -&gt;&gt; +L : 登录请求</span><br><span class="line">L -&gt;&gt; L : 检查用户名，密码，验证通过</span><br><span class="line">L --&gt;&gt; -Client : 登录成功，返回token</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rect rgb(150, 190, 155)</span><br><span class="line">Client -&gt;&gt; +i : 其它请求，携带token</span><br><span class="line">i -&gt;&gt; i : 校验token，校验无误，放行</span><br><span class="line">i --&gt;&gt; -Client : </span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>生成 token</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /j1?name=zhang&amp;pass=123 HTTP/1.1</span><br><span class="line">Host: localhost</span><br></pre></td></tr></table></figure><p>校验 token</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /j2 HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Authorization: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiJ9._1-P_TLlzQPb1_lCyGwplMZaKQ8Mcw_plBbYPZ3OX28</span><br></pre></td></tr></table></figure><h2 id="5-CSS"><a href="#5-CSS" class="headerlink" title="5. CSS"></a>5. CSS</h2><p>即 Cascading  Style  Sheets，它描述了网页的表现与展示效果</p><h3 id="1-选择器"><a href="#1-选择器" class="headerlink" title="1) 选择器"></a>1) 选择器</h3><ul><li><p>type 选择器 - 根据标签名进行匹配（元素选择器）</p></li><li><p>class 选择器 - 根据元素的 class 属性进行匹配</p></li><li><p>id 选择器  - 根据元素的 id 属性进行匹配</p></li></ul><h3 id="2-属性和值"><a href="#2-属性和值" class="headerlink" title="2) 属性和值"></a>2) 属性和值</h3><ul><li>background-color : red;</li><li>…</li><li>display</li></ul><h3 id="3-布局"><a href="#3-布局" class="headerlink" title="3) 布局"></a>3) 布局</h3><p>与布局相关的 html 元素</p><ul><li>div</li><li>template</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS知识点总结</title>
      <link href="/2022/10/20/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/"/>
      <url>/2022/10/20/08_Java%E7%A8%8B%E5%BA%8F%E5%91%98%E8%A6%81%E6%8E%8C%E6%8F%A1%E7%9A%84%E5%89%8D%E7%AB%AF-js/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h1><p>它是一种脚本语言，可以用来更改页面内容，控制多媒体，制作图像、动画等等</p><p>例子</p><ul><li>修改页面内容</li></ul><p>js 代码位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">// js 代码</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入 js 脚本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js脚本路径"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意，到了框架之后，引入方式会有不同</li></ul><h2 id="1-变量与数据类型"><a href="#1-变量与数据类型" class="headerlink" title="1. 变量与数据类型"></a>1. 变量与数据类型</h2><h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><h4 id="1-let"><a href="#1-let" class="headerlink" title="1) let"></a>1) let</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量名 = 值;</span><br></pre></td></tr></table></figure><ul><li>let 声明的变量可以被多次赋值，例如</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">100</span>;  <span class="comment">// 初始值是 100</span></span><br><span class="line">a = <span class="number">200</span>;  <span class="comment">// ok, 被重新赋值为 200</span></span><br></pre></td></tr></table></figure><h4 id="2-const"><a href="#2-const" class="headerlink" title="2) const"></a>2) const</h4><ul><li>const 修饰的叫常量，只能赋值一次</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> b = <span class="number">300</span>; <span class="comment">// 初始值是 300</span></span><br><span class="line">b = <span class="number">400</span>;   <span class="comment">// error, 不能再次赋值</span></span><br></pre></td></tr></table></figure><ul><li>const 并不意味着它引用的内容不可修改，例如</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">c[<span class="number">2</span>] = <span class="number">4</span>;         <span class="comment">// ok, 数组内容被修改成 [1,2,4]</span></span><br><span class="line">c = [<span class="number">5</span>,<span class="number">6</span>];<span class="comment">// error, 不能再次赋值</span></span><br></pre></td></tr></table></figure><h4 id="3-var"><a href="#3-var" class="headerlink" title="3) var"></a>3) var</h4><p>var 声明的变量可以被多次赋值，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="number">100</span>;</span><br><span class="line">f = <span class="number">200</span>;</span><br></pre></td></tr></table></figure><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><h4 id="1-2-undefined-和-null"><a href="#1-2-undefined-和-null" class="headerlink" title="1,2) undefined 和 null"></a>1,2) undefined 和 null</h4><ul><li>执行表达式或函数，没有返回结果，出现 undefined</li><li>访问数组不存在的元素，访问对象不存在的属性，出现 undefined</li><li>定义变量，没有初始化，出现 undefined</li></ul><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>);  <span class="comment">// 函数没有返回值, 结果是  undefined</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>; <span class="comment">// 表达式没有返回值, 结果是 undefined</span></span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(b[<span class="number">10</span>]); <span class="comment">// 数组未定义元素是 undefined</span></span><br><span class="line"><span class="keyword">let</span> c = &#123;<span class="string">"name"</span>:<span class="string">"张三"</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(c.age); <span class="comment">// 对象未定义属性是 undefined</span></span><br><span class="line"><span class="keyword">let</span> d;</span><br><span class="line"><span class="built_in">console</span>.log(d);<span class="comment">// 变量未初始化是 undefined</span></span><br></pre></td></tr></table></figure><p>二者共同点</p><ul><li>都没有属性、方法</li><li>二者合称 Nullish</li></ul><p>二者区别</p><ul><li>undefined 由 js 产生</li><li>null 由程序员提供</li></ul><h4 id="3-string"><a href="#3-string" class="headerlink" title="3) string"></a>3) string</h4><p>js 字符串三种写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">"hello"</span>;  <span class="comment">// 双引号</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">"world"</span>;  <span class="comment">// 单引号</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="string">`hello`</span>;  <span class="comment">// 反引号</span></span><br></pre></td></tr></table></figure><p>html 代码如下，用 java 和 js 中的字符串如何表示？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"1.html"</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>java 显得比较繁琐</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"&lt;a href=\"1.html\"&gt;超链接&lt;/a&gt;"</span>;</span><br><span class="line"></span><br><span class="line">String s2 = <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">    &lt;a href="</span><span class="number">1</span>.html<span class="string">"&gt;超链接&lt;/a&gt;"</span><span class="string">""</span>;</span><br></pre></td></tr></table></figure><p>js 就比较灵活</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="string">'&lt;a href="1.html"&gt;超链接&lt;/a&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="string">`&lt;a href="1.html"&gt;超链接&lt;/a&gt;`</span>;</span><br></pre></td></tr></table></figure><p>模板字符串（Template strings）</p><p>需求：拼接 URI 的请求参数，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/test?name=zhang&amp;age=18</span><br><span class="line">/test?name=li&amp;age=20</span><br></pre></td></tr></table></figure><p>传统方法拼接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = ; <span class="comment">// zhang li ...</span></span><br><span class="line"><span class="keyword">let</span> age = ; <span class="comment">// 18 20 ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> uri = <span class="string">"/test?name="</span> + name + <span class="string">"&amp;age="</span> + age;</span><br></pre></td></tr></table></figure><p>模板字符串方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = ; <span class="comment">// zhang li ...</span></span><br><span class="line"><span class="keyword">let</span> age = ; <span class="comment">// 18 20 ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> uri = <span class="string">`/test?name=<span class="subst">$&#123;name&#125;</span>&amp;age=<span class="subst">$&#123;age&#125;</span>`</span>;</span><br></pre></td></tr></table></figure><h4 id="4-5-number-和-bigint"><a href="#4-5-number-和-bigint" class="headerlink" title="4,5) number 和 bigint"></a>4,5) number 和 bigint</h4><p>number 类型标识的是双精度浮动小数，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> / <span class="number">3</span>;   <span class="comment">// 结果 3.3333333333333335</span></span><br></pre></td></tr></table></figure><p>既然是浮点小数，那么可以除零</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> / <span class="number">0</span>;  <span class="comment">// 结果 Infinity 正无穷大</span></span><br><span class="line"><span class="number">-10</span> / <span class="number">0</span>;  <span class="comment">// 结果 -Infinity 负无穷大</span></span><br></pre></td></tr></table></figure><p>浮点小数都有运算精度问题，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.0</span> - <span class="number">1.1</span>; <span class="comment">// 结果 0.8999999999999999</span></span><br></pre></td></tr></table></figure><p>字符串转数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10"</span>); <span class="comment">// 结果是数字 10 </span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10.5"</span>);<span class="comment">// 结果是数字 10, 去除了小数部分</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10"</span>) / <span class="number">3</span>; <span class="comment">// 结果仍视为 number 浮点数, 因此结果为 3.3333333333333335</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"abc"</span>);<span class="comment">// 转换失败，结果是特殊值 NaN (Not a Number)</span></span><br></pre></td></tr></table></figure><p>要表示真正的整数，需要用 bigint，数字的结尾用 n 表示它是一个 bigint 类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>n / <span class="number">3</span>n;<span class="comment">// 结果 3n, 按整数除法处理</span></span><br></pre></td></tr></table></figure><h4 id="6-boolean"><a href="#6-boolean" class="headerlink" title="6) boolean"></a>6) boolean</h4><ul><li>Truthy</li><li>Falsy</li></ul><p>在 js 中，并不是 boolean 才能用于条件判断，你可以在 if 语句中使用【数字】、【字符串】… 作为判断条件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(b) &#123; <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"进入了"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时就有一个规则，当需要条件判断时，这个值被当作 true 还是 false，当作 true 的值归类为 truthy，当作 false 的值归类为 falsy</p><p>下面值都是 falsy</p><ul><li><code>false</code></li><li><code>Nullish (null, undefined)</code></li><li><code>0, 0n, NaN</code></li><li>长度为零的字符串</li></ul><p>剩余的值绝大部分都是 truthy</p><p>有几个容易被当作 falsy 实际是 truthy 的</p><ul><li><code>&quot;false&quot;, &quot;0&quot;</code> 即字符串的 false 和 字符串的零</li><li><code>[]</code> 空数组</li><li><code>{}</code> 空对象</li></ul><h4 id="7-symbol"><a href="#7-symbol" class="headerlink" title="7) symbol"></a>7) symbol</h4><ul><li>很少使用</li></ul><h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h3><h4 id="1-Function"><a href="#1-Function" class="headerlink" title="1) Function"></a>1) Function</h4><h5 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">参数</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">return</span> 结果;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名(实参);</span><br></pre></td></tr></table></figure><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>, <span class="number">2</span>);     <span class="comment">// 返回 3</span></span><br></pre></td></tr></table></figure><p>js 中的函数调用特点：对参数的<strong>类型</strong>和<strong>个数</strong>都没有限制，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="string">'a'</span>, <span class="string">'b'</span>);  <span class="comment">// 返回 ab</span></span><br><span class="line">add(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);   <span class="comment">// 返回 9, 第三个参数没有被用到, 不会报错</span></span><br><span class="line">add(<span class="number">1</span>);<span class="comment">// 返回 NaN, 这时 b 没有定义是 undefined, undefined 做数学运算结果就是 NaN</span></span><br></pre></td></tr></table></figure><h5 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h5><p>java 中（spring）要实现默认参数的效果得这么做：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/page"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">page</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @RequestParam(defaultValue=<span class="string">"1"</span>)</span> <span class="keyword">int</span> page, </span></span><br><span class="line"><span class="function">        @<span class="title">RequestParam</span><span class="params">(defaultValue=<span class="string">"10"</span>)</span> <span class="keyword">int</span> size</span></span><br><span class="line"><span class="function">    )</span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pagination</span>(<span class="params">page = <span class="number">1</span>, size = <span class="number">10</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(page, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h5><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">参数</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">return</span> 结果;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>第一种场景：定义完毕后立刻调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;)(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>第二种场景：作为其它对象的方法，例如</p><p>页面有元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>点我啊<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此元素有一个 onclick 方法，会在鼠标单击这个元素后被执行，onclick 方法刚开始是 null，需要赋值后才能使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>).onclick = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"鼠标单击了..."</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(参数) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">    <span class="keyword">return</span> 结果;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果没有参数，() 还是要保留</li><li>如果只有一个参数，() 可以省略</li><li>如果函数体内只有一行代码，{} 可以省略</li><li>如果这一行代码就是结果，return 可以省略</li></ul><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>).onclick = <span class="function"><span class="params">()</span> =&gt;</span>  <span class="built_in">console</span>.log(<span class="string">"aa"</span>);</span><br></pre></td></tr></table></figure><h5 id="函数是对象"><a href="#函数是对象" class="headerlink" title="函数是对象"></a>函数是对象</h5><p>以下形式在 js 中非常常见！</p><ol><li>可以参与赋值，例，具名函数也能参与赋值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"bb"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>).onclick = abc;</span><br></pre></td></tr></table></figure><ol start="2"><li>有属性、有方法，执行 <code>console.dir(abc)</code>，输出结果如下</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ƒ abc()</span><br><span class="line">    arguments: null</span><br><span class="line">    caller: null</span><br><span class="line">    length: 0</span><br><span class="line">    name: &quot;abc&quot;</span><br><span class="line">    ➡prototype: &#123;constructor: ƒ&#125;</span><br><span class="line">    [[FunctionLocation]]: VM1962:1</span><br><span class="line">    ➡[[Prototype]]: ƒ ()</span><br><span class="line">    ➡[[Scopes]]: Scopes[1]</span><br></pre></td></tr></table></figure><ul><li><p>其中带有 f 标记的是方法，不带的是属性</p></li><li><p>带有 ➡ 符号的可以继续展开，限于篇幅省略了</p></li><li><p>带有 <code>[[ ]]</code> 的是内置属性，不能访问，只能查看</p></li><li><p>相对重要的是 <code>[[Prototype]]</code> 和 <code>[[Scopes]]</code> 会在后面继承和作用域时讲到</p></li></ul><ol start="3"><li>可以作为方法参数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">fn</span>) </span>&#123;          <span class="comment">// fn 将来可以是一个函数对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'b'</span>)</span><br><span class="line">    fn();                 <span class="comment">// 调用函数对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b(a)</span><br></pre></td></tr></table></figure><ol start="4"><li>可以作为方法返回值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"c"</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"d"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c()()</span><br></pre></td></tr></table></figure><h5 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h5><p>函数可以嵌套（js 代码中很常见，只是嵌套的形式更多是匿名函数，箭头函数）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下面的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> z = <span class="number">30</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">20</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 看这里</span></span><br><span class="line">        <span class="built_in">console</span>.log(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    b();</span><br><span class="line">&#125;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure><ul><li>以函数为分界线划定作用域，所有函数之外是全局作用域</li><li>查找变量时，由内向外查找<ul><li>在内层作用域找到变量，就会停止查找，不会再找外层</li><li>所有作用域都找不到变量，报错</li></ul></li><li>作用域本质上是函数对象的属性，可以通过 console.dir 来查看调试</li></ul><h5 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">20</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">a()();  <span class="comment">// 在外面执行了 b</span></span><br></pre></td></tr></table></figure><ul><li>函数定义时，它的作用域已经确定好了，因此无论函数将来去了哪，都能从它的作用域中找到当时那些变量</li><li>别被概念忽悠了，闭包就是指<strong>函数能够访问自己的作用域中变量</strong></li></ul><h5 id="let、var-与作用域"><a href="#let、var-与作用域" class="headerlink" title="let、var 与作用域"></a>let、var 与作用域</h5><p>如果函数外层引用的是 let 变量，那么外层普通的 {} 也会作为作用域边界，最外层的 let 也占一个 script 作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> y = <span class="number">20</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.dir(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果函数外层引用的是 var 变量，外层普通的 {} 不会视为边界</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">20</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.dir(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 var 变量出现了重名，则他俩会被视为同一作用域中的同一个变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> e = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(e);<span class="comment">// 打印 20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(e);<span class="comment">// 因为是同一个变量，还是打印 20</span></span><br></pre></td></tr></table></figure><p>如果是 let，则视为两个作用域中的两个变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> e = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> e = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(e);<span class="comment">// 打印 20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(e);<span class="comment">// 打印 10</span></span><br></pre></td></tr></table></figure><p>要想里面的 e 和外面的 e 能区分开来，最简单的办法是改成 let，或者用函数来界定作用域范围</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> e = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">    &#125;</span><br><span class="line">    b();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(e);</span><br></pre></td></tr></table></figure><h4 id="2-Array-star"><a href="#2-Array-star" class="headerlink" title="2) Array :star:"></a>2) Array :star:</h4><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组元素</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]); <span class="comment">// 输出 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改数组元素</span></span><br><span class="line">array[<span class="number">0</span>] = <span class="number">5</span>; <span class="comment">// 数组元素变成了 [5,2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历数组元素，其中 length 是数组属性，代表数组长度</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>API</p><ul><li>push、shift、splice</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; </span><br><span class="line"></span><br><span class="line">arr.push(<span class="number">4</span>);    <span class="comment">// 向数组尾部(右侧)添加元素, 结果 [1,2,3,4]</span></span><br><span class="line">arr.shift();<span class="comment">// 从数组头部(左侧)移除元素, 结果 [2,3,4]</span></span><br><span class="line">arr.splice(<span class="number">1</span>,<span class="number">1</span>);<span class="comment">// 删除【参数1】索引位置的【参数2】个元素，结果 [2,4]</span></span><br></pre></td></tr></table></figure><ul><li>join</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line"></span><br><span class="line">arr.join(); <span class="comment">// 默认使用【,】作为连接符，结果 'a,b,c'</span></span><br><span class="line">arr.join(<span class="string">''</span>);<span class="comment">// 结果 'abc'</span></span><br><span class="line">arr.join(<span class="string">'-'</span>);<span class="comment">// 结果 'a-b-c'</span></span><br></pre></td></tr></table></figure><ul><li>map、filter、forEach</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">i</span>) </span>&#123;   <span class="comment">// 代表的新旧元素之间的变换规则</span></span><br><span class="line">    <span class="keyword">return</span> i * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// arr.map(a) // 具名函数，结果 [10,20,30,60]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// arr.map( (i) =&gt; &#123;return i * 10&#125; ); // 箭头函数</span></span><br><span class="line">arr.map( <span class="function"><span class="params">i</span> =&gt;</span> i * <span class="number">10</span> ); <span class="comment">// 箭头函数</span></span><br></pre></td></tr></table></figure><ul><li>传给 map 的函数，参数代表旧元素，返回值代表新元素</li></ul><p>map 的内部实现（伪代码）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params">a</span>) </span>&#123; <span class="comment">// 参数是一个函数</span></span><br><span class="line">    <span class="keyword">let</span> narr = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> o = arr[i]; <span class="comment">// 旧元素</span></span><br><span class="line">        <span class="keyword">let</span> n = a(o);   <span class="comment">// 新元素</span></span><br><span class="line">        narr.push(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> narr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>filter 例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>];</span><br><span class="line">arr.filter( <span class="function">(<span class="params">i</span>)=&gt;</span> i % <span class="number">2</span> == <span class="number">1</span> ); <span class="comment">// 结果 [1,3]</span></span><br></pre></td></tr></table></figure><ul><li>传给 filter 的函数，参数代表旧元素，返回 true 表示要留下的元素</li></ul><p>forEach 例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*for(let i = 0; i &lt; arr.length; i++) &#123;</span></span><br><span class="line"><span class="comment">    console.log(arr[i]);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line">arr.forEach( <span class="function">(<span class="params">i</span>) =&gt;</span> <span class="built_in">console</span>.log(i) );</span><br></pre></td></tr></table></figure><p>两个称呼</p><ul><li>高阶函数，map，filter，forEach</li><li>回调函数，例如作为参数传入的函数</li></ul><h4 id="3-Object-star-star"><a href="#3-Object-star-star" class="headerlink" title="3) Object :star::star:"></a>3) Object :star::star:</h4><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    属性名: 值,</span><br><span class="line">    方法名: 函数,</span><br><span class="line">    <span class="keyword">get</span> 属性名() &#123;&#125;,</span><br><span class="line">    <span class="keyword">set</span> 属性名(新值) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu1 = &#123;</span><br><span class="line">    name: <span class="string">"小明"</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    study: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"爱学习"</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"小黑"</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> study = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"爱学习"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stu2 = &#123; name, age, study &#125;</span><br></pre></td></tr></table></figure><p>例3（重点）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu3 = &#123;</span><br><span class="line">    name: <span class="string">"小白"</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    study()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"爱学习"</span>);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：对象方法这么写，仅限于对象内部</li></ul><p>例4</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu4 = &#123;</span><br><span class="line">    _name: <span class="literal">null</span>, <span class="comment">/*类似于java中私有成员变量*/</span></span><br><span class="line">    <span class="keyword">get</span> name() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"进入了get"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._name;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> name(name) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"进入了set"</span>);</span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 get，set</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stu4.name = <span class="string">"小白"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(stu4.name)</span><br></pre></td></tr></table></figure><h5 id="特色：属性增删"><a href="#特色：属性增删" class="headerlink" title="特色：属性增删"></a>特色：属性增删</h5><p>对比一下 Java 中的 Object</p><ul><li>Java 的 Object 是以类作为模板来创建，对象不能脱离类模板的范围，一个对象的属性、能用的方法都是确定好的</li><li>js 的对象，不需要什么模板，它的属性和方法可以随时加减</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;<span class="attr">name</span>:<span class="string">'张三'</span>&#125;;</span><br><span class="line">stu.age = <span class="number">18</span>;<span class="comment">// 添加属性</span></span><br><span class="line"><span class="keyword">delete</span> stu.age;<span class="comment">// 删除属性</span></span><br><span class="line"></span><br><span class="line">stu.study = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">// 添加方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"在学习"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加 get，set，需要借助 Object.definePropery</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;<span class="attr">_name</span>:<span class="literal">null</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(stu, <span class="string">"name"</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._name;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>(name)&#123;</span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>参数1：目标对象</li><li>参数2：属性名</li><li>参数3：get，set 的定义</li></ul><h5 id="特色：this"><a href="#特色：this" class="headerlink" title="特色：this"></a>特色：this</h5><p>先来对 Java 中的 this 有个理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">(Student <span class="keyword">this</span>, String subject)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.name + <span class="string">"在学习 "</span> + subject);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student(<span class="string">"小明"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 下面的代码，本质上是执行 study(stu, "java")，因此 this 就是 stu</span></span><br><span class="line">        stu.study(<span class="string">"java"</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Java 中的 this 是个隐式参数</li><li>Java 中，我们说 this 代表的就是调用方法的那个对象</li></ul><p>js 中的 this 也是隐式参数，但它与函数运行时上下文相关</p><p>例如，一个“落单”的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">study</span>(<span class="params">subject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"在学习 "</span> + subject)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">study(<span class="string">"js"</span>);  <span class="comment">// 输出 在学习 js</span></span><br></pre></td></tr></table></figure><p>这是因为此时函数执行，全局对象 window 被当作了 this，window 对象的 name 属性是空串</p><p>同样的函数，如果作为对象的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;</span><br><span class="line">    name:<span class="string">"小白"</span>,</span><br><span class="line">    study</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种情况下，会将当前对象作为 this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stu.study(<span class="string">'js'</span>); <span class="comment">// 输出 小白在学习 js</span></span><br></pre></td></tr></table></figure><p>还可以动态改变 this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;<span class="attr">name</span>:<span class="string">"小黑"</span>&#125;;</span><br><span class="line">study.call(stu, <span class="string">"js"</span>);<span class="comment">// 输出 小黑在学习 js</span></span><br></pre></td></tr></table></figure><p>这回 study 执行时，就把 call 的第一个参数 stu 作为 this</p><p>一个例外是，在<strong>箭头函数</strong>内出现的 this，以外层 this 理解 </p><p>用匿名函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;</span><br><span class="line">    name: <span class="string">"小花"</span>,</span><br><span class="line">    friends: [<span class="string">"小白"</span>,<span class="string">"小黑"</span>,<span class="string">"小明"</span>],</span><br><span class="line">    play() &#123;</span><br><span class="line">        <span class="keyword">this</span>.friends.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"与"</span> + e + <span class="string">"在玩耍"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">stu.play()</span><br></pre></td></tr></table></figure><ul><li>this.name 所在的函数是【落单】的函数，因此 this 代表 window</li></ul><p>输出结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">与小白在玩耍</span><br><span class="line">与小黑在玩耍</span><br><span class="line">与小明在玩耍</span><br></pre></td></tr></table></figure><p>用箭头函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;</span><br><span class="line">    name: <span class="string">"小花"</span>,</span><br><span class="line">    friends: [<span class="string">"小白"</span>,<span class="string">"小黑"</span>,<span class="string">"小明"</span>],</span><br><span class="line">    play() &#123;</span><br><span class="line">        <span class="keyword">this</span>.friends.forEach(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"与"</span> + e + <span class="string">"在玩耍"</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>this.name 所在的函数是箭头函数，因此 this 要看它外层的 play 函数，play 又是属于 stu 的方法，因此 this 代表 stu 对象</li></ul><p>输出结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">小花与小白在玩耍</span><br><span class="line">小花与小黑在玩耍</span><br><span class="line">小花与小明在玩耍</span><br></pre></td></tr></table></figure><p>不用箭头函数的做法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu = &#123;</span><br><span class="line">    name: <span class="string">"小花"</span>,</span><br><span class="line">    friends: [<span class="string">"小白"</span>,<span class="string">"小黑"</span>,<span class="string">"小明"</span>],</span><br><span class="line">    play() &#123;</span><br><span class="line">        <span class="keyword">let</span> me = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">this</span>.friends.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(me.name + <span class="string">"与"</span> + e + <span class="string">"在玩耍"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="特色：原型继承"><a href="#特色：原型继承" class="headerlink" title="特色：原型继承"></a>特色：原型继承</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> father = &#123;</span><br><span class="line">    f1: <span class="string">'父属性'</span>,</span><br><span class="line">    m1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"父方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> son = <span class="built_in">Object</span>.create(father);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(son.f1);  <span class="comment">// 打印 父属性</span></span><br><span class="line">son.m1();  <span class="comment">// 打印 父方法</span></span><br></pre></td></tr></table></figure><ul><li>father 是父对象，son 去调用 .m1 或 .f1 时，自身对象没有，就到父对象找</li><li>son 自己可以添加自己的属性和方法</li><li>son 里有特殊属性 <code>__proto__</code> 代表它的父对象，js 术语： son 的原型对象</li><li>不同浏览器对打印 son 的 <code>__proto__</code> 属性时显示不同<ul><li>Edge 打印 console.dir(son) 显示 <code>[[Prototype]]</code></li><li>Firefox 打印 console.dir(son) 显示 <code>&lt;prototype&gt;</code></li></ul></li></ul><h5 id="特色：基于函数的原型继承"><a href="#特色：基于函数的原型继承" class="headerlink" title="特色：基于函数的原型继承"></a>特色：基于函数的原型继承</h5><p>出于方便的原因，js 又提供了一种基于函数的原型继承</p><blockquote><p><strong>函数职责</strong></p><ol><li><p>负责创建子对象，给子对象提供属性、方法，功能上相当于构造方法</p></li><li><p>函数有个特殊的属性 prototype，它就是函数创建的子对象的父对象</p><p><strong>注意！</strong>名字有差异，这个属性的作用就是为新对象提供原型</p></li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cons</span>(<span class="params">f2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建子对象(this), 给子对象提供属性和方法</span></span><br><span class="line">    <span class="keyword">this</span>.f2 = f2;</span><br><span class="line">    <span class="keyword">this</span>.m2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"子方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cons.prototype 就是父对象</span></span><br><span class="line">cons.prototype.f1 = <span class="string">"父属性"</span>;</span><br><span class="line">cons.prototype.m1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"父方法"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配合 new 关键字，创建子对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> cons(<span class="string">"子属性"</span>)</span><br></pre></td></tr></table></figure><p>子对象的 <code>__proto__</code> 就是函数的 <code>prototype</code> 属性</p><h5 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h5><p>之前我们讲 http 请求格式时，讲过 json 这种数据格式，它的语法看起来与 js 对象非常相似，例如：</p><p>一个 json 对象可以长这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>:<span class="string">"张三"</span>,</span><br><span class="line">    <span class="attr">"age"</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个 js 对象长这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name:<span class="string">"张三"</span>,</span><br><span class="line">    age:<span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么他们的区别在哪儿呢？我总结了这么几点</p><ol><li>本质不同<ul><li>json 对象本质上是个字符串，它的职责是作为客户端和服务器之间传递数据的一种格式，它的属性只是样子货</li><li>js 对象是切切实实的对象，可以有属性方法</li></ul></li><li>语法细节不同<ul><li>json 中只能有 null、true|false、数字、字符串（只有双引号）、对象、数组</li><li>json 中不能有除以上的其它 js 对象的特性，如方法等</li><li>json 中的属性必须用双引号引起来</li></ul></li></ol><p>json 字符串与 js 对象的转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.parse(json字符串);  <span class="comment">// 返回js对象</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(js对象);  <span class="comment">// 返回json字符串</span></span><br></pre></td></tr></table></figure><h3 id="动态类型"><a href="#动态类型" class="headerlink" title="动态类型"></a>动态类型</h3><p>静态类型语言，如 Java，值有类型，变量也有类型、赋值给变量时，类型要相符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">String b = <span class="string">"abc"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c = <span class="string">"abc"</span>;  <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><p>而 js 属于动态类型语言，值有类型，但变量没有类型，赋值给变量时，没要求</p><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">100</span>;</span><br><span class="line">b = <span class="string">'abc'</span>;</span><br><span class="line">b = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>动态类型看起来比较灵活，但变量没有类型，会给后期维护带来困难，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// obj 的类型未知，必须根据不同类型做出相应的容错处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-运算符与表达式"><a href="#2-运算符与表达式" class="headerlink" title="2. 运算符与表达式"></a>2. 运算符与表达式</h2><ul><li><code>+ - * / % **</code></li><li><code>+= -= *= /= %= **=</code></li><li><code>++ --</code></li><li>位运算、移位运算</li><li><code>== != &gt; &gt;= &lt; &lt;=</code></li><li><code>=== !==</code> :star:</li><li><code>&amp;&amp; || !</code> :star:</li><li><code>?? ?.</code> :star:</li><li><code>...</code> :star:</li><li>解构赋值 :star:</li></ul><h3 id="1"><a href="#1" class="headerlink" title="1) ==="></a>1) ===</h3><p>严格相等运算符，用作逻辑判等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> == <span class="number">1</span>    <span class="comment">// 返回 true </span></span><br><span class="line"><span class="number">1</span> == <span class="string">'1'</span><span class="comment">// 返回 true，会先将右侧的字符串转为数字，再做比较</span></span><br><span class="line"><span class="number">1</span> === <span class="string">'1'</span><span class="comment">// 返回 false，类型不等，直接返回 false</span></span><br></pre></td></tr></table></figure><p>typeof 查看某个值的类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">1</span><span class="comment">// 返回 'number'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">'1'</span><span class="comment">// 返回 'string'</span></span><br></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2) ||"></a>2) ||</h3><p>需求，如果参数 n 没有传递，给它一个【男】</p><p><strong>推荐</strong>做法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">n = <span class="string">'男'</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可能的做法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        n = <span class="string">'男'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可能是这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    n = (n === <span class="literal">undefined</span>) ? <span class="string">'男'</span> : n;</span><br><span class="line">    <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一些老旧代码中可能的做法（不推荐）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    n = n || <span class="string">'男'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的语法是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">值<span class="number">1</span> || 值<span class="number">2</span></span><br></pre></td></tr></table></figure><p>如果值1 是 Truthy，返回值1，如果值1 是 Falsy 返回值 2</p><h3 id="3-与"><a href="#3-与" class="headerlink" title="3) ?? 与 ?."></a>3) ?? 与 ?.</h3><h4 id><a href="#" class="headerlink" title="??"></a>??</h4><p>需求，如果参数 n 没有传递或是 null，给它一个【男】</p><p>如果用传统办法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n === <span class="literal">undefined</span> || n === <span class="literal">null</span>) &#123;</span><br><span class="line">        n = <span class="string">'男'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 ??</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    n = n ?? <span class="string">'男'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">值1 ?? 值2</span><br></pre></td></tr></table></figure><ul><li>值1 是 nullish，返回值2</li><li>值1 不是 nullish，返回值1</li></ul><h4 id="-1"><a href="#-1" class="headerlink" title="?."></a>?.</h4><p>需求，函数参数是一个对象，可能包含有子属性</p><p>例如，参数可能是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu1 = &#123;</span><br><span class="line">    name:<span class="string">"张三"</span>,</span><br><span class="line">    address: &#123;</span><br><span class="line">        city: <span class="string">'北京'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stu2 = &#123;</span><br><span class="line">    name:<span class="string">"李四"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stu3 = &#123;</span><br><span class="line">    name:<span class="string">"李四"</span>,</span><br><span class="line">    address: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在要访问子属性（有问题）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">stu</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(stu.address.city)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在希望当某个属性是 nullish 时，短路并返回 undefined，可以用 ?.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">stu</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(stu.address?.city)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用传统办法 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">stu</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(stu.address === <span class="literal">undefined</span> || stu.address === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="literal">undefined</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(stu.address.city)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-…"><a href="#4-…" class="headerlink" title="4) …"></a>4) …</h3><p>展开运算符</p><p>作用1：打散数组，把元素传递给多个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b,c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a,b,c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需求，把数组元素依次传递给函数参数</p><p>传统写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test(arr[<span class="number">0</span>],arr[<span class="number">1</span>],arr[<span class="number">2</span>]);<span class="comment">// 输出 1,2,3</span></span><br></pre></td></tr></table></figure><p>展开运算符写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test(...arr);<span class="comment">// 输出 1,2,3</span></span><br></pre></td></tr></table></figure><ul><li>打散可以理解为【去掉了】数组外侧的中括号，只剩下数组元素</li></ul><p>作用2：复制数组或对象</p><p>数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [...arr1];<span class="comment">// 复制数组</span></span><br></pre></td></tr></table></figure><p>对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">name</span>:<span class="string">'张三'</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;...obj1&#125;;<span class="comment">// 复制对象</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：展开运算符复制属于浅拷贝，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;<span class="attr">name</span>:<span class="string">'张三'</span>, <span class="attr">address</span>: &#123;<span class="attr">city</span>: <span class="string">'北京'</span>&#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o2 = &#123;...o1&#125;;</span><br></pre></td></tr></table></figure><p>作用3：合并数组或对象</p><p>合并数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a1 = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> a2 = [<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b1 = [...a1,...a2];<span class="comment">// 结果 [1,2,3,4]</span></span><br><span class="line"><span class="keyword">let</span> b2 = [...a2,<span class="number">5</span>,...a1]<span class="comment">// 结果 [3,4,5,1,2]</span></span><br></pre></td></tr></table></figure><p>合并对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;<span class="attr">name</span>:<span class="string">'张三'</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> o2 = &#123;<span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> o3 = &#123;<span class="attr">name</span>:<span class="string">'李四'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> n1 = &#123;...o1, ...o2&#125;;<span class="comment">// 结果 &#123;name:'张三',age:18&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> n2 = &#123;...o3, ...o2, ...o1&#125;; <span class="comment">// 结果&#123;name:'李四',age:18&#125;</span></span><br></pre></td></tr></table></figure><ul><li>复制对象时出现同名属性，后面的会覆盖前面的</li></ul><h3 id="5"><a href="#5" class="headerlink" title="5) [] {}"></a>5) [] {}</h3><p>解构赋值</p><h4 id="-2"><a href="#-2" class="headerlink" title="[]"></a>[]</h4><p>用在声明变量时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = arr;<span class="comment">// 结果 a=1, b=2, c=3</span></span><br></pre></td></tr></table></figure><p>用在声明参数时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">[a,b,c]</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a,b,c) <span class="comment">// 结果 a=1, b=2, c=3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(arr);</span><br></pre></td></tr></table></figure><h4 id="-3"><a href="#-3" class="headerlink" title="{}"></a>{}</h4><p>用在声明变量时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">"张三"</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name,age&#125; = obj;<span class="comment">// 结果 name=张三, age=18</span></span><br></pre></td></tr></table></figure><p>用在声明参数时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">"张三"</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">&#123;name, age&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name, age); <span class="comment">// 结果 name=张三, age=18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(obj)</span><br></pre></td></tr></table></figure><h2 id="3-控制语句"><a href="#3-控制语句" class="headerlink" title="3. 控制语句"></a>3. 控制语句</h2><ul><li><code>if ... else</code></li><li><code>switch</code></li><li><code>while</code></li><li><code>do ... while</code></li><li><code>for</code> </li><li><code>for ... in</code> :star:</li><li><code>for ... of</code> :star:</li><li><code>try ... catch</code> :star:</li></ul><h3 id="1-for-in"><a href="#1-for-in" class="headerlink" title="1) for in"></a>1) for in</h3><p>主要用来遍历对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> father = &#123;<span class="attr">name</span>:<span class="string">'张三'</span>, <span class="attr">age</span>:<span class="number">18</span>, <span class="attr">study</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> n <span class="keyword">in</span> father) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其中 const n 代表遍历出来的属性名</li><li>注意1：方法名也能被遍历出来（它其实也算一种特殊属性）</li><li>注意2：遍历子对象时，父对象的属性会跟着遍历出来</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> son = <span class="built_in">Object</span>.create(father);</span><br><span class="line">son.sex = <span class="string">"男"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> n <span class="keyword">in</span> son) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意3：在 for in 内获取属性值，要使用 [] 语法，而不能用 . 语法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> n <span class="keyword">in</span> son) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(n, son[n]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-for-of"><a href="#2-for-of" class="headerlink" title="2) for of"></a>2) for of</h3><p>主要用来遍历数组，也可以是其它可迭代对象，如 Map，Set 等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">of</span> a1) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a2 = [</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">'张三'</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">'李四'</span>, <span class="attr">age</span>:<span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">'王五'</span>, <span class="attr">age</span>:<span class="number">22</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> obj <span class="keyword">of</span> a2) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj.name, obj.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> &#123;name,age&#125; <span class="keyword">of</span> a2) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-try-catch"><a href="#3-try-catch" class="headerlink" title="3) try catch"></a>3) try catch</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stu1 = &#123;<span class="attr">name</span>:<span class="string">'张三'</span>, <span class="attr">age</span>:<span class="number">18</span>, <span class="attr">address</span>: &#123;<span class="attr">city</span>:<span class="string">'北京'</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">let</span> stu2 = &#123;<span class="attr">name</span>:<span class="string">'张三'</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">stu</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(stu.address.city)   </span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'出现了异常'</span>, e.message)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'finally'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-API"><a href="#4-API" class="headerlink" title="4. API"></a>4. API</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="1-安装-nvm"><a href="#1-安装-nvm" class="headerlink" title="1) 安装 nvm"></a>1) 安装 nvm</h4><p>nvm 即 (node version manager)，好处是方便切换 node.js 版本</p><p>安装注意事项</p><ol><li>要卸载掉现有的 nodejs</li><li>提示选择 nvm 和 nodejs 目录时，一定要避免目录中出现空格</li><li>选用【以管理员身份运行】cmd 程序来执行 nvm 命令</li><li>首次运行前设置好国内镜像地址</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm node_mirror http://npm.taobao.org/mirrors/node/</span><br><span class="line">nvm npm_mirror https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure><p>首先查看有哪些可用版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm list available</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">|   CURRENT    |     LTS      |  OLD STABLE  | OLD UNSTABLE |</span><br><span class="line">|--------------|--------------|--------------|--------------|</span><br><span class="line">|    18.7.0    |   16.16.0    |   0.12.18    |   0.11.16    |</span><br><span class="line">|    18.6.0    |   16.15.1    |   0.12.17    |   0.11.15    |</span><br><span class="line">|    18.5.0    |   16.15.0    |   0.12.16    |   0.11.14    |</span><br><span class="line">|    18.4.0    |   16.14.2    |   0.12.15    |   0.11.13    |</span><br><span class="line">|    18.3.0    |   16.14.1    |   0.12.14    |   0.11.12    |</span><br><span class="line">|    18.2.0    |   16.14.0    |   0.12.13    |   0.11.11    |</span><br><span class="line">|    18.1.0    |   16.13.2    |   0.12.12    |   0.11.10    |</span><br><span class="line">|    18.0.0    |   16.13.1    |   0.12.11    |    0.11.9    |</span><br><span class="line">|    17.9.1    |   16.13.0    |   0.12.10    |    0.11.8    |</span><br><span class="line">|    17.9.0    |   14.20.0    |    0.12.9    |    0.11.7    |</span><br><span class="line">|    17.8.0    |   14.19.3    |    0.12.8    |    0.11.6    |</span><br><span class="line">|    17.7.2    |   14.19.2    |    0.12.7    |    0.11.5    |</span><br><span class="line">|    17.7.1    |   14.19.1    |    0.12.6    |    0.11.4    |</span><br><span class="line">|    17.7.0    |   14.19.0    |    0.12.5    |    0.11.3    |</span><br><span class="line">|    17.6.0    |   14.18.3    |    0.12.4    |    0.11.2    |</span><br><span class="line">|    17.5.0    |   14.18.2    |    0.12.3    |    0.11.1    |</span><br><span class="line">|    17.4.0    |   14.18.1    |    0.12.2    |    0.11.0    |</span><br><span class="line">|    17.3.1    |   14.18.0    |    0.12.1    |    0.9.12    |</span><br><span class="line">|    17.3.0    |   14.17.6    |    0.12.0    |    0.9.11    |</span><br><span class="line">|    17.2.0    |   14.17.5    |   0.10.48    |    0.9.10    |</span><br></pre></td></tr></table></figure><p>建议安装 LTS（长期支持版）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm install 16.16.0</span><br><span class="line">nvm install 14.20.0</span><br></pre></td></tr></table></figure><p>执行 <code>nvm list</code> 会列出已安装版本</p><p>切换到 16.16.0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 16.16.0</span><br></pre></td></tr></table></figure><p>切换到 14.20.0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 14.20.0</span><br></pre></td></tr></table></figure><p>安装后 nvm 自己的环境变量会自动添加，但可能需要手工添加 nodejs 的 PATH 环境变量</p><h4 id="2-检查-npm"><a href="#2-检查-npm" class="headerlink" title="2) 检查 npm"></a>2) 检查 npm</h4><p>npm 是 js 的包管理器，就类似于 java 界的 maven，要确保它使用的是国内镜像</p><p>检查镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm get registry</span><br></pre></td></tr></table></figure><p>如果返回的不是 <code>https://registry.npm.taobao.org/</code>，需要做如下设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure><h4 id="3-搭建前端服务器"><a href="#3-搭建前端服务器" class="headerlink" title="3) 搭建前端服务器"></a>3) 搭建前端服务器</h4><p>新建一个保存项目的 client 文件夹，进入文件夹执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express --save-dev</span><br></pre></td></tr></table></figure><p>修改 package.json 文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"module"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"express"</span>: <span class="string">"^4.18.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其中 devDependencies 是 npm install –save-dev 添加的</li></ul><p>编写 main.js 代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">'express'</span></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(express.static(<span class="string">'./'</span>))</span><br><span class="line">app.listen(<span class="number">7070</span>)</span><br></pre></td></tr></table></figure><p>执行 js 代码（运行前端服务器）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node main.js</span><br></pre></td></tr></table></figure><h3 id="前端案例"><a href="#前端案例" class="headerlink" title="前端案例"></a>前端案例</h3><p>初步效果</p><p><img src="https://s1.ax1x.com/2022/10/21/xcKwEF.png" alt="image-20220812103323220"></p><p>架构</p><p><img src="https://s1.ax1x.com/2022/10/21/xcKNuV.png" alt="image-20220812103219916"></p><ul><li>前端只有静态页面，使用 Express 服务器</li><li>后端使用 Tomcat 服务器，通过 SpringBoot、MyBatis 等框架获取数据库数据</li></ul><h4 id="1-查找元素"><a href="#1-查找元素" class="headerlink" title="1) 查找元素"></a>1) 查找元素</h4><ul><li>document.getElementById - 根据 id 值查找一个元素</li><li>[document|元素].querySelector - 根据选择器查找第一个匹配元素</li><li>[document|元素].querySelectorAll - 根据选择器查找所有匹配元素</li></ul><p>例如，有下面的 html 代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>学生列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"thead"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row bold"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tbody"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>18<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.title'</span>); <span class="comment">// 找到 &lt;div class="title"&gt;学生列表&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.col'</span>); <span class="comment">// 找到 &lt;div class="col"&gt;编号&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'.col'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  找到的是一个集合</span></span><br><span class="line"><span class="comment">  &lt;div class="col"&gt;编号&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class="col"&gt;姓名&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class="col"&gt;性别&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class="col"&gt;年龄&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class="col"&gt;1&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class="col"&gt;张三&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class="col"&gt;男&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class="col"&gt;18&lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> thead = <span class="built_in">document</span>.querySelector(<span class="string">'.thead'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只在 thead 元素范围内找</span></span><br><span class="line">thead.querySelectorAll(<span class="string">'.col'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  找到的是一个集合</span></span><br><span class="line"><span class="comment">  &lt;div class="col"&gt;编号&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class="col"&gt;姓名&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class="col"&gt;性别&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;div class="col"&gt;年龄&lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>根据 id 属性查找既可以用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"id值"</span>)</span><br></pre></td></tr></table></figure><p>也可以用 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">"#id值"</span>)</span><br></pre></td></tr></table></figure><h4 id="2-修改元素内容"><a href="#2-修改元素内容" class="headerlink" title="2) 修改元素内容"></a>2) 修改元素内容</h4><ul><li>元素.innerHTML</li><li>元素.textContent</li></ul><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'.title'</span>).innerHTML = <span class="string">'侠客列表'</span></span><br></pre></td></tr></table></figure><p>效果</p><p><img src="https://s1.ax1x.com/2022/10/21/xcKUBT.png" alt="image-20220812161003958"></p><p>innerHTML  会解析内容中的标签，例如</p><p><img src="https://s1.ax1x.com/2022/10/21/xcK0N4.png" alt="image-20220812161137912"></p><p>textContext 不会解析内容中的标签</p><p><img src="https://s1.ax1x.com/2022/10/21/xcKaHU.png" alt="image-20220812161341825"></p><p>给 innerHTML 或 textContent 赋值空串，可以实现清空标签内容的效果</p><h4 id="3-利用模板"><a href="#3-利用模板" class="headerlink" title="3) 利用模板"></a>3) 利用模板</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>学生列表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"thead"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row bold"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tbody"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"tp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>xx<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 将来这些数据从 java 端返回</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> array = [</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'张三'</span>, <span class="attr">sex</span>: <span class="string">'男'</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'李四'</span>, <span class="attr">sex</span>: <span class="string">'女'</span>, <span class="attr">age</span>: <span class="number">17</span> &#125;</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> tp = <span class="built_in">document</span>.getElementById(<span class="string">"tp"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> row = tp.content;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> [c1,c2,c3,c4] = row.querySelectorAll(<span class="string">".col"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> tbody = <span class="built_in">document</span>.querySelector(<span class="string">'.tbody'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span>(<span class="keyword">const</span> &#123;id,name,sex,age&#125; <span class="keyword">of</span> array) &#123;</span></span><br><span class="line">        c1.textContent = id;</span><br><span class="line">        c2.textContent = name;</span><br><span class="line">        c3.textContent = sex;</span><br><span class="line">        c4.textContent = age;</span><br><span class="line"><span class="javascript">        <span class="comment">// 复制元素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> newRow = <span class="built_in">document</span>.importNode(row, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 建立父子关系，左边父，右边子</span></span></span><br><span class="line">        tbody.appendChild(newRow);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-Fetch-API"><a href="#4-Fetch-API" class="headerlink" title="4) Fetch API"></a>4) Fetch API</h4><p>Fetch API 可以用来获取远程数据，它有两种方式接收结果，同步方式与异步方式</p><p>格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fetch(url, options) <span class="comment">// 返回 Promise</span></span><br></pre></td></tr></table></figure><p>同步方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> 结果 = <span class="keyword">await</span> <span class="built_in">Promise</span></span><br><span class="line"><span class="comment">// 后续代码</span></span><br></pre></td></tr></table></figure><ul><li>await 关键字必须在一个标记了 async 的 function 内来使用</li><li>后续代码不会在结果返回前执行</li></ul><p>异步方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span></span><br><span class="line">.then(结果 =&gt; &#123; ... &#125;)</span><br><span class="line"><span class="comment">// 后续代码</span></span><br></pre></td></tr></table></figure><ul><li>后续代码不必等待结果返回就可以执行</li></ul><p>例：</p><p>在 express 服务器上有 students.json 文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123; <span class="attr">"id"</span>: <span class="number">1</span>, <span class="attr">"name"</span>: <span class="string">"张三"</span>, <span class="attr">"sex"</span>: <span class="string">"男"</span>, <span class="attr">"age"</span>: <span class="number">18</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">"id"</span>: <span class="number">2</span>, <span class="attr">"name"</span>: <span class="string">"李四"</span>, <span class="attr">"sex"</span>: <span class="string">"女"</span>, <span class="attr">"age"</span>: <span class="number">17</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>现在用 fetch api 获取这些数据，并展示</p><p>同步方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">findStudents</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 获取响应对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> resp = <span class="keyword">await</span> fetch(<span class="string">'students.json'</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// 获取响应体, 按json格式转换为js数组</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> array = <span class="keyword">await</span> resp.json();</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">// 显示数据</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> tp = <span class="built_in">document</span>.getElementById(<span class="string">"tp"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> row = tp.content;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> [c1,c2,c3,c4] = row.querySelectorAll(<span class="string">".col"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> tbody = <span class="built_in">document</span>.querySelector(<span class="string">'.tbody'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">const</span> &#123;id,name,sex,age&#125; <span class="keyword">of</span> array) &#123;</span></span><br><span class="line">                c1.textContent = id;</span><br><span class="line">                c2.textContent = name;</span><br><span class="line">                c3.textContent = sex;</span><br><span class="line">                c4.textContent = age;</span><br><span class="line"><span class="javascript">                <span class="comment">// 复制元素</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> newRow = <span class="built_in">document</span>.importNode(row, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 建立父子关系</span></span></span><br><span class="line">                tbody.appendChild(newRow);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(e);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    findStudents()</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>fetch(‘students.json’) 内部会发送请求，但响应结果不能立刻返回，因此 await 就是等待响应结果返回</li><li>其中 resp.json() 也不是立刻能返回结果，它返回的也是 Promise 对象，也要配合 await 取结果</li></ul><p>异步方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    fetch(<span class="string">'students.json'</span>)</span></span><br><span class="line"><span class="javascript">        .then( <span class="function"><span class="params">resp</span> =&gt;</span> resp.json() )</span></span><br><span class="line"><span class="javascript">        .then( <span class="function"><span class="params">array</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 显示数据</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> tp = <span class="built_in">document</span>.getElementById(<span class="string">"tp"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> row = tp.content;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> [c1,c2,c3,c4] = row.querySelectorAll(<span class="string">".col"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> tbody = <span class="built_in">document</span>.querySelector(<span class="string">'.tbody'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">const</span> &#123;id,name,sex,age&#125; <span class="keyword">of</span> array) &#123;</span></span><br><span class="line">                c1.textContent = id;</span><br><span class="line">                c2.textContent = name;</span><br><span class="line">                c3.textContent = sex;</span><br><span class="line">                c4.textContent = age;</span><br><span class="line"><span class="javascript">                <span class="comment">// 复制元素</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> newRow = <span class="built_in">document</span>.importNode(row, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 建立父子关系</span></span></span><br><span class="line">                tbody.appendChild(newRow);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="javascript">        .catch( <span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e) )</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第一个 then 是在响应返回后，才会调用它里面的箭头函数，箭头函数参数即 resp  响应对象</li><li>第二个 then 是在 json 解析完成后，才会调用它里面的箭头函数，箭头函数参数即解析结果（本例是 array 数组）</li><li>上一个 then 返回的是 Promise 对象时，才能链式调用下一个 then</li></ul><h5 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h5><p><img src="https://s1.ax1x.com/2022/10/21/xcKB4J.png" alt="image-20220814105448882"></p><ul><li>只要协议、主机、端口之一不同，就不同源，例如<ul><li><a href="http://localhost:7070/a" target="_blank" rel="noopener">http://localhost:7070/a</a> 和 <a href="https://localhost:7070/b" target="_blank" rel="noopener">https://localhost:7070/b</a> 就不同源</li></ul></li><li>同源检查是浏览器的行为，而且只针对 fetch、xhr 请求<ul><li>如果是其它客户端，例如 java http client，postman，它们是不做同源检查的</li><li>通过表单提交、浏览器直接输入 url 地址这些方式发送的请求，也不会做同源检查</li></ul></li><li>更多相关知识请参考<ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS" target="_blank" rel="noopener">跨源资源共享（CORS） - HTTP | MDN (mozilla.org)</a></li></ul></li></ul><p>请求响应头解决</p><p><img src="https://s1.ax1x.com/2022/10/21/xcKrC9.png" alt="image-20220814144040703"></p><ul><li>fetch 请求跨域，会携带一个 Origin 头，代表【发请求的资源源自何处】，目标通过它就能辨别是否发生跨域<ul><li>我们的例子中：student.html 发送 fetch 请求，告诉 tomcat，我源自 localhost:7070</li></ul></li><li>目标资源通过返回 Access-Control-Allow-Origin 头，告诉浏览器【允许哪些源使用此响应】<ul><li>我们的例子中：tomcat 返回 fetch 响应，告诉浏览器，这个响应允许源自 localhost:7070 的资源使用</li></ul></li></ul><p>代理解决</p><p><img src="https://s1.ax1x.com/2022/10/21/xcKTgI.png" alt="image-20220814161532141"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install http-proxy-middleware --save-dev</span><br></pre></td></tr></table></figure><p>在 express 服务器启动代码中加入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createProxyMiddleware&#125; <span class="keyword">from</span> <span class="string">'http-proxy-middleware'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/api'</span>, createProxyMiddleware(&#123; <span class="attr">target</span>: <span class="string">'http://localhost:8080'</span>, <span class="attr">changeOrigin</span>: <span class="literal">true</span> &#125;));</span><br></pre></td></tr></table></figure><p>fetch 代码改为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> resp = <span class="keyword">await</span> fetch(<span class="string">'http://localhost:7070/api/students'</span>)</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> resp = <span class="keyword">await</span> fetch(<span class="string">'/api/students'</span>)</span><br></pre></td></tr></table></figure><h4 id="5-模块化"><a href="#5-模块化" class="headerlink" title="5) 模块化"></a>5) 模块化</h4><p>单个导出 const、let、function</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'c'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一齐导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'c'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;a,b,c&#125;</span><br></pre></td></tr></table></figure><p>导出 default，只能有一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'c'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> b;</span><br></pre></td></tr></table></figure><p>import 语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"module"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> 语句</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>import 需要遵循同源策略</li></ul><p>整个导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="built_in">module</span> <span class="keyword">from</span> <span class="string">'/1.js'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">module</span>.a)<span class="comment">// 输出10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">module</span>.b)<span class="comment">// 输出20</span></span><br><span class="line"><span class="built_in">module</span>.c()<span class="comment">// 输出c</span></span><br></pre></td></tr></table></figure><p>单个导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;a,c&#125; <span class="keyword">from</span> <span class="string">'/1.js'</span></span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">// 输出10</span></span><br><span class="line">c()<span class="comment">// 输出c</span></span><br></pre></td></tr></table></figure><p>导入默认</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> x <span class="keyword">from</span> <span class="string">'/1.js'</span></span><br><span class="line"><span class="built_in">console</span>.log(x)<span class="comment">// 输出20</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql主从复制————基于Docker的实现</title>
      <link href="/2022/09/21/Mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%9F%BA%E4%BA%8EDocker%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/09/21/Mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%9F%BA%E4%BA%8EDocker%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="主库"><a href="#主库" class="headerlink" title="主库"></a>主库</h2><p><strong>主库采用远程服务器中安装的Mysql 8.0.26</strong></p><h3 id="Step1-修改配置文件"><a href="#Step1-修改配置文件" class="headerlink" title="Step1 修改配置文件"></a>Step1 修改配置文件</h3><p>vi打开/etc/my.cnf写入👇</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log-bin=mysql-bin   #[必须]启用二进制日志</span><br><span class="line">server-id=100       #[必须]配置服务器ID，可自定</span><br></pre></td></tr></table></figure><h3 id="Step2-重启Mysql服务"><a href="#Step2-重启Mysql服务" class="headerlink" title="Step2 重启Mysql服务"></a>Step2 重启Mysql服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><h3 id="Step3-创建从库用户并授权"><a href="#Step3-创建从库用户并授权" class="headerlink" title="Step3 创建从库用户并授权"></a>Step3 创建从库用户并授权</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user ‘#userName’@’#host’ identified by ‘#passWord’;</span><br></pre></td></tr></table></figure><ul><li><strong>#userName</strong> 代表你要创建的此数据库的新用户账号</li><li><strong>#host</strong> 代表访问权限，如下：<ul><li><strong>%</strong> 代表通配所有host地址权限(可远程访问)</li><li><strong>localhost</strong> 为本地权限(不可远程访问)</li><li>指定特殊Ip访问权限 如10.138.106.102</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &apos;#userName&apos;@&apos;#host&apos;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="查看并记录主库状态"><a href="#查看并记录主库状态" class="headerlink" title="查看并记录主库状态"></a>查看并记录主库状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure><p>记录下<strong>File</strong>和<strong>Position</strong></p><h2 id="从库"><a href="#从库" class="headerlink" title="从库"></a>从库</h2><p>从库使用了Docker</p><h3 id="创建容器并挂在数据卷"><a href="#创建容器并挂在数据卷" class="headerlink" title="创建容器并挂在数据卷"></a>创建容器并挂在数据卷</h3><p>vi打开/etc/my.cnf写入👇</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -id \</span><br><span class="line">-p 3307:3306 \</span><br><span class="line">--name=c_mysql \</span><br><span class="line">-v $PWD/conf:/etc/mysql \</span><br><span class="line">-v $PWD/logs:/logs \</span><br><span class="line">-v $PWD/mysql-files:/var/lib/mysql-files \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=**** \</span><br><span class="line">mysql:8.0.26</span><br></pre></td></tr></table></figure><h3 id="修改从库配置文件"><a href="#修改从库配置文件" class="headerlink" title="修改从库配置文件"></a>修改从库配置文件</h3><p>vi打开$PWD/conf/my.cnf文件添加👇</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">## 设置serverid,同一个局域网内要唯一</span><br><span class="line">server_id=101</span><br><span class="line">##指定不需要同步的数据库名称</span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line">##开启二进制日志功能</span><br><span class="line">log-bin=mall-mysql-slave1-bin</span><br><span class="line">##设置二进制日志使用内存大小(事务)</span><br><span class="line">binlog_cache_size=1M</span><br><span class="line">##设置使用的二进制日志格式</span><br><span class="line">binlog_format=mixed</span><br><span class="line">##二进制日志过期清理时间</span><br><span class="line">expire_logs_days=7</span><br><span class="line">##跳过主从复制中所有错误或指定类型的错误，避免slave端复制中断</span><br><span class="line">###1062主键重复，1032主重数据不一致</span><br><span class="line">slave_skip_errors=1062</span><br><span class="line">##配置中继日志</span><br><span class="line">relay_log=mall-mysql-relay-bin</span><br><span class="line">##表示slave将复制事件写进自己的二进制日志</span><br><span class="line">log_slave_updates=1</span><br><span class="line">##slave设置为只读</span><br><span class="line">read_only=1</span><br></pre></td></tr></table></figure><h3 id="重启Docker容器"><a href="#重启Docker容器" class="headerlink" title="重启Docker容器"></a>重启Docker容器</h3><h3 id="开启从库Slave模式"><a href="#开启从库Slave模式" class="headerlink" title="开启从库Slave模式"></a>开启从库Slave模式</h3><p>进入容器Bash后登录数据库，执行👇</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">change master to master_host=&apos;****&apos;, master_user=&apos;slave&apos;, master_password=&apos;****&apos;, master_port=3306, master_log_file=&apos;mysql-bin.000004&apos;, master_log_pos=156;</span><br></pre></td></tr></table></figure><ul><li>master_log_file 参考主库状态的<strong>File</strong></li><li>master_log_pos 参考主库状态的<strong>Position</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start slave;</span><br></pre></td></tr></table></figure><p>查看是否开启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show slave status;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 后端 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/2022/09/19/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/09/19/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。<br>在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li><p><strong>意图</strong>：为其他对象提供一种代理以控制对这个对象的访问。</p></li><li><p><strong>主要解决</strong>：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。</p></li><li><p><strong>何时使用</strong>：想在访问一个类时做一些控制。</p></li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>这里将创建一个 Image 接口和实现了 Image 接口的实体类。ProxyImage 是一个代理类，减少 RealImage 对象加载的内存占用。</p><p>ProxyPatternDemo 类使用 ProxyImage 来获取要加载的 Image 对象，并按照需求进行显示。</p><p><img src="https://s1.ax1x.com/2022/09/19/x9x6tf.jpg" alt></p><h3 id="步骤一：创建接口"><a href="#步骤一：创建接口" class="headerlink" title="步骤一：创建接口"></a>步骤一：创建接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Image.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤二：创建实现类"><a href="#步骤二：创建实现类" class="headerlink" title="步骤二：创建实现类"></a>步骤二：创建实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RealImage.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealImage</span> <span class="keyword">implements</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> String fileName;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">RealImage</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">      loadFromDisk(fileName);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Displaying "</span> + fileName);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadFromDisk</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"Loading "</span> + fileName);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ProxyImage.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyImage</span> <span class="keyword">implements</span> <span class="title">Image</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> RealImage realImage;</span><br><span class="line">   <span class="keyword">private</span> String fileName;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ProxyImage</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(realImage == <span class="keyword">null</span>)&#123;</span><br><span class="line">         realImage = <span class="keyword">new</span> RealImage(fileName);</span><br><span class="line">      &#125;</span><br><span class="line">      realImage.display();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤三：-测试类"><a href="#步骤三：-测试类" class="headerlink" title="步骤三： 测试类"></a>步骤三： 测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Test.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Image image = <span class="keyword">new</span> ProxyImage(<span class="string">"test_10mb.jpg"</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 图像将从磁盘加载</span></span><br><span class="line">      image.display(); </span><br><span class="line">      System.out.println(<span class="string">""</span>);</span><br><span class="line">      <span class="comment">// 图像不需要从磁盘加载</span></span><br><span class="line">      image.display();  </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 代理模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker中的Redis部署</title>
      <link href="/2022/09/18/Docker%E4%B8%AD%E7%9A%84Redis%E9%83%A8%E7%BD%B2/"/>
      <url>/2022/09/18/Docker%E4%B8%AD%E7%9A%84Redis%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="创建Redis的Docker容器"><a href="#创建Redis的Docker容器" class="headerlink" title="创建Redis的Docker容器"></a>创建Redis的Docker容器</h2><center>👇直奔主题👇</center><h3 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">--name myredis \</span><br><span class="line">-v /root/redis_docker/mydata/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-v /root/redis_docker/mydata/redis/data:/data \</span><br><span class="line">-p 6379:6379 \</span><br><span class="line">-d --restart=always redis:5.0 redis-server /etc/redis/redis.conf \</span><br><span class="line">--appendonly yes  \</span><br><span class="line">--requirepass ******</span><br></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li>–name redis 【容器名】</li><li>-p 6379:6379 【映射端口】</li><li>-v /usr/local/app/redis/redis.conf:/etc/redis/redis.conf 【conf文件挂载目录】</li><li>-v /usr/local/app/redis/data:/data 【data挂载目录】</li><li>-d redis:5.0 【后台运行镜像】</li><li>–restart=always 【docker重启后自动启动镜像】</li><li>redis-server /etc/redis/redis.conf 【在容器执行redis-server启动命令，执行conf文件】</li><li>–appendonly yes 【持久化】</li><li>–requirepass “root” 【设置密码】</li></ul><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ul><li>docker exec -it redis bash 【进入容器】</li><li>redis-cli 【连接】</li><li>auth root 【登录】</li><li>set hello world</li><li>get hello</li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git工作区中文件状态总结</title>
      <link href="/2022/09/16/git_status%E6%80%BB%E7%BB%93/"/>
      <url>/2022/09/16/git_status%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Git工作区中文件的状态👇</p><p>Git工作区中的文件存在两种状态:</p><ul><li>untracked未跟踪（未被纳入版本控制)</li><li>tracked已跟踪（被纳入版本控制)<ul><li>1.Unmodified 未修改状态</li><li>2.Modified 已修改状态</li><li>3.Staged 已暂存状态</li></ul></li></ul><h1 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h1><p><strong>注⚠：使用git status查看文件状态</strong></p><h2 id="untracker"><a href="#untracker" class="headerlink" title="untracker"></a>untracker</h2><p>设想：此时在.git所在目录中新建文件Hello.txt<br>则：此时查看文件Hello.txt状态为 <font color="#660000">untracker</font> </p><h2 id="tracker"><a href="#tracker" class="headerlink" title="tracker"></a>tracker</h2><h3 id="Staged"><a href="#Staged" class="headerlink" title="Staged"></a>Staged</h3><p>设想：此时对Hello.txt文件进行git add. 操作<br>则：此时查看文件Hello.txt状态为 <font color="#006600">Staged</font></p><h3 id="Unmodified"><a href="#Unmodified" class="headerlink" title="Unmodified"></a>Unmodified</h3><p>设想：此时对Hello.txt文件进行git commit 操作<br>则：此时查看文件Hello.txt状态为 Unmodified，注意此时调用状态查看结果并不显示</p><h3 id="Modified"><a href="#Modified" class="headerlink" title="Modified"></a>Modified</h3><p>设想：此时对Hello.txt文件内容进行修改操作<br>则：此时查看文件Hello.txt状态为 <font color="#660000">Modified</font> (未放入缓存区)</p><p>紧接着：再次执行git add. 操作<br>则：此时查看文件Hello.txt状态为 <font color="#006600">Modified</font> (已归入缓存区)</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC - 获取Get请求参数详解</title>
      <link href="/2022/09/13/SpringMVC%20-%20%E8%8E%B7%E5%8F%96Get%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/09/13/SpringMVC%20-%20%E8%8E%B7%E5%8F%96Get%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p><strong><center>📨本篇主要对比两种获取Get请求参数方法的区别📨</center></strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>先看如下两段基于@GetMapping注解的方法👇</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/page"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> R&lt;Page&gt; <span class="title">page</span><span class="params">(<span class="keyword">int</span> page, <span class="keyword">int</span> pageSize, String name)</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">"page=&#123;&#125;, pageSize=&#123;&#125;, name=&#123;&#125;"</span>, page, pageSize, name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建页面对象</span></span><br><span class="line">    Page pageInfo = <span class="keyword">new</span> Page(page,pageSize);</span><br><span class="line">    <span class="comment">//配置分页条件</span></span><br><span class="line">    LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> LambdaQueryWrapper();</span><br><span class="line">    queryWrapper.like(StringUtils.isNotEmpty(name), Employee::getName, name);</span><br><span class="line">    queryWrapper.orderByDesc(Employee::getUpdateTime);</span><br><span class="line"></span><br><span class="line">    employeeService.page(pageInfo, queryWrapper);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> R&lt;Employee&gt; <span class="title">getByID</span><span class="params">(@PathVariable Long id)</span></span>&#123;</span><br><span class="line">    Employee employee = employeeService.getById(id);</span><br><span class="line">    <span class="keyword">if</span> (employee != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.success(employee);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">"查询失败！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>上面两段代码中：</p><ul><li>共同点是都是针对Get请求的后端代码逻辑处理</li><li>主要的不同之处是对于Get请求参数的获取方式</li><li>第一段代码的完整请求路径是：<strong><a href="http://localhost:8080/employee/page?page=1&amp;pageSize=2" target="_blank" rel="noopener">http://localhost:8080/employee/page?page=1&amp;pageSize=2</a></strong></li><li>第二段代码的完整请求路径是：<strong><a href="http://localhost:8080/employee/141242344443454456" target="_blank" rel="noopener">http://localhost:8080/employee/141242344443454456</a></strong></li></ul><h2 id="关于第一种方式"><a href="#关于第一种方式" class="headerlink" title="关于第一种方式"></a>关于第一种方式</h2><p>第一种属于传统方式的Get请求参数获取方法，即参数跟在问号后面。<br>我们假有这样一段请求需要处理：<strong><a href="http://localhost:8080/helloworld?name=张三" target="_blank" rel="noopener">http://localhost:8080/helloworld?name=张三</a></strong><br>则Controller中的处理代码如下👇</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/helloworld"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloworld1</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"获取到的name是："</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RequestParam使用"><a href="#RequestParam使用" class="headerlink" title="@RequestParam使用"></a>@RequestParam使用</h3><p>这种方式涉及了@RequestParam注解的使用，关于该注解总结如下👇</p><ul><li><p>不加@RequestParam，前端的参数名需要和后端控制器的变量名保持一致才能生效</p></li><li><p>不加@RequestParam，参数为非必传，加@RequestParam写法参数为必传。但@RequestParam可以通过@RequestParam(required = false)设置为非必传。</p></li><li><p>@RequestParam可以通过@RequestParam(“userId”)或者@RequestParam(value = “userId”)指定传入的参数名。</p></li><li><p>@RequestParam可以通过@RequestParam(defaultValue = “0”)指定参数默认值</p></li><li><p>如果接口除了前端调用还有后端RPC调用，则不能省略@RequestParam，否则RPC会找不到参数报错</p></li><li><p>访问时：</p><ul><li>不加@RequestParam注解：url可带参数也可不带参数</li><li>加@RequestParam注解：url必须带有参数</li></ul></li></ul><h2 id="关于第二种方式"><a href="#关于第二种方式" class="headerlink" title="关于第二种方式"></a>关于第二种方式</h2><p>第二种是典型的 RESTful 风格，ID参数值直接放在路径里面。<br>我们假有这样一段请求需要处理：<strong><a href="http://localhost:8080/helloworld/张三" target="_blank" rel="noopener">http://localhost:8080/helloworld/张三</a></strong><br>则Controller中的处理代码如下👇</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/helloworld/&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloworld</span><span class="params">(@PathVariable(<span class="string">"name"</span>)</span> String name) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"获取到的name是："</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PathVariable使用"><a href="#PathVariable使用" class="headerlink" title="@PathVariable使用"></a>@PathVariable使用</h3><p>通过 @PathVariable 可以将 URL 中占位符参数绑定到控制器处理方法的形参中。</p><ul><li><p>若方法参数名称和需要绑定的url中变量名称一致时,可以简写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> R&lt;Employee&gt; <span class="title">getByID</span><span class="params">(@PathVariable Long id)</span></span>&#123;</span><br><span class="line">    Employee employee = employeeService.getById(id);</span><br><span class="line">    <span class="keyword">if</span> (employee != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.success(employee);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">"查询失败！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>若方法参数名称和需要绑定的url中变量名称不一致时，写成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> R&lt;Employee&gt; <span class="title">getByID</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long empId)</span>&#123;</span><br><span class="line">    Employee employee = employeeService.getById(id);</span><br><span class="line">    <span class="keyword">if</span> (employee != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.success(employee);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error(<span class="string">"查询失败！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="2022-9-14-更新"><a href="#2022-9-14-更新" class="headerlink" title="2022/9/14 更新"></a>2022/9/14 更新</h2><h3 id="第一种方式的补充：使用对象来接收参数"><a href="#第一种方式的补充：使用对象来接收参数" class="headerlink" title="第一种方式的补充：使用对象来接收参数"></a>第一种方式的补充：使用对象来接收参数</h3><p>此处定义一个简单的POJO如下👇</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>定义一个RestController如下👇</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/helloworld"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloworld</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"name："</span> + user.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在给出一个GET请求：<strong><a href="http://localhost:8080/helloworld?name=张三" target="_blank" rel="noopener">http://localhost:8080/helloworld?name=张三</a></strong><br>则浏览器可以看到：<strong>name: 张三</strong></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> JavaWeb </tag>
            
            <tag> SpringMVC </tag>
            
            <tag> RESTful </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet进化之旅 —— 从ServerSocket编程到SpringMVC框架开发</title>
      <link href="/2022/09/08/servlet%E8%BF%9B%E5%8C%96%E4%B9%8B%E6%97%85/"/>
      <url>/2022/09/08/servlet%E8%BF%9B%E5%8C%96%E4%B9%8B%E6%97%85/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong><center>本篇主要记录Java后端开发学习过程中关于Servlet相关技术路线的梳理和总结</center></strong></p><p>按技术迭代顺序依次从下述几个Web技术开展梳理：</p><ul><li>ServerSocket编程</li><li>Web服务器</li><li>Servlet规范</li><li>SpringMCV框架</li></ul><h1 id="ServerSocket编程"><a href="#ServerSocket编程" class="headerlink" title="ServerSocket编程"></a>ServerSocket编程</h1><p><strong><center>本部分通过手撸一个基于Java的简易HTTP服务器来体会最原初的JavaWeb后端开发过程</center></strong></p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>这里客户端就不使用Java代码编写了，可以考虑使用最基本的浏览器或者后端测试工具如PostMan。</p><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><ul><li>第一步我们先创建ServerSocket，监听8080端口</li><li>第二步接收到请求后把流在控制台进行输出</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">null</span>;</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        InputStreamReader isr = <span class="keyword">null</span>;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        PrintWriter pw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8080</span>);</span><br><span class="line">            <span class="comment">//调用accept()方法开始监听，等待客户端的连接</span></span><br><span class="line">            <span class="keyword">while</span> ((socket = serverSocket.accept()) != <span class="keyword">null</span> )&#123;</span><br><span class="line">                List&lt;String&gt; lines = IOUtils.readLines(socket.getInputStream(), <span class="string">"utf-8"</span>);</span><br><span class="line">                <span class="keyword">for</span> (String line : lines) &#123;</span><br><span class="line">                    System.out.println(line);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            pw.close();</span><br><span class="line">            os.close();</span><br><span class="line">            br.close();</span><br><span class="line">            isr.close();</span><br><span class="line">            is.close();</span><br><span class="line">            socket.close();</span><br><span class="line">            serverSocket.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印到控制台是以下这段文本:<br><img src="https://img.gejiba.com/images/e49002a3b302ec04645132ea159a3f8a.png" alt></p><p><strong>解释一下：</strong> 上述代码监听了8080端口并将客户端的访问请求打印为字符串，即控制台中的文本信息，只要我们的服务器解析这段字符串然后拼接成request，就能封装HTTP请求。但是这时观察浏览器界面发现没有任何响应。因为我们编写的HTTP服务器什么都没返回就关闭了连接。如果要浏览器正确的显示我们想要看到的helloword。同样也要拼接成浏览器能理解的http协议响应格式才能正确被解析。</p><p>下面继续改动代码，让http返回200成功，并返回helloword：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">null</span>;</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        InputStreamReader isr = <span class="keyword">null</span>;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        PrintWriter pw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8080</span>);</span><br><span class="line">            <span class="comment">//调用accept()方法开始监听，等待客户端的连接</span></span><br><span class="line">            <span class="keyword">while</span> ((socket = serverSocket.accept()) != <span class="keyword">null</span> )&#123;</span><br><span class="line">                <span class="comment">//获取输出流，响应客户端的请求</span></span><br><span class="line">                os = socket.getOutputStream();</span><br><span class="line">                pw = <span class="keyword">new</span> PrintWriter(os);</span><br><span class="line">                pw.write(<span class="string">"HTTP/1.1 200 OK\n"</span> +</span><br><span class="line">                        <span class="string">"Date: Fri, 7 Sept 2022 06:07:21 GMT\n"</span> +</span><br><span class="line">                        <span class="string">"Content-Type: text/html; charset=UTF-8\n"</span> +</span><br><span class="line">                        <span class="string">"\n"</span> +</span><br><span class="line">                        <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">                        <span class="string">"      &lt;head&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">                        <span class="string">"      &lt;body&gt;\n"</span> +</span><br><span class="line">                        <span class="string">"            helloWord!\n"</span> +</span><br><span class="line">                        <span class="string">"      &lt;/body&gt;\n"</span> +</span><br><span class="line">                        <span class="string">"&lt;/html&gt;"</span>);</span><br><span class="line">                pw.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            pw.close();</span><br><span class="line">            os.close();</span><br><span class="line">            br.close();</span><br><span class="line">            isr.close();</span><br><span class="line">            is.close();</span><br><span class="line">            socket.close();</span><br><span class="line">            serverSocket.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器访问：localhost:8080 可见：<br><img src="https://img.gejiba.com/images/e252a903e9cf4d35eaa77788489e4a4c.png" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上述示例实现了一个最简单的基于HTTP协议的Java服务器后端，里面并不包含对request请求字符串的处理，仅仅是打印了它，response也仅仅是按HTTP协议的规定封装了一句“helloworld！”。如此简易原始的HTTP服务器的整个访问和回复过程是如此繁琐，可见新技术出现的必要性。</p><h1 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h1><p><strong><center><br>Web服务器是一个应该程序(软件)，对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作，让Web开发更加便捷。主要功能是”提供网上信息浏览服务”</center></strong></p><p><img src="https://img.gejiba.com/images/d2eca8a0000dc6e254f5bcf9300b8418.png" alt></p><p>下面以Apache Tomcat服务器为例展示一个最简单的HTTP Web服务。</p><h2 id="创建展示页面"><a href="#创建展示页面" class="headerlink" title="创建展示页面"></a>创建展示页面</h2><p>在Tomcat根目录的<strong>Webapps</strong>下创建一个test文件夹，内部创建hello.html文件用于返回请求页面👇👇</p><p><img src="https://img.gejiba.com/images/ba7d619e9f80190fa9b379c01b9ac67d.png" alt></p><h2 id="启动服务器并请求资源"><a href="#启动服务器并请求资源" class="headerlink" title="启动服务器并请求资源"></a>启动服务器并请求资源</h2><ul><li>启动Tomcat根目录下的<strong>bin/startup.bat</strong></li><li>使用Post访问<strong>localhost:8080/test/hello.html</strong></li></ul><p><img src="https://img.gejiba.com/images/2c4d42954c3df74e89901c3eac879458.png" alt></p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ol><li>Web服务器作用?<br>➢封装HTTP协议操作，简化开发<br>➢可以将Web项目部署到服务器中，对外提供网上浏览服务</li><li>什么是Tomcat?<br>Tomcat是一个轻量级的Web服务器， 支持Servlet/JSP少量JavaEE规范，也称为Web容器，Servlet容器，Servlet依赖于它或其他Web服务器才能正常运行。</li></ol><h1 id="Servlet规范"><a href="#Servlet规范" class="headerlink" title="Servlet规范"></a>Servlet规范</h1><h2 id="Servlet规范简介"><a href="#Servlet规范简介" class="headerlink" title="Servlet规范简介"></a>Servlet规范简介</h2><p>Servlet（Server Applet，服务端小程序，是服务端的一小部分），全称Java Servlet，未有中文译文。是用Java编写的服务器端程序。其主要功能在于交互式地浏览和修改数据，生成动态Web内容。狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。</p><h3 id="补充：Servlet和Web服务器的关系"><a href="#补充：Servlet和Web服务器的关系" class="headerlink" title="补充：Servlet和Web服务器的关系"></a>补充：Servlet和Web服务器的关系</h3><p>首先要明白我们从来不会在Servlet中写什么监听8080端口的代码，Servlet不会直接和客户端打交道！这些全被Web服务器封装了。</p><p>那请求是怎么来到Servlet的呢？答案是Servlet容器，比如我们最常用的Tomcat。Servlet都是部署在一个容器中的，不然你的Servlet根本不起作用。</p><p>Tomcat才是与客户端直接打交道的家伙，它监听了端口，请求过来后，根据URL等信息，确定要将请求交给哪个Servlet去处理，然后调用那个Servlet的service方法，service方法返回一个response对象，Tomcat再把这个respond返回给客户端。</p><h2 id="接口代码"><a href="#接口代码" class="headerlink" title="接口代码"></a>接口代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Javax.Servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig var1)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ServletConfig <span class="title">getServletConfig</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest var1, ServletResponse var2)</span> <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getServletInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Servlet接口定义的是一套处理网络请求的规范，所有实现Servlet的类，都需要实现它的那五个方法，其中最主要的是两个声明周期方法init()和destory()，还有一个处理请求的service()。也就是说，所有实现Servlet接口的类，或者说，所有想要处理网络请求的类，都需要回答这三个问题：</p><ul><li>你初始化时要做什么？</li><li>你销毁时要做什么？</li><li>你接收到请求时要做什么？</li></ul><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>1、客户端请求该 Servlet；</p><p>2、Tomcat加载 Servlet 类到内存；</p><p>3、Tomcat实例化并调用init()方法初始化该 Servlet；</p><p>4、Tomcat调用service()（根据请求方法不同调用doGet() 或者 doPost()，此外还有doHead()、doPut()、doTrace()、doDelete()、doOptions()）；</p><p>5、destroy()；</p><p>6、加载和实例化 Servlet。这项操作一般是动态执行的。然而，Server 通常会提供一个管理的选项，用于在 Server 启动时强制装载和初始化特定的 Servlet；</p><p>7、Server 创建一个 Servlet的实例；</p><p>8、第一个客户端的请求到达 Server；</p><p>9、Server 调用 Servlet 的 init() 方法（可配置为 Server 创建 Servlet 实例时调用）；</p><p>10、一个客户端的请求到达 Server；</p><p>11、Server 创建一个请求对象，处理客户端请求；</p><p>12、Server 创建一个响应对象，响应客户端请求；</p><p>13、Server 激活 Servlet 的 service() 方法，传递请求和响应对象作为参数；</p><p>14、service() 方法获得关于请求对象的信息，处理请求，访问其他资源，获得需要的信息；</p><p>15、service() 方法使用响应对象的方法，将响应传回Server，最终到达客户端。service()方法可能激活其它方法以处理请求，如 doGet() 或 doPost() 或程序员自己开发的新的方法；</p><h2 id="继承体系"><a href="#继承体系" class="headerlink" title="继承体系"></a>继承体系</h2><p><a href="https://img.gejiba.com/image/EAAFoV" target="_blank" rel="noopener"><img src="https://img.gejiba.com/images/c4ed97e0e4b645e0968dc28a9fd82b22.png" alt></a></p><h3 id="HttpServlet源码"><a href="#HttpServlet源码" class="headerlink" title="HttpServlet源码"></a>HttpServlet源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javax.servlet.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.text.MessageFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.GenericServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_DELETE = <span class="string">"DELETE"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_HEAD = <span class="string">"HEAD"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_GET = <span class="string">"GET"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_OPTIONS = <span class="string">"OPTIONS"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_POST = <span class="string">"POST"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_PUT = <span class="string">"PUT"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_TRACE = <span class="string">"TRACE"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEADER_IFMODSINCE = <span class="string">"If-Modified-Since"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEADER_LASTMOD = <span class="string">"Last-Modified"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LSTRING_FILE = <span class="string">"javax.servlet.http.LocalStrings"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ResourceBundle lStrings = ResourceBundle.getBundle(<span class="string">"javax.servlet.http.LocalStrings"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String protocol = req.getProtocol();</span><br><span class="line">        String msg = lStrings.getString(<span class="string">"http.method_get_not_supported"</span>);</span><br><span class="line">        <span class="keyword">if</span> (protocol.endsWith(<span class="string">"1.1"</span>)) &#123;</span><br><span class="line">            resp.sendError(<span class="number">405</span>, msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resp.sendError(<span class="number">400</span>, msg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">getLastModified</span><span class="params">(HttpServletRequest req)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHead</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        NoBodyResponse response = <span class="keyword">new</span> NoBodyResponse(resp);</span><br><span class="line">        <span class="keyword">this</span>.doGet(req, response);</span><br><span class="line">        response.setContentLength();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String protocol = req.getProtocol();</span><br><span class="line">        String msg = lStrings.getString(<span class="string">"http.method_post_not_supported"</span>);</span><br><span class="line">        <span class="keyword">if</span> (protocol.endsWith(<span class="string">"1.1"</span>)) &#123;</span><br><span class="line">            resp.sendError(<span class="number">405</span>, msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resp.sendError(<span class="number">400</span>, msg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPut</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String protocol = req.getProtocol();</span><br><span class="line">        String msg = lStrings.getString(<span class="string">"http.method_put_not_supported"</span>);</span><br><span class="line">        <span class="keyword">if</span> (protocol.endsWith(<span class="string">"1.1"</span>)) &#123;</span><br><span class="line">            resp.sendError(<span class="number">405</span>, msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resp.sendError(<span class="number">400</span>, msg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDelete</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String protocol = req.getProtocol();</span><br><span class="line">        String msg = lStrings.getString(<span class="string">"http.method_delete_not_supported"</span>);</span><br><span class="line">        <span class="keyword">if</span> (protocol.endsWith(<span class="string">"1.1"</span>)) &#123;</span><br><span class="line">            resp.sendError(<span class="number">405</span>, msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resp.sendError(<span class="number">400</span>, msg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Method[] getAllDeclaredMethods(Class c) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c.equals(HttpServlet.class)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Method[] parentMethods = <span class="keyword">this</span>.getAllDeclaredMethods(c.getSuperclass());</span><br><span class="line">            Method[] thisMethods = c.getDeclaredMethods();</span><br><span class="line">            <span class="keyword">if</span> (parentMethods != <span class="keyword">null</span> &amp;&amp; parentMethods.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                Method[] allMethods = <span class="keyword">new</span> Method[parentMethods.length + thisMethods.length];</span><br><span class="line">                System.arraycopy(parentMethods, <span class="number">0</span>, allMethods, <span class="number">0</span>, parentMethods.length);</span><br><span class="line">                System.arraycopy(thisMethods, <span class="number">0</span>, allMethods, parentMethods.length, thisMethods.length);</span><br><span class="line">                thisMethods = allMethods;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> thisMethods;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doOptions</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        Method[] methods = <span class="keyword">this</span>.getAllDeclaredMethods(<span class="keyword">this</span>.getClass());</span><br><span class="line">        <span class="keyword">boolean</span> ALLOW_GET = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> ALLOW_HEAD = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> ALLOW_POST = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> ALLOW_PUT = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> ALLOW_DELETE = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> ALLOW_TRACE = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> ALLOW_OPTIONS = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methods.length; ++i) &#123;</span><br><span class="line">            Method m = methods[i];</span><br><span class="line">            <span class="keyword">if</span> (m.getName().equals(<span class="string">"doGet"</span>)) &#123;</span><br><span class="line">                ALLOW_GET = <span class="keyword">true</span>;</span><br><span class="line">                ALLOW_HEAD = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (m.getName().equals(<span class="string">"doPost"</span>)) &#123;</span><br><span class="line">                ALLOW_POST = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (m.getName().equals(<span class="string">"doPut"</span>)) &#123;</span><br><span class="line">                ALLOW_PUT = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (m.getName().equals(<span class="string">"doDelete"</span>)) &#123;</span><br><span class="line">                ALLOW_DELETE = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String allow = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (ALLOW_GET &amp;&amp; allow == <span class="keyword">null</span>) &#123;</span><br><span class="line">            allow = <span class="string">"GET"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ALLOW_HEAD) &#123;</span><br><span class="line">            <span class="keyword">if</span> (allow == <span class="keyword">null</span>) &#123;</span><br><span class="line">                allow = <span class="string">"HEAD"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                allow = allow + <span class="string">", HEAD"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ALLOW_POST) &#123;</span><br><span class="line">            <span class="keyword">if</span> (allow == <span class="keyword">null</span>) &#123;</span><br><span class="line">                allow = <span class="string">"POST"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                allow = allow + <span class="string">", POST"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ALLOW_PUT) &#123;</span><br><span class="line">            <span class="keyword">if</span> (allow == <span class="keyword">null</span>) &#123;</span><br><span class="line">                allow = <span class="string">"PUT"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                allow = allow + <span class="string">", PUT"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ALLOW_DELETE) &#123;</span><br><span class="line">            <span class="keyword">if</span> (allow == <span class="keyword">null</span>) &#123;</span><br><span class="line">                allow = <span class="string">"DELETE"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                allow = allow + <span class="string">", DELETE"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ALLOW_TRACE) &#123;</span><br><span class="line">            <span class="keyword">if</span> (allow == <span class="keyword">null</span>) &#123;</span><br><span class="line">                allow = <span class="string">"TRACE"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                allow = allow + <span class="string">", TRACE"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ALLOW_OPTIONS) &#123;</span><br><span class="line">            <span class="keyword">if</span> (allow == <span class="keyword">null</span>) &#123;</span><br><span class="line">                allow = <span class="string">"OPTIONS"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                allow = allow + <span class="string">", OPTIONS"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        resp.setHeader(<span class="string">"Allow"</span>, allow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doTrace</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String CRLF = <span class="string">"\r\n"</span>;</span><br><span class="line">        String responseString = <span class="string">"TRACE "</span> + req.getRequestURI() + <span class="string">" "</span> + req.getProtocol();</span><br><span class="line"></span><br><span class="line">        String headerName;</span><br><span class="line">        <span class="keyword">for</span>(Enumeration reqHeaderEnum = req.getHeaderNames(); reqHeaderEnum.hasMoreElements(); responseString = responseString + CRLF + headerName + <span class="string">": "</span> + req.getHeader(headerName)) &#123;</span><br><span class="line">            headerName = (String)reqHeaderEnum.nextElement();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        responseString = responseString + CRLF;</span><br><span class="line">        <span class="keyword">int</span> responseLength = responseString.length();</span><br><span class="line">        resp.setContentType(<span class="string">"message/http"</span>);</span><br><span class="line">        resp.setContentLength(responseLength);</span><br><span class="line">        ServletOutputStream out = resp.getOutputStream();</span><br><span class="line">        out.print(responseString);</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String method = req.getMethod();</span><br><span class="line">        <span class="keyword">long</span> lastModified;</span><br><span class="line">        <span class="keyword">if</span> (method.equals(<span class="string">"GET"</span>)) &#123;</span><br><span class="line">            lastModified = <span class="keyword">this</span>.getLastModified(req);</span><br><span class="line">            <span class="keyword">if</span> (lastModified == -<span class="number">1L</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">long</span> ifModifiedSince = req.getDateHeader(<span class="string">"If-Modified-Since"</span>);</span><br><span class="line">                <span class="keyword">if</span> (ifModifiedSince &lt; lastModified / <span class="number">1000L</span> * <span class="number">1000L</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.maybeSetLastModified(resp, lastModified);</span><br><span class="line">                    <span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    resp.setStatus(<span class="number">304</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"HEAD"</span>)) &#123;</span><br><span class="line">            lastModified = <span class="keyword">this</span>.getLastModified(req);</span><br><span class="line">            <span class="keyword">this</span>.maybeSetLastModified(resp, lastModified);</span><br><span class="line">            <span class="keyword">this</span>.doHead(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"POST"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.doPost(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"PUT"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.doPut(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"DELETE"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.doDelete(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"OPTIONS"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.doOptions(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"TRACE"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.doTrace(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String errMsg = lStrings.getString(<span class="string">"http.method_not_implemented"</span>);</span><br><span class="line">            Object[] errArgs = <span class="keyword">new</span> Object[]&#123;method&#125;;</span><br><span class="line">            errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line">            resp.sendError(<span class="number">501</span>, errMsg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">maybeSetLastModified</span><span class="params">(HttpServletResponse resp, <span class="keyword">long</span> lastModified)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!resp.containsHeader(<span class="string">"Last-Modified"</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lastModified &gt;= <span class="number">0L</span>) &#123;</span><br><span class="line">                resp.setDateHeader(<span class="string">"Last-Modified"</span>, lastModified);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        HttpServletRequest request;</span><br><span class="line">        HttpServletResponse response;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            request = (HttpServletRequest)req;</span><br><span class="line">            response = (HttpServletResponse)res;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassCastException var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"non-HTTP request or response"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.service(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Servlet示例"><a href="#Servlet示例" class="headerlink" title="Servlet示例"></a>Servlet示例</h2><p><strong><center>👇此处展示一段处理登录业务的Servlet代码👇</center></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.geyu.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.geyu.web.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.geyu.web.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/loginServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = req.getParameter(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">        String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        User user = userMapper.select(username, password);</span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">        resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        PrintWriter writer = resp.getWriter();</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//登陆成功</span></span><br><span class="line">            writer.write(<span class="string">"登陆成功"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//登陆失败</span></span><br><span class="line">            writer.write(<span class="string">"登录失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p>讲了这么多废话，总结来说Servlet就是一群人来制定Java应用中使用Web时的各种规范，统一接口，其他内部实现由厂商自己实现，tomcat jetty jboss等等应运而生。</p><p>关于他如何工作的：一个http请求到来，容器将请求封装成Servlet中的request对象，在request中你可以得到所有的http信息，然后你可以取出来操作，最后你再把数据封装成Servlet的response对象，应用容器将respose对象解析之后封装成一个http response。</p><p>Web服务器习惯处理静态页面，所以需要一个程序来帮忙处理动态请求(如当前时间)。Web服务器程序会将动态请求转发给帮助程序，帮助程序处理后，返回处理后的静态结果给Web服务器程序。这样就避免了Web服务器程序处理动态页面。</p><h1 id="SpringMVC框架"><a href="#SpringMVC框架" class="headerlink" title="SpringMVC框架"></a>SpringMVC框架</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spring MVC是一个基于Java的实现了MVC设计模式的请求驱动类型的轻量级Web框架，通过把Model，View，Controller分离，将web层进行职责解耦，把复杂的web应用分成逻辑清晰的几部分，简化开发，减少出错，方便组内开发人员之间的配合。</p><h3 id="SpringMVC和Servlet的区别与联系"><a href="#SpringMVC和Servlet的区别与联系" class="headerlink" title="SpringMVC和Servlet的区别与联系"></a>SpringMVC和Servlet的区别与联系</h3><ul><li><p>Servlet：性能最好，处理HTTP请求的标准和规范。</p></li><li><p>SpringMVC：开发效率高（好多共性的东西都封装好了，是对Servlet的封装，核心的DispatcherServlet最终继承自HttpServlet）</p></li></ul><p>这两者的关系，就如同MyBatis和JDBC，一个性能好，一个开发效率高，是对另一个的封装。</p><h3 id="Controller层示例"><a href="#Controller层示例" class="headerlink" title="Controller层示例"></a>Controller层示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    IUserService service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/login.do"</span>, method = &#123;RequestMethod.GET&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        User result = service.login(user);</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:/pages/success.html"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"redirect:/pages/error.html"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center>👀开发过程肉眼可见的简介♥</center>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> JavaWeb </tag>
            
            <tag> SpringMVC </tag>
            
            <tag> Servlet </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL笔记</title>
      <link href="/2022/09/07/MySql/"/>
      <url>/2022/09/07/MySql/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="通用语法及分类"><a href="#通用语法及分类" class="headerlink" title="通用语法及分类"></a>通用语法及分类</h2><ul><li>DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）</li><li>DML: 数据操作语言，用来对数据库表中的数据进行增删改</li><li>DQL: 数据查询语言，用来查询数据库中表的记录</li><li>DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限</li></ul><h3 id="DDL（数据定义语言）"><a href="#DDL（数据定义语言）" class="headerlink" title="DDL（数据定义语言）"></a>DDL（数据定义语言）</h3><p>数据定义语言</p><h4 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h4><p>查询所有数据库：<br><code>SHOW DATABASES;</code><br>查询当前数据库：<br><code>SELECT DATABASE();</code><br>创建数据库：<br><code>CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];</code><br>删除数据库：<br><code>DROP DATABASE [ IF EXISTS ] 数据库名;</code><br>使用数据库：<br><code>USE 数据库名;</code></p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集</li></ul><h4 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h4><p>查询当前数据库所有表：<br><code>SHOW TABLES;</code><br>查询表结构：<br><code>DESC 表名;</code><br>查询指定表的建表语句：<br><code>SHOW CREATE TABLE 表名;</code></p><p>创建表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">字段1 字段1类型 [COMMENT 字段1注释],</span><br><span class="line">字段2 字段2类型 [COMMENT 字段2注释],</span><br><span class="line">字段3 字段3类型 [COMMENT 字段3注释],</span><br><span class="line">...</span><br><span class="line">字段n 字段n类型 [COMMENT 字段n注释]</span><br><span class="line">)[ COMMENT 表注释 ];</span><br></pre></td></tr></table></figure><p><strong>最后一个字段后面没有逗号</strong></p><p>添加字段：<br><code>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：<code>ALTER TABLE emp ADD nickname varchar(20) COMMENT &#39;昵称&#39;;</code></p><p>修改数据类型：<br><code>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</code><br>修改字段名和字段类型：<br><code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</code><br>例：将emp表的nickname字段修改为username，类型为varchar(30)<br><code>ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT &#39;昵称&#39;;</code></p><p>删除字段：<br><code>ALTER TABLE 表名 DROP 字段名;</code></p><p>修改表名：<br><code>ALTER TABLE 表名 RENAME TO 新表名</code></p><p>删除表：<br><code>DROP TABLE [IF EXISTS] 表名;</code><br>删除表，并重新创建该表：<br><code>TRUNCATE TABLE 表名;</code></p><h3 id="DML（数据操作语言）"><a href="#DML（数据操作语言）" class="headerlink" title="DML（数据操作语言）"></a>DML（数据操作语言）</h3><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p>指定字段：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</code><br>全部字段：<br><code>INSERT INTO 表名 VALUES (值1, 值2, ...);</code></p><p>批量添加数据：<br><code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code><br><code>INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code></p><h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>字符串和日期类型数据应该包含在引号中</li><li>插入的数据大小应该在字段的规定范围内</li></ul><h4 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h4><p>修改数据：<br><code>UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];</code><br>例：<br><code>UPDATE emp SET name = &#39;Jack&#39; WHERE id = 1;</code></p><p>删除数据：<br><code>DELETE FROM 表名 [ WHERE 条件 ];</code></p><h3 id="DQL（数据查询语言）"><a href="#DQL（数据查询语言）" class="headerlink" title="DQL（数据查询语言）"></a>DQL（数据查询语言）</h3><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">字段列表</span><br><span class="line">FROM</span><br><span class="line">表名字段</span><br><span class="line">WHERE</span><br><span class="line">条件列表</span><br><span class="line">GROUP BY</span><br><span class="line">分组字段列表</span><br><span class="line">HAVING</span><br><span class="line">分组后的条件列表</span><br><span class="line">ORDER BY</span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4><p>查询多个字段：<br><code>SELECT 字段1, 字段2, 字段3, ... FROM 表名;</code><br><code>SELECT * FROM 表名;</code></p><p>设置别名：<br><code>SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;</code><br><code>SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;</code></p><p>去除重复记录：<br><code>SELECT DISTINCT 字段列表 FROM 表名;</code></p><p>转义：<br><code>SELECT * FROM 表名 WHERE name LIKE &#39;/_张三&#39; ESCAPE &#39;/&#39;</code><br>/ 之后的_不作为通配符</p><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code></p><p>条件：</p><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !=</td><td>不等于</td></tr><tr><td>BETWEEN … AND …</td><td>在某个范围内（含最小、最大值）</td></tr><tr><td>IN(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>LIKE 占位符</td><td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td></tr><tr><td>IS NULL</td><td>是NULL</td></tr></tbody></table><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>AND 或 &amp;&amp;</td><td>并且（多个条件同时成立）</td></tr><tr><td>OR 或 &#124;&#124;</td><td>或者（多个条件任意一个成立）</td></tr><tr><td>NOT 或 !</td><td>非，不是</td></tr></tbody></table><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">-- 年龄等于30</span><br><span class="line">select * from employee where age = 30;</span><br><span class="line">-- 年龄小于30</span><br><span class="line">select * from employee where age &lt; 30;</span><br><span class="line">-- 小于等于</span><br><span class="line">select * from employee where age &lt;= 30;</span><br><span class="line">-- 没有身份证</span><br><span class="line">select * from employee where idcard is null or idcard = &apos;&apos;;</span><br><span class="line">-- 有身份证</span><br><span class="line">select * from employee where idcard;</span><br><span class="line">select * from employee where idcard is not null;</span><br><span class="line">-- 不等于</span><br><span class="line">select * from employee where age != 30;</span><br><span class="line">-- 年龄在20到30之间</span><br><span class="line">select * from employee where age between 20 and 30;</span><br><span class="line">select * from employee where age &gt;= 20 and age &lt;= 30;</span><br><span class="line">-- 下面语句不报错，但查不到任何信息</span><br><span class="line">select * from employee where age between 30 and 20;</span><br><span class="line">-- 性别为女且年龄小于30</span><br><span class="line">select * from employee where age &lt; 30 and gender = &apos;女&apos;;</span><br><span class="line">-- 年龄等于25或30或35</span><br><span class="line">select * from employee where age = 25 or age = 30 or age = 35;</span><br><span class="line">select * from employee where age in (25, 30, 35);</span><br><span class="line">-- 姓名为两个字</span><br><span class="line">select * from employee where name like &apos;__&apos;;</span><br><span class="line">-- 身份证最后为X</span><br><span class="line">select * from employee where idcard like &apos;%X&apos;;</span><br></pre></td></tr></table></figure><h4 id="聚合查询（聚合函数）"><a href="#聚合查询（聚合函数）" class="headerlink" title="聚合查询（聚合函数）"></a>聚合查询（聚合函数）</h4><p>常见聚合函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><p>语法：<br><code>SELECT 聚合函数(字段列表) FROM 表名;</code><br>例：<br><code>SELECT count(id) from employee where workaddress = &quot;广东省&quot;;</code></p><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];</code></p><p>where 和 having 的区别：</p><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件不参与分组；having是分组后对结果进行过滤。</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li></ul><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）</span><br><span class="line">select count(*) from employee group by gender;</span><br><span class="line">-- 根据性别分组，统计男性和女性数量</span><br><span class="line">select gender, count(*) from employee group by gender;</span><br><span class="line">-- 根据性别分组，统计男性和女性的平均年龄</span><br><span class="line">select gender, avg(age) from employee group by gender;</span><br><span class="line">-- 年龄小于45，并根据工作地址分组</span><br><span class="line">select workaddress, count(*) from employee where age &lt; 45 group by workaddress;</span><br><span class="line">-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址</span><br><span class="line">select workaddress, count(*) address_count from employee where age &lt; 45 group by workaddress having address_count &gt;= 3;</span><br></pre></td></tr></table></figure><h5 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>执行顺序：where &gt; 聚合函数 &gt; having</li><li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li></ul><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;</code></p><p>排序方式：</p><ul><li>ASC: 升序（默认）</li><li>DESC: 降序</li></ul><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 根据年龄升序排序</span><br><span class="line">SELECT * FROM employee ORDER BY age ASC;</span><br><span class="line">SELECT * FROM employee ORDER BY age;</span><br><span class="line">-- 两字段排序，根据年龄升序排序，入职时间降序排序</span><br><span class="line">SELECT * FROM employee ORDER BY age ASC, entrydate DESC;</span><br></pre></td></tr></table></figure><h5 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h5><p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>语法：<br><code>SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;</code></p><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 查询第一页数据，展示10条</span><br><span class="line">SELECT * FROM employee LIMIT 0, 10;</span><br><span class="line">-- 查询第二页</span><br><span class="line">SELECT * FROM employee LIMIT 10, 10;</span><br></pre></td></tr></table></figure><h5 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>起始索引从0开始，起始索引 = （查询页码 - 1） * 每页显示记录数</li><li>分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10</li></ul><h4 id="DQL执行顺序"><a href="#DQL执行顺序" class="headerlink" title="DQL执行顺序"></a>DQL执行顺序</h4><p>FROM -&gt; WHERE -&gt; GROUP BY -&gt; SELECT -&gt; ORDER BY -&gt; LIMIT</p><h3 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h3><h4 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h4><p>查询用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USER mysql;</span><br><span class="line">SELECT * FROM user;</span><br></pre></td></tr></table></figure><p>创建用户:<br><code>CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;</code></p><p>修改用户密码：<br><code>ALTER USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;;</code></p><p>删除用户：<br><code>DROP USER &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 创建用户test，只能在当前主机localhost访问</span><br><span class="line">create user &apos;test&apos;@&apos;localhost&apos; identified by &apos;123456&apos;;</span><br><span class="line">-- 创建用户test，能在任意主机访问</span><br><span class="line">create user &apos;test&apos;@&apos;%&apos; identified by &apos;123456&apos;;</span><br><span class="line">create user &apos;test&apos; identified by &apos;123456&apos;;</span><br><span class="line">-- 修改密码</span><br><span class="line">alter user &apos;test&apos;@&apos;localhost&apos; identified with mysql_native_password by &apos;1234&apos;;</span><br><span class="line">-- 删除用户</span><br><span class="line">drop user &apos;test&apos;@&apos;localhost&apos;;</span><br></pre></td></tr></table></figure><h5 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>主机名可以使用 % 通配</li></ul><h4 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h4><p>常用权限：</p><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL, ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库/表/视图</td></tr><tr><td>CREATE</td><td>创建数据库/表</td></tr></tbody></table><p>更多权限请看<a href="#权限一览表" title="权限一览表">权限一览表</a></p><p>查询权限：<br><code>SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>授予权限：<br><code>GRANT 权限列表 ON 数据库名.表名 TO &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>撤销权限：<br><code>REVOKE 权限列表 ON 数据库名.表名 FROM &#39;用户名&#39;@&#39;主机名&#39;;</code></p><h5 id="注意事项-6"><a href="#注意事项-6" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>多个权限用逗号分隔</li><li>授权时，数据库名和表名可以用 * 进行通配，代表所有</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>字符串函数</li><li>数值函数</li><li>日期函数</li><li>流程函数</li></ul><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT(s1, s2, …, sn)</td><td>字符串拼接，将s1, s2, …, sn拼接成一个字符串</td></tr><tr><td>LOWER(str)</td><td>将字符串全部转为小写</td></tr><tr><td>UPPER(str)</td><td>将字符串全部转为大写</td></tr><tr><td>LPAD(str, n, pad)</td><td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td></tr><tr><td>RPAD(str, n, pad)</td><td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td>TRIM(str)</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>SUBSTRING(str, start, len)</td><td>返回从字符串str从start位置起的len个长度的字符串</td></tr></tbody></table><p>使用示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-- 拼接</span><br><span class="line">SELECT CONCAT(&apos;Hello&apos;, &apos;World&apos;);</span><br><span class="line">-- 小写</span><br><span class="line">SELECT LOWER(&apos;Hello&apos;);</span><br><span class="line">-- 大写</span><br><span class="line">SELECT UPPER(&apos;Hello&apos;);</span><br><span class="line">-- 左填充</span><br><span class="line">SELECT LPAD(&apos;01&apos;, 5, &apos;-&apos;);</span><br><span class="line">-- 右填充</span><br><span class="line">SELECT RPAD(&apos;01&apos;, 5, &apos;-&apos;);</span><br><span class="line">-- 去除空格</span><br><span class="line">SELECT TRIM(&apos; Hello World &apos;);</span><br><span class="line">-- 切片（起始索引为1）</span><br><span class="line">SELECT SUBSTRING(&apos;Hello World&apos;, 1, 5);</span><br></pre></td></tr></table></figure><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><p>常见函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td></tr><tr><td>MOD(x, y)</td><td>返回x/y的模</td></tr><tr><td>RAND()</td><td>返回0~1内的随机数</td></tr><tr><td>ROUND(x, y)</td><td>求参数x的四舍五入值，保留y位小数</td></tr></tbody></table><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(date)</td><td>获取指定date的年份</td></tr><tr><td>MONTH(date)</td><td>获取指定date的月份</td></tr><tr><td>DAY(date)</td><td>获取指定date的日期</td></tr><tr><td>DATE_ADD(date, INTERVAL expr type)</td><td>返回一个日期/时间值加上一个时间间隔expr后的时间值</td></tr><tr><td>DATEDIFF(date1, date2)</td><td>返回起始时间date1和结束时间date2之间的天数</td></tr></tbody></table><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- DATE_ADD</span><br><span class="line">SELECT DATE_ADD(NOW(), INTERVAL 70 YEAR);</span><br></pre></td></tr></table></figure><h3 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value, t, f)</td><td>如果value为true，则返回t，否则返回f</td></tr><tr><td>IFNULL(value1, value2)</td><td>如果value1不为空，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果val1为true，返回res1，… 否则返回default默认值</td></tr><tr><td>CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果expr的值等于val1，返回res1，… 否则返回default默认值</td></tr></tbody></table><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">name,</span><br><span class="line">(case when age &gt; 30 then &apos;中年&apos; else &apos;青年&apos; end)</span><br><span class="line">from employee;</span><br><span class="line">select</span><br><span class="line">name,</span><br><span class="line">(case workaddress when &apos;北京市&apos; then &apos;一线城市&apos; when &apos;上海市&apos; then &apos;一线城市&apos; else &apos;二线城市&apos; end) as &apos;工作地址&apos;</span><br><span class="line">from employee;</span><br></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>分类：</p><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为null</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一、不重复的</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>DEFAULT</td></tr><tr><td>检查约束（8.0.1版本后）</td><td>保证字段值满足某一个条件</td><td>CHECK</td></tr><tr><td>外键约束</td><td>用来让两张图的数据之间建立连接，保证数据的一致性和完整性</td><td>FOREIGN KEY</td></tr></tbody></table><p>约束是作用于表中字段上的，可以再创建表/修改表的时候添加约束。</p><h3 id="常用约束"><a href="#常用约束" class="headerlink" title="常用约束"></a>常用约束</h3><table><thead><tr><th>约束条件</th><th>关键字</th></tr></thead><tbody><tr><td>主键</td><td>PRIMARY KEY</td></tr><tr><td>自动增长</td><td>AUTO_INCREMENT</td></tr><tr><td>不为空</td><td>NOT NULL</td></tr><tr><td>唯一</td><td>UNIQUE</td></tr><tr><td>逻辑条件</td><td>CHECK</td></tr><tr><td>默认值</td><td>DEFAULT</td></tr></tbody></table><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table user(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">name varchar(10) not null unique,</span><br><span class="line">age int check(age &gt; 0 and age &lt; 120),</span><br><span class="line">status char(1) default &apos;1&apos;,</span><br><span class="line">gender char(1)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>添加外键：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE 表名(</span><br><span class="line">字段名 字段类型,</span><br><span class="line">...</span><br><span class="line">[CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名)</span><br><span class="line">);</span><br><span class="line">ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);</span><br><span class="line"></span><br><span class="line">-- 例子</span><br><span class="line">alter table emp add constraint fk_emp_dept_id foreign key(dept_id) references dept(id);</span><br></pre></td></tr></table></figure><p>删除外键：<br><code>ALTER TABLE 表名 DROP FOREIGN KEY 外键名;</code></p><h4 id="删除-更新行为"><a href="#删除-更新行为" class="headerlink" title="删除/更新行为"></a>删除/更新行为</h4><table><thead><tr><th>行为</th><th>说明</th></tr></thead><tbody><tr><td>NO ACTION</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与RESTRICT一致）</td></tr><tr><td>RESTRICT</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与NO ACTION一致）</td></tr><tr><td>CASCADE</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除/更新外键在子表中的记录</td></tr><tr><td>SET NULL</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（要求该外键允许为null）</td></tr><tr><td>SET DEFAULT</td><td>父表有变更时，子表将外键设为一个默认值（Innodb不支持）</td></tr></tbody></table><p>更改删除/更新行为：<br><code>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为;</code></p><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><h3 id="多表关系"><a href="#多表关系" class="headerlink" title="多表关系"></a>多表关系</h3><ul><li>一对多（多对一）</li><li>多对多</li><li>一对一</li></ul><h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><p>案例：部门与员工<br>关系：一个部门对应多个员工，一个员工对应一个部门<br>实现：在多的一方建立外键，指向一的一方的主键</p><h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><p>案例：学生与课程<br>关系：一个学生可以选多门课程，一门课程也可以供多个学生选修<br>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p><h4 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h4><p>案例：用户与用户详情<br>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率<br>实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）</p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>合并查询（笛卡尔积，会展示所有组合结果）：<br><code>select * from employee, dept;</code></p><blockquote><p>笛卡尔积：两个集合A集合和B集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）</p></blockquote><p>消除无效笛卡尔积：<br><code>select * from employee, dept where employee.dept = dept.id;</code></p><h3 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h3><p>内连接查询的是两张表交集的部分</p><p>隐式内连接：<br><code>SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;</code></p><p>显式内连接：<br><code>SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;</code></p><p>显式性能比隐式高</p><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 查询员工姓名，及关联的部门的名称</span><br><span class="line">-- 隐式</span><br><span class="line">select e.name, d.name from employee as e, dept as d where e.dept = d.id;</span><br><span class="line">-- 显式</span><br><span class="line">select e.name, d.name from employee as e inner join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure><h3 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h3><p>左外连接：<br>查询左表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;</code><br>相当于查询表1的所有数据，包含表1和表2交集部分数据</p><p>右外连接：<br>查询右表所有数据，以及两张表交集部分数据<br><code>SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;</code></p><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 左</span><br><span class="line">select e.*, d.name from employee as e left outer join dept as d on e.dept = d.id;</span><br><span class="line">select d.name, e.* from dept d left outer join emp e on e.dept = d.id;  -- 这条语句与下面的语句效果一样</span><br><span class="line">-- 右</span><br><span class="line">select d.name, e.* from employee as e right outer join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure><p>左连接可以查询到没有dept的employee，右连接可以查询到没有employee的dept</p><h3 id="自连接查询"><a href="#自连接查询" class="headerlink" title="自连接查询"></a>自连接查询</h3><p>当前表与自身的连接查询，自连接必须使用表别名</p><p>语法：<br><code>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;</code></p><p>自连接查询，可以是内连接查询，也可以是外连接查询</p><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 查询员工及其所属领导的名字</span><br><span class="line">select a.name, b.name from employee a, employee b where a.manager = b.id;</span><br><span class="line">-- 没有领导的也查询出来</span><br><span class="line">select a.name, b.name from employee a left join employee b on a.manager = b.id;</span><br></pre></td></tr></table></figure><h3 id="联合查询-union-union-all"><a href="#联合查询-union-union-all" class="headerlink" title="联合查询 union, union all"></a>联合查询 union, union all</h3><p>把多次查询的结果合并，形成一个新的查询集</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段列表 FROM 表A ...</span><br><span class="line">UNION [ALL]</span><br><span class="line">SELECT 字段列表 FROM 表B ...</span><br></pre></td></tr></table></figure><h4 id="注意事项-7"><a href="#注意事项-7" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>UNION ALL 会有重复结果，UNION 不会</li><li>联合查询比使用or效率高，不会使索引失效</li></ul><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>SQL语句中嵌套SELECT语句，称谓嵌套查询，又称子查询。<br><code>SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);</code><br><strong>子查询外部的语句可以是 INSERT / UPDATE / DELETE / SELECT 的任何一个</strong></p><p>根据子查询结果可以分为：</p><ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询（子查询结果为一列）</li><li>行子查询（子查询结果为一行）</li><li>表子查询（子查询结果为多行多列）</li></ul><p>根据子查询位置可分为：</p><ul><li>WHERE 之后</li><li>FROM 之后</li><li>SELECT 之后</li></ul><h4 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h4><p>子查询返回的结果是单个值（数字、字符串、日期等）。<br>常用操作符：- &lt; &gt; &gt; &gt;= &lt; &lt;=</p><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 查询销售部所有员工</span><br><span class="line">select id from dept where name = &apos;销售部&apos;;</span><br><span class="line">-- 根据销售部部门ID，查询员工信息</span><br><span class="line">select * from employee where dept = 4;</span><br><span class="line">-- 合并（子查询）</span><br><span class="line">select * from employee where dept = (select id from dept where name = &apos;销售部&apos;);</span><br><span class="line"></span><br><span class="line">-- 查询xxx入职之后的员工信息</span><br><span class="line">select * from employee where entrydate &gt; (select entrydate from employee where name = &apos;xxx&apos;);</span><br></pre></td></tr></table></figure><h4 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h4><p>返回的结果是一列（可以是多行）。</p><p>常用操作符：</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围内</td></tr><tr><td>ANY</td><td>子查询返回列表中，有任意一个满足即可</td></tr><tr><td>SOME</td><td>与ANY等同，使用SOME的地方都可以使用ANY</td></tr><tr><td>ALL</td><td>子查询返回列表的所有值都必须满足</td></tr></tbody></table><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 查询销售部和市场部的所有员工信息</span><br><span class="line">select * from employee where dept in (select id from dept where name = &apos;销售部&apos; or name = &apos;市场部&apos;);</span><br><span class="line">-- 查询比财务部所有人工资都高的员工信息</span><br><span class="line">select * from employee where salary &gt; all(select salary from employee where dept = (select id from dept where name = &apos;财务部&apos;));</span><br><span class="line">-- 查询比研发部任意一人工资高的员工信息</span><br><span class="line">select * from employee where salary &gt; any (select salary from employee where dept = (select id from dept where name = &apos;研发部&apos;));</span><br></pre></td></tr></table></figure><h4 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h4><p>返回的结果是一行（可以是多列）。<br>常用操作符：=, &lt;, &gt;, IN, NOT IN</p><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 查询与xxx的薪资及直属领导相同的员工信息</span><br><span class="line">select * from employee where (salary, manager) = (12500, 1);</span><br><span class="line">select * from employee where (salary, manager) = (select salary, manager from employee where name = &apos;xxx&apos;);</span><br></pre></td></tr></table></figure><h4 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h4><p>返回的结果是多行多列<br>常用操作符：IN</p><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 查询与xxx1，xxx2的职位和薪资相同的员工</span><br><span class="line">select * from employee where (job, salary) in (select job, salary from employee where name = &apos;xxx1&apos; or name = &apos;xxx2&apos;);</span><br><span class="line">-- 查询入职日期是2006-01-01之后的员工，及其部门信息</span><br><span class="line">select e.*, d.* from (select * from employee where entrydate &gt; &apos;2006-01-01&apos;) as e left join dept as d on e.dept = d.id;</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p>基本操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">-- 1. 查询张三账户余额</span><br><span class="line">select * from account where name = &apos;张三&apos;;</span><br><span class="line">-- 2. 将张三账户余额-1000</span><br><span class="line">update account set money = money - 1000 where name = &apos;张三&apos;;</span><br><span class="line">-- 此语句出错后张三钱减少但是李四钱没有增加</span><br><span class="line">模拟sql语句错误</span><br><span class="line">-- 3. 将李四账户余额+1000</span><br><span class="line">update account set money = money + 1000 where name = &apos;李四&apos;;</span><br><span class="line"></span><br><span class="line">-- 查看事务提交方式</span><br><span class="line">SELECT @@AUTOCOMMIT;</span><br><span class="line">-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效</span><br><span class="line">SET @@AUTOCOMMIT = 0;</span><br><span class="line">-- 提交事务</span><br><span class="line">COMMIT;</span><br><span class="line">-- 回滚事务</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">-- 设置手动提交后上面代码改为：</span><br><span class="line">select * from account where name = &apos;张三&apos;;</span><br><span class="line">update account set money = money - 1000 where name = &apos;张三&apos;;</span><br><span class="line">update account set money = money + 1000 where name = &apos;李四&apos;;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><p>操作方式二：</p><p>开启事务：<br><code>START TRANSACTION 或 BEGIN TRANSACTION;</code><br>提交事务：<br><code>COMMIT;</code><br>回滚事务：<br><code>ROLLBACK;</code></p><p>操作实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">select * from account where name = &apos;张三&apos;;</span><br><span class="line">update account set money = money - 1000 where name = &apos;张三&apos;;</span><br><span class="line">update account set money = money + 1000 where name = &apos;李四&apos;;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><h3 id="四大特性ACID"><a href="#四大特性ACID" class="headerlink" title="四大特性ACID"></a>四大特性ACID</h3><ul><li>原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败</li><li>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</li><li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li></ul><h3 id="并发事务"><a href="#并发事务" class="headerlink" title="并发事务"></a>并发事务</h3><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读到另一个事务还没提交的数据</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但两次读取的数据不同</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在</td></tr></tbody></table><blockquote><p>这三个问题的详细演示：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd</a> </p></blockquote><p>并发事务隔离级别：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>Read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>Repeatable Read(默认)</td><td>×</td><td>×</td><td>√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><ul><li>√表示在当前隔离级别下该问题会出现</li><li>Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差</li></ul><p>查看事务隔离级别：<br><code>SELECT @@TRANSACTION_ISOLATION;</code><br>设置事务隔离级别：<br><code>SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE };</code><br>SESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效</p><h1 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h1><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>MySQL体系结构：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_20220315034329549927.png" alt="结构图" title="结构图"><br><img src="https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%B1%82%E7%BA%A7%E5%90%AB%E4%B9%89_20220315034359342837.png" alt="层级描述" title="层级描述"></p><p>存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。<br>默认存储引擎是InnoDB。</p><p>相关操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 查询建表语句</span><br><span class="line">show create table account;</span><br><span class="line">-- 建表时指定存储引擎</span><br><span class="line">CREATE TABLE 表名(</span><br><span class="line">...</span><br><span class="line">) ENGINE=INNODB;</span><br><span class="line">-- 查看当前数据库支持的存储引擎</span><br><span class="line">show engines;</span><br></pre></td></tr></table></figure><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。</p><p>特点：</p><ul><li>DML 操作遵循 ACID 模型，支持<strong>事务</strong></li><li><strong>行级锁</strong>，提高并发访问性能</li><li>支持<strong>外键</strong>约束，保证数据的完整性和正确性</li></ul><p>文件：</p><ul><li>xxx.ibd: xxx代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。</li></ul><p>参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间</p><p>知识点：</p><p>查看 Mysql 变量：<br><code>show variables like &#39;innodb_file_per_table&#39;;</code></p><p>从idb文件提取表结构数据：<br>（在cmd运行）<br><code>ibd2sdi xxx.ibd</code></p><p>InnoDB 逻辑存储结构：<br><img src="https://dhc.pythonanywhere.com/media/editor/%E9%80%BB%E8%BE%91%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84_20220316030616590001.png" alt="InnoDB逻辑存储结构" title="InnoDB逻辑存储结构"></p><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>MyISAM 是 MySQL 早期的默认存储引擎。</p><p>特点：</p><ul><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息</li><li>xxx.MYD: 存储数据</li><li>xxx.MYI: 存储索引</li></ul><h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h3><p>Memory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。</p><p>特点：</p><ul><li>存放在内存中，速度快</li><li>hash索引（默认）</li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息</li></ul><h3 id="存储引擎特点"><a href="#存储引擎特点" class="headerlink" title="存储引擎特点"></a>存储引擎特点</h3><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td></tr><tr><td>事务安全</td><td>支持</td><td>-</td><td>-</td></tr><tr><td>锁机制</td><td>行锁</td><td>表锁</td><td>表锁</td></tr><tr><td>B+tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>-</td><td>-</td><td>支持</td></tr><tr><td>全文索引</td><td>支持（5.6版本之后）</td><td>支持</td><td>-</td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N/A</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td>支持</td><td>-</td><td>-</td></tr></tbody></table><h3 id="存储引擎的选择"><a href="#存储引擎的选择" class="headerlink" title="存储引擎的选择"></a>存储引擎的选择</h3><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。</p><ul><li>InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择</li><li>MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。</li><li>Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li></ul><p>电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。</p><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><h3 id="查看执行频次"><a href="#查看执行频次" class="headerlink" title="查看执行频次"></a>查看执行频次</h3><p>查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：<br><code>SHOW GLOBAL STATUS LIKE &#39;Com_______&#39;;</code> 或者 <code>SHOW SESSION STATUS LIKE &#39;Com_______&#39;;</code><br>例：<code>show global status like &#39;Com_______&#39;</code></p><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。<br>MySQL的慢查询日志默认没有开启，需要在MySQL的配置文件（/etc/my.cnf）中配置如下信息：<br>    # 开启慢查询日志开关<br>    slow_query_log=1<br>    # 设置慢查询日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志<br>    long_query_time=2</p><p>更改后记得重启MySQL服务，日志文件位置：/var/lib/mysql/localhost-slow.log</p><p>查看慢查询日志开关状态：<br><code>show variables like &#39;slow_query_log&#39;;</code></p><h3 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h3><p>show profile 能在做SQL优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：<br><code>SELECT @@have_profiling;</code><br>profiling 默认关闭，可以通过set语句在session/global级别开启 profiling：<br><code>SET profiling = 1;</code><br>查看所有语句的耗时：<br><code>show profiles;</code><br>查看指定query_id的SQL语句各个阶段的耗时：<br><code>show profile for query query_id;</code><br>查看指定query_id的SQL语句CPU的使用情况<br><code>show profile cpu for query query_id;</code></p><h3 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h3><p>EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。<br>语法：<br>    # 直接在select语句之前加上关键字 explain / desc<br>    EXPLAIN SELECT 字段列表 FROM 表名 HWERE 条件;</p><p>EXPLAIN 各字段含义：</p><ul><li>id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id相同，执行顺序从上到下；id不同，值越大越先执行）</li><li>select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（SELECT/WHERE之后包含了子查询）等</li><li>type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all</li><li>possible_key：可能应用在这张表上的索引，一个或多个</li><li>Key：实际使用的索引，如果为 NULL，则没有使用索引</li><li>Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</li><li>rows：MySQL认为必须要执行的行数，在InnoDB引擎的表中，是一个估计值，可能并不总是准确的</li><li>filtered：表示返回结果的行数占需读取行数的百分比，filtered的值越大越好</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引是帮助 MySQL <strong>高效获取数据</strong>的<strong>数据结构（有序）</strong>。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。</p><p>优缺点：</p><p>优点：</p><ul><li>提高数据检索效率，降低数据库的IO成本</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li></ul><p>缺点：</p><ul><li>索引列也是要占用空间的</li><li>索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE</li></ul><h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><table><thead><tr><th>索引结构</th><th>描述</th></tr></thead><tbody><tr><td>B+Tree</td><td>最常见的索引类型，大部分引擎都支持B+树索引</td></tr><tr><td>Hash</td><td>底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询</td></tr><tr><td>R-Tree(空间索引)</td><td>空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td></tr><tr><td>Full-Text(全文索引)</td><td>是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES</td></tr></tbody></table><table><thead><tr><th>索引</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>B+Tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>R-Tree索引</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>Full-text</td><td>5.6版本后支持</td><td>支持</td><td>不支持</td></tr></tbody></table><h4 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h4><p><img src="https://dhc.pythonanywhere.com/media/editor/%E4%BA%8C%E5%8F%89%E6%A0%91_20220316153214227108.png" alt="二叉树" title="二叉树"></p><p>二叉树的缺点可以用红黑树来解决：<br><img src="https://dhc.pythonanywhere.com/media/editor/%E7%BA%A2%E9%BB%91%E6%A0%91_20220316163142686602.png" alt="红黑树" title="红黑树"><br>红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。</p><p>为了解决上述问题，可以使用 B-Tree 结构。<br>B-Tree (多路平衡查找树) 以一棵最大度数（max-degree，指一个节点的子节点个数）为5（5阶）的 b-tree 为例（每个节点最多存储4个key，5个指针）</p><p><img src="https://dhc.pythonanywhere.com/media/editor/B-Tree%E7%BB%93%E6%9E%84_20220316163813441163.png" alt="B-Tree结构" title="B-Tree结构"></p><blockquote><p>B-Tree 的数据插入过程动画参照：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68</a><br>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BTree.html" target="_blank" rel="noopener">https://www.cs.usfca.edu/~galles/visualization/BTree.html</a></p></blockquote><h4 id="B-Tree-1"><a href="#B-Tree-1" class="headerlink" title="B+Tree"></a>B+Tree</h4><p>结构图：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/B+Tree%E7%BB%93%E6%9E%84%E5%9B%BE_20220316170700591277.png" alt="B+Tree结构图" title="B+Tree结构图"></p><blockquote><p>演示地址：<a href="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html" target="_blank" rel="noopener">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</a></p></blockquote><p>与 B-Tree 的区别：</p><ul><li>所有的数据都会出现在叶子节点</li><li>叶子节点形成一个单向链表</li></ul><p>MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。</p><p><img src="https://dhc.pythonanywhere.com/media/editor/%E7%BB%93%E6%9E%84%E5%9B%BE_20220316171730865611.png" alt="MySQL B+Tree 结构图" title="MySQL B+Tree 结构图"></p><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><p>哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。<br>如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可以通过链表来解决。</p><p><img src="https://dhc.pythonanywhere.com/media/editor/Hash%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86%E5%9B%BE_20220317143226150679.png" alt="Hash索引原理图" title="Hash索引原理图"></p><p>特点：</p><ul><li>Hash索引只能用于对等比较（=、in），不支持范围查询（betwwn、&gt;、&lt;、…）</li><li>无法利用索引完成排序操作</li><li>查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引</li></ul><p>存储引擎支持：</p><ul><li>Memory</li><li>InnoDB: 具有自适应hash功能，hash索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的</li></ul><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><ol><li>为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？</li></ol><ul><li>相对于二叉树，层级更少，搜索效率高</li><li>对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li><li>相对于 Hash 索引，B+Tree 支持范围匹配及排序操作</li></ul><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><table><thead><tr><th>分类</th><th>含义</th><th>特点</th><th>关键字</th></tr></thead><tbody><tr><td>主键索引</td><td>针对于表中主键创建的索引</td><td>默认自动创建，只能有一个</td><td>PRIMARY</td></tr><tr><td>唯一索引</td><td>避免同一个表中某数据列中的值重复</td><td>可以有多个</td><td>UNIQUE</td></tr><tr><td>常规索引</td><td>快速定位特定数据</td><td>可以有多个</td><td></td></tr><tr><td>全文索引</td><td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td><td>可以有多个</td><td>FULLTEXT</td></tr></tbody></table><p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：</p><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚集索引(Clustered Index)</td><td>将数据存储与索引放一块，索引结构的叶子节点保存了行数据</td><td>必须有，而且只有一个</td></tr><tr><td>二级索引(Secondary Index)</td><td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td><td>可以存在多个</td></tr></tbody></table><p>演示图：</p><p><img src="https://dhc.pythonanywhere.com/media/editor/%E5%8E%9F%E7%90%86%E5%9B%BE_20220318194454880073.png" alt="大致原理" title="大致原理"><br><img src="https://dhc.pythonanywhere.com/media/editor/%E6%BC%94%E7%A4%BA%E5%9B%BE_20220319215403721066.png" alt="演示图" title="演示图"></p><p>聚集索引选取规则：</p><ul><li>如果存在主键，主键索引就是聚集索引</li><li>如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引</li><li>如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引</li></ul><h4 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h4><p>1. 以下 SQL 语句，哪个执行效率高？为什么？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from user where id = 10;</span><br><span class="line">select * from user where name = &apos;Arm&apos;;</span><br><span class="line">-- 备注：id为主键，name字段创建的有索引</span><br></pre></td></tr></table></figure><p>答：第一条语句，因为第二条需要回表查询，相当于两个步骤。</p><p>2. InnoDB 主键索引的 B+Tree 高度为多少？</p><p>答：假设一行数据大小为1k，一页中可以存储16行这样的数据。InnoDB 的指针占用6个字节的空间，主键假设为bigint，占用字节数为8.<br>可得公式：<code>n * 8 + (n + 1) * 6 = 16 * 1024</code>，其中 8 表示 bigint 占用的字节数，n 表示当前节点存储的key的数量，(n + 1) 表示指针数量（比key多一个）。算出n约为1170。</p><p>如果树的高度为2，那么他能存储的数据量大概为：<code>1171 * 16 = 18736</code>；<br>如果树的高度为3，那么他能存储的数据量大概为：<code>1171 * 1171 * 16 = 21939856</code>。</p><p>另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>创建索引：<br><code>CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...);</code><br>如果不加 CREATE 后面不加索引类型参数，则创建的是常规索引</p><p>查看索引：<br><code>SHOW INDEX FROM table_name;</code></p><p>删除索引：<br><code>DROP INDEX index_name ON table_name;</code></p><p>案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引</span><br><span class="line">create index idx_user_name on tb_user(name);</span><br><span class="line">-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引</span><br><span class="line">create unique index idx_user_phone on tb_user (phone);</span><br><span class="line">-- 为profession, age, status创建联合索引</span><br><span class="line">create index idx_user_pro_age_stat on tb_user(profession, age, status);</span><br><span class="line">-- 为email建立合适的索引来提升查询效率</span><br><span class="line">create index idx_user_email on tb_user(email);</span><br><span class="line"></span><br><span class="line">-- 删除索引</span><br><span class="line">drop index idx_user_email on tb_user;</span><br></pre></td></tr></table></figure><h3 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h3><h4 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h4><p>如果索引关联了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。<br>如果跳跃某一列，索引将部分失效（后面的字段索引失效）。</p><p>联合索引中，出现范围查询（&lt;, &gt;），范围查询右侧的列索引失效。可以用&gt;=或者&lt;=来规避索引失效问题。</p><h4 id="索引失效情况"><a href="#索引失效情况" class="headerlink" title="索引失效情况"></a>索引失效情况</h4><ol><li>在索引列上进行运算操作，索引将失效。如：<code>explain select * from tb_user where substring(phone, 10, 2) = &#39;15&#39;;</code></li><li>字符串类型字段使用时，不加引号，索引将失效。如：<code>explain select * from tb_user where phone = 17799990015;</code>，此处phone的值没有加引号</li><li>模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如：<code>explain select * from tb_user where profession like &#39;%工程&#39;;</code>，前后都有 % 也会失效。</li><li>用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。</li><li>如果 MySQL 评估使用索引比全表更慢，则不使用索引。</li></ol><h4 id="SQL-提示"><a href="#SQL-提示" class="headerlink" title="SQL 提示"></a>SQL 提示</h4><p>是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</p><p>例如，使用索引：<br><code>explain select * from tb_user use index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>不使用哪个索引：<br><code>explain select * from tb_user ignore index(idx_user_pro) where profession=&quot;软件工程&quot;;</code><br>必须使用哪个索引：<br><code>explain select * from tb_user force index(idx_user_pro) where profession=&quot;软件工程&quot;;</code></p><p>use 是建议，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，force就是无论如何都强制使用该索引。</p><h4 id="覆盖索引-amp-回表查询"><a href="#覆盖索引-amp-回表查询" class="headerlink" title="覆盖索引&amp;回表查询"></a>覆盖索引&amp;回表查询</h4><p>尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。</p><p>explain 中 extra 字段含义：<br><code>using index condition</code>：查找使用了索引，但是需要回表查询数据<br><code>using where; using index;</code>：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询</p><p>如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是select *；如果在辅助索引中找聚集索引，如<code>select id, name from xxx where name=&#39;xxx&#39;;</code>，也只需要通过辅助索引(name)查找到对应的id，返回name和name索引对应的id即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如<code>select id, name, gender from xxx where name=&#39;xxx&#39;;</code></p><p>所以尽量不要用<code>select *</code>，容易出现回表查询，降低效率，除非有联合索引包含了所有字段</p><p>面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下SQL语句进行优化，该如何进行才是最优方案：<br><code>select id, username, password from tb_user where username=&#39;itcast&#39;;</code></p><p>解：给username和password字段建立联合索引，则不需要回表查询，直接覆盖索引</p><h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><p>当字段类型为字符串（varchar, text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</p><p>语法：<code>create index idx_xxxx on table_name(columnn(n));</code><br>前缀长度：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。<br>求选择性公式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select count(distinct email) / count(*) from tb_user;</span><br><span class="line">select count(distinct substring(email, 1, 5)) / count(*) from tb_user;</span><br></pre></td></tr></table></figure><p>show index 里面的sub_part可以看到接取的长度</p><h4 id="单列索引-amp-联合索引"><a href="#单列索引-amp-联合索引" class="headerlink" title="单列索引&amp;联合索引"></a>单列索引&amp;联合索引</h4><p>单列索引：即一个索引只包含单个列<br>联合索引：即一个索引包含了多个列<br>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。</p><p>单列索引情况：<br><code>explain select id, phone, name from tb_user where phone = &#39;17799990010&#39; and name = &#39;韩信&#39;;</code><br>这句只会用到phone索引字段</p><h5 id="注意事项-8"><a href="#注意事项-8" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>多条件联合查询时，MySQL优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询</li></ul><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ol><li>针对于数据量较大，且查询比较频繁的表建立索引</li><li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li><li>如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引</li><li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li><li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率</li><li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询</li></ol><h2 id="SQL-优化"><a href="#SQL-优化" class="headerlink" title="SQL 优化"></a>SQL 优化</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>普通插入：</p><ol><li>采用批量插入（一次插入的数据不建议超过1000条）</li><li>手动提交事务</li><li>主键顺序插入</li></ol><p>大批量插入：<br>如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的load指令插入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 客户端连接服务端时，加上参数 --local-infile（这一行在bash/cmd界面输入）</span><br><span class="line">mysql --local-infile -u root -p</span><br><span class="line"># 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关</span><br><span class="line">set global local_infile = 1;</span><br><span class="line">select @@local_infile;</span><br><span class="line"># 执行load指令将准备好的数据，加载到表结构中</span><br><span class="line">load data local infile &apos;/root/sql1.log&apos; into table &apos;tb_user&apos; fields terminated by &apos;,&apos; lines terminated by &apos;\n&apos;;</span><br></pre></td></tr></table></figure><h3 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h3><p>数据组织方式：在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（Index organized table, IOT）</p><p>页分裂：页可以为空，也可以填充一般，也可以填充100%，每个页包含了2-N行数据（如果一行数据过大，会行溢出），根据主键排列。<br>页合并：当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录到达 MERGE_THRESHOLD（默认为页的50%），InnoDB会开始寻找最靠近的页（前后）看看是否可以将这两个页合并以优化空间使用。</p><p>MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或创建索引时指定</p><blockquote><p>文字说明不够清晰明了，具体可以看视频里的PPT演示过程：<a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90</a></p></blockquote><p>主键设计原则：</p><ul><li>满足业务需求的情况下，尽量降低主键的长度</li><li>插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键</li><li>尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号</li><li>业务操作时，避免对主键的修改</li></ul><h3 id="order-by优化"><a href="#order-by优化" class="headerlink" title="order by优化"></a>order by优化</h3><ol><li>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序</li><li>Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</li></ol><p>如果order by字段全部使用升序排序或者降序排序，则都会走索引，但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain的extra信息显示的是<code>Using index, Using filesort</code>，如果要优化掉Using filesort，则需要另外再创建一个索引，如：<code>create index idx_user_age_phone_ad on tb_user(age asc, phone desc);</code>，此时使用<code>select id, age, phone from tb_user order by age asc, phone desc;</code>会全部走索引</p><p>总结：</p><ul><li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li><li>尽量使用覆盖索引</li><li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC/DESC）</li><li>如果不可避免出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认256k）</li></ul><h3 id="group-by优化"><a href="#group-by优化" class="headerlink" title="group by优化"></a>group by优化</h3><ul><li>在分组操作时，可以通过索引来提高效率</li><li>分组操作时，索引的使用也是满足最左前缀法则的</li></ul><p>如索引为<code>idx_user_pro_age_stat</code>，则句式可以是<code>select ... where profession order by age</code>，这样也符合最左前缀法则</p><h3 id="limit优化"><a href="#limit优化" class="headerlink" title="limit优化"></a>limit优化</h3><p>常见的问题如<code>limit 2000000, 10</code>，此时需要 MySQL 排序前2000000条记录，但仅仅返回2000000 - 2000010的记录，其他记录丢弃，查询排序的代价非常大。<br>优化方案：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 此语句耗时很长</span><br><span class="line">select * from tb_sku limit 9000000, 10;</span><br><span class="line">-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询</span><br><span class="line">select id from tb_sku order by id limit 9000000, 10;</span><br><span class="line">-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit</span><br><span class="line">-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);</span><br><span class="line">-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度</span><br><span class="line">select * from tb_sku as s, (select id from tb_sku order by id limit 9000000, 10) as a where s.id = a.id;</span><br></pre></td></tr></table></figure><h3 id="count优化"><a href="#count优化" class="headerlink" title="count优化"></a>count优化</h3><p>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高（前提是不适用where）；<br>InnoDB 在执行 count(*) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。<br>优化方案：自己计数，如创建key-value表存储在内存或硬盘，或者是用redis</p><p>count的几种用法：</p><ul><li>如果count函数的参数（count里面写的那个字段）不是NULL（字段值不为NULL），累计值就加一，最后返回累计值</li><li>用法：count(*)、count(主键)、count(字段)、count(1)</li><li>count(主键)跟count(*)一样，因为主键不能为空；count(字段)只计算字段值不为NULL的行；count(1)引擎会为每行添加一个1，然后就count这个1，返回结果也跟count(*)一样；count(null)返回0</li></ul><p>各种用法的性能：</p><ul><li>count(主键)：InnoDB引擎会遍历整张表，把每行的主键id值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）</li><li>count(字段)：没有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加；有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加</li><li>count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加</li><li>count(*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加</li></ul><p>按效率排序：count(字段) &lt; count(主键) &lt; count(1) &lt; count(*)，所以尽量使用 count(*)</p><h3 id="update优化（避免行锁升级为表锁）"><a href="#update优化（避免行锁升级为表锁）" class="headerlink" title="update优化（避免行锁升级为表锁）"></a>update优化（避免行锁升级为表锁）</h3><p>InnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。</p><p>如以下两条语句：<br><code>update student set no = &#39;123&#39; where id = 1;</code>，这句由于id有主键索引，所以只会锁这一行；<br><code>update student set no = &#39;123&#39; where name = &#39;test&#39;;</code>，这句由于name没有索引，所以会把整张表都锁住进行数据更新，解决方法是给name字段添加索引</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><table><thead><tr><th>类型名称</th><th>取值范围</th><th>大小</th></tr></thead><tbody><tr><td>TINYINT</td><td>-128〜127</td><td>1个字节</td></tr><tr><td>SMALLINT</td><td>-32768〜32767</td><td>2个宇节</td></tr><tr><td>MEDIUMINT</td><td>-8388608〜8388607</td><td>3个字节</td></tr><tr><td>INT (INTEGHR)</td><td>-2147483648〜2147483647</td><td>4个字节</td></tr><tr><td>BIGINT</td><td>-9223372036854775808〜9223372036854775807</td><td>8个字节</td></tr></tbody></table><p>无符号在数据类型后加 unsigned 关键字。</p><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>FLOAT</td><td>单精度浮点数</td><td>4 个字节</td></tr><tr><td>DOUBLE</td><td>双精度浮点数</td><td>8 个字节</td></tr><tr><td>DECIMAL (M, D)，DEC</td><td>压缩的“严格”定点数</td><td>M+2 个字节</td></tr></tbody></table><h2 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h2><table><thead><tr><th>类型名称</th><th>日期格式</th><th>日期范围</th><th>存储需求</th></tr></thead><tbody><tr><td>YEAR</td><td>YYYY</td><td>1901 ~ 2155</td><td>1 个字节</td></tr><tr><td>TIME</td><td>HH:MM:SS</td><td>-838:59:59 ~ 838:59:59</td><td>3 个字节</td></tr><tr><td>DATE</td><td>YYYY-MM-DD</td><td>1000-01-01 ~ 9999-12-3</td><td>3 个字节</td></tr><tr><td>DATETIME</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td><td>8 个字节</td></tr><tr><td>TIMESTAMP</td><td>YYYY-MM-DD HH:MM:SS</td><td>1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td><td>4 个字节</td></tr></tbody></table><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>CHAR(M)</td><td>固定长度非二进制字符串</td><td>M 字节，1&lt;=M&lt;=255</td></tr><tr><td>VARCHAR(M)</td><td>变长非二进制字符串</td><td>L+1字节，在此，L&lt; = M和 1&lt;=M&lt;=255</td></tr><tr><td>TINYTEXT</td><td>非常小的非二进制字符串</td><td>L+1字节，在此，L&lt;2^8</td></tr><tr><td>TEXT</td><td>小的非二进制字符串</td><td>L+2字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMTEXT</td><td>中等大小的非二进制字符串</td><td>L+3字节，在此，L&lt;2^24</td></tr><tr><td>LONGTEXT</td><td>大的非二进制字符串</td><td>L+4字节，在此，L&lt;2^32</td></tr><tr><td>ENUM</td><td>枚举类型，只能有一个枚举字符串值</td><td>1或2个字节，取决于枚举值的数目 (最大值为65535)</td></tr><tr><td>SET</td><td>一个设置，字符串对象可以有零个或 多个SET成员</td><td>1、2、3、4或8个字节，取决于集合 成员的数量（最多64个成员）</td></tr></tbody></table><h2 id="二进制类型"><a href="#二进制类型" class="headerlink" title="二进制类型"></a>二进制类型</h2><table><thead><tr><th>类型名称</th><th>说明</th><th>存储需求</th></tr></thead><tbody><tr><td>BIT(M)</td><td>位字段类型</td><td>大约 (M+7)/8 字节</td></tr><tr><td>BINARY(M)</td><td>固定长度二进制字符串</td><td>M 字节</td></tr><tr><td>VARBINARY (M)</td><td>可变长度二进制字符串</td><td>M+1 字节</td></tr><tr><td>TINYBLOB (M)</td><td>非常小的BLOB</td><td>L+1 字节，在此，L&lt;2^8</td></tr><tr><td>BLOB (M)</td><td>小 BLOB</td><td>L+2 字节，在此，L&lt;2^16</td></tr><tr><td>MEDIUMBLOB (M)</td><td>中等大小的BLOB</td><td>L+3 字节，在此，L&lt;2^24</td></tr><tr><td>LONGBLOB (M)</td><td>非常大的BLOB</td><td>L+4 字节，在此，L&lt;2^32</td></tr></tbody></table><h1 id="权限一览表"><a href="#权限一览表" class="headerlink" title="权限一览表"></a>权限一览表</h1><blockquote><p>具体权限的作用详见<a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html" title="官方文档" target="_blank" rel="noopener">官方文档</a></p></blockquote><p>GRANT 和 REVOKE 允许的静态权限</p><table><thead><tr><th align="left">Privilege</th><th align="left">Grant Table Column</th><th align="left">Context</th></tr></thead><tbody><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_all" target="_blank" rel="noopener"><code>ALL [PRIVILEGES]</code></a></td><td align="left">Synonym for “all privileges”</td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter" target="_blank" rel="noopener"><code>ALTER</code></a></td><td align="left"><code>Alter_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter-routine" target="_blank" rel="noopener"><code>ALTER ROUTINE</code></a></td><td align="left"><code>Alter_routine_priv</code></td><td align="left">Stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create" target="_blank" rel="noopener"><code>CREATE</code></a></td><td align="left"><code>Create_priv</code></td><td align="left">Databases, tables, or indexes</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-role" target="_blank" rel="noopener"><code>CREATE ROLE</code></a></td><td align="left"><code>Create_role_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-routine" target="_blank" rel="noopener"><code>CREATE ROUTINE</code></a></td><td align="left"><code>Create_routine_priv</code></td><td align="left">Stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-tablespace" target="_blank" rel="noopener"><code>CREATE TABLESPACE</code></a></td><td align="left"><code>Create_tablespace_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-temporary-tables" target="_blank" rel="noopener"><code>CREATE TEMPORARY TABLES</code></a></td><td align="left"><code>Create_tmp_table_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-user" target="_blank" rel="noopener"><code>CREATE USER</code></a></td><td align="left"><code>Create_user_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-view" target="_blank" rel="noopener"><code>CREATE VIEW</code></a></td><td align="left"><code>Create_view_priv</code></td><td align="left">Views</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_delete" target="_blank" rel="noopener"><code>DELETE</code></a></td><td align="left"><code>Delete_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop" target="_blank" rel="noopener"><code>DROP</code></a></td><td align="left"><code>Drop_priv</code></td><td align="left">Databases, tables, or views</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop-role" target="_blank" rel="noopener"><code>DROP ROLE</code></a></td><td align="left"><code>Drop_role_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_event" target="_blank" rel="noopener"><code>EVENT</code></a></td><td align="left"><code>Event_priv</code></td><td align="left">Databases</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_execute" target="_blank" rel="noopener"><code>EXECUTE</code></a></td><td align="left"><code>Execute_priv</code></td><td align="left">Stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_file" target="_blank" rel="noopener"><code>FILE</code></a></td><td align="left"><code>File_priv</code></td><td align="left">File access on server host</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_grant-option" target="_blank" rel="noopener"><code>GRANT OPTION</code></a></td><td align="left"><code>Grant_priv</code></td><td align="left">Databases, tables, or stored routines</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_index" target="_blank" rel="noopener"><code>INDEX</code></a></td><td align="left"><code>Index_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_insert" target="_blank" rel="noopener"><code>INSERT</code></a></td><td align="left"><code>Insert_priv</code></td><td align="left">Tables or columns</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_lock-tables" target="_blank" rel="noopener"><code>LOCK TABLES</code></a></td><td align="left"><code>Lock_tables_priv</code></td><td align="left">Databases</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_process" target="_blank" rel="noopener"><code>PROCESS</code></a></td><td align="left"><code>Process_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_proxy" target="_blank" rel="noopener"><code>PROXY</code></a></td><td align="left">See <code>proxies_priv</code> table</td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_references" target="_blank" rel="noopener"><code>REFERENCES</code></a></td><td align="left"><code>References_priv</code></td><td align="left">Databases or tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_reload" target="_blank" rel="noopener"><code>RELOAD</code></a></td><td align="left"><code>Reload_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-client" target="_blank" rel="noopener"><code>REPLICATION CLIENT</code></a></td><td align="left"><code>Repl_client_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave" target="_blank" rel="noopener"><code>REPLICATION SLAVE</code></a></td><td align="left"><code>Repl_slave_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_select" target="_blank" rel="noopener"><code>SELECT</code></a></td><td align="left"><code>Select_priv</code></td><td align="left">Tables or columns</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-databases" target="_blank" rel="noopener"><code>SHOW DATABASES</code></a></td><td align="left"><code>Show_db_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-view" target="_blank" rel="noopener"><code>SHOW VIEW</code></a></td><td align="left"><code>Show_view_priv</code></td><td align="left">Views</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_shutdown" target="_blank" rel="noopener"><code>SHUTDOWN</code></a></td><td align="left"><code>Shutdown_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_super" target="_blank" rel="noopener"><code>SUPER</code></a></td><td align="left"><code>Super_priv</code></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_trigger" target="_blank" rel="noopener"><code>TRIGGER</code></a></td><td align="left"><code>Trigger_priv</code></td><td align="left">Tables</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_update" target="_blank" rel="noopener"><code>UPDATE</code></a></td><td align="left"><code>Update_priv</code></td><td align="left">Tables or columns</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_usage" target="_blank" rel="noopener"><code>USAGE</code></a></td><td align="left">Synonym for “no privileges”</td><td align="left">Server administration</td></tr></tbody></table><p>GRANT 和 REVOKE 允许的动态权限</p><table><thead><tr><th align="left">Privilege</th><th align="left">Context</th></tr></thead><tbody><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_application-password-admin" target="_blank" rel="noopener"><code>APPLICATION_PASSWORD_ADMIN</code></a></td><td align="left">Dual password administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-abort-exempt" target="_blank" rel="noopener"><code>AUDIT_ABORT_EXEMPT</code></a></td><td align="left">Allow queries blocked by audit log filter</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-admin" target="_blank" rel="noopener"><code>AUDIT_ADMIN</code></a></td><td align="left">Audit log administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_authentication-policy-admin" target="_blank" rel="noopener"><code>AUTHENTICATION_POLICY_ADMIN</code></a></td><td align="left">Authentication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_backup-admin" target="_blank" rel="noopener"><code>BACKUP_ADMIN</code></a></td><td align="left">Backup administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-admin" target="_blank" rel="noopener"><code>BINLOG_ADMIN</code></a></td><td align="left">Backup and Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-encryption-admin" target="_blank" rel="noopener"><code>BINLOG_ENCRYPTION_ADMIN</code></a></td><td align="left">Backup and Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_clone-admin" target="_blank" rel="noopener"><code>CLONE_ADMIN</code></a></td><td align="left">Clone administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_connection-admin" target="_blank" rel="noopener"><code>CONNECTION_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_encryption-key-admin" target="_blank" rel="noopener"><code>ENCRYPTION_KEY_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-admin" target="_blank" rel="noopener"><code>FIREWALL_ADMIN</code></a></td><td align="left">Firewall administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-exempt" target="_blank" rel="noopener"><code>FIREWALL_EXEMPT</code></a></td><td align="left">Firewall administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-user" target="_blank" rel="noopener"><code>FIREWALL_USER</code></a></td><td align="left">Firewall administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-optimizer-costs" target="_blank" rel="noopener"><code>FLUSH_OPTIMIZER_COSTS</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-status" target="_blank" rel="noopener"><code>FLUSH_STATUS</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-tables" target="_blank" rel="noopener"><code>FLUSH_TABLES</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-user-resources" target="_blank" rel="noopener"><code>FLUSH_USER_RESOURCES</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-admin" target="_blank" rel="noopener"><code>GROUP_REPLICATION_ADMIN</code></a></td><td align="left">Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-stream" target="_blank" rel="noopener"><code>GROUP_REPLICATION_STREAM</code></a></td><td align="left">Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_innodb-redo-log-archive" target="_blank" rel="noopener"><code>INNODB_REDO_LOG_ARCHIVE</code></a></td><td align="left">Redo log archiving administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_ndb-stored-user" target="_blank" rel="noopener"><code>NDB_STORED_USER</code></a></td><td align="left">NDB Cluster</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_passwordless-user-admin" target="_blank" rel="noopener"><code>PASSWORDLESS_USER_ADMIN</code></a></td><td align="left">Authentication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_persist-ro-variables-admin" target="_blank" rel="noopener"><code>PERSIST_RO_VARIABLES_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-applier" target="_blank" rel="noopener"><code>REPLICATION_APPLIER</code></a></td><td align="left"><code>PRIVILEGE_CHECKS_USER</code> for a replication channel</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave-admin" target="_blank" rel="noopener"><code>REPLICATION_SLAVE_ADMIN</code></a></td><td align="left">Replication administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-admin" target="_blank" rel="noopener"><code>RESOURCE_GROUP_ADMIN</code></a></td><td align="left">Resource group administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-user" target="_blank" rel="noopener"><code>RESOURCE_GROUP_USER</code></a></td><td align="left">Resource group administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_role-admin" target="_blank" rel="noopener"><code>ROLE_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_session-variables-admin" target="_blank" rel="noopener"><code>SESSION_VARIABLES_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_set-user-id" target="_blank" rel="noopener"><code>SET_USER_ID</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-routine" target="_blank" rel="noopener"><code>SHOW_ROUTINE</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-user" target="_blank" rel="noopener"><code>SYSTEM_USER</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-variables-admin" target="_blank" rel="noopener"><code>SYSTEM_VARIABLES_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_table-encryption-admin" target="_blank" rel="noopener"><code>TABLE_ENCRYPTION_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_version-token-admin" target="_blank" rel="noopener"><code>VERSION_TOKEN_ADMIN</code></a></td><td align="left">Server administration</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_xa-recover-admin" target="_blank" rel="noopener"><code>XA_RECOVER_ADMIN</code></a></td><td align="left">Server administration</td></tr></tbody></table><h1 id="图形化界面工具"><a href="#图形化界面工具" class="headerlink" title="图形化界面工具"></a>图形化界面工具</h1><ul><li>Workbench(免费): <a href="http://dev.mysql.com/downloads/workbench/" target="_blank" rel="noopener">http://dev.mysql.com/downloads/workbench/</a></li><li>navicat(收费，试用版30天): <a href="https://www.navicat.com/en/download/navicat-for-mysql" target="_blank" rel="noopener">https://www.navicat.com/en/download/navicat-for-mysql</a></li><li>Sequel Pro(开源免费，仅支持Mac OS): <a href="http://www.sequelpro.com/" target="_blank" rel="noopener">http://www.sequelpro.com/</a></li><li>HeidiSQL(免费): <a href="http://www.heidisql.com/" target="_blank" rel="noopener">http://www.heidisql.com/</a></li><li>phpMyAdmin(免费): <a href="https://www.phpmyadmin.net/" target="_blank" rel="noopener">https://www.phpmyadmin.net/</a></li><li>SQLyog: <a href="https://sqlyog.en.softonic.com/" target="_blank" rel="noopener">https://sqlyog.en.softonic.com/</a></li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><ol><li>在SQL语句之后加上<code>\G</code>会将结果的表格形式转换成行文本形式</li><li>查看Mysql数据库占用空间：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT table_schema &quot;Database Name&quot;</span><br><span class="line">     , SUM(data_length + index_length) / (1024 * 1024) &quot;Database Size in MB&quot;</span><br><span class="line">FROM information_schema.TABLES</span><br><span class="line">GROUP BY table_schema;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven中的dependencies和dependencyManagement标签</title>
      <link href="/2022/09/06/Maven%E4%B8%ADdependence%E5%92%8CdependenceManagement/"/>
      <url>/2022/09/06/Maven%E4%B8%ADdependence%E5%92%8CdependenceManagement/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>本文主要记录学习SSM过程中对于Maven的pom.xml文件内<strong>dependencies</strong>和<strong>dependencyManagement</strong>两个标签的区别和理解。</p><p>闲言少叙，直奔主题👇</p><h2 id="情景一："><a href="#情景一：" class="headerlink" title="情景一："></a>情景一：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>web-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述pom文件中同时在<strong>dependencies</strong>和<strong>dependencyManagement</strong>中引入了mysql依赖，但是版本不同。</p><center>这里我们查看项目的外部库👇<p><img src="https://img.gejiba.com/images/07d8c055577d9f4a3378869033e9df15.png" alt></p><p>可见同时作用时版本以<strong>dependencies</strong>中指定的为准</p></center><h2 id="情景二："><a href="#情景二：" class="headerlink" title="情景二："></a>情景二：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>web-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;version&gt;8.0.25&lt;/version&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此处我们将<strong>dependencies</strong>中的<strong>version</strong>标签进行注释，即不指定版本信息再进行观察。</p><center>这里我们查看项目的外部库👇<p><img src="https://img.gejiba.com/images/44c0e5bc68a6c84b0ef1f0d2a5f13fe2.png" alt></p><p>可见不在<strong>dependencies</strong>中指定版本时，外部库版本以<strong>dependencyManagement</strong>中定义的版本为准</p></center><h2 id="情景三："><a href="#情景三：" class="headerlink" title="情景三："></a>情景三：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>web-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt;dependencies&gt;</span></span><br><span class="line"><span class="comment">        &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;version&gt;8.0.25&lt;/version&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependencies&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此处我们将<strong>dependencies</strong>标签的全部内容进行注释。</p><center>这里我们查看项目的外部库👇<p><img src="https://img.gejiba.com/images/1c6fd77878b719965c31b7dd0b6fc9bd.png" alt></p><p>可见在<strong>dependencyManagement</strong>中仅仅进行了对外部库的声明而非引用</p></center><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul><li><strong>dependencyManagement</strong>其实只是一个管理jar的作用的声明标签,是管理jar的版本的,其他他的什么作用都没有,只是定义找到该jar的三维坐标,并不是真正的去执行下载的jar的功能</li><li>在<strong>dependencies</strong>中的依赖中如果没有声明jar的版本,就到<strong>dependenciesManagement</strong>中去找,找到就使用,没有就报错</li><li>在<strong>dependencies</strong>中声明jar的版本,则使用该版本,不管在<strong>dependenciesManagement</strong>中有没有声明jar的version,都以该jar的版本为主</li></ul>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis——解决属性名和数据库字段名不一致问题（注解方式)</title>
      <link href="/2022/09/06/mybatis%E2%80%94%E2%80%94%E8%A7%A3%E5%86%B3%E5%B1%9E%E6%80%A7%E5%90%8D%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E5%90%8D%E4%B8%8D%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98%EF%BC%88%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F)/"/>
      <url>/2022/09/06/mybatis%E2%80%94%E2%80%94%E8%A7%A3%E5%86%B3%E5%B1%9E%E6%80%A7%E5%90%8D%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E5%90%8D%E4%B8%8D%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98%EF%BC%88%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="提问与解答："><a href="#提问与解答：" class="headerlink" title="提问与解答："></a>提问与解答：</h2><p><strong>提问：</strong>当我们使用注解开发时有时会遇到数据库字段名与实体类属性名不一致的问题。xml方式开发可以通过结果集映射的方式解决，那注解方式开发要怎么解决呢？</p><p><strong>解答：</strong>利用 <strong>@Results()</strong>注解！</p><p>Results注解中有两个常用的参数，一个是id，另一个是value。</p><ul><li><p><strong>id</strong>：这个参数的主要作用在于唯一标记这个Results注解，如果接口中的其他抽象方法也需要通过result注解来解决属性名和数据库字段名不一致问题，那么重新写一个Results注解就太麻烦了，这时我们就可以通过@ResultMap()注解中传入Results注解的参数id来引用Results注解中的内容。</p></li><li><p><strong>value</strong>：这个参数用于建立实体类与数据库表的映射关系，其中可以填写多个@Result注解，用来将实体类的属性名和数据库字段名一一对应。⚠<strong>需要注意如果是主键字段，@Result注解中需要设置id=true。</strong></p></li></ul><h2 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="meta">@Results</span>(id=<span class="string">"aaa"</span>,value=&#123;</span><br><span class="line">            <span class="meta">@Result</span>(id=<span class="keyword">true</span>,column = <span class="string">"id"</span>,property = <span class="string">"userId"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"name"</span>,property = <span class="string">"userName"</span>),</span><br><span class="line">            <span class="meta">@Result</span>(column = <span class="string">"age"</span>,property = <span class="string">"userAge"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select count(id) from user"</span>)</span><br><span class="line">    <span class="meta">@ResultMap</span>(value=&#123;<span class="string">"aaa"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTotalUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MyBatys </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>✨Deep-High-Resolution Representation Learning for Cross-Resolution Person Re-identification</title>
      <link href="/2021/10/07/PSHRNet/"/>
      <url>/2021/10/07/PSHRNet/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><div align="center"><p><a href="https://ieeexplore.ieee.org/document/9591273/authors#citations" target="_blank" rel="noopener"><strong><front size="5">Journal of IEEE TIP (SCI-Q1 Top)</front></strong></a></p><center>G. Zhang, 👉Y. Ge👈, Z. Dong, H. Wang, Y. Zheng and S. Chen</center><p><img src="https://img.gejiba.com/images/de85252fec31e625fecf220fa7b686b8.png" alt></p></div><h2 id="Contents-🗒"><a href="#Contents-🗒" class="headerlink" title="Contents 🗒"></a><a id="contents-">Contents 🗒</a></h2><ul><li><a href="#contents-"><a id="contents-">Contents 🗒</a></a></li><li><a href="#introduction-"><a id="introduction-">Introduction 🗒</a></a></li><li><a href="#usage-"><a id="usage-">Usage 🔧</a></a></li><li><a href="#results-"><a id="result-">Results 🏆</a></a></li><li><a href="#acknowledgements-"><a id="acknowledgements-">Acknowledgements 👍</a></a></li></ul><h2 id="Introduction-🗒"><a href="#Introduction-🗒" class="headerlink" title="Introduction 🗒"></a><a id="introduction-">Introduction 🗒</a></h2><p>We propose a Deep High-Resolution Pseudo-Siamese Framework (PS-HRNet) to solve the cross-resolution person re-ID problem. Specifically, in order to restore the resolution of low-resolution images and make reasonable use of different channel information of feature maps, we introduce and innovate VDSR module with channel attention (CA) mechanism, named as VDSR-CA. Then we reform the HRNet by designing a novel representation head to extract discriminating features, named as HRNet-ReID. In addition, a pseudo-siamese framework is constructed to reduce the difference of feature distributions between low-resolution images and high-resolution images. The experimental results on five cross-resolution person datasets verify the effectiveness of our proposed approach. Compared with the state-of-the-art methods, our proposed PS-HRNet improves 3.4%, 6.2%, 2.5%,1.1% and 4.2% at Rank-1 on MLR-Market-1501, MLR-CUHK03, MLR-VIPeR, MLR-DukeMTMC-reID, and CAVIAR datasets, respectively.</p><h2 id="Usage-🔧"><a href="#Usage-🔧" class="headerlink" title="Usage 🔧"></a><a id="usage-">Usage 🔧</a></h2><p>We use apex (A PyTorch Extension) a Pytorch extension with NVIDIA-maintained utilities to streamline mixed precision and distributed training. Some of the code here will be included in upstream Pytorch eventually. The intention of Apex is to make up-to-date utilities available to users as quickly as possible.Installation instructions can be found here: <a href="https://github.com/NVIDIA/apex#quick-start">https://github.com/NVIDIA/apex#quick-start</a>.</p><p>We display the process of the algorithm as an ipynb file, you can use jupyter notebook to view and run it.</p><p>You may need HRNet-W32-C ImageNet pretrained models or learn more about HRNet: <a href="https://github.com/HRNet/HRNet-Image-Classification.git">https://github.com/HRNet/HRNet-Image-Classification.git</a>.</p><p>Wanna know more detail of the first phase？ Check this：<a href="https://github.com/NUISTGY/Person-re-identification-based-on-HRNet">https://github.com/NUISTGY/Person-re-identification-based-on-HRNet</a></p><h2 id="Results-🏆"><a href="#Results-🏆" class="headerlink" title="Results 🏆"></a><a id="result-">Results 🏆</a></h2><div align="center"><p><img src="https://img.gejiba.com/images/6670ce1bd1696c28e0fedd4fbefd676f.png" alt></p></div><h2 id="Acknowledgements-👍"><a href="#Acknowledgements-👍" class="headerlink" title="Acknowledgements 👍"></a><a id="acknowledgements-">Acknowledgements 👍</a></h2><ul><li>This code is built on <a href="https://github.com/HRNet/HRNet-Image-Classification">HRNet-Image-Classification</a> and <a href="https://github.com/layumi/Person_reID_baseline_pytorch">Person_reID_baseline_pytorch</a>. We thank the authors for sharing their codes. To the great spirit of open source!</li><li>Thank <a href="https://github.com/dzc2000">Z.Dong</a> and <a href="https://github.com/Rockdow">H.Wang</a>, they are the most important contributors to the related work of the experiment. If you have any questions in the process of testing, you can send them by email or pose issues.</li><li>Thanks for the right to use the GPU workstation provided by Nanyang Technological University.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 行人重识别 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行人重识别 </tag>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deep Low-Resolution Person Re-Identification阅读笔记</title>
      <link href="/2020/07/15/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0(%E4%B8%80)/"/>
      <url>/2020/07/15/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="标题及作者"><a href="#标题及作者" class="headerlink" title="标题及作者"></a>标题及作者</h1><p><img src="https://s3.bmp.ovh/imgs/2022/09/05/aa8ff46d06e6cc07.png" alt></p><h2 id="方法概况及总结"><a href="#方法概况及总结" class="headerlink" title="方法概况及总结"></a>方法概况及总结</h2><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><p><img src="https://s3.bmp.ovh/imgs/2022/09/05/d2fb70f26d148a01.png" alt="整体架构"><br>SING CNN由SR子网(d)和Re-ID子网(e)两部分组成，在模型训练中部署三个流，分别以LR图像(a)、合成LR图像(b)和HR图像(c)作为输入。中间流(b)作为连接图像SR (d)和人Re-ID (e)学习任务的桥梁。</p><h3 id="损失函数构建"><a href="#损失函数构建" class="headerlink" title="损失函数构建"></a>损失函数构建</h3><p>损失函数由<strong>SR损失</strong>和<strong>Re-ID</strong>损失联合构建，公式如下：<br><img src="https://s3.bmp.ovh/imgs/2022/09/05/2dfc3dd0e6857260.png" alt="SR损失函数 "><br><img src="https://s3.bmp.ovh/imgs/2022/09/05/f440a4392562d931.png" alt="Re-ID损失函数"><br>L-reid式中：<br><img src="https://s3.bmp.ovh/imgs/2022/09/05/aed7d2417f060ddb.png" alt=" "><br>最后构建联合损失函数如下：<br><img src="https://s3.bmp.ovh/imgs/2022/09/05/194e32f193a83d27.png" alt="联合损失函数"></p><h3 id="训练及验证"><a href="#训练及验证" class="headerlink" title="训练及验证"></a>训练及验证</h3><p>训练阶段上文已叙述，主要讲一下验证时的操作。验证时输入为2张图片，分别来自gallery的HR图片和probe的LR图片。对于HR图片，直接经过Re-ID子网提取特征；对于LR图片，需要先进行SR子网的增强再经过Re-ID提取特征，最后度量L2距离。</p><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p>参考以下四张表格：<br><img src="https://s3.bmp.ovh/imgs/2022/09/05/da5efeb01914b978.png" alt="和现行方法的比较"><br><img src="https://s3.bmp.ovh/imgs/2022/09/05/3d02d144e35fddb2.png" alt="组合网络的比较"><br><img src="https://s3.bmp.ovh/imgs/2022/09/05/26de61efb1180638.png" alt="加入自制LR的效果"><br><img src="https://s3.bmp.ovh/imgs/2022/09/05/5bb3aae90e39a19b.png" alt="加入多尺度的效果"></p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行人重识别 </tag>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文笔记（一）</title>
      <link href="/2020/07/14/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/07/14/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><strong>CVPR2017</strong></p><h1 id="Re-ranking-Person-Re-identification-with-k-reciprocal-Encoding"><a href="#Re-ranking-Person-Re-identification-with-k-reciprocal-Encoding" class="headerlink" title="Re-ranking Person Re-identification with k-reciprocal Encoding"></a><strong>Re-ranking Person Re-identification with k-reciprocal Encoding</strong></h1><p><img src="https://s1.ax1x.com/2022/09/05/vTREUP.png" alt></p><h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p>当将person re-ID看作一个检索过程时，re-ranking是提高其准确性的关键步骤。然而，在re-ID社区中，对re-ranking的努力有限，尤其是那些全自动、无监督的解决方案。在本文中，我们提出了一种k-reciprocal编码方法来re-ranking re-ID的结果。我们的假设是，如果一个gallery图像与k-reciprocal nearest neighbors中的probe查询相似，则更有可能是真正的匹配。具体地，给定图像，通过将其k-reciprocal nearest neighbors编码为单个向量来计算k-reciprocal特征，该向量用于在杰卡德距离（Jaccard Distance：用来衡量两个集合差异性的一种指标）下re-ranking。最终的距离计算为原始距离和杰卡德距离的组合。我们的re-ranking方法不需要任何人工交互或任何标记数据，因此适用于大规模数据集。在大型Market-1501、CUHK03、MARS和PRW数据集上的实验证实了我们方法的有效性。</p><hr><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>person re-ID是计算机视觉中的一个具有挑战性的课题。一般来说，re-ID可以被看作是一个检索问题。给定一个probe person，我们希望在gallery中搜索包含处于跨相机模式下的相同行人的图像。在获得初始排序列表之后，好的实践包括添加re-ranking步骤，期望相关图像将获得更高的排名。因此，本文将重点放在re-ranking问题上。</p><p>re-ranking主要是在通用实例检索generic instance retrieval[5、14、34、35]中进行研究。许多re-ranking主方法的主要优点是它可以在不需要额外训练样本的情况下实现，并且可以应用于任何初始ranking结果。</p><p>re-ranking的有效性在很大程度上取决于初始ranking列表initial ranking list的质量。许多先前的工作利用了初始排序列表[5，14，34，35，43，44]中排名靠前的图像(例如k-最近邻，k-nearest neighbors)之间的相似关系。一个基本的假设是，如果返回的图像在probe的k个最近邻内排序，那么它很可能是一个真正的匹配，可用于随后的re-ranking。然而，情况可能偏离最佳情况：错误匹配很可能包括在probe的k个最近邻中。例如，在图1中，P1、P2、P3和P4是4个查询图probe的真实匹配，但是它们都不包括在top-4中。我们观察到一些错误匹配（N1-N6）获得高排名。结果，直接使用top-k的图像可能在re-ranking系统中引入噪声并损害最终结果。<br><img src="https://s1.ax1x.com/2022/09/05/vTReC8.png" alt><br>在文献中，k-reciprocal nearest neighbor[14，34]是解决上述问题的有效方法，即被错误匹配污染的top-k图像。当两个图像被称为k-reciprocal nearest neighbor时，当另一个图像作为probe时，它们都被排到top-k。因此，k-reciprocal nearest neighbor作为两个图像是否正确匹配的更严格规则。在图1中，我们观察到probe是正确匹配图像的reciprocal neighbor，而不是错误匹配图像的reciprocal neighbor。该观察识别初始排序列表initial ranking list中的正确匹配，以改善重新排序re-ranking结果。</p><p>基于以上考虑，本文提出了一种基于k-reciprocal编码的re-ID re-ranking方法。我们的方法包括三个步骤。首先，将加权的k-reciprocal neighbor 集编码为一个向量，形成k-reciprocal特征。然后，两个图像之间的Jaccard距离可以通过它们的k-reciprocal特征来计算。其次，为了获得更鲁棒的k-reciprocal特征，我们改进了一种局部查询扩展方法（a local query expansion approach），以进一步改善re-ID性能。最后，最终距离的计算为原始距离和Jaccard距离的加权集合。随后，它被用来获取re-ranking列表。所提出的方法的框架如图2所示。综上所述，本文的贡献是：</p><ol><li>我们提出了一个k-reciprocal特征通过编码k-reciprocal特征到一个单一的向量。重re-ranking过程可以很容易地通过向量比较来执行。</li><li>我们的方法不需要任何人工交互或带标注的数据，并且可以自动和无监督的方式应用于任何人person re-ID ranking结果。</li><li>该方法有效地提高了Market-1501、CUHK03、MARS和PRW等数据集上的person re-ID性能。特别地，我们在rank-1和mAP上实现了Market-1501的最先进的精度。<br><img src="https://s1.ax1x.com/2022/09/05/vTRV4f.png" alt></li></ol><h1 id="Related-Work"><a href="#Related-Work" class="headerlink" title="Related Work"></a>Related Work</h1><p>我们推荐感兴趣的读者阅读[3，50]以详细回顾person re-ID。在此，我们重点研究用于目标检索，特别是用于re-ID的re-ranking方法。</p><p><strong>Re-ranking for object retrieval.</strong><br>Re-ranking方法已被成功地研究以提高目标检索精度[51]。许多工作利用k-nearest neighbors来探索相似关系来解决re-ranking问题。[5]提出了average query expansion (AQE)方法，该方法通过对top-k返回结果中的向量进行平均，得到一个新的查询向量（query vector），用于对数据库进行重新查询。为了利用远离查询图像的负样本，Arandjelović和Zisserman[1]改进了discriminative query expansion (DQE)，使用线性SVM来获得权重向量。从决策边界的距离被用来修改初始排序表（initial ranking list）。[35]利用初始排序表的k-nearest neighbors作为新查询（queries）来生成新的排序表。每个图像的新得分根据其在产生的排序表中的位置来计算。最近，稀疏上下文激活sparse contextual activation (SCA)[2]提出将neighbor set编码为向量，并通过广义Jaccard距离来表示样本的相似性。为了防止错误匹配对top-k图像的污染，[14，34]中采用了k-reciprocal nearest neighbors的概念。在[14]中提出了上下文不相似性度量contextual dissimilarity measure (CDM)，通过迭代正则化每个点到其邻域的平均距离来细化相似性。[34]正式提出k-reciprocal nearest neighbors的概念。k-reciprocal nearest neighbors被认为是高度相关的候选，用于构造闭集（closed set）以re-ranking数据集的其余部分。我们的工作从两个方面背离了这两个方法。我们不像文献[14]那样对最近邻（nearest neighborhood）关系进行对称化来细化相似度，也不像文献[34]那样直接将k-reciprocal nearest neighbors看作高阶样本。相反，我们通过比较两幅图像的k-reciprocal nearest neighbors来计算它们之间的新距离。</p><p><strong>Re-ranking for re-ID.</strong><br>大多数现有的person re-ID方法主要集中于特征表示[41，12，23，48，21]或度量学习[23，17，9，32，45]。最近，一些研究者[10，33，28，24，49，20，11，19，42，44]已经注意到在re-ID社区中基于re-ranking的方法。[20]通过分析每对图像的近邻（near neighbors）的相关信息和直接信息，建立re-ranking模型。在[11]中，通过联合考虑排序列表中的内容和上下文信息，学习无监督的重新排序模型，有效地去除了模糊样本，提高了re-ID的性能。[19]提出一种双向排序（bidirectional ranking）方法，利用计算得到的新相似度作为内容相似度和上下文相似度的融合，对初始排序表进行修正。最近，利用不同基线（different baseline）方法的公共最近邻来re-ranking任务[42，44]。[42]将全局特征和局部特征的公共最近邻作为新查询（queries），通过集合全局特征和局部特征的新排序列表来修改初始排序列表。在[44]中，利用k-nearest neighbor set从不同的baseline方法计算相似度和不相似度，然后进行相似度和不相似度的集合来优化初始排序表。上述方法在re-ranking方面继续取得进展，有望为将来从k-nearest neighbors发现进一步的信息作出贡献。然而，使用k-nearest neighbors直接实现re-ranking可能限制整体性能，因为常常包括错误匹配。<strong>为了解决这个问题，本文研究了k-reciprocal neighbors在person re-ID中的重要性，从而设计了一个简单而有效的re-ranking方法。</strong></p><h1 id="Proposed-Approach"><a href="#Proposed-Approach" class="headerlink" title="Proposed Approach"></a>Proposed Approach</h1><h3 id="Problem-Definition"><a href="#Problem-Definition" class="headerlink" title="Problem Definition"></a>Problem Definition</h3><p>给定查询图像<code>p</code>和<code>gallery set</code>（包含N幅图像，<code>G = {gi | i = 1, 2, ...N }</code>），<code>p</code>和<code>gi</code>之间的原始距离可以用马氏距离（Mahalanobis distance）衡量：<br><img src="https://s1.ax1x.com/2022/09/05/vTR9jH.png" alt><br>其中，<code>xp</code>个<code>xg</code>分别代表查询图<code>p</code>和<strong>检测集gallery</strong>中<code>gi</code>的外观特征，<code>M</code>是半正定矩阵。<br>初始排序表：<br><img src="https://s1.ax1x.com/2022/09/05/vTRpge.png" alt><br>可根据<code>probe p</code>和<code>gallery gi</code>之间的成对原始距离得到，其中：<br><img src="https://s1.ax1x.com/2022/09/05/vTRPud.png" alt><br>我们的目标是对<code>L(p,G)</code>进行<strong>re-rank</strong>，使更多的正样本排在<code>top</code>列表中，从而提高person re-ID的性能。</p><h3 id="K-reciprocal-Nearest-Neighbors"><a href="#K-reciprocal-Nearest-Neighbors" class="headerlink" title="K -reciprocal Nearest Neighbors"></a>K -reciprocal Nearest Neighbors</h3><p>我们将<code>N(p,k)</code>定义为一个probe p的k-nearest neighbors（i.e. 排序列表的top-k samples）：<br><img src="https://s1.ax1x.com/2022/09/05/vTRFHI.png" alt><br>其中，<code>|.|</code>表示集合中候选的数目。k-reciprocal nearest neighbors <code>R(p, k)</code>可以定义为：<br><img src="https://s1.ax1x.com/2022/09/05/vTRAEt.png" alt><br><strong>根据前面的描述，k-reciprocal nearest neighbors比k-nearest neighbors和probe p更相关</strong>。然而，由于照明、姿态、视图和遮挡的变化，正样本图像可能被从k-nearest neighbors中排除，并且随后不被包括在k-reciprocal nearest neighbors中。为了解决这个问题，我们根据以下条件将<code>R(p，k)</code>中每个候选项的<code>1/2 k-reciprocal nearest neighbors</code>增量地添加到更鲁棒的集合<code>R*(p，k)</code>中：<br><img src="https://s1.ax1x.com/2022/09/05/vTRiDA.png" alt></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>在本文中，我们解决person re-ID的re-ranking问题。通过将k-reciprocal nearest neighbors编码为单个向量，我们提出了k-reciprocal特征，从而可以通过向量比较容易地执行re-ranking过程。为了从相似样本中获取相似关系，提出了局部扩展查询（local expansion query）以获得更鲁棒的k-reciprocal特征。基于原始距离和Jaccard距离的组合的最终距离有效地提高了多个大规模数据集上的re-ID性能。值得一提的是，我们的方法是全自动和无监督的，并且可以很容易地实现任何ranking结果。</p>]]></content>
      
      
      <categories>
          
          <category> 论文笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行人重识别 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy之sum函数的axis参数</title>
      <link href="/2020/03/21/numpy%E4%B8%AD%E7%9A%84axis%E5%8F%82%E6%95%B0/"/>
      <url>/2020/03/21/numpy%E4%B8%AD%E7%9A%84axis%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h1><p>没有axis参数表示全部相加，axis＝0表示按列相加，axis＝1表示按照行的方向。验证如下：<br><img src="https://5b0988e595225.cdn.sohucs.com/images/20171124/e90ccf3e7386468fa64c8b4bc0e60e5e.png" alt="axis&amp;sum"></p><h1 id="推广："><a href="#推广：" class="headerlink" title="推广："></a>推广：</h1><p>axis=i表示对array的第i个维度<strong>变化</strong>的方向进行操作！</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy数组和python列表的区别</title>
      <link href="/2020/03/21/numpy%E6%95%B0%E7%BB%84%E5%92%8Cpython%E5%88%97%E8%A1%A8%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2020/03/21/numpy%E6%95%B0%E7%BB%84%E5%92%8Cpython%E5%88%97%E8%A1%A8%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><ol><li><p>numpy数组创建时是固定大小，python数组（list）是动态的。更改ndarray的大小将创建一个新数组并删除原来的数组。</p></li><li><p>元素类型区别。</p></li><li><p>NumPy数组中的元素都需要具有相同的数据类型，因此在内存中的大小相同。</p></li><li><p>python的List可以存放不同类型的元素。</p></li><li><p>例外情况：Python的原生数组里包含了NumPy的对象的时候，这种情况下就允许不同大小元素的数组。</p></li><li><p>数学操作执行效率高于原生python</p></li><li><p>越来越多的基于Python的科学和数学软件包使用NumPy数组</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--java.lang.comparable接口实战</title>
      <link href="/2020/03/16/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(37)/"/>
      <url>/2020/03/16/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(37)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> * 实现java.lang.comparable接口并测试Array.sort()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Comparable</span>&lt;<span class="title">Employee</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> salary;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">int</span> salary,String name)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.salary = salary;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Employee o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(name.compareTo(o.name)!=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> name.compareTo(o.name);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (salary&lt;o.salary) </span><br><span class="line"><span class="keyword">return</span> - <span class="number">1</span> ;  </span><br><span class="line"><span class="keyword">if</span> (salary&gt;o.salary)  </span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> ;  </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> ;        </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestClass</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> Employee[] staff =  <span class="keyword">new</span> Employee[ <span class="number">4</span> ];  </span><br><span class="line">        staff[ <span class="number">0</span> ] =  <span class="keyword">new</span> Employee(<span class="number">001</span>,<span class="number">5000</span>,<span class="string">"harry"</span>);  </span><br><span class="line">        staff[ <span class="number">1</span> ] =  <span class="keyword">new</span> Employee(<span class="number">002</span>,<span class="number">3000</span>,<span class="string">"carl "</span>);  </span><br><span class="line">        staff[ <span class="number">2</span> ] =  <span class="keyword">new</span> Employee(<span class="number">003</span>,<span class="number">4000</span>,<span class="string">"tony "</span>);  </span><br><span class="line">        staff[ <span class="number">3</span> ] =  <span class="keyword">new</span> Employee(<span class="number">004</span>,<span class="number">6000</span>,<span class="string">"carl "</span>);  </span><br><span class="line"></span><br><span class="line">    java.util.Arrays.sort(staff);</span><br><span class="line"><span class="keyword">for</span>(Employee e: staff)  </span><br><span class="line">        System.out.println( <span class="string">"id="</span> +e.getId()+ <span class="string">"  name="</span> +e.getName()+  <span class="string">"  salary="</span> +e.getSalary());  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong><br><img src="https://s3.bmp.ovh/imgs/2022/09/05/8939f59ba6ee01f6.png" alt="java" title="运行结果"></p><p><strong>上述代码是某次Java作业，题目描述如下：</strong></p><blockquote><p>编写员工Employee类，包含id、姓名、工资salary等属性。令Employee类实现java.lang.comparable接口，并实现compareTo（）方法，制定比较规则。在测试类中创建几个Employee对象，利用java.util.Array类中的方法对其进行排序并打印输出结果。PS:关于比较的规则，建议分别按照name和salary进行升序排列。</p></blockquote><p><strong>题目出自接口技术一章，实则难点不在接口技术，Java新手在阅读上述代码往往会感到困惑，搞不懂为何对compareTo的自定义实现会影响sort方法的效果？</strong></p><h1 id="Array-Sort"><a href="#Array-Sort" class="headerlink" title="Array.Sort()"></a>Array.Sort()</h1><blockquote><p>即使是小白，在阅读完代码后，也应该会产生这样的猜测：line48的java.util.Arrays.sort(staff);的sort方法内会不会用到了compareTo方法了呢？</p></blockquote><p>很好的猜想，让我们进入sort（）内部看看：<br><img src="https://s3.bmp.ovh/imgs/2022/09/05/e82a45de2e7c9fd7.png" alt="java" title="内部实现"><br>进入sort（）内部实现后根据关键信息我们又能很轻易的追溯到mergeSort方法，那就继续进入mergeSort（）的内部实现：<br><img src="https://s3.bmp.ovh/imgs/2022/09/05/6e1c7b20b16b9dd9.png" alt="java" title="内部实现"><br><strong>如果你看到这里：那么，恭喜你花生🥜，你发现的盲点！</strong><br>很显然，mergeSort内部的排序依赖了参与排序的对象的两两比较（dest[]是对象数组）for循环最里层做的事情是将对象转换为Compareble类型并调用其compareTo()方法，所以需要被比较的对象实现Comparable接口。感兴趣的话可以搜一下模板方法设计模式，这算其中一个典型的应用，个人认为并不属于纯接口技术的编程题。</p><h1 id="Comparable接口compareTo方法的总结"><a href="#Comparable接口compareTo方法的总结" class="headerlink" title="Comparable接口compareTo方法的总结"></a>Comparable接口compareTo方法的总结</h1><p>关于升序还是降序的问题，总结如下：</p><ul><li>正序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Test o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.i - o.i;</span><br></pre></td></tr></table></figure><ul><li>逆序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Test o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  o.i-<span class="keyword">this</span>.i ;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matlab之ineterp1插值</title>
      <link href="/2020/02/21/Matlab%E6%95%B0%E6%A8%A1(1)/"/>
      <url>/2020/02/21/Matlab%E6%95%B0%E6%A8%A1(1)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%一维插值</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">0</span> : <span class="built_in">pi</span>/<span class="number">4</span> : <span class="number">2</span> * <span class="built_in">pi</span>;     <span class="comment">%x的样本值</span></span><br><span class="line">y = <span class="built_in">sin</span>(x);                <span class="comment">%y的样本值</span></span><br><span class="line">xx = <span class="number">0</span> : <span class="number">0.5</span> : <span class="number">2</span> * <span class="built_in">pi</span>;     <span class="comment">%目标的x值</span></span><br><span class="line"><span class="comment">%分段线性插值（默认）</span></span><br><span class="line">y1 = interp1(x,y,xx);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>);<span class="built_in">plot</span>(x,y,<span class="string">'o'</span>,xx,y1,<span class="string">'r'</span>);</span><br><span class="line">title(<span class="string">'分段线性插值'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">%临近插值</span></span><br><span class="line">y2 = interp1(x,y,xx,<span class="string">'nearnest'</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>);<span class="built_in">plot</span>(x,y,<span class="string">'o'</span>,xx,y2,<span class="string">'r'</span>);</span><br><span class="line">title(<span class="string">'邻近插值'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">%球面线性插值</span></span><br><span class="line">y3 = interp1(x,y,xx,<span class="string">'spline'</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>);<span class="built_in">plot</span>(x,y,<span class="string">'o'</span>,xx,y3,<span class="string">'r'</span>);</span><br><span class="line">title(<span class="string">'球面线性插值'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">%三次多项式插值</span></span><br><span class="line">y4 = interp1(x,y,xx,<span class="string">'PCHIP'</span>);</span><br><span class="line">subplot(<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>);<span class="built_in">plot</span>(x,y,<span class="string">'o'</span>,xx,y4,<span class="string">'r'</span>);</span><br><span class="line">title(<span class="string">'三次多项式插值'</span>)</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><p><img src="https://s3.bmp.ovh/imgs/2022/09/05/7f0cd8ca7c6c30fd.png" alt="ans" title="ans"></p>]]></content>
      
      
      <categories>
          
          <category> 科学计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matlab </tag>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matlab之二维插值：估测海底某曲面地形</title>
      <link href="/2020/02/21/Matlab%E6%95%B0%E6%A8%A1(2)/"/>
      <url>/2020/02/21/Matlab%E6%95%B0%E6%A8%A1(2)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 2维插值示例：估测海底某曲面地形</span></span><br><span class="line">x = [<span class="number">129</span>,<span class="number">140</span>,<span class="number">103.5</span>,<span class="number">88</span>,<span class="number">185.5</span>,<span class="number">195</span>,<span class="number">105</span>,<span class="number">157.5</span>,<span class="number">107.5</span>,<span class="number">77</span>,<span class="number">81</span>,<span class="number">162</span>,<span class="number">162</span>,<span class="number">117.5</span>];</span><br><span class="line">y = [<span class="number">7.5</span>,<span class="number">141.5</span>,<span class="number">23</span>,<span class="number">147</span>,<span class="number">22.5</span>,<span class="number">137.5</span>,<span class="number">85.5</span>,<span class="number">-6.5</span>,<span class="number">-81</span>,<span class="number">3</span>,<span class="number">56.5</span>,<span class="number">-66.5</span>,<span class="number">84</span>,<span class="number">-33.5</span>];</span><br><span class="line">z = -[<span class="number">4</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">9</span>];</span><br><span class="line">xmm = minmax(x);</span><br><span class="line">ymm = minmax(y);</span><br><span class="line">xi = xmm(<span class="number">1</span>):<span class="number">2.5</span>:xmm(<span class="number">2</span>);</span><br><span class="line">yi = ymm(<span class="number">1</span>):<span class="number">2.5</span>:ymm(<span class="number">2</span>);</span><br><span class="line">z_interp = griddata(x,y,z,xi,yi',<span class="string">'V4'</span>);     <span class="comment">%griddata插值同interp2，但是对数据要求不严格</span></span><br><span class="line">surf(xi,yi,z_interp);</span><br></pre></td></tr></table></figure><p><strong>输出结果</strong></p><p><img src="https://s3.bmp.ovh/imgs/2022/09/05/a671546bee229037.png" alt="ans" title="ans"></p><p><img src="https://s3.bmp.ovh/imgs/2022/09/05/b516d0a759d6dc00.png" alt="ans" title="ans"></p><blockquote><p>PS:深度大于0的部分应手动舍弃，边值区域的二维插值会遇到问题。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 科学计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matlab </tag>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java自增自减运算符天坑笔试题</title>
      <link href="/2020/02/19/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(38)/"/>
      <url>/2020/02/19/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(38)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="问：下面程序运行的结果是什么？"><a href="#问：下面程序运行的结果是什么？" class="headerlink" title="问：下面程序运行的结果是什么？"></a><strong>问：下面程序运行的结果是什么？</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">    count = count++;</span><br><span class="line">System.out.println(<span class="string">"count = "</span> + count);</span><br></pre></td></tr></table></figure><h2 id="答：count-0"><a href="#答：count-0" class="headerlink" title="答：count = 0"></a><strong>答：count = 0</strong></h2><p>首先 count++ 是一个有返回值的表达式，返回值是 count 自加前面的值，java 对自加处理的流程是先把 count 的值（不是引用），拷贝到一个临时变量区，然后对 count 变量加 1，接着返回临时变量区的值。</p><p>所以上面代码中第一次循环执行的步骤是 JVM 把 count 的值（0）拷贝到临时变量区，然后 count 值加 1，这时 count 的值是 1，接着返回临时变量区的值（值还是 0），最后赋值给 count，此时 count 值被重置成 0。所以上面代码语句，count = count++可以按照如下代码来理解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">autoAdd</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = count;</span><br><span class="line">    count = coutn + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一次循环后 count 的值还是 0，其他 99 次的循环也是一样，最终导致 count 的值始终没变，任然保持最初的状态，如果想要打印 100，则把语句count = count++改为count++即可。<strong>不过这个问题在不同的语言环境中是不一样的，在 c++ 中count = count++与count++是等效的，但在 Java 中是不等效的。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
            <tag> 坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--String类初识</title>
      <link href="/2020/02/19/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(39)/"/>
      <url>/2020/02/19/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(39)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.nuistgy.teststring;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试字符串类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String str = <span class="string">"abc"</span>;</span><br><span class="line">String str1 = <span class="keyword">new</span> String(<span class="string">"def"</span>);</span><br><span class="line">String str2 = <span class="string">"abc"</span>+<span class="string">"def"</span>;</span><br><span class="line">String str3 = <span class="string">"1"</span>+<span class="number">1</span>;</span><br><span class="line">System.out.println(str3);</span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">String str4 = <span class="string">"xyz"</span>;</span><br><span class="line">String str5 = <span class="string">"xyz"</span>;</span><br><span class="line">String str6 = <span class="keyword">new</span> String(<span class="string">"xyz"</span>);</span><br><span class="line">System.out.println(str4==str5);<span class="comment">//输出true</span></span><br><span class="line">System.out.println(str5==str6);<span class="comment">//输出false</span></span><br><span class="line">System.out.println(str5.equals(str6));<span class="comment">//输出true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>关于String类既没什么好讲的又有太多东西可讲，因为相关知识点很多、很细小，建议适合配合document使用。博客里仅推送一些必要的以及学习中应值得注意的知识点，后续也会进行补充。</p></blockquote><p>关于上述代码，注意三点：“+”号的作用是充当字符串连接符；str4和str5均指向字符串常量池的同一个字符串“xyz”，但是new String得到的字符串对象是一个全新的，故“==”判别为false；equals用来对字符串内容作比较，==是对地址做比较。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--数组用法(2)</title>
      <link href="/2020/01/31/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(36)/"/>
      <url>/2020/01/31/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(36)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> * 测试三种初始化方法和foreach遍历</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.github.nuistgy.testarray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//静态初始化</span></span><br><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">Student stu[] = &#123;<span class="keyword">new</span> Student(<span class="number">1001</span>,<span class="string">"Mark"</span>),</span><br><span class="line"> <span class="keyword">new</span> Student(<span class="number">1002</span>,<span class="string">"Jhon"</span>),</span><br><span class="line"> <span class="keyword">new</span> Student(<span class="number">1003</span>,<span class="string">"Jack"</span>)</span><br><span class="line"> &#125;;</span><br><span class="line">  <span class="comment">//默认初始化</span></span><br><span class="line"><span class="keyword">int</span> b[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];<span class="comment">//默认是0</span></span><br><span class="line"><span class="keyword">boolean</span> bool[] = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">3</span>];<span class="comment">//默认是false</span></span><br><span class="line">String s[] = <span class="keyword">new</span> String[<span class="number">3</span>];<span class="comment">//默认是null</span></span><br><span class="line">Student stu_[] = <span class="keyword">new</span> Student[<span class="number">3</span>]; <span class="comment">//默认是null</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//动态初始化</span></span><br><span class="line"><span class="keyword">int</span> c[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">c[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">c[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">c[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//foreach遍历.注意：foreach不用于写操作，只用于读操作</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> m :c) &#123;</span><br><span class="line">System.out.println(m);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String  name;</span><br><span class="line"></span><br><span class="line">Student(<span class="keyword">int</span> id,String name)&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--super用法(1)</title>
      <link href="/2020/01/30/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(33)/"/>
      <url>/2020/01/30/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(33)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试super用法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> * super是对直接父类的引用，可以通过super来访问被子类覆盖的父类的方法或属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 面向对象核心;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSuper</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> ChildClass().func();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FatherClass</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> value;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">value = <span class="number">100</span>;</span><br><span class="line">System.out.println(<span class="string">"FatherClass.value="</span>+value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildClass</span> <span class="keyword">extends</span> <span class="title">FatherClass</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> value;<span class="comment">//覆盖了父类的value属性</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;<span class="comment">//重写了父类func（）方法</span></span><br><span class="line"><span class="keyword">super</span>.func();<span class="comment">//调用父类value</span></span><br><span class="line">value = <span class="number">200</span>;<span class="comment">//指子类的value</span></span><br><span class="line">System.out.println(<span class="string">"ChildClass.value="</span>+value);</span><br><span class="line">System.out.println(<span class="keyword">super</span>.value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--super用法(2)</title>
      <link href="/2020/01/30/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(34)/"/>
      <url>/2020/01/30/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(34)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试super用法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 面向对象核心;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSuper1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"创建一个Child对象："</span>);</span><br><span class="line"><span class="keyword">new</span> ChildClass_();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FatherClass_</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FatherClass_</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//super();</span></span><br><span class="line">System.out.println(<span class="string">"创建FatherClass_"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildClass_</span> <span class="keyword">extends</span> <span class="title">FatherClass_</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ChildClass_</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//super();</span></span><br><span class="line">  <span class="comment">//所有构造方法第一句都是super();不加编译器会自动添加</span></span><br><span class="line">System.out.println(<span class="string">"创建ChildClass_"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//本例继承树为：Object（顶端）--&gt;FatherClass_--&gt;ChildClass_（底端）</span></span><br><span class="line"><span class="comment">//类的继承都是先一步一步向上追溯到继承树顶端，再从顶端向底端一个一个调用类构造器，完成初始化</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--super用法(2)</title>
      <link href="/2020/01/30/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(35)/"/>
      <url>/2020/01/30/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(35)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试super用法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 面向对象核心;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSuper1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"创建一个Child对象："</span>);</span><br><span class="line"><span class="keyword">new</span> ChildClass_();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FatherClass_</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FatherClass_</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//super();</span></span><br><span class="line">System.out.println(<span class="string">"创建FatherClass_"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildClass_</span> <span class="keyword">extends</span> <span class="title">FatherClass_</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ChildClass_</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//super();</span></span><br><span class="line">  <span class="comment">//所有构造方法第一句都是super();不加编译器会自动添加</span></span><br><span class="line">System.out.println(<span class="string">"创建ChildClass_"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//本例继承树为：Object（顶端）--&gt;FatherClass_--&gt;ChildClass_（底端）</span></span><br><span class="line"><span class="comment">//类的继承都是先一步一步向上追溯到继承树顶端，再从顶端向底端一个一个调用类构造器，完成初始化</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--多态与对象转型</title>
      <link href="/2020/01/29/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(32)/"/>
      <url>/2020/01/29/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(32)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试多态与对象转型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> * 多态三要素：继承、重写、父类引用指向子类对象</span></span><br><span class="line"><span class="comment"> * 对象转型关键点：子类转向父类是自动转型、父类转向子类是强制转型、直系可转型、兄弟系互转可通过编译但是运行报错、编译阶段按表面类型、运行阶段按本质类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 面向对象核心;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPolyf</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Animal a = <span class="keyword">new</span> Animal();</span><br><span class="line">Animal d_ = <span class="keyword">new</span> Dog();<span class="comment">//d_本质还是Dog类对象变量（自动转型）,但编译环节暂定为Animal类</span></span><br><span class="line">Animal c_ = <span class="keyword">new</span> Cat();<span class="comment">//c_本质还是Cat类对象变量（自动转型）,但编译环节暂定为Animal类</span></span><br><span class="line">Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">Cat c = <span class="keyword">new</span> Cat();</span><br><span class="line"></span><br><span class="line">d_.x = <span class="number">1</span>;<span class="comment">//不报错,编译环节暂定d_是Animal类，拥有Animal类的成员变量</span></span><br><span class="line">  <span class="comment">//d_.y = 1;//报错,编译环节暂定d_是Animal类，无法拥有Dog类的成员变量</span></span><br><span class="line"></span><br><span class="line">Dog _d = (Dog)d_;<span class="comment">//使用强制类型转换，将Animal类的d_转为Dog类</span></span><br><span class="line">_d.y = <span class="number">1</span>;<span class="comment">//转型后可以使用Dog类的成员变量</span></span><br><span class="line"></span><br><span class="line">Dog _d_ = (Dog)c_;<span class="comment">//编译通过，JVM运行时报错</span></span><br><span class="line">_d_.y = <span class="number">1</span>;<span class="comment">//编译通过，JVM运行时报错</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//当传入子类对象的引用d,c,d_,c_发生多态：</span></span><br><span class="line">animalCry(a);</span><br><span class="line">animalCry(d_);<span class="comment">//在运行环节JVM会自动识别出d_本质是Dog类，从而完成多态</span></span><br><span class="line">animalCry(c_);<span class="comment">//在运行环节JVM会自动识别出c_本质是Cat类，从而完成多态</span></span><br><span class="line">animalCry(d);</span><br><span class="line">animalCry(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">animalCry</span><span class="params">(Animal a<span class="comment">/*这里一定要是父类引用*/</span>)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//多态机制实现了代码的重用与精简</span></span><br><span class="line">a.shout();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Animal shout!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;<span class="comment">//继承</span></span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Dog shout!"</span>);<span class="comment">//重写</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;<span class="comment">//继承</span></span><br><span class="line"><span class="keyword">int</span> z;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Cat shout!"</span>);<span class="comment">//重写</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>多态的注意事项</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">father</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">son</span> <span class="keyword">extends</span> <span class="title">father</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">special</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        father o = <span class="keyword">new</span> son();</span><br><span class="line">        </span><br><span class="line">        o.show();</span><br><span class="line">        System.out.println(o.x);</span><br><span class="line">        <span class="comment">// o.special(); ERROR</span></span><br><span class="line"></span><br><span class="line">        son s = (son)o;</span><br><span class="line">        </span><br><span class="line">        s.show();</span><br><span class="line">        System.out.println(s.x);</span><br><span class="line">        s.special();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ul><li>对于方法的调用，编译时以左边引用类型有的为准，运行时以具体绑定的对象类型为准</li><li>对于变量的调用，编译时以左边引用类型有的为准，运行时也以左边的引用类型为准</li><li>可以通过强转的方式将指向子类对象的父类引用转回子类引用，转回后的引用支持访问子类特有的方法</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--static关键字</title>
      <link href="/2020/01/28/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(26)/"/>
      <url>/2020/01/28/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(26)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试static关键字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 面向对象;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStatic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> x;<span class="comment">//属于类而不属于对象</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> y;<span class="comment">//属于类而不属于对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//普通成员方法可以调用类的普通成员变量和static变量和static方法</span></span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br><span class="line">System.out.println(x);</span><br><span class="line">System.out.println(y);</span><br><span class="line">System.out.println(<span class="string">"普通成员方法func1"</span>);</span><br><span class="line">func2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//属于类而不属于对象</span></span><br><span class="line"><span class="comment">//不可在static方法调用this.a或this.b或this.func1()</span></span><br><span class="line"><span class="comment">//static方法的生命周期与类相同，早于对象的诞生，而普通成员变量是属于对象的，所以static方法无法调用普通成员变量</span></span><br><span class="line">System.out.println(<span class="string">"static成员方法func2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">TestStatic obj = <span class="keyword">new</span> TestStatic();</span><br><span class="line">x = <span class="number">1</span>;<span class="comment">//可以不通过对象直接调用static成员变量</span></span><br><span class="line">System.out.println(x);<span class="comment">//可以不通过对象直接调用static成员变量</span></span><br><span class="line">System.out.println(TestStatic.x);<span class="comment">//可以通过对象调用static成员变量</span></span><br><span class="line"></span><br><span class="line">func2();<span class="comment">//可以不通过对象直接调用static成员方法</span></span><br><span class="line">TestStatic.func2();<span class="comment">//可以通过对象调用static成员变量</span></span><br><span class="line"></span><br><span class="line">TestStatic obj1 = <span class="keyword">new</span> TestStatic();</span><br><span class="line">TestStatic.x ++;</span><br><span class="line">System.out.println(TestStatic.x);</span><br><span class="line"><span class="comment">//静态变量的改变相当于是对类模板的改变，会对其他对象产生影响，</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--抽象类</title>
      <link href="/2020/01/28/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(27)/"/>
      <url>/2020/01/28/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(27)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试抽象类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.github.nuistgy.testabstract;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="comment">//有抽象方法必须是抽象类</span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">//抽象方法没有实现过程</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breath</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//抽象类可以包含普通方法或静态方法</span></span><br><span class="line">System.out.println(<span class="string">"呼吸！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//Animal a = new Animal();抽象类无法实例化</span></span><br><span class="line">Animal.breath();  <span class="comment">//抽象类的普通静态方法可以直接使用</span></span><br><span class="line">Animal.a = <span class="number">1</span>;  <span class="comment">//抽象类的普通静态成员变量可以直接使用</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"汪汪！"</span>);</span><br><span class="line"><span class="comment">//子类必须对父类抽象方法进行实现</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*总结：</span></span><br><span class="line"><span class="comment"> * 有抽象方法的类必须定义为抽象类</span></span><br><span class="line"><span class="comment"> * 抽象类可以包含属性、方法、构造器，但是不能被实例化</span></span><br><span class="line"><span class="comment"> * 普通属性和方法只能被子类调用，静态方法或属性可以直接使用</span></span><br><span class="line"><span class="comment"> * 抽象方法必须被子类实现</span></span><br><span class="line"><span class="comment"> * 抽象类的意义在于为子类提供统一的、规范的模板</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--继承</title>
      <link href="/2020/01/28/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(28)/"/>
      <url>/2020/01/28/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(28)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试继承</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 面向对象核心;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestExtends</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">Student stu_ = <span class="keyword">new</span> Student(<span class="string">"Max"</span>,<span class="number">170</span>,<span class="string">"C++"</span>);</span><br><span class="line">  <span class="comment">//stu拥有Person类所以属性和方法</span></span><br><span class="line">stu.name = <span class="string">"Jack"</span>;</span><br><span class="line">stu.height = <span class="number">180</span>;</span><br><span class="line">stu.major = <span class="string">"JAVA"</span>;</span><br><span class="line">stu.breath();</span><br><span class="line"></span><br><span class="line">System.out.println(stu <span class="keyword">instanceof</span> Student);</span><br><span class="line">System.out.println(stu <span class="keyword">instanceof</span> Person);</span><br><span class="line">System.out.println(stu <span class="keyword">instanceof</span> Object);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> height;</span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">breath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"呼吸"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int height;</span></span><br><span class="line"><span class="comment">//String name;</span></span><br><span class="line">String major;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> height,String major)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.height = height;</span><br><span class="line"><span class="keyword">this</span>.major = major;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"学习"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*public void breath() &#123;</span></span><br><span class="line"><span class="comment">*System.out.println("呼吸");</span></span><br><span class="line"><span class="comment">*&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*父类也叫超类或基类</span></span><br><span class="line"><span class="comment">*没有多继承，只有单继承</span></span><br><span class="line"><span class="comment">*接口技术有多继承</span></span><br><span class="line"><span class="comment">*java中只有共有继承</span></span><br><span class="line"><span class="comment">*子类可以得到父类的全部属性和方法（构造方法除外），但不见得都可以使用</span></span><br><span class="line"><span class="comment">*如果没有使用extends继承则默认是继承了java.lang.Object</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--重写</title>
      <link href="/2020/01/28/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(29)/"/>
      <url>/2020/01/28/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(29)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试重写</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 面向对象核心;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOverride</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Airplane obj = <span class="keyword">new</span> Airplane();</span><br><span class="line">obj.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Transportation</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Running"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">whoIsPsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Person();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Airplane</span> <span class="keyword">extends</span> <span class="title">Transportation</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Flying"</span>);</span><br><span class="line"><span class="comment">//重写了父类的run()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Student <span class="title">whoIsPsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">//重写了父类的whoIsPsg()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* public Student whoIsPsg() &#123;</span></span><br><span class="line"><span class="comment">*return new Student();</span></span><br><span class="line"><span class="comment">*//重写了父类的whoIsPsg()</span></span><br><span class="line"><span class="comment">*&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public Object whoIsPsg() &#123;</span></span><br><span class="line"><span class="comment"> *return new Object();</span></span><br><span class="line"><span class="comment"> *//重写了父类的whoIsPsg()但报错</span></span><br><span class="line"><span class="comment"> *&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 构成重写的条件：</span></span><br><span class="line"><span class="comment"> * 子类继承父类</span></span><br><span class="line"><span class="comment"> * 重写的方法名，形参列表要相同</span></span><br><span class="line"><span class="comment"> * 返回值类型和声明异常的类型，子类应&lt;=父类</span></span><br><span class="line"><span class="comment"> * 方法访问权限：子类&gt;=父类</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--Object类并重写toString</title>
      <link href="/2020/01/28/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(30)/"/>
      <url>/2020/01/28/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(30)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试Object类并重写toString</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 面向对象核心;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">TestObject obj = <span class="keyword">new</span> TestObject();</span><br><span class="line">System.out.println(obj.toString());</span><br><span class="line"></span><br><span class="line">People ple = <span class="keyword">new</span> People(<span class="string">"Kevin"</span>,<span class="number">18</span>);</span><br><span class="line">System.out.println(ple);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"测试Overtide Object类的toString方法"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name+<span class="string">" 年龄："</span>+age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--final关键字</title>
      <link href="/2020/01/28/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(31)/"/>
      <url>/2020/01/28/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(31)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试final关键字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 面向对象核心;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFinal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">A a = <span class="keyword">new</span> A();</span><br><span class="line">B b = <span class="keyword">new</span> B();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//a.a = 2;//报错，final修饰变量则不可变</span></span><br><span class="line">b.b = <span class="number">2</span>;<span class="comment">//无final修饰，可自行赋值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> /*<span class="keyword">extends</span> <span class="title">A</span>*  报错，<span class="title">final</span>修饰的类无法被继承*/</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line"><span class="comment">//final修饰的方法可以在本类中重载</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*public void func(int x) &#123;</span></span><br><span class="line"><span class="comment">*//...</span></span><br><span class="line"><span class="comment">*&#125;</span></span><br><span class="line"><span class="comment">*final修饰的方法无法被子类重写</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--类和对象</title>
      <link href="/2020/01/27/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(21)/"/>
      <url>/2020/01/27/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(21)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   *   测试类和对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 面向对象;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一个文件可以有多个类，但是public修饰的类只能有一个</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFirstClass</span> </span>&#123;</span><br><span class="line"><span class="comment">//开始就以学生为对象做示例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">String name;</span><br><span class="line">Subjects subject;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"学习"</span>+subject.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"ID:"</span>+<span class="keyword">this</span>.id);</span><br><span class="line">System.out.println(<span class="string">"AGE:"</span>+<span class="keyword">this</span>.age);</span><br><span class="line">System.out.println(<span class="string">"NAME:"</span>+<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TestFirstClass()&#123;</span><br><span class="line"><span class="comment">//构造方法，用于创建类对象，方法名与类名保持一致，无返回值，无参构造方法可由系统自动生成</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//main（）方法程序执行的入口，必不可少</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">TestFirstClass stu = <span class="keyword">new</span> TestFirstClass();<span class="comment">//调用构造方法在堆区创建对象，返回对象在堆区的地址</span></span><br><span class="line">Subjects sub = <span class="keyword">new</span> Subjects();<span class="comment">//调用构造方法在堆区创建对象，返回对象在堆区的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象属性的赋值</span></span><br><span class="line">sub.name = <span class="string">"JAVA课设"</span>;</span><br><span class="line"><span class="comment">//对象属性的赋值</span></span><br><span class="line">stu.id = <span class="number">12345</span>;</span><br><span class="line">stu.age = <span class="number">20</span>;</span><br><span class="line">stu.name = <span class="string">"葛宇"</span>;</span><br><span class="line">stu.subject = sub;</span><br><span class="line"></span><br><span class="line">stu.study();<span class="comment">//调用类方法</span></span><br><span class="line">stu.show();<span class="comment">//调用类方法</span></span><br><span class="line"></span><br><span class="line">System.out.println(sub);<span class="comment">//打印对象地址</span></span><br><span class="line">System.out.println(stu.subject);<span class="comment">//打印对象地址</span></span><br><span class="line">  <span class="comment">//观察发现输出两个对象地址相同，原因是sub放于堆中，44行的赋值实际上是把sub的堆地址赋值给了stu.subject</span></span><br><span class="line">  <span class="comment">//分析可知：sub和stu.subject都位于栈区，都指向堆区的同一个对象地址</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学科科目类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subjects</span></span>&#123;</span><br><span class="line">String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* JAVA内存分析</span></span><br><span class="line"><span class="comment"> * JAVA中主要把内存分为三部分：栈、堆、方法区（其中堆区包含方法区）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 栈：JVM会为每个线程创建一个栈且栈属于线程私有，无法与其他线程共享；</span></span><br><span class="line"><span class="comment"> *         栈的存储特性是“先进后出”；</span></span><br><span class="line"><span class="comment"> *         栈是自动分配，内存空间连续，速度快；</span></span><br><span class="line"><span class="comment"> *         程序中的每个方法执行时都会在栈中创建一个栈帧，用于存放该方法运行时数据、局部变量、实参、返回值等信息；</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 堆：堆区存放创建好的对象和数组（数组也是对象）；</span></span><br><span class="line"><span class="comment"> *    JVM只有一个堆区，且被所有线程共享；</span></span><br><span class="line"><span class="comment"> *          堆区是一个不连续的内存空间，分配灵活，速度慢；</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 方法区（静态区）：方法区也是堆区的一部分，只有一个，被所有线程共享；</span></span><br><span class="line"><span class="comment"> * 方法区中存放程序中不变或唯一的内容：类代码、静态变量、常量、字符串等；</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--构造器</title>
      <link href="/2020/01/27/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(22)/"/>
      <url>/2020/01/27/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(22)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 测试构造器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 面向对象;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>&#123;</span><br><span class="line"><span class="keyword">double</span> x,y;</span><br><span class="line"><span class="comment">//构造方法名称和类名必须保持一致</span></span><br><span class="line"><span class="comment">//构造器会返回对象的地址但是无需指定返回值，可以单独使用return表示结束方法体</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.x = x;</span><br><span class="line"><span class="keyword">this</span>.y = y;</span><br><span class="line"><span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//无参构造器，如果有了自己定义的构造器，系统便不再生成，想要无参构造器的话还得自己写上</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getDitance</span><span class="params">(Point p)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"传入对象的地址："</span>+p);</span><br><span class="line"><span class="keyword">return</span> Math.sqrt((<span class="keyword">this</span>.x-p.x)*(<span class="keyword">this</span>.x-p.x)+(<span class="keyword">this</span>.y-p.y)*(<span class="keyword">this</span>.y-p.y));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConstructor</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Point a = <span class="keyword">new</span> Point(<span class="number">3.0</span>,<span class="number">4.0</span>);</span><br><span class="line">Point b = <span class="keyword">new</span> Point(<span class="number">0.0</span>,<span class="number">0.0</span>);</span><br><span class="line">System.out.println(<span class="string">"创建的对象的地址："</span>+b);</span><br><span class="line">System.out.println(a.getDitance(b));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--this的使用</title>
      <link href="/2020/01/27/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(23)/"/>
      <url>/2020/01/27/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(23)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试this的使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 面向对象;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThis</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"></span><br><span class="line"><span class="comment">//constructor 1</span></span><br><span class="line">TestThis(<span class="keyword">int</span> a,<span class="keyword">int</span> b)&#123;</span><br><span class="line"><span class="keyword">this</span>.a = a;</span><br><span class="line"><span class="keyword">this</span>.b = b;</span><br><span class="line"><span class="comment">//发生变量二义性时，使用this可以指代创建出来的对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//constructor 2</span></span><br><span class="line">TestThis(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)&#123;</span><br><span class="line">  <span class="comment">//TestThis(a,b);会报错，想在类方法中重用构造器得用this，如下</span></span><br><span class="line"><span class="keyword">this</span>(a,b);<span class="comment">//这里等价于调用了constructor 1，且必须位于构造器的第一句</span></span><br><span class="line"><span class="keyword">this</span>.c = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"this is func1 !"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.func1();</span><br><span class="line">System.out.println(<span class="string">"this is func2 !"</span>);</span><br><span class="line"><span class="comment">//this可以用来指代该类的某个对象自己</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">TestThis obj = <span class="keyword">new</span> TestThis(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">obj.func2();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意，this的使用基本上都是离不开对象的，所以要知道this是不能用于静态的方法的。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--参数传递机制</title>
      <link href="/2020/01/27/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(24)/"/>
      <url>/2020/01/27/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(24)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试JAVA中的参数传递机制</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 面向对象;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestValueTransport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"></span><br><span class="line">TestValueTransport (<span class="keyword">int</span> a,<span class="keyword">int</span> b)&#123;</span><br><span class="line"><span class="keyword">this</span>.a = a;</span><br><span class="line"><span class="keyword">this</span>.b = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testValueTrap</span><span class="params">(TestValueTransport x)</span> </span>&#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">TestValueTransport obj = <span class="keyword">new</span> TestValueTransport(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">TestValueTransport obj_ = obj;</span><br><span class="line"></span><br><span class="line">System.out.println(obj);</span><br><span class="line">System.out.println(obj_);</span><br><span class="line">obj_.testValueTrap(obj_);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出三个对象变量引用的地址是相同的</span></span><br><span class="line"><span class="comment">//要能区分对象变量和对象的区别：对象变量存储在栈中，对象存储在堆中</span></span><br><span class="line"><span class="comment">//示例中的obj、obj_、x三者虽是不同的对象变量，但是始终指向同一个对象的地址</span></span><br><span class="line"><span class="comment">//总结：Java中参数传值传递的是参数值的副本，但要明确对于对象变量来说，传递的副本就是对象的地址，所以指向还是同一个对象</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--静态导入</title>
      <link href="/2020/01/27/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(25)/"/>
      <url>/2020/01/27/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(25)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 测试静态导入</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 面向对象;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStaticImport</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.print(PI);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态导入关键字：import static xxx;</span></span><br><span class="line"><span class="comment">//要求导入的东西必须是静态属性如静态成员方法或静态常量等</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--循环语句中的break</title>
      <link href="/2020/01/26/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(18)/"/>
      <url>/2020/01/26/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(18)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试循环语句中的break</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 控制语句;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBreak</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> i = (<span class="keyword">int</span>)Math.round(<span class="number">100</span>*Math.random());</span><br><span class="line">System.out.println(i);</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">50</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">total++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"循环次数为："</span>+total);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出循环次数为30</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--循环语句中的continue</title>
      <link href="/2020/01/26/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(19)/"/>
      <url>/2020/01/26/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(19)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试循环中的continue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 控制语句;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestContinue</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//能被3整除则跳过这次循环</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//否则输出不能被3整除的数</span></span><br><span class="line">System.out.print(i+<span class="string">"  "</span>);</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">if</span>(count%<span class="number">5</span>==<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--循环语句中标签的continue</title>
      <link href="/2020/01/26/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(20)/"/>
      <url>/2020/01/26/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(20)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试带标签的continue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 控制语句;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Java中保留了goto关键字但并不允许使用goto语句</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLableContinue</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印101到150之间所有质数</span></span><br><span class="line">outer:<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">101</span>;i&lt;=<span class="number">150</span>;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;i/<span class="number">2</span>;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i%j==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span> outer;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(i+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--If选择语句</title>
      <link href="/2020/01/25/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(14)/"/>
      <url>/2020/01/25/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(14)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * If选择语句</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 控制语句;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestIf</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> x = <span class="number">6</span>*Math.random();</span><br><span class="line"><span class="keyword">int</span> age = (<span class="keyword">int</span>)(<span class="number">80</span>*Math.random());</span><br><span class="line">System.out.println(x);</span><br><span class="line">System.out.println(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">////////////if///////////</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"Small"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"Large"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//////////if-else/////////</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"Small"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"Large"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///////Multi-if-else///////</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(age &lt;= <span class="number">15</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"儿童"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(age &lt;= <span class="number">25</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"青年"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(age &lt;= <span class="number">45</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"中年"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(age &lt;= <span class="number">80</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"老年"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--switch多选择</title>
      <link href="/2020/01/25/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(15)/"/>
      <url>/2020/01/25/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(15)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试switch多选择</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 控制语句;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSwitch</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = (<span class="keyword">int</span>)(<span class="number">6</span>*Math.random())+<span class="number">1</span>;</span><br><span class="line">System.out.println(<span class="string">"骰点："</span>+a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(a) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">System.out.println(<span class="string">"1点"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">System.out.println(<span class="string">"2点"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">System.out.println(<span class="string">"3点"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">System.out.println(<span class="string">"4点"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">System.out.println(<span class="string">"5点"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">System.out.println(<span class="string">"6点"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//若省略break则会往下一条case穿透执行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--while循环</title>
      <link href="/2020/01/25/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(16)/"/>
      <url>/2020/01/25/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(16)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试while</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 控制语句;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestWhile</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/////////////////while/////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//while的循环条件必须是布尔型，0或1无效</span></span><br><span class="line"><span class="keyword">while</span>(i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">sum += i;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br><span class="line"></span><br><span class="line"><span class="comment">////////////////do-while////////////////</span></span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">sum += i;</span><br><span class="line">i++;</span><br><span class="line">&#125;<span class="keyword">while</span>(i &lt;= <span class="number">100</span>);</span><br><span class="line">System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--for循环</title>
      <link href="/2020/01/25/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(17)/"/>
      <url>/2020/01/25/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(17)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *测试for循环</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 控制语句;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFor</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++) &#123;</span><br><span class="line">sum+=i;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1. 执行初始化语句：i=1</span></span><br><span class="line"><span class="comment"> * 2. 执行判断：i&lt;=100</span></span><br><span class="line"><span class="comment"> * 3. 执行循环体：sum+=i</span></span><br><span class="line"><span class="comment"> * 4. 执行步进：i++</span></span><br><span class="line"><span class="comment"> * 5. 返回第2步</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--字符串连接符</title>
      <link href="/2020/01/23/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(10)/"/>
      <url>/2020/01/23/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(10)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试字符串连接符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 数据类型和运算符;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOperator_4</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">String c = <span class="string">"3"</span>;</span><br><span class="line">System.out.println(a+b);<span class="comment">//输出整数3</span></span><br><span class="line">System.out.println(a+c);<span class="comment">//输出整数1和字符串3的组合</span></span><br><span class="line">System.out.println(c+a);<span class="comment">//输出字符串3和整数1的组合</span></span><br><span class="line">System.out.println(a+b+c);<span class="comment">//输出整数3和字符串3的组合</span></span><br><span class="line">System.out.println(c+b+a);<span class="comment">//输出字符串32和整数1的组合</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> d = <span class="string">'4'</span>;<span class="comment">//字符型变量d对应的4的Unicode编码为U+0034(十六进制)</span></span><br><span class="line">System.out.println(d);<span class="comment">//输出字符4</span></span><br><span class="line">System.out.println(a+d);<span class="comment">//输出字符4转化为整数后的数值与1的和</span></span><br><span class="line">System.out.println(c+d);<span class="comment">//将字符4纳入字符串c,输出字符串34</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--从键盘读入数据</title>
      <link href="/2020/01/23/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(11)/"/>
      <url>/2020/01/23/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(11)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试从键盘读入数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 数据类型和运算符;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestScanner</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);<span class="comment">//创建IO流对象</span></span><br><span class="line">System.out.println(<span class="string">"请输入姓名："</span>);</span><br><span class="line">String name = scanner.nextLine();</span><br><span class="line">System.out.println(<span class="string">"请输入性别："</span>);</span><br><span class="line">String sex = scanner.nextLine();</span><br><span class="line">System.out.println(<span class="string">"请输入ID："</span>);</span><br><span class="line"><span class="keyword">int</span> age = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(name);</span><br><span class="line">System.out.println(sex);</span><br><span class="line">System.out.println(age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--方法</title>
      <link href="/2020/01/23/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(12)/"/>
      <url>/2020/01/23/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(12)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试Java方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 控制语句;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMethod</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//通过对象调用普通方法</span></span><br><span class="line">TestMethod obj = <span class="keyword">new</span> TestMethod();</span><br><span class="line">obj.Method_1();</span><br><span class="line">obj.Method_2(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">int</span> total = obj.Method_3(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">System.out.println(total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Method_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"This is Method_1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Method_2</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = a+b;</span><br><span class="line">System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Method_3</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = a+b;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line"><span class="comment">//return两个作用：结束方法的运行；返回值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 要点：</span></span><br><span class="line"><span class="comment"> * 实参的数目，数据类型，次序必须和对应方法的形参列表匹配</span></span><br><span class="line"><span class="comment"> * Java中的普通参数传递均为值传递 </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--方法的重载</title>
      <link href="/2020/01/23/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(13)/"/>
      <url>/2020/01/23/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(13)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试方法的重载</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 控制语句;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOverload</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*求和的方法，static修饰，调用时无需创建对象*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n1,<span class="keyword">int</span> n2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = n1+n2;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法名相同，参数个数不同，构成重载</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n1,<span class="keyword">int</span> n2,<span class="keyword">int</span> n3)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = n1+n2+n3;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法名相同，参数类型不同，构成重载</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> n1,<span class="keyword">int</span> n2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> sum = n1+n2;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法名相同，参数顺序不同，构成重载</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n1,<span class="keyword">double</span> n2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> sum = n1+n2;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**方法名相同，返回值类型不同，无法构成重载，报错！！！</span></span><br><span class="line"><span class="comment"> public static double add(int n1,int n2) &#123;</span></span><br><span class="line"><span class="comment">double sum = n1+n2;</span></span><br><span class="line"><span class="comment">return sum;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**方法名相同，形参名不同，无法构成重载，报错！！！</span></span><br><span class="line"><span class="comment"> public static double add(int n2,int n1) &#123;</span></span><br><span class="line"><span class="comment">double sum = n1+n2;</span></span><br><span class="line"><span class="comment">return sum;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--逻辑运算符和位运算符</title>
      <link href="/2020/01/23/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(9)/"/>
      <url>/2020/01/23/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(9)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试逻辑运算符和位运算符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 数据类型和运算符;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOperator_3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 与：&amp;同真则真，有假则假</span></span><br><span class="line"><span class="comment"> * 或：|同假则假，有真则真</span></span><br><span class="line"><span class="comment"> * 非：！真假颠倒</span></span><br><span class="line"><span class="comment"> * 异或：^同假异真</span></span><br><span class="line"><span class="comment"> * 短路与：&amp;&amp;有假则假</span></span><br><span class="line"><span class="comment"> * 短路或：||有真则真</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 短路方式从左向右计算，若左边表达式计算结果足够判断则右边不进行表达式计算</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 取反：~</span></span><br><span class="line"><span class="comment"> * 按位与：&amp;</span></span><br><span class="line"><span class="comment"> * 按位或：|</span></span><br><span class="line"><span class="comment"> * 按位异或：^</span></span><br><span class="line"><span class="comment"> * 左移：&lt;&lt;左移一位相当于乘2</span></span><br><span class="line"><span class="comment"> * 右移：&gt;&gt;右移一位相当于除2取商</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="number">3</span>&lt;&lt;<span class="number">2</span>);          <span class="comment">//相当于11左移两位变成1100，输出12</span></span><br><span class="line">System.out.println(<span class="number">3</span>&gt;&gt;<span class="number">1</span>);   <span class="comment">//相当于11右移一位变成1，输出1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--类型转换</title>
      <link href="/2020/01/22/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(6)/"/>
      <url>/2020/01/22/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(6)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类型转换的误区</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 数据类型和运算符;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTypeConvertError</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1000000000</span>;<span class="comment">//10亿</span></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans1 = a*b;</span><br><span class="line">System.out.println(ans1);<span class="comment">//表达式范围越界</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> ans2 = a*b;</span><br><span class="line">System.out.println(ans2);<span class="comment">//表达式范围越界</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> ans3 = a*((<span class="keyword">long</span>)b);</span><br><span class="line">System.out.print(ans3); <span class="comment">//正确输出</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--算数运算符</title>
      <link href="/2020/01/22/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(7)/"/>
      <url>/2020/01/22/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(7)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试算数运算符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 数据类型和运算符;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TsetOperator_1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 整数运算：</span></span><br><span class="line"><span class="comment"> * 如果整数操作数里有long，则结果也为long</span></span><br><span class="line"><span class="comment"> * 没有long时，结果为int。即使操作数全为short、byte，结果也是int</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">byte</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span>  b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span>  ans1 = a+b;</span><br><span class="line">  <span class="comment">//byte ans2 = a+b;  报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> c = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">long</span> ans3 = b+c;</span><br><span class="line">  <span class="comment">//int  ans4 = b+c;  报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 浮点运算：</span></span><br><span class="line"><span class="comment"> * 如果操作数涉及浮点数,</span></span><br><span class="line"><span class="comment"> * 如果两个浮点数有一个为double，则结果为double</span></span><br><span class="line"><span class="comment"> * 只有两个浮点数数都为float，结果才为float</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">float</span> d = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">float</span> e = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">double</span> f = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">float</span> ans5 = d+e;</span><br><span class="line">        <span class="keyword">double</span> ans6 = d+e;</span><br><span class="line">        <span class="keyword">double</span> ans7 = e+f;</span><br><span class="line">      <span class="comment">//float ans8 = e+f;  报错</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 整数与浮点运算：</span></span><br><span class="line"><span class="comment"> * 只要操作数涉及浮点数，则向浮点数兼容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">                           * 取模运算</span></span><br><span class="line"><span class="comment">                           *结果（余数）的符号与左操作数相同 </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="number">9</span>%<span class="number">5</span>);</span><br><span class="line">        System.out.println(-<span class="number">9</span>%<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="number">9</span>%-<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--比较运算符</title>
      <link href="/2020/01/22/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(8)/"/>
      <url>/2020/01/22/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(8)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试比较运算符</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 数据类型和运算符;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOperator_2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//比较运算符仅根据变量的数值大小来进行比较</span></span><br><span class="line">  <span class="comment">//可参与比较运算的有：byte/short/int/long,float/double,char</span></span><br><span class="line">  <span class="comment">//比较运算返回值为布尔值：true，false</span></span><br><span class="line"><span class="keyword">int</span>   a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">float</span> b = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a == b) &#123;</span><br><span class="line">System.out.println(<span class="string">"=="</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a != b) &#123;</span><br><span class="line">System.out.println(<span class="string">"!="</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a &lt; b) &#123;</span><br><span class="line">System.out.println(<span class="string">"&lt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a &gt; b) &#123;</span><br><span class="line">System.out.println(<span class="string">"&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--注释</title>
      <link href="/2020/01/20/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(1)/"/>
      <url>/2020/01/20/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(1)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java注释</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 数据类型和运算符; <span class="comment">//这是单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestComment</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args <span class="comment">/*多行注释也可用作行内注释*/</span>)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello World !"</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 多行注释</span></span><br><span class="line"><span class="comment"> * 多行注释</span></span><br><span class="line"><span class="comment"> * 多行注释</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--java标识符</title>
      <link href="/2020/01/20/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(2)/"/>
      <url>/2020/01/20/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(2)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java标识符用法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 数据类型和运算符;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestIdentifer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a123 = <span class="number">1</span>;</span><br><span class="line">                             <span class="comment">//int 123a = 2; 数字不能打头</span></span><br><span class="line"><span class="keyword">int</span> $abc = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> _abc = <span class="number">4</span>; </span><br><span class="line"><span class="keyword">int</span>  年龄 = <span class="number">18</span>; <span class="comment">//Java支持中文变量但不建议使用</span></span><br><span class="line">             <span class="comment">//int public =5;   关键字不能作为变量去使用</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--常量</title>
      <link href="/2020/01/20/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(3)/"/>
      <url>/2020/01/20/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(3)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java常量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 数据类型和运算符;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConstant</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//age和name都是变量，数字18、20和字符串“GeYu”“GEYU”是字面常量</span></span><br><span class="line"><span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">age = <span class="number">20</span>;</span><br><span class="line">String name = <span class="string">"GeYu"</span>;</span><br><span class="line">name = <span class="string">"GEYU"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line">             <span class="comment">//PI++; 报错，final将PI定义为了符号常量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 命名规范</span></span><br><span class="line"><span class="comment"> * 常量：全部大写，可配合下划线：MAX_VALUE</span></span><br><span class="line"><span class="comment"> * 类名：首字母大写，驼峰原则：HelloWorld、FatherClass</span></span><br><span class="line"><span class="comment"> * 类成员变量、类方法：首字母小写，驼峰原则：monthSalary、getSalary()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--变量</title>
      <link href="/2020/01/20/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(4)/"/>
      <url>/2020/01/20/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(4)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java的变量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 数据类型和运算符;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestVariable</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">long</span> b;</span><br><span class="line"><span class="keyword">double</span> c;</span><br><span class="line">a=<span class="number">1</span>;</span><br><span class="line">b=<span class="number">2</span>;</span><br><span class="line">c=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i,j,k;</span><br><span class="line">i=<span class="number">1</span>;</span><br><span class="line">j=<span class="number">2</span>;</span><br><span class="line">k=<span class="number">3</span>;</span><br><span class="line">i=j=k=<span class="number">4</span>;</span><br><span class="line">    <span class="comment">//i=5,j=6,k=7; 这种赋值Java只允许在变量定义时候进行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">8</span>,m=<span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习之路--字符类型和布尔类型</title>
      <link href="/2020/01/20/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(5)/"/>
      <url>/2020/01/20/Java%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF(5)/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java字符类型和布尔类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 葛宇</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> 数据类型和运算符;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPrimitiveDateType</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> a = <span class="string">'A'</span>;</span><br><span class="line"><span class="keyword">char</span> b =  <span class="string">'中'</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="string">'1'</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 对于字符类型数据，Java使用UNICODE编码表示</span></span><br><span class="line"><span class="comment"> * 每个字符占2字节 </span></span><br><span class="line"><span class="comment"> * 字符用' '  字符串用" "</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//转义字符</span></span><br><span class="line">System.out.println(<span class="string">'a'</span>+<span class="string">'b'</span>);  <span class="comment">//输出195</span></span><br><span class="line">System.out.println(<span class="string">""</span>+<span class="string">'a'</span>+<span class="string">'b'</span>);  <span class="comment">//输出ab</span></span><br><span class="line">System.out.println(<span class="string">""</span>+<span class="string">'a'</span>+<span class="string">'\''</span>+<span class="string">'b'</span>);  <span class="comment">//输出a'b</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//测试布尔类型</span></span><br><span class="line">  <span class="comment">//布尔类型数据占一位而不是一字节，且不可以用'0'或'1'</span></span><br><span class="line"><span class="keyword">boolean</span> man = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">boolean</span> woman = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span>(man) &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>试玩YOLOv3多目标检测</title>
      <link href="/2019/10/24/%E8%AF%95%E7%8E%A9YOLOv3%E5%A4%9A%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
      <url>/2019/10/24/%E8%AF%95%E7%8E%A9YOLOv3%E5%A4%9A%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="YOLOv3简介"><a href="#YOLOv3简介" class="headerlink" title="YOLOv3简介"></a>YOLOv3简介</h1><p><img src="https://s1.ax1x.com/2022/09/05/vT2ltK.png" alt></p><p><a href="https://pjreddie.com/darknet/yolo/" target="_blank" rel="noopener">官网链接</a><br><a href="https://pjreddie.com/media/files/papers/YOLOv3.pdf" target="_blank" rel="noopener">论文链接</a></p><h1 id="运行环境搭建"><a href="#运行环境搭建" class="headerlink" title="运行环境搭建"></a>运行环境搭建</h1><p>首先下载源码：<br><strong>源码：</strong> <a href="https://github.com/NUISTGY/TensorFlow2.0-Examples/tree/master/4-Object_Detection/YOLOV3">https://github.com/NUISTGY/TensorFlow2.0-Examples/tree/master/4-Object_Detection/YOLOV3</a></p><p>接着安装依赖库和训练好的权重：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install -r ./docs/requirements.txt</span><br><span class="line">$ wget https://pjreddie.com/media/files/yolov3.weights</span><br></pre></td></tr></table></figure><p>将权重文件置于源码文件夹目录下即可。</p><h1 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h1><p>前面已经完成了所有的准备公作，运行以下命令即可进行目标检测：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python image_demo.py</span><br><span class="line">$ python video_demo.py # if use camera, set video_path = 0</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/09/05/vT2KTx.jpg" alt="运行python image_demo.py的结果"></p><h1 id="尝试检测自己的图片或视频"><a href="#尝试检测自己的图片或视频" class="headerlink" title="尝试检测自己的图片或视频"></a>尝试检测自己的图片或视频</h1><p>想要识别自己的图片只需要做很小的改动即可。<br>打开<code>image_demo.py</code>:<br><img src="https://s1.ax1x.com/2022/09/05/vT2J6H.png" alt><br>将22行image_path改为自己图片的地址即可，视频目标检测同理。</p><p>最后再贴一张目标比较多的照片：<br><img src="https://s1.ax1x.com/2022/09/05/vT2Qk6.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 图像处理 </tag>
            
            <tag> 目标检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MNIST数据集的下载与数据处理</title>
      <link href="/2019/08/28/mnist%E6%95%B0%E6%8D%AE%E9%9B%86%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%A4%84%E7%90%86/"/>
      <url>/2019/08/28/mnist%E6%95%B0%E6%8D%AE%E9%9B%86%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="源码（python）"><a href="#源码（python）" class="headerlink" title="源码（python）"></a>源码（python）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">raise</span> ImportError(<span class="string">'You should use Python 3.x'</span>)</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url_base = <span class="string">'http://yann.lecun.com/exdb/mnist/'</span></span><br><span class="line">key_file = &#123;</span><br><span class="line">    <span class="string">'train_img'</span>:<span class="string">'train-images-idx3-ubyte.gz'</span>,</span><br><span class="line">    <span class="string">'train_label'</span>:<span class="string">'train-labels-idx1-ubyte.gz'</span>,</span><br><span class="line">    <span class="string">'test_img'</span>:<span class="string">'t10k-images-idx3-ubyte.gz'</span>,</span><br><span class="line">    <span class="string">'test_label'</span>:<span class="string">'t10k-labels-idx1-ubyte.gz'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dataset_dir = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">save_file = dataset_dir + <span class="string">"/mnist.pkl"</span></span><br><span class="line"></span><br><span class="line">train_num = <span class="number">60000</span></span><br><span class="line">test_num = <span class="number">10000</span></span><br><span class="line">img_dim = (<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">img_size = <span class="number">784</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_download</span><span class="params">(file_name)</span>:</span></span><br><span class="line">    file_path = dataset_dir + <span class="string">"/"</span> + file_name</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> os.path.exists(file_path):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Downloading "</span> + file_name + <span class="string">" ... "</span>)</span><br><span class="line">    urllib.request.urlretrieve(url_base + file_name, file_path)</span><br><span class="line">    print(<span class="string">"Done"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_mnist</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> key_file.values():</span><br><span class="line">       _download(v)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_load_label</span><span class="params">(file_name)</span>:</span></span><br><span class="line">    file_path = dataset_dir + <span class="string">"/"</span> + file_name</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"Converting "</span> + file_name + <span class="string">" to NumPy Array ..."</span>)</span><br><span class="line">    <span class="keyword">with</span> gzip.open(file_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            labels = np.frombuffer(f.read(), np.uint8, offset=<span class="number">8</span>)</span><br><span class="line">    print(<span class="string">"Done"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> labels</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_load_img</span><span class="params">(file_name)</span>:</span></span><br><span class="line">    file_path = dataset_dir + <span class="string">"/"</span> + file_name</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"Converting "</span> + file_name + <span class="string">" to NumPy Array ..."</span>)    </span><br><span class="line">    <span class="keyword">with</span> gzip.open(file_path, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = np.frombuffer(f.read(), np.uint8, offset=<span class="number">16</span>)</span><br><span class="line">    data = data.reshape(<span class="number">-1</span>, img_size)</span><br><span class="line">    print(<span class="string">"Done"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_convert_numpy</span><span class="params">()</span>:</span></span><br><span class="line">    dataset = &#123;&#125;</span><br><span class="line">    dataset[<span class="string">'train_img'</span>] =  _load_img(key_file[<span class="string">'train_img'</span>])</span><br><span class="line">    dataset[<span class="string">'train_label'</span>] = _load_label(key_file[<span class="string">'train_label'</span>])    </span><br><span class="line">    dataset[<span class="string">'test_img'</span>] = _load_img(key_file[<span class="string">'test_img'</span>])</span><br><span class="line">    dataset[<span class="string">'test_label'</span>] = _load_label(key_file[<span class="string">'test_label'</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dataset</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_mnist</span><span class="params">()</span>:</span></span><br><span class="line">    download_mnist()</span><br><span class="line">    dataset = _convert_numpy()</span><br><span class="line">    print(<span class="string">"Creating pickle file ..."</span>)</span><br><span class="line">    <span class="keyword">with</span> open(save_file, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        pickle.dump(dataset, f, <span class="number">-1</span>)</span><br><span class="line">    print(<span class="string">"Done!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_change_one_hot_label</span><span class="params">(X)</span>:</span></span><br><span class="line">    T = np.zeros((X.size, <span class="number">10</span>))</span><br><span class="line">    <span class="keyword">for</span> idx, row <span class="keyword">in</span> enumerate(T):</span><br><span class="line">        row[X[idx]] = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> T</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_mnist</span><span class="params">(normalize=True, flatten=True, one_hot_label=False)</span>:</span></span><br><span class="line">    <span class="string">"""读入MNIST数据集</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Parameters</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    normalize : 将图像的像素值正规化为0.0~1.0</span></span><br><span class="line"><span class="string">    one_hot_label : </span></span><br><span class="line"><span class="string">        one_hot_label为True的情况下，标签作为one-hot数组返回</span></span><br><span class="line"><span class="string">        one-hot数组是指[0,0,1,0,0,0,0,0,0,0]这样的数组</span></span><br><span class="line"><span class="string">    flatten : 是否将图像展开为一维数组</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns</span></span><br><span class="line"><span class="string">    -------</span></span><br><span class="line"><span class="string">    (训练图像, 训练标签), (测试图像, 测试标签)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(save_file):</span><br><span class="line">        init_mnist()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">with</span> open(save_file, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dataset = pickle.load(f)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> normalize:</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> (<span class="string">'train_img'</span>, <span class="string">'test_img'</span>):</span><br><span class="line">            dataset[key] = dataset[key].astype(np.float32)</span><br><span class="line">            dataset[key] /= <span class="number">255.0</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">if</span> one_hot_label:</span><br><span class="line">        dataset[<span class="string">'train_label'</span>] = _change_one_hot_label(dataset[<span class="string">'train_label'</span>])</span><br><span class="line">        dataset[<span class="string">'test_label'</span>] = _change_one_hot_label(dataset[<span class="string">'test_label'</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> flatten:</span><br><span class="line">         <span class="keyword">for</span> key <span class="keyword">in</span> (<span class="string">'train_img'</span>, <span class="string">'test_img'</span>):</span><br><span class="line">            dataset[key] = dataset[key].reshape(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (dataset[<span class="string">'train_img'</span>], dataset[<span class="string">'train_label'</span>]), (dataset[<span class="string">'test_img'</span>], dataset[<span class="string">'test_label'</span>]) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    init_mnist()</span><br></pre></td></tr></table></figure><h2 id="load-mnist函数讲解"><a href="#load-mnist函数讲解" class="headerlink" title="load_mnist函数讲解"></a>load_mnist函数讲解</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_mnist</span><span class="params">(normalize=True, flatten=True, one_hot_label=False)</span>:</span></span><br><span class="line">    <span class="string">"""读入MNIST数据集</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Parameters</span></span><br><span class="line"><span class="string">    ----------</span></span><br><span class="line"><span class="string">    normalize : 将图像的像素值正规化为0.0~1.0</span></span><br><span class="line"><span class="string">    one_hot_label : </span></span><br><span class="line"><span class="string">        one_hot_label为True的情况下，标签作为one-hot数组返回</span></span><br><span class="line"><span class="string">        one-hot数组是指[0,0,1,0,0,0,0,0,0,0]这样的数组</span></span><br><span class="line"><span class="string">    flatten : 是否将图像展开为一维数组</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns</span></span><br><span class="line"><span class="string">    -------</span></span><br><span class="line"><span class="string">    (训练图像, 训练标签), (测试图像, 测试标签)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(save_file):</span><br><span class="line">        init_mnist()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">with</span> open(save_file, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dataset = pickle.load(f)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> normalize:</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> (<span class="string">'train_img'</span>, <span class="string">'test_img'</span>):</span><br><span class="line">            dataset[key] = dataset[key].astype(np.float32)</span><br><span class="line">            dataset[key] /= <span class="number">255.0</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">if</span> one_hot_label:</span><br><span class="line">        dataset[<span class="string">'train_label'</span>] = _change_one_hot_label(dataset[<span class="string">'train_label'</span>])</span><br><span class="line">        dataset[<span class="string">'test_label'</span>] = _change_one_hot_label(dataset[<span class="string">'test_label'</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> flatten:</span><br><span class="line">         <span class="keyword">for</span> key <span class="keyword">in</span> (<span class="string">'train_img'</span>, <span class="string">'test_img'</span>):</span><br><span class="line">            dataset[key] = dataset[key].reshape(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (dataset[<span class="string">'train_img'</span>], dataset[<span class="string">'train_label'</span>]), (dataset[<span class="string">'test_img'</span>], dataset[<span class="string">'test_label'</span>])</span><br></pre></td></tr></table></figure><p>load_mnist函数以<strong>“(训练图像,训练标签),(测试图像,测试标签)”</strong>的形式返回读入的MNIST数据。</p><p>此外,还可以像<strong>load_mnist(normalize=True,flatten=True,one_hot_label=False)</strong>这样,设置3个参数。</p><ul><li>第1个参数normalize设置是否将输入图像正规化为0.0-1.0的值。如果将该参数设置为 False,则输入图像的像素会保持原来的0-255。</li><li>第2个参数 flatten设置是否展开输入图像(变成一维数组)。如果将该参数设置为 False,则输入图像为1×28×28的三维数组;若设置为True,则输入图像会保存为由784个元素构成的一维数组。</li><li>第3个参数one_hot_label设置是否将标签保存为one-hot表示(one-hot representation)。one-hot表示是仅正确解标签为1,其余皆为0的数组,就像[0,0,1,0,0,0,0,0,0,0]这样。当one_hot_label为Fase时,只是像7、2这样简单保存正确解标签;当 one_hot_label为True时,标签则保存为one-hot表示。</li></ul><blockquote><p>PS:想获取完整的手写数字识别源码请访问我的GitHub：<br><a href="https://github.com/NUISTGY/Codes-of-fish-book.git">https://github.com/NUISTGY/Codes-of-fish-book.git</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 手写识别 </tag>
            
            <tag> MNIST </tag>
            
            <tag> 图像识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是MNIST 数据集</title>
      <link href="/2019/08/28/mnist%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/"/>
      <url>/2019/08/28/mnist%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><strong>MNIST 数据集已经是一个被”嚼烂”了的数据集, 很多教程都会对它”下手”, 几乎成为一个 “典范”. 不过有些人可能对它还不是很了解, 下面来介绍一下.</strong></p><p><img src="https://s1.ax1x.com/2022/09/05/vT2wAP.png" alt="手写数字" title="手写数字"></p><p>MNIST 数据集可在 <a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noopener">http://yann.lecun.com/exdb/mnist/</a> 获取, 它包含了四个部分:</p><ul><li>Training set images: train-images-idx3-ubyte.gz (9.9 MB, 解压后 47 MB, 包含 60,000 个样本)</li><li>Training set labels: train-labels-idx1-ubyte.gz (29 KB, 解压后 60 KB, 包含 60,000 个标签)</li><li>Test set images: t10k-images-idx3-ubyte.gz (1.6 MB, 解压后 7.8 MB, 包含 10,000 个样本)</li><li>Test set labels: t10k-labels-idx1-ubyte.gz (5KB, 解压后 10 KB, 包含 10,000 个标签)</li></ul><p><img src="https://s1.ax1x.com/2022/09/05/vT20tf.png" alt="解压后" title="解压后"></p><p>MNIST 数据集来自美国国家标准与技术研究所, National Institute of Standards and Technology (NIST). 训练集 (training set) 由来自 250 个不同人手写的数字构成, 其中 50% 是高中学生, 50% 来自人口普查局 (the Census Bureau) 的工作人员. 测试集(test set) 也是同样比例的手写数字数据.</p>]]></content>
      
      
      <categories>
          
          <category> 数据集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手写识别 </tag>
            
            <tag> MNIST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行人重识别代码实战（三）</title>
      <link href="/2019/08/24/%E8%A1%8C%E4%BA%BA%E9%87%8D%E8%AF%86%E5%88%AB%E4%BB%A3%E7%A0%81%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2019/08/24/%E8%A1%8C%E4%BA%BA%E9%87%8D%E8%AF%86%E5%88%AB%E4%BB%A3%E7%A0%81%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="代码描述"><a href="#代码描述" class="headerlink" title="代码描述"></a><strong>代码描述</strong></h1><p><strong>代码来源：</strong> <a href="https://github.com/layumi/Person_reID_baseline_pytorch">https://github.com/layumi/Person_reID_baseline_pytorch</a></p><p><code>详细信息可见README.md</code></p><p>准备好了训练数据和网络结构，下面就可以训练了：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">python train.py --gpu_ids <span class="number">0</span> --name ft_ResNet50 --train_all --batchsize <span class="number">32</span>  --data_dir your_data_path</span><br><span class="line">--gpu_ids which gpu to run.</span><br><span class="line">--name the name of the model.</span><br><span class="line">--data_dir the <span class="built_in">path</span> of the training data.</span><br><span class="line">--train_all using all images to train.</span><br><span class="line">--batchsize batch size.</span><br><span class="line">--erasing_p random erasing probability.</span><br></pre></td></tr></table></figure><p>这里探究一下<code>train.py</code>中都做了些什么。<br>首先是读取数据和label。这里使用了<code>torch.utils.data.DataLoader</code>, 可以获得两个迭代器<code>dataloaders[&#39;train&#39;]</code> and <code>dataloaders[&#39;val&#39;]</code> 来读数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">image_datasets = &#123;&#125;</span><br><span class="line">image_datasets[<span class="string">'train'</span>] = datasets.ImageFolder(os.path.join(data_dir, <span class="string">'train'</span>),</span><br><span class="line">                                         data_transforms[<span class="string">'train'</span>])</span><br><span class="line">image_datasets[<span class="string">'val'</span>] = datasets.ImageFolder(os.path.join(data_dir, <span class="string">'val'</span>),</span><br><span class="line">                                         data_transforms[<span class="string">'val'</span>])</span><br><span class="line"></span><br><span class="line">dataloaders = &#123;x: torch.utils.data.DataLoader(image_datasets[x], batch_size=opt.batchsize,</span><br><span class="line">                                            shuffle=<span class="literal">True</span>, num_workers=<span class="number">8</span>) <span class="comment"># 8 workers may work faster</span></span><br><span class="line">             <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">'train'</span>, <span class="string">'val'</span>]&#125;</span><br><span class="line">dataset_sizes = &#123;x: len(image_datasets[x]) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">'train'</span>, <span class="string">'val'</span>]&#125;</span><br></pre></td></tr></table></figure><p>以下则是主要的代码来训练模型，一共只有20行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Iterate over data.</span></span><br><span class="line">           <span class="keyword">for</span> data <span class="keyword">in</span> dataloaders[phase]:</span><br><span class="line">               <span class="comment"># get a batch of inputs</span></span><br><span class="line">               inputs, labels = data</span><br><span class="line">               now_batch_size,c,h,w = inputs.shape</span><br><span class="line">               <span class="keyword">if</span> now_batch_size&lt;opt.batchsize: <span class="comment"># skip the last batch</span></span><br><span class="line">                   <span class="keyword">continue</span></span><br><span class="line">               <span class="comment"># print(inputs.shape)</span></span><br><span class="line">               <span class="comment"># wrap them in Variable, if gpu is used, we transform the data to cuda.</span></span><br><span class="line">               <span class="keyword">if</span> use_gpu:</span><br><span class="line">                   inputs = Variable(inputs.cuda())</span><br><span class="line">                   labels = Variable(labels.cuda())</span><br><span class="line">               <span class="keyword">else</span>:</span><br><span class="line">                   inputs, labels = Variable(inputs), Variable(labels)</span><br><span class="line"></span><br><span class="line">               <span class="comment"># zero the parameter gradients</span></span><br><span class="line">               optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">               <span class="comment">#-------- forward --------</span></span><br><span class="line">               outputs = model(inputs)</span><br><span class="line">               _, preds = torch.max(outputs.data, <span class="number">1</span>)</span><br><span class="line">               loss = criterion(outputs, labels)</span><br><span class="line"></span><br><span class="line">               <span class="comment">#-------- backward + optimize --------</span></span><br><span class="line">               <span class="comment"># only if in training phase</span></span><br><span class="line">               <span class="keyword">if</span> phase == <span class="string">'train'</span>:</span><br><span class="line">                   loss.backward()</span><br><span class="line">                   optimizer.step()</span><br></pre></td></tr></table></figure><p>每十轮，都会保存网络和更新loss曲线：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> epoch%<span class="number">10</span> == <span class="number">9</span>:</span><br><span class="line">    save_network(model, epoch)</span><br><span class="line">    draw_curve(epoch)</span><br></pre></td></tr></table></figure><p>更多细节见train.py</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行人重识别 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行人重识别代码实战（二）</title>
      <link href="/2019/08/24/%E8%A1%8C%E4%BA%BA%E9%87%8D%E8%AF%86%E5%88%AB%E4%BB%A3%E7%A0%81%E5%AE%9E%E6%88%98%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2019/08/24/%E8%A1%8C%E4%BA%BA%E9%87%8D%E8%AF%86%E5%88%AB%E4%BB%A3%E7%A0%81%E5%AE%9E%E6%88%98%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="代码描述"><a href="#代码描述" class="headerlink" title="代码描述"></a><strong>代码描述</strong></h1><p><strong>代码来源：</strong> <a href="https://github.com/layumi/Person_reID_baseline_pytorch">https://github.com/layumi/Person_reID_baseline_pytorch</a></p><p><code>详细信息可见README.md</code></p><p>这次研究的是<code>model.py</code>原理是利用和修改预训练模型，代码原作者使用的是<strong>ImageNet</strong>预训练网络。</p><p>pytorch里引入方式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> models</span><br><span class="line">model =models.resnet50(pretrained = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>通过<code>print（model）</code>查看网络结构：<br><img src="https://s1.ax1x.com/2022/09/05/vT2fA0.png" alt></p><p>实际使用时要做修改。考虑到Market1501训练集中有751个不同的人，所以要改变模型来训练Reid的分类器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Define the ResNet50-based Model</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ft_net</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, class_num, droprate=<span class="number">0.5</span>, stride=<span class="number">2</span>)</span>:</span></span><br><span class="line">        super(ft_net, self).__init__()</span><br><span class="line">        model_ft = models.resnet50(pretrained=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># avg pooling to global pooling</span></span><br><span class="line">        <span class="keyword">if</span> stride == <span class="number">1</span>:</span><br><span class="line">            model_ft.layer4[<span class="number">0</span>].downsample[<span class="number">0</span>].stride = (<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">            model_ft.layer4[<span class="number">0</span>].conv2.stride = (<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">        model_ft.avgpool = nn.AdaptiveAvgPool2d((<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line">        self.model = model_ft</span><br><span class="line">        self.classifier = ClassBlock(<span class="number">2048</span>, class_num, droprate)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x = self.model.conv1(x)</span><br><span class="line">        x = self.model.bn1(x)</span><br><span class="line">        x = self.model.relu(x)</span><br><span class="line">        x = self.model.maxpool(x)</span><br><span class="line">        x = self.model.layer1(x)</span><br><span class="line">        x = self.model.layer2(x)</span><br><span class="line">        x = self.model.layer3(x)</span><br><span class="line">        x = self.model.layer4(x)</span><br><span class="line">        x = self.model.avgpool(x)</span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), x.size(<span class="number">1</span>))</span><br><span class="line">        x = self.classifier(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><p>更多细节在model.py中，里面还包含了其他的预训练模型以及对应的修改方法。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行人重识别 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行人重识别代码实战（一）</title>
      <link href="/2019/08/22/%E8%A1%8C%E4%BA%BA%E9%87%8D%E8%AF%86%E5%88%AB%E4%BB%A3%E7%A0%81%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/08/22/%E8%A1%8C%E4%BA%BA%E9%87%8D%E8%AF%86%E5%88%AB%E4%BB%A3%E7%A0%81%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="代码描述"><a href="#代码描述" class="headerlink" title="代码描述"></a><strong>代码描述</strong></h1><p><strong>代码来源：</strong> <a href="https://github.com/layumi/Person_reID_baseline_pytorch">https://github.com/layumi/Person_reID_baseline_pytorch</a></p><p><code>详细信息可见README.md</code></p><h1 id="prepare-py-文件简单讲解"><a href="#prepare-py-文件简单讲解" class="headerlink" title="prepare.py 文件简单讲解"></a>prepare.py 文件简单讲解</h1><p><strong>文件代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> shutil <span class="keyword">import</span> copyfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># You only need to change this line to your dataset download path</span></span><br><span class="line">download_path = <span class="string">'C:/Users/葛宇/学习/ReId/数据集/Market-1501-v15.09.15'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(download_path):</span><br><span class="line">    print(<span class="string">'please change the download_path'</span>)</span><br><span class="line"></span><br><span class="line">save_path = download_path + <span class="string">'/pytorch'</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(save_path):</span><br><span class="line">    os.mkdir(save_path)</span><br><span class="line"><span class="comment">#-----------------------------------------</span></span><br><span class="line"><span class="comment">#query</span></span><br><span class="line">query_path = download_path + <span class="string">'/query'</span></span><br><span class="line">query_save_path = download_path + <span class="string">'/pytorch/query'</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(query_save_path):</span><br><span class="line">    os.mkdir(query_save_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(query_path, topdown=<span class="literal">True</span>):</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name[<span class="number">-3</span>:]==<span class="string">'jpg'</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        ID  = name.split(<span class="string">'_'</span>)</span><br><span class="line">        src_path = query_path + <span class="string">'/'</span> + name</span><br><span class="line">        dst_path = query_save_path + <span class="string">'/'</span> + ID[<span class="number">0</span>] </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(dst_path):</span><br><span class="line">            os.mkdir(dst_path)</span><br><span class="line">        copyfile(src_path, dst_path + <span class="string">'/'</span> + name)</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------------------------------------</span></span><br><span class="line"><span class="comment">#multi-query</span></span><br><span class="line">query_path = download_path + <span class="string">'/gt_bbox'</span></span><br><span class="line"><span class="comment"># for dukemtmc-reid, we do not need multi-query</span></span><br><span class="line"><span class="keyword">if</span> os.path.isdir(query_path):</span><br><span class="line">    query_save_path = download_path + <span class="string">'/pytorch/multi-query'</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(query_save_path):</span><br><span class="line">        os.mkdir(query_save_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(query_path, topdown=<span class="literal">True</span>):</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> name[<span class="number">-3</span>:]==<span class="string">'jpg'</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            ID  = name.split(<span class="string">'_'</span>)</span><br><span class="line">            src_path = query_path + <span class="string">'/'</span> + name</span><br><span class="line">            dst_path = query_save_path + <span class="string">'/'</span> + ID[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(dst_path):</span><br><span class="line">                os.mkdir(dst_path)</span><br><span class="line">            copyfile(src_path, dst_path + <span class="string">'/'</span> + name)</span><br><span class="line"></span><br><span class="line"><span class="comment">#-----------------------------------------</span></span><br><span class="line"><span class="comment">#gallery</span></span><br><span class="line">gallery_path = download_path + <span class="string">'/bounding_box_test'</span></span><br><span class="line">gallery_save_path = download_path + <span class="string">'/pytorch/gallery'</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(gallery_save_path):</span><br><span class="line">    os.mkdir(gallery_save_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(gallery_path, topdown=<span class="literal">True</span>):</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name[<span class="number">-3</span>:]==<span class="string">'jpg'</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        ID  = name.split(<span class="string">'_'</span>)</span><br><span class="line">        src_path = gallery_path + <span class="string">'/'</span> + name</span><br><span class="line">        dst_path = gallery_save_path + <span class="string">'/'</span> + ID[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(dst_path):</span><br><span class="line">            os.mkdir(dst_path)</span><br><span class="line">        copyfile(src_path, dst_path + <span class="string">'/'</span> + name)</span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------------</span></span><br><span class="line"><span class="comment">#train_all</span></span><br><span class="line">train_path = download_path + <span class="string">'/bounding_box_train'</span></span><br><span class="line">train_save_path = download_path + <span class="string">'/pytorch/train_all'</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(train_save_path):</span><br><span class="line">    os.mkdir(train_save_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(train_path, topdown=<span class="literal">True</span>):</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name[<span class="number">-3</span>:]==<span class="string">'jpg'</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        ID  = name.split(<span class="string">'_'</span>)</span><br><span class="line">        src_path = train_path + <span class="string">'/'</span> + name</span><br><span class="line">        dst_path = train_save_path + <span class="string">'/'</span> + ID[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(dst_path):</span><br><span class="line">            os.mkdir(dst_path)</span><br><span class="line">        copyfile(src_path, dst_path + <span class="string">'/'</span> + name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#---------------------------------------</span></span><br><span class="line"><span class="comment">#train_val</span></span><br><span class="line">train_path = download_path + <span class="string">'/bounding_box_train'</span></span><br><span class="line">train_save_path = download_path + <span class="string">'/pytorch/train'</span></span><br><span class="line">val_save_path = download_path + <span class="string">'/pytorch/val'</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(train_save_path):</span><br><span class="line">    os.mkdir(train_save_path)</span><br><span class="line">    os.mkdir(val_save_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(train_path, topdown=<span class="literal">True</span>):</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name[<span class="number">-3</span>:]==<span class="string">'jpg'</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        ID  = name.split(<span class="string">'_'</span>)</span><br><span class="line">        src_path = train_path + <span class="string">'/'</span> + name</span><br><span class="line">        dst_path = train_save_path + <span class="string">'/'</span> + ID[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(dst_path):</span><br><span class="line">            os.mkdir(dst_path)</span><br><span class="line">            dst_path = val_save_path + <span class="string">'/'</span> + ID[<span class="number">0</span>]  <span class="comment">#first image is used as val image</span></span><br><span class="line">            os.mkdir(dst_path)</span><br><span class="line">        copyfile(src_path, dst_path + <span class="string">'/'</span> + name)</span><br></pre></td></tr></table></figure><p><strong>代码比较冗长，我总结一下。</strong><br>这个脚本的作用是将原始数据集重新按图片ID分类。主要操作是通过调用系统函数加之必要的循环判断来实现。可不必细究。运行之前先将第五行<code>download_path = &#39;C:/Users/葛宇/学习/ReId/数据集/Market-1501-v15.09.15&#39;</code>改为你自己的地址。<br>按照原作者的使用教程，第一步要做的就是运行prepare.py文件。<br>运行之后会发现在原先的Market1501数据集中（详见之前的博客）多出了一个文件夹“pytorch”,打开看看：</p><p><img src="https://s1.ax1x.com/2022/09/05/vT2hNV.png" alt></p><p>里面是6个文件夹：</p><ol><li>gallery中包含752个文件夹项目，均按ID排序：<img src="https://s1.ax1x.com/2022/09/05/vT24hT.png" alt></li><li>multi中是1051个文件夹项目，从0001到1501</li><li>query中包含750个文件项目，不含0000和-1</li><li>train中包含751个文件项目，不含0000和-1</li><li>train all中包含751个文件项目，不含0000和-1</li><li>val中包含751个文件项目，不含0000和-1</li></ol><p>具体情况可以自己尝试打开观察。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行人重识别 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Person Re-identification数据集描述——Market-1501</title>
      <link href="/2019/07/31/Person%20Re-identification%E6%95%B0%E6%8D%AE%E9%9B%86%E6%8F%8F%E8%BF%B0%E2%80%94%E2%80%94Market-1501/"/>
      <url>/2019/07/31/Person%20Re-identification%E6%95%B0%E6%8D%AE%E9%9B%86%E6%8F%8F%E8%BF%B0%E2%80%94%E2%80%94Market-1501/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="http://changingfond.oss-cn-hangzhou.aliyuncs.com/18-7-12/87140649.jpg" alt></p><h1 id="数据集简介"><a href="#数据集简介" class="headerlink" title="数据集简介"></a>数据集简介</h1><p><strong>Market-1501</strong> 数据集在清华大学校园中采集，夏天拍摄，在 2015 年构建并公开。它包括由6个摄像头（其中5个高清摄像头和1个低清摄像头）拍摄到的 1501 个行人、32668 个检测到的行人矩形框。每个行人至少由2个摄像头捕获到，并且在一个摄像头中可能具有多张图像。训练集有 751 人，包含 12,936 张图像，平均每个人有 17.2 张训练数据；测试集有 750 人，包含 19,732 张图像，平均每个人有 26.3 张测试数据。3368 张查询图像的行人检测矩形框是人工绘制的，而 gallery 中的行人检测矩形框则是使用DPM检测器检测得到的。该数据集提供的固定数量的训练集和测试集均可以在single-shot或multi-shot测试设置下使用。</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>Market-1501<br>　　├── bounding_box_test<br>　　　　　　　├── 0000_c1s1_000151_01.jpg<br>　　　　　　　├── 0000_c1s1_000376_03.jpg<br>　　　　　　　├── 0000_c1s1_001051_02.jpg<br>　　├── bounding_box_train<br>　　　　　　　├── 0002_c1s1_000451_03.jpg<br>　　　　　　　├── 0002_c1s1_000551_01.jpg<br>　　　　　　　├── 0002_c1s1_000801_01.jpg<br>　　├── gt_bbox<br>　　　　　　　├── 0001_c1s1_001051_00.jpg<br>　　　　　　　├── 0001_c1s1_009376_00.jpg<br>　　　　　　　├── 0001_c2s1_001976_00.jpg<br>　　├── gt_query<br>　　　　　　　├── 0001_c1s1_001051_00_good.mat<br>　　　　　　　├── 0001_c1s1_001051_00_junk.mat<br>　　├── query<br>　　　　　　　├── 0001_c1s1_001051_00.jpg<br>　　　　　　　├── 0001_c2s1_000301_00.jpg<br>　　　　　　　├── 0001_c3s1_000551_00.jpg<br>　　└── readme.txt</p><h2 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h2><ul><li><strong>“bounding_box_test”</strong>——用于测试集的 750 人，包含 19,732 张图像，前缀为 0000 表示在提取这 750 人的过程中DPM检测错的图（可能与query是同一个人），-1 表示检测出来其他人的图（不在这 750 人中）</li></ul><ul><li><p><strong>“bounding_box_train”</strong>——用于训练集的 751 人，包含 12,936 张图像</p></li><li><p><strong>“query”</strong>——为 750 人在每个摄像头中随机选择一张图像作为query，因此一个人的query最多有 6 个，共有 3,368 张图像</p></li><li><p><strong>“gt_query”</strong>——matlab格式，用于判断一个query的哪些图片是好的匹配（同一个人不同摄像头的图像）和不好的匹配（同一个人同一个摄像头的图像或非同一个人的图像）</p></li><li><p><strong>“gt_bbox”</strong>——手工标注的bounding box，用于判断DPM检测的bounding box是不是一个好的box</p></li></ul><h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><p><strong>以 0001_c1s1_000151_01.jpg 为例</strong></p><ul><li>0001 表示每个人的标签编号，从0001到1501；</li><li>c1 表示第一个摄像头(camera1)，共有6个摄像头；</li><li>s1 表示第一个录像片段(sequece1)，每个摄像机都有数个录像段；</li><li>000151 表示 c1s1 的第000151帧图片，视频帧率25fps；</li><li>01 表示 c1s1_001051 这一帧上的第1个检测框，由于采用DPM检测器，对于每一帧上的行人可能会框出好几个bbox。00 表示手工标注框</li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li>Zheng, Liang, et al. “Scalable Person Re-identification: A Benchmark.” IEEE International Conference on Computer Vision IEEE Computer Society, 2015:1116-1124.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行人重识别 </tag>
            
            <tag> 数据集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行人重识别初识</title>
      <link href="/2019/07/31/%E8%A1%8C%E4%BA%BA%E9%87%8D%E8%AF%86%E5%88%AB%E5%88%9D%E8%AF%86/"/>
      <url>/2019/07/31/%E8%A1%8C%E4%BA%BA%E9%87%8D%E8%AF%86%E5%88%AB%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="https://s1.ax1x.com/2022/09/05/vTRHG8.png" alt></p><h1 id="行人重识别是什么？"><a href="#行人重识别是什么？" class="headerlink" title="行人重识别是什么？"></a>行人重识别是什么？</h1><p><strong>行人重识别（Person re-identification）</strong>也称行人再识别，是利用计算机视觉技术判断图像或者视频序列中是否存在特定行人的技术。广泛被认为是一个图像检索的子问题。给定一个监控行人图像，检索跨设备下的该行人图像。旨在弥补目前固定的摄像头的视觉局限，并可与行人检测/行人跟踪技术相结合，可广泛应用于智能视频监控、智能安保等领域。由于不同摄像设备之间的差异，同时行人兼具刚性和柔性的特性 ，外观易受穿着、尺度、遮挡、姿态和视角等影响，使得行人重识别成为计算机视觉领域中一个既具有研究价值同时又极具挑战性的热门课题。</p><hr><h1 id="技术难点"><a href="#技术难点" class="headerlink" title="技术难点"></a>技术难点</h1><ul><li><p><strong>能不能用人脸识别做重识别？</strong><br>理论上是可以的。但是有两个原因导致人脸识别较难应用：首先，广泛存在后脑勺和侧脸的情况，做正脸的人脸识别难。其次，摄像头拍摄的像素可能不高，尤其是远景摄像头里面人脸截出来很可能都没有32x32的像素。所以人脸识别在实际的重识别应用中很可能有限。</p></li><li><p><strong>有些人靠衣服的颜色就可以判断出来了，还需要行人重识别么？</strong><br>衣服颜色确实是行人重识别做出判断一个重要因素，但光靠颜色是不足的。首先，摄像头之间是有色差，并且会有光照的影响。其次，有撞衫（颜色相似）的人怎么办，要找细节，但比如颜色直方图这种统计的特征就把细节给忽略了。在多个数据集上的测试表明，光用颜色特征是难以达到50%的top1正确率的。</p></li><li><p><strong>总结</strong>：</p></li></ul><ol><li>不同下摄像头造成行人外观的巨大变化；</li><li>目标遮挡（Occlusion）导致部分特征丢失；</li><li>不同的 View，Illumination 导致同一目标的特征差异；</li><li>不同目标衣服颜色近似、特征近似导致区分度下降；</li></ol><hr><h1 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h1><h2 id="基于部件匹配的方法"><a href="#基于部件匹配的方法" class="headerlink" title="基于部件匹配的方法"></a>基于部件匹配的方法</h2><p>** 基于人体在三维空间中的结构（结构信息），人体图像可以进行分割，按部件来执行匹配。**</p><ul><li>常见方案是水平切割，就是将图像切为几个水平的条。由于人体身材往往差不多，所以可以用简单的水平条来做一一比较。</li><li>在领域中做匹配，采用的是一个正方形的邻域。</li><li>另一个较新的方案是先在人体上检测部件（手，腿，躯干等等）再进行匹配，这样的话可以减少位置的误差，但可能引入检测部件的误差。</li><li>类似LSTM的attention匹配，但必须pair输入，测试时间较长，不适合快速图像检索。</li><li>如图，类似人脸对齐，使用STN 将行人整个图像先利用热度图对齐，再匹配。<br><img src="https://s1.ax1x.com/2022/09/05/vTR7Pf.png" alt><h2 id="基于损失函数的方法"><a href="#基于损失函数的方法" class="headerlink" title="基于损失函数的方法"></a>基于损失函数的方法</h2></li></ul><p><strong>基于高层语义信息，设置一些辅助任务，帮助模型学习到好的特征表达。</strong></p><ul><li>身份损失（Identification loss）直接拿身份label做多类分类。</li><li>鉴定损失（Verification loss）比较两个输入图像是否为同一人。</li><li>身份损失（Identification loss）+鉴定损失（Verification loss），将以上两种损失函数混合。</li><li>三样本损失 （Triplet loss） 以3个样本为一组，同一人的图像特征距离应小于不同人。</li><li>加入属性任务 （attribute）比如判断是否背包，是男生还是女生等等。人们遇见陌生人也是利用这些属性来描述。</li><li>数据增强 混合多数据集训练 ，加入训练集上 生成对抗网络（GAN）生成的数据，如图：<br><img src="https://s1.ax1x.com/2022/09/05/vTRfrd.png" alt></li></ul><h1 id="识别机制"><a href="#识别机制" class="headerlink" title="识别机制"></a>识别机制</h1><p><strong>如图</strong><br> <img src="https://s1.ax1x.com/2022/09/05/vTR5VI.png" alt><br>首先要做的是<strong>Detection</strong>，也就是检测出行人，其实这一步数据集已经帮我们做到了，下面介绍数据集的时候会讲到不同数据集采用的不同的目标检测方法以及ID的标注方式。剩下的部分，就是要去<strong>训练一个特征提取网络</strong>，根据特征所计算的度量距离得到损失值，我们选用一个优化器去迭代找到loss最小值，并不断更新网络的参数达到学习的效果。在测试的时候，我们用将要检索的图片（称为<strong>query</strong>或者<strong>probe</strong>），在<strong>底库gallery</strong>中，根据计算出的特征距离进行排序，选出最TOP的几张图片，来达到目标检索的目的。</p><p>下面两张图分别是<strong>训练阶段</strong>和<strong>测试阶段</strong>的示意图：<br> <img src="https://s1.ax1x.com/2022/09/05/vTRrUx.png" alt><br>** 训练阶段**<br>  <img src="https://s1.ax1x.com/2022/09/05/vTR6PK.png" alt></p><hr><h1 id="评测指标"><a href="#评测指标" class="headerlink" title="评测指标"></a>评测指标</h1><h2 id="rank-k"><a href="#rank-k" class="headerlink" title="rank-k"></a>rank-k</h2><p><code>算法返回的排序列表中，前k位为存在检索目标则称为rank-k命中</code><br><strong>举个例子:</strong><br>假如在人脸识别中，底库中有100个人，现在来了1个待识别的人脸（假如label为m1），与底库中的人脸比对后将底库中的人脸按照得分从高到低进行排序，我们发现：<br>如果识别结果是m1、m2、m3、m4、m5……，则此时rank-1的正确率为100%；rank-2的正确率也为100%；rank-5的正确率也为100%；<br>如果识别结果是m2、m1、m3、m4、m5……，则此时rank-1的正确率为0%；rank-2的正确率为100%；rank-5的正确率也为100%；<br>如果识别结果是m2、m3、m4、m5、m1……，则此时rank-1的正确率为0%；rank-2的正确率为0%；rank-5的正确率为100%；<br>同理，当待识别的人脸集合有很多时，则采取取平均值的做法。例如待识别人脸有3个（假如label为m1，m2，m3），同样对每一个人脸都有一个从高到低的得分，<br><strong>比如：</strong><br>人脸1结果为m1、m2、m3、m4、m5……，<br>人脸2结果为m2、m1、m3、m4、m5……，<br>人脸3结果m3、m1、m2、m4、m5……，<br>则此时rank-1的正确率为（1+1+1）/3=100%；<br>rank-2的正确率也为（1+1+1）/3=100%；<br>rank-5的正确率也为（1+1+1）/3=100%；<br><strong>比如：</strong><br>人脸1结果为m4、m2、m3、m5、m6……，<br>人脸2结果为m1、m2、m3、m4、m5……，<br>人脸3结果m3、m1、m2、m4、m5……，<br>则此时rank-1的正确率为（0+0+1）/3=33.33%；<br>rank-2的正确率为（0+1+1）/3=66.66%；<br>rank-5的正确率也为（0+1+1）/3=66.66%；</p><h2 id="mAP-mean-average-precision"><a href="#mAP-mean-average-precision" class="headerlink" title="mAP(mean average precision)"></a>mAP(mean average precision)</h2><p>反应检索的人在数据库中所有正确的图片排在排序列表前面的程度，能更加全面的衡量ReID算法的性能。如下图，假设该检索行人在gallery中有10张图片，在检索的list中位置（rank）分别为1、2、3、4、5、6、7、8、9，则ap为(1/ 1 + 2 / 2 + 3 / 3 + 4 / 4 + 5 / 5 + 6 / 6 + 7 / 7 + 8 / 8 + 9 / 9) / 10 = 0.90；ap较大时，该行人的检索结果都相对靠前，对所有query的ap取平均值得到mAP<br> <img src="https://s1.ax1x.com/2022/09/05/vTRc8O.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行人重识别 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于ReLU的问题&amp;思考</title>
      <link href="/2019/07/16/%E5%85%B3%E4%BA%8EReLU%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E6%80%9D%E8%80%83/"/>
      <url>/2019/07/16/%E5%85%B3%E4%BA%8EReLU%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><strong>今天看完🐟书后回头捋了一下，突然对ReLU激活函数产生了疑问。</strong></p><h2 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h2><p><strong>试想一下有X1，X2两个输入，对应三个输出的简易网络：</strong></p><p><img src="https://s1.ax1x.com/2022/09/05/vTWizF.png" alt="eg net" title="markdown"></p><p>根据对应把权值W设为W11,W12,W13…W23<br><strong>显然通过矩阵运算：</strong></p><blockquote><p>Y1=W11·X1+W21·X2<br>Y2=W12·X1+W22·X2<br>Y3=W13·X1+W23·X2</p></blockquote><p>所得到的表达式依旧是X的<strong>线性表达式</strong><br>之后通过<strong>ReLU层</strong>（这里假设都&gt;0）<br>因为Y1，Y2，Y3＞0，故输出不变：</p><blockquote><p>Y1=W11·X1+W21·X2<br>Y2=W12·X1+W22·X2<br>Y3=W13·X1+W23·X2</p></blockquote><h2 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h2><p>我们知道引入激活函数的目的是为了<strong>使层神经网络表达能力就更加强大（不再是输入的线性组合，而是几乎可以逼近任意函数，详见上篇Blog）</strong>，而通过小实验发现，ReLU好像并没有改变原式的线性结构，反而是原式输出。那么是否有悖机器学习的原理呢？</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>首先肯定一点：<strong>上面的实验确实反映了ReLU没有改变实验对象的线性结构。</strong></p><h3 id="下面细说："><a href="#下面细说：" class="headerlink" title="下面细说："></a>下面细说：</h3><p>首先观察实验，实验的基础是Y1,Y2,Y3＞0这个条件，在这个条件下显然是等价于恒等函数的。也就是说Y被原样加工。因为原来的表达式是线性结构，所以激活之后依旧是线性结构。但是，这并不能说明ReLU对增强神经网络的表现力无用。</p><p>事实是，参与训练的数据首先不止2个（参考MNIST数据集，训练输入就6万个），其次对权值w的初始化是按标准差为0.01的高斯分布来进行的，<strong>这就肯定输入ReLU层的数据不恒正</strong>！<br><img src="https://s1.ax1x.com/2022/09/05/vTWkM4.png" alt="高斯分布" title="Pandao editor.md"><br>而小于0的则被赋值0，这意味着什么呢？<strong>线性结构被破坏！</strong></p><p>用<strong>矛盾推理法</strong>来想一下这个问题（假设ReLU不改变线性结构）：</p><ul><li>那么应改满足F(X)=M·X（矩阵乘法）——&gt;ReLU ——&gt;M·X——&gt;G(F(X))=N·M·X——&gt;ReLU ——&gt;N·M·X…</li><li>可事实是：权值的正态性不保证每次输入都是正值，所以中间会出现等于0的情况</li><li>也就是F(X)=M·X（矩阵乘法）——&gt;<strong>ReLU ——&gt;0——&gt;G(0）！=N·M·X</strong>——&gt;…</li><li>显然线性传递被中断</li><li>或者说形成了一个新的线性空间，新空间与恒等线性空间互相无法表示，使整个空间呈非线性结构</li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神经网络 </tag>
            
            <tag> 激活函数 </tag>
            
            <tag> 代数系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>🐟书踩坑（一）</title>
      <link href="/2018/09/20/%E9%B1%BC%E4%B9%A6%E8%B8%A9%E5%9D%91%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2018/09/20/%E9%B1%BC%E4%B9%A6%E8%B8%A9%E5%9D%91%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="废话不多说，俺先讲一下来龙去脉"><a href="#废话不多说，俺先讲一下来龙去脉" class="headerlink" title="废话不多说，俺先讲一下来龙去脉~"></a>废话不多说，俺先讲一下来龙去脉~</h2><p>今天看鱼书P108页，遇到一个想不通的地方，我先放一波源码：<br><del>（不了解的小伙伴看上一篇博文，有源码连接）</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> sys, os</span><br><span class="line">sys.path.append(os.pardir)  <span class="comment"># 为了导入父目录中的文件而进行的设定</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> common.functions <span class="keyword">import</span> softmax, cross_entropy_error</span><br><span class="line"><span class="keyword">from</span> common.gradient <span class="keyword">import</span> numerical_gradient</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">simpleNet</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.W = np.random.randn(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> np.dot(x, self.W)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loss</span><span class="params">(self, x, t)</span>:</span></span><br><span class="line">        z = self.predict(x)</span><br><span class="line">        y = softmax(z)</span><br><span class="line">        loss = cross_entropy_error(y, t)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> loss</span><br><span class="line"></span><br><span class="line">x = np.array([<span class="number">0.6</span>, <span class="number">0.9</span>])</span><br><span class="line">t = np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">net = simpleNet()</span><br><span class="line"></span><br><span class="line">f = <span class="keyword">lambda</span> w: net.loss(x, t)</span><br><span class="line">dW = numerical_gradient(f, net.W)</span><br><span class="line"></span><br><span class="line">print(dW)</span><br></pre></td></tr></table></figure><p>没错，这个是一个求神经网络梯度 w 的简单脚本。</p><p>如你所见，文件头也import了许多外部函数，下面贴其中一个比较重要的外部函数：</p><p><strong>numerical_gradient函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numerical_gradient</span><span class="params">(f, x)</span>:</span></span><br><span class="line">    h = <span class="number">1e-4</span> <span class="comment"># 0.0001</span></span><br><span class="line">    grad = np.zeros_like(x)</span><br><span class="line">    </span><br><span class="line">    it = np.nditer(x, flags=[<span class="string">'multi_index'</span>], op_flags=[<span class="string">'readwrite'</span>])</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> it.finished:</span><br><span class="line">        idx = it.multi_index</span><br><span class="line">        tmp_val = x[idx]</span><br><span class="line">        x[idx] = float(tmp_val) + h</span><br><span class="line">        fxh1 = f(x) <span class="comment"># f(x+h)</span></span><br><span class="line">        </span><br><span class="line">        x[idx] = tmp_val - h </span><br><span class="line">        fxh2 = f(x) <span class="comment"># f(x-h)</span></span><br><span class="line">        grad[idx] = (fxh1 - fxh2) / (<span class="number">2</span>*h)</span><br><span class="line">        </span><br><span class="line">        x[idx] = tmp_val <span class="comment"># 还原值</span></span><br><span class="line">        it.iternext()   </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> grad</span><br></pre></td></tr></table></figure><h2 id="下面讲讲这个坑"><a href="#下面讲讲这个坑" class="headerlink" title="下面讲讲这个坑"></a>下面讲讲这个坑</h2><p>小伙子们注意看第一段代码28，29两行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> w: net.loss(x, t)</span><br><span class="line">dW = numerical_gradient(f, net.W)</span><br></pre></td></tr></table></figure><p>函数f中lambda表达式没什么问题，注意里面的参数 w ，仔细看，你会发现……卧槽！这不没jb卵用吗…<br>如果你这么想，那你跟年轻的我有的一拼，<del>too young,too simple</del></p><p>接着看下一行：<strong>dW = numerical_gradient(f, net.W)</strong>很显然调用了<strong>numerical_gradient函数</strong>，没毛病。但是，兄弟萌，请仔细看看<strong>numerical_gradient函数</strong>实现机制，你会发现：</p><blockquote><p>第13行：   fxh1 = f(x)<br>第16行：   fxh2 = f(x)<br>？？？？？？？？？？</p></blockquote><p>看不出问题吗？<br>注意：这里的f是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> w: net.loss(x, t)</span><br></pre></td></tr></table></figure><p>w是伪参数，没卵用，而x是<strong>net.W</strong>——神经网络的权重组成的数组，这尼玛驴头不对马嘴怎么就传给f了？？？而且f也不需要参数啊！</p><p>我是左思右想一下午，后来有了一个猜想来解释这段代码。</p><h2 id="猜想"><a href="#猜想" class="headerlink" title="猜想"></a>猜想</h2><p>我猜想fxh1 = f(x) ，fxh2 = f(x)括号里的x对程序根本没卵用，于是我大胆的删掉了x,变成：</p><blockquote><p>第13行：   fxh1 = f()<br>第16行：   fxh2 = f()</p></blockquote><p>当然为了保持兼容，也得把lambda表达式那个伪参数删了：</p><blockquote><p>f = lambda : net.loss(x, t)</p></blockquote><p>然后编译运行，结果…tmd就对了，你肯定觉得这是个坑，没错，我开始也觉得是坑，坑死我了。<br>后来浏览了后面的代码，发现了一些用<strong>numerical_gradient函数</strong>做测试脚本，其中测试的是一些简单函数的梯度问题，涉及到变量x所以<strong>numerical_gradient函数</strong>的x要保留。。。。。。相应的，神经网络求梯度就要顺着<strong>numerical_gradient函数</strong>，没必要再写一个，于是就加了伪参数w保证兼容。</p><p>最后俺深刻的明白：实践是检验真理的唯一标准<del>（早试试就不会浪费那么多时间了）</del></p><p><img src="http://r.photo.store.qq.com/psb?/V14eJTFY137vJk/5sLv1ifk0X3wKuPoH9lo.XgUnbenkVfUYF4G24tUjTE!/r/dMMAAAAAAAAA" alt="END" title="END"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 坑 </tag>
            
            <tag> python </tag>
            
            <tag> 神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于激活函数的理解</title>
      <link href="/2018/08/19/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2018/08/19/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="什么是激活函数："><a href="#什么是激活函数：" class="headerlink" title="什么是激活函数："></a>什么是激活函数：</h1><p>下午学完了神经网络误差的反向传播，心满意足看着满屏幕刚撸出来的Affine,Sigmoid,ReLU,Softmax……突然,心里发出一声疑问：<strong>激活函数有什么用？？？</strong>我慌了，我说不上来，但是隐隐约约能知道这玩意是干嘛的，本着一贯<del>刨根问底跑个稀烂</del>的作风,我决定彻底搞清楚！</p><h2 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h2><p>首先回到机器学习最初始的那个地方—–<strong>逻辑门（感知机表示）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#与门感知机</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">AND</span><span class="params">(x1,x2)</span>:</span></span><br><span class="line">    w1,w2,theta=<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.7</span></span><br><span class="line">    tmp=x1*w1+x2*w2</span><br><span class="line">    <span class="keyword">if</span> tmp&lt;=theta:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> tmp&gt;theta:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#Test</span></span><br><span class="line">AND(<span class="number">0</span>,<span class="number">0</span>)  <span class="comment">#输出0</span></span><br><span class="line">AND(<span class="number">1</span>,<span class="number">0</span>)  <span class="comment">#输出0</span></span><br><span class="line">AND(<span class="number">0</span>,<span class="number">1</span>)  <span class="comment">#输出0</span></span><br><span class="line">AND(<span class="number">1</span>,<span class="number">1</span>)  <span class="comment">#输出1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#或门感知机</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">OR</span><span class="params">(x1,x2)</span>:</span></span><br><span class="line">    w1,w2,theta=<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.2</span></span><br><span class="line">    tmp=x1*w1+x2*w2</span><br><span class="line">    <span class="keyword">if</span> tmp&lt;=theta:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> tmp&gt;theta:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#Test</span></span><br><span class="line">OR(<span class="number">0</span>,<span class="number">0</span>)  <span class="comment">#输出0</span></span><br><span class="line">OR(<span class="number">1</span>,<span class="number">0</span>)  <span class="comment">#输出1</span></span><br><span class="line">OR(<span class="number">0</span>,<span class="number">1</span>)  <span class="comment">#输出1</span></span><br><span class="line">OR(<span class="number">1</span>,<span class="number">1</span>)  <span class="comment">#输出1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#与非门感知机</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">NAND</span><span class="params">(x1,x2)</span>:</span></span><br><span class="line">    w1,w2,theta=<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.7</span></span><br><span class="line">    tmp=x1*w1+x2*w2</span><br><span class="line">    <span class="keyword">if</span> tmp&lt;=theta:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> tmp&gt;theta:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Test</span></span><br><span class="line">XOR(<span class="number">0</span>,<span class="number">0</span>)  <span class="comment">#输出1</span></span><br><span class="line">XOR(<span class="number">1</span>,<span class="number">0</span>)  <span class="comment">#输出1</span></span><br><span class="line">XOR(<span class="number">0</span>,<span class="number">1</span>)  <span class="comment">#输出1</span></span><br><span class="line">XOR(<span class="number">1</span>,<span class="number">1</span>)  <span class="comment">#输出0</span></span><br></pre></td></tr></table></figure><p>毫无技术含量，所以这里就不细讲代码。</p><p><strong>接下来看看如何表示异或门：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">XOR</span><span class="params">(x1,x2)</span>:</span></span><br><span class="line">    s1=NAND(x1,x2)</span><br><span class="line">    s2=OR(x1,x2)</span><br><span class="line">    y=AND(s1,s2)</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">XOR(<span class="number">0</span>,<span class="number">0</span>)   <span class="comment">#输出0</span></span><br><span class="line">XOR(<span class="number">1</span>,<span class="number">0</span>)   <span class="comment">#输出1</span></span><br><span class="line">XOR(<span class="number">0</span>,<span class="number">1</span>)   <span class="comment">#输出1</span></span><br><span class="line">XOR(<span class="number">1</span>,<span class="number">1</span>)   <span class="comment">#输出0</span></span><br></pre></td></tr></table></figure><p>显然异或门的实现借助了另外三个门！<br>下面从<strong>几何角度</strong>上看看异或门：<br><img src="https://s1.ax1x.com/2022/09/05/vTW3sH.png" alt="异或门区域" title="markdown"><br><strong>显然：异或门划分的空间是非线性的！而另外三个门划分都是线性的！</strong></p><p>现在再回头思考，发现通过对简单门的叠加，实现了非线性划分空间的复杂门！</p><h2 id="回到神经网络中"><a href="#回到神经网络中" class="headerlink" title="回到神经网络中"></a>回到神经网络中</h2><p>神经网络中，我们知道，隐藏层中主要是Affine层和各种激活函数层：<br><img src="https://s1.ax1x.com/2022/09/05/vTW8Ld.png" alt="net" title="markdown"><br>现在假设把激活函数都删掉，也就是说经过一层仿射变换后不加处理继续下一层仿射变换。</p><blockquote><p>比如：x-&gt;w·x=y-&gt;w’·y=z…（矩阵点乘）</p></blockquote><p>这样会有什么问题呢？很显然。</p><blockquote><p>注意： x-&gt;w·x=y-&gt;w’·y=z就相当于z=cx,其中c=w·w’</p></blockquote><p>这说明<strong>两层仿射变换后的表达式结构还是线性的！！</strong>同理n层之后还是线性！这简直是无用功！要记住，神经网络那么多层的目的是尽可能学习如何逼近数据，如果数据是非线性结构排布的，那叠加再多也毫无卵用！<br>所以现在再来看看这个问题：<strong>为什么需要激活函数？</strong></p><h2 id="总结一下："><a href="#总结一下：" class="headerlink" title="总结一下："></a>总结一下：</h2><p>如果不用激励函数（其实相当于激励函数是f(x) = x），在这种情况下你每一层节点的输入都是上层输出的线性函数，很容易验证，<strong>无论你神经网络有多少层，输出都是输入的线性组合</strong>，与没有隐藏层效果相当，这种情况就是最原始的感知机（Perceptron）了，那么网络的逼近能力就相当有限。正因为上面的原因，我们决定引入非线性函数作为激励函数，这样深层神经网络表达能力就更加强大（不再是输入的线性组合，而是<strong>几乎可以逼近任意函数</strong>）</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神经网络 </tag>
            
            <tag> 激活函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单的3层神经网络实现</title>
      <link href="/2018/08/19/%E7%AE%80%E5%8D%95%E7%9A%843%E5%B1%82%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/08/19/%E7%AE%80%E5%8D%95%E7%9A%843%E5%B1%82%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="使用sigmoid作为激活函数的极简3层神经网络-前向-范例"><a href="#使用sigmoid作为激活函数的极简3层神经网络-前向-范例" class="headerlink" title="使用sigmoid作为激活函数的极简3层神经网络(前向)范例"></a>使用sigmoid作为激活函数的极简3层神经网络(前向)范例</h2><h3 id="导入numpy库"><a href="#导入numpy库" class="headerlink" title="导入numpy库"></a>导入numpy库</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><h3 id="定义sigmoid函数"><a href="#定义sigmoid函数" class="headerlink" title="定义sigmoid函数"></a>定义sigmoid函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>/(<span class="number">1</span>+np.exp(-x))</span><br></pre></td></tr></table></figure><h3 id="初始化神经网络"><a href="#初始化神经网络" class="headerlink" title="初始化神经网络"></a>初始化神经网络</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_network</span><span class="params">()</span>:</span></span><br><span class="line">    network=&#123;&#125;</span><br><span class="line">    network[<span class="string">'w1'</span>]=np.array([[<span class="number">0.1</span>,<span class="number">0.3</span>,<span class="number">0.5</span>],[<span class="number">0.2</span>,<span class="number">0.4</span>,<span class="number">0.6</span>]])</span><br><span class="line">    network[<span class="string">'w2'</span>]=np.array([[<span class="number">0.1</span>,<span class="number">0.4</span>],[<span class="number">0.2</span>,<span class="number">0.5</span>],[<span class="number">0.3</span>,<span class="number">0.6</span>]])</span><br><span class="line">    network[<span class="string">'w3'</span>]=np.array([[<span class="number">0.1</span>,<span class="number">0.3</span>],[<span class="number">0.2</span>,<span class="number">0.4</span>]])</span><br><span class="line">    network[<span class="string">'b1'</span>]=np.array([<span class="number">0.1</span>,<span class="number">0.2</span>,<span class="number">0.3</span>])</span><br><span class="line">    network[<span class="string">'b2'</span>]=np.array([<span class="number">0.1</span>,<span class="number">0.2</span>])</span><br><span class="line">    network[<span class="string">'b3'</span>]=np.array([<span class="number">0.1</span>,<span class="number">0.2</span>])</span><br><span class="line">    <span class="keyword">return</span> network</span><br></pre></td></tr></table></figure><h3 id="定义神经网络"><a href="#定义神经网络" class="headerlink" title="定义神经网络"></a>定义神经网络</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(network,x)</span>:</span></span><br><span class="line">    w1,w2,w3=network[<span class="string">'w1'</span>],network[<span class="string">'w2'</span>],network[<span class="string">'w3'</span>]</span><br><span class="line">    b1,b2,b3=network[<span class="string">'b1'</span>],network[<span class="string">'b2'</span>],network[<span class="string">'b3'</span>]</span><br><span class="line">    </span><br><span class="line">    a1=np.dot(x,w1)+b1</span><br><span class="line">    z1=sigmoid(a1)</span><br><span class="line">    a2=np.dot(z1,w2)+b2</span><br><span class="line">    z2=sigmoid(a2)</span><br><span class="line">    a3=np.dot(z2,w3)+b3</span><br><span class="line">    y=a3</span><br><span class="line">    <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">network=init_network()</span><br><span class="line">x=np.array([<span class="number">1.0</span>,<span class="number">0.5</span>])</span><br><span class="line">y=forward(network,x)</span><br><span class="line">print(y)<span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/09/05/vTWyes.jpg" alt="神经网络" title="神经网络"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>感知机初识</title>
      <link href="/2018/08/10/%E6%84%9F%E7%9F%A5%E6%9C%BA%E5%88%9D%E8%AF%86/"/>
      <url>/2018/08/10/%E6%84%9F%E7%9F%A5%E6%9C%BA%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="感知机（perceptron"><a href="#感知机（perceptron" class="headerlink" title="感知机（perceptron)"></a>感知机（perceptron)</h1><p>感知机是神经网络（深度学习）的起源算法，学习感知机的构造是通向神经网络和深度学习的一种重要思想。</p><blockquote><p>严格讲，应该称为“人工神经元”或“朴素感知机”，但是因为很多基本的处理都是共通的，所以这里就简单地称为“感知机”。</p></blockquote><h2 id="原理简介："><a href="#原理简介：" class="headerlink" title="原理简介："></a>原理简介：</h2><p>感知机接收多个输入信号，输出一个信号。<br>这里所说的“信号”可以想 象成电流或河流那样具备“<strong>流动性</strong>”的东西。<br>像电流流过导线，向前方输送 电子一样，感知机的信号也会形成流，向前方输送信息。<br>但是，和实际的电 流不同的是，感知机的信号只有<strong>“流/不流”（1/0）</strong>两种取值。<br>0 对应“不传递信号”，1对应“传递信号”。</p><p><img src="http://r.photo.store.qq.com/psb?/V14eJTFY137vJk/Jb9LnAgcqtwC7udEtAvxtUYaeAQmdphrXHM8w98K9MQ!/r/dIoBAAAAAAAA" alt="net" title="markdown"></p><p><strong>如图</strong></p><ul><li>x<sub>1</sub> 、x<sub>2</sub>是输入信号，</li><li>y 是输出信号，</li><li>w<sub>1</sub>、w<sub>2</sub>是权重 （w 是 weight 的首字母）。</li><li>图中的○称为“神经元”或者“节点”。</li><li>输入信号被送往神经元时，会被分别乘以固定的权重（w<sub>1</sub> x<sub>1</sub> , w<sub>2</sub> x<sub>2</sub> ）。</li><li>神经元会计算传送过来的信号的总和，只有当这个总和超过 了某个界限值时，才会输出1（这也称为“神经元被激活）。</li><li>这里将这个界限值称为阈值，用符号θ表示。</li></ul><p>感知机的多个输入信号都有各自固有的权重，这些权重发挥着控制各个 信号的重要性的作用。也就是说，权重越大，对应该权重的信号的重要性就越高。<br>权重：相当于电流里的电阻。电阻是决定电流流动难度的参数， 电阻越低，通过的电流就越大。<br>而感知机的权重则是值越大，通过的信号就越大。<br>不管是电阻还是权重，在控制信号流动难度（或者流 动容易度）这一点上的作用都是一样的。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感知机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2015/01/20/hello-world/"/>
      <url>/2015/01/20/hello-world/</url>
      
        <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
